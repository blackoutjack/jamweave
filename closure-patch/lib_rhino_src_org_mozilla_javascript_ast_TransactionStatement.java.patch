--- closure-orig/lib/rhino/src/org/mozilla/javascript/ast/TransactionStatement.java	1969-12-31 18:00:00.000000000 -0600
+++ closure/lib/rhino/src/org/mozilla/javascript/ast/TransactionStatement.java	2014-01-22 21:42:47.100403991 -0600
@@ -0,0 +1,135 @@
+/* -*- Mode: java; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package org.mozilla.javascript.ast;
+
+import org.mozilla.javascript.Token;
+
+/**
+ * Transaction statement.  Node type is {@link Token#TRANSACTION}.<p>
+ *
+ * <pre><i>TransactionStatement</i> :
+ *       <b>introspect</b> ( Expression ) Statement</pre>
+ */
+public class TransactionStatement extends AstNode {
+
+    private AstNode handler;
+    private AstNode body;
+    private int lp = -1;
+    private int rp = -1;
+
+    {
+        type = Token.TRANSACTION;
+    }
+
+    public TransactionStatement() {
+    }
+
+    public TransactionStatement(int pos) {
+        super(pos);
+    }
+
+    public TransactionStatement(int pos, int len) {
+        super(pos, len);
+    }
+
+    /**
+     * Returns transaction handler
+     */
+    public AstNode getHandler() {
+        return handler;
+    }
+
+    /**
+     * Sets transaction handler
+     * @throws IllegalArgumentException if {@code handler} is {@code null}.
+     */
+    public void setHandler(AstNode handler) {
+        assertNotNull(handler);
+        this.handler = handler;
+        handler.setParent(this);
+    }
+
+    /**
+     * Returns statement block to execute within transaction.
+     */
+    public AstNode getBody() {
+        return body;
+    }
+
+    /**
+     * Sets statement block to execute within transaction
+     * @throws IllegalArgumentException if body is {@code null}
+     */
+    public void setBody(AstNode body) {
+        assertNotNull(body);
+        this.body = body;
+        body.setParent(this);
+    }
+
+    /**
+     * Returns left paren offset
+     */
+    public int getLp() {
+        return lp;
+    }
+
+    /**
+     * Sets left paren offset
+     */
+    public void setLp(int lp) {
+        this.lp = lp;
+    }
+
+    /**
+     * Returns right paren position, -1 if missing
+     */
+    public int getRp() {
+        return rp;
+    }
+
+    /**
+     * Sets right paren position, -1 if missing
+     */
+    public void setRp(int rp) {
+        this.rp = rp;
+    }
+
+    /**
+     * Sets both paren positions
+     */
+    public void setParens(int lp, int rp) {
+        this.lp = lp;
+        this.rp = rp;
+    }
+
+    @Override
+    public String toSource(int depth) {
+        String pad = makeIndent(depth);
+        StringBuilder sb = new StringBuilder(32);
+        sb.append(pad);
+        sb.append("introspect (");
+        sb.append(handler.toSource(0));
+        sb.append(") ");
+        if (body.getType() != Token.BLOCK) {
+            sb.append("\n").append(makeIndent(depth + 1));
+        }
+        sb.append(body.toSource(depth).trim());
+        sb.append("\n");
+        return sb.toString();
+    }
+
+    /**
+     * Visits this node, the handler and the body.
+     */
+    @Override
+    public void visit(NodeVisitor v) {
+        if (v.visit(this)) {
+            handler.visit(v);
+            body.visit(v);
+        }
+    }
+}
