--- closure-orig/lib/rhino/src/org/mozilla/javascript/Parser.java	2013-08-19 15:26:58.276335368 -0500
+++ closure/lib/rhino/src/org/mozilla/javascript/Parser.java	2014-05-02 22:52:01.705729410 -0500
@@ -1017,6 +1017,11 @@
               consumeToken();
               return function(FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
 
+          // JAM begin
+          case Token.TRANSACTION:
+              return transactionStatement();
+          // JAM end
+
           case Token.DEFAULT :
               pn = defaultXmlNamespace();
               break;
@@ -1065,6 +1070,39 @@
         }
     }
 
+    // JAM begin
+    private TransactionStatement transactionStatement()
+        throws IOException
+    {
+        if (currentToken != Token.TRANSACTION) codeBug();
+        consumeToken();
+        int pos = ts.tokenBeg, lineno = ts.lineno;
+
+        // Parse the left paren.
+        int lppos = -1;
+        if (mustMatchToken(Token.LP, "msg.no.paren.parms"))
+            lppos = ts.tokenBeg - pos;
+        // Get the argument expression that must evaluate to a function.
+        AstNode handler = expr();
+        // Parse the right paren.
+        int rppos = -1;
+        if (mustMatchToken(Token.RP, "msg.no.paren.after.parms"))
+            rppos = ts.tokenBeg - pos;
+
+        // Parse the transaction body statement block.
+        AstNode transactionBody = statement();
+
+        int end = getNodeEnd(transactionBody);
+        TransactionStatement pn = new TransactionStatement(pos, end - pos);
+        pn.setLineno(lineno);
+        pn.setLp(lppos);
+        pn.setHandler(handler);
+        pn.setRp(rppos);
+        pn.setBody(transactionBody);
+        return pn;
+    }
+    // JAM end
+
     private IfStatement ifStatement()
         throws IOException
     {
@@ -2732,6 +2770,11 @@
           case Token.FUNCTION:
               return function(FunctionNode.FUNCTION_EXPRESSION);
 
+          // JAM begin
+          case Token.TRANSACTION:
+              return transactionStatement();
+          // JAM end
+
           case Token.LB:
               return arrayLiteral();
 
