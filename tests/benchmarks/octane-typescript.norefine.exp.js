function v1409() {
  function v1408(soruceFiles) {
    function v1407(sf$$1) {
      var v1410 = sf$$1.path;
      JAMScript.call(resolvedFiles.push, resolvedFiles, [v1410]);
      var v1411 = sf$$1.path;
      addWatcher(v1411);
      return
    }
    function onWatchedFileChange() {
      function v1406(f$$1) {
        var v1412 = _this$$24.ioHost;
        var v1413 = "    " + f$$1;
        return JAMScript.call(v1412.printLine, v1412, [v1413])
      }
      function v1405(sf) {
        var v1414 = sf.path;
        return JAMScript.call(newFiles.push, newFiles, [v1414])
      }
      var v1415 = _this$$24.compilationEnvironment;
      v1415.code = soruceFiles;
      var v1416 = _this$$24;
      var v12364;
      var v22824 = _this$$24.compilationSettings;
      var v18669 = v22824.resolve;
      if(v18669) {
        v12364 = JAMScript.call(_this$$24.resolve, _this$$24, [])
      }else {
        v12364 = _this$$24.compilationEnvironment
      }
      v1416.resolvedEnvironment = v12364;
      var oldFiles = resolvedFiles;
      var newFiles = [];
      var v12365 = _this$$24.resolvedEnvironment;
      var v1417 = v12365.code;
      v1417.forEach(v1405);
      newFiles = newFiles.sort();
      var i$$149 = 0;
      var j$$21 = 0;
      var v18670 = oldFiles.length;
      var v12366 = i$$149 < v18670;
      if(v12366) {
        var v18671 = newFiles.length;
        v12366 = j$$21 < v18671
      }
      var v1424 = v12366;
      for(;v1424;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v1418 = oldFiles[i$$149]
        }
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v1419 = newFiles[j$$21]
        }
        var compareResult = v1418.localeCompare(v1419);
        var v1423 = compareResult == 0;
        if(v1423) {
          i$$149 = i$$149 + 1;
          j$$21 = j$$21 + 1
        }else {
          var v1422 = compareResult < 0;
          if(v1422) {
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v1420 = oldFiles[i$$149]
            }
            removeWatcher(v1420);
            i$$149 = i$$149 + 1
          }else {
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v1421 = newFiles[j$$21]
            }
            addWatcher(v1421);
            j$$21 = j$$21 + 1
          }
        }
        var v18672 = oldFiles.length;
        var v12367 = i$$149 < v18672;
        if(v12367) {
          var v18673 = newFiles.length;
          v12367 = j$$21 < v18673
        }
        v1424 = v12367
      }
      var k$$15 = i$$149;
      var v12368 = oldFiles.length;
      var v1426 = k$$15 < v12368;
      for(;v1426;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v1425 = oldFiles[k$$15]
        }
        removeWatcher(v1425);
        k$$15 = k$$15 + 1;
        var v12369 = oldFiles.length;
        v1426 = k$$15 < v12369
      }
      k$$15 = j$$21;
      var v12370 = newFiles.length;
      var v1428 = k$$15 < v12370;
      for(;v1428;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v1427 = newFiles[k$$15]
        }
        addWatcher(v1427);
        k$$15 = k$$15 + 1;
        var v12371 = newFiles.length;
        v1428 = k$$15 < v12371
      }
      resolvedFiles = newFiles;
      var v1429 = _this$$24.ioHost;
      JAMScript.call(v1429.printLine, v1429, [""]);
      var v1430 = _this$$24.ioHost;
      var v18674 = new Date;
      var v12372 = "Recompiling (" + v18674;
      var v1431 = v12372 + "): ";
      JAMScript.call(v1430.printLine, v1430, [v1431]);
      resolvedFiles.forEach(v1406);
      var hasCompileErrors$$1 = JAMScript.call(_this$$24.compile, _this$$24, []);
      var v1432 = hasCompileErrors$$1;
      var v12373 = !v1432;
      if(v12373) {
        v1432 = _this$$24.hasResolveErrors
      }
      var hasErrors$$1 = v1432;
      var v1434 = !hasErrors$$1;
      if(v1434) {
        var v12374 = _this$$24.compilationSettings;
        var v1433 = v12374.exec;
        if(v1433) {
          JAMScript.call(_this$$24.run, _this$$24, [])
        }
      }
      return
    }
    function removeWatcher(filename$$14) {
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v1436 = watchers[filename$$14]
      }
      if(v1436) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v1435 = watchers[filename$$14]
        }
        JAMScript.call(v1435.close, v1435, []);
        delete watchers[filename$$14]
      }else {
        throw new Error("Cannot stop watching file, it is not being watched.");
      }
      return
    }
    function addWatcher(filename$$13) {
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v12375 = watchers[filename$$13]
      }
      var v1438 = !v12375;
      if(v1438) {
        var v1437 = _this$$24.ioHost;
        var watcher = JAMScript.call(v1437.watchFile, v1437, [filename$$13, onWatchedFileChange]);
        JAMScript.set(watchers, filename$$13, watcher)
      }else {
        throw new Error("Cannot watch file, it is already watched.");
      }
      return
    }
    var _this$$24 = this;
    var v18675 = this.ioHost;
    var v12376 = v18675.watchFile;
    var v1440 = !v12376;
    if(v1440) {
      var v1439 = this.ioHost;
      JAMScript.call(v1439.printLine, v1439, ["Error: Current host does not support -w[atch] option"]);
      return
    }
    var resolvedFiles = [];
    var watchers = {};
    var v1441 = this.ioHost;
    var v12377 = this.ioHost;
    v1441.stderr = v12377.stdout;
    var v12378 = this.resolvedEnvironment;
    var v1442 = v12378.code;
    v1442.forEach(v1407);
    resolvedFiles.sort();
    return
  }
  function v1404() {
    var v12379 = this.printedVersion;
    var v1445 = !v12379;
    if(v1445) {
      var v1443 = this.ioHost;
      var v12380 = this.compilerVersion;
      var v1444 = "Version " + v12380;
      JAMScript.call(v1443.printLine, v1443, [v1444]);
      this.printedVersion = true
    }
    return
  }
  function v1403() {
    function v1402() {
      JAMScript.call(_this$$23.printVersion, _this$$23, []);
      return
    }
    function v1401() {
      var v1446 = _this$$23.compilationSettings;
      v1446.useCaseSensitiveFileResolution = true;
      return
    }
    function v1400() {
      JAMScript.call(_this$$23.printVersion, _this$$23, []);
      JAMScript.call(opts$$1.printUsage, opts$$1, []);
      printedUsage = true;
      return
    }
    function v1399(type$$63) {
      type$$63 = type$$63.toLowerCase();
      var v12381 = type$$63 === "commonjs";
      var v18676 = !v12381;
      if(v18676) {
        v12381 = type$$63 === "node"
      }
      var v1452 = v12381;
      if(v1452) {
        var v1447 = TypeScript;
        var v12382 = TypeScript.ModuleGenTarget;
        v1447.moduleGenTarget = v12382.Synchronous
      }else {
        var v1451 = type$$63 === "amd";
        if(v1451) {
          var v1448 = TypeScript;
          var v12383 = TypeScript.ModuleGenTarget;
          v1448.moduleGenTarget = v12383.Asynchronous
        }else {
          var v1449 = _this$$23.ioHost;
          var v12384 = "Module code generation '" + type$$63;
          var v1450 = v12384 + "' not supported.  Using default 'commonjs' code generation";
          JAMScript.call(v1449.printLine, v1449, [v1450])
        }
      }
      return
    }
    function v1398(type$$62) {
      type$$62 = type$$62.toLowerCase();
      var v1458 = type$$62 === "es3";
      if(v1458) {
        var v1453 = _this$$23.compilationSettings;
        var v12385 = TypeScript.CodeGenTarget;
        v1453.codeGenTarget = v12385.ES3
      }else {
        var v1457 = type$$62 === "es5";
        if(v1457) {
          var v1454 = _this$$23.compilationSettings;
          var v12386 = TypeScript.CodeGenTarget;
          v1454.codeGenTarget = v12386.ES5
        }else {
          var v1455 = _this$$23.ioHost;
          var v12387 = "ECMAScript target version '" + type$$62;
          var v1456 = v12387 + "' not supported.  Using default 'ES3' code generation";
          JAMScript.call(v1455.printLine, v1455, [v1456])
        }
      }
      return
    }
    function v1397() {
      var v1459 = _this$$23.compilationSettings;
      v1459.inferPropertiesFromThisAssignment = true;
      return
    }
    function v1396() {
      var v1460 = _this$$23.compilationSettings;
      v1460.useDefaultLib = false;
      return
    }
    function v1395() {
      TypeScript.optimizeModuleCodeGen = false;
      return
    }
    function v1394() {
      var v1461 = _this$$23.compilationSettings;
      v1461.canCallDefinitionSignature = true;
      return
    }
    function v1393() {
      var v1462 = TypeScript.CompilerDiagnostics;
      v1462.debug = true;
      return
    }
    function v1392() {
      var v1463 = _this$$23.compilationSettings;
      v1463.resolve = false;
      var v1464 = _this$$23.compilationSettings;
      v1464.preprocess = false;
      return
    }
    function v1391() {
      var v1465 = _this$$23.compilationSettings;
      v1465.errorOnWith = false;
      return
    }
    function v1390() {
      var v1466 = _this$$23.compilationSettings;
      v1466.controlFlow = true;
      var v1467 = _this$$23.compilationSettings;
      v1467.controlFlowUseDef = true;
      return
    }
    function v1389() {
      var v1468 = _this$$23.compilationSettings;
      v1468.controlFlow = true;
      var v1469 = _this$$23.compilationSettings;
      v1469.printControlFlow = true;
      return
    }
    function v1388() {
      var v1470 = _this$$23.compilationSettings;
      v1470.controlFlow = true;
      return
    }
    function v1387() {
      var v1471 = _this$$23.compilationSettings;
      v1471.emitComments = true;
      return
    }
    function v1386() {
      var v1472 = _this$$23.compilationSettings;
      v1472.errorRecovery = true;
      return
    }
    function v1385() {
      var v1473 = _this$$23.compilationSettings;
      v1473.propagateConstants = true;
      return
    }
    function v1384() {
      var v1474 = _this$$23.compilationSettings;
      v1474.minWhitespace = true;
      return
    }
    function v1383() {
      var v1475 = _this$$23.compilationSettings;
      v1475.parseOnly = true;
      return
    }
    function v1382() {
      var v1476 = _this$$23.compilationSettings;
      v1476.exec = true;
      return
    }
    function v1381() {
      var v1477 = _this$$23.compilationSettings;
      v1477.watch = true;
      return
    }
    function v1380() {
      var v1478 = _this$$23.compilationSettings;
      v1478.generateDeclarationFiles = true;
      return
    }
    function v1379() {
      var v1479 = _this$$23.compilationSettings;
      v1479.mapSourceFiles = true;
      return
    }
    function v1378(str$$27) {
      var v1480 = _this$$23.compilationSettings;
      JAMScript.call(v1480.setStyleOptions, v1480, [str$$27]);
      return
    }
    function v1377(str$$26) {
      var v1481 = _this$$23.compilationSettings;
      v1481.outputOption = str$$26;
      return
    }
    function v1376(s$$42) {
      var v1482 = _this$$23.ioHost;
      JAMScript.call(v1482.printLine, v1482, [s$$42]);
      return
    }
    var _this$$23 = this;
    var v1483 = TypeScript.CompilerDiagnostics;
    v1483.diagnosticWriter = {Alert:v1376};
    var code$$12;
    var v1484 = this.ioHost;
    var opts$$1 = JAMScript.new(OptionsParser, [v1484]);
    var v1485 = {usage:"Concatenate and emit output to single file | Redirect output structure to the directory", type:"file|directory", set:v1377};
    JAMScript.call(opts$$1.option, opts$$1, ["out", v1485]);
    var v1486 = {usage:'Select style checking options (examples --style requireSemi:off or --style "eqeqeq;bitwise:off")', experimental:true, set:v1378};
    JAMScript.call(opts$$1.option, opts$$1, ["style", v1486]);
    var v1487 = {usage:"Generates corresponding .map file", set:v1379};
    JAMScript.call(opts$$1.flag, opts$$1, ["sourcemap", v1487]);
    var v1488 = {usage:"Generates corresponding .d.ts file", set:v1380};
    JAMScript.call(opts$$1.flag, opts$$1, ["declaration", v1488]);
    var v12388 = this.ioHost;
    var v1490 = v12388.watchFile;
    if(v1490) {
      var v1489 = {usage:"Watch output files", set:v1381};
      JAMScript.call(opts$$1.flag, opts$$1, ["watch", v1489, "w"])
    }
    var v1491 = {usage:"Execute the script after compilation", set:v1382};
    JAMScript.call(opts$$1.flag, opts$$1, ["exec", v1491, "e"]);
    var v1492 = {usage:"Parse only", experimental:true, set:v1383};
    JAMScript.call(opts$$1.flag, opts$$1, ["parse", v1492]);
    var v1493 = {usage:"Minimize whitespace", experimental:true, set:v1384};
    JAMScript.call(opts$$1.flag, opts$$1, ["minw", v1493, "mw"]);
    var v1494 = {usage:"Propagate constants to emitted code", experimental:true, set:v1385};
    JAMScript.call(opts$$1.flag, opts$$1, ["const", v1494]);
    var v1495 = {usage:"Enable error recovery", experimental:true, set:v1386};
    JAMScript.call(opts$$1.flag, opts$$1, ["errorrecovery", v1495, "er"]);
    var v1496 = {usage:"Emit comments to output", set:v1387};
    JAMScript.call(opts$$1.flag, opts$$1, ["comments", v1496, "c"]);
    var v1497 = {usage:"Control flow", experimental:true, set:v1388};
    JAMScript.call(opts$$1.flag, opts$$1, ["cflow", v1497]);
    var v1498 = {usage:"Print control flow", experimental:true, set:v1389};
    JAMScript.call(opts$$1.flag, opts$$1, ["cflowp", v1498]);
    var v1499 = {usage:"Print Use Def control flow", experimental:true, set:v1390};
    JAMScript.call(opts$$1.flag, opts$$1, ["cflowu", v1499]);
    var v1500 = {usage:"Allow with statements", experimental:true, set:v1391};
    JAMScript.call(opts$$1.flag, opts$$1, ["noerroronwith", v1500]);
    var v1501 = {usage:"Skip resolution and preprocessing", experimental:true, set:v1392};
    JAMScript.call(opts$$1.flag, opts$$1, ["noresolve", v1501]);
    var v1502 = {usage:"Print debug output", experimental:true, set:v1393};
    JAMScript.call(opts$$1.flag, opts$$1, ["debug", v1502]);
    var v1503 = {usage:"Allows you to call the definition signature of an overload group", experimental:true, set:v1394};
    JAMScript.call(opts$$1.flag, opts$$1, ["canCallDefinitionSignature", v1503]);
    var v1504 = {usage:"Do not optimize module codegen", experimental:true, set:v1395};
    JAMScript.call(opts$$1.flag, opts$$1, ["nooptimizemodules", v1504]);
    var v1505 = {usage:"Do not include a default lib.d.ts with global declarations", set:v1396};
    JAMScript.call(opts$$1.flag, opts$$1, ["nolib", v1505]);
    var v1506 = {usage:"Infer class properties from top-level assignments to 'this'", experimental:true, set:v1397};
    JAMScript.call(opts$$1.flag, opts$$1, ["inferProperties", v1506]);
    var v1507 = {usage:'Specify ECMAScript target version: "ES3" (default), or "ES5"', type:"VER", set:v1398};
    JAMScript.call(opts$$1.option, opts$$1, ["target", v1507]);
    var v1508 = {usage:'Specify module code generation: "commonjs" (default) or "amd"', type:"kind", set:v1399};
    JAMScript.call(opts$$1.option, opts$$1, ["module", v1508]);
    var printedUsage = false;
    var v1509 = {usage:"Print this message", set:v1400};
    JAMScript.call(opts$$1.flag, opts$$1, ["help", v1509, "h"]);
    var v1510 = {usage:"Force file resolution to be case sensitive", experimental:true, set:v1401};
    JAMScript.call(opts$$1.flag, opts$$1, ["useCaseSensitiveFileResolution", v1510]);
    var v18677 = this.compilerVersion;
    var v12389 = "Print the compiler's version: " + v18677;
    var v1511 = {usage:v12389, set:v1402};
    JAMScript.call(opts$$1.flag, opts$$1, ["version", v1511, "v"]);
    var v12390 = this.ioHost;
    var v1512 = v12390.arguments;
    JAMScript.call(opts$$1.parse, opts$$1, [v1512]);
    var v12391 = this.compilationSettings;
    var v1519 = v12391.useDefaultLib;
    if(v1519) {
      var v1513 = this.ioHost;
      var compilerFilePath = JAMScript.call(v1513.getExecutingFilePath, v1513, []);
      var v1514 = this.ioHost;
      var binDirPath = JAMScript.call(v1514.dirName, v1514, [compilerFilePath]);
      var v1515 = this.ioHost;
      var v1516 = binDirPath + "/lib.d.ts";
      var libStrPath = JAMScript.call(v1515.resolvePath, v1515, [v1516]);
      var v1517 = TypeScript.SourceUnit;
      code$$12 = JAMScript.new(v1517, [libStrPath, null]);
      var v12392 = this.compilationEnvironment;
      var v1518 = v12392.code;
      JAMScript.call(v1518.push, v1518, [code$$12])
    }
    var i$$148 = 0;
    var v18678 = opts$$1.unnamed;
    var v12393 = v18678.length;
    var v1523 = i$$148 < v12393;
    for(;v1523;) {
      var v1520 = TypeScript.SourceUnit;
      var v12394 = opts$$1.unnamed;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v1521 = v12394[i$$148]
      }
      code$$12 = JAMScript.new(v1520, [v1521, null]);
      var v12395 = this.compilationEnvironment;
      var v1522 = v12395.code;
      JAMScript.call(v1522.push, v1522, [code$$12]);
      i$$148 = i$$148 + 1;
      var v18679 = opts$$1.unnamed;
      var v12396 = v18679.length;
      v1523 = i$$148 < v12396
    }
    var v22825 = this.compilationEnvironment;
    var v18680 = v22825.code;
    var v12397 = v18680.length;
    var v18681;
    var v24911 = this.compilationSettings;
    var v22826 = v24911.useDefaultLib;
    if(v22826) {
      v18681 = 1
    }else {
      v18681 = 0
    }
    var v12398 = v18681;
    var v1526 = v12397 == v12398;
    if(v1526) {
      var v12399 = !printedUsage;
      if(v12399) {
        var v18682 = this.printedVersion;
        v12399 = !v18682
      }
      var v1525 = v12399;
      if(v1525) {
        JAMScript.call(this.printVersion, this, []);
        JAMScript.call(opts$$1.printUsage, opts$$1, []);
        var v1524 = this.ioHost;
        JAMScript.call(v1524.quit, v1524, [1])
      }
      return
    }
    var sourceFiles = [];
    var v12400 = this.compilationSettings;
    var v1528 = v12400.watch;
    if(v1528) {
      var v12401 = this.compilationEnvironment;
      var v1527 = v12401.code;
      sourceFiles = v1527.slice(0)
    }
    var v1529;
    var v18683 = this.compilationSettings;
    var v12402 = v18683.resolve;
    if(v12402) {
      v1529 = JAMScript.call(this.resolve, this, [])
    }else {
      v1529 = this.compilationEnvironment
    }
    this.resolvedEnvironment = v1529;
    var hasCompileErrors = JAMScript.call(this.compile, this, []);
    var v1530 = hasCompileErrors;
    var v12403 = !v1530;
    if(v12403) {
      v1530 = this.hasResolveErrors
    }
    var hasErrors = v1530;
    var v1532 = !hasErrors;
    if(v1532) {
      var v12404 = this.compilationSettings;
      var v1531 = v12404.exec;
      if(v1531) {
        JAMScript.call(this.run, this, [])
      }
    }
    var v12405 = this.compilationSettings;
    var v1535 = v12405.watch;
    if(v1535) {
      JAMScript.call(this.watchFiles, this, [sourceFiles])
    }else {
      var v1533 = this.ioHost;
      var v12406;
      if(hasErrors) {
        v12406 = 1
      }else {
        v12406 = 0
      }
      var v1534 = v12406;
      JAMScript.call(v1533.quit, v1533, [v1534])
    }
    return
  }
  function v1375() {
    var i$$147 = 0;
    var v22827 = this.compilationEnvironment;
    var v18684 = v22827.code;
    var v12407 = v18684.length;
    var v1542 = i$$147 < v12407;
    for(;v1542;) {
      var v12408 = this.compilationEnvironment;
      var v1536 = v12408.code;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var unit = v1536[i$$147]
      }
      var outputFileName = unit.path;
      var v1538 = JAMScript.call(TypeScript.isTSFile, TypeScript, [outputFileName]);
      if(v1538) {
        outputFileName = outputFileName.replace(/\.ts$/, ".js")
      }else {
        var v1537 = JAMScript.call(TypeScript.isSTRFile, TypeScript, [outputFileName]);
        if(v1537) {
          outputFileName = outputFileName.replace(/\.str$/, ".js")
        }
      }
      var v12409 = this.ioHost;
      var v1541 = JAMScript.call(v12409.fileExists, v12409, [outputFileName]);
      if(v1541) {
        var v1539 = this.ioHost;
        var unitRes = JAMScript.call(v1539.readFile, v1539, [outputFileName]);
        var v1540 = this.ioHost;
        JAMScript.call(v1540.run, v1540, [unitRes, outputFileName])
      }
      i$$147 = i$$147 + 1;
      var v22828 = this.compilationEnvironment;
      var v18685 = v22828.code;
      var v12410 = v18685.length;
      v1542 = i$$147 < v12410
    }
    return
  }
  function v1374() {
    function v1373(fileName$$10, useUTF8$$5) {
      var v1543 = _this$$22.ioHost;
      return JAMScript.call(IOUtils.createFileAndFolderStructure, IOUtils, [v1543, fileName$$10, useUTF8$$5])
    }
    function v1372(minChar$$37, charLen$$2, message$$24, unitIndex$$15) {
      var v1544 = compiler$$3.errorReporter;
      v1544.hasErrors = true;
      var v18686 = _this$$22.resolvedEnvironment;
      var v12411 = v18686.code;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v1545 = v12411[unitIndex$$15]
      }
      var fname$$9 = v1545.path;
      var lineCol$$6 = {line:-1, col:-1};
      var v1546 = compiler$$3.parser;
      JAMScript.call(v1546.getSourceLineCol, v1546, [lineCol$$6, minChar$$37]);
      var v24912 = fname$$9 + " (";
      var v24913 = lineCol$$6.line;
      var v22829 = v24912 + v24913;
      var v18687 = v22829 + ",";
      var v22830 = lineCol$$6.col;
      var v18688 = v22830 + 1;
      var v12412 = v18687 + v18688;
      var v1547 = v12412 + "): ";
      var msg$$4 = v1547 + message$$24;
      var v12413 = _this$$22.compilationSettings;
      var v1549 = v12413.errorRecovery;
      if(v1549) {
        var v12414 = _this$$22.ioHost;
        var v1548 = v12414.stderr;
        JAMScript.call(v1548.WriteLine, v1548, [msg$$4])
      }else {
        throw new SyntaxError(msg$$4);
      }
      return
    }
    function consumeUnit(code$$11, addAsResident) {
      try {
        var v18689 = _this$$22.compilationSettings;
        var v12415 = v18689.resolve;
        var v1555 = !v12415;
        if(v1555) {
          var v1550 = code$$11;
          var v12416 = _this$$22.ioHost;
          var v12417 = code$$11.path;
          var v26917 = JAMScript.call(v12416.readFile, v12416, [v12417]);
          v1550.content = v26917;
          var v12418 = _this$$22.compilationSettings;
          var v1554 = v12418.generateDeclarationFiles;
          if(v1554) {
            var v1551 = TypeScript.CompilerDiagnostics;
            var v12419 = code$$11.referencedFiles;
            var v1552 = v12419 == null;
            JAMScript.call(v1551.assert, v1551, [v1552, "With no resolve option, referenced files need to null"]);
            var v1553 = code$$11;
            var v26918 = JAMScript.call(TypeScript.getReferencedFiles, TypeScript, [code$$11]);
            v1553.referencedFiles = v26918
          }
        }
        var v1565 = code$$11.content;
        if(v1565) {
          var v12420 = _this$$22.compilationSettings;
          var v1564 = v12420.parseOnly;
          if(v1564) {
            var v1556 = code$$11.content;
            var v1557 = code$$11.path;
            JAMScript.call(compiler$$3.parseUnit, compiler$$3, [v1556, v1557])
          }else {
            var v12421 = _this$$22.compilationSettings;
            var v1560 = v12421.errorRecovery;
            if(v1560) {
              var v1558 = compiler$$3.parser;
              var v12422 = _this$$22.ioHost;
              var v1559 = v12422.stderr;
              JAMScript.call(v1558.setErrorRecovery, v1558, [v1559])
            }
            var v1561 = code$$11.content;
            var v1562 = code$$11.path;
            var v1563 = code$$11.referencedFiles;
            JAMScript.call(compiler$$3.addUnit, compiler$$3, [v1561, v1562, addAsResident, v1563])
          }
        }
      }catch(err$$7) {
        var v1566 = compiler$$3.errorReporter;
        v1566.hasErrors = true;
        var v12423 = _this$$22.ioHost;
        var v1567 = v12423.stderr;
        var v1568 = err$$7.message;
        JAMScript.call(v1567.WriteLine, v1567, [v1568])
      }
      return
    }
    var _this$$22 = this;
    var compiler$$3;
    var v1569 = TypeScript.TypeScriptCompiler;
    var v12424 = this.ioHost;
    var v1570 = v12424.stderr;
    var v12425 = TypeScript.NullLogger;
    var v1571 = JAMScript.new(v12425, []);
    var v1572 = this.compilationSettings;
    compiler$$3 = JAMScript.new(v1569, [v1570, v1571, v1572]);
    var v12426 = this.ioHost;
    var v1573 = v12426.stderr;
    JAMScript.call(compiler$$3.setErrorOutput, compiler$$3, [v1573]);
    JAMScript.call(compiler$$3.setErrorCallback, compiler$$3, [v1372]);
    var v12427 = this.compilationSettings;
    var v1574 = v12427.emitComments;
    if(v1574) {
      JAMScript.call(compiler$$3.emitCommentsToOutput, compiler$$3, [])
    }
    var iCode = 0;
    var v22831 = this.resolvedEnvironment;
    var v18690 = v22831.code;
    var v12428 = v18690.length;
    var v1577 = iCode < v12428;
    for(;v1577;) {
      var v22832 = this.compilationSettings;
      var v18691 = v22832.parseOnly;
      var v12429 = !v18691;
      var v18692 = !v12429;
      if(v18692) {
        v12429 = iCode > 0
      }
      var v1576 = v12429;
      if(v1576) {
        var v18693 = this.resolvedEnvironment;
        var v12430 = v18693.code;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v1575 = v12430[iCode]
        }
        consumeUnit(v1575, false)
      }
      iCode = iCode + 1;
      var v22833 = this.resolvedEnvironment;
      var v18694 = v22833.code;
      var v12431 = v18694.length;
      v1577 = iCode < v12431
    }
    var v12432 = this.ioHost;
    var v1578 = v12432.directoryExists;
    var v12433 = this.ioHost;
    var v1579 = v12433.fileExists;
    var v12434 = this.ioHost;
    var v1580 = v12434.resolvePath;
    var emitterIOHost = {createFile:v1373, directoryExists:v1578, fileExists:v1579, resolvePath:v1580};
    try {
      var v18695 = this.compilationSettings;
      var v12435 = v18695.parseOnly;
      var v1581 = !v12435;
      if(v1581) {
        JAMScript.call(compiler$$3.typeCheck, compiler$$3, []);
        JAMScript.call(compiler$$3.emit, compiler$$3, [emitterIOHost]);
        JAMScript.call(compiler$$3.emitDeclarations, compiler$$3, [])
      }else {
        JAMScript.call(compiler$$3.emitAST, compiler$$3, [emitterIOHost])
      }
    }catch(err$$8) {
      var v1582 = compiler$$3.errorReporter;
      v1582.hasErrors = true;
      var v12436 = err$$8.message;
      var v1583 = v12436 != "EmitError";
      if(v1583) {
        throw err$$8;
      }
    }
    var v1584 = compiler$$3.errorReporter;
    return v1584.hasErrors
  }
  function v1371() {
    var v1585 = TypeScript.CodeResolver;
    var v1586 = this.compilationEnvironment;
    var resolver$$1 = JAMScript.new(v1585, [v1586]);
    var v1587 = this.compilationSettings;
    var commandLineHost = JAMScript.new(CommandLineHost, [v1587]);
    var v1588 = this.compilationEnvironment;
    var ret$$2 = JAMScript.call(commandLineHost.resolveCompilationEnvironment, commandLineHost, [v1588, resolver$$1, true]);
    this.hasResolveErrors = false;
    var i$$146 = 0;
    var v22834 = this.compilationEnvironment;
    var v18696 = v22834.code;
    var v12437 = v18696.length;
    var v1596 = i$$146 < v12437;
    for(;v1596;) {
      var v25886 = this.compilationEnvironment;
      var v24914 = v25886.code;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v22835 = v24914[i$$146]
      }
      var v18697 = v22835.path;
      var v12438 = JAMScript.call(commandLineHost.isResolved, commandLineHost, [v18697]);
      var v1595 = !v12438;
      if(v1595) {
        this.hasResolveErrors = true;
        var v18698 = this.compilationEnvironment;
        var v12439 = v18698.code;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v1589 = v12439[i$$146]
        }
        var path$$45 = v1589.path;
        var v18699 = JAMScript.call(TypeScript.isSTRFile, TypeScript, [path$$45]);
        var v12440 = !v18699;
        if(v12440) {
          var v22836 = JAMScript.call(TypeScript.isDSTRFile, TypeScript, [path$$45]);
          var v18700 = !v22836;
          if(v18700) {
            var v24915 = JAMScript.call(TypeScript.isTSFile, TypeScript, [path$$45]);
            var v22837 = !v24915;
            if(v22837) {
              var v24916 = JAMScript.call(TypeScript.isDTSFile, TypeScript, [path$$45]);
              v22837 = !v24916
            }
            v18700 = v22837
          }
          v12440 = v18700
        }
        var v1594 = v12440;
        if(v1594) {
          var v12441 = this.ioHost;
          var v1590 = v12441.stderr;
          var v12442 = 'Unknown extension for file: "' + path$$45;
          var v1591 = v12442 + '". Only .ts and .d.ts extensions are allowed.';
          JAMScript.call(v1590.WriteLine, v1590, [v1591])
        }else {
          var v12443 = this.ioHost;
          var v1592 = v12443.stderr;
          var v12444 = 'Error reading file "' + path$$45;
          var v1593 = v12444 + '": File not found';
          JAMScript.call(v1592.WriteLine, v1592, [v1593])
        }
      }
      i$$146 = i$$146 + 1;
      var v22838 = this.compilationEnvironment;
      var v18701 = v22838.code;
      var v12445 = v18701.length;
      v1596 = i$$146 < v12445
    }
    return ret$$2
  }
  function BatchCompiler$$1(ioHost$$7) {
    this.ioHost = ioHost$$7;
    this.resolvedEnvironment = null;
    this.hasResolveErrors = false;
    this.compilerVersion = "0.8.2.0";
    this.printedVersion = false;
    var v1597 = TypeScript.CompilationSettings;
    var v26919 = JAMScript.new(v1597, []);
    this.compilationSettings = v26919;
    var v1598 = TypeScript.CompilationEnvironment;
    var v1599 = this.compilationSettings;
    var v1600 = this.ioHost;
    var v26920 = JAMScript.new(v1598, [v1599, v1600]);
    this.compilationEnvironment = v26920;
    return
  }
  var v1601 = BatchCompiler$$1.prototype;
  v1601.resolve = v1371;
  var v1602 = BatchCompiler$$1.prototype;
  v1602.compile = v1374;
  var v1603 = BatchCompiler$$1.prototype;
  v1603.run = v1375;
  var v1604 = BatchCompiler$$1.prototype;
  v1604.batchCompile = v1403;
  var v1605 = BatchCompiler$$1.prototype;
  v1605.printVersion = v1404;
  var v1606 = BatchCompiler$$1.prototype;
  v1606.watchFiles = v1408;
  return BatchCompiler$$1
}
function v1370() {
  function v1369(preEnv, resolver, traceDependencies) {
    function v1368(path$$44, code$$10) {
      var pathId = JAMScript.call(_this$$21.getPathIdentifier, _this$$21, [path$$44]);
      var v18702 = _this$$21.resolvedPaths;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v12446 = v18702[pathId]
      }
      var v1609 = !v12446;
      if(v1609) {
        var v1607 = resolvedEnv.code;
        JAMScript.call(v1607.push, v1607, [code$$10]);
        var v1608 = _this$$21.resolvedPaths;
        JAMScript.set(v1608, pathId, true)
      }
      return
    }
    function postResolutionError(errorFile, errorMessage$$1) {
      var v1610 = TypeScript.CompilerDiagnostics;
      var v18703 = "Could not resolve file '" + errorFile;
      var v12447 = v18703 + "'";
      var v18704;
      var v22839 = errorMessage$$1 == "";
      if(v22839) {
        v18704 = ""
      }else {
        v18704 = ": " + errorMessage$$1
      }
      var v12448 = v18704;
      var v1611 = v12447 + v12448;
      JAMScript.call(v1610.debugPrint, v1610, [v1611]);
      return
    }
    var _this$$21 = this;
    var v1612 = TypeScript.CompilationEnvironment;
    var v1613 = preEnv.compilationSettings;
    var v1614 = preEnv.ioHost;
    var resolvedEnv = JAMScript.new(v1612, [v1613, v1614]);
    var v1615 = preEnv.code;
    var nCode = v1615.length;
    var path$$43 = "";
    var resolutionDispatcher$$1 = {postResolutionError:postResolutionError, postResolution:v1368};
    var i$$145 = 0;
    var v1619 = i$$145 < nCode;
    for(;v1619;) {
      var v12449 = preEnv.ioHost;
      var v22840 = preEnv.code;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v18705 = v22840[i$$145]
      }
      var v12450 = v18705.path;
      var v1616 = JAMScript.call(v12449.resolvePath, v12449, [v12450]);
      path$$43 = JAMScript.call(TypeScript.switchToForwardSlashes, TypeScript, [v1616]);
      var v1617 = this.pathMap;
      var v18706 = preEnv.code;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v12451 = v18706[i$$145]
      }
      var v1618 = v12451.path;
      JAMScript.set(v1617, v1618, path$$43);
      JAMScript.call(resolver.resolveCode, resolver, [path$$43, "", false, resolutionDispatcher$$1]);
      i$$145 = i$$145 + 1;
      v1619 = i$$145 < nCode
    }
    return resolvedEnv
  }
  function v1367(path$$42) {
    var v12452 = this.resolvedPaths;
    var v22841 = this.pathMap;
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      var v18707 = v22841[path$$42]
    }
    var v12453 = JAMScript.call(this.getPathIdentifier, this, [v18707]);
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      var v1620 = v12452[v12453]
    }
    return v1620 != undefined
  }
  function v1366(path$$41) {
    var v1621;
    var v18708 = this.compilationSettings;
    var v12454 = v18708.useCaseSensitiveFileResolution;
    if(v12454) {
      v1621 = path$$41
    }else {
      v1621 = path$$41.toLocaleUpperCase()
    }
    return v1621
  }
  function CommandLineHost$$1(compilationSettings$$1) {
    this.compilationSettings = compilationSettings$$1;
    this.pathMap = {};
    this.resolvedPaths = {};
    return
  }
  var v1622 = CommandLineHost$$1.prototype;
  v1622.getPathIdentifier = v1366;
  var v1623 = CommandLineHost$$1.prototype;
  v1623.isResolved = v1367;
  var v1624 = CommandLineHost$$1.prototype;
  v1624.resolveCompilationEnvironment = v1369;
  return CommandLineHost$$1
}
function v1365() {
  function v1364(args$$19) {
    var position$$5 = 0;
    var v12455 = args$$19.length;
    var v1635 = position$$5 < v12455;
    for(;v1635;) {
      var v1625 = position$$5;
      position$$5 = position$$5 + 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var current$$4 = args$$19[v1625]
      }
      var match$$3 = current$$4.match(/^(--?|@)(.*)/);
      var value$$45 = null;
      if(match$$3) {
        var v12456 = match$$3[1];
        var v1633 = v12456 === "@";
        if(v1633) {
          var v12457 = this.host;
          var v12458 = match$$3[2];
          var v1626 = JAMScript.call(v12457.readFile, v12457, [v12458]);
          JAMScript.call(this.parseString, this, [v1626])
        }else {
          var arg$$14 = match$$3[2];
          var option$$1 = JAMScript.call(this.findOption, this, [arg$$14]);
          var v1632 = option$$1 === null;
          if(v1632) {
            var v1627 = this.host;
            var v12459 = "Unknown option '" + arg$$14;
            var v1628 = v12459 + "'";
            JAMScript.call(v1627.printLine, v1627, [v1628]);
            var v1629 = this.host;
            JAMScript.call(v1629.printLine, v1629, ["Use the '--help' flag to see options"])
          }else {
            var v12460 = option$$1.flag;
            var v1631 = !v12460;
            if(v1631) {
              var v1630 = position$$5;
              position$$5 = position$$5 + 1;
              value$$45 = args$$19[v1630]
            }
            JAMScript.call(option$$1.set, option$$1, [value$$45])
          }
        }
      }else {
        var v1634 = this.unnamed;
        JAMScript.call(v1634.push, v1634, [current$$4])
      }
      var v12461 = args$$19.length;
      v1635 = position$$5 < v12461
    }
    return
  }
  function v1363(argString) {
    var position$$4 = 0;
    var tokens = argString.match(/\s+|"|[^\s"]+/g);
    var args$$18 = [];
    var currentArg = "";
    var v12462 = tokens.length;
    var v1645 = position$$4 < v12462;
    for(;v1645;) {
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var token$$7 = tokens[position$$4]
      }
      var v1644 = token$$7 === '"';
      if(v1644) {
        var JSCompiler_temp_const$$34 = currentArg;
        var JSCompiler_inline_result$$35;
        var value$$inline_36 = "";
        var v1636 = position$$4;
        position$$4 = position$$4 + 1;
        tokens[v1636];
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var token$$inline_37 = tokens[position$$4]
        }
        var v12463 = token$$inline_37;
        if(v12463) {
          v12463 = token$$inline_37 !== '"'
        }
        var v1638 = v12463;
        for(;v1638;) {
          var v1637 = position$$4;
          position$$4 = position$$4 + 1;
          tokens[v1637];
          value$$inline_36 = value$$inline_36 + token$$inline_37;
          token$$inline_37 = tokens[position$$4];
          var v12464 = token$$inline_37;
          if(v12464) {
            v12464 = token$$inline_37 !== '"'
          }
          v1638 = v12464
        }
        var v1639 = position$$4;
        position$$4 = position$$4 + 1;
        tokens[v1639];
        JSCompiler_inline_result$$35 = value$$inline_36;
        currentArg = JSCompiler_temp_const$$34 + JSCompiler_inline_result$$35
      }else {
        var v1643 = token$$7.match(/\s/);
        if(v1643) {
          var v12465 = currentArg.length;
          var v1640 = v12465 > 0;
          if(v1640) {
            JAMScript.call(args$$18.push, args$$18, [currentArg]);
            currentArg = ""
          }
          var v1641 = position$$4;
          position$$4 = position$$4 + 1;
          tokens[v1641]
        }else {
          var v1642 = position$$4;
          position$$4 = position$$4 + 1;
          tokens[v1642];
          currentArg = currentArg + token$$7
        }
      }
      var v12466 = tokens.length;
      v1645 = position$$4 < v12466
    }
    var v12467 = currentArg.length;
    var v1646 = v12467 > 0;
    if(v1646) {
      JAMScript.call(args$$18.push, args$$18, [currentArg])
    }
    JAMScript.call(this.parse, this, [args$$18]);
    return
  }
  function v1362(name$$92, config$$2, short$$1) {
    var v1647 = !config$$2;
    if(v1647) {
      config$$2 = short$$1;
      short$$1 = null
    }
    config$$2.name = name$$92;
    config$$2.short = short$$1;
    config$$2.flag = true;
    var v1648 = this.options;
    JAMScript.call(v1648.push, v1648, [config$$2]);
    return
  }
  function v1361(name$$91, config$$1, short) {
    var v1649 = !config$$1;
    if(v1649) {
      config$$1 = short;
      short = null
    }
    config$$1.name = name$$91;
    config$$1.short = short;
    config$$1.flag = false;
    var v1650 = this.options;
    JAMScript.call(v1650.push, v1650, [config$$1]);
    return
  }
  function v1360() {
    function v1359(a$$9, b$$15) {
      var v1651 = a$$9.name;
      var aName = v1651.toLowerCase();
      var v1652 = b$$15.name;
      var bName = v1652.toLowerCase();
      var v1654 = aName > bName;
      if(v1654) {
        return 1
      }else {
        var v1653 = aName < bName;
        if(v1653) {
          return-1
        }else {
          return 0
        }
      }
      return
    }
    var v1655 = this.host;
    JAMScript.call(v1655.printLine, v1655, ["Syntax:   tsc [options] [file ..]"]);
    var v1656 = this.host;
    JAMScript.call(v1656.printLine, v1656, [""]);
    var v1657 = this.host;
    JAMScript.call(v1657.printLine, v1657, ["Examples: tsc hello.ts"]);
    var v1658 = this.host;
    JAMScript.call(v1658.printLine, v1658, ["          tsc --out foo.js foo.ts"]);
    var v1659 = this.host;
    JAMScript.call(v1659.printLine, v1659, ["          tsc @args.txt"]);
    var v1660 = this.host;
    JAMScript.call(v1660.printLine, v1660, [""]);
    var v1661 = this.host;
    JAMScript.call(v1661.printLine, v1661, ["Options:"]);
    var output$$1 = [];
    var maxLength = 0;
    var v1662 = this.options;
    var v26921 = v1662.sort(v1359);
    this.options = v26921;
    var i$$144 = 0;
    var v18709 = this.options;
    var v12468 = v18709.length;
    var v1670 = i$$144 < v12468;
    for(;v1670;) {
      var v1663 = this.options;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var option = v1663[i$$144]
      }
      var v1664 = option.experimental;
      if(v1664) {
        i$$144 = i$$144 + 1;
        var v18710 = this.options;
        var v12469 = v18710.length;
        v1670 = i$$144 < v12469;
        continue
      }
      var v12470 = option.usage;
      var v1665 = !v12470;
      if(v1665) {
        break
      }
      var usageString = "  ";
      var v1666;
      var v12472 = option.type;
      if(v12472) {
        var v18711 = option.type;
        var v12471 = v18711.toUpperCase();
        v1666 = " " + v12471
      }else {
        v1666 = ""
      }
      var type$$61 = v1666;
      var v1667 = option.short;
      if(v1667) {
        var v24917 = this.DEFAULT_SHORT_FLAG;
        var v24918 = option.short;
        var v22842 = v24917 + v24918;
        var v18712 = v22842 + type$$61;
        var v12473 = v18712 + ", ";
        usageString = usageString + v12473
      }
      var v22843 = this.DEFAULT_LONG_FLAG;
      var v22844 = option.name;
      var v18713 = v22843 + v22844;
      var v12474 = v18713 + type$$61;
      usageString = usageString + v12474;
      var v12475 = option.usage;
      var v1668 = [usageString, v12475];
      JAMScript.call(output$$1.push, output$$1, [v1668]);
      var v12476 = usageString.length;
      var v1669 = v12476 > maxLength;
      if(v1669) {
        maxLength = usageString.length
      }
      i$$144 = i$$144 + 1;
      var v18714 = this.options;
      var v12477 = v18714.length;
      v1670 = i$$144 < v12477
    }
    var v1671 = ["  @<file>", "Insert command line options and files from a file."];
    JAMScript.call(output$$1.push, output$$1, [v1671]);
    i$$144 = 0;
    var v12478 = output$$1.length;
    var v1674 = i$$144 < v12478;
    for(;v1674;) {
      var v1672 = this.host;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v22845 = output$$1[i$$144]
      }
      var v18715 = v22845[0];
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v26765 = output$$1[i$$144]
      }
      var v26654 = v26765[0];
      var v26401 = v26654.length;
      var v25887 = maxLength - v26401;
      var v24919 = v25887 + 3;
      var v22846 = new Array(v24919);
      var v18716 = v22846.join(" ");
      var v12479 = v18715 + v18716;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v18717 = output$$1[i$$144]
      }
      var v12480 = v18717[1];
      var v1673 = v12479 + v12480;
      JAMScript.call(v1672.printLine, v1672, [v1673]);
      i$$144 = i$$144 + 1;
      var v12481 = output$$1.length;
      v1674 = i$$144 < v12481
    }
    return
  }
  function v1358(arg$$13) {
    var i$$143 = 0;
    var v18718 = this.options;
    var v12482 = v18718.length;
    var v1677 = i$$143 < v12482;
    for(;v1677;) {
      var v24920 = this.options;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v22847 = v24920[i$$143]
      }
      var v18719 = v22847.short;
      var v12483 = arg$$13 === v18719;
      var v18721 = !v12483;
      if(v18721) {
        var v24921 = this.options;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22848 = v24921[i$$143]
        }
        var v18720 = v22848.name;
        v12483 = arg$$13 === v18720
      }
      var v1676 = v12483;
      if(v1676) {
        var v1675 = this.options;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          return v1675[i$$143]
        }
      }
      i$$143 = i$$143 + 1;
      var v18722 = this.options;
      var v12484 = v18722.length;
      v1677 = i$$143 < v12484
    }
    return null
  }
  function OptionsParser$$1(host) {
    this.host = host;
    this.DEFAULT_SHORT_FLAG = "-";
    this.DEFAULT_LONG_FLAG = "--";
    this.unnamed = [];
    this.options = [];
    return
  }
  var v1678 = OptionsParser$$1.prototype;
  v1678.findOption = v1358;
  var v1679 = OptionsParser$$1.prototype;
  v1679.printUsage = v1360;
  var v1680 = OptionsParser$$1.prototype;
  v1680.option = v1361;
  var v1681 = OptionsParser$$1.prototype;
  v1681.flag = v1362;
  var v1682 = OptionsParser$$1.prototype;
  v1682.parseString = v1363;
  var v1683 = OptionsParser$$1.prototype;
  v1683.parse = v1364;
  return OptionsParser$$1
}
function v1357() {
  function getWindowsScriptHostIO() {
    function v1331(exitCode) {
      var v12485 = typeof exitCode;
      var v1684 = v12485 === "undefined";
      if(v1684) {
        exitCode = 0
      }
      try {
        JAMScript.call(WScript.Quit, WScript, [exitCode])
      }catch(e$$16) {
      }
      return
    }
    function v1330() {
      return WScript.ScriptFullName
    }
    function v1329(source$$4, filename$$10) {
      try {
        if(JAMScript.isEval(eval)) {
          eval("introspect(JAMScript.introspectors.processAll) { " + source$$4 + " }")
        }else {
          JAMScript.call(eval, null, [source$$4])
        }
      }catch(e$$15) {
        var v12486 = "Error while executing file '" + filename$$10;
        var v1685 = v12486 + "'.";
        JAMScript.call(IOUtils.throwIOError, IOUtils, [v1685, e$$15])
      }
      return
    }
    function v1328(str$$17) {
      JAMScript.call(WScript.Echo, WScript, [str$$17]);
      return
    }
    function v1327(str$$16) {
      var v1686 = WScript.StdOut;
      JAMScript.call(v1686.Write, v1686, [str$$16]);
      return
    }
    function v1326(path$$30, spec, options$$8) {
      function filesInFolder(folder$$1, root) {
        var paths$$1 = [];
        var fc;
        var v1690 = options$$8.recursive;
        if(v1690) {
          var v1687 = folder$$1.subfolders;
          fc = JAMScript.new(Enumerator, [v1687]);
          var v12487 = JAMScript.call(fc.atEnd, fc, []);
          var v1689 = !v12487;
          for(;v1689;) {
            var v12488 = fc.item();
            var v18723 = root + "/";
            var v22849 = fc.item();
            var v18724 = v22849.Name;
            var v12489 = v18723 + v18724;
            var v1688 = filesInFolder(v12488, v12489);
            paths$$1 = paths$$1.concat(v1688);
            JAMScript.call(fc.moveNext, fc, []);
            var v12490 = JAMScript.call(fc.atEnd, fc, []);
            v1689 = !v12490
          }
        }
        var v1691 = folder$$1.files;
        fc = JAMScript.new(Enumerator, [v1691]);
        var v12491 = JAMScript.call(fc.atEnd, fc, []);
        var v1694 = !v12491;
        for(;v1694;) {
          var v12492 = !spec;
          var v18726 = !v12492;
          if(v18726) {
            var v22850 = fc.item();
            var v18725 = v22850.Name;
            v12492 = v18725.match(spec)
          }
          var v1693 = v12492;
          if(v1693) {
            var v12493 = root + "/";
            var v18727 = fc.item();
            var v12494 = v18727.Name;
            var v1692 = v12493 + v12494;
            JAMScript.call(paths$$1.push, paths$$1, [v1692])
          }
          JAMScript.call(fc.moveNext, fc, []);
          var v12495 = JAMScript.call(fc.atEnd, fc, []);
          v1694 = !v12495
        }
        return paths$$1
      }
      options$$8 = options$$8 || {};
      var folder = JAMScript.call(fso.GetFolder, fso, [path$$30]);
      var paths = [];
      return filesInFolder(folder, path$$30)
    }
    function v1325(path$$29) {
      try {
        var v12496 = JAMScript.call(this.directoryExists, this, [path$$29]);
        var v1695 = !v12496;
        if(v1695) {
          JAMScript.call(fso.CreateFolder, fso, [path$$29])
        }
      }catch(e$$14) {
        var v12497 = "Couldn't create directory '" + path$$29;
        var v1696 = v12497 + "'.";
        JAMScript.call(IOUtils.throwIOError, IOUtils, [v1696, e$$14])
      }
      return
    }
    function v1324(path$$28) {
      return JAMScript.call(fso.FolderExists, fso, [path$$28])
    }
    function v1323(path$$27, useUTF8$$3) {
      function v1322() {
        try {
          JAMScript.call(streamObj$$1.SaveToFile, streamObj$$1, [path$$27, 2])
        }catch(saveError) {
          var v12498 = "Couldn't write to file '" + path$$27;
          var v1697 = v12498 + "'.";
          JAMScript.call(IOUtils.throwIOError, IOUtils, [v1697, saveError])
        }finally {
          var v12499 = streamObj$$1.State;
          var v1698 = v12499 != 0;
          if(v1698) {
            JAMScript.call(streamObj$$1.Close, streamObj$$1, [])
          }
          JAMScript.call(streamObjectPool.push, streamObjectPool, [streamObj$$1])
        }
        return
      }
      function v1321(str$$15) {
        JAMScript.call(streamObj$$1.WriteText, streamObj$$1, [str$$15, 1]);
        return
      }
      function v1320(str$$14) {
        JAMScript.call(streamObj$$1.WriteText, streamObj$$1, [str$$14, 0]);
        return
      }
      try {
        var streamObj$$1 = getStreamObject();
        var v1699;
        if(useUTF8$$3) {
          v1699 = "utf-8"
        }else {
          v1699 = "x-ansi"
        }
        streamObj$$1.Charset = v1699;
        JAMScript.call(streamObj$$1.Open, streamObj$$1, []);
        return{Write:v1320, WriteLine:v1321, Close:v1322}
      }catch(creationError) {
        var v12500 = "Couldn't write to file '" + path$$27;
        var v1700 = v12500 + "'.";
        JAMScript.call(IOUtils.throwIOError, IOUtils, [v1700, creationError])
      }
      return
    }
    function v1319(path$$26) {
      try {
        var v1701 = JAMScript.call(fso.FileExists, fso, [path$$26]);
        if(v1701) {
          JAMScript.call(fso.DeleteFile, fso, [path$$26, true])
        }
      }catch(e$$13) {
        var v12501 = "Couldn't delete file '" + path$$26;
        var v1702 = v12501 + "'.";
        JAMScript.call(IOUtils.throwIOError, IOUtils, [v1702, e$$13])
      }
      return
    }
    function v1318(rootPath, partialFilePath) {
      var v12502 = JAMScript.call(fso.GetAbsolutePathName, fso, [rootPath]);
      var v1703 = v12502 + "/";
      var path$$25 = v1703 + partialFilePath;
      for(;true;) {
        var v1706 = JAMScript.call(fso.FileExists, fso, [path$$25]);
        if(v1706) {
          try {
            var content$$6 = JAMScript.call(this.readFile, this, [path$$25]);
            return{content:content$$6, path:path$$25}
          }catch(err$$5) {
          }
        }else {
          var v1704 = JAMScript.call(fso.GetAbsolutePathName, fso, [rootPath]);
          rootPath = JAMScript.call(fso.GetParentFolderName, fso, [v1704]);
          var v1705 = rootPath == "";
          if(v1705) {
            return null
          }else {
            path$$25 = JAMScript.call(fso.BuildPath, fso, [rootPath, partialFilePath])
          }
        }
      }
      return
    }
    function v1317(path$$24) {
      return JAMScript.call(fso.GetParentFolderName, fso, [path$$24])
    }
    function v1316(path$$23) {
      return JAMScript.call(fso.GetAbsolutePathName, fso, [path$$23])
    }
    function v1315(path$$22) {
      return JAMScript.call(fso.FileExists, fso, [path$$22])
    }
    function v1314(path$$21, contents) {
      var file$$1 = JAMScript.call(this.createFile, this, [path$$21]);
      JAMScript.call(file$$1.Write, file$$1, [contents]);
      JAMScript.call(file$$1.Close, file$$1, []);
      return
    }
    function v1313(path$$20) {
      try {
        var streamObj = getStreamObject();
        JAMScript.call(streamObj.Open, streamObj, []);
        streamObj.Type = 2;
        streamObj.Charset = "x-ansi";
        JAMScript.call(streamObj.LoadFromFile, streamObj, [path$$20]);
        var bomChar = JAMScript.call(streamObj.ReadText, streamObj, [2]);
        streamObj.Position = 0;
        var v22851 = JAMScript.call(bomChar.charCodeAt, bomChar, [0]);
        var v18728 = v22851 == 254;
        if(v18728) {
          var v22852 = JAMScript.call(bomChar.charCodeAt, bomChar, [1]);
          v18728 = v22852 == 255
        }
        var v12503 = v18728;
        var v18730 = !v12503;
        if(v18730) {
          var v22853 = JAMScript.call(bomChar.charCodeAt, bomChar, [0]);
          var v18729 = v22853 == 255;
          if(v18729) {
            var v22854 = JAMScript.call(bomChar.charCodeAt, bomChar, [1]);
            v18729 = v22854 == 254
          }
          v12503 = v18729
        }
        var v1708 = v12503;
        if(v1708) {
          streamObj.Charset = "unicode"
        }else {
          var v18731 = JAMScript.call(bomChar.charCodeAt, bomChar, [0]);
          var v12504 = v18731 == 239;
          if(v12504) {
            var v18732 = JAMScript.call(bomChar.charCodeAt, bomChar, [1]);
            v12504 = v18732 == 187
          }
          var v1707 = v12504;
          if(v1707) {
            streamObj.Charset = "utf-8"
          }
        }
        var str$$13 = JAMScript.call(streamObj.ReadText, streamObj, [-1]);
        JAMScript.call(streamObj.Close, streamObj, []);
        JAMScript.call(streamObjectPool.push, streamObjectPool, [streamObj]);
        return str$$13
      }catch(err$$4) {
        var v12505 = 'Error reading file "' + path$$20;
        var v1709 = v12505 + '".';
        JAMScript.call(IOUtils.throwIOError, IOUtils, [v1709, err$$4])
      }
      return
    }
    function getStreamObject() {
      var v12506 = streamObjectPool.length;
      var v1710 = v12506 > 0;
      if(v1710) {
        return JAMScript.call(streamObjectPool.pop, streamObjectPool, [])
      }else {
        return JAMScript.new(ActiveXObject, ["ADODB.Stream"])
      }
      return
    }
    var fso = JAMScript.new(ActiveXObject, ["Scripting.FileSystemObject"]);
    var streamObjectPool = [];
    var args$$17 = [];
    var i$$140 = 0;
    var v18733 = WScript.Arguments;
    var v12507 = v18733.length;
    var v1713 = i$$140 < v12507;
    for(;v1713;) {
      var v1711 = args$$17;
      var v1712 = i$$140;
      var v12508 = WScript.Arguments;
      var v26922 = JAMScript.call(v12508.Item, v12508, [i$$140]);
      v1711[v1712] = v26922;
      i$$140 = i$$140 + 1;
      var v18734 = WScript.Arguments;
      var v12509 = v18734.length;
      v1713 = i$$140 < v12509
    }
    var v1714 = WScript.StdErr;
    var v1715 = WScript.StdOut;
    return{readFile:v1313, writeFile:v1314, fileExists:v1315, resolvePath:v1316, dirName:v1317, findFile:v1318, deleteFile:v1319, createFile:v1323, directoryExists:v1324, createDirectory:v1325, dir:v1326, print:v1327, printLine:v1328, arguments:args$$17, stderr:v1714, stdout:v1715, watchFile:null, run:v1329, getExecutingFilePath:v1330, quit:v1331}
  }
  function getNodeIO() {
    function v1356() {
      var v1716 = process.mainModule;
      return v1716.filename
    }
    function v1355(source$$5, filename$$12) {
      var v1717 = require.main;
      v1717.filename = filename$$12;
      var v1718 = require.main;
      var v18735 = JAMScript.call(_fs.realpathSync, _fs, [filename$$12]);
      var v12510 = JAMScript.call(_path.dirname, _path, [v18735]);
      var v26923 = JAMScript.call(_module._nodeModulePaths, _module, [v12510]);
      v1718.paths = v26923;
      var v1719 = require.main;
      JAMScript.call(v1719._compile, v1719, [source$$5, filename$$12]);
      return
    }
    function v1354(filename$$11, callback$$28) {
      function v1353() {
        JAMScript.call(_fs.unwatchFile, _fs, [filename$$11, fileChanged]);
        return
      }
      function fileChanged(curr, prev$$1) {
        function v1352() {
          processingChange = false;
          return
        }
        var v1722 = !firstRun;
        if(v1722) {
          var v12511 = curr.mtime;
          var v12512 = prev$$1.mtime;
          var v1720 = v12511 < v12512;
          if(v1720) {
            return
          }
          JAMScript.call(_fs.unwatchFile, _fs, [filename$$11, fileChanged]);
          var v1721 = !processingChange;
          if(v1721) {
            processingChange = true;
            JAMScript.call(callback$$28, null, [filename$$11]);
            JAMScript.call(setTimeout, null, [v1352, 100])
          }
        }
        firstRun = false;
        var v1723 = {persistent:true, interval:500};
        JAMScript.call(_fs.watchFile, _fs, [filename$$11, v1723, fileChanged]);
        return
      }
      var firstRun = true;
      var processingChange = false;
      fileChanged();
      return{filename:filename$$11, close:v1353}
    }
    function v1351() {
      return
    }
    function v1350(str$$25) {
      var v1724 = process.stdout;
      var v1725 = str$$25 + "\n";
      JAMScript.call(v1724.write, v1724, [v1725]);
      return
    }
    function v1349(str$$24) {
      var v1726 = process.stdout;
      JAMScript.call(v1726.write, v1726, [str$$24]);
      return
    }
    function v1348() {
      return
    }
    function v1347(str$$23) {
      var v1727 = process.stderr;
      var v1728 = str$$23 + "\n";
      JAMScript.call(v1727.write, v1727, [v1728]);
      return
    }
    function v1346(str$$22) {
      var v1729 = process.stderr;
      JAMScript.call(v1729.write, v1729, [str$$22]);
      return
    }
    function v1345(str$$21) {
      var v1730 = process.stdout;
      var v1731 = str$$21 + "\n";
      JAMScript.call(v1730.write, v1730, [v1731]);
      return
    }
    function v1344(str$$20) {
      var v1732 = process.stdout;
      JAMScript.call(v1732.write, v1732, [str$$20]);
      return
    }
    function v1343(rootPath$$1, partialFilePath$$1) {
      var v1733 = rootPath$$1 + "/";
      var path$$40 = v1733 + partialFilePath$$1;
      for(;true;) {
        var v1735 = JAMScript.call(_fs.existsSync, _fs, [path$$40]);
        if(v1735) {
          try {
            var content$$7 = JAMScript.call(this.readFile, this, [path$$40]);
            return{content:content$$7, path:path$$40}
          }catch(err$$6) {
          }
        }else {
          var parentPath$$1 = JAMScript.call(_path.resolve, _path, [rootPath$$1, ".."]);
          var v1734 = rootPath$$1 === parentPath$$1;
          if(v1734) {
            return null
          }else {
            rootPath$$1 = parentPath$$1;
            path$$40 = JAMScript.call(_path.resolve, _path, [rootPath$$1, partialFilePath$$1])
          }
        }
      }
      return
    }
    function v1342(path$$39) {
      return JAMScript.call(_path.dirname, _path, [path$$39])
    }
    function v1341(path$$38) {
      return JAMScript.call(_path.resolve, _path, [path$$38])
    }
    function v1340(path$$37) {
      var v1736 = JAMScript.call(_fs.existsSync, _fs, [path$$37]);
      if(v1736) {
        var v12513 = JAMScript.call(_fs.lstatSync, _fs, [path$$37]);
        v1736 = JAMScript.call(v12513.isDirectory, v12513, [])
      }
      return v1736
    }
    function v1339(path$$36) {
      try {
        var v12514 = JAMScript.call(this.directoryExists, this, [path$$36]);
        var v1737 = !v12514;
        if(v1737) {
          JAMScript.call(_fs.mkdirSync, _fs, [path$$36])
        }
      }catch(e$$20) {
        var v12515 = "Couldn't create directory '" + path$$36;
        var v1738 = v12515 + "'.";
        JAMScript.call(IOUtils.throwIOError, IOUtils, [v1738, e$$20])
      }
      return
    }
    function dir(path$$35, spec$$1, options$$9) {
      function filesInFolder$$1(folder$$2) {
        var paths$$2 = [];
        var files = JAMScript.call(_fs.readdirSync, _fs, [folder$$2]);
        var i$$142 = 0;
        var v12516 = files.length;
        var v1744 = i$$142 < v12516;
        for(;v1744;) {
          var v12517 = folder$$2 + "/";
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v12518 = files[i$$142]
          }
          var v1739 = v12517 + v12518;
          var stat = JAMScript.call(_fs.statSync, _fs, [v1739]);
          var v12519 = options$$9.recursive;
          if(v12519) {
            v12519 = JAMScript.call(stat.isDirectory, stat, [])
          }
          var v1743 = v12519;
          if(v1743) {
            var v18736 = folder$$2 + "/";
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v18737 = files[i$$142]
            }
            var v12520 = v18736 + v18737;
            var v1740 = filesInFolder$$1(v12520);
            paths$$2 = paths$$2.concat(v1740)
          }else {
            var v12521 = JAMScript.call(stat.isFile, stat, []);
            if(v12521) {
              var v18738 = !spec$$1;
              var v22856 = !v18738;
              if(v22856) {
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v22855 = files[i$$142]
                }
                v18738 = v22855.match(spec$$1)
              }
              v12521 = v18738
            }
            var v1742 = v12521;
            if(v1742) {
              var v12522 = folder$$2 + "/";
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v12523 = files[i$$142]
              }
              var v1741 = v12522 + v12523;
              JAMScript.call(paths$$2.push, paths$$2, [v1741])
            }
          }
          i$$142 = i$$142 + 1;
          var v12524 = files.length;
          v1744 = i$$142 < v12524
        }
        return paths$$2
      }
      options$$9 = options$$9 || {};
      return filesInFolder$$1(path$$35)
    }
    function v1338(path$$33, useUTF8$$4) {
      function v1337() {
        JAMScript.call(_fs.closeSync, _fs, [fd]);
        fd = null;
        return
      }
      function v1336(str$$19) {
        var v1745 = str$$19 + "\r\n";
        JAMScript.call(_fs.writeSync, _fs, [fd, v1745]);
        return
      }
      function v1335(str$$18) {
        JAMScript.call(_fs.writeSync, _fs, [fd, str$$18]);
        return
      }
      function mkdirRecursiveSync(path$$34) {
        var stats = JAMScript.call(_fs.statSync, _fs, [path$$34]);
        var v1749 = JAMScript.call(stats.isFile, stats, []);
        if(v1749) {
          var v12525 = '"' + path$$34;
          var v1746 = v12525 + "\" exists but isn't a directory.";
          JAMScript.call(IOUtils.throwIOError, IOUtils, [v1746, null])
        }else {
          var v1748 = JAMScript.call(stats.isDirectory, stats, []);
          if(v1748) {
          }else {
            var v1747 = JAMScript.call(_path.dirname, _path, [path$$34]);
            mkdirRecursiveSync(v1747);
            JAMScript.call(_fs.mkdirSync, _fs, [path$$34, 509])
          }
        }
        return
      }
      var v1750 = JAMScript.call(_path.dirname, _path, [path$$33]);
      mkdirRecursiveSync(v1750);
      try {
        var fd = JAMScript.call(_fs.openSync, _fs, [path$$33, "w"])
      }catch(e$$19) {
        var v12526 = "Couldn't write to file '" + path$$33;
        var v1751 = v12526 + "'.";
        JAMScript.call(IOUtils.throwIOError, IOUtils, [v1751, e$$19])
      }
      return{Write:v1335, WriteLine:v1336, Close:v1337}
    }
    function v1334(path$$32) {
      return JAMScript.call(_fs.existsSync, _fs, [path$$32])
    }
    function v1333(path$$31) {
      try {
        JAMScript.call(_fs.unlinkSync, _fs, [path$$31])
      }catch(e$$18) {
        var v12527 = "Couldn't delete file '" + path$$31;
        var v1752 = v12527 + "'.";
        JAMScript.call(IOUtils.throwIOError, IOUtils, [v1752, e$$18])
      }
      return
    }
    function v1332(file$$2) {
      try {
        var buffer$$8 = JAMScript.call(_fs.readFileSync, _fs, [file$$2]);
        var v1760 = buffer$$8[0];
        switch(v1760) {
          case 254:
            var v12528 = buffer$$8[1];
            var v1757 = v12528 == 255;
            if(v1757) {
              var i$$141 = 0;
              var v12529 = i$$141 + 1;
              var v12530 = buffer$$8.length;
              var v1756 = v12529 < v12530;
              for(;v1756;) {
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var temp$$17 = buffer$$8[i$$141]
                }
                var v1753 = buffer$$8;
                var v1754 = i$$141;
                var v12531 = i$$141 + 1;
                v1753[v1754] = buffer$$8[v12531];
                var v1755 = i$$141 + 1;
                buffer$$8[v1755] = temp$$17;
                i$$141 = i$$141 + 2;
                var v12532 = i$$141 + 1;
                var v12533 = buffer$$8.length;
                v1756 = v12532 < v12533
              }
              return JAMScript.call(buffer$$8.toString, buffer$$8, ["ucs2", 2])
            }
            break;
          case 255:
            var v12534 = buffer$$8[1];
            var v1758 = v12534 == 254;
            if(v1758) {
              return JAMScript.call(buffer$$8.toString, buffer$$8, ["ucs2", 2])
            }
            break;
          case 239:
            var v12535 = buffer$$8[1];
            var v1759 = v12535 == 187;
            if(v1759) {
              return JAMScript.call(buffer$$8.toString, buffer$$8, ["utf8", 3])
            }
        }
        return JAMScript.call(buffer$$8.toString, buffer$$8, [])
      }catch(e$$17) {
        var v12536 = 'Error reading file "' + file$$2;
        var v1761 = v12536 + '".';
        JAMScript.call(IOUtils.throwIOError, IOUtils, [v1761, e$$17])
      }
      return
    }
    var _fs = JAMScript.call(require, null, ["fs"]);
    var _path = JAMScript.call(require, null, ["path"]);
    var _module = JAMScript.call(require, null, ["module"]);
    var v1762 = _fs.writeFileSync;
    var v12537 = process.argv;
    var v1763 = v12537.slice(2);
    var v1764 = {Write:v1346, WriteLine:v1347, Close:v1348};
    var v1765 = {Write:v1349, WriteLine:v1350, Close:v1351};
    var v1766 = process.exit;
    return{readFile:v1332, writeFile:v1762, deleteFile:v1333, fileExists:v1334, createFile:v1338, dir:dir, createDirectory:v1339, directoryExists:v1340, resolvePath:v1341, dirName:v1342, findFile:v1343, print:v1344, printLine:v1345, arguments:v1763, stderr:v1764, stdout:v1765, watchFile:v1354, run:v1355, getExecutingFilePath:v1356, quit:v1766}
  }
  var v12538 = typeof ActiveXObject;
  var v1768 = v12538 === "function";
  if(v1768) {
    return getWindowsScriptHostIO()
  }else {
    var v12539 = typeof require;
    var v1767 = v12539 === "function";
    if(v1767) {
      return getNodeIO()
    }else {
      return null
    }
  }
  return
}
function v1312(IOUtils$$1) {
  function createDirectoryStructure(ioHost$$5, dirName) {
    var v1769 = JAMScript.call(ioHost$$5.directoryExists, ioHost$$5, [dirName]);
    if(v1769) {
      return
    }
    var parentDirectory = JAMScript.call(ioHost$$5.dirName, ioHost$$5, [dirName]);
    var v1770 = parentDirectory != "";
    if(v1770) {
      createDirectoryStructure(ioHost$$5, parentDirectory)
    }
    JAMScript.call(ioHost$$5.createDirectory, ioHost$$5, [dirName]);
    return
  }
  function createFileAndFolderStructure(ioHost$$6, fileName$$9, useUTF8$$2) {
    var path$$19 = JAMScript.call(ioHost$$6.resolvePath, ioHost$$6, [fileName$$9]);
    var dirName$$1 = JAMScript.call(ioHost$$6.dirName, ioHost$$6, [path$$19]);
    createDirectoryStructure(ioHost$$6, dirName$$1);
    return JAMScript.call(ioHost$$6.createFile, ioHost$$6, [path$$19, useUTF8$$2])
  }
  function throwIOError(message$$23, error$$3) {
    var errorMessage = message$$23;
    var v12540 = error$$3;
    if(v12540) {
      v12540 = error$$3.message
    }
    var v1771 = v12540;
    if(v1771) {
      var v18739 = error$$3.message;
      var v12541 = " " + v18739;
      errorMessage = errorMessage + v12541
    }
    throw new Error(errorMessage);
  }
  IOUtils$$1.createFileAndFolderStructure = createFileAndFolderStructure;
  IOUtils$$1.throwIOError = throwIOError;
  return
}
function v1311(TypeScript$$33) {
  function v1310() {
    function v1309(s$$41) {
      var v1772 = this.logContents;
      JAMScript.call(v1772.push, v1772, [s$$41]);
      return
    }
    function v1308() {
      return false
    }
    function v1307() {
      return false
    }
    function v1306() {
      return false
    }
    function v1305() {
      return false
    }
    function v1304() {
      return false
    }
    function BufferedLogger$$1() {
      this.logContents = [];
      return
    }
    var v1773 = BufferedLogger$$1.prototype;
    v1773.information = v1304;
    var v1774 = BufferedLogger$$1.prototype;
    v1774.debug = v1305;
    var v1775 = BufferedLogger$$1.prototype;
    v1775.warning = v1306;
    var v1776 = BufferedLogger$$1.prototype;
    v1776.error = v1307;
    var v1777 = BufferedLogger$$1.prototype;
    v1777.fatal = v1308;
    var v1778 = BufferedLogger$$1.prototype;
    v1778.log = v1309;
    return BufferedLogger$$1
  }
  function v1303() {
    function v1302(s$$40) {
      var v1779 = this.logger;
      JAMScript.call(v1779.log, v1779, [s$$40]);
      return
    }
    function v1301() {
      return this._fatal
    }
    function v1300() {
      return this._error
    }
    function v1299() {
      return this._warning
    }
    function v1298() {
      return this._debug
    }
    function v1297() {
      return this._information
    }
    function LoggerAdapter$$1(logger$$8) {
      this.logger = logger$$8;
      var v1780 = this.logger;
      var v26924 = JAMScript.call(v1780.information, v1780, []);
      this._information = v26924;
      var v1781 = this.logger;
      var v26925 = JAMScript.call(v1781.debug, v1781, []);
      this._debug = v26925;
      var v1782 = this.logger;
      var v26926 = JAMScript.call(v1782.warning, v1782, []);
      this._warning = v26926;
      var v1783 = this.logger;
      var v26927 = JAMScript.call(v1783.error, v1783, []);
      this._error = v26927;
      var v1784 = this.logger;
      var v26928 = JAMScript.call(v1784.fatal, v1784, []);
      this._fatal = v26928;
      return
    }
    var v1785 = LoggerAdapter$$1.prototype;
    v1785.information = v1297;
    var v1786 = LoggerAdapter$$1.prototype;
    v1786.debug = v1298;
    var v1787 = LoggerAdapter$$1.prototype;
    v1787.warning = v1299;
    var v1788 = LoggerAdapter$$1.prototype;
    v1788.error = v1300;
    var v1789 = LoggerAdapter$$1.prototype;
    v1789.fatal = v1301;
    var v1790 = LoggerAdapter$$1.prototype;
    v1790.log = v1302;
    return LoggerAdapter$$1
  }
  function v1296() {
    function v1295(s$$39) {
      return
    }
    function v1294() {
      return false
    }
    function v1293() {
      return false
    }
    function v1292() {
      return false
    }
    function v1291() {
      return false
    }
    function v1290() {
      return false
    }
    function NullLogger$$1() {
      return
    }
    var v1791 = NullLogger$$1.prototype;
    v1791.information = v1290;
    var v1792 = NullLogger$$1.prototype;
    v1792.debug = v1291;
    var v1793 = NullLogger$$1.prototype;
    v1793.warning = v1292;
    var v1794 = NullLogger$$1.prototype;
    v1794.error = v1293;
    var v1795 = NullLogger$$1.prototype;
    v1795.fatal = v1294;
    var v1796 = NullLogger$$1.prototype;
    v1796.log = v1295;
    return NullLogger$$1
  }
  function v1289(CompilerDiagnostics$$1) {
    function Alert(output) {
      var v1798 = CompilerDiagnostics$$1.diagnosticWriter;
      if(v1798) {
        var v1797 = CompilerDiagnostics$$1.diagnosticWriter;
        JAMScript.call(v1797.Alert, v1797, [output])
      }
      return
    }
    function debugPrint(s$$37) {
      var v1799 = CompilerDiagnostics$$1.debug;
      if(v1799) {
        Alert(s$$37)
      }
      return
    }
    function assert(condition$$1, s$$38) {
      var v1801 = CompilerDiagnostics$$1.debug;
      if(v1801) {
        var v1800 = !condition$$1;
        if(v1800) {
          Alert(s$$38)
        }
      }
      return
    }
    CompilerDiagnostics$$1.debug = false;
    CompilerDiagnostics$$1.diagnosticWriter = null;
    CompilerDiagnostics$$1.analysisPass = 0;
    CompilerDiagnostics$$1.Alert = Alert;
    CompilerDiagnostics$$1.debugPrint = debugPrint;
    CompilerDiagnostics$$1.assert = assert;
    return
  }
  function timeFunction(logger$$7, funcDescription$$1, func$$5) {
    var v1802 = new Date;
    var start$$14 = +v1802;
    var result$$39 = JAMScript.call(func$$5, null, []);
    var v1803 = new Date;
    var end$$7 = +v1803;
    var v18740 = funcDescription$$1 + " completed in ";
    var v18741 = end$$7 - start$$14;
    var v12542 = v18740 + v18741;
    var v1804 = v12542 + " msec";
    JAMScript.call(logger$$7.log, logger$$7, [v1804]);
    return result$$39
  }
  function stringToLiteral(value$$43, length$$18) {
    function addChar(index$$65) {
      var ch$$1 = JAMScript.call(value$$43.charCodeAt, value$$43, [index$$65]);
      switch(ch$$1) {
        case 9:
          result$$40 = result$$40 + "\\t";
          break;
        case 10:
          result$$40 = result$$40 + "\\n";
          break;
        case 11:
          result$$40 = result$$40 + "\\v";
          break;
        case 12:
          result$$40 = result$$40 + "\\f";
          break;
        case 13:
          result$$40 = result$$40 + "\\r";
          break;
        case 34:
          result$$40 = result$$40 + '\\"';
          break;
        case 39:
          result$$40 = result$$40 + "\\'";
          break;
        case 92:
          result$$40 = result$$40 + "\\";
          break;
        default:
          var v12543 = value$$43.charAt(index$$65);
          result$$40 = result$$40 + v12543
      }
      return
    }
    var result$$40 = "";
    var v1805 = value$$43.length;
    var tooLong = v1805 > length$$18;
    if(tooLong) {
      var mid$$1 = length$$18 >> 1;
      var i$$139 = 0;
      var v1806 = i$$139 < mid$$1;
      for(;v1806;) {
        addChar(i$$139);
        i$$139 = i$$139 + 1;
        v1806 = i$$139 < mid$$1
      }
      result$$40 = result$$40 + "(...)";
      var v1807 = value$$43.length;
      i$$139 = v1807 - mid$$1;
      var v12544 = value$$43.length;
      var v1808 = i$$139 < v12544;
      for(;v1808;) {
        addChar(i$$139);
        i$$139 = i$$139 + 1;
        var v12545 = value$$43.length;
        v1808 = i$$139 < v12545
      }
    }else {
      length$$18 = value$$43.length;
      i$$139 = 0;
      var v1809 = i$$139 < length$$18;
      for(;v1809;) {
        addChar(i$$139);
        i$$139 = i$$139 + 1;
        v1809 = i$$139 < length$$18
      }
    }
    return result$$40
  }
  var v12546 = TypeScript$$33.CompilerDiagnostics;
  var v18742 = !v12546;
  if(v18742) {
    v12546 = TypeScript$$33.CompilerDiagnostics = {}
  }
  var v1810 = v12546;
  v1289(v1810);
  var CompilerDiagnostics = TypeScript$$33.CompilerDiagnostics;
  var NullLogger = v1296();
  TypeScript$$33.NullLogger = NullLogger;
  var LoggerAdapter = v1303();
  TypeScript$$33.LoggerAdapter = LoggerAdapter;
  var BufferedLogger = v1310();
  TypeScript$$33.BufferedLogger = BufferedLogger;
  TypeScript$$33.timeFunction = timeFunction;
  TypeScript$$33.stringToLiteral = stringToLiteral;
  return
}
function v1288(TypeScript$$32) {
  function v1287() {
    function v1286(enclosingScopeContext$$5, allNames, scope$$36) {
      var result$$38 = [];
      var enclosingScope$$2 = JAMScript.call(enclosingScopeContext$$5.getScope, enclosingScopeContext$$5, []);
      var i$$138 = 0;
      var v12547 = allNames.length;
      var v1819 = i$$138 < v12547;
      for(;v1819;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var name$$90 = allNames[i$$138]
        }
        var v1811 = enclosingScopeContext$$5.publicsOnly;
        if(v1811) {
          v1811 = enclosingScopeContext$$5.isMemberCompletion
        }
        var publicsOnly = v1811;
        var symbol$$23 = JAMScript.call(scope$$36.find, scope$$36, [name$$90, publicsOnly, false]);
        var v1812 = symbol$$23 == null;
        if(v1812) {
          symbol$$23 = JAMScript.call(scope$$36.find, scope$$36, [name$$90, publicsOnly, true])
        }
        var v1813;
        var v18743 = symbol$$23;
        if(v18743) {
          var v22857 = symbol$$23.flags;
          var v24922 = TypeScript$$32.SymbolFlags;
          var v22858 = v24922.Private;
          v18743 = v22857 & v22858
        }
        var v12550 = v18743;
        if(v12550) {
          var v12548 = symbol$$23.container;
          var v12549 = scope$$36.container;
          v1813 = v12548 == v12549
        }else {
          v1813 = true
        }
        var displayThisMember = v1813;
        if(symbol$$23) {
          var v12551 = displayThisMember;
          if(v12551) {
            var v24923 = symbol$$23.name;
            var v22859 = JAMScript.call(TypeScript$$32.isQuoted, TypeScript$$32, [v24923]);
            var v18744 = !v22859;
            if(v18744) {
              var v24924 = symbol$$23.name;
              var v22860 = JAMScript.call(TypeScript$$32.isRelative, TypeScript$$32, [v24924]);
              v18744 = !v22860
            }
            v12551 = v18744
          }
          var v1816 = v12551;
          if(v1816) {
            var v1814 = JAMScript.call(symbol$$23.getType, symbol$$23, []);
            var typeName$$11 = JAMScript.call(v1814.getScopedTypeName, v1814, [enclosingScope$$2]);
            var v1815 = JAMScript.new(ScopeEntry, [name$$90, typeName$$11, symbol$$23]);
            JAMScript.call(result$$38.push, result$$38, [v1815])
          }
        }else {
          var v12552 = name$$90 == "true";
          var v18745 = !v12552;
          if(v18745) {
            v12552 = name$$90 == "false"
          }
          var v1818 = v12552;
          if(v1818) {
            var v24925 = this.compiler;
            var v22861 = v24925.typeChecker;
            var v18746 = v22861.booleanType;
            var v12553 = v18746.symbol;
            var v1817 = JAMScript.new(ScopeEntry, [name$$90, "bool", v12553]);
            JAMScript.call(result$$38.push, result$$38, [v1817])
          }
        }
        i$$138 = i$$138 + 1;
        var v12554 = allNames.length;
        v1819 = i$$138 < v12554
      }
      return result$$38
    }
    function v1285(enclosingScopeContext$$4) {
      var scope$$35 = JAMScript.call(this.getScope, this, [enclosingScopeContext$$4]);
      var v1820 = scope$$35 == null;
      if(v1820) {
        return[]
      }
      var v1821 = TypeScript$$32.StringHashTable;
      var inScopeNames = JAMScript.new(v1821, []);
      var v1822 = enclosingScopeContext$$4.isMemberCompletion;
      var allSymbolNames = JAMScript.call(scope$$35.getAllSymbolNames, scope$$35, [v1822]);
      var i$$137 = 0;
      var v12555 = allSymbolNames.length;
      var v1824 = i$$137 < v12555;
      for(;v1824;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var name$$89 = allSymbolNames[i$$137]
        }
        var v18747 = TypeScript$$32.globalId;
        var v12556 = name$$89 == v18747;
        var v18749 = !v12556;
        if(v18749) {
          var v18748 = name$$89 == "_Core";
          var v22862 = !v18748;
          if(v22862) {
            v18748 = name$$89 == "_element"
          }
          v12556 = v18748
        }
        var v1823 = v12556;
        if(v1823) {
          i$$137 = i$$137 + 1;
          var v12557 = allSymbolNames.length;
          v1824 = i$$137 < v12557;
          continue
        }
        JAMScript.call(inScopeNames.add, inScopeNames, [name$$89, ""]);
        i$$137 = i$$137 + 1;
        var v12558 = allSymbolNames.length;
        v1824 = i$$137 < v12558
      }
      var v12559 = this.compiler;
      var v1825 = v12559.typeChecker;
      var svModuleDecl = v1825.currentModDecl;
      var v12560 = this.compiler;
      var v1826 = v12560.typeChecker;
      v1826.currentModDecl = enclosingScopeContext$$4.deepestModuleDecl;
      var v1827 = JAMScript.call(inScopeNames.getAllKeys, inScopeNames, []);
      var result$$37 = JAMScript.call(this.getTypeNamesForNames, this, [enclosingScopeContext$$4, v1827, scope$$35]);
      var v12561 = this.compiler;
      var v1828 = v12561.typeChecker;
      v1828.currentModDecl = svModuleDecl;
      return result$$37
    }
    function v1284(enclosingScopeContext$$3) {
      var v12562 = enclosingScopeContext$$3.enclosingObjectLit;
      if(v12562) {
        v12562 = enclosingScopeContext$$3.isMemberCompletion
      }
      var v1833 = v12562;
      if(v1833) {
        return JAMScript.call(enclosingScopeContext$$3.getObjectLiteralScope, enclosingScopeContext$$3, [])
      }else {
        var v1832 = enclosingScopeContext$$3.isMemberCompletion;
        if(v1832) {
          var v1831 = enclosingScopeContext$$3.useFullAst;
          if(v1831) {
            var v12563 = this.compiler;
            var v1829 = v12563.typeFlow;
            return JAMScript.call(v1829.findMemberScopeAtFullAst, v1829, [enclosingScopeContext$$3])
          }else {
            var v12564 = this.compiler;
            var v1830 = v12564.typeFlow;
            return JAMScript.call(v1830.findMemberScopeAt, v1830, [enclosingScopeContext$$3])
          }
        }else {
          return JAMScript.call(enclosingScopeContext$$3.getScope, enclosingScopeContext$$3, [])
        }
      }
      return
    }
    function ScopeTraversal$$1(compiler$$2) {
      this.compiler = compiler$$2;
      return
    }
    var v1834 = ScopeTraversal$$1.prototype;
    v1834.getScope = v1284;
    var v1835 = ScopeTraversal$$1.prototype;
    v1835.getScopeEntries = v1285;
    var v1836 = ScopeTraversal$$1.prototype;
    v1836.getTypeNamesForNames = v1286;
    return ScopeTraversal$$1
  }
  function v1283() {
    function ScopeEntry$$1(name$$88, type$$60, sym$$49) {
      this.name = name$$88;
      this.type = type$$60;
      this.sym = sym$$49;
      return
    }
    return ScopeEntry$$1
  }
  function v1282() {
    function v1281(fileName$$8, useUTF8$$1) {
      try {
        var v12565 = this.emitSettings;
        var v1837 = v12565.ioHost;
        return JAMScript.call(v1837.createFile, v1837, [fileName$$8, useUTF8$$1])
      }catch(ex$$6) {
        var v1838 = this.errorReporter;
        var v1839 = ex$$6.message;
        JAMScript.call(v1838.emitterError, v1838, [null, v1839])
      }
      return
    }
    function v1280(scripts) {
      var i$$136 = 0;
      var len$$68 = scripts.length;
      var v1841 = i$$136 < len$$68;
      for(;v1841;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var script$$38 = scripts[i$$136]
        }
        var v1840 = JAMScript.call(this.outputScriptToUTF8, this, [script$$38]);
        if(v1840) {
          return true
        }
        i$$136 = i$$136 + 1;
        v1841 = i$$136 < len$$68
      }
      return false
    }
    function v1279(script$$37) {
      var v1842 = script$$37.containsUnicodeChar;
      var v12567 = !v1842;
      if(v12567) {
        var v18750 = this.emitSettings;
        var v12566 = v18750.emitComments;
        if(v12566) {
          v12566 = script$$37.containsUnicodeCharInComment
        }
        v1842 = v12566
      }
      return v1842
    }
    function v1278(ioHost$$4) {
      function v1277(fileName$$7, wholeFileNameReplaced$$3) {
        return JAMScript.call(TypeScriptCompiler$$1.mapToFileNameExtension, TypeScriptCompiler$$1, [".txt", fileName$$7, wholeFileNameReplaced$$3])
      }
      JAMScript.call(this.parseEmitOption, this, [ioHost$$4]);
      var outFile$$1 = null;
      var context$$65 = null;
      var i$$135 = 0;
      var v12568 = this.scripts;
      var v1843 = v12568.members;
      var len$$67 = v1843.length;
      var v1857 = i$$135 < len$$67;
      for(;v1857;) {
        var v12569 = this.scripts;
        var v1844 = v12569.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var script$$36 = v1844[i$$135]
        }
        var v18751 = this.emitSettings;
        var v12570 = v18751.outputMany;
        var v18752 = !v12570;
        if(v18752) {
          v12570 = context$$65 == null
        }
        var v1850 = v12570;
        if(v1850) {
          var v12571 = this.units;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v1845 = v12571[i$$135]
          }
          var fname$$8 = v1845.filename;
          var mapToTxtFileName = v1277;
          var v1846 = this.emitSettings;
          var outFname$$2 = JAMScript.call(v1846.mapOutputFileName, v1846, [fname$$8, mapToTxtFileName]);
          var v1847 = JAMScript.call(this.useUTF8ForFile, this, [script$$36]);
          outFile$$1 = JAMScript.call(this.createFile, this, [outFname$$2, v1847]);
          var v1848 = TypeScript$$32.PrintContext;
          var v1849 = this.parser;
          context$$65 = JAMScript.new(v1848, [outFile$$1, v1849])
        }
        var v1851 = JAMScript.call(TypeScript$$32.getAstWalkerFactory, TypeScript$$32, []);
        var v1852 = TypeScript$$32.prePrintAST;
        var v1853 = TypeScript$$32.postPrintAST;
        JAMScript.call(v1851.walk, v1851, [script$$36, v1852, v1853, null, context$$65]);
        var v12572 = this.emitSettings;
        var v1856 = v12572.outputMany;
        if(v1856) {
          try {
            JAMScript.call(outFile$$1.Close, outFile$$1, [])
          }catch(e$$11) {
            var v1854 = this.errorReporter;
            var v1855 = e$$11.message;
            JAMScript.call(v1854.emitterError, v1854, [null, v1855])
          }
        }
        i$$135 = i$$135 + 1;
        v1857 = i$$135 < len$$67
      }
      var v18753 = this.emitSettings;
      var v12573 = v18753.outputMany;
      var v1860 = !v12573;
      if(v1860) {
        try {
          JAMScript.call(outFile$$1.Close, outFile$$1, [])
        }catch(e$$12) {
          var v1858 = this.errorReporter;
          var v1859 = e$$12.message;
          JAMScript.call(v1858.emitterError, v1858, [null, v1859])
        }
      }
      return
    }
    function v1276(outputFile) {
      var v12574 = this.settings;
      var v1861 = v12574.mapSourceFiles;
      if(v1861) {
        throw Error("Cannot generate source map");
      }
      var v12575 = this.settings;
      var v1862 = v12575.generateDeclarationFiles;
      if(v1862) {
        throw Error("Cannot generate declaration files");
      }
      var v18754 = this.settings;
      var v12576 = v18754.outputOption;
      var v1863 = v12576 != "";
      if(v1863) {
        throw Error("Cannot parse output option");
      }
      var v1864 = TypeScript$$32.Emitter;
      var v1865 = this.typeChecker;
      var v1866 = this.emitSettings;
      var v1867 = this.errorReporter;
      var emitter$$41 = emitter$$41 = JAMScript.new(v1864, [v1865, "stdout", outputFile, v1866, v1867]);
      var i$$134 = 0;
      var v12577 = this.scripts;
      var v1868 = v12577.members;
      var len$$66 = v1868.length;
      var v1872 = i$$134 < len$$66;
      for(;v1872;) {
        var v12578 = this.scripts;
        var v1869 = v12578.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var script$$35 = v1869[i$$134]
        }
        var v1870 = this.typeChecker;
        v1870.locationInfo = script$$35.locationInfo;
        var v12579 = TypeScript$$32.TokenID;
        var v1871 = v12579.Comma;
        JAMScript.call(emitter$$41.emitJavascript, emitter$$41, [script$$35, v1871, false]);
        i$$134 = i$$134 + 1;
        v1872 = i$$134 < len$$66
      }
      return
    }
    function v1275(ioHost$$3) {
      JAMScript.call(this.parseEmitOption, this, [ioHost$$3]);
      var emitter$$40 = null;
      var i$$133 = 0;
      var v12580 = this.scripts;
      var v1873 = v12580.members;
      var len$$65 = v1873.length;
      var v1877 = i$$133 < len$$65;
      for(;v1877;) {
        var v12581 = this.scripts;
        var v1874 = v12581.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var script$$34 = v1874[i$$133]
        }
        var v18755 = this.emitSettings;
        var v12582 = v18755.outputMany;
        var v18756 = !v12582;
        if(v18756) {
          v12582 = emitter$$40 == null
        }
        var v1876 = v12582;
        if(v1876) {
          var v18757 = this.emitSettings;
          var v12583 = v18757.outputMany;
          var v1875 = !v12583;
          emitter$$40 = JAMScript.call(this.emitUnit, this, [script$$34, v1875])
        }else {
          JAMScript.call(this.emitUnit, this, [script$$34, true, emitter$$40])
        }
        i$$133 = i$$133 + 1;
        v1877 = i$$133 < len$$65
      }
      if(emitter$$40) {
        JAMScript.call(emitter$$40.Close, emitter$$40, [])
      }
      return
    }
    function v1274(script$$33, reuseEmitter$$1, emitter$$39) {
      var v18758 = this.emitSettings;
      var v12584 = JAMScript.call(script$$33.emitRequired, script$$33, [v18758]);
      var v1878 = !v12584;
      if(v1878) {
        return null
      }
      var v1879 = script$$33.locationInfo;
      var fname$$7 = v1879.filename;
      var v1891 = !emitter$$39;
      if(v1891) {
        var v1880 = this.emitSettings;
        var v1881 = TypeScriptCompiler$$1.mapToJSFileName;
        var outFname$$1 = JAMScript.call(v1880.mapOutputFileName, v1880, [fname$$7, v1881]);
        var v1882 = JAMScript.call(this.useUTF8ForFile, this, [script$$33]);
        var outFile = JAMScript.call(this.createFile, this, [outFname$$1, v1882]);
        var v1883 = TypeScript$$32.Emitter;
        var v1884 = this.typeChecker;
        var v1885 = this.emitSettings;
        var v1886 = this.errorReporter;
        emitter$$39 = JAMScript.new(v1883, [v1884, outFname$$1, outFile, v1885, v1886]);
        var v12585 = this.settings;
        var v1888 = v12585.mapSourceFiles;
        if(v1888) {
          var v12586 = TypeScript$$32.SourceMapper;
          var v24926 = TypeScript$$32.SourceMapper;
          var v22863 = v24926.MapFileExtension;
          var v18759 = outFname$$1 + v22863;
          var v12587 = JAMScript.call(this.createFile, this, [v18759, false]);
          var v12588 = this.errorReporter;
          var v1887 = JAMScript.new(v12586, [fname$$7, outFname$$1, outFile, v12587, v12588]);
          JAMScript.call(emitter$$39.setSourceMappings, emitter$$39, [v1887])
        }
      }else {
        var v12589 = this.settings;
        var v1890 = v12589.mapSourceFiles;
        if(v1890) {
          var v12590 = TypeScript$$32.SourceMapper;
          var v12591 = emitter$$39.emittingFileName;
          var v12592 = emitter$$39.outfile;
          var v18760 = emitter$$39.sourceMapper;
          var v12593 = v18760.sourceMapOut;
          var v12594 = this.errorReporter;
          var v1889 = JAMScript.new(v12590, [fname$$7, v12591, v12592, v12593, v12594]);
          JAMScript.call(emitter$$39.setSourceMappings, emitter$$39, [v1889])
        }
      }
      var v1892 = this.typeChecker;
      v1892.locationInfo = script$$33.locationInfo;
      var v12595 = TypeScript$$32.TokenID;
      var v1893 = v12595.Comma;
      JAMScript.call(emitter$$39.emitJavascript, emitter$$39, [script$$33, v1893, false]);
      var v1894 = !reuseEmitter$$1;
      if(v1894) {
        JAMScript.call(emitter$$39.Close, emitter$$39, []);
        return null
      }else {
        return emitter$$39
      }
      return
    }
    function mapToJSFileName(fileName$$6, wholeFileNameReplaced$$2) {
      return JAMScript.call(TypeScriptCompiler$$1.mapToFileNameExtension, TypeScriptCompiler$$1, [".js", fileName$$6, wholeFileNameReplaced$$2])
    }
    function mapToFileNameExtension(extension, fileName$$5, wholeFileNameReplaced$$1) {
      if(wholeFileNameReplaced$$1) {
        return fileName$$5
      }else {
        var splitFname = fileName$$5.split(".");
        JAMScript.call(splitFname.pop, splitFname, []);
        var v1895 = splitFname.join(".");
        return v1895 + extension
      }
      return
    }
    function v1273() {
      var v12596 = JAMScript.call(this.canEmitDeclarations, this, []);
      var v1896 = !v12596;
      if(v1896) {
        return
      }
      var v12597 = this.errorReporter;
      var v1897 = v12597.hasErrors;
      if(v1897) {
        return
      }
      var v22864 = this.scripts;
      var v18761 = v22864.members;
      var v12598 = v18761.length;
      var v1898 = v12598 == 0;
      if(v1898) {
        return
      }
      var declarationEmitter$$1 = null;
      var i$$132 = 0;
      var v12599 = this.scripts;
      var v1899 = v12599.members;
      var len$$64 = v1899.length;
      var v1903 = i$$132 < len$$64;
      for(;v1903;) {
        var v12600 = this.scripts;
        var v1900 = v12600.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var script$$32 = v1900[i$$132]
        }
        var v18762 = this.emitSettings;
        var v12601 = v18762.outputMany;
        var v18763 = !v12601;
        if(v18763) {
          v12601 = declarationEmitter$$1 == null
        }
        var v1902 = v12601;
        if(v1902) {
          var v18764 = this.emitSettings;
          var v12602 = v18764.outputMany;
          var v1901 = !v12602;
          declarationEmitter$$1 = JAMScript.call(this.emitDeclarationsUnit, this, [script$$32, v1901])
        }else {
          JAMScript.call(this.emitDeclarationsUnit, this, [script$$32, true, declarationEmitter$$1])
        }
        i$$132 = i$$132 + 1;
        v1903 = i$$132 < len$$64
      }
      if(declarationEmitter$$1) {
        JAMScript.call(declarationEmitter$$1.Close, declarationEmitter$$1, [])
      }
      return
    }
    function v1272(script$$31, reuseEmitter, declarationEmitter) {
      var v12603 = JAMScript.call(this.canEmitDeclarations, this, [script$$31]);
      var v1904 = !v12603;
      if(v1904) {
        return null
      }
      var v1913 = !declarationEmitter;
      if(v1913) {
        var v1905 = this.emitSettings;
        var v12604 = script$$31.locationInfo;
        var v1906 = v12604.filename;
        var v1907 = TypeScriptCompiler$$1.mapToDTSFileName;
        var declareFileName$$2 = JAMScript.call(v1905.mapOutputFileName, v1905, [v1906, v1907]);
        var v1908 = JAMScript.call(this.useUTF8ForFile, this, [script$$31]);
        var declareFile = JAMScript.call(this.createFile, this, [declareFileName$$2, v1908]);
        var v1909 = TypeScript$$32.DeclarationEmitter;
        var v1910 = this.typeChecker;
        var v1911 = this.emitSettings;
        var v1912 = this.errorReporter;
        declarationEmitter = JAMScript.new(v1909, [v1910, v1911, v1912]);
        JAMScript.call(declarationEmitter.setDeclarationFile, declarationEmitter, [declareFile])
      }
      JAMScript.call(declarationEmitter.emitDeclarations, declarationEmitter, [script$$31]);
      var v1914 = !reuseEmitter;
      if(v1914) {
        JAMScript.call(declarationEmitter.Close, declarationEmitter, []);
        return null
      }else {
        return declarationEmitter
      }
      return
    }
    function v1271(script$$30) {
      var v18765 = this.settings;
      var v12605 = v18765.generateDeclarationFiles;
      var v1915 = !v12605;
      if(v1915) {
        return false
      }
      var v18766 = !script$$30;
      var v12606 = !v18766;
      if(v12606) {
        var v18767 = script$$30.isDeclareFile;
        var v22866 = !v18767;
        if(v22866) {
          var v22865 = script$$30.isResident;
          var v24928 = !v22865;
          if(v24928) {
            var v24927 = script$$30.bod;
            v22865 = v24927 == null
          }
          v18767 = v22865
        }
        v12606 = v18767
      }
      var v1916 = v12606;
      if(v1916) {
        return false
      }
      return true
    }
    function mapToDTSFileName(fileName$$4, wholeFileNameReplaced) {
      return JAMScript.call(TypeScript$$32.getDeclareFilePath, TypeScript$$32, [fileName$$4])
    }
    function v1270(script$$29) {
      var v12607 = this.emitSettings;
      var v1918 = v12607.outputMany;
      if(v1918) {
        return JAMScript.call(this.outputScriptToUTF8, this, [script$$29])
      }else {
        var v12608 = this.scripts;
        var v1917 = v12608.members;
        return JAMScript.call(this.outputScriptsToUTF8, this, [v1917])
      }
      return
    }
    function v1269(ioHost$$2) {
      var v1919 = this.emitSettings;
      v1919.ioHost = ioHost$$2;
      var v18768 = this.emitSettings;
      var v12609 = v18768.outputOption;
      var v1922 = v12609 == "";
      if(v1922) {
        var v1920 = this.emitSettings;
        v1920.outputMany = true;
        var v1921 = this.emitSettings;
        v1921.commonDirectoryPath = "";
        return
      }
      var v1923 = this.emitSettings;
      var v22867 = this.emitSettings;
      var v18769 = v22867.ioHost;
      var v22868 = this.emitSettings;
      var v18770 = v22868.outputOption;
      var v12610 = JAMScript.call(v18769.resolvePath, v18769, [v18770]);
      var v26929 = JAMScript.call(TypeScript$$32.switchToForwardSlashes, TypeScript$$32, [v12610]);
      v1923.outputOption = v26929;
      var v18771 = this.emitSettings;
      var v12611 = v18771.ioHost;
      var v18772 = this.emitSettings;
      var v12612 = v18772.outputOption;
      var v1928 = JAMScript.call(v12611.directoryExists, v12611, [v12612]);
      if(v1928) {
        var v1924 = this.emitSettings;
        v1924.outputMany = true
      }else {
        var v18773 = this.emitSettings;
        var v12613 = v18773.ioHost;
        var v18774 = this.emitSettings;
        var v12614 = v18774.outputOption;
        var v1927 = JAMScript.call(v12613.fileExists, v12613, [v12614]);
        if(v1927) {
          var v1925 = this.emitSettings;
          v1925.outputMany = false
        }else {
          var v1926 = this.emitSettings;
          var v22869 = this.emitSettings;
          var v18775 = v22869.outputOption;
          var v12615 = JAMScript.call(TypeScript$$32.isJSFile, TypeScript$$32, [v18775]);
          v1926.outputMany = !v12615
        }
      }
      var v12616 = JAMScript.call(this.isDynamicModuleCompilation, this, []);
      if(v12616) {
        var v22870 = this.emitSettings;
        var v18776 = v22870.outputMany;
        v12616 = !v18776
      }
      var v1930 = v12616;
      if(v1930) {
        var v1929 = this.errorReporter;
        JAMScript.call(v1929.emitterError, v1929, [null, "Cannot compile dynamic modules when emitting into single file"])
      }
      var v12617 = this.emitSettings;
      var v1931 = v12617.outputMany;
      if(v1931) {
        JAMScript.call(this.updateCommonDirectoryPath, this, [])
      }
      return
    }
    function v1268() {
      var commonComponents = [];
      var commonComponentsLength = -1;
      var i$$131 = 0;
      var v12618 = this.scripts;
      var v1932 = v12618.members;
      var len$$63 = v1932.length;
      var v1942 = i$$131 < len$$63;
      for(;v1942;) {
        var v12619 = this.scripts;
        var v1933 = v12619.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var script$$28 = v1933[i$$131]
        }
        var v12620 = this.emitSettings;
        var v1941 = JAMScript.call(script$$28.emitRequired, script$$28, [v12620]);
        if(v1941) {
          var v1934 = script$$28.locationInfo;
          var fileName$$3 = v1934.filename;
          var fileComponents = JAMScript.call(TypeScript$$32.filePathComponents, TypeScript$$32, [fileName$$3]);
          var v1940 = commonComponentsLength == -1;
          if(v1940) {
            commonComponents = fileComponents;
            commonComponentsLength = commonComponents.length
          }else {
            var updatedPath = false;
            var j$$20 = 0;
            var v12621 = j$$20 < commonComponentsLength;
            if(v12621) {
              var v18777 = fileComponents.length;
              v12621 = j$$20 < v18777
            }
            var v1938 = v12621;
            for(;v1938;) {
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v12622 = commonComponents[j$$20]
              }
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v12623 = fileComponents[j$$20]
              }
              var v1937 = v12622 != v12623;
              if(v1937) {
                commonComponentsLength = j$$20;
                updatedPath = true;
                var v1936 = j$$20 == 0;
                if(v1936) {
                  var v1935 = this.errorReporter;
                  JAMScript.call(v1935.emitterError, v1935, [null, "Cannot find the common subdirectory path for the input files"]);
                  return
                }
                break
              }
              j$$20 = j$$20 + 1;
              var v12624 = j$$20 < commonComponentsLength;
              if(v12624) {
                var v18778 = fileComponents.length;
                v12624 = j$$20 < v18778
              }
              v1938 = v12624
            }
            var v12625 = !updatedPath;
            if(v12625) {
              var v18779 = fileComponents.length;
              v12625 = v18779 < commonComponentsLength
            }
            var v1939 = v12625;
            if(v1939) {
              commonComponentsLength = fileComponents.length
            }
          }
        }
        i$$131 = i$$131 + 1;
        v1942 = i$$131 < len$$63
      }
      var v1943 = this.emitSettings;
      var v18780 = commonComponents.slice(0, commonComponentsLength);
      var v12626 = v18780.join("/");
      v1943.commonDirectoryPath = v12626 + "/";
      var v22871 = this.emitSettings;
      var v18781 = v22871.outputOption;
      var v25888 = this.emitSettings;
      var v24929 = v25888.outputOption;
      var v22872 = v24929.length;
      var v18782 = v22872 - 1;
      var v12627 = v18781.charAt(v18782);
      var v1945 = v12627 != "/";
      if(v1945) {
        var v1944 = this.emitSettings;
        var v18783 = v1944.outputOption;
        v1944.outputOption = v18783 + "/"
      }
      return
    }
    function v1267() {
      var i$$130 = 0;
      var v12628 = this.scripts;
      var v1946 = v12628.members;
      var len$$62 = v1946.length;
      var v1949 = i$$130 < len$$62;
      for(;v1949;) {
        var v12629 = this.scripts;
        var v1947 = v12629.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var script$$27 = v1947[i$$130]
        }
        var v18784 = script$$27.isDeclareFile;
        var v12630 = !v18784;
        if(v12630) {
          var v18785 = script$$27.topLevelMod;
          v12630 = v18785 != null
        }
        var v1948 = v12630;
        if(v1948) {
          return true
        }
        i$$130 = i$$130 + 1;
        v1949 = i$$130 < len$$62
      }
      return false
    }
    function v1266() {
      function v1265() {
        var v12631 = TypeScript$$32.CompilerDiagnostics;
        var v22873 = TypeScript$$32.CompilerDiagnostics;
        var v18786 = v22873.analysisPass;
        v12631.analysisPass = v18786 + 1;
        var v1950 = _this$$20.errorOutput;
        JAMScript.call(_this$$20.initTypeChecker, _this$$20, [v1950]);
        var v1951 = _this$$20.persistentTypeState;
        var v12632 = TypeScript$$32.TypeCheckCollectionMode;
        var v1952 = v12632.Transient;
        JAMScript.call(v1951.setCollectionMode, v1951, [v1952]);
        JAMScript.call(_this$$20.cleanTypesForReTypeCheck, _this$$20, []);
        return JAMScript.call(_this$$20.typeCheck, _this$$20, [])
      }
      var _this$$20 = this;
      return JAMScript.call(this.timeFunction, this, ["reTypeCheck()", v1265])
    }
    function v1264(updateResult$$4) {
      function v1263() {
        return false
      }
      return JAMScript.call(this.timeFunction, this, ["attemptIncrementalTypeCheck()", v1263])
    }
    function v1262() {
      function v1261() {
        var i$$129 = 0;
        var v12633 = _this$$19.scripts;
        var v1953 = v12633.members;
        var len$$61 = v1953.length;
        var v1957 = i$$129 < len$$61;
        for(;v1957;) {
          var v12634 = _this$$19.scripts;
          var v1954 = v12634.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var script$$26 = v1954[i$$129]
          }
          var v1955 = script$$26.isResident;
          if(v1955) {
            i$$129 = i$$129 + 1;
            v1957 = i$$129 < len$$61;
            continue
          }
          JAMScript.call(_this$$19.cleanASTTypesForReTypeCheck, _this$$19, [script$$26]);
          var v1956 = _this$$19.typeChecker;
          JAMScript.call(v1956.collectTypes, v1956, [script$$26]);
          i$$129 = i$$129 + 1;
          v1957 = i$$129 < len$$61
        }
        return null
      }
      var _this$$19 = this;
      return JAMScript.call(this.timeFunction, this, ["cleanTypesForReTypeCheck()", v1261])
    }
    function v1260(ast$$122) {
      function cleanASTType(ast$$123, parent$$72) {
        ast$$123.type = null;
        var v12635 = ast$$123.nodeType;
        var v18787 = TypeScript$$32.NodeType;
        var v12636 = v18787.VarDecl;
        var v1964 = v12635 == v12636;
        if(v1964) {
          var vardecl = ast$$123;
          vardecl.sym = null
        }else {
          var v12637 = ast$$123.nodeType;
          var v18788 = TypeScript$$32.NodeType;
          var v12638 = v18788.ArgDecl;
          var v1963 = v12637 == v12638;
          if(v1963) {
            var argdecl = ast$$123;
            argdecl.sym = null
          }else {
            var v12639 = ast$$123.nodeType;
            var v18789 = TypeScript$$32.NodeType;
            var v12640 = v18789.Name;
            var v1962 = v12639 == v12640;
            if(v1962) {
              var name$$87 = ast$$123;
              name$$87.sym = null
            }else {
              var v12641 = ast$$123.nodeType;
              var v18790 = TypeScript$$32.NodeType;
              var v12642 = v18790.FuncDecl;
              var v1961 = v12641 == v12642;
              if(v1961) {
                var funcdecl = ast$$123;
                funcdecl.signature = null;
                var v26930 = new Array;
                funcdecl.freeVariables = v26930;
                funcdecl.symbols = null;
                funcdecl.accessorSymbol = null;
                funcdecl.scopeType = null
              }else {
                var v12643 = ast$$123.nodeType;
                var v18791 = TypeScript$$32.NodeType;
                var v12644 = v18791.ModuleDeclaration;
                var v1960 = v12643 == v12644;
                if(v1960) {
                  var modDecl$$3 = ast$$123;
                  modDecl$$3.mod = null
                }else {
                  var v12645 = ast$$123.nodeType;
                  var v18792 = TypeScript$$32.NodeType;
                  var v12646 = v18792.With;
                  var v1959 = v12645 == v12646;
                  if(v1959) {
                    ast$$123.withSym = null
                  }else {
                    var v12647 = ast$$123.nodeType;
                    var v18793 = TypeScript$$32.NodeType;
                    var v12648 = v18793.Catch;
                    var v1958 = v12647 == v12648;
                    if(v1958) {
                      ast$$123.containedScope = null
                    }
                  }
                }
              }
            }
          }
        }
        return ast$$123
      }
      var v1965 = JAMScript.call(TypeScript$$32.getAstWalkerFactory, TypeScript$$32, []);
      JAMScript.call(v1965.walk, v1965, [ast$$122, cleanASTType]);
      return
    }
    function v1259() {
      function v1258() {
        var v1966 = TypeScript$$32.Binder;
        var v1967 = _this$$18.typeChecker;
        var binder$$1 = JAMScript.new(v1966, [v1967]);
        var v1968 = _this$$18.typeChecker;
        v1968.units = _this$$18.units;
        var v12649 = _this$$18.typeChecker;
        var v1969 = v12649.globalScope;
        var v12650 = _this$$18.typeChecker;
        var v1970 = v12650.globals;
        JAMScript.call(binder$$1.bind, binder$$1, [v1969, v1970]);
        var v12651 = _this$$18.typeChecker;
        var v1971 = v12651.globalScope;
        var v12652 = _this$$18.typeChecker;
        var v1972 = v12652.ambientGlobals;
        JAMScript.call(binder$$1.bind, binder$$1, [v1971, v1972]);
        var v12653 = _this$$18.typeChecker;
        var v1973 = v12653.globalScope;
        var v12654 = _this$$18.typeChecker;
        var v1974 = v12654.globalTypes;
        JAMScript.call(binder$$1.bind, binder$$1, [v1973, v1974]);
        var v12655 = _this$$18.typeChecker;
        var v1975 = v12655.globalScope;
        var v12656 = _this$$18.typeChecker;
        var v1976 = v12656.ambientGlobalTypes;
        JAMScript.call(binder$$1.bind, binder$$1, [v1975, v1976]);
        var v1977 = _this$$18;
        var v12657 = TypeScript$$32.TypeFlow;
        var v12658 = _this$$18.logger;
        var v18794 = _this$$18.typeChecker;
        var v12659 = v18794.globalScope;
        var v12660 = _this$$18.parser;
        var v12661 = _this$$18.typeChecker;
        var v26931 = JAMScript.new(v12657, [v12658, v12659, v12660, v12661]);
        v1977.typeFlow = v26931;
        var i$$128 = 0;
        var script$$25 = null;
        var v12662 = _this$$18.scripts;
        var v1978 = v12662.members;
        var len$$60 = v1978.length;
        var v1979 = _this$$18.persistentTypeState;
        var v12663 = TypeScript$$32.TypeCheckCollectionMode;
        var v1980 = v12663.Resident;
        JAMScript.call(v1979.setCollectionMode, v1979, [v1980]);
        i$$128 = 0;
        var v1985 = i$$128 < len$$60;
        for(;v1985;) {
          var v12664 = _this$$18.scripts;
          var v1981 = v12664.members;
          script$$25 = v1981[i$$128];
          var v18795 = script$$25.isResident;
          var v12665 = !v18795;
          var v18796 = !v12665;
          if(v18796) {
            v12665 = script$$25.hasBeenTypeChecked
          }
          var v1982 = v12665;
          if(v1982) {
            i$$128 = i$$128 + 1;
            v1985 = i$$128 < len$$60;
            continue
          }
          var v1983 = _this$$18.typeFlow;
          JAMScript.call(v1983.assignScopes, v1983, [script$$25]);
          var v1984 = _this$$18.typeFlow;
          JAMScript.call(v1984.initLibs, v1984, []);
          i$$128 = i$$128 + 1;
          v1985 = i$$128 < len$$60
        }
        i$$128 = 0;
        var v1989 = i$$128 < len$$60;
        for(;v1989;) {
          var v12666 = _this$$18.scripts;
          var v1986 = v12666.members;
          script$$25 = v1986[i$$128];
          var v18797 = script$$25.isResident;
          var v12667 = !v18797;
          var v18798 = !v12667;
          if(v18798) {
            v12667 = script$$25.hasBeenTypeChecked
          }
          var v1987 = v12667;
          if(v1987) {
            i$$128 = i$$128 + 1;
            v1989 = i$$128 < len$$60;
            continue
          }
          var v1988 = _this$$18.typeFlow;
          JAMScript.call(v1988.typeCheck, v1988, [script$$25]);
          script$$25.hasBeenTypeChecked = true;
          i$$128 = i$$128 + 1;
          v1989 = i$$128 < len$$60
        }
        var v1990 = _this$$18.persistentTypeState;
        var v12668 = TypeScript$$32.TypeCheckCollectionMode;
        var v1991 = v12668.Transient;
        JAMScript.call(v1990.setCollectionMode, v1990, [v1991]);
        var v12669 = _this$$18.scripts;
        var v1992 = v12669.members;
        len$$60 = v1992.length;
        i$$128 = 0;
        var v1997 = i$$128 < len$$60;
        for(;v1997;) {
          var v12670 = _this$$18.scripts;
          var v1993 = v12670.members;
          script$$25 = v1993[i$$128];
          var v1994 = script$$25.isResident;
          if(v1994) {
            i$$128 = i$$128 + 1;
            v1997 = i$$128 < len$$60;
            continue
          }
          var v1995 = _this$$18.typeFlow;
          JAMScript.call(v1995.assignScopes, v1995, [script$$25]);
          var v1996 = _this$$18.typeFlow;
          JAMScript.call(v1996.initLibs, v1996, []);
          i$$128 = i$$128 + 1;
          v1997 = i$$128 < len$$60
        }
        i$$128 = 0;
        var v2001 = i$$128 < len$$60;
        for(;v2001;) {
          var v12671 = _this$$18.scripts;
          var v1998 = v12671.members;
          script$$25 = v1998[i$$128];
          var v1999 = script$$25.isResident;
          if(v1999) {
            i$$128 = i$$128 + 1;
            v2001 = i$$128 < len$$60;
            continue
          }
          var v2000 = _this$$18.typeFlow;
          JAMScript.call(v2000.typeCheck, v2000, [script$$25]);
          i$$128 = i$$128 + 1;
          v2001 = i$$128 < len$$60
        }
        return null
      }
      var _this$$18 = this;
      return JAMScript.call(this.timeFunction, this, ["typeCheck()", v1258])
    }
    function v1257(sourceText$$9, filename$$9) {
      var v2002 = this.parser;
      var v2003 = this.errorOutput;
      JAMScript.call(v2002.setErrorRecovery, v2002, [v2003]);
      var v2004 = this.parser;
      var script$$24 = JAMScript.call(v2004.parse, v2004, [sourceText$$9, filename$$9, 0]);
      var v2005 = this.units;
      var index$$64 = v2005.length;
      var v2006 = this.units;
      JAMScript.set(v2006, index$$64, script$$24.locationInfo);
      var v2007 = this.typeChecker;
      JAMScript.call(v2007.collectTypes, v2007, [script$$24]);
      var v2008 = this.scripts;
      JAMScript.call(v2008.append, v2008, [script$$24]);
      return
    }
    function v1256(prog$$2, filename$$8) {
      var v12672 = TypeScript$$32.StringSourceText;
      var v2009 = JAMScript.new(v12672, [prog$$2]);
      return JAMScript.call(this.parseSourceUnit, this, [v2009, filename$$8])
    }
    function v1255(sourceText$$8, filename$$7, keepResident$$1, referencedFiles$$2) {
      function v1254() {
        var v2010 = _this$$17.parser;
        var v12673 = _this$$17.units;
        var v2011 = v12673.length;
        var v12674 = TypeScript$$32.AllowedElements;
        var v2012 = v12674.Global;
        var script$$23 = JAMScript.call(v2010.parse, v2010, [sourceText$$8, filename$$7, v2011, v2012]);
        script$$23.referencedFiles = referencedFiles$$2;
        script$$23.isResident = keepResident$$1;
        var v2013 = _this$$17.persistentTypeState;
        var v12675;
        if(keepResident$$1) {
          var v18799 = TypeScript$$32.TypeCheckCollectionMode;
          v12675 = v18799.Resident
        }else {
          var v18800 = TypeScript$$32.TypeCheckCollectionMode;
          v12675 = v18800.Transient
        }
        var v2014 = v12675;
        JAMScript.call(v2013.setCollectionMode, v2013, [v2014]);
        var v2015 = _this$$17.units;
        var index$$63 = v2015.length;
        var v2016 = _this$$17.units;
        JAMScript.set(v2016, index$$63, script$$23.locationInfo);
        var v2017 = _this$$17.typeChecker;
        JAMScript.call(v2017.collectTypes, v2017, [script$$23]);
        var v2018 = _this$$17.scripts;
        JAMScript.call(v2018.append, v2018, [script$$23]);
        return script$$23
      }
      var v12676 = typeof referencedFiles$$2;
      var v2019 = v12676 === "undefined";
      if(v2019) {
        referencedFiles$$2 = []
      }
      var _this$$17 = this;
      var v22874 = "addSourceUnit(" + filename$$7;
      var v18801 = v22874 + ", ";
      var v12677 = v18801 + keepResident$$1;
      var v2020 = v12677 + ")";
      return JAMScript.call(this.timeFunction, this, [v2020, v1254])
    }
    function v1253(prog$$1, filename$$6, keepResident, referencedFiles$$1) {
      var v12678 = typeof keepResident;
      var v2021 = v12678 === "undefined";
      if(v2021) {
        keepResident = false
      }
      var v12679 = typeof referencedFiles$$1;
      var v2022 = v12679 === "undefined";
      if(v2022) {
        referencedFiles$$1 = []
      }
      var v12680 = TypeScript$$32.StringSourceText;
      var v2023 = JAMScript.new(v12680, [prog$$1]);
      return JAMScript.call(this.addSourceUnit, this, [v2023, filename$$6, keepResident, referencedFiles$$1])
    }
    function v1252(sourceText$$7, filename$$5, setRecovery$$2) {
      function v1251() {
        function v1250(minChar$$36, charLen$$1, message$$22, unitIndex$$14) {
          var v12681 = minChar$$36 + charLen$$1;
          var v2024 = JAMScript.new(ErrorEntry, [unitIndex$$14, minChar$$36, v12681, message$$22]);
          JAMScript.call(parseErrors$$4.push, parseErrors$$4, [v2024]);
          return
        }
        var i$$127 = 0;
        var v2025 = _this$$16.units;
        var len$$59 = v2025.length;
        var v2034 = i$$127 < len$$59;
        for(;v2034;) {
          var v22875 = _this$$16.units;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v18802 = v22875[i$$127]
          }
          var v12682 = v18802.filename;
          var v2033 = v12682 == filename$$5;
          if(v2033) {
            var v22876 = _this$$16.scripts;
            var v18803 = v22876.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v12683 = v18803[i$$127]
            }
            var v2026 = v12683.isResident;
            if(v2026) {
              return JAMScript.call(UpdateUnitResult.noEdits, UpdateUnitResult, [i$$127])
            }
            if(setRecovery$$2) {
              var v2027 = _this$$16.parser;
              JAMScript.call(v2027.setErrorRecovery, v2027, [null])
            }
            var updateResult$$3;
            var parseErrors$$4 = [];
            var errorCapture$$2 = v1250;
            var v2028 = _this$$16.parser;
            var svErrorCallback = v2028.errorCallback;
            if(svErrorCallback) {
              var v2029 = _this$$16.parser;
              v2029.errorCallback = errorCapture$$2
            }
            var v12684 = _this$$16.scripts;
            var v2030 = v12684.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var oldScript = v2030[i$$127]
            }
            var v2031 = _this$$16.parser;
            var newScript = JAMScript.call(v2031.parse, v2031, [sourceText$$7, filename$$5, i$$127]);
            if(svErrorCallback) {
              var v2032 = _this$$16.parser;
              v2032.errorCallback = svErrorCallback
            }
            updateResult$$3 = JAMScript.call(UpdateUnitResult.unknownEdits, UpdateUnitResult, [oldScript, newScript, parseErrors$$4]);
            return updateResult$$3
          }
          i$$127 = i$$127 + 1;
          v2034 = i$$127 < len$$59
        }
        var v12685 = 'Unknown file "' + filename$$5;
        var v2035 = v12685 + '"';
        throw new Error(v2035);
      }
      var _this$$16 = this;
      var v12686 = "partialUpdateUnit(" + filename$$5;
      var v2036 = v12686 + ")";
      return JAMScript.call(this.timeFunction, this, [v2036, v1251])
    }
    function v1249(updateResult$$2) {
      var v2051 = updateResult$$2.kind;
      switch(v2051) {
        case UpdateUnitKind.NoEdits:
          return false;
        case UpdateUnitKind.Unknown:
          var v12687 = this.scripts;
          var v2037 = v12687.members;
          var v2038 = updateResult$$2.unitIndex;
          JAMScript.set(v2037, v2038, updateResult$$2.script2);
          var v2039 = this.units;
          var v2040 = updateResult$$2.unitIndex;
          var v12688 = updateResult$$2.script2;
          JAMScript.set(v2039, v2040, v12688.locationInfo);
          var i$$126 = 0;
          var v2041 = updateResult$$2.parseErrors;
          var len$$58 = v2041.length;
          var v2049 = i$$126 < len$$58;
          for(;v2049;) {
            var v2042 = updateResult$$2.parseErrors;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var e$$10 = v2042[i$$126]
            }
            var v12689 = this.parser;
            var v2048 = v12689.errorCallback;
            if(v2048) {
              var v2043 = this.parser;
              var v2044 = e$$10.minChar;
              var v12690 = e$$10.limChar;
              var v12691 = e$$10.minChar;
              var v2045 = v12690 - v12691;
              var v2046 = e$$10.message;
              var v2047 = e$$10.unitIndex;
              JAMScript.call(v2043.errorCallback, v2043, [v2044, v2045, v2046, v2047])
            }
            i$$126 = i$$126 + 1;
            v2049 = i$$126 < len$$58
          }
          return true;
        case UpdateUnitKind.EditsInsideSingleScope:
          var v12692 = TypeScript$$32.IncrementalParser;
          var v12693 = this.logger;
          var v2050 = JAMScript.new(v12692, [v12693]);
          JAMScript.call(v2050.mergeTrees, v2050, [updateResult$$2]);
          return true
      }
      return
    }
    function v1248(sourceText$$6, filename$$4, setRecovery$$1) {
      function v1247() {
        var updateResult$$1 = JAMScript.call(_this$$15.partialUpdateUnit, _this$$15, [sourceText$$6, filename$$4, setRecovery$$1]);
        return JAMScript.call(_this$$15.applyUpdateResult, _this$$15, [updateResult$$1])
      }
      var _this$$15 = this;
      var v12694 = "updateSourceUnit(" + filename$$4;
      var v2052 = v12694 + ")";
      return JAMScript.call(this.timeFunction, this, [v2052, v1247])
    }
    function v1246(prog, filename$$3, setRecovery) {
      var v12695 = TypeScript$$32.StringSourceText;
      var v2053 = JAMScript.new(v12695, [prog]);
      return JAMScript.call(this.updateSourceUnit, this, [v2053, filename$$3, setRecovery])
    }
    function v1245(fn$$10) {
      var v2054 = this.parser;
      v2054.errorCallback = fn$$10;
      return
    }
    function v1244() {
      var v2055 = TypeScript$$32.EmitOptions;
      var v2056 = this.settings;
      var v26932 = JAMScript.new(v2055, [v2056]);
      this.emitSettings = v26932;
      return
    }
    function v1243(outerr$$2) {
      this.errorOutput = outerr$$2;
      var v2057 = this.errorReporter;
      JAMScript.call(v2057.setErrOut, v2057, [outerr$$2]);
      var v2058 = this.parser;
      v2058.outfile = outerr$$2;
      return
    }
    function v1242(errorOutput$$1) {
      var v2059 = this.persistentTypeState;
      JAMScript.call(v2059.refreshPersistentState, v2059, []);
      var v2060 = TypeScript$$32.TypeChecker;
      var v2061 = this.persistentTypeState;
      var v26933 = JAMScript.new(v2060, [v2061]);
      this.typeChecker = v26933;
      var v2062 = this.typeChecker;
      v2062.errorReporter = this.errorReporter;
      var v2063 = this.typeChecker;
      var v12696 = this.settings;
      v2063.checkControlFlow = v12696.controlFlow;
      var v2064 = this.typeChecker;
      var v12697 = this.settings;
      v2064.checkControlFlowUseDef = v12697.controlFlowUseDef;
      var v2065 = this.typeChecker;
      var v12698 = this.settings;
      v2065.printControlFlowGraph = v12698.printControlFlow;
      var v2066 = this.typeChecker;
      var v12699 = this.settings;
      v2066.errorsOnWith = v12699.errorOnWith;
      var v2067 = this.typeChecker;
      var v12700 = this.settings;
      v2067.styleSettings = v12700.styleSettings;
      var v2068 = this.typeChecker;
      var v12701 = this.settings;
      v2068.canCallDefinitionSignature = v12701.canCallDefinitionSignature;
      var v2069 = this.errorReporter;
      v2069.checker = this.typeChecker;
      var v2070 = this.errorOutput;
      JAMScript.call(this.setErrorOutput, this, [v2070]);
      return
    }
    function v1241(funcDescription, func$$4) {
      var v2071 = this.logger;
      return JAMScript.call(TypeScript$$32.timeFunction, TypeScript$$32, [v2071, funcDescription, func$$4])
    }
    function TypeScriptCompiler$$1(errorOutput, logger$$6, settings$$4) {
      var v12702 = typeof logger$$6;
      var v2073 = v12702 === "undefined";
      if(v2073) {
        var v2072 = TypeScript$$32.NullLogger;
        logger$$6 = JAMScript.new(v2072, [])
      }
      var v12703 = typeof settings$$4;
      var v2074 = v12703 === "undefined";
      if(v2074) {
        settings$$4 = TypeScript$$32.defaultSettings
      }
      this.errorOutput = errorOutput;
      this.logger = logger$$6;
      this.settings = settings$$4;
      var v2075 = TypeScript$$32.Parser;
      var v26934 = JAMScript.new(v2075, []);
      this.parser = v26934;
      this.typeFlow = null;
      var v2076 = TypeScript$$32.ASTList;
      var v26935 = JAMScript.new(v2076, []);
      this.scripts = v26935;
      var v26936 = new Array;
      this.units = v26936;
      var v2077 = TypeScript$$32.ErrorReporter;
      var v2078 = this.errorOutput;
      var v26937 = JAMScript.new(v2077, [v2078]);
      this.errorReporter = v26937;
      var v2079 = TypeScript$$32.PersistentGlobalTypeState;
      var v2080 = this.errorReporter;
      var v26938 = JAMScript.new(v2079, [v2080]);
      this.persistentTypeState = v26938;
      var v2081 = this.errorReporter;
      v2081.parser = this.parser;
      var v2082 = this.errorOutput;
      JAMScript.call(this.initTypeChecker, this, [v2082]);
      var v2083 = this.parser;
      var v18804 = this.settings;
      var v12704 = v18804.styleSettings;
      v2083.style_requireSemi = v12704.requireSemi;
      var v2084 = this.parser;
      var v18805 = this.settings;
      var v12705 = v18805.styleSettings;
      v2084.style_funcInLoop = v12705.funcInLoop;
      var v2085 = this.parser;
      var v12706 = this.settings;
      v2085.inferPropertiesFromThisAssignment = v12706.inferPropertiesFromThisAssignment;
      var v2086 = TypeScript$$32.EmitOptions;
      var v2087 = this.settings;
      var v26939 = JAMScript.new(v2086, [v2087]);
      this.emitSettings = v26939;
      TypeScript$$32.codeGenTarget = settings$$4.codeGenTarget;
      return
    }
    var v2088 = TypeScriptCompiler$$1.prototype;
    v2088.timeFunction = v1241;
    var v2089 = TypeScriptCompiler$$1.prototype;
    v2089.initTypeChecker = v1242;
    var v2090 = TypeScriptCompiler$$1.prototype;
    v2090.setErrorOutput = v1243;
    var v2091 = TypeScriptCompiler$$1.prototype;
    v2091.emitCommentsToOutput = v1244;
    var v2092 = TypeScriptCompiler$$1.prototype;
    v2092.setErrorCallback = v1245;
    var v2093 = TypeScriptCompiler$$1.prototype;
    v2093.updateUnit = v1246;
    var v2094 = TypeScriptCompiler$$1.prototype;
    v2094.updateSourceUnit = v1248;
    var v2095 = TypeScriptCompiler$$1.prototype;
    v2095.applyUpdateResult = v1249;
    var v2096 = TypeScriptCompiler$$1.prototype;
    v2096.partialUpdateUnit = v1252;
    var v2097 = TypeScriptCompiler$$1.prototype;
    v2097.addUnit = v1253;
    var v2098 = TypeScriptCompiler$$1.prototype;
    v2098.addSourceUnit = v1255;
    var v2099 = TypeScriptCompiler$$1.prototype;
    v2099.parseUnit = v1256;
    var v2100 = TypeScriptCompiler$$1.prototype;
    v2100.parseSourceUnit = v1257;
    var v2101 = TypeScriptCompiler$$1.prototype;
    v2101.typeCheck = v1259;
    var v2102 = TypeScriptCompiler$$1.prototype;
    v2102.cleanASTTypesForReTypeCheck = v1260;
    var v2103 = TypeScriptCompiler$$1.prototype;
    v2103.cleanTypesForReTypeCheck = v1262;
    var v2104 = TypeScriptCompiler$$1.prototype;
    v2104.attemptIncrementalTypeCheck = v1264;
    var v2105 = TypeScriptCompiler$$1.prototype;
    v2105.reTypeCheck = v1266;
    var v2106 = TypeScriptCompiler$$1.prototype;
    v2106.isDynamicModuleCompilation = v1267;
    var v2107 = TypeScriptCompiler$$1.prototype;
    v2107.updateCommonDirectoryPath = v1268;
    var v2108 = TypeScriptCompiler$$1.prototype;
    v2108.parseEmitOption = v1269;
    var v2109 = TypeScriptCompiler$$1.prototype;
    v2109.useUTF8ForFile = v1270;
    TypeScriptCompiler$$1.mapToDTSFileName = mapToDTSFileName;
    var v2110 = TypeScriptCompiler$$1.prototype;
    v2110.canEmitDeclarations = v1271;
    var v2111 = TypeScriptCompiler$$1.prototype;
    v2111.emitDeclarationsUnit = v1272;
    var v2112 = TypeScriptCompiler$$1.prototype;
    v2112.emitDeclarations = v1273;
    TypeScriptCompiler$$1.mapToFileNameExtension = mapToFileNameExtension;
    TypeScriptCompiler$$1.mapToJSFileName = mapToJSFileName;
    var v2113 = TypeScriptCompiler$$1.prototype;
    v2113.emitUnit = v1274;
    var v2114 = TypeScriptCompiler$$1.prototype;
    v2114.emit = v1275;
    var v2115 = TypeScriptCompiler$$1.prototype;
    v2115.emitToOutfile = v1276;
    var v2116 = TypeScriptCompiler$$1.prototype;
    v2116.emitAST = v1278;
    var v2117 = TypeScriptCompiler$$1.prototype;
    v2117.outputScriptToUTF8 = v1279;
    var v2118 = TypeScriptCompiler$$1.prototype;
    v2118.outputScriptsToUTF8 = v1280;
    var v2119 = TypeScriptCompiler$$1.prototype;
    v2119.createFile = v1281;
    return TypeScriptCompiler$$1
  }
  function v1240() {
    function ErrorEntry$$1(unitIndex$$13, minChar$$35, limChar$$13, message$$21) {
      this.unitIndex = unitIndex$$13;
      this.minChar = minChar$$35;
      this.limChar = limChar$$13;
      this.message = message$$21;
      return
    }
    return ErrorEntry$$1
  }
  function v1239() {
    function singleScopeEdits(script1$$2, script2$$2, scope1$$2, scope2$$1, editRange$$4, parseErrors$$3) {
      var v2120 = UpdateUnitKind.EditsInsideSingleScope;
      var v12707 = script1$$2.locationInfo;
      var v2121 = v12707.unitIndex;
      var result$$36 = new UpdateUnitResult$$1(v2120, v2121, script1$$2, script2$$2);
      result$$36.scope1 = scope1$$2;
      result$$36.scope2 = scope2$$1;
      result$$36.editRange = editRange$$4;
      result$$36.parseErrors = parseErrors$$3;
      return result$$36
    }
    function unknownEdits(script1$$1, script2$$1, parseErrors$$2) {
      var v2122 = UpdateUnitKind.Unknown;
      var v12708 = script1$$1.locationInfo;
      var v2123 = v12708.unitIndex;
      var result$$35 = new UpdateUnitResult$$1(v2122, v2123, script1$$1, script2$$1);
      result$$35.parseErrors = parseErrors$$2;
      return result$$35
    }
    function noEdits(unitIndex$$12) {
      var v2124 = UpdateUnitKind.NoEdits;
      return new UpdateUnitResult$$1(v2124, unitIndex$$12, null, null)
    }
    function UpdateUnitResult$$1(kind, unitIndex$$11, script1, script2) {
      this.kind = kind;
      this.unitIndex = unitIndex$$11;
      this.script1 = script1;
      this.script2 = script2;
      this.scope1 = null;
      this.scope2 = null;
      this.editRange = null;
      this.parseErrors = [];
      return
    }
    UpdateUnitResult$$1.noEdits = noEdits;
    UpdateUnitResult$$1.unknownEdits = unknownEdits;
    UpdateUnitResult$$1.singleScopeEdits = singleScopeEdits;
    return UpdateUnitResult$$1
  }
  function v1238() {
    function v1237() {
      var v25889 = this.minChar;
      var v24930 = "editRange(minChar=" + v25889;
      var v22877 = v24930 + ", limChar=";
      var v22878 = this.limChar;
      var v18806 = v22877 + v22878;
      var v12709 = v18806 + ", delta=";
      var v12710 = this.delta;
      var v2125 = v12709 + v12710;
      return v2125 + ")"
    }
    function v1236(pos$$8) {
      var v18807 = this.minChar;
      var v12711 = v18807 <= pos$$8;
      if(v12711) {
        var v18808 = this.limChar;
        v12711 = pos$$8 < v18808
      }
      var v2126 = v12711;
      var v12713 = !v2126;
      if(v12713) {
        var v18809 = this.minChar;
        var v12712 = v18809 <= pos$$8;
        if(v12712) {
          var v22879 = this.limChar;
          var v22880 = this.delta;
          var v18810 = v22879 + v22880;
          v12712 = pos$$8 < v18810
        }
        v2126 = v12712
      }
      return v2126
    }
    function v1235() {
      var v12714 = this.minChar;
      var v2127 = v12714 === -1;
      if(v2127) {
        var v18811 = this.limChar;
        var v12715 = v18811 === -1;
        if(v12715) {
          var v18812 = this.delta;
          v12715 = v18812 === -1
        }
        v2127 = v12715
      }
      return v2127
    }
    function unknown() {
      return new ScriptEditRange$$1(-1, -1, -1)
    }
    function ScriptEditRange$$1(minChar$$34, limChar$$12, delta$$2) {
      this.minChar = minChar$$34;
      this.limChar = limChar$$12;
      this.delta = delta$$2;
      return
    }
    ScriptEditRange$$1.unknown = unknown;
    var v2128 = ScriptEditRange$$1.prototype;
    v2128.isUnknown = v1235;
    var v2129 = ScriptEditRange$$1.prototype;
    v2129.containsPosition = v1236;
    var v2130 = ScriptEditRange$$1.prototype;
    v2130.toString = v1237;
    return ScriptEditRange$$1
  }
  function v1234(UpdateUnitKind$$1) {
    UpdateUnitKind$$1._map = [];
    var v2131 = UpdateUnitKind$$1._map;
    v2131[0] = "Unknown";
    UpdateUnitKind$$1.Unknown = 0;
    var v2132 = UpdateUnitKind$$1._map;
    v2132[1] = "NoEdits";
    UpdateUnitKind$$1.NoEdits = 1;
    var v2133 = UpdateUnitKind$$1._map;
    v2133[2] = "EditsInsideSingleScope";
    UpdateUnitKind$$1.EditsInsideSingleScope = 2;
    return
  }
  var v12716 = TypeScript$$32.UpdateUnitKind;
  var v18813 = !v12716;
  if(v18813) {
    v12716 = TypeScript$$32.UpdateUnitKind = {}
  }
  var v2134 = v12716;
  v1234(v2134);
  var UpdateUnitKind = TypeScript$$32.UpdateUnitKind;
  var ScriptEditRange = v1238();
  TypeScript$$32.ScriptEditRange = ScriptEditRange;
  var UpdateUnitResult = v1239();
  TypeScript$$32.UpdateUnitResult = UpdateUnitResult;
  var ErrorEntry = v1240();
  TypeScript$$32.ErrorEntry = ErrorEntry;
  var v2135 = TypeScript$$32;
  var v12717 = TypeScript$$32.CompilationSettings;
  var v26940 = JAMScript.new(v12717, []);
  v2135.defaultSettings = v26940;
  var TypeScriptCompiler = v1282();
  TypeScript$$32.TypeScriptCompiler = TypeScriptCompiler;
  var ScopeEntry = v1283();
  TypeScript$$32.ScopeEntry = ScopeEntry;
  var ScopeTraversal = v1287();
  TypeScript$$32.ScopeTraversal = ScopeTraversal;
  return
}
function v1233(TypeScript$$31) {
  function v1232() {
    function v1231(pre$$21, ast$$121) {
      var v12718 = ast$$121.flags;
      var v18814 = TypeScript$$31.ASTFlags;
      var v12719 = v18814.IsStatement;
      var v2136 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12718, v12719]);
      return!v2136
    }
    function v1230(pre$$20, script$$22) {
      if(pre$$20) {
        var v12720 = this.emitOptions;
        var v2145 = v12720.outputMany;
        if(v2145) {
          var i$$125 = 0;
          var v18815 = script$$22.referencedFiles;
          var v12721 = v18815.length;
          var v2144 = i$$125 < v12721;
          for(;v2144;) {
            var v12722 = script$$22.referencedFiles;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v2137 = v12722[i$$125]
            }
            var referencePath$$1 = v2137.path;
            var declareFileName$$1;
            var v2141 = JAMScript.call(TypeScript$$31.isRooted, TypeScript$$31, [referencePath$$1]);
            if(v2141) {
              var v2138 = this.emitOptions;
              var v12723 = TypeScript$$31.TypeScriptCompiler;
              var v2139 = v12723.mapToDTSFileName;
              declareFileName$$1 = JAMScript.call(v2138.mapOutputFileName, v2138, [referencePath$$1, v2139])
            }else {
              var v18816 = script$$22.referencedFiles;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v12724 = v18816[i$$125]
              }
              var v2140 = v12724.path;
              declareFileName$$1 = JAMScript.call(TypeScript$$31.getDeclareFilePath, TypeScript$$31, [v2140])
            }
            var v2142 = this.declFile;
            var v12725 = '/// <reference path="' + declareFileName$$1;
            var v2143 = v12725 + '" />';
            JAMScript.call(v2142.WriteLine, v2142, [v2143]);
            i$$125 = i$$125 + 1;
            var v18817 = script$$22.referencedFiles;
            var v12726 = v18817.length;
            v2144 = i$$125 < v12726
          }
        }
        JAMScript.call(this.pushDeclarationContainer, this, [script$$22])
      }else {
        JAMScript.call(this.popDeclarationContainer, this, [script$$22])
      }
      return true
    }
    function v1229(pre$$19, moduleDecl$$9) {
      var v12727 = moduleDecl$$9.modFlags;
      var v18818 = TypeScript$$31.ModuleFlags;
      var v12728 = v18818.IsWholeFile;
      var v2165 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12727, v12728]);
      if(v2165) {
        var v12729 = moduleDecl$$9.modFlags;
        var v18819 = TypeScript$$31.ModuleFlags;
        var v12730 = v18819.IsDynamic;
        var v2164 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12729, v12730]);
        if(v2164) {
          if(pre$$19) {
            var v18820 = this.emitOptions;
            var v12731 = v18820.outputMany;
            var v2155 = !v12731;
            if(v2155) {
              this.singleDeclFile = this.declFile;
              var v2146 = TypeScript$$31.CompilerDiagnostics;
              var v18821 = this.indenter;
              var v12732 = v18821.indentAmt;
              var v2147 = v12732 == 0;
              JAMScript.call(v2146.assert, v2146, [v2147, "Indent has to be 0 when outputing new file"]);
              var v2148 = this.emitOptions;
              var v22881 = moduleDecl$$9.name;
              var v18822 = v22881.sym;
              var v12733 = v18822.name;
              var v2149 = JAMScript.call(TypeScript$$31.stripQuotes, TypeScript$$31, [v12733]);
              var v12734 = TypeScript$$31.TypeScriptCompiler;
              var v2150 = v12734.mapToDTSFileName;
              var declareFileName = JAMScript.call(v2148.mapOutputFileName, v2148, [v2149, v2150]);
              var v2151 = moduleDecl$$9.containsUnicodeChar;
              var v12736 = !v2151;
              if(v12736) {
                var v18823 = this.emitOptions;
                var v12735 = v18823.emitComments;
                if(v12735) {
                  v12735 = moduleDecl$$9.containsUnicodeCharInComment
                }
                v2151 = v12735
              }
              var useUTF8InOutputfile$$1 = v2151;
              try {
                var v18824 = this.emitOptions;
                var v12737 = v18824.ioHost;
                var v2152 = JAMScript.call(v12737.createFile, v12737, [declareFileName, useUTF8InOutputfile$$1]);
                var v26941 = JAMScript.new(DeclFileWriter, [v2152]);
                this.declFile = v26941
              }catch(ex$$4) {
                var v2153 = this.errorReporter;
                var v2154 = ex$$4.message;
                JAMScript.call(v2153.emitterError, v2153, [null, v2154])
              }
            }
            JAMScript.call(this.pushDeclarationContainer, this, [moduleDecl$$9])
          }else {
            var v18825 = this.emitOptions;
            var v12738 = v18825.outputMany;
            var v2163 = !v12738;
            if(v2163) {
              var v2156 = TypeScript$$31.CompilerDiagnostics;
              var v12739 = this.singleDeclFile;
              var v12740 = this.declFile;
              var v2157 = v12739 != v12740;
              JAMScript.call(v2156.assert, v2156, [v2157, "singleDeclFile cannot be null as we are going to revert back to it"]);
              var v2158 = TypeScript$$31.CompilerDiagnostics;
              var v18826 = this.indenter;
              var v12741 = v18826.indentAmt;
              var v2159 = v12741 == 0;
              JAMScript.call(v2158.assert, v2158, [v2159, "Indent has to be 0 when outputing new file"]);
              try {
                var v2160 = this.declFile;
                JAMScript.call(v2160.Close, v2160, [])
              }catch(ex$$5) {
                var v2161 = this.errorReporter;
                var v2162 = ex$$5.message;
                JAMScript.call(v2161.emitterError, v2161, [null, v2162])
              }
              this.declFile = this.singleDeclFile
            }
            JAMScript.call(this.popDeclarationContainer, this, [moduleDecl$$9])
          }
        }
        return true
      }
      var v2166 = JAMScript.call(moduleDecl$$9.isEnum, moduleDecl$$9, []);
      if(v2166) {
        if(pre$$19) {
          JAMScript.call(this.emitEnumSignature, this, [moduleDecl$$9])
        }
        return false
      }
      var v22882 = moduleDecl$$9.modFlags;
      var v18827 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22882]);
      var v12742 = JAMScript.call(this.canEmitPrePostAstSignature, this, [v18827, moduleDecl$$9, pre$$19]);
      var v2167 = !v12742;
      if(v2167) {
        return false
      }
      if(pre$$19) {
        var v2169 = JAMScript.call(this.emitDottedModuleName, this, []);
        if(v2169) {
          var v12743 = this.dottedModuleEmit;
          this.dottedModuleEmit = v12743 + "."
        }else {
          var v12744 = moduleDecl$$9.modFlags;
          var v2168 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12744]);
          var v26942 = JAMScript.call(this.getDeclFlagsString, this, [v2168, "module"]);
          this.dottedModuleEmit = v26942
        }
        var v12745 = this.dottedModuleEmit;
        var v18828 = moduleDecl$$9.name;
        var v12746 = v18828.text;
        this.dottedModuleEmit = v12745 + v12746;
        var v22883 = moduleDecl$$9.members;
        var v18829 = v22883.members;
        var v12747 = v18829.length;
        var v2170 = v12747 == 1;
        if(v2170) {
          var v25890 = moduleDecl$$9.members;
          var v24931 = v25890.members;
          var v22884 = v24931[0];
          var v18830 = v22884.nodeType;
          var v22885 = TypeScript$$31.NodeType;
          var v18831 = v22885.ModuleDeclaration;
          var v12748 = v18830 == v18831;
          if(v12748) {
            var v26402 = moduleDecl$$9.members;
            var v25891 = v26402.members;
            var v24932 = v25891[0];
            var v22886 = JAMScript.call(v24932.isEnum, v24932, []);
            var v18832 = !v22886;
            if(v18832) {
              var v26403 = moduleDecl$$9.members;
              var v25892 = v26403.members;
              var v24933 = v25892[0];
              var v22887 = v24933.modFlags;
              var v24934 = TypeScript$$31.ModuleFlags;
              var v22888 = v24934.Exported;
              v18832 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [v22887, v22888])
            }
            v12748 = v18832
          }
          v2170 = v12748
        }
        var isCurrentModuleDotted = v2170;
        var moduleDeclComments = JAMScript.call(moduleDecl$$9.getDocComments, moduleDecl$$9, []);
        var v2171 = isCurrentModuleDotted;
        if(v2171) {
          var v12749 = moduleDeclComments == null;
          var v18834 = !v12749;
          if(v18834) {
            var v18833 = moduleDeclComments.length;
            v12749 = v18833 == 0
          }
          v2171 = v12749
        }
        isCurrentModuleDotted = v2171;
        var v2172 = this.isDottedModuleName;
        JAMScript.call(v2172.push, v2172, [isCurrentModuleDotted]);
        JAMScript.call(this.pushDeclarationContainer, this, [moduleDecl$$9]);
        var v2177 = !isCurrentModuleDotted;
        if(v2177) {
          JAMScript.call(this.emitDeclarationComments, this, [moduleDecl$$9]);
          var v2173 = this.declFile;
          var v2174 = this.dottedModuleEmit;
          JAMScript.call(v2173.Write, v2173, [v2174]);
          var v2175 = this.declFile;
          JAMScript.call(v2175.WriteLine, v2175, [" {"]);
          var v2176 = this.indenter;
          JAMScript.call(v2176.increaseIndent, v2176, [])
        }
      }else {
        var v12750 = JAMScript.call(this.emitDottedModuleName, this, []);
        var v2180 = !v12750;
        if(v2180) {
          var v2178 = this.indenter;
          JAMScript.call(v2178.decreaseIndent, v2178, []);
          JAMScript.call(this.emitIndent, this, []);
          var v2179 = this.declFile;
          JAMScript.call(v2179.WriteLine, v2179, ["}"])
        }
        JAMScript.call(this.popDeclarationContainer, this, [moduleDecl$$9]);
        var v2181 = this.isDottedModuleName;
        JAMScript.call(v2181.pop, v2181, [])
      }
      return true
    }
    function v1228(moduleDecl$$8) {
      var v22889 = moduleDecl$$8.modFlags;
      var v18835 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22889]);
      var v12751 = JAMScript.call(this.canEmitSignature, this, [v18835]);
      var v2182 = !v12751;
      if(v2182) {
        return false
      }
      JAMScript.call(this.emitDeclarationComments, this, [moduleDecl$$8]);
      var v12752 = moduleDecl$$8.modFlags;
      var v2183 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12752]);
      JAMScript.call(this.emitDeclFlags, this, [v2183, "enum"]);
      var v2184 = this.declFile;
      var v18836 = moduleDecl$$8.name;
      var v12753 = v18836.text;
      var v2185 = v12753 + " {";
      JAMScript.call(v2184.WriteLine, v2184, [v2185]);
      var v2186 = this.indenter;
      JAMScript.call(v2186.increaseIndent, v2186, []);
      var v12754 = moduleDecl$$8.members;
      var v2187 = v12754.members;
      var membersLen$$1 = v2187.length;
      var j$$19 = 1;
      var v2194 = j$$19 < membersLen$$1;
      for(;v2194;) {
        var v12755 = moduleDecl$$8.members;
        var v2188 = v12755.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var memberDecl$$1 = v2188[j$$19]
        }
        var v12756 = memberDecl$$1.nodeType;
        var v18837 = TypeScript$$31.NodeType;
        var v12757 = v18837.VarDecl;
        var v2193 = v12756 == v12757;
        if(v2193) {
          JAMScript.call(this.emitDeclarationComments, this, [memberDecl$$1]);
          JAMScript.call(this.emitIndent, this, []);
          var v2189 = this.declFile;
          var v18838 = memberDecl$$1.id;
          var v12758 = v18838.text;
          var v2190 = v12758 + ",";
          JAMScript.call(v2189.WriteLine, v2189, [v2190])
        }else {
          var v2191 = TypeScript$$31.CompilerDiagnostics;
          var v12759 = memberDecl$$1.nodeType;
          var v18839 = TypeScript$$31.NodeType;
          var v12760 = v18839.Asg;
          var v2192 = v12759 != v12760;
          JAMScript.call(v2191.assert, v2191, [v2192, "We want to catch this"])
        }
        j$$19 = j$$19 + 1;
        v2194 = j$$19 < membersLen$$1
      }
      var v2195 = this.indenter;
      JAMScript.call(v2195.decreaseIndent, v2195, []);
      JAMScript.call(this.emitIndent, this, []);
      var v2196 = this.declFile;
      JAMScript.call(v2196.WriteLine, v2196, ["}"]);
      return false
    }
    function v1227(pre$$18, importDecl$$3) {
      if(pre$$18) {
        var v18840 = this.declarationContainerStack;
        var v12761 = v18840[0];
        var v18841 = importDecl$$3.id;
        var v12762 = v18841.sym;
        var v2205 = JAMScript.call(v12761.isExternallyVisibleSymbol, v12761, [v12762]);
        if(v2205) {
          JAMScript.call(this.emitDeclarationComments, this, [importDecl$$3]);
          JAMScript.call(this.emitIndent, this, []);
          var v2197 = this.declFile;
          JAMScript.call(v2197.Write, v2197, ["import "]);
          var v2198 = this.declFile;
          var v18842 = importDecl$$3.id;
          var v12763 = v18842.text;
          var v2199 = v12763 + " = ";
          JAMScript.call(v2198.Write, v2198, [v2199]);
          var v2204 = importDecl$$3.isDynamicImport;
          if(v2204) {
            var v2200 = this.declFile;
            var v18843 = JAMScript.call(importDecl$$3.getAliasName, importDecl$$3, []);
            var v12764 = "module (" + v18843;
            var v2201 = v12764 + ");";
            JAMScript.call(v2200.WriteLine, v2200, [v2201])
          }else {
            var v2202 = this.declFile;
            var v12765 = JAMScript.call(importDecl$$3.getAliasName, importDecl$$3, []);
            var v2203 = v12765 + ";";
            JAMScript.call(v2202.WriteLine, v2202, [v2203])
          }
        }
      }
      return false
    }
    function v1226(pre$$17, interfaceDecl$$7) {
      var v22890 = interfaceDecl$$7.varFlags;
      var v18844 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22890]);
      var v12766 = JAMScript.call(this.canEmitPrePostAstSignature, this, [v18844, interfaceDecl$$7, pre$$17]);
      var v2206 = !v12766;
      if(v2206) {
        return false
      }
      if(pre$$17) {
        var v2207 = interfaceDecl$$7.name;
        var interfaceName$$1 = v2207.text;
        JAMScript.call(this.emitDeclarationComments, this, [interfaceDecl$$7]);
        var v12767 = interfaceDecl$$7.varFlags;
        var v2208 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12767]);
        JAMScript.call(this.emitDeclFlags, this, [v2208, "interface"]);
        var v2209 = this.declFile;
        JAMScript.call(v2209.Write, v2209, [interfaceName$$1]);
        var v2210 = interfaceDecl$$7.extendsList;
        JAMScript.call(this.emitBaseList, this, [v2210, "extends"]);
        var v2211 = this.declFile;
        JAMScript.call(v2211.WriteLine, v2211, [" {"]);
        var v2212 = this.indenter;
        JAMScript.call(v2212.increaseIndent, v2212, []);
        JAMScript.call(this.pushDeclarationContainer, this, [interfaceDecl$$7])
      }else {
        var v2213 = this.indenter;
        JAMScript.call(v2213.decreaseIndent, v2213, []);
        JAMScript.call(this.popDeclarationContainer, this, [interfaceDecl$$7]);
        JAMScript.call(this.emitIndent, this, []);
        var v2214 = this.declFile;
        JAMScript.call(v2214.WriteLine, v2214, ["}"])
      }
      return true
    }
    function v1225(pre$$16, classDecl$$10) {
      var v22891 = classDecl$$10.varFlags;
      var v18845 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22891]);
      var v12768 = JAMScript.call(this.canEmitPrePostAstSignature, this, [v18845, classDecl$$10, pre$$16]);
      var v2215 = !v12768;
      if(v2215) {
        return false
      }
      if(pre$$16) {
        var v2216 = classDecl$$10.name;
        var className$$5 = v2216.text;
        JAMScript.call(this.emitDeclarationComments, this, [classDecl$$10]);
        var v12769 = classDecl$$10.varFlags;
        var v2217 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12769]);
        JAMScript.call(this.emitDeclFlags, this, [v2217, "class"]);
        var v2218 = this.declFile;
        JAMScript.call(v2218.Write, v2218, [className$$5]);
        var v2219 = classDecl$$10.extendsList;
        JAMScript.call(this.emitBaseList, this, [v2219, "extends"]);
        var v2220 = classDecl$$10.implementsList;
        JAMScript.call(this.emitBaseList, this, [v2220, "implements"]);
        var v2221 = this.declFile;
        JAMScript.call(v2221.WriteLine, v2221, [" {"]);
        JAMScript.call(this.pushDeclarationContainer, this, [classDecl$$10]);
        var v2222 = this.indenter;
        JAMScript.call(v2222.increaseIndent, v2222, []);
        var v2224 = classDecl$$10.constructorDecl;
        if(v2224) {
          var v2223 = classDecl$$10.constructorDecl;
          JAMScript.call(this.emitClassMembersFromConstructorDefinition, this, [v2223])
        }
      }else {
        var v2225 = this.indenter;
        JAMScript.call(v2225.decreaseIndent, v2225, []);
        JAMScript.call(this.popDeclarationContainer, this, [classDecl$$10]);
        JAMScript.call(this.emitIndent, this, []);
        var v2226 = this.declFile;
        JAMScript.call(v2226.WriteLine, v2226, ["}"])
      }
      return true
    }
    function v1224(funcDecl$$37) {
      var v2239 = funcDecl$$37.arguments;
      if(v2239) {
        var v12770 = funcDecl$$37.arguments;
        var v2227 = v12770.members;
        var argsLen$$3 = v2227.length;
        var v2228 = funcDecl$$37.variableArgList;
        if(v2228) {
          argsLen$$3 = argsLen$$3 - 1
        }
        var i$$124 = 0;
        var v2238 = i$$124 < argsLen$$3;
        for(;v2238;) {
          var v12771 = funcDecl$$37.arguments;
          var v2229 = v12771.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var argDecl$$4 = v2229[i$$124]
          }
          var v12772 = argDecl$$4.varFlags;
          var v18846 = TypeScript$$31.VarFlags;
          var v12773 = v18846.Property;
          var v2237 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12772, v12773]);
          if(v2237) {
            JAMScript.call(this.emitDeclarationComments, this, [argDecl$$4]);
            var v12774 = argDecl$$4.varFlags;
            var v2230 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12774]);
            JAMScript.call(this.emitDeclFlags, this, [v2230, "var"]);
            var v2231 = this.declFile;
            var v12775 = argDecl$$4.id;
            var v2232 = v12775.text;
            JAMScript.call(v2231.Write, v2231, [v2232]);
            var v12776 = argDecl$$4.typeExpr;
            if(v12776) {
              var v22892 = argDecl$$4.varFlags;
              var v18847 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22892]);
              v12776 = JAMScript.call(this.canEmitTypeAnnotationSignature, this, [v18847])
            }
            var v2235 = v12776;
            if(v2235) {
              var v2233 = this.declFile;
              JAMScript.call(v2233.Write, v2233, [": "]);
              var v2234 = argDecl$$4.type;
              JAMScript.call(this.emitTypeSignature, this, [v2234])
            }
            var v2236 = this.declFile;
            JAMScript.call(v2236.WriteLine, v2236, [";"])
          }
          i$$124 = i$$124 + 1;
          v2238 = i$$124 < argsLen$$3
        }
      }
      return
    }
    function v1223(funcDecl$$36) {
      var accessorSymbol$$1 = funcDecl$$36.accessorSymbol;
      var v12777 = accessorSymbol$$1.getter;
      if(v12777) {
        var v22893 = accessorSymbol$$1.getter;
        var v18848 = v22893.declAST;
        v12777 = v18848 != funcDecl$$36
      }
      var v2240 = v12777;
      if(v2240) {
        return false
      }
      JAMScript.call(this.emitDeclarationComments, this, [accessorSymbol$$1]);
      var v12778 = accessorSymbol$$1.flags;
      var v2241 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12778]);
      JAMScript.call(this.emitDeclFlags, this, [v2241, "var"]);
      var v2242 = this.declFile;
      var v12779 = funcDecl$$36.name;
      var v2243 = v12779.text;
      JAMScript.call(v2242.Write, v2242, [v2243]);
      var propertyType = JAMScript.call(accessorSymbol$$1.getType, accessorSymbol$$1, []);
      var v18849 = accessorSymbol$$1.flags;
      var v12780 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v18849]);
      var v2245 = JAMScript.call(this.canEmitTypeAnnotationSignature, this, [v12780]);
      if(v2245) {
        var v2244 = this.declFile;
        JAMScript.call(v2244.Write, v2244, [" : "]);
        JAMScript.call(this.emitTypeSignature, this, [propertyType])
      }
      var v2246 = this.declFile;
      JAMScript.call(v2246.WriteLine, v2246, [";"]);
      return false
    }
    function v1222(bases$$8, qual) {
      var v12781 = bases$$8;
      if(v12781) {
        var v22894 = bases$$8.members;
        var v18850 = v22894.length;
        v12781 = v18850 > 0
      }
      var v2255 = v12781;
      if(v2255) {
        var v2247 = this.declFile;
        var v12782 = " " + qual;
        var v2248 = v12782 + " ";
        JAMScript.call(v2247.Write, v2247, [v2248]);
        var v2249 = bases$$8.members;
        var basesLen$$3 = v2249.length;
        var i$$123 = 0;
        var v2254 = i$$123 < basesLen$$3;
        for(;v2254;) {
          var v2250 = bases$$8.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var baseExpr$$3 = v2250[i$$123]
          }
          var v2251 = baseExpr$$3.type;
          var baseSymbol$$4 = v2251.symbol;
          var baseType$$1 = baseExpr$$3.type;
          var v2253 = i$$123 > 0;
          if(v2253) {
            var v2252 = this.declFile;
            JAMScript.call(v2252.Write, v2252, [", "])
          }
          JAMScript.call(this.emitTypeSignature, this, [baseType$$1]);
          i$$123 = i$$123 + 1;
          v2254 = i$$123 < basesLen$$3
        }
      }
      return
    }
    function v1221(pre$$15, funcDecl$$35) {
      var v2256 = !pre$$15;
      if(v2256) {
        return false
      }
      var v2257 = JAMScript.call(funcDecl$$35.isAccessor, funcDecl$$35, []);
      if(v2257) {
        return JAMScript.call(this.emitPropertyAccessorSignature, this, [funcDecl$$35])
      }
      var v12783 = JAMScript.call(this.getAstDeclarationContainer, this, []);
      var v2258 = v12783.nodeType;
      var v12784 = TypeScript$$31.NodeType;
      var v2259 = v12784.InterfaceDeclaration;
      var isInterfaceMember = v2258 == v2259;
      var v2269 = funcDecl$$35.bod;
      if(v2269) {
        var v2262 = funcDecl$$35.isConstructor;
        if(v2262) {
          var v18851 = funcDecl$$35.type;
          var v12785 = v18851.construct;
          if(v12785) {
            var v25893 = funcDecl$$35.type;
            var v24935 = v25893.construct;
            var v22895 = v24935.signatures;
            var v18852 = v22895.length;
            v12785 = v18852 > 1
          }
          var v2260 = v12785;
          if(v2260) {
            return false
          }
        }else {
          var v18853 = funcDecl$$35.type;
          var v12786 = v18853.call;
          if(v12786) {
            var v25894 = funcDecl$$35.type;
            var v24936 = v25894.call;
            var v22896 = v24936.signatures;
            var v18854 = v22896.length;
            v12786 = v18854 > 1
          }
          var v2261 = v12786;
          if(v2261) {
            return false
          }
        }
      }else {
        var v12787 = !isInterfaceMember;
        if(v12787) {
          var v22897 = funcDecl$$35.fncFlags;
          var v24937 = TypeScript$$31.FncFlags;
          var v22898 = v24937.Private;
          var v18855 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [v22897, v22898]);
          if(v18855) {
            var v24938 = funcDecl$$35.type;
            var v22899 = v24938.call;
            if(v22899) {
              var v26655 = funcDecl$$35.type;
              var v26404 = v26655.call;
              var v25895 = v26404.signatures;
              var v24939 = v25895.length;
              v22899 = v24939 > 1
            }
            v18855 = v22899
          }
          v12787 = v18855
        }
        var v2268 = v12787;
        if(v2268) {
          var v12788 = funcDecl$$35.type;
          var v2263 = v12788.call;
          var signatures$$4 = v2263.signatures;
          var v2264 = signatures$$4[0];
          var firstSignature = v2264.declAST;
          var v2266 = firstSignature.bod;
          if(v2266) {
            var v2265 = signatures$$4[1];
            firstSignature = v2265.declAST
          }
          var v2267 = firstSignature != funcDecl$$35;
          if(v2267) {
            return false
          }
        }
      }
      var v22900 = funcDecl$$35.fncFlags;
      var v18856 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22900]);
      var v12789 = JAMScript.call(this.canEmitSignature, this, [v18856, false]);
      var v2270 = !v12789;
      if(v2270) {
        return false
      }
      JAMScript.call(this.emitDeclarationComments, this, [funcDecl$$35]);
      var v2281 = funcDecl$$35.isConstructor;
      if(v2281) {
        JAMScript.call(this.emitIndent, this, []);
        var v2271 = this.declFile;
        JAMScript.call(v2271.Write, v2271, ["constructor"])
      }else {
        var id$$24 = JAMScript.call(funcDecl$$35.getNameText, funcDecl$$35, []);
        var v2280 = !isInterfaceMember;
        if(v2280) {
          var v12790 = funcDecl$$35.fncFlags;
          var v2272 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12790]);
          JAMScript.call(this.emitDeclFlags, this, [v2272, "function"]);
          var v2273 = this.declFile;
          JAMScript.call(v2273.Write, v2273, [id$$24])
        }else {
          JAMScript.call(this.emitIndent, this, []);
          var v2279 = JAMScript.call(funcDecl$$35.isConstructMember, funcDecl$$35, []);
          if(v2279) {
            var v2274 = this.declFile;
            JAMScript.call(v2274.Write, v2274, ["new"])
          }else {
            var v18857 = JAMScript.call(funcDecl$$35.isCallMember, funcDecl$$35, []);
            var v12791 = !v18857;
            if(v12791) {
              var v18858 = JAMScript.call(funcDecl$$35.isIndexerMember, funcDecl$$35, []);
              v12791 = !v18858
            }
            var v2278 = v12791;
            if(v2278) {
              var v2275 = this.declFile;
              JAMScript.call(v2275.Write, v2275, [id$$24]);
              var v18859 = funcDecl$$35.name;
              var v12792 = v18859.flags;
              var v18860 = TypeScript$$31.ASTFlags;
              var v12793 = v18860.OptionalName;
              var v2277 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12792, v12793]);
              if(v2277) {
                var v2276 = this.declFile;
                JAMScript.call(v2276.Write, v2276, ["? "])
              }
            }
          }
        }
      }
      var v12794 = JAMScript.call(funcDecl$$35.isIndexerMember, funcDecl$$35, []);
      var v2284 = !v12794;
      if(v2284) {
        var v2282 = this.declFile;
        JAMScript.call(v2282.Write, v2282, ["("])
      }else {
        var v2283 = this.declFile;
        JAMScript.call(v2283.Write, v2283, ["["])
      }
      var v2285 = this.indenter;
      JAMScript.call(v2285.increaseIndent, v2285, []);
      var v2292 = funcDecl$$35.arguments;
      if(v2292) {
        var v12795 = funcDecl$$35.arguments;
        var v2286 = v12795.members;
        var argsLen$$2 = v2286.length;
        var v2287 = funcDecl$$35.variableArgList;
        if(v2287) {
          argsLen$$2 = argsLen$$2 - 1
        }
        var i$$122 = 0;
        var v2291 = i$$122 < argsLen$$2;
        for(;v2291;) {
          var v12796 = funcDecl$$35.arguments;
          var v2288 = v12796.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var argDecl$$3 = v2288[i$$122]
          }
          JAMScript.call(this.emitArgDecl, this, [argDecl$$3, funcDecl$$35]);
          var v12797 = argsLen$$2 - 1;
          var v2290 = i$$122 < v12797;
          if(v2290) {
            var v2289 = this.declFile;
            JAMScript.call(v2289.Write, v2289, [", "])
          }
          i$$122 = i$$122 + 1;
          v2291 = i$$122 < argsLen$$2
        }
      }
      var v2298 = funcDecl$$35.variableArgList;
      if(v2298) {
        var v12798 = funcDecl$$35.arguments;
        var v2293 = v12798.members;
        var v22901 = funcDecl$$35.arguments;
        var v18861 = v22901.members;
        var v12799 = v18861.length;
        var v2294 = v12799 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var lastArg$$2 = v2293[v2294]
        }
        var v22902 = funcDecl$$35.arguments;
        var v18862 = v22902.members;
        var v12800 = v18862.length;
        var v2297 = v12800 > 1;
        if(v2297) {
          var v2295 = this.declFile;
          JAMScript.call(v2295.Write, v2295, [", ..."])
        }else {
          var v2296 = this.declFile;
          JAMScript.call(v2296.Write, v2296, ["..."])
        }
        JAMScript.call(this.emitArgDecl, this, [lastArg$$2, funcDecl$$35])
      }
      var v2299 = this.indenter;
      JAMScript.call(v2299.decreaseIndent, v2299, []);
      var v12801 = JAMScript.call(funcDecl$$35.isIndexerMember, funcDecl$$35, []);
      var v2302 = !v12801;
      if(v2302) {
        var v2300 = this.declFile;
        JAMScript.call(v2300.Write, v2300, [")"])
      }else {
        var v2301 = this.declFile;
        JAMScript.call(v2301.Write, v2301, ["]"])
      }
      var v18863 = funcDecl$$35.isConstructor;
      var v12802 = !v18863;
      if(v12802) {
        var v22903 = funcDecl$$35.returnTypeAnnotation;
        var v24942 = !v22903;
        if(v24942) {
          var v26405 = funcDecl$$35.signature;
          var v25896 = v26405.returnType;
          var v24940 = v25896.type;
          var v25897 = this.checker;
          var v24941 = v25897.anyType;
          v22903 = v24940 != v24941
        }
        var v18864 = v22903;
        if(v18864) {
          var v24943 = funcDecl$$35.fncFlags;
          var v22904 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v24943]);
          v18864 = JAMScript.call(this.canEmitTypeAnnotationSignature, this, [v22904])
        }
        v12802 = v18864
      }
      var v2305 = v12802;
      if(v2305) {
        var v2303 = this.declFile;
        JAMScript.call(v2303.Write, v2303, [": "]);
        var v18865 = funcDecl$$35.signature;
        var v12803 = v18865.returnType;
        var v2304 = v12803.type;
        JAMScript.call(this.emitTypeSignature, this, [v2304])
      }
      var v2306 = this.declFile;
      JAMScript.call(v2306.WriteLine, v2306, [";"]);
      return false
    }
    function v1220(argDecl$$2, funcDecl$$34) {
      JAMScript.call(this.emitDeclarationComments, this, [argDecl$$2, false]);
      var v2307 = this.declFile;
      var v12804 = argDecl$$2.id;
      var v2308 = v12804.text;
      JAMScript.call(v2307.Write, v2307, [v2308]);
      var v2310 = JAMScript.call(argDecl$$2.isOptionalArg, argDecl$$2, []);
      if(v2310) {
        var v2309 = this.declFile;
        JAMScript.call(v2309.Write, v2309, ["?"])
      }
      var v18866 = argDecl$$2.typeExpr;
      var v22907 = !v18866;
      if(v22907) {
        var v22905 = argDecl$$2.type;
        var v24944 = this.checker;
        var v22906 = v24944.anyType;
        v18866 = v22905 != v22906
      }
      var v12805 = v18866;
      if(v12805) {
        var v22908 = funcDecl$$34.fncFlags;
        var v18867 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22908]);
        v12805 = JAMScript.call(this.canEmitTypeAnnotationSignature, this, [v18867])
      }
      var v2313 = v12805;
      if(v2313) {
        var v2311 = this.declFile;
        JAMScript.call(v2311.Write, v2311, [": "]);
        var v2312 = argDecl$$2.type;
        JAMScript.call(this.emitTypeSignature, this, [v2312])
      }
      return
    }
    function v1219(pre$$14, block$$2) {
      var v12806 = block$$2.isStatementBlock;
      var v2315 = !v12806;
      if(v2315) {
        if(pre$$14) {
          var v12807 = block$$2.statements;
          var v2314 = v12807.members;
          this.varListCount = v2314.length
        }else {
          this.varListCount = 0
        }
        return true
      }
      return false
    }
    function v1218(pre$$13, varDecl$$20) {
      var v12808 = pre$$13;
      if(v12808) {
        var v22909 = varDecl$$20.varFlags;
        var v18868 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22909]);
        v12808 = JAMScript.call(this.canEmitSignature, this, [v18868, false])
      }
      var v2340 = v12808;
      if(v2340) {
        var v12809 = JAMScript.call(this.getAstDeclarationContainer, this, []);
        var v2316 = v12809.nodeType;
        var v12810 = TypeScript$$31.NodeType;
        var v2317 = v12810.InterfaceDeclaration;
        var interfaceMember = v2316 == v2317;
        JAMScript.call(this.emitDeclarationComments, this, [varDecl$$20]);
        var v2327 = !interfaceMember;
        if(v2327) {
          var v12811 = this.varListCount;
          var v2320 = v12811 >= 0;
          if(v2320) {
            var v12812 = varDecl$$20.varFlags;
            var v2318 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v12812]);
            JAMScript.call(this.emitDeclFlags, this, [v2318, "var"]);
            var v2319 = this.varListCount;
            this.varListCount = -v2319
          }
          var v2321 = this.declFile;
          var v12813 = varDecl$$20.id;
          var v2322 = v12813.text;
          JAMScript.call(v2321.Write, v2321, [v2322])
        }else {
          JAMScript.call(this.emitIndent, this, []);
          var v2323 = this.declFile;
          var v12814 = varDecl$$20.id;
          var v2324 = v12814.text;
          JAMScript.call(v2323.Write, v2323, [v2324]);
          var v18869 = varDecl$$20.id;
          var v12815 = v18869.flags;
          var v18870 = TypeScript$$31.ASTFlags;
          var v12816 = v18870.OptionalName;
          var v2326 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [v12815, v12816]);
          if(v2326) {
            var v2325 = this.declFile;
            JAMScript.call(v2325.Write, v2325, ["?"])
          }
        }
        var type$$59 = null;
        var v12817 = varDecl$$20.typeExpr;
        if(v12817) {
          var v18871 = varDecl$$20.typeExpr;
          v12817 = v18871.type
        }
        var v2332 = v12817;
        if(v2332) {
          var v2328 = varDecl$$20.typeExpr;
          type$$59 = v2328.type
        }else {
          var v2331 = varDecl$$20.sym;
          if(v2331) {
            var v2329 = varDecl$$20.sym;
            type$$59 = JAMScript.call(v2329.getType, v2329, []);
            var v18872 = this.checker;
            var v12818 = v18872.anyType;
            var v2330 = type$$59 == v12818;
            if(v2330) {
              type$$59 = null
            }
          }
        }
        var v12819 = type$$59;
        if(v12819) {
          var v22910 = varDecl$$20.varFlags;
          var v18873 = JAMScript.call(TypeScript$$31.ToDeclFlags, TypeScript$$31, [v22910]);
          v12819 = JAMScript.call(this.canEmitTypeAnnotationSignature, this, [v18873])
        }
        var v2334 = v12819;
        if(v2334) {
          var v2333 = this.declFile;
          JAMScript.call(v2333.Write, v2333, [": "]);
          JAMScript.call(this.emitTypeSignature, this, [type$$59])
        }
        var v12820 = this.varListCount;
        var v2336 = v12820 > 0;
        if(v2336) {
          var v12821 = this.varListCount;
          this.varListCount = v12821 - 1
        }else {
          var v12822 = this.varListCount;
          var v2335 = v12822 < 0;
          if(v2335) {
            var v12823 = this.varListCount;
            this.varListCount = v12823 + 1
          }
        }
        var v12824 = this.varListCount;
        var v2339 = v12824 < 0;
        if(v2339) {
          var v2337 = this.declFile;
          JAMScript.call(v2337.Write, v2337, [", "])
        }else {
          var v2338 = this.declFile;
          JAMScript.call(v2338.WriteLine, v2338, [";"])
        }
      }
      return false
    }
    function v1217(astOrSymbol, endLine) {
      var v12825 = typeof endLine;
      var v2341 = v12825 === "undefined";
      if(v2341) {
        endLine = true
      }
      var v18874 = this.emitOptions;
      var v12826 = v18874.emitComments;
      var v2342 = !v12826;
      if(v2342) {
        return
      }
      var declComments = JAMScript.call(astOrSymbol.getDocComments, astOrSymbol, []);
      var v12827 = declComments.length;
      var v2348 = v12827 > 0;
      if(v2348) {
        var i$$121 = 0;
        var v12828 = declComments.length;
        var v2344 = i$$121 < v12828;
        for(;v2344;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v2343 = declComments[i$$121]
          }
          JAMScript.call(this.emitComment, this, [v2343]);
          i$$121 = i$$121 + 1;
          var v12829 = declComments.length;
          v2344 = i$$121 < v12829
        }
        if(endLine) {
          var v18875 = this.declFile;
          var v12830 = v18875.onNewLine;
          var v2346 = !v12830;
          if(v2346) {
            var v2345 = this.declFile;
            JAMScript.call(v2345.WriteLine, v2345, [""])
          }
        }else {
          var v12831 = this.declFile;
          var v2347 = v12831.onNewLine;
          if(v2347) {
            JAMScript.call(this.emitIndent, this, [])
          }
        }
      }
      return
    }
    function v1216(comment$$10) {
      var text$$26 = JAMScript.call(comment$$10.getText, comment$$10, []);
      var v12832 = this.declFile;
      var v2351 = v12832.onNewLine;
      if(v2351) {
        JAMScript.call(this.emitIndent, this, [])
      }else {
        var v12833 = comment$$10.isBlockComment;
        var v2350 = !v12833;
        if(v2350) {
          var v2349 = this.declFile;
          JAMScript.call(v2349.WriteLine, v2349, [""]);
          JAMScript.call(this.emitIndent, this, [])
        }
      }
      var v2352 = this.declFile;
      var v2353 = text$$26[0];
      JAMScript.call(v2352.Write, v2352, [v2353]);
      var i$$120 = 1;
      var v12834 = text$$26.length;
      var v2357 = i$$120 < v12834;
      for(;v2357;) {
        var v2354 = this.declFile;
        JAMScript.call(v2354.WriteLine, v2354, [""]);
        JAMScript.call(this.emitIndent, this, []);
        var v2355 = this.declFile;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v2356 = text$$26[i$$120]
        }
        JAMScript.call(v2355.Write, v2355, [v2356]);
        i$$120 = i$$120 + 1;
        var v12835 = text$$26.length;
        v2357 = i$$120 < v12835
      }
      var v12836 = comment$$10.endsLine;
      var v18877 = !v12836;
      if(v18877) {
        var v18876 = comment$$10.isBlockComment;
        v12836 = !v18876
      }
      var v2360 = v12836;
      if(v2360) {
        var v2358 = this.declFile;
        JAMScript.call(v2358.WriteLine, v2358, [""])
      }else {
        var v2359 = this.declFile;
        JAMScript.call(v2359.Write, v2359, [" "])
      }
      return
    }
    function v1215(type$$58) {
      var containingScope = null;
      var declarationContainerAst = JAMScript.call(this.getAstDeclarationContainer, this, []);
      var v2368 = declarationContainerAst.nodeType;
      switch(v2368) {
        case TypeScript$$31.NodeType.ModuleDeclaration:
        ;
        case TypeScript$$31.NodeType.InterfaceDeclaration:
        ;
        case TypeScript$$31.NodeType.FuncDecl:
          var v2362 = declarationContainerAst.type;
          if(v2362) {
            var v2361 = declarationContainerAst.type;
            containingScope = v2361.containedScope
          }
          break;
        case TypeScript$$31.NodeType.Script:
          var script$$21 = declarationContainerAst;
          var v2364 = script$$21.bod;
          if(v2364) {
            var v2363 = script$$21.bod;
            containingScope = v2363.enclosingScope
          }
          break;
        case TypeScript$$31.NodeType.ClassDeclaration:
          var v2366 = declarationContainerAst.type;
          if(v2366) {
            var v12837 = declarationContainerAst.type;
            var v2365 = v12837.instanceType;
            containingScope = v2365.containedScope
          }
          break;
        default:
          var v2367 = TypeScript$$31.CompilerDiagnostics;
          JAMScript.call(v2367.debugPrint, v2367, ["Unknown containing scope"])
      }
      var typeNameMembers = JAMScript.call(type$$58.getScopedTypeNameEx, type$$58, [containingScope]);
      JAMScript.call(this.emitTypeNamesMember, this, [typeNameMembers]);
      return
    }
    function v1214(memberName$$5, emitIndent) {
      var v12838 = typeof emitIndent;
      var v2369 = v12838 === "undefined";
      if(v2369) {
        emitIndent = false
      }
      var v12839 = memberName$$5.prefix;
      var v2375 = v12839 == "{ ";
      if(v2375) {
        if(emitIndent) {
          JAMScript.call(this.emitIndent, this, [])
        }
        var v2370 = this.declFile;
        JAMScript.call(v2370.WriteLine, v2370, ["{"]);
        var v2371 = this.indenter;
        JAMScript.call(v2371.increaseIndent, v2371, []);
        emitIndent = true
      }else {
        var v12840 = memberName$$5.prefix;
        var v2374 = v12840 != "";
        if(v2374) {
          if(emitIndent) {
            JAMScript.call(this.emitIndent, this, [])
          }
          var v2372 = this.declFile;
          var v2373 = memberName$$5.prefix;
          JAMScript.call(v2372.Write, v2372, [v2373]);
          emitIndent = false
        }
      }
      var v2382 = JAMScript.call(memberName$$5.isString, memberName$$5, []);
      if(v2382) {
        if(emitIndent) {
          JAMScript.call(this.emitIndent, this, [])
        }
        var v2376 = this.declFile;
        var v2377 = memberName$$5.text;
        JAMScript.call(v2376.Write, v2376, [v2377])
      }else {
        var ar$$1 = memberName$$5;
        var index$$62 = 0;
        var v18878 = ar$$1.entries;
        var v12841 = v18878.length;
        var v2381 = index$$62 < v12841;
        for(;v2381;) {
          var v12842 = ar$$1.entries;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v2378 = v12842[index$$62]
          }
          JAMScript.call(this.emitTypeNamesMember, this, [v2378, emitIndent]);
          var v12843 = ar$$1.delim;
          var v2380 = v12843 == "; ";
          if(v2380) {
            var v2379 = this.declFile;
            JAMScript.call(v2379.WriteLine, v2379, [";"])
          }
          index$$62 = index$$62 + 1;
          var v18879 = ar$$1.entries;
          var v12844 = v18879.length;
          v2381 = index$$62 < v12844
        }
      }
      var v12845 = memberName$$5.suffix;
      var v2388 = v12845 == "}";
      if(v2388) {
        var v2383 = this.indenter;
        JAMScript.call(v2383.decreaseIndent, v2383, []);
        JAMScript.call(this.emitIndent, this, []);
        var v2384 = this.declFile;
        var v2385 = memberName$$5.suffix;
        JAMScript.call(v2384.Write, v2384, [v2385])
      }else {
        var v2386 = this.declFile;
        var v2387 = memberName$$5.suffix;
        JAMScript.call(v2386.Write, v2386, [v2387])
      }
      return
    }
    function v1213(ast$$120) {
      var v2389 = TypeScript$$31.CompilerDiagnostics;
      var v12846 = JAMScript.call(this.getAstDeclarationContainer, this, []);
      var v2390 = ast$$120 != v12846;
      JAMScript.call(v2389.assert, v2389, [v2390, "Declaration container mismatch"]);
      var v2391 = this.declarationContainerStack;
      JAMScript.call(v2391.pop, v2391, []);
      return
    }
    function v1212(ast$$119) {
      var v2392 = this.declarationContainerStack;
      JAMScript.call(v2392.push, v2392, [ast$$119]);
      return
    }
    function v1211(declFlag) {
      var v12847 = typeof declFlag;
      var v2394 = v12847 === "undefined";
      if(v2394) {
        var v2393 = TypeScript$$31.DeclFlags;
        declFlag = v2393.None
      }
      var v18880 = TypeScript$$31.DeclFlags;
      var v12848 = v18880.Private;
      var v2395 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlag, v12848]);
      return!v2395
    }
    function v1210(declFlags$$3, typeString$$1) {
      var v2396 = this.declFile;
      var v2397 = JAMScript.call(this.getDeclFlagsString, this, [declFlags$$3, typeString$$1]);
      JAMScript.call(v2396.Write, v2396, [v2397]);
      return
    }
    function v1209(declFlags$$2, typeString) {
      var result$$34 = JAMScript.call(this.getIndentString, this, []);
      var accessorString = "";
      var v18881 = TypeScript$$31.DeclFlags;
      var v12849 = v18881.GetAccessor;
      var v2399 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v12849]);
      if(v2399) {
        accessorString = "get "
      }else {
        var v18882 = TypeScript$$31.DeclFlags;
        var v12850 = v18882.SetAccessor;
        var v2398 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v12850]);
        if(v2398) {
          accessorString = "set "
        }
      }
      var container$$23 = JAMScript.call(this.getAstDeclarationContainer, this, []);
      var v18883 = container$$23.nodeType;
      var v22911 = TypeScript$$31.NodeType;
      var v18884 = v22911.ModuleDeclaration;
      var v12851 = v18883 == v18884;
      if(v12851) {
        var v22912 = container$$23.modFlags;
        var v24945 = TypeScript$$31.ModuleFlags;
        var v22913 = v24945.IsWholeFile;
        var v18885 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [v22912, v22913]);
        if(v18885) {
          var v24946 = TypeScript$$31.DeclFlags;
          var v22914 = v24946.Exported;
          v18885 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v22914])
        }
        v12851 = v18885
      }
      var v2400 = v12851;
      if(v2400) {
        result$$34 = result$$34 + "export "
      }
      var v22915 = TypeScript$$31.DeclFlags;
      var v18886 = v22915.LocalStatic;
      var v12852 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v18886]);
      var v18888 = !v12852;
      if(v18888) {
        var v22916 = TypeScript$$31.DeclFlags;
        var v18887 = v22916.Static;
        v12852 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v18887])
      }
      var v2404 = v12852;
      if(v2404) {
        var v12853 = "static " + accessorString;
        result$$34 = result$$34 + v12853
      }else {
        var v18889 = TypeScript$$31.DeclFlags;
        var v12854 = v18889.Private;
        var v2403 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v12854]);
        if(v2403) {
          var v12855 = "private " + accessorString;
          result$$34 = result$$34 + v12855
        }else {
          var v18890 = TypeScript$$31.DeclFlags;
          var v12856 = v18890.Public;
          var v2402 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags$$2, v12856]);
          if(v2402) {
            var v12857 = "public " + accessorString;
            result$$34 = result$$34 + v12857
          }else {
            var v2401 = accessorString == "";
            if(v2401) {
              var v12858 = typeString + " ";
              result$$34 = result$$34 + v12858
            }else {
              result$$34 = result$$34 + accessorString
            }
          }
        }
      }
      return result$$34
    }
    function v1208(declFlags$$1, astWithPrePostCallback, preCallback) {
      var v2408 = this.ignoreCallbackAst;
      if(v2408) {
        var v2405 = TypeScript$$31.CompilerDiagnostics;
        var v12859 = this.ignoreCallbackAst;
        var v2406 = v12859 != astWithPrePostCallback;
        JAMScript.call(v2405.assert, v2405, [v2406, "Ignore Callback AST mismatch"]);
        this.ignoreCallbackAst = null;
        return false
      }else {
        var v12860 = preCallback;
        if(v12860) {
          var v18891 = JAMScript.call(this.canEmitSignature, this, [declFlags$$1, true, preCallback]);
          v12860 = !v18891
        }
        var v2407 = v12860;
        if(v2407) {
          this.ignoreCallbackAst = astWithPrePostCallback;
          return false
        }
      }
      return true
    }
    function v1207(declFlags, canEmitGlobalAmbientDecl, useDeclarationContainerTop) {
      var v12861 = typeof canEmitGlobalAmbientDecl;
      var v2409 = v12861 === "undefined";
      if(v2409) {
        canEmitGlobalAmbientDecl = true
      }
      var v12862 = typeof useDeclarationContainerTop;
      var v2410 = v12862 === "undefined";
      if(v2410) {
        useDeclarationContainerTop = true
      }
      var container$$22;
      if(useDeclarationContainerTop) {
        container$$22 = JAMScript.call(this.getAstDeclarationContainer, this, [])
      }else {
        var v2411 = this.declarationContainerStack;
        var v18892 = this.declarationContainerStack;
        var v12863 = v18892.length;
        var v2412 = v12863 - 2;
        container$$22 = v2411[v2412]
      }
      var v18893 = container$$22.nodeType;
      var v22917 = TypeScript$$31.NodeType;
      var v18894 = v22917.ModuleDeclaration;
      var v12864 = v18893 == v18894;
      if(v12864) {
        var v24947 = TypeScript$$31.DeclFlags;
        var v22918 = v24947.Exported;
        var v18895 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags, v22918]);
        v12864 = !v18895
      }
      var v2413 = v12864;
      if(v2413) {
        return false
      }
      var v12865 = !canEmitGlobalAmbientDecl;
      if(v12865) {
        var v22919 = container$$22.nodeType;
        var v24948 = TypeScript$$31.NodeType;
        var v22920 = v24948.Script;
        var v18896 = v22919 == v22920;
        if(v18896) {
          var v24949 = TypeScript$$31.DeclFlags;
          var v22921 = v24949.Ambient;
          v18896 = JAMScript.call(TypeScript$$31.hasFlag, TypeScript$$31, [declFlags, v22921])
        }
        v12865 = v18896
      }
      var v2414 = v12865;
      if(v2414) {
        return false
      }
      return true
    }
    function v1206() {
      var v2415 = this.declFile;
      var v2416 = JAMScript.call(this.getIndentString, this, []);
      JAMScript.call(v2415.Write, v2415, [v2416]);
      return
    }
    function v1205(declIndent) {
      var v12866 = typeof declIndent;
      var v2417 = v12866 === "undefined";
      if(v2417) {
        declIndent = false
      }
      var v12867 = this.emitOptions;
      var v2419 = v12867.minWhitespace;
      if(v2419) {
        return""
      }else {
        var v2418 = this.indenter;
        return JAMScript.call(v2418.getIndent, v2418, [])
      }
      return
    }
    function v1204(script$$20) {
      var v2420 = TypeScript$$31.AstWalkerWithDetailCallback;
      JAMScript.call(v2420.walk, v2420, [script$$20, this]);
      return
    }
    function v1203() {
      try {
        var v2421 = this.declFile;
        JAMScript.call(v2421.Close, v2421, [])
      }catch(ex$$3) {
        var v2422 = this.errorReporter;
        var v2423 = ex$$3.message;
        JAMScript.call(v2422.emitterError, v2422, [null, v2423])
      }
      return
    }
    function v1202(file) {
      var v26943 = JAMScript.new(DeclFileWriter, [file]);
      this.declFile = v26943;
      return
    }
    function v1201() {
      var v2424;
      var v22922 = this.isDottedModuleName;
      var v18897 = v22922.length;
      var v12870 = v18897 == 0;
      if(v12870) {
        v2424 = false
      }else {
        var v12868 = this.isDottedModuleName;
        var v22923 = this.isDottedModuleName;
        var v18898 = v22923.length;
        var v12869 = v18898 - 1;
        v2424 = v12868[v12869]
      }
      return v2424
    }
    function v1200() {
      var v2425 = this.declarationContainerStack;
      var v18899 = this.declarationContainerStack;
      var v12871 = v18899.length;
      var v2426 = v12871 - 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        return v2425[v2426]
      }
    }
    function DeclarationEmitter$$1(checker$$23, emitOptions$$2, errorReporter$$5) {
      this.checker = checker$$23;
      this.emitOptions = emitOptions$$2;
      this.errorReporter = errorReporter$$5;
      this.declFile = null;
      var v2427 = TypeScript$$31.Indenter;
      var v26944 = JAMScript.new(v2427, []);
      this.indenter = v26944;
      this.declarationContainerStack = [];
      this.isDottedModuleName = [];
      this.ignoreCallbackAst = null;
      this.singleDeclFile = null;
      this.varListCount = 0;
      return
    }
    var v2428 = DeclarationEmitter$$1.prototype;
    v2428.getAstDeclarationContainer = v1200;
    var v2429 = DeclarationEmitter$$1.prototype;
    v2429.emitDottedModuleName = v1201;
    var v2430 = DeclarationEmitter$$1.prototype;
    v2430.setDeclarationFile = v1202;
    var v2431 = DeclarationEmitter$$1.prototype;
    v2431.Close = v1203;
    var v2432 = DeclarationEmitter$$1.prototype;
    v2432.emitDeclarations = v1204;
    var v2433 = DeclarationEmitter$$1.prototype;
    v2433.getIndentString = v1205;
    var v2434 = DeclarationEmitter$$1.prototype;
    v2434.emitIndent = v1206;
    var v2435 = DeclarationEmitter$$1.prototype;
    v2435.canEmitSignature = v1207;
    var v2436 = DeclarationEmitter$$1.prototype;
    v2436.canEmitPrePostAstSignature = v1208;
    var v2437 = DeclarationEmitter$$1.prototype;
    v2437.getDeclFlagsString = v1209;
    var v2438 = DeclarationEmitter$$1.prototype;
    v2438.emitDeclFlags = v1210;
    var v2439 = DeclarationEmitter$$1.prototype;
    v2439.canEmitTypeAnnotationSignature = v1211;
    var v2440 = DeclarationEmitter$$1.prototype;
    v2440.pushDeclarationContainer = v1212;
    var v2441 = DeclarationEmitter$$1.prototype;
    v2441.popDeclarationContainer = v1213;
    var v2442 = DeclarationEmitter$$1.prototype;
    v2442.emitTypeNamesMember = v1214;
    var v2443 = DeclarationEmitter$$1.prototype;
    v2443.emitTypeSignature = v1215;
    var v2444 = DeclarationEmitter$$1.prototype;
    v2444.emitComment = v1216;
    var v2445 = DeclarationEmitter$$1.prototype;
    v2445.emitDeclarationComments = v1217;
    var v2446 = DeclarationEmitter$$1.prototype;
    v2446.VarDeclCallback = v1218;
    var v2447 = DeclarationEmitter$$1.prototype;
    v2447.BlockCallback = v1219;
    var v2448 = DeclarationEmitter$$1.prototype;
    v2448.emitArgDecl = v1220;
    var v2449 = DeclarationEmitter$$1.prototype;
    v2449.FuncDeclCallback = v1221;
    var v2450 = DeclarationEmitter$$1.prototype;
    v2450.emitBaseList = v1222;
    var v2451 = DeclarationEmitter$$1.prototype;
    v2451.emitPropertyAccessorSignature = v1223;
    var v2452 = DeclarationEmitter$$1.prototype;
    v2452.emitClassMembersFromConstructorDefinition = v1224;
    var v2453 = DeclarationEmitter$$1.prototype;
    v2453.ClassDeclarationCallback = v1225;
    var v2454 = DeclarationEmitter$$1.prototype;
    v2454.InterfaceDeclarationCallback = v1226;
    var v2455 = DeclarationEmitter$$1.prototype;
    v2455.ImportDeclarationCallback = v1227;
    var v2456 = DeclarationEmitter$$1.prototype;
    v2456.emitEnumSignature = v1228;
    var v2457 = DeclarationEmitter$$1.prototype;
    v2457.ModuleDeclarationCallback = v1229;
    var v2458 = DeclarationEmitter$$1.prototype;
    v2458.ScriptCallback = v1230;
    var v2459 = DeclarationEmitter$$1.prototype;
    v2459.DefaultCallback = v1231;
    return DeclarationEmitter$$1
  }
  function v1199() {
    function v1198() {
      var v2460 = this.declFile;
      JAMScript.call(v2460.Close, v2460, []);
      return
    }
    function v1197(s$$36) {
      var v2461 = this.declFile;
      JAMScript.call(v2461.WriteLine, v2461, [s$$36]);
      this.onNewLine = true;
      return
    }
    function v1196(s$$35) {
      var v2462 = this.declFile;
      JAMScript.call(v2462.Write, v2462, [s$$35]);
      this.onNewLine = false;
      return
    }
    function DeclFileWriter$$1(declFile) {
      this.declFile = declFile;
      this.onNewLine = true;
      return
    }
    var v2463 = DeclFileWriter$$1.prototype;
    v2463.Write = v1196;
    var v2464 = DeclFileWriter$$1.prototype;
    v2464.WriteLine = v1197;
    var v2465 = DeclFileWriter$$1.prototype;
    v2465.Close = v1198;
    return DeclFileWriter$$1
  }
  var DeclFileWriter = v1199();
  TypeScript$$31.DeclFileWriter = DeclFileWriter;
  var DeclarationEmitter = v1232();
  TypeScript$$31.DeclarationEmitter = DeclarationEmitter;
  return
}
function v1195(TypeScript$$30) {
  function v1194() {
    function v1193(ast$$117, start$$13, delta$$1) {
      function pre$$12(cur$$11, parent$$71, walker$$55) {
        var v18900 = cur$$11.limChar;
        var v12872 = v18900 !== -1;
        if(v12872) {
          var v18901 = cur$$11.limChar;
          v12872 = v18901 < start$$13
        }
        var v2467 = v12872;
        if(v2467) {
          var v2466 = walker$$55.options;
          v2466.goChildren = false
        }
        applyDelta(cur$$11);
        var v2468 = cur$$11.preComments;
        applyDeltaToComments(v2468);
        var v2469 = cur$$11.postComments;
        applyDeltaToComments(v2469);
        return cur$$11
      }
      function applyDeltaToComments(comments$$13) {
        var v12873 = comments$$13;
        if(v12873) {
          var v18902 = comments$$13.length;
          v12873 = v18902 > 0
        }
        var v2472 = v12873;
        if(v2472) {
          var i$$119 = 0;
          var v12874 = comments$$13.length;
          var v2471 = i$$119 < v12874;
          for(;v2471;) {
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v2470 = comments$$13[i$$119]
            }
            applyDelta(v2470);
            i$$119 = i$$119 + 1;
            var v12875 = comments$$13.length;
            v2471 = i$$119 < v12875
          }
        }
        return
      }
      function applyDelta(ast$$118) {
        var v18903 = ast$$118.minChar;
        var v12876 = v18903 !== -1;
        if(v12876) {
          var v18904 = ast$$118.minChar;
          v12876 = v18904 >= start$$13
        }
        var v2473 = v12876;
        if(v2473) {
          var v12877 = ast$$118;
          var v18905 = ast$$118.minChar;
          v12877.minChar = v18905 + delta$$1
        }
        var v18906 = ast$$118.limChar;
        var v12878 = v18906 !== -1;
        if(v12878) {
          var v18907 = ast$$118.limChar;
          v12878 = v18907 >= start$$13
        }
        var v2474 = v12878;
        if(v2474) {
          var v12879 = ast$$118;
          var v18908 = ast$$118.limChar;
          v12879.limChar = v18908 + delta$$1
        }
        return
      }
      var v2475 = JAMScript.call(TypeScript$$30.getAstWalkerFactory, TypeScript$$30, []);
      JAMScript.call(v2475.walk, v2475, [ast$$117, pre$$12]);
      return
    }
    function v1192(script$$19, partial$$1, editRange$$3) {
      var v2476 = script$$19.locationInfo;
      var lineMap1 = v2476.lineMap;
      var v2477 = partial$$1.locationInfo;
      var lineMap2 = v2477.lineMap;
      var v12880 = this.logger;
      var v2484 = JAMScript.call(v12880.information, v12880, []);
      if(v2484) {
        var v2478 = this.logger;
        JAMScript.call(v2478.log, v2478, ["lineMap1 (before):"]);
        var v2479 = this.astLogger;
        JAMScript.call(v2479.logLinemap, v2479, [lineMap1]);
        var v2480 = this.logger;
        JAMScript.call(v2480.log, v2480, ["lineMap2 (quick parse):"]);
        var v2481 = this.astLogger;
        JAMScript.call(v2481.logLinemap, v2481, [lineMap2]);
        var v2482 = this.logger;
        var v2483 = "EditRange=" + editRange$$3;
        JAMScript.call(v2482.log, v2482, [v2483])
      }
      var i1 = 2;
      var i2 = 2;
      var len1 = lineMap1.length;
      var len2 = lineMap2.length;
      var v2489 = i1 < len1;
      for(;v2489;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v12881 = lineMap1[i1]
        }
        var v12882 = editRange$$3.minChar;
        var v2488 = v12881 <= v12882;
        if(v2488) {
          i1 = i1 + 1
        }else {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v12883 = lineMap1[i1]
          }
          var v12884 = editRange$$3.limChar;
          var v2487 = v12883 >= v12884;
          if(v2487) {
            var v12885 = lineMap1;
            var v12886 = i1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v18909 = lineMap1[i1]
            }
            var v18910 = editRange$$3.delta;
            v12885[v12886] = v18909 + v18910;
            i1 = i1 + 1
          }else {
            var v2486 = i2 < len2;
            if(v2486) {
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v12887 = lineMap2[i2]
              }
              var v12888 = editRange$$3.minChar;
              var v2485 = v12887 + v12888;
              lineMap1.splice(i1, 0, v2485);
              i1 = i1 + 1;
              len1 = len1 + 1;
              i2 = i2 + 1
            }else {
              lineMap1.splice(i1, 1);
              len1 = len1 - 1
            }
          }
        }
        v2489 = i1 < len1
      }
      var v2496 = i2 < len2;
      if(v2496) {
        var v18911 = len1 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v12889 = lineMap1[v18911]
        }
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v18912 = lineMap2[i2]
        }
        var v18913 = editRange$$3.minChar;
        var v12890 = v18912 + v18913;
        var v2493 = v12889 >= v12890;
        if(v2493) {
          i1 = 2;
          var v12891 = i1 < len1;
          if(v12891) {
            v12891 = i2 < len2
          }
          var v2492 = v12891;
          for(;v2492;) {
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v12892 = lineMap1[i1]
            }
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v18914 = lineMap2[i2]
            }
            var v18915 = editRange$$3.minChar;
            var v12893 = v18914 + v18915;
            var v2491 = v12892 < v12893;
            if(v2491) {
              i1 = i1 + 1
            }else {
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v12894 = lineMap2[i2]
              }
              var v12895 = editRange$$3.minChar;
              var v2490 = v12894 + v12895;
              lineMap1.splice(i1, 0, v2490);
              i1 = i1 + 1;
              len1 = len1 + 1;
              i2 = i2 + 1
            }
            var v12896 = i1 < len1;
            if(v12896) {
              v12896 = i2 < len2
            }
            v2492 = v12896
          }
        }
        var v2495 = i2 < len2;
        for(;v2495;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v12897 = lineMap2[i2]
          }
          var v12898 = editRange$$3.minChar;
          var v2494 = v12897 + v12898;
          JAMScript.call(lineMap1.push, lineMap1, [v2494]);
          i2 = i2 + 1;
          v2495 = i2 < len2
        }
      }
      var v12899 = this.logger;
      var v2499 = JAMScript.call(v12899.information, v12899, []);
      if(v2499) {
        var v2497 = this.logger;
        JAMScript.call(v2497.log, v2497, ["lineMap1 (after merge):"]);
        var v2498 = this.astLogger;
        JAMScript.call(v2498.logLinemap, v2498, [lineMap1])
      }
      return
    }
    function v1191(script$$18, oldAst, newAst) {
      function pre$$11(cur$$10, parent$$70, walker$$54) {
        var v2502 = cur$$10 === oldAst;
        if(v2502) {
          newAst.preComments = cur$$10.preComments;
          newAst.postComments = cur$$10.postComments;
          var v2500 = _this$$14.logger;
          JAMScript.call(v2500.log, v2500, ["replaced old AST node with new one in script AST"]);
          var v2501 = walker$$54.options;
          JAMScript.call(v2501.stopWalk, v2501, []);
          return newAst
        }
        var v2505 = JAMScript.call(TypeScript$$30.isValidAstNode, TypeScript$$30, [cur$$10]);
        if(v2505) {
          var v18916 = cur$$10.limChar;
          var v18917 = oldAst.minChar;
          var v12900 = v18916 < v18917;
          var v18920 = !v12900;
          if(v18920) {
            var v18918 = cur$$10.minChar;
            var v18919 = oldAst.limChar;
            v12900 = v18918 > v18919
          }
          var v2504 = v12900;
          if(v2504) {
            var v2503 = walker$$54.options;
            v2503.goChildren = false
          }
        }
        return cur$$10
      }
      var _this$$14 = this;
      var v2506 = JAMScript.call(TypeScript$$30.getAstWalkerFactory, TypeScript$$30, []);
      JAMScript.call(v2506.walk, v2506, [script$$18, pre$$11]);
      return
    }
    function v1190(updateResult) {
      function v1189() {
        var v2507 = TypeScript$$30.ScriptEditRange;
        var v12901 = updateResult.scope1;
        var v2508 = v12901.minChar;
        var v12902 = updateResult.scope1;
        var v2509 = v12902.limChar;
        var v12903 = updateResult.editRange;
        var v2510 = v12903.delta;
        var editRange$$2 = JAMScript.new(v2507, [v2508, v2509, v2510]);
        var v2511 = updateResult.script1;
        var v2512 = editRange$$2.limChar;
        var v2513 = editRange$$2.delta;
        JAMScript.call(_this$$13.applyDeltaPosition, _this$$13, [v2511, v2512, v2513]);
        var v2514 = updateResult.script2;
        var v2515 = editRange$$2.minChar;
        JAMScript.call(_this$$13.applyDeltaPosition, _this$$13, [v2514, 0, v2515]);
        var v2516 = updateResult.script1;
        var v2517 = updateResult.script2;
        JAMScript.call(_this$$13.mergeLocationInfo, _this$$13, [v2516, v2517, editRange$$2]);
        var v2518 = updateResult.script1;
        var v2519 = updateResult.scope1;
        var v2520 = updateResult.scope2;
        JAMScript.call(_this$$13.replaceAST, _this$$13, [v2518, v2519, v2520]);
        return
      }
      var _this$$13 = this;
      var v2521 = this.logger;
      JAMScript.call(TypeScript$$30.timeFunction, TypeScript$$30, [v2521, "mergeTrees()", v1189]);
      return
    }
    function v1188(previousScript$$1, scriptId$$1, newSourceText$$1, editRange$$1) {
      function errorCapture$$1(minChar$$33, charLen, message$$20, unitIndex$$10) {
        var v12904 = TypeScript$$30.ErrorEntry;
        var v12905 = minChar$$33 + charLen;
        var v2522 = JAMScript.new(v12904, [unitIndex$$10, minChar$$33, v12905, message$$20]);
        JAMScript.call(parseErrors$$1.push, parseErrors$$1, [v2522]);
        return
      }
      var v2523 = this.logger;
      var v12906 = 'attemptIncrementalUpdateUnit("' + scriptId$$1;
      var v2524 = v12906 + '")';
      JAMScript.call(v2523.log, v2523, [v2524]);
      var v2525 = editRange$$1 === null;
      if(v2525) {
        throw new Error("editRange should be valid");
      }
      var scope1$$1 = JAMScript.call(this.getEnclosingScopeContextIfSingleScopeEdit, this, [previousScript$$1, scriptId$$1, newSourceText$$1, editRange$$1]);
      var v2526 = scope1$$1 === null;
      if(v2526) {
        return null
      }
      var v18921 = scope1$$1.scopeStartAST;
      var v12907 = v18921.limChar;
      var v18922 = scope1$$1.scopeStartAST;
      var v12908 = v18922.minChar;
      var v2527 = v12907 - v12908;
      var v2528 = editRange$$1.delta;
      var newScopeLength$$1 = v2527 + v2528;
      var v18923 = JAMScript.call(newSourceText$$1.getLength, newSourceText$$1, []);
      var v12909 = v18923 / 2;
      var v2531 = newScopeLength$$1 >= v12909;
      if(v2531) {
        var v2529 = this.logger;
        var v12910 = "  Bailing out because range of scope to reparse (" + newScopeLength$$1;
        var v2530 = v12910 + " characters) is greater than half the size of the source text";
        JAMScript.call(v2529.log, v2529, [v2530]);
        return null
      }
      var parseErrors$$1 = [];
      var v2532 = this.logger;
      var v2533 = scope1$$1.scopeStartAST;
      var v12911 = scope1$$1.scopeStartAST;
      var v2534 = v12911.minChar;
      var v18924 = scope1$$1.scopeStartAST;
      var v12912 = v18924.minChar;
      var v2535 = v12912 + newScopeLength$$1;
      var quickParseResult = JAMScript.call(TypeScript$$30.quickParse, TypeScript$$30, [v2532, v2533, newSourceText$$1, v2534, v2535, errorCapture$$1]);
      var v12913 = quickParseResult.endLexState;
      var v18925 = TypeScript$$30.LexState;
      var v12914 = v18925.Start;
      var v2537 = v12913 != v12914;
      if(v2537) {
        var v2536 = this.logger;
        JAMScript.call(v2536.log, v2536, ["  Bailing out because scope contains unterminated comment"]);
        return null
      }
      var scriptFragment$$1 = quickParseResult.Script;
      var v22924 = scriptFragment$$1.vars;
      var v18926 = v22924.members;
      var v12915 = v18926.length;
      var v2539 = v12915 !== 0;
      if(v2539) {
        var v2538 = this.logger;
        JAMScript.call(v2538.log, v2538, ["  Bailing out because new source text defines variables"]);
        return null
      }
      var v22925 = scriptFragment$$1.bod;
      var v18927 = v22925.members;
      var v12916 = v18927.length;
      var v2541 = v12916 !== 1;
      if(v2541) {
        var v2540 = this.logger;
        JAMScript.call(v2540.log, v2540, ["  Bailing out because new source text defines more than one scope (or none)"]);
        return null
      }
      var oldScope = scope1$$1.scopeStartAST;
      var v12917 = scriptFragment$$1.bod;
      var v2542 = v12917.members;
      var newScope = v2542[0];
      var v12918 = oldScope.nodeType;
      var v12919 = newScope.nodeType;
      var v2544 = v12918 != v12919;
      if(v2544) {
        var v2543 = this.logger;
        JAMScript.call(v2543.log, v2543, ["  Bailing out because new source text does not define the same scope type as the existing scope"]);
        return null
      }
      var v18928 = oldScope.leftCurlyCount;
      var v12920 = !v18928;
      var v18930 = !v12920;
      if(v18930) {
        var v18929 = oldScope.rightCurlyCount;
        v12920 = !v18929
      }
      var v2546 = v12920;
      if(v2546) {
        var v2545 = this.logger;
        JAMScript.call(v2545.log, v2545, ["  Bailing out because sopce doesn't have left/right curly count"]);
        return null
      }
      var v12921 = oldScope.leftCurlyCount;
      var v12922 = newScope.leftCurlyCount;
      var v2548 = v12921 !== v12922;
      if(v2548) {
        var v2547 = this.logger;
        JAMScript.call(v2547.log, v2547, ["  Bailing out because new source text contains more (or fewer) left curly braces"]);
        return null
      }
      var v12923 = oldScope.rightCurlyCount;
      var v12924 = newScope.rightCurlyCount;
      var v2550 = v12923 !== v12924;
      if(v2550) {
        var v2549 = this.logger;
        JAMScript.call(v2549.log, v2549, ["  Bailing out because new source text contains more (or fewer) right curly braces"]);
        return null
      }
      var v12925 = newScope.minChar;
      var v2552 = v12925 !== 0;
      if(v2552) {
        var v2551 = this.logger;
        JAMScript.call(v2551.log, v2551, ["  Bailing out because new function declaration does not start at position 0"]);
        return null
      }
      var v12926 = newScope.limChar;
      var v2554 = v12926 !== newScopeLength$$1;
      if(v2554) {
        var v2553 = this.logger;
        JAMScript.call(v2553.log, v2553, ["  Bailing out because new function declaration does not end at the new end position"]);
        return null
      }
      var v2555 = TypeScript$$30.UpdateUnitResult;
      return JAMScript.call(v2555.singleScopeEdits, v2555, [previousScript$$1, scriptFragment$$1, oldScope, newScope, editRange$$1, parseErrors$$1])
    }
    function v1187(previousScript, scriptId, newSourceText, editRange) {
      var v2556 = this.logger;
      var v12927 = 'checkEditsInsideSingleScope("' + scriptId;
      var v2557 = v12927 + '")';
      JAMScript.call(v2556.log, v2556, [v2557]);
      var v2558 = editRange === null;
      if(v2558) {
        throw new Error("editRange should be valid");
      }
      var v2560 = JAMScript.call(editRange.isUnknown, editRange, []);
      if(v2560) {
        var v2559 = this.logger;
        JAMScript.call(v2559.log, v2559, ["  Bailing out because edit range is unknown"]);
        return null
      }
      var v2561 = this.logger;
      var v2562 = editRange.minChar;
      var scope1 = JAMScript.call(TypeScript$$30.findEnclosingScopeAt, TypeScript$$30, [v2561, previousScript, newSourceText, v2562, false]);
      var v2563 = this.logger;
      var v2564 = editRange.limChar;
      var scope2 = JAMScript.call(TypeScript$$30.findEnclosingScopeAt, TypeScript$$30, [v2563, previousScript, newSourceText, v2564, false]);
      var v12928 = scope1 == null;
      var v18931 = !v12928;
      if(v18931) {
        v12928 = scope2 == null
      }
      var v2566 = v12928;
      if(v2566) {
        var v2565 = this.logger;
        JAMScript.call(v2565.log, v2565, ["  Bailing out because containing scopes cannot be determined"]);
        return null
      }
      var v12929 = scope1.scopeStartAST;
      var v12930 = scope2.scopeStartAST;
      var v2568 = v12929 !== v12930;
      if(v2568) {
        var v2567 = this.logger;
        JAMScript.call(v2567.log, v2567, ["  Bailing out because edit overlaps 2 disctint scopes"]);
        return null
      }
      var v18932 = scope1.scopeStartAST;
      var v12931 = v18932.limChar;
      var v18933 = scope1.scopeStartAST;
      var v12932 = v18933.minChar;
      var v2569 = v12931 - v12932;
      var v2570 = editRange.delta;
      var newScopeLength = v2569 + v2570;
      var v2572 = newScopeLength <= 0;
      if(v2572) {
        var v2571 = this.logger;
        JAMScript.call(v2571.log, v2571, ["  Bailing out because scope has been entirely removed from new source text"]);
        return null
      }
      return scope1
    }
    function IncrementalParser$$1(logger$$5) {
      this.logger = logger$$5;
      var v2573 = TypeScript$$30.AstLogger;
      var v2574 = this.logger;
      var v26945 = JAMScript.new(v2573, [v2574]);
      this.astLogger = v26945;
      return
    }
    var v2575 = IncrementalParser$$1.prototype;
    v2575.getEnclosingScopeContextIfSingleScopeEdit = v1187;
    var v2576 = IncrementalParser$$1.prototype;
    v2576.attemptIncrementalUpdateUnit = v1188;
    var v2577 = IncrementalParser$$1.prototype;
    v2577.mergeTrees = v1190;
    var v2578 = IncrementalParser$$1.prototype;
    v2578.replaceAST = v1191;
    var v2579 = IncrementalParser$$1.prototype;
    v2579.mergeLocationInfo = v1192;
    var v2580 = IncrementalParser$$1.prototype;
    v2580.applyDeltaPosition = v1193;
    return IncrementalParser$$1
  }
  var IncrementalParser = v1194();
  TypeScript$$30.IncrementalParser = IncrementalParser;
  return
}
function v1186(TypeScript$$29) {
  function v1185() {
    function v1184(str$$12) {
      var v2581 = this.styleSettings;
      JAMScript.call(v2581.parseOptions, v2581, [str$$12]);
      return
    }
    function CompilationSettings$$1() {
      var v26946 = JAMScript.new(StyleSettings, []);
      this.styleSettings = v26946;
      this.propagateConstants = false;
      this.minWhitespace = false;
      this.parseOnly = false;
      this.errorRecovery = false;
      this.emitComments = false;
      this.watch = false;
      this.exec = false;
      this.resolve = true;
      this.controlFlow = false;
      this.printControlFlow = false;
      this.controlFlowUseDef = false;
      this.errorOnWith = true;
      this.preprocess = true;
      this.canCallDefinitionSignature = false;
      this.inferPropertiesFromThisAssignment = false;
      this.useDefaultLib = true;
      var v2582 = TypeScript$$29.CodeGenTarget;
      this.codeGenTarget = v2582.ES3;
      var v2583 = TypeScript$$29.ModuleGenTarget;
      this.moduleGenTarget = v2583.Synchronous;
      this.outputOption = "";
      this.mapSourceFiles = false;
      this.generateDeclarationFiles = false;
      this.useCaseSensitiveFileResolution = false;
      return
    }
    var v2584 = CompilationSettings$$1.prototype;
    v2584.setStyleOptions = v1184;
    return CompilationSettings$$1
  }
  function v1183() {
    function v1182(str$$11) {
      var opts = str$$11.split(";");
      var i$$118 = 0;
      var len$$57 = opts.length;
      var v2589 = i$$118 < len$$57;
      for(;v2589;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var opt$$1 = opts[i$$118]
        }
        var val$$7 = true;
        var colonIndex = opt$$1.lastIndexOf(":");
        var v2587 = colonIndex >= 0;
        if(v2587) {
          var v2585 = colonIndex + 1;
          var valStr = JAMScript.call(opt$$1.substring, opt$$1, [v2585]);
          opt$$1 = JAMScript.call(opt$$1.substring, opt$$1, [0, colonIndex]);
          var v2586 = valStr == "off";
          if(v2586) {
            val$$7 = false
          }
        }
        var v12933 = JAMScript.call(this.setOption, this, [opt$$1, val$$7]);
        var v2588 = !v12933;
        if(v2588) {
          return false
        }
        i$$118 = i$$118 + 1;
        v2589 = i$$118 < len$$57
      }
      return true
    }
    function v1181(opt, val$$6) {
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var optExists = this[opt]
      }
      var v2590 = optExists !== undefined;
      if(v2590) {
        JAMScript.set(this, opt, val$$6);
        return true
      }else {
        return false
      }
      return
    }
    function StyleSettings$$1() {
      this.bitwise = false;
      this.blockInCompoundStmt = false;
      this.eqeqeq = false;
      this.forin = false;
      this.emptyBlocks = true;
      this.newMustBeUsed = false;
      this.requireSemi = false;
      this.assignmentInCond = false;
      this.eqnull = false;
      this.evalOK = true;
      this.innerScopeDeclEscape = true;
      this.funcInLoop = true;
      this.reDeclareLocal = true;
      this.literalSubscript = true;
      this.implicitAny = false;
      return
    }
    var v2591 = StyleSettings$$1.prototype;
    v2591.setOption = v1181;
    var v2592 = StyleSettings$$1.prototype;
    v2592.parseOptions = v1182;
    return StyleSettings$$1
  }
  function getAdditionalDependencyPath(comment$$6) {
    var amdDependencyRegEx = /^(\/\/\/\s*<amd-dependency\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
    var match$$1 = JAMScript.call(amdDependencyRegEx.exec, amdDependencyRegEx, [comment$$6]);
    if(match$$1) {
      var path$$18 = match$$1[3];
      return path$$18
    }else {
      return null
    }
    return
  }
  function getImplicitImport(comment$$7) {
    var implicitImportRegEx = /^(\/\/\/\s*<implicit-import\s*)*\/>/igm;
    var match$$2 = JAMScript.call(implicitImportRegEx.exec, implicitImportRegEx, [comment$$7]);
    if(match$$2) {
      return true
    }
    return false
  }
  function getStyleSettings(comment$$8, styleSettings) {
    var styleRegEx = /^(\/\/\/\s*<style\s+)(([a-zA-Z])+=('|").+('|"))\s*\/>/igm;
    var settings$$2 = JAMScript.call(styleRegEx.exec, styleRegEx, [comment$$8]);
    if(settings$$2) {
      var settingsRegEx = /^([a-zA-Z]+=['"]on['|"])/igm;
      var v2593 = settings$$2[2];
      settings$$2 = JAMScript.call(settingsRegEx.exec, settingsRegEx, [v2593]);
      if(settings$$2) {
        var i$$117 = 0;
        var v12934 = settings$$2.length;
        var v2610 = i$$117 < v12934;
        for(;v2610;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v2594 = settings$$2[i$$117]
          }
          var setting = v2594.split("=");
          var on = '"on"';
          var v2609 = setting[0];
          switch(v2609) {
            case "blockInCompoundStmt":
              var v2595 = setting[1];
              styleSettings.blockInCompoundStmt = v2595 == on;
              break;
            case "eqeqeq":
              var v2596 = setting[1];
              styleSettings.eqeqeq = v2596 == on;
              break;
            case "forin":
              var v2597 = setting[1];
              styleSettings.forin = v2597 == on;
              break;
            case "emptyBlocks":
              var v2598 = setting[1];
              styleSettings.emptyBlocks = v2598 == on;
              break;
            case "newMustBeUsed":
              var v2599 = setting[1];
              styleSettings.newMustBeUsed = v2599 == on;
              break;
            case "requireSemi":
              var v2600 = setting[1];
              styleSettings.requireSemi = v2600 == on;
              break;
            case "assignmentInCond":
              var v2601 = setting[1];
              styleSettings.assignmentInCond = v2601 == on;
              break;
            case "eqnull":
              var v2602 = setting[1];
              styleSettings.eqnull = v2602 == on;
              break;
            case "evalOK":
              var v2603 = setting[1];
              styleSettings.evalOK = v2603 == on;
              break;
            case "innerScopeDeclEscape":
              var v2604 = setting[1];
              styleSettings.innerScopeDeclEscape = v2604 == on;
              break;
            case "funcInLoop":
              var v2605 = setting[1];
              styleSettings.funcInLoop = v2605 == on;
              break;
            case "reDeclareLocal":
              var v2606 = setting[1];
              styleSettings.reDeclareLocal = v2606 == on;
              break;
            case "literalSubscript":
              var v2607 = setting[1];
              styleSettings.literalSubscript = v2607 == on;
              break;
            case "implicitAny":
              var v2608 = setting[1];
              styleSettings.implicitAny = v2608 == on
          }
          i$$117 = i$$117 + 1;
          var v12935 = settings$$2.length;
          v2610 = i$$117 < v12935
        }
      }
    }
    return
  }
  function getReferencedFiles(sourceText$$4) {
    var preProcessInfo = preProcessFile(sourceText$$4, null, false);
    return preProcessInfo.referencedFiles
  }
  function preProcessFile(sourceText$$5, options$$7, readImportFiles) {
    var v12936 = typeof options$$7;
    var v2611 = v12936 === "undefined";
    if(v2611) {
      options$$7 = JAMScript.new(CompilationSettings, [])
    }
    var v12937 = typeof readImportFiles;
    var v2612 = v12937 === "undefined";
    if(v2612) {
      readImportFiles = true
    }
    var v2613 = TypeScript$$29.Scanner;
    var scanner$$1 = JAMScript.new(v2613, []);
    JAMScript.call(scanner$$1.resetComments, scanner$$1, []);
    var v12938 = TypeScript$$29.LexMode;
    var v2614 = v12938.File;
    JAMScript.call(scanner$$1.setSourceText, scanner$$1, [sourceText$$5, v2614]);
    var tok$$5 = JAMScript.call(scanner$$1.scan, scanner$$1, []);
    var comments$$12 = [];
    var comment$$9 = null;
    var leftCurlies = [];
    var settings$$3 = options$$7;
    var referencedFiles = [];
    var importedFiles = [];
    var isLibFile = false;
    var v12939 = tok$$5.tokenId;
    var v18934 = TypeScript$$29.TokenID;
    var v12940 = v18934.EndOfFile;
    var v2626 = v12939 != v12940;
    for(;v2626;) {
      var v12941 = readImportFiles;
      if(v12941) {
        var v18935 = tok$$5.tokenId;
        var v22926 = TypeScript$$29.TokenID;
        var v18936 = v22926.Import;
        v12941 = v18935 == v18936
      }
      var v2623 = v12941;
      if(v2623) {
        tok$$5 = JAMScript.call(scanner$$1.scan, scanner$$1, []);
        var v18937 = tok$$5.tokenId;
        var v22927 = TypeScript$$29.TokenID;
        var v18938 = v22927.Identifier;
        var v12942 = v18937 == v18938;
        var v18939 = !v12942;
        if(v18939) {
          v12942 = JAMScript.call(TypeScript$$29.convertTokToID, TypeScript$$29, [tok$$5, false])
        }
        var v2622 = v12942;
        if(v2622) {
          tok$$5 = JAMScript.call(scanner$$1.scan, scanner$$1, []);
          var v12943 = tok$$5.tokenId;
          var v18940 = TypeScript$$29.TokenID;
          var v12944 = v18940.Equals;
          var v2621 = v12943 == v12944;
          if(v2621) {
            tok$$5 = JAMScript.call(scanner$$1.scan, scanner$$1, []);
            var v12945 = tok$$5.tokenId;
            var v18941 = TypeScript$$29.TokenID;
            var v12946 = v18941.Module;
            var v2620 = v12945 == v12946;
            if(v2620) {
              tok$$5 = JAMScript.call(scanner$$1.scan, scanner$$1, []);
              var v12947 = tok$$5.tokenId;
              var v18942 = TypeScript$$29.TokenID;
              var v12948 = v18942.OpenParen;
              var v2619 = v12947 == v12948;
              if(v2619) {
                tok$$5 = JAMScript.call(scanner$$1.scan, scanner$$1, []);
                var v12949 = tok$$5.tokenId;
                var v18943 = TypeScript$$29.TokenID;
                var v12950 = v18943.StringLiteral;
                var v2618 = v12949 == v12950;
                if(v2618) {
                  var v2615 = scanner$$1.startPos;
                  var v2616 = scanner$$1.pos;
                  var v18944 = JAMScript.call(tok$$5.getText, tok$$5, []);
                  var v12951 = JAMScript.call(TypeScript$$29.switchToForwardSlashes, TypeScript$$29, [v18944]);
                  var v2617 = JAMScript.call(TypeScript$$29.stripQuotes, TypeScript$$29, [v12951]);
                  var ref$$2 = {minChar:v2615, limChar:v2616, path:v2617, isResident:false};
                  JAMScript.call(importedFiles.push, importedFiles, [ref$$2])
                }
              }
            }
          }
        }
      }
      var v12952 = tok$$5.tokenId;
      var v18945 = TypeScript$$29.TokenID;
      var v12953 = v18945.OpenBrace;
      var v2624 = v12952 == v12953;
      if(v2624) {
        JAMScript.call(leftCurlies.push, leftCurlies, [tok$$5])
      }
      var v12954 = tok$$5.tokenId;
      var v18946 = TypeScript$$29.TokenID;
      var v12955 = v18946.CloseBrace;
      var v2625 = v12954 == v12955;
      if(v2625) {
        JAMScript.call(leftCurlies.pop, leftCurlies, [])
      }
      tok$$5 = JAMScript.call(scanner$$1.scan, scanner$$1, []);
      var v12956 = tok$$5.tokenId;
      var v18947 = TypeScript$$29.TokenID;
      var v12957 = v18947.EndOfFile;
      v2626 = v12956 != v12957
    }
    comments$$12 = JAMScript.call(scanner$$1.getComments, scanner$$1, []);
    var iComment = 0;
    var v12958 = comments$$12.length;
    var v2638 = iComment < v12958;
    for(;v2638;) {
      comment$$9 = comments$$12[iComment];
      var v12959 = comment$$9.isBlock;
      var v2637 = !v12959;
      if(v2637) {
        var referencedCode;
        JSCompiler_inline_label_getFileReferenceFromReferencePath_29: {
          var comment$$inline_23 = JAMScript.call(comment$$9.getText, comment$$9, []);
          var referencesRegEx$$inline_24 = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
          var match$$inline_25 = JAMScript.call(referencesRegEx$$inline_24.exec, referencesRegEx$$inline_24, [comment$$inline_23]);
          if(match$$inline_25) {
            var v2627 = match$$inline_25[3];
            var path$$inline_26 = JAMScript.call(TypeScript$$29.normalizePath, TypeScript$$29, [v2627]);
            var adjustedPath$$inline_27 = JAMScript.call(TypeScript$$29.normalizePath, TypeScript$$29, [path$$inline_26]);
            var v12960 = match$$inline_25.length;
            var v2628 = v12960 >= 7;
            if(v2628) {
              var v12961 = match$$inline_25[6];
              v2628 = v12961 == "true"
            }
            var isResident$$inline_28 = v2628;
            if(isResident$$inline_28) {
              var v2629 = TypeScript$$29.CompilerDiagnostics;
              var v2630 = path$$inline_26 + " is resident";
              JAMScript.call(v2629.debugPrint, v2629, [v2630])
            }
            var v2631 = JAMScript.call(TypeScript$$29.switchToForwardSlashes, TypeScript$$29, [adjustedPath$$inline_27]);
            referencedCode = {minChar:0, limChar:0, path:v2631, isResident:isResident$$inline_28}
          }else {
            referencedCode = null
          }
        }
        if(referencedCode) {
          referencedCode.minChar = comment$$9.startPos;
          var v2632 = referencedCode;
          var v12962 = referencedCode.minChar;
          var v18948 = comment$$9.value;
          var v12963 = v18948.length;
          v2632.limChar = v12962 + v12963;
          JAMScript.call(referencedFiles.push, referencedFiles, [referencedCode])
        }
        if(settings$$3) {
          var v2633 = JAMScript.call(comment$$9.getText, comment$$9, []);
          var v2634 = settings$$3.styleSettings;
          getStyleSettings(v2633, v2634);
          var isNoLibRegex = /^(\/\/\/\s*<reference\s+no-default-lib=)('|")(.+?)\2\s*\/>/igm;
          var v2635 = JAMScript.call(comment$$9.getText, comment$$9, []);
          var isNoLibMatch = JAMScript.call(isNoLibRegex.exec, isNoLibRegex, [v2635]);
          if(isNoLibMatch) {
            var v2636 = isNoLibMatch[3];
            isLibFile = v2636 == "true"
          }
        }
      }
      iComment = iComment + 1;
      var v12964 = comments$$12.length;
      v2638 = iComment < v12964
    }
    return{settings:settings$$3, referencedFiles:referencedFiles, importedFiles:importedFiles, isLibFile:isLibFile}
  }
  var StyleSettings = v1183();
  TypeScript$$29.StyleSettings = StyleSettings;
  var CompilationSettings = v1185();
  TypeScript$$29.CompilationSettings = CompilationSettings;
  TypeScript$$29.getAdditionalDependencyPath = getAdditionalDependencyPath;
  TypeScript$$29.getImplicitImport = getImplicitImport;
  TypeScript$$29.getStyleSettings = getStyleSettings;
  TypeScript$$29.getReferencedFiles = getReferencedFiles;
  TypeScript$$29.preProcessFile = preProcessFile;
  return
}
function v1180(TypeScript$$28) {
  function v1179() {
    function v1178(referencePath, parentPath, performSearch, resolutionDispatcher) {
      var resolvedFile = {content:"", path:referencePath};
      var v2639 = this.environment;
      var ioHost$$1 = v2639.ioHost;
      var isRelativePath = JAMScript.call(TypeScript$$28.isRelative, TypeScript$$28, [referencePath]);
      var v2640;
      if(isRelativePath) {
        v2640 = false
      }else {
        v2640 = JAMScript.call(TypeScript$$28.isRooted, TypeScript$$28, [referencePath])
      }
      var isRootedPath = v2640;
      var v2641;
      if(isRelativePath) {
        var v18949 = parentPath + "/";
        var v12965 = v18949 + referencePath;
        v2641 = JAMScript.call(ioHost$$1.resolvePath, ioHost$$1, [v12965])
      }else {
        var v12966;
        var v22928 = isRootedPath;
        var v24951 = !v22928;
        if(v24951) {
          var v24950 = !parentPath;
          var v25898 = !v24950;
          if(v25898) {
            v24950 = performSearch
          }
          v22928 = v24950
        }
        var v18951 = v22928;
        if(v18951) {
          v12966 = referencePath
        }else {
          var v18950 = parentPath + "/";
          v12966 = v18950 + referencePath
        }
        v2641 = v12966
      }
      var normalizedPath = v2641;
      var v18952 = JAMScript.call(TypeScript$$28.isSTRFile, TypeScript$$28, [normalizedPath]);
      var v12967 = !v18952;
      if(v12967) {
        var v18953 = JAMScript.call(TypeScript$$28.isTSFile, TypeScript$$28, [normalizedPath]);
        v12967 = !v18953
      }
      var v2642 = v12967;
      if(v2642) {
        normalizedPath = normalizedPath + ".ts"
      }
      var v2643 = JAMScript.call(TypeScript$$28.stripQuotes, TypeScript$$28, [normalizedPath]);
      normalizedPath = JAMScript.call(TypeScript$$28.switchToForwardSlashes, TypeScript$$28, [v2643]);
      var v2644;
      var v22929 = this.environment;
      var v18954 = v22929.compilationSettings;
      var v12968 = v18954.useCaseSensitiveFileResolution;
      if(v12968) {
        v2644 = normalizedPath
      }else {
        v2644 = normalizedPath.toLocaleUpperCase()
      }
      var absoluteModuleID = v2644;
      var v18955 = this.visited;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v12969 = v18955[absoluteModuleID]
      }
      var v2690 = !v12969;
      if(v2690) {
        var v12970 = isRelativePath;
        var v18957 = !v12970;
        if(v18957) {
          var v18956 = isRootedPath;
          var v22930 = !v18956;
          if(v22930) {
            v18956 = !performSearch
          }
          v12970 = v18956
        }
        var v2676 = v12970;
        if(v2676) {
          try {
            var v2645 = TypeScript$$28.CompilerDiagnostics;
            var v2646 = "   Reading code from " + normalizedPath;
            JAMScript.call(v2645.debugPrint, v2645, [v2646]);
            try {
              var v2647 = resolvedFile;
              var v26947 = JAMScript.call(ioHost$$1.readFile, ioHost$$1, [normalizedPath]);
              v2647.content = v26947
            }catch(err) {
              try {
                var v2649 = JAMScript.call(TypeScript$$28.isSTRFile, TypeScript$$28, [normalizedPath]);
                if(v2649) {
                  normalizedPath = JAMScript.call(TypeScript$$28.changePathToTS, TypeScript$$28, [normalizedPath])
                }else {
                  var v2648 = JAMScript.call(TypeScript$$28.isTSFile, TypeScript$$28, [normalizedPath]);
                  if(v2648) {
                    normalizedPath = JAMScript.call(TypeScript$$28.changePathToSTR, TypeScript$$28, [normalizedPath])
                  }
                }
                var v2650 = TypeScript$$28.CompilerDiagnostics;
                var v2651 = "   Reading code from " + normalizedPath;
                JAMScript.call(v2650.debugPrint, v2650, [v2651]);
                var v2652 = resolvedFile;
                var v26948 = JAMScript.call(ioHost$$1.readFile, ioHost$$1, [normalizedPath]);
                v2652.content = v26948
              }catch(err$$1) {
                normalizedPath = JAMScript.call(TypeScript$$28.changePathToDSTR, TypeScript$$28, [normalizedPath]);
                var v2653 = TypeScript$$28.CompilerDiagnostics;
                var v2654 = "   Reading code from " + normalizedPath;
                JAMScript.call(v2653.debugPrint, v2653, [v2654]);
                try {
                  var v2655 = resolvedFile;
                  var v26949 = JAMScript.call(ioHost$$1.readFile, ioHost$$1, [normalizedPath]);
                  v2655.content = v26949
                }catch(err$$2) {
                  normalizedPath = JAMScript.call(TypeScript$$28.changePathToDTS, TypeScript$$28, [normalizedPath]);
                  var v2656 = TypeScript$$28.CompilerDiagnostics;
                  var v2657 = "   Reading code from " + normalizedPath;
                  JAMScript.call(v2656.debugPrint, v2656, [v2657]);
                  var v2658 = resolvedFile;
                  var v26950 = JAMScript.call(ioHost$$1.readFile, ioHost$$1, [normalizedPath]);
                  v2658.content = v26950
                }
              }
            }
            var v2659 = TypeScript$$28.CompilerDiagnostics;
            var v2660 = "   Found code at " + normalizedPath;
            JAMScript.call(v2659.debugPrint, v2659, [v2660]);
            resolvedFile.path = normalizedPath;
            var v2661 = this.visited;
            JAMScript.set(v2661, absoluteModuleID, true)
          }catch(err$$3) {
            var v2662 = TypeScript$$28.CompilerDiagnostics;
            var v2663 = "   Did not find code for " + referencePath;
            JAMScript.call(v2662.debugPrint, v2662, [v2663])
          }
        }else {
          resolvedFile = JAMScript.call(ioHost$$1.findFile, ioHost$$1, [parentPath, normalizedPath]);
          var v2666 = !resolvedFile;
          if(v2666) {
            var v2665 = JAMScript.call(TypeScript$$28.isSTRFile, TypeScript$$28, [normalizedPath]);
            if(v2665) {
              normalizedPath = JAMScript.call(TypeScript$$28.changePathToTS, TypeScript$$28, [normalizedPath])
            }else {
              var v2664 = JAMScript.call(TypeScript$$28.isTSFile, TypeScript$$28, [normalizedPath]);
              if(v2664) {
                normalizedPath = JAMScript.call(TypeScript$$28.changePathToSTR, TypeScript$$28, [normalizedPath])
              }
            }
            resolvedFile = JAMScript.call(ioHost$$1.findFile, ioHost$$1, [parentPath, normalizedPath])
          }
          var v2668 = !resolvedFile;
          if(v2668) {
            normalizedPath = JAMScript.call(TypeScript$$28.changePathToDTS, TypeScript$$28, [normalizedPath]);
            resolvedFile = JAMScript.call(ioHost$$1.findFile, ioHost$$1, [parentPath, normalizedPath]);
            var v2667 = !resolvedFile;
            if(v2667) {
              normalizedPath = JAMScript.call(TypeScript$$28.changePathToDSTR, TypeScript$$28, [normalizedPath]);
              resolvedFile = JAMScript.call(ioHost$$1.findFile, ioHost$$1, [parentPath, normalizedPath])
            }
          }
          if(resolvedFile) {
            var v2669 = resolvedFile;
            var v18958 = resolvedFile.path;
            var v12971 = JAMScript.call(TypeScript$$28.stripQuotes, TypeScript$$28, [v18958]);
            var v26951 = JAMScript.call(TypeScript$$28.switchToForwardSlashes, TypeScript$$28, [v12971]);
            v2669.path = v26951;
            var v2670 = TypeScript$$28.CompilerDiagnostics;
            var v12972 = referencePath + " resolved to: ";
            var v12973 = resolvedFile.path;
            var v2671 = v12972 + v12973;
            JAMScript.call(v2670.debugPrint, v2670, [v2671]);
            var v2672 = resolvedFile;
            v2672.content = resolvedFile.content;
            var v2673 = this.visited;
            JAMScript.set(v2673, absoluteModuleID, true)
          }else {
            var v2674 = TypeScript$$28.CompilerDiagnostics;
            var v2675 = "Could not find " + referencePath;
            JAMScript.call(v2674.debugPrint, v2674, [v2675])
          }
        }
        var v12974 = resolvedFile;
        if(v12974) {
          v12974 = resolvedFile.content
        }
        var v2689 = v12974;
        if(v2689) {
          var v2677 = resolvedFile.path;
          var rootDir = JAMScript.call(ioHost$$1.dirName, ioHost$$1, [v2677]);
          var v2678 = resolvedFile.path;
          var v2679 = resolvedFile.content;
          var sourceUnit = JAMScript.new(SourceUnit, [v2678, v2679]);
          var v12975 = this.environment;
          var v2680 = v12975.compilationSettings;
          var preProcessedFileInfo = JAMScript.call(TypeScript$$28.preProcessFile, TypeScript$$28, [sourceUnit, v2680]);
          sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;
          var i$$116 = 0;
          var v18959 = preProcessedFileInfo.referencedFiles;
          var v12976 = v18959.length;
          var v2685 = i$$116 < v12976;
          for(;v2685;) {
            var v2681 = preProcessedFileInfo.referencedFiles;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var referencedFile = v2681[i$$116]
            }
            var v2682;
            var v18960 = referencedFile.path;
            var v12979 = JAMScript.call(TypeScript$$28.isRooted, TypeScript$$28, [v18960]);
            if(v12979) {
              v2682 = referencedFile.path
            }else {
              var v12977 = rootDir + "/";
              var v12978 = referencedFile.path;
              v2682 = v12977 + v12978
            }
            normalizedPath = v2682;
            normalizedPath = JAMScript.call(ioHost$$1.resolvePath, ioHost$$1, [normalizedPath]);
            var v2683 = referencePath == normalizedPath;
            if(v2683) {
              JAMScript.call(resolutionDispatcher.postResolutionError, resolutionDispatcher, [normalizedPath, "File contains reference to itself", null]);
              i$$116 = i$$116 + 1;
              var v18961 = preProcessedFileInfo.referencedFiles;
              var v12980 = v18961.length;
              v2685 = i$$116 < v12980;
              continue
            }
            var v2684 = referencedFile.path;
            JAMScript.call(this.resolveCode, this, [v2684, rootDir, false, resolutionDispatcher]);
            i$$116 = i$$116 + 1;
            var v18962 = preProcessedFileInfo.referencedFiles;
            var v12981 = v18962.length;
            v2685 = i$$116 < v12981
          }
          i$$116 = 0;
          var v18963 = preProcessedFileInfo.importedFiles;
          var v12982 = v18963.length;
          var v2687 = i$$116 < v12982;
          for(;v2687;) {
            var v18964 = preProcessedFileInfo.importedFiles;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v12983 = v18964[i$$116]
            }
            var v2686 = v12983.path;
            JAMScript.call(this.resolveCode, this, [v2686, rootDir, true, resolutionDispatcher]);
            i$$116 = i$$116 + 1;
            var v18965 = preProcessedFileInfo.importedFiles;
            var v12984 = v18965.length;
            v2687 = i$$116 < v12984
          }
          var v2688 = sourceUnit.path;
          JAMScript.call(resolutionDispatcher.postResolution, resolutionDispatcher, [v2688, sourceUnit])
        }
      }
      return
    }
    function CodeResolver$$1(environment) {
      this.environment = environment;
      this.visited = {};
      return
    }
    var v2691 = CodeResolver$$1.prototype;
    v2691.resolveCode = v1178;
    return CodeResolver$$1
  }
  function v1177() {
    function CompilationEnvironment$$1(compilationSettings, ioHost) {
      this.compilationSettings = compilationSettings;
      this.ioHost = ioHost;
      this.residentCode = [];
      this.code = [];
      return
    }
    return CompilationEnvironment$$1
  }
  function v1176() {
    function v1175() {
      var v2692 = this.content;
      return v2692.length
    }
    function v1174(start$$12, end$$6) {
      var v2693 = this.content;
      return JAMScript.call(v2693.substring, v2693, [start$$12, end$$6])
    }
    function SourceUnit$$1(path$$16, content$$5) {
      this.path = path$$16;
      this.content = content$$5;
      this.referencedFiles = null;
      return
    }
    var v2694 = SourceUnit$$1.prototype;
    v2694.getText = v1174;
    var v2695 = SourceUnit$$1.prototype;
    v2695.getLength = v1175;
    return SourceUnit$$1
  }
  var SourceUnit = v1176();
  TypeScript$$28.SourceUnit = SourceUnit;
  var CompilationEnvironment = v1177();
  TypeScript$$28.CompilationEnvironment = CompilationEnvironment;
  var CodeResolver = v1179();
  TypeScript$$28.CodeResolver = CodeResolver;
  return
}
function v1173(TypeScript$$27) {
  function stripQuotes(str$$7) {
    var v18966 = str$$7.replace('"', "");
    var v12985 = v18966.replace("'", "");
    var v2696 = v12985.replace("'", "");
    return v2696.replace('"', "")
  }
  function isQuoted(str$$8) {
    var v12986 = str$$8.indexOf('"');
    var v2697 = v12986 != -1;
    var v12988 = !v2697;
    if(v12988) {
      var v18967 = str$$8.indexOf("'");
      var v12987 = v18967 != -1;
      var v18969 = !v12987;
      if(v18969) {
        var v22931 = str$$8.indexOf("'");
        var v18968 = v22931 != -1;
        var v22933 = !v18968;
        if(v22933) {
          var v22932 = str$$8.indexOf('"');
          v18968 = v22932 != -1
        }
        v12987 = v18968
      }
      v2697 = v12987
    }
    return v2697
  }
  function quoteStr(str$$9) {
    var v2698 = '"' + str$$9;
    return v2698 + '"'
  }
  function swapQuotes(str$$10) {
    var v12989 = str$$10.indexOf('"');
    var v2699 = v12989 != -1;
    if(v2699) {
      str$$10 = str$$10.replace('"', "'");
      str$$10 = str$$10.replace('"', "'")
    }else {
      str$$10 = str$$10.replace("'", '"');
      str$$10 = str$$10.replace("'", '"')
    }
    return str$$10
  }
  function switchToForwardSlashes(path$$8) {
    return path$$8.replace(/\\/g, "/")
  }
  function trimModName(modName$$4) {
    var v18970 = modName$$4.length;
    var v12990 = v18970 > 6;
    if(v12990) {
      var v24952 = modName$$4.length;
      var v22934 = v24952 - 6;
      var v22935 = modName$$4.length;
      var v18971 = JAMScript.call(modName$$4.substring, modName$$4, [v22934, v22935]);
      v12990 = v18971 == ".d.str"
    }
    var v2701 = v12990;
    if(v2701) {
      var v12991 = modName$$4.length;
      var v2700 = v12991 - 6;
      return JAMScript.call(modName$$4.substring, modName$$4, [0, v2700])
    }
    var v18972 = modName$$4.length;
    var v12992 = v18972 > 4;
    if(v12992) {
      var v24953 = modName$$4.length;
      var v22936 = v24953 - 4;
      var v22937 = modName$$4.length;
      var v18973 = JAMScript.call(modName$$4.substring, modName$$4, [v22936, v22937]);
      v12992 = v18973 == ".str"
    }
    var v2703 = v12992;
    if(v2703) {
      var v12993 = modName$$4.length;
      var v2702 = v12993 - 4;
      return JAMScript.call(modName$$4.substring, modName$$4, [0, v2702])
    }
    var v18974 = modName$$4.length;
    var v12994 = v18974 > 5;
    if(v12994) {
      var v24954 = modName$$4.length;
      var v22938 = v24954 - 5;
      var v22939 = modName$$4.length;
      var v18975 = JAMScript.call(modName$$4.substring, modName$$4, [v22938, v22939]);
      v12994 = v18975 == ".d.ts"
    }
    var v2705 = v12994;
    if(v2705) {
      var v12995 = modName$$4.length;
      var v2704 = v12995 - 5;
      return JAMScript.call(modName$$4.substring, modName$$4, [0, v2704])
    }
    var v18976 = modName$$4.length;
    var v12996 = v18976 > 3;
    if(v12996) {
      var v24955 = modName$$4.length;
      var v22940 = v24955 - 3;
      var v22941 = modName$$4.length;
      var v18977 = JAMScript.call(modName$$4.substring, modName$$4, [v22940, v22941]);
      v12996 = v18977 == ".ts"
    }
    var v2707 = v12996;
    if(v2707) {
      var v12997 = modName$$4.length;
      var v2706 = v12997 - 3;
      return JAMScript.call(modName$$4.substring, modName$$4, [0, v2706])
    }
    var v18978 = modName$$4.length;
    var v12998 = v18978 > 3;
    if(v12998) {
      var v24956 = modName$$4.length;
      var v22942 = v24956 - 3;
      var v22943 = modName$$4.length;
      var v18979 = JAMScript.call(modName$$4.substring, modName$$4, [v22942, v22943]);
      v12998 = v18979 == ".js"
    }
    var v2709 = v12998;
    if(v2709) {
      var v12999 = modName$$4.length;
      var v2708 = v12999 - 3;
      return JAMScript.call(modName$$4.substring, modName$$4, [0, v2708])
    }
    return modName$$4
  }
  function getDeclareFilePath(fname) {
    var v2710;
    var v13001 = isSTRFile(fname);
    if(v13001) {
      v2710 = changePathToDSTR(fname)
    }else {
      var v13000;
      var v18980 = isTSFile(fname);
      if(v18980) {
        v13000 = changePathToDTS(fname)
      }else {
        v13000 = changePathToDTS(fname)
      }
      v2710 = v13000
    }
    return v2710
  }
  function isFileOfExtension(fname$$1, ext) {
    var invariantFname = fname$$1.toLocaleUpperCase();
    var invariantExt = ext.toLocaleUpperCase();
    var extLength = invariantExt.length;
    var v13002 = invariantFname.length;
    var v2711 = v13002 > extLength;
    if(v2711) {
      var v22944 = invariantFname.length;
      var v18981 = v22944 - extLength;
      var v18982 = invariantFname.length;
      var v13003 = JAMScript.call(invariantFname.substring, invariantFname, [v18981, v18982]);
      v2711 = v13003 == invariantExt
    }
    return v2711
  }
  function isJSFile(fname$$2) {
    return isFileOfExtension(fname$$2, ".js")
  }
  function isSTRFile(fname$$3) {
    return isFileOfExtension(fname$$3, ".str")
  }
  function isTSFile(fname$$4) {
    return isFileOfExtension(fname$$4, ".ts")
  }
  function isDSTRFile(fname$$5) {
    return isFileOfExtension(fname$$5, ".d.str")
  }
  function isDTSFile(fname$$6) {
    return isFileOfExtension(fname$$6, ".d.ts")
  }
  function getPrettyName(modPath$$3, quote$$1, treatAsFileName) {
    var v13004 = typeof quote$$1;
    var v2712 = v13004 === "undefined";
    if(v2712) {
      quote$$1 = true
    }
    var v13005 = typeof treatAsFileName;
    var v2713 = v13005 === "undefined";
    if(v2713) {
      treatAsFileName = false
    }
    var v2714;
    if(treatAsFileName) {
      v2714 = switchToForwardSlashes(modPath$$3)
    }else {
      var v13006 = stripQuotes(modPath$$3);
      v2714 = trimModName(v13006)
    }
    var modName$$5 = v2714;
    var components = JAMScript.call(this.getPathComponents, this, [modName$$5]);
    var v2715;
    var v13008 = components.length;
    if(v13008) {
      var v13007;
      if(quote$$1) {
        var v24957 = components.length;
        var v22945 = v24957 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v18983 = components[v22945]
        }
        v13007 = quoteStr(v18983)
      }else {
        var v22946 = components.length;
        var v18984 = v22946 - 1;
        v13007 = components[v18984]
      }
      v2715 = v13007
    }else {
      v2715 = modPath$$3
    }
    return v2715
  }
  function getPathComponents(path$$9) {
    return path$$9.split("/")
  }
  function getRelativePathToFixedPath(fixedModFilePath, absoluteModPath) {
    absoluteModPath = switchToForwardSlashes(absoluteModPath);
    var modComponents = JAMScript.call(this.getPathComponents, this, [absoluteModPath]);
    var fixedModComponents = JAMScript.call(this.getPathComponents, this, [fixedModFilePath]);
    var joinStartIndex = 0;
    var v18985 = modComponents.length;
    var v13009 = joinStartIndex < v18985;
    if(v13009) {
      var v18986 = fixedModComponents.length;
      v13009 = joinStartIndex < v18986
    }
    var v2717 = v13009;
    for(;v2717;) {
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v13010 = fixedModComponents[joinStartIndex]
      }
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v13011 = modComponents[joinStartIndex]
      }
      var v2716 = v13010 != v13011;
      if(v2716) {
        break
      }
      joinStartIndex = joinStartIndex + 1;
      var v18987 = modComponents.length;
      var v13012 = joinStartIndex < v18987;
      if(v13012) {
        var v18988 = fixedModComponents.length;
        v13012 = joinStartIndex < v18988
      }
      v2717 = v13012
    }
    var v2722 = joinStartIndex != 0;
    if(v2722) {
      var relativePath = "";
      var v2718 = modComponents.length;
      var relativePathComponents = modComponents.slice(joinStartIndex, v2718);
      var v13013 = fixedModComponents.length;
      var v2720 = joinStartIndex < v13013;
      for(;v2720;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v13014 = fixedModComponents[joinStartIndex]
        }
        var v2719 = v13014 != "";
        if(v2719) {
          relativePath = relativePath + "../"
        }
        joinStartIndex = joinStartIndex + 1;
        var v13015 = fixedModComponents.length;
        v2720 = joinStartIndex < v13015
      }
      var v2721 = relativePathComponents.join("/");
      return relativePath + v2721
    }
    return absoluteModPath
  }
  function quoteBaseName(modPath$$4) {
    var v2723 = stripQuotes(modPath$$4);
    var modName$$6 = trimModName(v2723);
    var path$$10 = getRootFilePath(modName$$6);
    var v2726 = path$$10 == "";
    if(v2726) {
      return modPath$$4
    }else {
      var components$$1 = modName$$6.split(path$$10);
      var v2724;
      var v18989 = components$$1.length;
      var v13016 = v18989 > 1;
      if(v13016) {
        v2724 = 1
      }else {
        v2724 = 0
      }
      var fileIndex = v2724;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v2725 = components$$1[fileIndex]
      }
      return quoteStr(v2725)
    }
    return
  }
  function changePathToSTR(modPath$$5) {
    var v13017 = stripQuotes(modPath$$5);
    var v2727 = trimModName(v13017);
    return v2727 + ".str"
  }
  function changePathToDSTR(modPath$$6) {
    var v13018 = stripQuotes(modPath$$6);
    var v2728 = trimModName(v13018);
    return v2728 + ".d.str"
  }
  function changePathToTS(modPath$$7) {
    var v13019 = stripQuotes(modPath$$7);
    var v2729 = trimModName(v13019);
    return v2729 + ".ts"
  }
  function changePathToDTS(modPath$$8) {
    var v13020 = stripQuotes(modPath$$8);
    var v2730 = trimModName(v13020);
    return v2730 + ".d.ts"
  }
  function isRelative(path$$11) {
    var v2731 = path$$11.charAt(0);
    return v2731 == "."
  }
  function isRooted(path$$12) {
    var v13021 = path$$12.charAt(0);
    var v2732 = v13021 == "\\";
    var v13023 = !v2732;
    if(v13023) {
      var v18990 = path$$12.charAt(0);
      var v13022 = v18990 == "/";
      var v18992 = !v13022;
      if(v18992) {
        var v22947 = path$$12.indexOf(":\\");
        var v18991 = v22947 != -1;
        var v22949 = !v18991;
        if(v22949) {
          var v22948 = path$$12.indexOf(":/");
          v18991 = v22948 != -1
        }
        v13022 = v18991
      }
      v2732 = v13022
    }
    return v2732
  }
  function getRootFilePath(outFname) {
    var v2735 = outFname == "";
    if(v2735) {
      return outFname
    }else {
      var v2733 = outFname.indexOf("/");
      var isPath = v2733 != -1;
      var v2734;
      if(isPath) {
        v2734 = filePath(outFname)
      }else {
        v2734 = ""
      }
      return v2734
    }
    return
  }
  function filePathComponents(fullPath) {
    fullPath = switchToForwardSlashes(fullPath);
    var components$$2 = getPathComponents(fullPath);
    var v13024 = components$$2.length;
    var v2736 = v13024 - 1;
    return components$$2.slice(0, v2736)
  }
  function filePath(fullPath$$1) {
    var path$$13 = filePathComponents(fullPath$$1);
    var v2737 = path$$13.join("/");
    return v2737 + "/"
  }
  function normalizeURL(url$$3) {
    var hostDomainAndPortRegex = /^(https?:\/\/[\-\w\.]+(:\d+)?\/)(.*)$/i;
    var matches = JAMScript.call(hostDomainAndPortRegex.exec, hostDomainAndPortRegex, [url$$3]);
    if(matches) {
      var hostDomainAndPort = matches[1];
      var actualPath = matches[3];
      var v2738 = normalizePath(actualPath);
      return hostDomainAndPort + v2738
    }
    return normalizePath(url$$3)
  }
  function normalizePath(path$$14) {
    path$$14 = switchToForwardSlashes(path$$14);
    var v2739 = path$$14.charAt(0);
    var startedWithSep = v2739 === "/";
    var parts = JAMScript.call(this.getPathComponents, this, [path$$14]);
    var i$$115 = 0;
    var v13025 = parts.length;
    var v2743 = i$$115 < v13025;
    for(;v2743;) {
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v18993 = parts[i$$115]
      }
      var v13026 = v18993 === ".";
      var v18995 = !v13026;
      if(v18995) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v18994 = parts[i$$115]
        }
        v13026 = v18994 === ""
      }
      var v2740 = v13026;
      if(v2740) {
        parts.splice(i$$115, 1);
        i$$115 = i$$115 - 1
      }
      var v13027 = i$$115 > 0;
      if(v13027) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22950 = parts[i$$115]
        }
        var v18996 = v22950 === "..";
        if(v18996) {
          var v24958 = i$$115 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22951 = parts[v24958]
          }
          v18996 = v22951 !== ".."
        }
        v13027 = v18996
      }
      var v2742 = v13027;
      if(v2742) {
        var v2741 = i$$115 - 1;
        parts.splice(v2741, 2);
        i$$115 = i$$115 - 2
      }
      i$$115 = i$$115 + 1;
      var v13028 = parts.length;
      v2743 = i$$115 < v13028
    }
    var v13029;
    if(startedWithSep) {
      v13029 = "/"
    }else {
      v13029 = ""
    }
    var v2744 = v13029;
    var v2745 = parts.join("/");
    return v2744 + v2745
  }
  function normalizeImportPath(path$$15) {
    return normalizePath(path$$15)
  }
  TypeScript$$27.stripQuotes = stripQuotes;
  TypeScript$$27.isQuoted = isQuoted;
  TypeScript$$27.quoteStr = quoteStr;
  TypeScript$$27.swapQuotes = swapQuotes;
  TypeScript$$27.switchToForwardSlashes = switchToForwardSlashes;
  TypeScript$$27.trimModName = trimModName;
  TypeScript$$27.getDeclareFilePath = getDeclareFilePath;
  TypeScript$$27.isJSFile = isJSFile;
  TypeScript$$27.isSTRFile = isSTRFile;
  TypeScript$$27.isTSFile = isTSFile;
  TypeScript$$27.isDSTRFile = isDSTRFile;
  TypeScript$$27.isDTSFile = isDTSFile;
  TypeScript$$27.getPrettyName = getPrettyName;
  TypeScript$$27.getPathComponents = getPathComponents;
  TypeScript$$27.getRelativePathToFixedPath = getRelativePathToFixedPath;
  TypeScript$$27.quoteBaseName = quoteBaseName;
  TypeScript$$27.changePathToSTR = changePathToSTR;
  TypeScript$$27.changePathToDSTR = changePathToDSTR;
  TypeScript$$27.changePathToTS = changePathToTS;
  TypeScript$$27.changePathToDTS = changePathToDTS;
  TypeScript$$27.isRelative = isRelative;
  TypeScript$$27.isRooted = isRooted;
  TypeScript$$27.getRootFilePath = getRootFilePath;
  TypeScript$$27.filePathComponents = filePathComponents;
  TypeScript$$27.filePath = filePath;
  TypeScript$$27.normalizeURL = normalizeURL;
  TypeScript$$27.pathNormalizeRegExp = /\//g;
  TypeScript$$27.normalizePath = normalizePath;
  TypeScript$$27.normalizeImportPath = normalizeImportPath;
  return
}
function v1172(TypeScript$$26) {
  function v1171() {
    function TypeLink$$1() {
      this.type = null;
      this.ast = null;
      return
    }
    return TypeLink$$1
  }
  function v1170(_super$$67) {
    function v1169(moduleType$$2) {
      var moduleName$$2 = null;
      var v13030 = this.members;
      var v2746 = v13030.allMembers;
      moduleName$$2 = JAMScript.call(ModuleType$$1.findDynamicModuleNameInHashTable, ModuleType$$1, [moduleType$$2, v2746]);
      var v2748 = moduleName$$2 == null;
      if(v2748) {
        var v13031 = this.ambientMembers;
        var v2747 = v13031.allMembers;
        moduleName$$2 = JAMScript.call(ModuleType$$1.findDynamicModuleNameInHashTable, ModuleType$$1, [moduleType$$2, v2747])
      }
      return moduleName$$2
    }
    function findDynamicModuleNameInHashTable(moduleType$$1, members$$27) {
      function v1168(key$$51, s$$34, c$$13) {
        var v13032 = moduleName$$1 == null;
        if(v13032) {
          var v18997 = JAMScript.call(TypeScript$$26.isQuoted, TypeScript$$26, [key$$51]);
          v13032 = !v18997
        }
        var v2750 = v13032;
        if(v2750) {
          var symbol$$22 = s$$34;
          var type$$57 = JAMScript.call(symbol$$22.getType, symbol$$22, []);
          var v2749 = type$$57 == moduleType$$1;
          if(v2749) {
            moduleName$$1 = {name:key$$51, symbol:symbol$$22}
          }
        }
        return
      }
      var moduleName$$1 = null;
      JAMScript.call(members$$27.map, members$$27, [v1168, null]);
      return moduleName$$1
    }
    function v1167() {
      return null
    }
    function v1166() {
      return null
    }
    function v1165() {
      return this.ambientEnclosedTypes
    }
    function v1164() {
      return this.enclosedTypes
    }
    function v1163() {
      var v13033 = this.members;
      var v2751 = v13033 != null;
      var v13035 = !v2751;
      if(v13035) {
        var v13034 = this.enclosedTypes;
        v2751 = v13034 != null
      }
      return v2751
    }
    function v1162() {
      return true
    }
    function ModuleType$$1(enclosedTypes$$4, ambientEnclosedTypes$$4) {
      JAMScript.call(_super$$67.call, _super$$67, [this]);
      this.enclosedTypes = enclosedTypes$$4;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$4;
      this.importedModules = [];
      return
    }
    JAMScript.call(__extends, null, [ModuleType$$1, _super$$67]);
    var v2752 = ModuleType$$1.prototype;
    v2752.isModuleType = v1162;
    var v2753 = ModuleType$$1.prototype;
    v2753.hasMembers = v1163;
    var v2754 = ModuleType$$1.prototype;
    v2754.getAllEnclosedTypes = v1164;
    var v2755 = ModuleType$$1.prototype;
    v2755.getAllAmbientEnclosedTypes = v1165;
    var v2756 = ModuleType$$1.prototype;
    v2756.getPublicEnclosedTypes = v1166;
    var v2757 = ModuleType$$1.prototype;
    v2757.getpublicAmbientEnclosedTypes = v1167;
    ModuleType$$1.findDynamicModuleNameInHashTable = findDynamicModuleNameInHashTable;
    var v2758 = ModuleType$$1.prototype;
    v2758.findDynamicModuleName = v1169;
    return ModuleType$$1
  }
  function v1161() {
    function v1160() {
      var v13036 = this.elementType;
      var v18999 = !v13036;
      if(v18999) {
        var v18998 = this.symbol;
        v13036 = !v18998
      }
      var v2759 = v13036;
      if(v2759) {
        return[]
      }
      var v13037 = JAMScript.call(this.isClassInstance, this, []);
      var v19000 = !v13037;
      if(v19000) {
        v13037 = JAMScript.call(this.isClass, this, [])
      }
      var v2763 = v13037;
      if(v2763) {
        var v22952 = this.symbol;
        var v19001 = v22952.declAST;
        var v13038 = v19001.nodeType;
        var v19002 = TypeScript$$26.NodeType;
        var v13039 = v19002.FuncDecl;
        var v2762 = v13038 == v13039;
        if(v2762) {
          var v19003 = this.symbol;
          var v13040 = v19003.declAST;
          var v2760 = v13040.classDecl;
          return JAMScript.call(v2760.getDocComments, v2760, [])
        }else {
          var v2761 = this.symbol;
          return JAMScript.call(v2761.getDocComments, v2761, [])
        }
      }
      var v19004 = this.symbol;
      var v13041 = v19004.name;
      if(v13041) {
        var v24959 = this.symbol;
        var v22953 = v24959.name;
        var v19005 = v22953 != "_anonymous";
        if(v19005) {
          var v25899 = this.call;
          var v24960 = v25899 == null;
          if(v24960) {
            var v26406 = this.construct;
            var v25900 = v26406 == null;
            if(v25900) {
              var v26407 = this.index;
              v25900 = v26407 == null
            }
            v24960 = v25900
          }
          var v22954 = v24960;
          var v24961 = !v22954;
          if(v24961) {
            v22954 = this.members
          }
          v19005 = v22954
        }
        v13041 = v19005
      }
      var v2765 = v13041;
      if(v2765) {
        var v2764 = this.symbol;
        return JAMScript.call(v2764.getDocComments, v2764, [])
      }
      return[]
    }
    function v1159() {
      return null
    }
    function v1158() {
      return null
    }
    function v1157() {
      return null
    }
    function v1156() {
      return null
    }
    function v1155() {
      var v2766 = this.members;
      return v2766 != null
    }
    function v1154() {
      return false
    }
    function v1153(b$$14, checker$$22, acceptVoid$$1, comparisonInfo$$17) {
      var v19006 = checker$$22.anyType;
      var v13042 = this == v19006;
      var v19008 = !v13042;
      if(v19008) {
        var v19007 = checker$$22.anyType;
        v13042 = b$$14 == v19007
      }
      var v2782 = v13042;
      if(v2782) {
        return checker$$22.anyType
      }else {
        var v2781 = this == b$$14;
        if(v2781) {
          return this
        }else {
          var v19009 = checker$$22.nullType;
          var v13043 = b$$14 == v19009;
          if(v13043) {
            var v19010 = checker$$22.nullType;
            v13043 = this != v19010
          }
          var v2780 = v13043;
          if(v2780) {
            return this
          }else {
            var v19011 = checker$$22.nullType;
            var v13044 = this == v19011;
            if(v13044) {
              var v19012 = checker$$22.nullType;
              v13044 = b$$14 != v19012
            }
            var v2779 = v13044;
            if(v2779) {
              return b$$14
            }else {
              var v13045 = acceptVoid$$1;
              if(v13045) {
                var v22955 = checker$$22.voidType;
                var v19013 = b$$14 == v22955;
                if(v19013) {
                  var v22956 = checker$$22.voidType;
                  v19013 = this != v22956
                }
                v13045 = v19013
              }
              var v2778 = v13045;
              if(v2778) {
                return this
              }else {
                var v13046 = acceptVoid$$1;
                if(v13046) {
                  var v22957 = checker$$22.voidType;
                  var v19014 = this == v22957;
                  if(v19014) {
                    var v22958 = checker$$22.voidType;
                    v19014 = b$$14 != v22958
                  }
                  v13046 = v19014
                }
                var v2777 = v13046;
                if(v2777) {
                  return b$$14
                }else {
                  var v19015 = checker$$22.undefinedType;
                  var v13047 = b$$14 == v19015;
                  if(v13047) {
                    var v19016 = checker$$22.undefinedType;
                    v13047 = this != v19016
                  }
                  var v2776 = v13047;
                  if(v2776) {
                    return this
                  }else {
                    var v19017 = checker$$22.undefinedType;
                    var v13048 = this == v19017;
                    if(v13048) {
                      var v19018 = checker$$22.undefinedType;
                      v13048 = b$$14 != v19018
                    }
                    var v2775 = v13048;
                    if(v2775) {
                      return b$$14
                    }else {
                      var v13049 = this.elementType;
                      if(v13049) {
                        v13049 = b$$14.elementType
                      }
                      var v2774 = v13049;
                      if(v2774) {
                        var v13050 = this.elementType;
                        var v13051 = b$$14.elementType;
                        var v2771 = v13050 == v13051;
                        if(v2771) {
                          return this
                        }else {
                          var v2767 = this.elementType;
                          var v2768 = b$$14.elementType;
                          var mergedET = JAMScript.call(v2767.mergeOrdered, v2767, [v2768, checker$$22, acceptVoid$$1, comparisonInfo$$17]);
                          var v2770 = mergedET == null;
                          if(v2770) {
                            var v2769 = checker$$22.anyType;
                            return JAMScript.call(checker$$22.makeArrayType, checker$$22, [v2769])
                          }else {
                            return JAMScript.call(checker$$22.makeArrayType, checker$$22, [mergedET])
                          }
                        }
                      }else {
                        var v2773 = JAMScript.call(checker$$22.sourceIsSubtypeOfTarget, checker$$22, [this, b$$14, comparisonInfo$$17]);
                        if(v2773) {
                          return b$$14
                        }else {
                          var v2772 = JAMScript.call(checker$$22.sourceIsSubtypeOfTarget, checker$$22, [b$$14, this, comparisonInfo$$17]);
                          if(v2772) {
                            return this
                          }else {
                            return null
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return
    }
    function v1152(baseType) {
      var v2787 = baseType == this;
      if(v2787) {
        return true
      }else {
        var v2786 = this.extendsList;
        if(v2786) {
          var i$$114 = 0;
          var v2783 = this.extendsList;
          var len$$56 = v2783.length;
          var v2785 = i$$114 < len$$56;
          for(;v2785;) {
            var v19019 = this.extendsList;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v13052 = v19019[i$$114]
            }
            var v2784 = JAMScript.call(v13052.hasBase, v13052, [baseType]);
            if(v2784) {
              return true
            }
            i$$114 = i$$114 + 1;
            v2785 = i$$114 < len$$56
          }
        }
      }
      return false
    }
    function v1151(pattern$$8, replacement$$6, checker$$21, membersOnly) {
      function v1150(key$$50, s$$33, unused$$5) {
        var sym$$48 = s$$33;
        var bSym$$4 = JAMScript.call(sym$$48.specializeType, sym$$48, [pattern$$8, replacement$$6, checker$$21]);
        var v2788 = result$$33.ambientMembers;
        var v2789 = bSym$$4.name;
        JAMScript.call(v2788.addPrivateMember, v2788, [v2789, bSym$$4]);
        return
      }
      function v1149(key$$49, s$$32, unused$$4) {
        var sym$$47 = s$$32;
        var bSym$$3 = JAMScript.call(sym$$47.specializeType, sym$$47, [pattern$$8, replacement$$6, checker$$21]);
        var v2790 = result$$33.ambientMembers;
        var v2791 = bSym$$3.name;
        JAMScript.call(v2790.addPublicMember, v2790, [v2791, bSym$$3]);
        return
      }
      function v1148(key$$48, s$$31, unused$$3) {
        var sym$$46 = s$$31;
        var bSym$$2 = JAMScript.call(sym$$46.specializeType, sym$$46, [pattern$$8, replacement$$6, checker$$21]);
        var v2792 = result$$33.members;
        var v2793 = bSym$$2.name;
        JAMScript.call(v2792.addPrivateMember, v2792, [v2793, bSym$$2]);
        return
      }
      function v1147(key$$47, s$$30, unused$$2) {
        var sym$$45 = s$$30;
        var bSym$$1 = JAMScript.call(sym$$45.specializeType, sym$$45, [pattern$$8, replacement$$6, checker$$21]);
        var v2794 = result$$33.members;
        var v2795 = bSym$$1.name;
        JAMScript.call(v2794.addPublicMember, v2794, [v2795, bSym$$1]);
        return
      }
      var v2796 = pattern$$8 == this;
      if(v2796) {
        return replacement$$6
      }
      var result$$33 = this;
      if(membersOnly) {
        var v2809 = JAMScript.call(this.isReferenceType, this, []);
        if(v2809) {
          result$$33 = new Type$$1;
          var v2801 = this.members;
          if(v2801) {
            var v2797 = TypeScript$$26.ScopedMembers;
            var v13053 = TypeScript$$26.DualStringHashTable;
            var v19020 = TypeScript$$26.StringHashTable;
            var v13054 = JAMScript.new(v19020, []);
            var v19021 = TypeScript$$26.StringHashTable;
            var v13055 = JAMScript.new(v19021, []);
            var v2798 = JAMScript.new(v13053, [v13054, v13055]);
            var v26952 = JAMScript.new(v2797, [v2798]);
            result$$33.members = v26952;
            var v13056 = this.members;
            var v2799 = v13056.publicMembers;
            JAMScript.call(v2799.map, v2799, [v1147, null]);
            var v13057 = this.members;
            var v2800 = v13057.privateMembers;
            JAMScript.call(v2800.map, v2800, [v1148, null])
          }
          var v2806 = this.ambientMembers;
          if(v2806) {
            var v2802 = TypeScript$$26.ScopedMembers;
            var v13058 = TypeScript$$26.DualStringHashTable;
            var v19022 = TypeScript$$26.StringHashTable;
            var v13059 = JAMScript.new(v19022, []);
            var v19023 = TypeScript$$26.StringHashTable;
            var v13060 = JAMScript.new(v19023, []);
            var v2803 = JAMScript.new(v13058, [v13059, v13060]);
            var v26953 = JAMScript.new(v2802, [v2803]);
            result$$33.ambientMembers = v26953;
            var v13061 = this.ambientMembers;
            var v2804 = v13061.publicMembers;
            JAMScript.call(v2804.map, v2804, [v1149, null]);
            var v13062 = this.ambientMembers;
            var v2805 = v13062.privateMembers;
            JAMScript.call(v2805.map, v2805, [v1150, null])
          }
          var v2807 = result$$33;
          var v26954 = JAMScript.call(checker$$21.scopeOf, checker$$21, [result$$33]);
          v2807.containedScope = v26954;
          var v2808 = result$$33;
          v2808.memberScope = result$$33.containedScope
        }
      }else {
        var v2815 = this.elementType;
        if(v2815) {
          var v13063 = this.elementType;
          var v2812 = v13063 == pattern$$8;
          if(v2812) {
            result$$33 = JAMScript.call(checker$$21.makeArrayType, checker$$21, [replacement$$6])
          }else {
            var v19024 = this.elementType;
            var v13064 = v19024.elementType;
            var v2811 = v13064 == pattern$$8;
            if(v2811) {
              var v2810 = JAMScript.call(checker$$21.makeArrayType, checker$$21, [replacement$$6]);
              result$$33 = JAMScript.call(checker$$21.makeArrayType, checker$$21, [v2810])
            }
          }
        }else {
          var v2814 = this.call;
          if(v2814) {
            result$$33 = new Type$$1;
            var v2813 = result$$33;
            var v13065 = this.call;
            var v26955 = JAMScript.call(v13065.specializeType, v13065, [pattern$$8, replacement$$6, checker$$21]);
            v2813.call = v26955
          }
        }
      }
      return result$$33
    }
    function v1146() {
      var v2816 = this.members;
      var v13067 = !v2816;
      if(v13067) {
        var v13066 = this.extendsList;
        var v19026 = !v13066;
        if(v19026) {
          var v19025 = this.construct;
          var v22960 = !v19025;
          if(v22960) {
            var v22959 = this.call;
            var v24963 = !v22959;
            if(v24963) {
              var v24962 = this.index;
              var v25901 = !v24962;
              if(v25901) {
                v24962 = this.elementType
              }
              v22959 = v24962
            }
            v19025 = v22959
          }
          v13066 = v19025
        }
        v2816 = v13066
      }
      return v2816
    }
    function v1145(flow$$1) {
      var v13068 = flow$$1.anyType;
      var v2831 = this == v13068;
      if(v2831) {
        return null
      }else {
        var v2830 = JAMScript.call(this.isDouble, this, []);
        if(v2830) {
          var v2818 = flow$$1.numberInterfaceType;
          if(v2818) {
            var v2817 = flow$$1.numberInterfaceType;
            return v2817.memberScope
          }else {
            return null
          }
        }else {
          var v2829 = JAMScript.call(this.isBoolean, this, []);
          if(v2829) {
            var v2820 = flow$$1.booleanInterfaceType;
            if(v2820) {
              var v2819 = flow$$1.booleanInterfaceType;
              return v2819.memberScope
            }else {
              return null
            }
          }else {
            var v13069 = flow$$1.stringType;
            var v2828 = this == v13069;
            if(v2828) {
              var v2822 = flow$$1.stringInterfaceType;
              if(v2822) {
                var v2821 = flow$$1.stringInterfaceType;
                return v2821.memberScope
              }else {
                return null
              }
            }else {
              var v2827 = this.elementType;
              if(v2827) {
                var v2826 = flow$$1.arrayInterfaceType;
                if(v2826) {
                  var v2823 = this.elementType;
                  var v2824 = flow$$1.arrayInterfaceType;
                  var v2825 = flow$$1.checker;
                  var arrInstType$$3 = JAMScript.call(v2823.getArrayBase, v2823, [v2824, v2825]);
                  return arrInstType$$3.memberScope
                }else {
                  return null
                }
              }else {
                return this.memberScope
              }
            }
          }
        }
      }
      return
    }
    function v1144(checker$$20) {
      var v13070 = JAMScript.call(this.isClassInstance, this, []);
      var v19027 = !v13070;
      if(v19027) {
        v13070 = JAMScript.call(this.isClass, this, [])
      }
      var v2835 = v13070;
      if(v2835) {
        var v13071 = this.symbol;
        var v2834 = v13071.declAST;
        if(v2834) {
          var v2832 = checker$$20.typeFlow;
          var v13072 = this.symbol;
          var v2833 = v13072.declAST;
          JAMScript.call(v2832.inScopeTypeCheckDecl, v2832, [v2833])
        }
      }
      return
    }
    function v1143(prefix$$5, topLevel$$1, isElementType$$1, scope$$34) {
      function v1142(key$$46, s$$29, unused$$1) {
        var sym$$44 = s$$29;
        var v19028 = sym$$44.flags;
        var v22961 = TypeScript$$26.SymbolFlags;
        var v19029 = v22961.BuiltIn;
        var v13073 = JAMScript.call(TypeScript$$26.hasFlag, TypeScript$$26, [v19028, v19029]);
        var v2838 = !v13073;
        if(v2838) {
          var typeNameMember = JAMScript.call(sym$$44.getTypeNameEx, sym$$44, [scope$$34]);
          var v13074 = JAMScript.call(typeNameMember.isArray, typeNameMember, []);
          if(v13074) {
            var v19030 = typeNameMember.delim;
            v13074 = v19030 == delim
          }
          var v2837 = v13074;
          if(v2837) {
            var v2836 = typeNameMember.entries;
            JAMScript.call(allMemberNames.addAll, allMemberNames, [v2836])
          }else {
            JAMScript.call(allMemberNames.add, allMemberNames, [typeNameMember])
          }
          memCount = memCount + 1;
          curlies$$1 = true
        }
        return
      }
      var v2858 = this.elementType;
      if(v2858) {
        var v13075 = this.elementType;
        var v2839 = JAMScript.call(v13075.getMemberTypeNameEx, v13075, [prefix$$5, false, true, scope$$34]);
        return JAMScript.call(MemberName.create, MemberName, [v2839, "", "[]"])
      }else {
        var v13076 = this.symbol;
        if(v13076) {
          var v22962 = this.symbol;
          var v19031 = v22962.name;
          if(v19031) {
            var v25902 = this.symbol;
            var v24964 = v25902.name;
            var v22963 = v24964 != "_anonymous";
            if(v22963) {
              var v26408 = this.call;
              var v25903 = v26408 == null;
              if(v25903) {
                var v26656 = this.construct;
                var v26409 = v26656 == null;
                if(v26409) {
                  var v26657 = this.index;
                  v26409 = v26657 == null
                }
                v25903 = v26409
              }
              var v24965 = v25903;
              var v25905 = !v24965;
              if(v25905) {
                var v26410 = this.typeFlags;
                var v26658 = TypeScript$$26.TypeFlags;
                var v26411 = v26658.BuildingName;
                var v25904 = JAMScript.call(TypeScript$$26.hasFlag, TypeScript$$26, [v26410, v26411]);
                var v26413 = !v25904;
                if(v26413) {
                  var v26412 = this.members;
                  if(v26412) {
                    var v26659 = JAMScript.call(this.isClass, this, []);
                    v26412 = !v26659
                  }
                  v25904 = v26412
                }
                v24965 = v25904
              }
              v22963 = v24965
            }
            v19031 = v22963
          }
          v13076 = v19031
        }
        var v2857 = v13076;
        if(v2857) {
          var v2840 = this.symbol;
          var tn = JAMScript.call(v2840.scopeRelativeName, v2840, [scope$$34]);
          var v13077;
          var v19032 = tn == "null";
          if(v19032) {
            v13077 = "any"
          }else {
            v13077 = tn
          }
          var v2841 = v13077;
          return JAMScript.call(MemberName.create, MemberName, [v2841])
        }else {
          var v13078 = this.members;
          var v19034 = !v13078;
          if(v19034) {
            var v19033 = this.call;
            var v22964 = !v19033;
            if(v22964) {
              v19033 = this.construct
            }
            v13078 = v19033
          }
          var v2856 = v13078;
          if(v2856) {
            var v13079 = this.typeFlags;
            var v19035 = TypeScript$$26.TypeFlags;
            var v13080 = v19035.BuildingName;
            var v2842 = JAMScript.call(TypeScript$$26.hasFlag, TypeScript$$26, [v13079, v13080]);
            if(v2842) {
              return JAMScript.call(MemberName.create, MemberName, ["this"])
            }
            var v13081 = this.typeFlags;
            var v19036 = TypeScript$$26.TypeFlags;
            var v13082 = v19036.BuildingName;
            this.typeFlags = v13081 | v13082;
            var builder$$5 = "";
            var allMemberNames = JAMScript.new(MemberNameArray, []);
            var v2843 = isElementType$$1;
            var v13084 = !v2843;
            if(v13084) {
              var v13083 = this.index;
              v2843 = v13083 != null
            }
            var curlies$$1 = v2843;
            var memCount = 0;
            var delim = "; ";
            var v2845 = this.members;
            if(v2845) {
              var v13085 = this.members;
              var v2844 = v13085.allMembers;
              JAMScript.call(v2844.map, v2844, [v1142, null])
            }
            var signatureCount = JAMScript.call(this.callCount, this, []);
            var j$$18;
            var len$$55 = 0;
            var v2846 = !curlies$$1;
            if(v2846) {
              var v13086 = signatureCount == 1;
              if(v13086) {
                v13086 = topLevel$$1
              }
              v2846 = v13086
            }
            var shortform$$3 = v2846;
            var v2848 = this.call;
            if(v2848) {
              var v13087 = this.call;
              var v2847 = JAMScript.call(v13087.toStrings, v13087, [prefix$$5, shortform$$3, scope$$34]);
              JAMScript.call(allMemberNames.addAll, allMemberNames, [v2847])
            }
            var v2850 = this.construct;
            if(v2850) {
              var v13088 = this.construct;
              var v2849 = JAMScript.call(v13088.toStrings, v13088, ["new", shortform$$3, scope$$34]);
              JAMScript.call(allMemberNames.addAll, allMemberNames, [v2849])
            }
            var v2852 = this.index;
            if(v2852) {
              var v13089 = this.index;
              var v2851 = JAMScript.call(v13089.toStrings, v13089, ["", shortform$$3, scope$$34]);
              JAMScript.call(allMemberNames.addAll, allMemberNames, [v2851])
            }
            var v13090 = curlies$$1;
            var v19038 = !v13090;
            if(v19038) {
              var v19037 = signatureCount > 1;
              if(v19037) {
                v19037 = topLevel$$1
              }
              v13090 = v19037
            }
            var v2854 = v13090;
            if(v2854) {
              allMemberNames.prefix = "{ ";
              allMemberNames.suffix = "}";
              allMemberNames.delim = delim
            }else {
              var v19039 = allMemberNames.entries;
              var v13091 = v19039.length;
              var v2853 = v13091 > 1;
              if(v2853) {
                allMemberNames.delim = delim
              }
            }
            var v13092 = this.typeFlags;
            var v22965 = TypeScript$$26.TypeFlags;
            var v19040 = v22965.BuildingName;
            var v13093 = ~v19040;
            this.typeFlags = v13092 & v13093;
            var v13094 = signatureCount == 0;
            if(v13094) {
              v13094 = memCount == 0
            }
            var v2855 = v13094;
            if(v2855) {
              return JAMScript.call(MemberName.create, MemberName, ["{}"])
            }else {
              return allMemberNames
            }
          }else {
            return JAMScript.call(MemberName.create, MemberName, ["{}"])
          }
        }
      }
      return
    }
    function v1141(prefix$$4, topLevel, isElementType, scope$$33) {
      var memberName$$4 = JAMScript.call(this.getMemberTypeNameEx, this, [prefix$$4, topLevel, isElementType, scope$$33]);
      return JAMScript.call(memberName$$4.toString, memberName$$4, [])
    }
    function v1140() {
      var total = 0;
      var v2859 = this.call;
      if(v2859) {
        var v22966 = this.call;
        var v19041 = v22966.signatures;
        var v13095 = v19041.length;
        total = total + v13095
      }
      var v2860 = this.construct;
      if(v2860) {
        var v22967 = this.construct;
        var v19042 = v22967.signatures;
        var v13096 = v19042.length;
        total = total + v13096
      }
      var v2861 = this.index;
      if(v2861) {
        var v22968 = this.index;
        var v19043 = v22968.signatures;
        var v13097 = v19043.length;
        total = total + v13097
      }
      return total
    }
    function v1139(scope$$32) {
      return JAMScript.call(this.getMemberTypeNameEx, this, ["", true, false, scope$$32])
    }
    function v1138(scope$$31) {
      return JAMScript.call(this.getMemberTypeName, this, ["", true, false, scope$$31])
    }
    function v1137() {
      return JAMScript.call(this.getMemberTypeName, this, ["", true, false, null])
    }
    function v1136() {
      var v2862 = this.primitiveTypeClass;
      var v2863 = Primitive.Null;
      return JAMScript.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2862, v2863])
    }
    function v1135() {
      var v2864 = this.primitiveTypeClass;
      var v2865 = Primitive.Boolean;
      return JAMScript.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2864, v2865])
    }
    function v1134() {
      var v2866 = this.primitiveTypeClass;
      var v2867 = Primitive.String;
      return JAMScript.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2866, v2867])
    }
    function v1133() {
      var v2868 = this.primitiveTypeClass;
      var v2869 = Primitive.Double;
      return JAMScript.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2868, v2869])
    }
    function v1132() {
      var v13098 = this.typeFlags;
      var v19044 = TypeScript$$26.TypeFlags;
      var v13099 = v19044.HasImplementation;
      this.typeFlags = v13098 | v13099;
      return
    }
    function v1131() {
      var v2870 = this.typeFlags;
      var v13100 = TypeScript$$26.TypeFlags;
      var v2871 = v13100.HasImplementation;
      return JAMScript.call(TypeScript$$26.hasFlag, TypeScript$$26, [v2870, v2871])
    }
    function v1130() {
      var v2872 = JAMScript.call(this.isClass, this, []);
      if(v2872) {
        return this.instanceType
      }else {
        return this
      }
      return
    }
    function v1129() {
      var v2873 = this.symbol;
      if(v2873) {
        var v19045 = this.elementType;
        var v13101 = !v19045;
        if(v13101) {
          var v22969 = this.symbol;
          var v19046 = v22969.type;
          v13101 = JAMScript.call(v19046.isClass, v19046, [])
        }
        v2873 = v13101
      }
      return v2873
    }
    function v1128() {
      var v2874 = this.elementType;
      return v2874 != null
    }
    function v1127() {
      var v2875 = this.instanceType;
      return v2875 != null
    }
    function v1126(arrInstType$$2, checker$$19) {
      var v2876 = this.arrayCache;
      return JAMScript.call(v2876.specialize, v2876, [arrInstType$$2, checker$$19])
    }
    function v1125() {
      var v13102 = this.extendsList;
      if(v13102) {
        var v22970 = this.extendsList;
        var v19047 = v22970.length;
        v13102 = v19047 > 0
      }
      var v2878 = v13102;
      if(v2878) {
        var v2877 = this.extendsList;
        return v2877[0]
      }else {
        return null
      }
      return
    }
    function Type$$1() {
      this.typeID = currentTypeID;
      currentTypeID = currentTypeID + 1;
      this.construct = null;
      this.call = null;
      this.index = null;
      var v2879 = TypeScript$$26.CompilerDiagnostics;
      this.passTypeCreated = v2879.analysisPass;
      this.primitiveTypeClass = Primitive.None;
      var v2880 = TypeScript$$26.TypeFlags;
      this.typeFlags = v2880.None;
      return
    }
    var v2881 = Type$$1.prototype;
    v2881.baseClass = v1125;
    var v2882 = Type$$1.prototype;
    v2882.getArrayBase = v1126;
    var v2883 = Type$$1.prototype;
    v2883.isClass = v1127;
    var v2884 = Type$$1.prototype;
    v2884.isArray = v1128;
    var v2885 = Type$$1.prototype;
    v2885.isClassInstance = v1129;
    var v2886 = Type$$1.prototype;
    v2886.getInstanceType = v1130;
    var v2887 = Type$$1.prototype;
    v2887.hasImplementation = v1131;
    var v2888 = Type$$1.prototype;
    v2888.setHasImplementation = v1132;
    var v2889 = Type$$1.prototype;
    v2889.isDouble = v1133;
    var v2890 = Type$$1.prototype;
    v2890.isString = v1134;
    var v2891 = Type$$1.prototype;
    v2891.isBoolean = v1135;
    var v2892 = Type$$1.prototype;
    v2892.isNull = v1136;
    var v2893 = Type$$1.prototype;
    v2893.getTypeName = v1137;
    var v2894 = Type$$1.prototype;
    v2894.getScopedTypeName = v1138;
    var v2895 = Type$$1.prototype;
    v2895.getScopedTypeNameEx = v1139;
    var v2896 = Type$$1.prototype;
    v2896.callCount = v1140;
    var v2897 = Type$$1.prototype;
    v2897.getMemberTypeName = v1141;
    var v2898 = Type$$1.prototype;
    v2898.getMemberTypeNameEx = v1143;
    var v2899 = Type$$1.prototype;
    v2899.checkDecl = v1144;
    var v2900 = Type$$1.prototype;
    v2900.getMemberScope = v1145;
    var v2901 = Type$$1.prototype;
    v2901.isReferenceType = v1146;
    var v2902 = Type$$1.prototype;
    v2902.specializeType = v1151;
    var v2903 = Type$$1.prototype;
    v2903.hasBase = v1152;
    var v2904 = Type$$1.prototype;
    v2904.mergeOrdered = v1153;
    var v2905 = Type$$1.prototype;
    v2905.isModuleType = v1154;
    var v2906 = Type$$1.prototype;
    v2906.hasMembers = v1155;
    var v2907 = Type$$1.prototype;
    v2907.getAllEnclosedTypes = v1156;
    var v2908 = Type$$1.prototype;
    v2908.getAllAmbientEnclosedTypes = v1157;
    var v2909 = Type$$1.prototype;
    v2909.getPublicEnclosedTypes = v1158;
    var v2910 = Type$$1.prototype;
    v2910.getpublicAmbientEnclosedTypes = v1159;
    var v2911 = Type$$1.prototype;
    v2911.getDocComments = v1160;
    return Type$$1
  }
  function v1124(_super$$66) {
    function v1123(entries) {
      var i$$113 = 0;
      var v13103 = entries.length;
      var v2914 = i$$113 < v13103;
      for(;v2914;) {
        var v2912 = this.entries;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v2913 = entries[i$$113]
        }
        JAMScript.call(v2912.push, v2912, [v2913]);
        i$$113 = i$$113 + 1;
        var v13104 = entries.length;
        v2914 = i$$113 < v13104
      }
      return
    }
    function v1122(entry$$2) {
      var v2915 = this.entries;
      JAMScript.call(v2915.push, v2915, [entry$$2]);
      return
    }
    function v1121() {
      return true
    }
    function MemberNameArray$$1() {
      JAMScript.call(_super$$66.apply, _super$$66, [this, arguments]);
      this.delim = "";
      this.entries = [];
      return
    }
    JAMScript.call(__extends, null, [MemberNameArray$$1, _super$$66]);
    var v2916 = MemberNameArray$$1.prototype;
    v2916.isArray = v1121;
    var v2917 = MemberNameArray$$1.prototype;
    v2917.add = v1122;
    var v2918 = MemberNameArray$$1.prototype;
    v2918.addAll = v1123;
    return MemberNameArray$$1
  }
  function v1120(_super$$65) {
    function v1119() {
      return true
    }
    function MemberNameString$$1(text$$25) {
      JAMScript.call(_super$$65.call, _super$$65, [this]);
      this.text = text$$25;
      return
    }
    JAMScript.call(__extends, null, [MemberNameString$$1, _super$$65]);
    var v2919 = MemberNameString$$1.prototype;
    v2919.isString = v1119;
    return MemberNameString$$1
  }
  function v1118() {
    function create(arg1, arg2, arg3) {
      var v13105 = typeof arg1;
      var v2921 = v13105 == "string";
      if(v2921) {
        return JAMScript.new(MemberNameString, [arg1])
      }else {
        var result$$32 = JAMScript.new(MemberNameArray, []);
        if(arg2) {
          result$$32.prefix = arg2
        }
        if(arg3) {
          result$$32.suffix = arg3
        }
        var v2920 = result$$32.entries;
        JAMScript.call(v2920.push, v2920, [arg1]);
        return result$$32
      }
      return
    }
    function memberNameToString(memberName$$3) {
      var result$$31 = memberName$$3.prefix;
      var v2923 = JAMScript.call(memberName$$3.isString, memberName$$3, []);
      if(v2923) {
        var v13106 = memberName$$3.text;
        result$$31 = result$$31 + v13106
      }else {
        var ar = memberName$$3;
        var index$$61 = 0;
        var v19048 = ar.entries;
        var v13107 = v19048.length;
        var v2922 = index$$61 < v13107;
        for(;v2922;) {
          var v22971 = ar.entries;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19049 = v22971[index$$61]
          }
          var v13108 = JAMScript.call(MemberName$$1.memberNameToString, MemberName$$1, [v19049]);
          result$$31 = result$$31 + v13108;
          var v13109 = ar.delim;
          result$$31 = result$$31 + v13109;
          index$$61 = index$$61 + 1;
          var v19050 = ar.entries;
          var v13110 = v19050.length;
          v2922 = index$$61 < v13110
        }
      }
      var v13111 = memberName$$3.suffix;
      result$$31 = result$$31 + v13111;
      return result$$31
    }
    function v1117() {
      return JAMScript.call(MemberName$$1.memberNameToString, MemberName$$1, [this])
    }
    function v1116() {
      return false
    }
    function v1115() {
      return false
    }
    function MemberName$$1() {
      this.prefix = "";
      this.suffix = "";
      return
    }
    var v2924 = MemberName$$1.prototype;
    v2924.isString = v1115;
    var v2925 = MemberName$$1.prototype;
    v2925.isArray = v1116;
    var v2926 = MemberName$$1.prototype;
    v2926.toString = v1117;
    MemberName$$1.memberNameToString = memberNameToString;
    MemberName$$1.create = create;
    return MemberName$$1
  }
  function v1114(Primitive$$1) {
    Primitive$$1._map = [];
    Primitive$$1.None = 0;
    Primitive$$1.Void = 1;
    Primitive$$1.Double = 2;
    Primitive$$1.String = 4;
    Primitive$$1.Boolean = 8;
    Primitive$$1.Any = 16;
    Primitive$$1.Null = 32;
    Primitive$$1.Undefined = 64;
    return
  }
  function getTypeLink(ast$$116, checker$$18, autoVar) {
    var result$$30 = JAMScript.new(TypeLink, []);
    result$$30.ast = ast$$116;
    var v13112 = ast$$116 == null;
    if(v13112) {
      v13112 = autoVar
    }
    var v2927 = v13112;
    if(v2927) {
      result$$30.type = checker$$18.anyType
    }else {
      result$$30.type = null
    }
    return result$$30
  }
  var v13113 = TypeScript$$26.Primitive;
  var v19051 = !v13113;
  if(v19051) {
    v13113 = TypeScript$$26.Primitive = {}
  }
  var v2928 = v13113;
  v1114(v2928);
  var Primitive = TypeScript$$26.Primitive;
  var MemberName = v1118();
  TypeScript$$26.MemberName = MemberName;
  var MemberNameString = v1120(MemberName);
  TypeScript$$26.MemberNameString = MemberNameString;
  var MemberNameArray = v1124(MemberName);
  TypeScript$$26.MemberNameArray = MemberNameArray;
  var currentTypeID = -1;
  var Type = v1161();
  TypeScript$$26.Type = Type;
  var ModuleType = v1170(Type);
  TypeScript$$26.ModuleType = ModuleType;
  var TypeLink = v1171();
  TypeScript$$26.TypeLink = TypeLink;
  TypeScript$$26.getTypeLink = getTypeLink;
  return
}
function v1113(TypeScript$$25) {
  function v1112() {
    function v1111(enclosingScopeContext$$2) {
      function preFindMemberScopeFullAstFuzy(ast$$115, parent$$69, walker$$53) {
        var v2931 = JAMScript.call(TypeScript$$25.isValidAstNode, TypeScript$$25, [ast$$115]);
        if(v2931) {
          var v19052 = ast$$115.flags;
          var v13114 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19052, matchFlag$$2]);
          if(v13114) {
            var v22972 = ast$$115.minChar;
            var v19053 = v22972 < pos$$7;
            if(v19053) {
              var v22973 = ast$$115.limChar;
              v19053 = pos$$7 <= v22973
            }
            v13114 = v19053
          }
          var v2929 = v13114;
          if(v2929) {
            astResult = ast$$115
          }
          var v2930 = walker$$53.options;
          var v19054 = ast$$115.minChar;
          var v13115 = v19054 <= pos$$7;
          if(v13115) {
            var v19055 = ast$$115.limChar;
            v13115 = pos$$7 <= v19055
          }
          v2930.goChildren = v13115
        }
        return ast$$115
      }
      function preFindMemberScopeFullAst(ast$$114, parent$$68, walker$$52) {
        var v2935 = JAMScript.call(TypeScript$$25.isValidAstNode, TypeScript$$25, [ast$$114]);
        if(v2935) {
          var v19056 = ast$$114.flags;
          var v13116 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19056, matchFlag$$2]);
          if(v13116) {
            var v22974 = ast$$114.limChar;
            var v19057 = pos$$7 == v22974;
            var v22977 = !v19057;
            if(v22977) {
              var v22975 = pos$$7 - 1;
              var v22976 = ast$$114.limChar;
              v19057 = v22975 == v22976
            }
            v13116 = v19057
          }
          var v2933 = v13116;
          if(v2933) {
            astResult = ast$$114;
            var v2932 = walker$$52.options;
            JAMScript.call(v2932.stopWalk, v2932, [])
          }
          var v2934 = walker$$52.options;
          var v19058 = ast$$114.minChar;
          var v13117 = v19058 <= pos$$7;
          if(v13117) {
            var v19059 = ast$$114.limChar;
            v13117 = pos$$7 <= v19059
          }
          v2934.goChildren = v13117
        }
        return ast$$114
      }
      var v2936 = TypeScript$$25.ASTFlags;
      var matchFlag$$2 = v2936.DotLHS;
      var pos$$7 = enclosingScopeContext$$2.pos;
      var astResult = null;
      var v2937 = JAMScript.call(TypeScript$$25.getAstWalkerFactory, TypeScript$$25, []);
      var v2938 = enclosingScopeContext$$2.script;
      JAMScript.call(v2937.walk, v2937, [v2938, preFindMemberScopeFullAst]);
      var v2941 = astResult == null;
      if(v2941) {
        var v2939 = JAMScript.call(TypeScript$$25.getAstWalkerFactory, TypeScript$$25, []);
        var v2940 = enclosingScopeContext$$2.script;
        JAMScript.call(v2939.walk, v2939, [v2940, preFindMemberScopeFullAstFuzy])
      }
      var v13118 = astResult;
      if(v13118) {
        var v19060 = enclosingScopeContext$$2.enclosingClassDecl;
        if(v19060) {
          var v22978 = astResult.type;
          var v25906 = enclosingScopeContext$$2.enclosingClassDecl;
          var v24966 = v25906.type;
          var v22979 = v24966.instanceType;
          v19060 = v22978 == v22979
        }
        v13118 = v19060
      }
      var v2942 = v13118;
      if(v2942) {
        enclosingScopeContext$$2.publicsOnly = false
      }
      var v13119 = astResult;
      if(v13119) {
        v13119 = astResult.type
      }
      var v2944 = v13119;
      if(v2944) {
        var v2943 = astResult.type;
        return JAMScript.call(v2943.getMemberScope, v2943, [this])
      }else {
        return null
      }
      return
    }
    function v1110(enclosingScopeContext$$1) {
      var v13120 = TypeScript$$25.ASTFlags;
      var v2945 = v13120.DotLHS;
      return JAMScript.call(this.findMemberScope, this, [enclosingScopeContext$$1, v2945])
    }
    function v1109(enclosingScopeContext, matchFlag$$1) {
      var enclosingScope$$1 = JAMScript.call(enclosingScopeContext.getScope, enclosingScopeContext, []);
      var v2946 = enclosingScopeContext.pos;
      var v13121 = enclosingScopeContext.scopeStartAST;
      var v2947 = v13121.minChar;
      var pos$$6 = v2946 - v2947;
      var scriptFragment = JAMScript.call(enclosingScopeContext.getScriptFragment, enclosingScopeContext, []);
      var v2948 = TypeScript$$25.MemberScopeContext;
      var memContext = JAMScript.new(v2948, [this, pos$$6, matchFlag$$1]);
      memContext.scope = enclosingScope$$1;
      var v13122 = scriptFragment.nodeType;
      var v19061 = TypeScript$$25.NodeType;
      var v13123 = v19061.Name;
      var v2955 = v13122 == v13123;
      if(v2955) {
        var v2949 = scriptFragment.type;
        return JAMScript.call(v2949.getMemberScope, v2949, [this])
      }else {
        var v2950 = JAMScript.call(TypeScript$$25.getAstWalkerFactory, TypeScript$$25, []);
        var v2951 = TypeScript$$25.preFindMemberScope;
        JAMScript.call(v2950.walk, v2950, [scriptFragment, v2951, null, null, memContext]);
        var v13124 = memContext.ast;
        if(v13124) {
          var v19062 = enclosingScopeContext.enclosingClassDecl;
          if(v19062) {
            var v24967 = memContext.ast;
            var v22980 = v24967.type;
            var v25907 = enclosingScopeContext.enclosingClassDecl;
            var v24968 = v25907.type;
            var v22981 = v24968.instanceType;
            v19062 = v22980 == v22981
          }
          v13124 = v19062
        }
        var v2952 = v13124;
        if(v2952) {
          enclosingScopeContext.publicsOnly = false
        }
        var v2954 = memContext.type;
        if(v2954) {
          var v2953 = memContext.type;
          return JAMScript.call(v2953.getMemberScope, v2953, [this])
        }else {
          return null
        }
      }
      return
    }
    function v1108(ast$$113) {
      var script$$17 = ast$$113;
      var v2956 = this.checker;
      v2956.locationInfo = script$$17.locationInfo;
      var v13125 = this.checker;
      var v2957 = v13125.gloMod;
      var v2958 = this.globalScope;
      var globalChain$$1 = JAMScript.new(ScopeChain, [v2957, null, v2958]);
      var v2959 = TypeScript$$25.AssignScopeContext;
      var v19063 = this.checker;
      var v13126 = v19063.currentModDecl;
      var v2960 = [v13126];
      var context$$64 = JAMScript.new(v2959, [globalChain$$1, this, v2960]);
      var v2961 = JAMScript.call(TypeScript$$25.getAstWalkerFactory, TypeScript$$25, []);
      var v2962 = TypeScript$$25.preAssignScopes;
      var v2963 = TypeScript$$25.postAssignScopes;
      JAMScript.call(v2961.walk, v2961, [ast$$113, v2962, v2963, null, context$$64]);
      return
    }
    function v1107(ast$$112) {
      var callEx$$5 = ast$$112;
      var v22982 = this.checker;
      var v19064 = v22982.styleSettings;
      var v13127 = v19064.newMustBeUsed;
      if(v13127) {
        var v19065 = ast$$112.nodeType;
        var v22983 = TypeScript$$25.NodeType;
        var v19066 = v22983.New;
        v13127 = v19065 == v19066
      }
      var v2969 = v13127;
      if(v2969) {
        var v13128 = ast$$112.flags;
        var v19067 = TypeScript$$25.ASTFlags;
        var v13129 = v19067.IsStatement;
        var v2965 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13128, v13129]);
        if(v2965) {
          var v13130 = this.checker;
          var v2964 = v13130.errorReporter;
          JAMScript.call(v2964.styleError, v2964, [ast$$112, "use of new expression as a statement"])
        }
      }else {
        var v24969 = this.checker;
        var v22984 = v24969.styleSettings;
        var v19068 = v22984.evalOK;
        var v13131 = !v19068;
        if(v13131) {
          var v19069 = ast$$112.nodeType;
          var v22985 = TypeScript$$25.NodeType;
          var v19070 = v22985.Call;
          v13131 = v19069 == v19070
        }
        var v2968 = v13131;
        if(v2968) {
          var v22986 = callEx$$5.target;
          var v19071 = v22986.nodeType;
          var v22987 = TypeScript$$25.NodeType;
          var v19072 = v22987.Name;
          var v13132 = v19071 == v19072;
          if(v13132) {
            var v22988 = callEx$$5.target;
            var v19073 = v22988.text;
            v13132 = v19073 == "eval"
          }
          var v2967 = v13132;
          if(v2967) {
            var v13133 = this.checker;
            var v2966 = v13133.errorReporter;
            JAMScript.call(v2966.styleError, v2966, [callEx$$5, "eval not permitted"])
          }
        }
      }
      var v19074 = callEx$$5.target;
      var v13134 = v19074.nodeType;
      var v19075 = TypeScript$$25.NodeType;
      var v13135 = v19075.FuncDecl;
      var v2971 = v13134 == v13135;
      if(v2971) {
        var v2970 = callEx$$5.target;
        v2970.isInlineCallLiteral = true
      }
      var prevInSuperCall = this.inSuperCall;
      var v19076 = callEx$$5.target;
      var v13136 = v19076.nodeType;
      var v19077 = TypeScript$$25.NodeType;
      var v13137 = v19077.Super;
      var v2972 = v13136 == v13137;
      if(v2972) {
        this.inSuperCall = true
      }
      var v2973 = callEx$$5;
      var v13138 = callEx$$5.target;
      var v26956 = JAMScript.call(this.typeCheck, this, [v13138]);
      v2973.target = v26956;
      var v2974 = callEx$$5.arguments;
      JAMScript.call(this.preTypeCheckCallArgs, this, [v2974]);
      var target$$48 = callEx$$5.target;
      var v19078 = target$$48.type;
      var v13139 = v19078 == null;
      var v19080 = !v13139;
      if(v19080) {
        var v22989 = target$$48.type;
        var v22990 = this.anyType;
        var v19079 = v22989 == v22990;
        var v22992 = !v19079;
        if(v22992) {
          var v22991 = this.functionInterfaceType;
          if(v22991) {
            var v24970 = target$$48.type;
            var v24971 = this.functionInterfaceType;
            v22991 = v24970 == v24971
          }
          v19079 = v22991
        }
        v13139 = v19079
      }
      var v2986 = v13139;
      if(v2986) {
        callEx$$5.type = this.anyType
      }else {
        var fnType$$1 = target$$48.type;
        var v2985 = fnType$$1.call;
        if(v2985) {
          var v2975 = fnType$$1.call;
          var signature$$14 = JAMScript.call(this.resolveOverload, this, [callEx$$5, v2975]);
          var v2977 = signature$$14 == null;
          if(v2977) {
            callEx$$5.type = this.anyType
          }else {
            var v2976 = signature$$14.returnType;
            callEx$$5.type = v2976.type;
            callEx$$5.signature = signature$$14
          }
        }else {
          var v22993 = callEx$$5.target;
          var v19081 = v22993.nodeType;
          var v22994 = TypeScript$$25.NodeType;
          var v19082 = v22994.Super;
          var v13140 = v19081 == v19082;
          if(v13140) {
            var v19083 = this.thisFnc;
            if(v19083) {
              var v24972 = this.thisFnc;
              var v22995 = v24972.isConstructor;
              if(v22995) {
                var v25908 = this.thisFnc;
                var v24973 = v25908.fncFlags;
                var v25909 = TypeScript$$25.FncFlags;
                var v24974 = v25909.ClassMethod;
                v22995 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v24973, v24974])
              }
              v19083 = v22995
            }
            v13140 = v19083
          }
          var v2984 = v13140;
          if(v2984) {
            var v2978;
            var v22996 = fnType$$1.symbol;
            var v19084 = v22996.type;
            var v13142 = v19084.construct;
            if(v13142) {
              var v22997 = fnType$$1.symbol;
              var v19085 = v22997.type;
              var v13141 = v19085.construct;
              v2978 = JAMScript.call(this.resolveOverload, this, [callEx$$5, v13141])
            }else {
              v2978 = null
            }
            signature$$14 = v2978;
            var v2980 = signature$$14 == null;
            if(v2980) {
              callEx$$5.type = this.anyType
            }else {
              var v13143 = callEx$$5;
              var v19086 = callEx$$5.flags;
              var v22998 = TypeScript$$25.ASTFlags;
              var v19087 = v22998.ClassBaseConstructorCall;
              v13143.flags = v19086 | v19087;
              var v2979 = signature$$14.returnType;
              callEx$$5.type = v2979.type;
              callEx$$5.signature = signature$$14
            }
          }else {
            callEx$$5.type = this.anyType;
            var v13144 = this.checker;
            var v2981 = v13144.errorReporter;
            var v2982 = callEx$$5.nodeType;
            var v2983 = this.scope;
            JAMScript.call(v2981.invalidCall, v2981, [callEx$$5, v2982, v2983])
          }
        }
      }
      JAMScript.call(this.postTypeCheckCallArgs, this, [callEx$$5]);
      this.inSuperCall = prevInSuperCall;
      return callEx$$5
    }
    function v1106(callEx$$4) {
      var acceptedTargetType = false;
      var i$$112 = 0;
      var v13145 = callEx$$4.target;
      if(v13145) {
        var v22999 = callEx$$4.target;
        var v19088 = v22999.type;
        if(v19088) {
          var v23000 = callEx$$4.signature;
          if(v23000) {
            v23000 = callEx$$4.arguments
          }
          v19088 = v23000
        }
        v13145 = v19088
      }
      var v3006 = v13145;
      if(v3006) {
        var sig$$4 = callEx$$4.signature;
        var v13146 = sig$$4;
        if(v13146) {
          var v24975 = callEx$$4.arguments;
          var v23001 = v24975.members;
          var v19089 = v23001.length;
          var v19090 = sig$$4.nonOptionalParameterCount;
          v13146 = v19089 >= v19090
        }
        var v3005 = v13146;
        if(v3005) {
          acceptedTargetType = true;
          var targetType$$8 = null;
          var v2987;
          var v13149 = sig$$4.hasVariableArgList;
          if(v13149) {
            var v19091 = sig$$4.parameters;
            var v13147 = v19091.length;
            v2987 = v13147 - 1
          }else {
            var v13148 = sig$$4.parameters;
            v2987 = v13148.length
          }
          var nonVarArgFormalParamLength = v2987;
          var v2988;
          var v24976 = callEx$$4.arguments;
          var v23002 = v24976.members;
          var v19092 = v23002.length;
          var v13151 = v19092 < nonVarArgFormalParamLength;
          if(v13151) {
            var v19093 = callEx$$4.arguments;
            var v13150 = v19093.members;
            v2988 = v13150.length
          }else {
            v2988 = nonVarArgFormalParamLength
          }
          var nonVarArgActualParamLength = v2988;
          i$$112 = 0;
          var v2995 = i$$112 < nonVarArgActualParamLength;
          for(;v2995;) {
            var v13152 = sig$$4.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v2989 = v13152[i$$112]
            }
            targetType$$8 = JAMScript.call(v2989.getType, v2989, []);
            var v23003 = callEx$$4.arguments;
            var v19094 = v23003.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v13153 = v19094[i$$112]
            }
            var v2994 = v13153.nodeType;
            switch(v2994) {
              case TypeScript$$25.NodeType.FuncDecl:
              ;
              case TypeScript$$25.NodeType.ObjectLit:
              ;
              case TypeScript$$25.NodeType.ArrayLit:
                var v2990 = this.checker;
                var v13154 = this.checker;
                var v2991 = JAMScript.call(v13154.inProvisionalTypecheckMode, v13154, []);
                var v24977 = sig$$4.parameters;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v23004 = v24977[i$$112]
                }
                var v19095 = v23004.declAST;
                var v13155 = v19095.isParenthesized;
                var v2992 = !v13155;
                var v19096 = callEx$$4.arguments;
                var v13156 = v19096.members;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v2993 = v13156[i$$112]
                }
                JAMScript.call(v2990.typeCheckWithContextualType, v2990, [targetType$$8, v2991, v2992, v2993])
            }
            i$$112 = i$$112 + 1;
            v2995 = i$$112 < nonVarArgActualParamLength
          }
          var v3004 = sig$$4.hasVariableArgList;
          if(v3004) {
            var v2996 = sig$$4.nonOptionalParameterCount;
            var varArgParamIndex = v2996 - 1;
            var v13157 = sig$$4.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v2997 = v13157[varArgParamIndex]
            }
            targetType$$8 = JAMScript.call(v2997.getType, v2997, []);
            if(targetType$$8) {
              targetType$$8 = targetType$$8.elementType
            }
            var v23005 = sig$$4.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v19097 = v23005[varArgParamIndex]
            }
            var v13158 = v19097.declAST;
            var v2998 = v13158.isParenthesized;
            var isParenthesized = !v2998;
            i$$112 = nonVarArgActualParamLength;
            var v23006 = callEx$$4.arguments;
            var v19098 = v23006.members;
            var v13159 = v19098.length;
            var v3003 = i$$112 < v13159;
            for(;v3003;) {
              var v23007 = callEx$$4.arguments;
              var v19099 = v23007.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v13160 = v19099[i$$112]
              }
              var v3002 = v13160.nodeType;
              switch(v3002) {
                case TypeScript$$25.NodeType.FuncDecl:
                ;
                case TypeScript$$25.NodeType.ObjectLit:
                ;
                case TypeScript$$25.NodeType.ArrayLit:
                  var v2999 = this.checker;
                  var v13161 = this.checker;
                  var v3000 = JAMScript.call(v13161.inProvisionalTypecheckMode, v13161, []);
                  var v19100 = callEx$$4.arguments;
                  var v13162 = v19100.members;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v3001 = v13162[i$$112]
                  }
                  JAMScript.call(v2999.typeCheckWithContextualType, v2999, [targetType$$8, v3000, isParenthesized, v3001])
              }
              i$$112 = i$$112 + 1;
              var v23008 = callEx$$4.arguments;
              var v19101 = v23008.members;
              var v13163 = v19101.length;
              v3003 = i$$112 < v13163
            }
          }
        }
      }
      var v13164 = !acceptedTargetType;
      if(v13164) {
        v13164 = callEx$$4.arguments
      }
      var v3011 = v13164;
      if(v3011) {
        var v3007 = this.checker;
        JAMScript.call(v3007.killCurrentContextualType, v3007, []);
        i$$112 = 0;
        var v23009 = callEx$$4.arguments;
        var v19102 = v23009.members;
        var v13165 = v19102.length;
        var v3010 = i$$112 < v13165;
        for(;v3010;) {
          var v23010 = callEx$$4.arguments;
          var v19103 = v23010.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v13166 = v19103[i$$112]
          }
          var v3009 = v13166.nodeType;
          switch(v3009) {
            case TypeScript$$25.NodeType.FuncDecl:
            ;
            case TypeScript$$25.NodeType.ObjectLit:
            ;
            case TypeScript$$25.NodeType.ArrayLit:
              var v19104 = callEx$$4.arguments;
              var v13167 = v19104.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v3008 = v13167[i$$112]
              }
              JAMScript.call(this.typeCheck, this, [v3008]);
            default:
          }
          i$$112 = i$$112 + 1;
          var v23011 = callEx$$4.arguments;
          var v19105 = v23011.members;
          var v13168 = v19105.length;
          v3010 = i$$112 < v13168
        }
      }
      return
    }
    function v1105(args$$16) {
      var v3012 = !args$$16;
      if(v3012) {
        return
      }
      var i$$111 = 0;
      var v19106 = args$$16.members;
      var v13169 = v19106.length;
      var v3015 = i$$111 < v13169;
      for(;v3015;) {
        var v19107 = args$$16.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v13170 = v19107[i$$111]
        }
        var v3014 = v13170.nodeType;
        switch(v3014) {
          case TypeScript$$25.NodeType.FuncDecl:
          ;
          case TypeScript$$25.NodeType.ObjectLit:
          ;
          case TypeScript$$25.NodeType.ArrayLit:
            i$$111 = i$$111 + 1;
            var v19108 = args$$16.members;
            var v13171 = v19108.length;
            v3015 = i$$111 < v13171;
            continue;
          default:
            var v13172 = args$$16.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v3013 = v13172[i$$111]
            }
            JAMScript.call(this.typeCheck, this, [v3013])
        }
        i$$111 = i$$111 + 1;
        var v19109 = args$$16.members;
        var v13173 = v19109.length;
        v3015 = i$$111 < v13173
      }
      return
    }
    function v1104(ast$$111) {
      var callEx$$3 = ast$$111;
      var v3016 = callEx$$3;
      var v13174 = callEx$$3.target;
      var v26957 = JAMScript.call(this.typeCheck, this, [v13174]);
      v3016.target = v26957;
      var target$$47 = callEx$$3.target;
      var v19110 = target$$47.type;
      var v13175 = v19110.construct;
      var v19112 = !v13175;
      if(v19112) {
        var v19111 = target$$47.type;
        v13175 = v19111.call
      }
      var v3019 = v13175;
      if(v3019) {
        var v3017 = callEx$$3.arguments;
        JAMScript.call(this.preTypeCheckCallArgs, this, [v3017])
      }else {
        var v3018 = callEx$$3;
        var v13176 = callEx$$3.arguments;
        var v26958 = JAMScript.call(this.typeCheck, this, [v13176]);
        v3018.arguments = v26958
      }
      var v13177 = target$$47.type;
      var v13178 = this.anyType;
      var v3036 = v13177 == v13178;
      if(v3036) {
        callEx$$3.type = this.anyType;
        var v3020 = callEx$$3;
        var v13179 = callEx$$3.arguments;
        var v26959 = JAMScript.call(this.typeCheck, this, [v13179]);
        v3020.arguments = v26959
      }else {
        var v13180 = target$$47.type;
        var v3035 = v13180.construct;
        if(v3035) {
          var v13181 = target$$47.type;
          var v3021 = v13181.construct;
          var signature$$13 = JAMScript.call(this.resolveOverload, this, [callEx$$3, v3021]);
          var v3024 = signature$$13 == null;
          if(v3024) {
            callEx$$3.type = this.anyType
          }else {
            var v19113 = signature$$13.returnType;
            var v13182 = v19113.type;
            var v13183 = this.voidType;
            var v3023 = v13182 == v13183;
            if(v3023) {
              callEx$$3.type = this.anyType;
              callEx$$3.signature = signature$$13
            }else {
              var v3022 = signature$$13.returnType;
              callEx$$3.type = v3022.type;
              callEx$$3.signature = signature$$13
            }
          }
        }else {
          var v13184 = target$$47.type;
          var v3034 = v13184.call;
          if(v3034) {
            var v13185 = target$$47.type;
            var v3025 = v13185.call;
            signature$$13 = JAMScript.call(this.resolveOverload, this, [callEx$$3, v3025]);
            var v3029 = signature$$13 == null;
            if(v3029) {
              callEx$$3.type = this.anyType
            }else {
              var v23012 = signature$$13.returnType;
              var v19114 = v23012.type;
              var v19115 = this.voidType;
              var v13186 = v19114 == v19115;
              var v19118 = !v13186;
              if(v19118) {
                var v23013 = signature$$13.returnType;
                var v19116 = v23013.type;
                var v19117 = this.anyType;
                v13186 = v19116 == v19117
              }
              var v3028 = v13186;
              if(v3028) {
                callEx$$3.type = this.anyType;
                callEx$$3.signature = signature$$13
              }else {
                var v13187 = this.checker;
                var v3026 = v13187.errorReporter;
                var v3027 = callEx$$3.target;
                JAMScript.call(v3026.simpleError, v3026, [v3027, "new expression only valid on constructors"])
              }
            }
          }else {
            var v13188 = target$$47.type;
            var v3033 = v13188.elementType;
            if(v3033) {
              callEx$$3.type = target$$47.type
            }else {
              var v13189 = this.checker;
              var v3030 = v13189.errorReporter;
              var v3031 = callEx$$3.nodeType;
              var v3032 = this.scope;
              JAMScript.call(v3030.invalidCall, v3030, [callEx$$3, v3031, v3032]);
              callEx$$3.type = this.anyType
            }
          }
        }
      }
      JAMScript.call(this.postTypeCheckCallArgs, this, [callEx$$3]);
      return callEx$$3
    }
    function v1103(application, group$$1) {
      var v3037 = this.resolutionDataCache;
      var rd$$2 = JAMScript.call(v3037.getResolutionData, v3037, []);
      var actuals$$1 = rd$$2.actuals;
      var exactCandidates$$1 = rd$$2.exactCandidates;
      var conversionCandidates$$1 = rd$$2.conversionCandidates;
      var candidate = null;
      var v13190 = group$$1.signatures;
      var v3038 = v13190.length;
      var hasOverloads = v3038 > 1;
      var v3039 = TypeScript$$25.TypeComparisonInfo;
      var comparisonInfo$$16 = JAMScript.new(v3039, []);
      var args$$15 = null;
      var target$$46 = null;
      var v19119 = application.nodeType;
      var v23014 = TypeScript$$25.NodeType;
      var v19120 = v23014.Call;
      var v13191 = v19119 == v19120;
      var v19123 = !v13191;
      if(v19123) {
        var v19121 = application.nodeType;
        var v23015 = TypeScript$$25.NodeType;
        var v19122 = v23015.New;
        v13191 = v19121 == v19122
      }
      var v3048 = v13191;
      if(v3048) {
        var callEx$$2 = application;
        args$$15 = callEx$$2.arguments;
        target$$46 = callEx$$2.target;
        var v3043 = callEx$$2.arguments;
        if(v3043) {
          var v13192 = callEx$$2.arguments;
          var v3040 = v13192.members;
          var len$$54 = v3040.length;
          var i$$110 = 0;
          var v3042 = i$$110 < len$$54;
          for(;v3042;) {
            var v3041 = i$$110;
            var v23016 = callEx$$2.arguments;
            var v19124 = v23016.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v13193 = v19124[i$$110]
            }
            actuals$$1[v3041] = v13193.type;
            i$$110 = i$$110 + 1;
            v3042 = i$$110 < len$$54
          }
        }
      }else {
        var v13194 = application.nodeType;
        var v19125 = TypeScript$$25.NodeType;
        var v13195 = v19125.Index;
        var v3047 = v13194 == v13195;
        if(v3047) {
          var binExp = application;
          target$$46 = binExp.operand1;
          var v3044 = TypeScript$$25.ASTList;
          args$$15 = JAMScript.new(v3044, []);
          var v3045 = args$$15.members;
          v3045[0] = binExp.operand2;
          var v3046 = binExp.operand2;
          actuals$$1[0] = v3046.type
        }
      }
      var j$$17 = 0;
      var v3049 = group$$1.signatures;
      var groupLen = v3049.length;
      var v3054 = j$$17 < groupLen;
      for(;v3054;) {
        var v3050 = group$$1.signatures;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var signature$$12 = v3050[j$$17]
        }
        var v13196 = hasOverloads;
        if(v13196) {
          var v23017 = group$$1.definitionSignature;
          var v19126 = signature$$12 == v23017;
          if(v19126) {
            var v24978 = this.checker;
            var v23018 = v24978.canCallDefinitionSignature;
            v19126 = !v23018
          }
          v13196 = v19126
        }
        var v3051 = v13196;
        if(v3051) {
          j$$17 = j$$17 + 1;
          v3054 = j$$17 < groupLen;
          continue
        }
        var v23019 = signature$$12.returnType;
        var v19127 = v23019.type;
        var v13197 = !v19127;
        if(v13197) {
          var v19128 = signature$$12.declAST;
          if(v19128) {
            var v23020 = signature$$12.typeCheckStatus;
            var v24979 = TypeScript$$25.TypeCheckStatus;
            var v23021 = v24979.Finished;
            v19128 = v23020 != v23021
          }
          v13197 = v19128
        }
        var v3053 = v13197;
        if(v3053) {
          var v3052 = signature$$12.declAST;
          JAMScript.call(this.typeCheckFunction, this, [v3052])
        }
        JAMScript.call(this.tryAddCandidates, this, [signature$$12, actuals$$1, exactCandidates$$1, conversionCandidates$$1, comparisonInfo$$16]);
        j$$17 = j$$17 + 1;
        v3054 = j$$17 < groupLen
      }
      var v13198 = exactCandidates$$1.length;
      var v3070 = v13198 == 0;
      if(v3070) {
        var v3055 = this.checker;
        var applicableCandidates = JAMScript.call(v3055.getApplicableSignatures, v3055, [conversionCandidates$$1, args$$15, comparisonInfo$$16]);
        var v13199 = applicableCandidates.length;
        var v3063 = v13199 > 0;
        if(v3063) {
          var v3056 = this.checker;
          var candidateInfo = JAMScript.call(v3056.findMostApplicableSignature, v3056, [applicableCandidates, args$$15]);
          var v3058 = candidateInfo.ambiguous;
          if(v3058) {
            var v13200 = this.checker;
            var v3057 = v13200.errorReporter;
            JAMScript.call(v3057.simpleError, v3057, [target$$46, "Ambiguous call expression - could not choose overload"])
          }
          candidate = candidateInfo.sig
        }else {
          var emsg$$3 = "Supplied parameters do not match any signature of call target";
          var v3062 = comparisonInfo$$16.message;
          if(v3062) {
            var v13201 = this.checker;
            var v3059 = v13201.errorReporter;
            var v13202 = emsg$$3 + ":\n\t";
            var v13203 = comparisonInfo$$16.message;
            var v3060 = v13202 + v13203;
            JAMScript.call(v3059.simpleError, v3059, [target$$46, v3060])
          }else {
            var v13204 = this.checker;
            var v3061 = v13204.errorReporter;
            JAMScript.call(v3061.simpleError, v3061, [target$$46, emsg$$3])
          }
        }
      }else {
        var v13205 = exactCandidates$$1.length;
        var v3069 = v13205 > 1;
        if(v3069) {
          var applicableSigs$$1 = [];
          i$$110 = 0;
          var v13206 = exactCandidates$$1.length;
          var v3065 = i$$110 < v13206;
          for(;v3065;) {
            var v3064 = i$$110;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v13207 = exactCandidates$$1[i$$110]
            }
            applicableSigs$$1[v3064] = {signature:v13207, hadProvisionalErrors:false};
            i$$110 = i$$110 + 1;
            var v13208 = exactCandidates$$1.length;
            v3065 = i$$110 < v13208
          }
          var v3066 = this.checker;
          candidateInfo = JAMScript.call(v3066.findMostApplicableSignature, v3066, [applicableSigs$$1, args$$15]);
          var v3068 = candidateInfo.ambiguous;
          if(v3068) {
            var v13209 = this.checker;
            var v3067 = v13209.errorReporter;
            JAMScript.call(v3067.simpleError, v3067, [target$$46, "Ambiguous call expression - could not choose overload"])
          }
          candidate = candidateInfo.sig
        }else {
          candidate = exactCandidates$$1[0]
        }
      }
      var v3071 = this.resolutionDataCache;
      JAMScript.call(v3071.returnResolutionData, v3071, [rd$$2]);
      return candidate
    }
    function v1102(signature$$11, actuals, exactCandidates, conversionCandidates, comparisonInfo$$15) {
      var lowerBound = signature$$11.nonOptionalParameterCount;
      var v3072 = signature$$11.parameters;
      var upperBound = v3072.length;
      var formalLen = lowerBound;
      var acceptable = false;
      var v19129 = actuals.length;
      var v13210 = v19129 >= lowerBound;
      if(v13210) {
        var v19130 = signature$$11.hasVariableArgList;
        var v23023 = !v19130;
        if(v23023) {
          var v23022 = actuals.length;
          v19130 = v23022 <= upperBound
        }
        v13210 = v19130
      }
      var v3074 = v13210;
      if(v3074) {
        var v3073;
        var v13212 = signature$$11.hasVariableArgList;
        if(v13212) {
          var v13211 = signature$$11.parameters;
          v3073 = v13211.length
        }else {
          v3073 = actuals.length
        }
        formalLen = v3073;
        acceptable = true
      }
      var repeatType = null;
      var v13213 = acceptable;
      var v19131 = !v13213;
      if(v19131) {
        v13213 = signature$$11.hasVariableArgList
      }
      var v3087 = v13213;
      if(v3087) {
        var v3077 = signature$$11.hasVariableArgList;
        if(v3077) {
          formalLen = formalLen - 1;
          var v23024 = signature$$11.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19132 = v23024[formalLen]
          }
          var v13214 = v19132.parameter;
          var v3075 = v13214.typeLink;
          repeatType = v3075.type;
          repeatType = repeatType.elementType;
          var v3076 = actuals.length;
          acceptable = v3076 >= formalLen
        }
        var len$$53 = actuals.length;
        var exact = acceptable;
        var convert = acceptable;
        var i$$109 = 0;
        var v3083 = i$$109 < len$$53;
        for(;v3083;) {
          var typeA;
          var v3079 = i$$109 < formalLen;
          if(v3079) {
            var v23025 = signature$$11.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v19133 = v23025[i$$109]
            }
            var v13215 = v19133.parameter;
            var v3078 = v13215.typeLink;
            typeA = v3078.type
          }else {
            typeA = repeatType
          }
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var typeB = actuals[i$$109]
          }
          var v13216 = !typeA;
          var v19135 = !v13216;
          if(v19135) {
            var v19134 = !typeB;
            var v23027 = !v19134;
            if(v23027) {
              var v24980 = this.checker;
              var v23026 = JAMScript.call(v24980.typesAreIdentical, v24980, [typeA, typeB]);
              v19134 = !v23026
            }
            v13216 = v19134
          }
          var v3080 = v13216;
          if(v3080) {
            exact = false
          }
          var v19136 = this.checker;
          var v13217 = JAMScript.call(v19136.sourceIsAssignableToTarget, v19136, [typeB, typeA, comparisonInfo$$15]);
          var v3081 = !v13217;
          if(v3081) {
            convert = false
          }
          var v13218 = exact || convert;
          var v3082 = !v13218;
          if(v3082) {
            break
          }
          i$$109 = i$$109 + 1;
          v3083 = i$$109 < len$$53
        }
        if(exact) {
          var v3084 = exactCandidates.length;
          JAMScript.set(exactCandidates, v3084, signature$$11)
        }else {
          var v13219 = convert;
          if(v13219) {
            var v19137 = exactCandidates.length;
            v13219 = v19137 == 0
          }
          var v3086 = v13219;
          if(v3086) {
            var v3085 = conversionCandidates.length;
            JAMScript.set(conversionCandidates, v3085, signature$$11)
          }
        }
      }
      return
    }
    function v1101(binex$$13) {
      var v3088 = binex$$13;
      var v13220 = binex$$13.operand1;
      var v26960 = JAMScript.call(this.typeCheck, this, [v13220]);
      v3088.operand1 = v26960;
      var v3089 = binex$$13;
      var v13221 = binex$$13.operand2;
      var v26961 = JAMScript.call(this.typeCheck, this, [v13221]);
      v3089.operand2 = v26961;
      var v3090 = binex$$13;
      var v13222 = binex$$13.operand2;
      v3090.type = v13222.type;
      return binex$$13
    }
    function v1100(binex$$12) {
      var v3091 = binex$$12;
      var v13223 = binex$$12.operand1;
      var v26962 = JAMScript.call(this.typeCheck, this, [v13223]);
      v3091.operand1 = v26962;
      var v3092 = binex$$12;
      var v13224 = binex$$12.operand2;
      var v26963 = JAMScript.call(this.typeCheck, this, [v13224]);
      v3092.operand2 = v26963;
      var v3093 = binex$$12.operand1;
      var leftType$$6 = v3093.type;
      var v3094 = binex$$12.operand2;
      var rightType$$5 = v3094.type;
      var v23028 = this.checker;
      var v19138 = v23028.anyType;
      var v13225 = leftType$$6 == v19138;
      var v19140 = !v13225;
      if(v19140) {
        var v23029 = this.checker;
        var v19139 = v23029.anyType;
        v13225 = rightType$$5 == v19139
      }
      var v3111 = v13225;
      if(v3111) {
        var v3095 = this.checker;
        binex$$12.type = v3095.anyType
      }else {
        var v19141 = this.checker;
        var v13226 = v19141.booleanType;
        var v3110 = leftType$$6 == v13226;
        if(v3110) {
          var v19142 = this.checker;
          var v13227 = v19142.booleanType;
          var v3098 = rightType$$5 == v13227;
          if(v3098) {
            var v3096 = this.checker;
            binex$$12.type = v3096.booleanType
          }else {
            var v3097 = this.checker;
            binex$$12.type = v3097.anyType
          }
        }else {
          var v19143 = this.checker;
          var v13228 = v19143.numberType;
          var v3109 = leftType$$6 == v13228;
          if(v3109) {
            var v19144 = this.checker;
            var v13229 = v19144.numberType;
            var v3101 = rightType$$5 == v13229;
            if(v3101) {
              var v3099 = this.checker;
              binex$$12.type = v3099.numberType
            }else {
              var v3100 = this.checker;
              binex$$12.type = v3100.anyType
            }
          }else {
            var v19145 = this.checker;
            var v13230 = v19145.stringType;
            var v3108 = leftType$$6 == v13230;
            if(v3108) {
              var v19146 = this.checker;
              var v13231 = v19146.stringType;
              var v3104 = rightType$$5 == v13231;
              if(v3104) {
                var v3102 = this.checker;
                binex$$12.type = v3102.stringType
              }else {
                var v3103 = this.checker;
                binex$$12.type = v3103.anyType
              }
            }else {
              var v13232 = this.checker;
              var v3107 = JAMScript.call(v13232.sourceIsSubtypeOfTarget, v13232, [leftType$$6, rightType$$5]);
              if(v3107) {
                binex$$12.type = rightType$$5
              }else {
                var v13233 = this.checker;
                var v3106 = JAMScript.call(v13233.sourceIsSubtypeOfTarget, v13233, [rightType$$5, leftType$$6]);
                if(v3106) {
                  binex$$12.type = leftType$$6
                }else {
                  var v3105 = this.checker;
                  binex$$12.type = v3105.anyType
                }
              }
            }
          }
        }
      }
      return binex$$12
    }
    function v1099(ast$$110) {
      var binex$$11 = ast$$110;
      var v3112 = binex$$11;
      var v13234 = binex$$11.operand1;
      var v26964 = JAMScript.call(this.typeCheck, this, [v13234]);
      v3112.operand1 = v26964;
      var v3113 = binex$$11;
      var v13235 = binex$$11.operand2;
      var v26965 = JAMScript.call(this.typeCheck, this, [v13235]);
      v3113.operand2 = v26965;
      var v3114 = binex$$11;
      var v13236 = binex$$11.operand2;
      v3114.type = v13236.type;
      return binex$$11
    }
    function v1098(ast$$109) {
      var binex$$10 = ast$$109;
      var v3115 = binex$$10;
      var v13237 = binex$$10.operand1;
      var v26966 = JAMScript.call(this.typeCheck, this, [v13237]);
      v3115.operand1 = v26966;
      var v3116 = binex$$10;
      var v13238 = binex$$10.operand2;
      var v26967 = JAMScript.call(this.typeCheck, this, [v13238]);
      v3116.operand2 = v26967;
      var v25910 = binex$$10.operand1;
      var v24981 = v25910.type;
      var v25911 = this.checker;
      var v24982 = v25911.anyType;
      var v23030 = v24981 == v24982;
      var v24986 = !v23030;
      if(v24986) {
        var v24983 = this.checker;
        var v25912 = binex$$10.operand1;
        var v24984 = v25912.type;
        var v24985 = this.objectInterfaceType;
        v23030 = JAMScript.call(v24983.sourceIsSubtypeOfTarget, v24983, [v24984, v24985])
      }
      var v19147 = v23030;
      if(v19147) {
        var v25913 = binex$$10.operand2;
        var v24987 = v25913.type;
        var v24988 = this.anyType;
        var v23031 = v24987 == v24988;
        var v24992 = !v23031;
        if(v24992) {
          var v24989 = this.checker;
          var v25914 = binex$$10.operand2;
          var v24990 = v25914.type;
          var v24991 = this.functionInterfaceType;
          v23031 = JAMScript.call(v24989.sourceIsSubtypeOfTarget, v24989, [v24990, v24991])
        }
        v19147 = v23031
      }
      var v13239 = v19147;
      var v3118 = !v13239;
      if(v3118) {
        var v13240 = this.checker;
        var v3117 = v13240.errorReporter;
        JAMScript.call(v3117.simpleError, v3117, [ast$$109, "The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type"])
      }
      binex$$10.type = this.booleanType;
      return binex$$10
    }
    function v1097(returnStmt$$1) {
      var v3144 = this.thisFnc;
      if(v3144) {
        var targetType$$7 = null;
        var v13241 = this.checker;
        var v3123 = JAMScript.call(v13241.hasTargetType, v13241, []);
        if(v3123) {
          var v3119 = this.checker;
          var tcContext = v3119.currentContextualTypeContext;
          var accessorType$$1 = tcContext.targetAccessorType;
          if(accessorType$$1) {
            targetType$$7 = accessorType$$1
          }else {
            var v13242 = this.checker;
            var v3120 = v13242.currentContextualTypeContext;
            var targetSig$$1 = v3120.targetSig;
            var v13243 = targetSig$$1;
            if(v13243) {
              var v23032 = targetSig$$1.returnType;
              var v19148 = v23032.type;
              var v19149 = this.voidType;
              v13243 = v19148 != v19149
            }
            var v3122 = v13243;
            if(v3122) {
              var v3121 = targetSig$$1.returnType;
              targetType$$7 = v3121.type
            }
          }
        }
        var v3143 = returnStmt$$1.returnExpression;
        if(v3143) {
          var v3124 = this.thisFnc;
          var v19150 = v3124.fncFlags;
          var v23033 = TypeScript$$25.FncFlags;
          var v19151 = v23033.HasReturnExpression;
          v3124.fncFlags = v19150 | v19151;
          var v13244 = targetType$$7 == null;
          if(v13244) {
            var v23034 = this.thisFnc;
            var v19152 = v23034.returnTypeAnnotation;
            if(v19152) {
              var v25915 = this.thisFnc;
              var v24993 = v25915.returnTypeAnnotation;
              var v23035 = v24993.type;
              if(v23035) {
                var v26414 = this.thisFnc;
                var v25916 = v26414.returnTypeAnnotation;
                var v24994 = v25916.type;
                var v24995 = this.voidType;
                v23035 = v24994 != v24995
              }
              v19152 = v23035
            }
            v13244 = v19152
          }
          var v3126 = v13244;
          if(v3126) {
            var v13245 = this.thisFnc;
            var v3125 = v13245.returnTypeAnnotation;
            targetType$$7 = v3125.type
          }
          var v3127 = this.checker;
          var v13246 = this.checker;
          var v3128 = JAMScript.call(v13246.inProvisionalTypecheckMode, v13246, []);
          var v3129 = targetType$$7 != null;
          var v3130 = returnStmt$$1.returnExpression;
          JAMScript.call(v3127.typeCheckWithContextualType, v3127, [targetType$$7, v3128, v3129, v3130]);
          var v3131;
          var v23036 = this.thisFnc;
          var v19153 = v23036.returnTypeAnnotation;
          if(v19153) {
            var v24996 = this.thisFnc;
            var v23037 = v24996.returnTypeAnnotation;
            v19153 = v23037.type
          }
          var v13248 = v19153;
          if(v13248) {
            var v19154 = this.thisFnc;
            var v13247 = v19154.returnTypeAnnotation;
            v3131 = v13247.type
          }else {
            v3131 = targetType$$7
          }
          var expectedReturnType = v3131;
          if(expectedReturnType) {
            var v19155 = this.voidType;
            var v13249 = expectedReturnType == v19155;
            if(v13249) {
              var v23038 = returnStmt$$1.returnExpression;
              var v19156 = v23038.type;
              var v19157 = this.voidType;
              v13249 = v19156 != v19157
            }
            var v3135 = v13249;
            if(v3135) {
              var v13250 = this.checker;
              var v3132 = v13250.errorReporter;
              JAMScript.call(v3132.simpleError, v3132, [returnStmt$$1, "Return with value expression in void function"]);
              var v3133 = returnStmt$$1;
              var v13251 = returnStmt$$1.returnExpression;
              v3133.type = v13251.type
            }else {
              var v3134 = returnStmt$$1;
              var v13252 = returnStmt$$1.returnExpression;
              var v26968 = JAMScript.call(this.cast, this, [v13252, expectedReturnType]);
              v3134.returnExpression = v26968;
              returnStmt$$1.type = expectedReturnType
            }
          }else {
            if(targetType$$7) {
              var v19158 = returnStmt$$1.returnExpression;
              var v13253 = v19158.type;
              var v13254 = this.voidType;
              var v3138 = v13253 != v13254;
              if(v3138) {
                var v3136 = returnStmt$$1;
                var v13255 = returnStmt$$1.returnExpression;
                var v26969 = JAMScript.call(this.cast, this, [v13255, targetType$$7]);
                v3136.returnExpression = v26969
              }else {
                var v3137 = returnStmt$$1.returnExpression;
                v3137.type = targetType$$7
              }
            }
            var v3139 = returnStmt$$1;
            var v13256 = returnStmt$$1.returnExpression;
            v3139.type = v13256.type
          }
          var v13257 = this.thisFnc;
          var v3140 = v13257.returnStatementsWithExpressions;
          var v19159 = this.thisFnc;
          var v13258 = v19159.returnStatementsWithExpressions;
          var v3141 = v13258.length;
          JAMScript.set(v3140, v3141, returnStmt$$1)
        }else {
          var v3142;
          var v13260 = targetType$$7 == null;
          if(v13260) {
            var v13259 = this.checker;
            v3142 = v13259.voidType
          }else {
            v3142 = targetType$$7
          }
          returnStmt$$1.type = v3142
        }
      }
      return returnStmt$$1
    }
    function v1096(type$$56, ast$$108) {
      var v13261 = type$$56;
      if(v13261) {
        var v19160 = type$$56.construct;
        if(v19160) {
          var v25917 = type$$56.construct;
          var v24997 = v25917.signatures;
          var v23039 = v24997.length;
          v19160 = v23039 > 0
        }
        v13261 = v19160
      }
      var v3148 = v13261;
      if(v3148) {
        var i$$108 = 0;
        var v23040 = type$$56.construct;
        var v19161 = v23040.signatures;
        var v13262 = v19161.length;
        var v3147 = i$$108 < v13262;
        for(;v3147;) {
          var v25918 = type$$56.construct;
          var v24998 = v25918.signatures;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23041 = v24998[i$$108]
          }
          var v19162 = v23041.returnType;
          var v13263 = v19162.type;
          var v19163 = this.checker;
          var v13264 = v19163.voidType;
          var v3146 = v13263 == v13264;
          if(v3146) {
            var v13265 = this.checker;
            var v3145 = v13265.errorReporter;
            JAMScript.call(v3145.simpleError, v3145, [ast$$108, "Constructors may not have a return type of 'void'"]);
            break
          }
          i$$108 = i$$108 + 1;
          var v23042 = type$$56.construct;
          var v19164 = v23042.signatures;
          var v13266 = v19164.length;
          v3147 = i$$108 < v13266
        }
      }
      return
    }
    function v1095(arrayLit) {
      function v1094(index$$60) {
        var v13267 = elements$$2.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v3149 = v13267[index$$60]
        }
        return v3149.type
      }
      function v1093(index$$59, type$$55) {
        var v13268 = elements$$2.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v3150 = v13268[index$$59]
        }
        v3150.type = type$$55;
        return
      }
      function v1092() {
        var v3151 = elements$$2.members;
        return v3151.length
      }
      var elements$$2 = arrayLit.operand;
      var elementType = this.anyType;
      var targetElementType = null;
      var v3152 = TypeScript$$25.TypeComparisonInfo;
      var comparisonInfo$$14 = JAMScript.new(v3152, []);
      comparisonInfo$$14.onlyCaptureFirstError = true;
      var v13269 = this.checker;
      var v3155 = JAMScript.call(v13269.hasTargetType, v13269, []);
      if(v3155) {
        var v13270 = this.checker;
        var v3153 = v13270.currentContextualTypeContext;
        var targetType$$6 = v3153.contextualType;
        var v3154 = targetType$$6.elementType;
        if(v3154) {
          targetElementType = targetType$$6.elementType
        }
      }
      if(elements$$2) {
        var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;
        this.inArrayElementTypeCheck = true;
        var v3156 = this.checker;
        var v13271 = this.checker;
        var v3157 = JAMScript.call(v13271.inProvisionalTypecheckMode, v13271, []);
        var v3158 = targetElementType != null;
        JAMScript.call(v3156.typeCheckWithContextualType, v3156, [targetElementType, v3157, v3158, elements$$2]);
        this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;
        var v13272 = elements$$2.members;
        var v3159 = v13272[0];
        elementType = v3159.type;
        var collection$$3 = {getLength:v1092, setTypeAtIndex:v1093, getTypeAtIndex:v1094};
        var v3160 = this.checker;
        elementType = JAMScript.call(v3160.findBestCommonType, v3160, [elementType, targetElementType, collection$$3, false, comparisonInfo$$14]);
        var v23043 = this.checker;
        var v19165 = v23043.undefinedType;
        var v13273 = elementType == v19165;
        var v19167 = !v13273;
        if(v19167) {
          var v19166 = !prevInArrayElemTypeCheck;
          if(v19166) {
            var v23044 = this.nullType;
            v19166 = elementType == v23044
          }
          v13273 = v19166
        }
        var v3161 = v13273;
        if(v3161) {
          elementType = this.anyType
        }
      }
      var v3167 = !elementType;
      if(v3167) {
        var emsg$$2 = "Incompatible types in array literal expression";
        var v13274 = comparisonInfo$$14.message;
        var v3165 = !v13274;
        if(v3165) {
          var v13275 = this.checker;
          var v3162 = v13275.errorReporter;
          JAMScript.call(v3162.simpleError, v3162, [arrayLit, emsg$$2])
        }else {
          var v13276 = this.checker;
          var v3163 = v13276.errorReporter;
          var v13277 = emsg$$2 + ": ";
          var v13278 = comparisonInfo$$14.message;
          var v3164 = v13277 + v13278;
          JAMScript.call(v3163.simpleError, v3163, [arrayLit, v3164])
        }
        elementType = this.anyType
      }else {
        if(targetElementType) {
          var v13279 = this.checker;
          var v3166 = JAMScript.call(v13279.sourceIsAssignableToTarget, v13279, [elementType, targetElementType]);
          if(v3166) {
            elementType = targetElementType
          }
        }
      }
      var v3168 = arrayLit;
      var v13280 = this.checker;
      var v26970 = JAMScript.call(v13280.makeArrayType, v13280, [elementType]);
      v3168.type = v26970;
      return
    }
    function v1091(objectLit$$2) {
      var v3169 = TypeScript$$25.Type;
      var resultType$$2 = JAMScript.new(v3169, []);
      var v3170 = resultType$$2;
      var v13281 = TypeScript$$25.TypeSymbol;
      var v19168 = this.checker;
      var v13282 = v19168.anon;
      var v13283 = objectLit$$2.minChar;
      var v19169 = objectLit$$2.limChar;
      var v19170 = objectLit$$2.minChar;
      var v13284 = v19169 - v19170;
      var v23045 = this.checker;
      var v19171 = v23045.locationInfo;
      var v13285 = v19171.unitIndex;
      var v26971 = JAMScript.new(v13281, [v13282, v13283, v13284, v13285, resultType$$2]);
      v3170.symbol = v26971;
      var v3171 = TypeScript$$25.ScopedMembers;
      var v13286 = TypeScript$$25.DualStringHashTable;
      var v19172 = TypeScript$$25.StringHashTable;
      var v13287 = JAMScript.new(v19172, []);
      var v19173 = TypeScript$$25.StringHashTable;
      var v13288 = JAMScript.new(v19173, []);
      var v3172 = JAMScript.new(v13286, [v13287, v13288]);
      var v26972 = JAMScript.new(v3171, [v3172]);
      resultType$$2.members = v26972;
      var v3173 = resultType$$2;
      var v13289 = TypeScript$$25.SymbolTableScope;
      var v13290 = resultType$$2.members;
      var v26973 = JAMScript.new(v13289, [v13290, null, null, null, null]);
      v3173.memberScope = v26973;
      var v3174 = TypeScript$$25.SymbolAggregateScope;
      var v3175 = resultType$$2.symbol;
      var aggScope$$3 = JAMScript.new(v3174, [v3175]);
      var v3176 = resultType$$2.memberScope;
      JAMScript.call(aggScope$$3.addParentScope, aggScope$$3, [v3176]);
      var v3177 = this.scope;
      JAMScript.call(aggScope$$3.addParentScope, aggScope$$3, [v3177]);
      resultType$$2.containedScope = aggScope$$3;
      var memberDecls$$1 = objectLit$$2.operand;
      var prevThisType$$3 = this.thisType;
      var acceptTargetType = false;
      var targetType$$5 = null;
      var v13291 = this.checker;
      var v3182 = JAMScript.call(v13291.hasTargetType, v13291, []);
      if(v3182) {
        var v13292 = this.checker;
        var v3178 = v13292.currentContextualTypeContext;
        targetType$$5 = v3178.contextualType;
        var v13293 = targetType$$5;
        if(v13293) {
          var v19174 = targetType$$5.symbol;
          if(v19174) {
            var v24999 = this.checker;
            var v25919 = targetType$$5.symbol;
            var v25000 = v25919.typeCheckStatus;
            var v23046 = JAMScript.call(v24999.typeStatusIsFinished, v24999, [v25000]);
            v19174 = !v23046
          }
          v13293 = v19174
        }
        var v3181 = v13293;
        if(v3181) {
          var v13294 = targetType$$5.symbol;
          var v3180 = v13294.declAST;
          if(v3180) {
            var v13295 = targetType$$5.symbol;
            var v3179 = v13295.declAST;
            JAMScript.call(this.typeCheck, this, [v3179])
          }
        }
        acceptTargetType = true
      }
      if(memberDecls$$1) {
        var i$$107 = 0;
        var v3183 = memberDecls$$1.members;
        var len$$52 = v3183.length;
        var v3213 = i$$107 < len$$52;
        for(;v3213;) {
          var v3184 = memberDecls$$1.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var binex$$9 = v3184[i$$107]
          }
          var id$$23 = binex$$9.operand1;
          var text$$24;
          var targetMember$$1 = null;
          var fieldSymbol$$4 = null;
          var v13296 = id$$23.nodeType;
          var v19175 = TypeScript$$25.NodeType;
          var v13297 = v19175.Name;
          var v3188 = v13296 == v13297;
          if(v3188) {
            text$$24 = id$$23.text
          }else {
            var v13298 = id$$23.nodeType;
            var v19176 = TypeScript$$25.NodeType;
            var v13299 = v19176.QString;
            var v3187 = v13298 == v13299;
            if(v3187) {
              var idText$$5 = id$$23.text;
              var v13300 = idText$$5.length;
              var v3185 = v13300 - 1;
              text$$24 = JAMScript.call(idText$$5.substring, idText$$5, [1, v3185])
            }else {
              var v13301 = this.checker;
              var v3186 = v13301.errorReporter;
              JAMScript.call(v3186.simpleError, v3186, [objectLit$$2, "malformed object literal"]);
              resultType$$2 = this.anyType;
              break
            }
          }
          var v13302 = acceptTargetType;
          if(v13302) {
            v13302 = targetType$$5.memberScope
          }
          var v3190 = v13302;
          if(v3190) {
            var v3189 = targetType$$5.memberScope;
            targetMember$$1 = JAMScript.call(v3189.find, v3189, [text$$24, false, false])
          }
          var v23047 = binex$$9.operand2;
          var v19177 = v23047.nodeType;
          var v23048 = TypeScript$$25.NodeType;
          var v19178 = v23048.FuncDecl;
          var v13303 = v19177 == v19178;
          if(v13303) {
            var v19179 = binex$$9.operand2;
            v13303 = JAMScript.call(v19179.isAccessor, v19179, [])
          }
          var v3195 = v13303;
          if(v3195) {
            var funcDecl$$33 = binex$$9.operand2;
            var v13304 = resultType$$2.members;
            var v3191 = v13304.publicMembers;
            var accessorSym$$1 = JAMScript.call(v3191.lookup, v3191, [text$$24]);
            var v3192 = this.checker;
            var v3193 = resultType$$2.memberScope;
            accessorSym$$1 = JAMScript.call(v3192.createAccessorSymbol, v3192, [funcDecl$$33, accessorSym$$1, resultType$$2, true, false, v3193, null]);
            funcDecl$$33.accessorSymbol = accessorSym$$1;
            fieldSymbol$$4 = accessorSym$$1;
            var v13305 = id$$23.nodeType;
            var v19180 = TypeScript$$25.NodeType;
            var v13306 = v19180.Name;
            var v3194 = v13305 == v13306;
            if(v3194) {
              id$$23.sym = accessorSym$$1
            }
          }
          var v3196 = this.checker;
          var v13307;
          var v19181 = acceptTargetType && targetMember$$1;
          if(v19181) {
            v13307 = JAMScript.call(targetMember$$1.getType, targetMember$$1, [])
          }else {
            v13307 = null
          }
          var v3197 = v13307;
          var v3198 = binex$$9.operand2;
          JAMScript.call(v3196.typeCheckWithContextualType, v3196, [v3197, false, acceptTargetType, v3198]);
          var v3202 = acceptTargetType && targetMember$$1;
          if(v3202) {
            var v25001 = binex$$9.operand2;
            var v23049 = v25001.type;
            var v23050 = this.anyType;
            var v19182 = v23049 == v23050;
            var v23054 = !v19182;
            if(v23054) {
              var v23051 = this.checker;
              var v25002 = binex$$9.operand2;
              var v23052 = v25002.type;
              var v23053 = JAMScript.call(targetMember$$1.getType, targetMember$$1, []);
              v19182 = JAMScript.call(v23051.sourceIsAssignableToTarget, v23051, [v23052, v23053])
            }
            var v13308 = v19182;
            var v19184 = !v13308;
            if(v19184) {
              var v25003 = binex$$9.operand2;
              var v23055 = v25003.nodeType;
              var v25004 = TypeScript$$25.NodeType;
              var v23056 = v25004.FuncDecl;
              var v19183 = v23055 == v23056;
              if(v19183) {
                var v25005 = binex$$9.operand2;
                var v23057 = JAMScript.call(v25005.isAccessor, v25005, []);
                if(v23057) {
                  var v25920 = binex$$9.operand2;
                  var v25006 = JAMScript.call(this.typeFromAccessorFuncDecl, this, [v25920]);
                  var v25007 = JAMScript.call(targetMember$$1.getType, targetMember$$1, []);
                  v23057 = v25006 == v25007
                }
                v19183 = v23057
              }
              v13308 = v19183
            }
            var v3200 = v13308;
            if(v3200) {
              var v3199 = binex$$9.operand1;
              var v26974 = JAMScript.call(targetMember$$1.getType, targetMember$$1, []);
              v3199.type = v26974
            }
          }else {
            var v3201 = binex$$9.operand2;
            var v13309;
            var v25008 = binex$$9.operand2;
            var v23058 = v25008.type;
            var v25009 = this.checker;
            var v23059 = v25009.undefinedType;
            var v19186 = v23058 == v23059;
            if(v19186) {
              v13309 = this.anyType
            }else {
              var v19185 = binex$$9.operand2;
              v13309 = v19185.type
            }
            v3201.type = v13309
          }
          var v3212 = fieldSymbol$$4 == null;
          if(v3212) {
            var v3203 = binex$$9.operand2;
            var memberType$$1 = v3203.type;
            var v3204 = TypeScript$$25.ValueLocation;
            var field$$6 = JAMScript.new(v3204, []);
            var v3205 = TypeScript$$25.FieldSymbol;
            var v3206 = id$$23.minChar;
            var v19187 = this.checker;
            var v13310 = v19187.locationInfo;
            var v3207 = v13310.unitIndex;
            fieldSymbol$$4 = JAMScript.new(v3205, [text$$24, v3206, v3207, true, field$$6]);
            var v13311 = fieldSymbol$$4;
            var v19188 = fieldSymbol$$4.flags;
            var v23060 = TypeScript$$25.SymbolFlags;
            var v19189 = v23060.Property;
            v13311.flags = v19188 | v19189;
            field$$6.symbol = fieldSymbol$$4;
            var v3208 = fieldSymbol$$4;
            var v13312 = this.checker;
            var v26975 = JAMScript.call(v13312.getTypeCheckFinishedStatus, v13312, []);
            v3208.typeCheckStatus = v26975;
            var v3209 = TypeScript$$25.TypeLink;
            var v26976 = JAMScript.new(v3209, []);
            field$$6.typeLink = v26976;
            var v3210 = field$$6.typeLink;
            v3210.type = memberType$$1;
            var v13313 = resultType$$2.members;
            var v3211 = v13313.publicMembers;
            JAMScript.call(v3211.add, v3211, [text$$24, fieldSymbol$$4])
          }
          fieldSymbol$$4.isObjectLitField = true;
          i$$107 = i$$107 + 1;
          v3213 = i$$107 < len$$52
        }
      }
      this.thisType = prevThisType$$3;
      objectLit$$2.type = resultType$$2;
      if(targetType$$5) {
        objectLit$$2.targetType = targetType$$5
      }
      return
    }
    function v1090(funcDecl$$32) {
      var v13314 = JAMScript.call(funcDecl$$32.isAccessor, funcDecl$$32, []);
      var v3214 = !v13314;
      if(v3214) {
        return null
      }
      var v13315 = funcDecl$$32.fncFlags;
      var v19190 = TypeScript$$25.FncFlags;
      var v13316 = v19190.GetAccessor;
      var v3217 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13315, v13316]);
      if(v3217) {
        var v25010 = funcDecl$$32.type;
        var v23061 = v25010.call;
        var v19191 = v23061.signatures;
        var v13317 = v19191[0];
        var v3215 = v13317.returnType;
        return v3215.type
      }else {
        var v25921 = funcDecl$$32.type;
        var v25011 = v25921.call;
        var v23062 = v25011.signatures;
        var v19192 = v23062[0];
        var v13318 = v19192.parameters;
        var v3216 = v13318[0];
        return JAMScript.call(v3216.getType, v3216, [])
      }
      return
    }
    function v1089(ifStmt$$1) {
      var v3218 = ifStmt$$1;
      var v13319 = ifStmt$$1.cond;
      var v26977 = JAMScript.call(this.typeCheck, this, [v13319]);
      v3218.cond = v26977;
      var v3219 = ifStmt$$1.cond;
      JAMScript.call(this.typeCheckCondExpr, this, [v3219]);
      var v3220 = ifStmt$$1;
      var v13320 = ifStmt$$1.thenBod;
      var v26978 = JAMScript.call(this.typeCheck, this, [v13320]);
      v3220.thenBod = v26978;
      var v3221 = ifStmt$$1;
      var v13321 = ifStmt$$1.elseBod;
      var v26979 = JAMScript.call(this.typeCheck, this, [v13321]);
      v3221.elseBod = v26979;
      var v3222 = ifStmt$$1.thenBod;
      JAMScript.call(this.typeCheckCompoundStmtBlock, this, [v3222, "if statement"]);
      var v3223 = ifStmt$$1.elseBod;
      JAMScript.call(this.typeCheckCompoundStmtBlock, this, [v3223, "if statement"]);
      ifStmt$$1.type = this.voidType;
      return ifStmt$$1
    }
    function v1088(stmts$$3, stmtType) {
      var v23063 = this.checker;
      var v19193 = v23063.styleSettings;
      var v13322 = v19193.blockInCompoundStmt;
      if(v13322) {
        v13322 = stmts$$3
      }
      var v3227 = v13322;
      if(v3227) {
        var v13323 = stmts$$3.nodeType;
        var v19194 = TypeScript$$25.NodeType;
        var v13324 = v19194.Block;
        var v3226 = v13323 != v13324;
        if(v3226) {
          var v13325 = this.checker;
          var v3224 = v13325.errorReporter;
          var v3225 = stmtType + " requires a block";
          JAMScript.call(v3224.styleError, v3224, [stmts$$3, v3225])
        }
      }
      return
    }
    function v1087(cond$$3) {
      var v19195 = this.checker;
      var v13326 = v19195.styleSettings;
      var v3230 = v13326.assignmentInCond;
      if(v3230) {
        var v13327 = cond$$3 !== null;
        if(v13327) {
          var v23064 = cond$$3.nodeType;
          var v25012 = TypeScript$$25.NodeType;
          var v23065 = v25012.Asg;
          var v19196 = v23064 >= v23065;
          if(v19196) {
            var v23066 = cond$$3.nodeType;
            var v25013 = TypeScript$$25.NodeType;
            var v23067 = v25013.LastAsg;
            v19196 = v23066 <= v23067
          }
          v13327 = v19196
        }
        var v3229 = v13327;
        if(v3229) {
          var v13328 = this.checker;
          var v3228 = v13328.errorReporter;
          JAMScript.call(v3228.simpleError, v3228, [cond$$3, "top-level assignment statement in conditional expression"])
        }
      }
      return
    }
    function v1086(doWhileStmt) {
      var v3231 = doWhileStmt;
      var v13329 = doWhileStmt.cond;
      var v26980 = JAMScript.call(this.typeCheck, this, [v13329]);
      v3231.cond = v26980;
      var v3232 = doWhileStmt.cond;
      JAMScript.call(this.typeCheckCondExpr, this, [v3232]);
      var v3233 = doWhileStmt;
      var v13330 = doWhileStmt.body;
      var v26981 = JAMScript.call(this.typeCheck, this, [v13330]);
      v3233.body = v26981;
      var v3234 = doWhileStmt.body;
      JAMScript.call(this.typeCheckCompoundStmtBlock, this, [v3234, "do while statement"]);
      doWhileStmt.type = this.voidType;
      return doWhileStmt
    }
    function v1085(whileStmt$$1) {
      var v3235 = whileStmt$$1;
      var v13331 = whileStmt$$1.cond;
      var v26982 = JAMScript.call(this.typeCheck, this, [v13331]);
      v3235.cond = v26982;
      var v3236 = whileStmt$$1.cond;
      JAMScript.call(this.typeCheckCondExpr, this, [v3236]);
      var v3237 = whileStmt$$1;
      var v13332 = whileStmt$$1.body;
      var v26983 = JAMScript.call(this.typeCheck, this, [v13332]);
      v3237.body = v26983;
      var v3238 = whileStmt$$1.body;
      JAMScript.call(this.typeCheckCompoundStmtBlock, this, [v3238, "while statement"]);
      whileStmt$$1.type = this.voidType;
      return whileStmt$$1
    }
    function v1084(forInStmt$$1) {
      var v3239 = forInStmt$$1;
      var v13333 = forInStmt$$1.obj;
      var v26984 = JAMScript.call(this.typeCheck, this, [v13333]);
      v3239.obj = v26984;
      var v3240 = forInStmt$$1;
      var v19197 = forInStmt$$1.lval;
      var v13334 = JAMScript.call(this.typeCheck, this, [v19197]);
      var v19198 = this.checker;
      var v13335 = v19198.stringType;
      var v26985 = JAMScript.call(this.cast, this, [v13334, v13335]);
      v3240.lval = v26985;
      var v19199 = forInStmt$$1.lval;
      var v13336 = v19199.nodeType;
      var v19200 = TypeScript$$25.NodeType;
      var v13337 = v19200.VarDecl;
      var v3246 = v13336 == v13337;
      if(v3246) {
        var varDecl$$19 = forInStmt$$1.lval;
        var v3242 = varDecl$$19.typeExpr;
        if(v3242) {
          var v13338 = this.checker;
          var v3241 = v13338.errorReporter;
          JAMScript.call(v3241.simpleError, v3241, [varDecl$$19, "Variable declarations for for/in expressions may not contain a type annotation"])
        }
        var v3245 = varDecl$$19.sym;
        if(v3245) {
          var v3243 = varDecl$$19.sym;
          var v13339 = this.checker;
          var v3244 = v13339.stringType;
          JAMScript.call(v3243.setType, v3243, [v3244])
        }
      }
      var v3247 = forInStmt$$1;
      var v13340 = forInStmt$$1.body;
      var v26986 = JAMScript.call(this.typeCheck, this, [v13340]);
      v3247.body = v26986;
      var v3248 = forInStmt$$1.body;
      JAMScript.call(this.typeCheckCompoundStmtBlock, this, [v3248, "for in statement"]);
      return forInStmt$$1
    }
    function v1083(withStmt$$2) {
      var v13341 = this.checker;
      var v3251 = v13341.errorsOnWith;
      if(v3251) {
        var v13342 = this.checker;
        var v3249 = v13342.errorReporter;
        var v3250 = withStmt$$2.expr;
        JAMScript.call(v3249.simpleError, v3249, [v3250, "All symbols within a 'with' block will be typed as 'any'"])
      }
      var v3252 = withStmt$$2;
      var v13343 = withStmt$$2.expr;
      var v26987 = JAMScript.call(this.typeCheck, this, [v13343]);
      v3252.expr = v26987;
      var v3253 = this.checker;
      v3253.inWith = true;
      var v3254 = withStmt$$2;
      var v13344 = withStmt$$2.body;
      var v26988 = JAMScript.call(this.typeCheck, this, [v13344]);
      v3254.body = v26988;
      var v3255 = withStmt$$2.body;
      JAMScript.call(this.typeCheckCompoundStmtBlock, this, [v3255, "with statement"]);
      var v3256 = this.checker;
      v3256.inWith = false;
      return withStmt$$2
    }
    function v1082(forStmt$$1) {
      var v3257 = forStmt$$1;
      var v13345 = forStmt$$1.init;
      var v26989 = JAMScript.call(this.typeCheck, this, [v13345]);
      v3257.init = v26989;
      var v13346 = this.nestingLevel;
      this.nestingLevel = v13346 + 1;
      var v3258 = forStmt$$1;
      var v13347 = forStmt$$1.cond;
      var v26990 = JAMScript.call(this.typeCheck, this, [v13347]);
      v3258.cond = v26990;
      var v3259 = forStmt$$1.cond;
      JAMScript.call(this.typeCheckCondExpr, this, [v3259]);
      var v3260 = forStmt$$1;
      var v13348 = forStmt$$1.incr;
      var v26991 = JAMScript.call(this.typeCheck, this, [v13348]);
      v3260.incr = v26991;
      var v13349 = this.nestingLevel;
      this.nestingLevel = v13349 - 1;
      var v3261 = forStmt$$1;
      var v13350 = forStmt$$1.body;
      var v26992 = JAMScript.call(this.typeCheck, this, [v13350]);
      v3261.body = v26992;
      var v3262 = forStmt$$1.body;
      JAMScript.call(this.typeCheckCompoundStmtBlock, this, [v3262, "for statement"]);
      forStmt$$1.type = this.voidType;
      return forStmt$$1
    }
    function v1081(moduleDecl$$7) {
      var v13351 = moduleDecl$$7.mod;
      var v3263 = !v13351;
      if(v3263) {
        return moduleDecl$$7
      }
      var v3265 = this.currentScript;
      if(v3265) {
        var v3264 = this.currentScript;
        v3264.requiresGlobal = true
      }
      var mod$$3 = moduleDecl$$7.mod;
      var sym$$43 = null;
      var prevScope$$6 = this.scope;
      var prevThisType$$2 = this.thisType;
      var v3266 = this.checker;
      var prevCurrentModDecl$$1 = v3266.currentModDecl;
      var v3267 = this.checker;
      v3267.currentModDecl = moduleDecl$$7;
      this.thisType = null;
      this.scope = mod$$3.containedScope;
      var v3268 = moduleDecl$$7.members;
      JAMScript.call(this.typeCheck, this, [v3268]);
      sym$$43 = mod$$3.symbol;
      var v3269 = this.checker;
      v3269.currentModDecl = prevCurrentModDecl$$1;
      this.thisType = prevThisType$$2;
      this.scope = prevScope$$6;
      moduleDecl$$7.type = mod$$3;
      if(sym$$43) {
        var v3270 = TypeScript$$25.TypeCheckStatus;
        sym$$43.typeCheckStatus = v3270.Finished
      }
      return moduleDecl$$7
    }
    function v1080(importDecl$$2) {
      var v3271 = importDecl$$2.alias;
      var mod$$2 = v3271.type;
      var sym$$42 = null;
      var prevInImportTC = this.inImportTypeCheck;
      this.inImportTypeCheck = true;
      var v3272 = importDecl$$2.alias;
      JAMScript.call(this.typeCheck, this, [v3272]);
      var v3273 = importDecl$$2.alias;
      mod$$2 = v3273.type;
      var v3279 = mod$$2 == null;
      if(v3279) {
        var v13352 = this.checker;
        var v3274 = v13352.errorReporter;
        var v3275 = importDecl$$2.alias;
        var v23068 = importDecl$$2.id;
        var v19201 = v23068.actualText;
        var v13353 = "Could not resolve module alias '" + v19201;
        var v3276 = v13353 + "'";
        JAMScript.call(v3274.simpleError, v3274, [v3275, v3276]);
        var v3277 = this.checker;
        mod$$2 = v3277.anyType;
        var v13354 = importDecl$$2.id;
        var v3278 = v13354.sym;
        v3278.type = mod$$2
      }
      var v3280 = importDecl$$2.id;
      v3280.type = mod$$2;
      sym$$42 = mod$$2.symbol;
      var v13355 = JAMScript.call(mod$$2.isModuleType, mod$$2, []);
      var v3288 = !v13355;
      if(v3288) {
        var v13356 = this.checker;
        var v3281 = v13356.errorReporter;
        var v3282 = importDecl$$2.alias;
        JAMScript.call(v3281.simpleError, v3281, [v3282, "A module cannot be aliased to a non-module type"])
      }else {
        sym$$42.type = mod$$2;
        var v23069 = this.checker;
        var v19202 = v23069.typeFlow;
        var v13357 = v19202.currentScript;
        if(v13357) {
          var v25922 = this.checker;
          var v25014 = v25922.typeFlow;
          var v23070 = v25014.currentScript;
          var v19203 = v23070.topLevelMod;
          if(v19203) {
            var v26415 = this.checker;
            var v25923 = v26415.typeFlow;
            var v25015 = v25923.currentScript;
            var v23071 = v25015.topLevelMod;
            v19203 = v23071.mod
          }
          v13357 = v19203
        }
        var v3284 = v13357;
        if(v3284) {
          var v25924 = this.checker;
          var v25016 = v25924.typeFlow;
          var v23072 = v25016.currentScript;
          var v19204 = v23072.topLevelMod;
          var v13358 = v19204.mod;
          var v3283 = v13358.importedModules;
          JAMScript.call(v3283.push, v3283, [importDecl$$2])
        }
        var v13359 = importDecl$$2.id;
        var v3285 = v13359.sym;
        v3285.type = mod$$2;
        var v13360 = mod$$2.symbol;
        if(v13360) {
          var v19205 = mod$$2.symbol;
          v13360 = v19205.declAST
        }
        var v3287 = v13360;
        if(v3287) {
          var v13361 = mod$$2.symbol;
          var v3286 = v13361.declAST;
          var v19206 = v3286.modFlags;
          var v25017 = TypeScript$$25.ModuleFlags;
          var v23073 = v25017.ShouldEmitModuleDecl;
          var v19207 = ~v23073;
          v3286.modFlags = v19206 & v19207
        }
      }
      this.inImportTypeCheck = prevInImportTC;
      return importDecl$$2
    }
    function v1079(interfaceDecl$$6) {
      var v3289 = interfaceDecl$$6.type;
      JAMScript.call(this.typeCheckBases, this, [v3289]);
      var v3290 = interfaceDecl$$6.extendsList;
      var v13362 = interfaceDecl$$6.type;
      var v3291 = v13362.symbol;
      JAMScript.call(this.typeCheckBaseListPrivacy, this, [v3290, v3291, true]);
      var v3292 = interfaceDecl$$6.members;
      JAMScript.call(this.typeCheck, this, [v3292]);
      var v3293 = interfaceDecl$$6.type;
      JAMScript.call(this.checkBaseTypeMemberInheritance, this, [v3293, interfaceDecl$$6]);
      var v3307 = interfaceDecl$$6.extendsList;
      if(v3307) {
        var i$$106 = 0;
        var v23074 = interfaceDecl$$6.extendsList;
        var v19208 = v23074.members;
        var v13363 = v19208.length;
        var v3306 = i$$106 < v13363;
        for(;v3306;) {
          var v25018 = interfaceDecl$$6.extendsList;
          var v23075 = v25018.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19209 = v23075[i$$106]
          }
          var v13364 = v19209.type;
          var v3297 = v13364.call;
          if(v3297) {
            var v13365 = interfaceDecl$$6.type;
            var v3296 = v13365.call;
            if(v3296) {
              var v13366 = interfaceDecl$$6.type;
              var v3294 = v13366.call;
              var v23076 = interfaceDecl$$6.type;
              var v19210 = v23076.call;
              var v13367 = v19210.signatures;
              var v26416 = interfaceDecl$$6.extendsList;
              var v25925 = v26416.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25019 = v25925[i$$106]
              }
              var v23077 = v25019.type;
              var v19211 = v23077.call;
              var v13368 = v19211.signatures;
              var v26993 = v13367.concat(v13368);
              v3294.signatures = v26993
            }else {
              var v3295 = interfaceDecl$$6.type;
              var v25020 = interfaceDecl$$6.extendsList;
              var v23078 = v25020.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v19212 = v23078[i$$106]
              }
              var v13369 = v19212.type;
              v3295.call = v13369.call
            }
          }
          var v25021 = interfaceDecl$$6.extendsList;
          var v23079 = v25021.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19213 = v23079[i$$106]
          }
          var v13370 = v19213.type;
          var v3301 = v13370.construct;
          if(v3301) {
            var v13371 = interfaceDecl$$6.type;
            var v3300 = v13371.construct;
            if(v3300) {
              var v13372 = interfaceDecl$$6.type;
              var v3298 = v13372.construct;
              var v23080 = interfaceDecl$$6.type;
              var v19214 = v23080.construct;
              var v13373 = v19214.signatures;
              var v26417 = interfaceDecl$$6.extendsList;
              var v25926 = v26417.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25022 = v25926[i$$106]
              }
              var v23081 = v25022.type;
              var v19215 = v23081.construct;
              var v13374 = v19215.signatures;
              var v26994 = v13373.concat(v13374);
              v3298.signatures = v26994
            }else {
              var v3299 = interfaceDecl$$6.type;
              var v25023 = interfaceDecl$$6.extendsList;
              var v23082 = v25023.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v19216 = v23082[i$$106]
              }
              var v13375 = v19216.type;
              v3299.construct = v13375.construct
            }
          }
          var v25024 = interfaceDecl$$6.extendsList;
          var v23083 = v25024.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19217 = v23083[i$$106]
          }
          var v13376 = v19217.type;
          var v3305 = v13376.index;
          if(v3305) {
            var v13377 = interfaceDecl$$6.type;
            var v3304 = v13377.index;
            if(v3304) {
              var v13378 = interfaceDecl$$6.type;
              var v3302 = v13378.index;
              var v23084 = interfaceDecl$$6.type;
              var v19218 = v23084.index;
              var v13379 = v19218.signatures;
              var v26418 = interfaceDecl$$6.extendsList;
              var v25927 = v26418.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25025 = v25927[i$$106]
              }
              var v23085 = v25025.type;
              var v19219 = v23085.index;
              var v13380 = v19219.signatures;
              var v26995 = v13379.concat(v13380);
              v3302.signatures = v26995
            }else {
              var v3303 = interfaceDecl$$6.type;
              var v25026 = interfaceDecl$$6.extendsList;
              var v23086 = v25026.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v19220 = v23086[i$$106]
              }
              var v13381 = v19220.type;
              v3303.index = v13381.index
            }
          }
          i$$106 = i$$106 + 1;
          var v23087 = interfaceDecl$$6.extendsList;
          var v19221 = v23087.members;
          var v13382 = v19221.length;
          v3306 = i$$106 < v13382
        }
      }
      return interfaceDecl$$6
    }
    function v1078(type$$54, ast$$107) {
      var v3311 = type$$54.call;
      if(v3311) {
        var v3308 = type$$54.call;
        var v3309 = this.checker;
        var v13383 = type$$54.construct;
        var v3310 = v13383 != null;
        JAMScript.call(v3308.typeCheck, v3308, [v3309, ast$$107, v3310])
      }
      var v3314 = type$$54.construct;
      if(v3314) {
        var v3312 = type$$54.construct;
        var v3313 = this.checker;
        JAMScript.call(v3312.typeCheck, v3312, [v3313, ast$$107, false])
      }
      var v3317 = type$$54.index;
      if(v3317) {
        var v3315 = type$$54.index;
        var v3316 = this.checker;
        JAMScript.call(v3315.typeCheck, v3315, [v3316, ast$$107, false])
      }
      return
    }
    function v1077(classDecl$$9) {
      var v3318 = classDecl$$9.type;
      var typeSymbol$$6 = v3318.symbol;
      var v13384 = typeSymbol$$6.typeCheckStatus;
      var v19222 = TypeScript$$25.TypeCheckStatus;
      var v13385 = v19222.Finished;
      var v3322 = v13384 == v13385;
      if(v3322) {
        return classDecl$$9
      }else {
        var v13386 = typeSymbol$$6.typeCheckStatus;
        var v19223 = TypeScript$$25.TypeCheckStatus;
        var v13387 = v19223.Started;
        var v3321 = v13386 == v13387;
        if(v3321) {
          return classDecl$$9
        }else {
          var v3319 = TypeScript$$25.TypeCheckStatus;
          typeSymbol$$6.typeCheckStatus = v3319.Started;
          var v3320 = this.checker;
          JAMScript.call(v3320.addStartedPTO, v3320, [typeSymbol$$6])
        }
      }
      var prevScope$$5 = this.scope;
      var svClassNode$$1 = this.thisClassNode;
      this.thisClassNode = classDecl$$9;
      var classType$$6 = classDecl$$9.type;
      var v3323 = classType$$6.instanceType;
      JAMScript.call(this.typeCheckBases, this, [v3323]);
      var v3324 = classDecl$$9.extendsList;
      JAMScript.call(this.typeCheckBaseListPrivacy, this, [v3324, typeSymbol$$6, true]);
      var v3325 = classDecl$$9.implementsList;
      JAMScript.call(this.typeCheckBaseListPrivacy, this, [v3325, typeSymbol$$6, false]);
      var prevThisType$$1 = this.thisType;
      this.thisType = classType$$6.instanceType;
      var v3326 = classType$$6.instanceType;
      this.scope = v3326.containedScope;
      var v3331 = classDecl$$9.constructorDecl;
      if(v3331) {
        var v3327 = classType$$6.instanceType;
        this.scope = v3327.constructorScope;
        var ssb$$1 = this.scope;
        var v3328 = ssb$$1.valueMembers;
        var funcTable$$2 = v3328.allMembers;
        var v19224 = classDecl$$9.constructorDecl;
        var v13388 = v19224.type;
        var v3329 = v13388.symbol;
        var v13389 = classDecl$$9.constructorDecl;
        var v3330 = v13389.arguments;
        JAMScript.call(this.addConstructorLocalArgs, this, [v3329, v3330, funcTable$$2, true])
      }
      var v3332 = classDecl$$9.members;
      JAMScript.call(this.typeCheck, this, [v3332]);
      var v3333 = TypeScript$$25.TypeCheckStatus;
      typeSymbol$$6.typeCheckStatus = v3333.Finished;
      JAMScript.call(this.checkBaseTypeMemberInheritance, this, [classType$$6, classDecl$$9]);
      JAMScript.call(this.checkMembersImplementInterfaces, this, [classType$$6]);
      JAMScript.call(this.typeCheckOverloadSignatures, this, [classType$$6, classDecl$$9]);
      var v3334 = classType$$6.instanceType;
      JAMScript.call(this.typeCheckOverloadSignatures, this, [v3334, classDecl$$9]);
      var v13390 = classDecl$$9.constructorDecl;
      var v3338 = !v13390;
      if(v3338) {
        var v13391 = classDecl$$9.extendsList;
        if(v13391) {
          var v25027 = classDecl$$9.extendsList;
          var v23088 = v25027.members;
          var v19225 = v23088.length;
          if(v19225) {
            var v26419 = classDecl$$9.extendsList;
            var v25928 = v26419.members;
            var v25028 = v25928[0];
            var v23089 = v25028.type;
            if(v23089) {
              var v26832 = classDecl$$9.extendsList;
              var v26766 = v26832.members;
              var v26660 = v26766[0];
              var v26420 = v26660.type;
              var v25929 = v26420.symbol;
              var v25029 = v25929.type;
              v23089 = JAMScript.call(v25029.isClass, v25029, [])
            }
            v19225 = v23089
          }
          v13391 = v19225
        }
        var v3337 = v13391;
        if(v3337) {
          var v3335 = classDecl$$9.type;
          var v25930 = classDecl$$9.extendsList;
          var v25030 = v25930.members;
          var v23090 = v25030[0];
          var v19226 = v23090.type;
          var v13392 = v19226.symbol;
          var v3336 = v13392.type;
          JAMScript.call(TypeScript$$25.cloneParentConstructGroupForChildType, TypeScript$$25, [v3335, v3336])
        }
      }
      this.thisType = prevThisType$$1;
      this.thisClassNode = svClassNode$$1;
      this.scope = prevScope$$5;
      return classDecl$$9
    }
    function v1076(derivedType, derivedTypeDecl) {
      function v1075(key$$45, s$$28, c$$12) {
        var sym$$41 = s$$28;
        var j$$16 = 0;
        var v3351 = j$$16 < len$$51;
        for(;v3351;) {
          var v3339 = instanceType$$6.extendsList;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var base$$3 = v3339[j$$16]
          }
          var v13393 = base$$3.memberScope;
          var v3350 = v13393 == null;
          if(v3350) {
            var v13394 = _this$$12.checker;
            var v3340 = v13394.errorReporter;
            var v23091 = base$$3.symbol;
            var v19227 = v23091.name;
            var v13395 = "Base type '" + v19227;
            var v3341 = v13395 + "' lacks an implementation.";
            JAMScript.call(v3340.simpleError, v3340, [derivedTypeDecl, v3341])
          }else {
            var v3342 = base$$3.memberScope;
            var v3343 = sym$$41.name;
            var bSym = JAMScript.call(v3342.find, v3342, [v3343, false, false]);
            if(bSym) {
              var aType = JAMScript.call(sym$$41.getType, sym$$41, []);
              var bType = JAMScript.call(bSym.getType, bSym, []);
              var v19228 = _this$$12.checker;
              var v13396 = JAMScript.call(v19228.sourceIsSubtypeOfTarget, v19228, [aType, bType]);
              var v3349 = !v13396;
              if(v3349) {
                var v13397 = _this$$12.checker;
                var v3344 = v13397.errorReporter;
                var v25031 = sym$$41.name;
                var v23092 = "Type of overridden member '" + v25031;
                var v19229 = v23092 + "' is not subtype of original member defined by type '";
                var v23093 = bSym.container;
                var v19230 = v23093.name;
                var v13398 = v19229 + v19230;
                var v3345 = v13398 + "'";
                JAMScript.call(v3344.simpleErrorFromSym, v3344, [sym$$41, v3345])
              }else {
                var v19231 = JAMScript.call(sym$$41.kind, sym$$41, []);
                var v23094 = TypeScript$$25.SymbolKind;
                var v19232 = v23094.Type;
                var v13399 = v19231 == v19232;
                if(v13399) {
                  var v19233 = JAMScript.call(bSym.kind, bSym, []);
                  var v23095 = TypeScript$$25.SymbolKind;
                  var v19234 = v23095.Field;
                  v13399 = v19233 == v19234
                }
                var v3348 = v13399;
                if(v3348) {
                  var v13400 = _this$$12.checker;
                  var v3346 = v13400.errorReporter;
                  var v19235 = sym$$41.name;
                  var v13401 = "Cannot override field '" + v19235;
                  var v3347 = v13401 + "' with method";
                  JAMScript.call(v3346.simpleErrorFromSym, v3346, [sym$$41, v3347])
                }
              }
            }
          }
          j$$16 = j$$16 + 1;
          v3351 = j$$16 < len$$51
        }
        return
      }
      var _this$$12 = this;
      var instanceType$$6 = JAMScript.call(derivedType.getInstanceType, derivedType, []);
      var v13402 = instanceType$$6.extendsList;
      var v3352 = v13402 == null;
      if(v3352) {
        return
      }
      var v3353 = instanceType$$6.extendsList;
      var len$$51 = v3353.length;
      var v3361 = len$$51 > 0;
      if(v3361) {
        var v3354 = TypeScript$$25.StringHashTable;
        var names$$1 = JAMScript.new(v3354, []);
        var v3358 = JAMScript.call(instanceType$$6.isClassInstance, instanceType$$6, []);
        if(v3358) {
          var i$$105 = 0;
          var v3357 = i$$105 < len$$51;
          for(;v3357;) {
            var v13403 = instanceType$$6.extendsList;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v3355 = v13403[i$$105]
            }
            var v3356 = i$$105 > 0;
            JAMScript.call(this.assertUniqueNamesInBaseTypes, this, [names$$1, v3355, derivedTypeDecl, v3356]);
            i$$105 = i$$105 + 1;
            v3357 = i$$105 < len$$51
          }
        }
        var v3360 = instanceType$$6.members;
        if(v3360) {
          var v13404 = instanceType$$6.members;
          var v3359 = v13404.publicMembers;
          JAMScript.call(v3359.map, v3359, [v1075, null])
        }
      }
      return
    }
    function v1074(names, type$$53, classDecl$$8, checkUnique) {
      function v1073(key$$44, s$$27, c$$11) {
        var sym$$40 = s$$27;
        var v3362 = sym$$40.name;
        var dup = JAMScript.call(names.lookup, names, [v3362]);
        if(dup) {
          if(checkUnique) {
            var v13405 = _this$$11.checker;
            var v3363 = v13405.errorReporter;
            var v26767 = classDecl$$8.name;
            var v26661 = v26767.actualText;
            var v26421 = "duplicate member name in bases for " + v26661;
            var v25931 = v26421 + ": ";
            var v26422 = type$$53.symbol;
            var v25932 = v26422.name;
            var v25032 = v25931 + v25932;
            var v23096 = v25032 + " and ";
            var v25033 = dup.container;
            var v23097 = v25033.name;
            var v19236 = v23096 + v23097;
            var v13406 = v19236 + " both contain member with name ";
            var v13407 = sym$$40.name;
            var v3364 = v13406 + v13407;
            JAMScript.call(v3363.simpleError, v3363, [classDecl$$8, v3364])
          }
        }else {
          var v3365 = sym$$40.name;
          JAMScript.call(names.add, names, [v3365, sym$$40])
        }
        return
      }
      var _this$$11 = this;
      if(type$$53) {
        var v3367 = type$$53.members;
        if(v3367) {
          var v13408 = type$$53.members;
          var v3366 = v13408.publicMembers;
          JAMScript.call(v3366.map, v3366, [v1073, null])
        }
        var v3372 = type$$53.extendsList;
        if(v3372) {
          var v3368 = type$$53.extendsList;
          var len$$50 = v3368.length;
          var i$$104 = 0;
          var v3371 = i$$104 < len$$50;
          for(;v3371;) {
            var v25933 = type$$53.extendsList;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25034 = v25933[i$$104]
            }
            var v23098 = v25034.symbol;
            var v19237 = v23098.flags;
            var v23099 = TypeScript$$25.SymbolFlags;
            var v19238 = v23099.RecursivelyReferenced;
            var v13409 = v19237 & v19238;
            var v3370 = !v13409;
            if(v3370) {
              var v13410 = type$$53.extendsList;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v3369 = v13410[i$$104]
              }
              JAMScript.call(this.assertUniqueNamesInBaseTypes, this, [names, v3369, classDecl$$8, checkUnique])
            }
            i$$104 = i$$104 + 1;
            v3371 = i$$104 < len$$50
          }
        }
      }
      return
    }
    function v1072(bases$$7) {
      var v3373 = bases$$7 == null;
      if(v3373) {
        return
      }
      var v3374 = bases$$7.members;
      var basesLen$$2 = v3374.length;
      var i$$103 = 0;
      var v3377 = i$$103 < basesLen$$2;
      for(;v3377;) {
        var v3375 = bases$$7.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var baseExpr$$2 = v3375[i$$103]
        }
        var baseSymbol$$3 = null;
        var v13411 = baseExpr$$2.nodeType;
        var v19239 = TypeScript$$25.NodeType;
        var v13412 = v19239.Call;
        var v3376 = v13411 == v13412;
        if(v3376) {
          JAMScript.call(this.typeCheckNew, this, [baseExpr$$2])
        }
        i$$103 = i$$103 + 1;
        v3377 = i$$103 < basesLen$$2
      }
      return
    }
    function v1071(implementingType) {
      var instanceType$$5 = JAMScript.call(implementingType.getInstanceType, implementingType, []);
      var v3390 = instanceType$$5.implementsList;
      if(v3390) {
        var v3378 = instanceType$$5.implementsList;
        var len$$49 = v3378.length;
        var i$$102 = 0;
        var v3389 = i$$102 < len$$49;
        for(;v3389;) {
          var v3379 = instanceType$$5.implementsList;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var interfaceType$$3 = v3379[i$$102]
          }
          var v3380 = TypeScript$$25.TypeComparisonInfo;
          var comparisonInfo$$13 = JAMScript.new(v3380, []);
          var v19240 = this.checker;
          var v13413 = JAMScript.call(v19240.sourceIsSubtypeOfTarget, v19240, [instanceType$$5, interfaceType$$3, comparisonInfo$$13]);
          var v3388 = !v13413;
          if(v3388) {
            var v23100 = JAMScript.call(instanceType$$5.getTypeName, instanceType$$5, []);
            var v19241 = "Class '" + v23100;
            var v13414 = v19241 + "' declares interface '";
            var v13415 = JAMScript.call(interfaceType$$3.getTypeName, interfaceType$$3, []);
            var v3381 = v13414 + v13415;
            var emsg$$1 = v3381 + "' but does not implement it";
            var v13416 = comparisonInfo$$13.message;
            var v3387 = !v13416;
            if(v3387) {
              var v13417 = this.checker;
              var v3382 = v13417.errorReporter;
              var v3383 = instanceType$$5.symbol;
              JAMScript.call(v3382.simpleErrorFromSym, v3382, [v3383, emsg$$1])
            }else {
              var v13418 = this.checker;
              var v3384 = v13418.errorReporter;
              var v3385 = instanceType$$5.symbol;
              var v13419 = emsg$$1 + ": ";
              var v13420 = comparisonInfo$$13.message;
              var v3386 = v13419 + v13420;
              JAMScript.call(v3384.simpleErrorFromSym, v3384, [v3385, v3386])
            }
          }
          i$$102 = i$$102 + 1;
          v3389 = i$$102 < len$$49
        }
      }
      return
    }
    function v1070(type$$52) {
      var seenInterface = false;
      var bases$$6 = type$$52.extendsList;
      var baseLinks = type$$52.extendsTypeLinks;
      if(bases$$6) {
        var len$$48 = bases$$6.length;
        var v3391 = len$$48 > 0;
        if(v3391) {
          var v13421 = type$$52;
          var v19242 = type$$52.typeFlags;
          var v23101 = TypeScript$$25.TypeFlags;
          var v19243 = v23101.HasBaseType;
          v13421.typeFlags = v19242 | v19243
        }
        var i$$101 = 0;
        var v3415 = i$$101 < len$$48;
        for(;v3415;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v13422 = bases$$6[i$$101]
          }
          var v19244 = this.checker;
          var v13423 = v19244.anyType;
          var v3401 = v13422 == v13423;
          if(v3401) {
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v3392 = baseLinks[i$$101]
            }
            v3392.type = null;
            var v13424 = this.checker;
            var v3393 = v13424.errorReporter;
            var oldErrors = v3393.errorSink;
            var v3394 = TypeScript$$25.CompilerDiagnostics;
            var v13425 = oldErrors.length;
            var v3395 = v13425 == 0;
            JAMScript.call(v3394.assert, v3394, [v3395, "There shouldnt be any contextual errors when typechecking base type names"]);
            var v13426 = this.checker;
            var v3396 = v13426.errorReporter;
            v3396.pushToErrorSink = true;
            var v3397 = bases$$6;
            var v3398 = i$$101;
            var v13427 = this.checker;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v13428 = baseLinks[i$$101]
            }
            var v13429 = type$$52.containedScope;
            var v26996 = JAMScript.call(v13427.resolveBaseTypeLink, v13427, [v13428, v13429]);
            v3397[v3398] = v26996;
            var v13430 = this.checker;
            var v3399 = v13430.errorReporter;
            v3399.pushToErrorSink = false;
            var v13431 = this.checker;
            var v3400 = v13431.errorReporter;
            JAMScript.call(v3400.freeCapturedErrors, v3400, [])
          }
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var base$$2 = bases$$6[i$$101]
          }
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v3402 = baseLinks[i$$101]
          }
          var baseRef$$1 = v3402.ast;
          var v3403 = base$$2.symbol;
          if(v3403) {
            var v23102 = base$$2.symbol;
            var v19245 = v23102.name;
            var v13432 = v19245 == "Object";
            if(v13432) {
              var v23103 = base$$2.symbol;
              var v19246 = v23103.container;
              var v23104 = this.checker;
              var v19247 = v23104.gloMod;
              v13432 = v19246 == v19247
            }
            v3403 = v13432
          }
          var baseTypeOfObject = v3403;
          if(baseTypeOfObject) {
            var v13433 = type$$52;
            var v19248 = type$$52.typeFlags;
            var v23105 = TypeScript$$25.TypeFlags;
            var v19249 = v23105.HasBaseTypeOfObject;
            v13433.typeFlags = v19248 | v19249
          }
          var v3414 = JAMScript.call(base$$2.isClassInstance, base$$2, []);
          if(v3414) {
            var v13434 = JAMScript.call(type$$52.isClassInstance, type$$52, []);
            var v3406 = !v13434;
            if(v3406) {
              var v13435 = this.checker;
              var v3404 = v13435.errorReporter;
              JAMScript.call(v3404.simpleError, v3404, [baseRef$$1, "Interface base type must be interface"])
            }else {
              if(seenInterface) {
                var v13436 = this.checker;
                var v3405 = v13436.errorReporter;
                JAMScript.call(v3405.simpleError, v3405, [baseRef$$1, "Class may not follow interface as base type"])
              }
            }
          }else {
            var v3413 = JAMScript.call(base$$2.isModuleType, base$$2, []);
            if(v3413) {
              var v13437 = this.checker;
              var v3407 = v13437.errorReporter;
              JAMScript.call(v3407.simpleError, v3407, [baseRef$$1, "Types may not be derived from module types"])
            }else {
              var v3412 = base$$2.members;
              if(v3412) {
                var v3408 = !seenInterface;
                if(v3408) {
                  seenInterface = true
                }
              }else {
                var v13438 = JAMScript.call(type$$52.isClassInstance, type$$52, []);
                var v3411 = !v13438;
                if(v3411) {
                  var v13439 = this.checker;
                  var v3409 = v13439.errorReporter;
                  JAMScript.call(v3409.simpleError, v3409, [baseRef$$1, "Interface base type must be interface"])
                }else {
                  var v13440 = this.checker;
                  var v3410 = v13440.errorReporter;
                  JAMScript.call(v3410.simpleError, v3410, [baseRef$$1, "Base type must be interface or class"])
                }
                break
              }
            }
          }
          i$$101 = i$$101 + 1;
          v3415 = i$$101 < len$$48
        }
      }
      return
    }
    function v1069(funcDecl$$31) {
      function v1068(typeName$$10, isModuleName$$9) {
        return JAMScript.call(_this$$10.functionReturnTypePrivacyErrorReporter, _this$$10, [funcDecl$$31, signature$$10, typeName$$10, isModuleName$$9])
      }
      function v1067(index$$58) {
        var v13441 = funcDecl$$31.returnStatementsWithExpressions;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v3416 = v13441[index$$58]
        }
        return v3416.type
      }
      function v1066(index$$57, type$$51) {
        var v13442 = funcDecl$$31.returnStatementsWithExpressions;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v3417 = v13442[index$$57]
        }
        v3417.type = type$$51;
        return
      }
      function v1065() {
        var v3418 = funcDecl$$31.returnStatementsWithExpressions;
        return v3418.length
      }
      function v1064(sym$$39) {
        var v3419 = JAMScript.call(sym$$39.kind, sym$$39, []);
        var v13443 = TypeScript$$25.SymbolKind;
        var v3420 = v13443.Parameter;
        return v3419 == v3420
      }
      function v1063(typeName$$9, isModuleName$$8) {
        var v13444 = signature$$10.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v3421 = v13444[p$$1]
        }
        return JAMScript.call(_this$$10.functionArgumentPrivacyErrorReporter, _this$$10, [funcDecl$$31, p$$1, v3421, typeName$$9, isModuleName$$8])
      }
      function v1062(typeName$$8, isModuleName$$7) {
        return JAMScript.call(_this$$10.functionArgumentPrivacyErrorReporter, _this$$10, [funcDecl$$31, p$$1, symbol$$21, typeName$$8, isModuleName$$7])
      }
      var _this$$10 = this;
      this.nestingLevel = 0;
      var fnType = funcDecl$$31.type;
      var fgSym$$4 = fnType.symbol;
      var signature$$10 = funcDecl$$31.signature;
      var v13445 = this.checker;
      var v13446 = signature$$10.typeCheckStatus;
      var v3429 = JAMScript.call(v13445.typeStatusIsFinished, v13445, [v13446]);
      if(v3429) {
        return funcDecl$$31
      }else {
        var v13447 = signature$$10.typeCheckStatus;
        var v19250 = TypeScript$$25.TypeCheckStatus;
        var v13448 = v19250.Started;
        var v3428 = v13447 == v13448;
        if(v3428) {
          var v19251 = funcDecl$$31.returnTypeAnnotation;
          var v13449 = !v19251;
          if(v13449) {
            var v19252 = funcDecl$$31.bod;
            if(v19252) {
              var v25035 = JAMScript.call(funcDecl$$31.isSignature, funcDecl$$31, []);
              var v23106 = !v25035;
              if(v23106) {
                var v25934 = funcDecl$$31.isConstructor;
                var v25036 = !v25934;
                if(v25036) {
                  v25036 = JAMScript.call(this.allReturnsAreVoid, this, [funcDecl$$31])
                }
                v23106 = v25036
              }
              v19252 = v23106
            }
            v13449 = v19252
          }
          var v3427 = v13449;
          if(v3427) {
            var v3422 = signature$$10.returnType;
            v3422.type = this.voidType;
            return funcDecl$$31
          }else {
            var v13450 = funcDecl$$31.returnTypeAnnotation;
            var v3426 = v13450 == null;
            if(v3426) {
              var v19253 = this.checker;
              var v13451 = v19253.styleSettings;
              var v3424 = v13451.implicitAny;
              if(v3424) {
                var v13452 = this.checker;
                var v3423 = v13452.errorReporter;
                JAMScript.call(v3423.styleError, v3423, [funcDecl$$31, "type implicitly set to 'any'"])
              }
              var v3425 = signature$$10.returnType;
              v3425.type = this.anyType;
              var v13453 = fgSym$$4;
              var v19254 = fgSym$$4.flags;
              var v23107 = TypeScript$$25.SymbolFlags;
              var v19255 = v23107.RecursivelyReferenced;
              v13453.flags = v19254 | v19255
            }
            return funcDecl$$31
          }
        }
      }
      var v3430 = TypeScript$$25.TypeCheckStatus;
      signature$$10.typeCheckStatus = v3430.Started;
      var v3431 = this.checker;
      JAMScript.call(v3431.addStartedPTO, v3431, [signature$$10]);
      var prevScope$$4 = this.scope;
      var prevFnc = this.thisFnc;
      var prevMethodStatus$$2 = this.enclosingFncIsMethod;
      var prevClassNode = this.thisClassNode;
      var v3432 = JAMScript.call(funcDecl$$31.isMethod, funcDecl$$31, []);
      var v13454 = !v3432;
      if(v13454) {
        v3432 = funcDecl$$31.isConstructor
      }
      this.enclosingFncIsMethod = v3432;
      this.thisFnc = funcDecl$$31;
      var v3433 = funcDecl$$31.type;
      var container$$21 = v3433.symbol;
      var prevThisType = this.thisType;
      var v3434 = this.checker;
      var prevLocationInfo$$2 = v3434.locationInfo;
      var funcTable$$1 = null;
      var acceptedContextualType = false;
      var targetParams = null;
      var targetReturnType$$1 = null;
      var v3435 = JAMScript.call(funcDecl$$31.isAccessor, funcDecl$$31, []);
      if(v3435) {
        var v13455 = funcDecl$$31.fncFlags;
        var v19256 = TypeScript$$25.FncFlags;
        var v13456 = v19256.GetAccessor;
        v3435 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13455, v13456])
      }
      var isGetter$$4 = v3435;
      var v3436 = JAMScript.call(funcDecl$$31.isAccessor, funcDecl$$31, []);
      if(v3436) {
        var v13457 = funcDecl$$31.fncFlags;
        var v19257 = TypeScript$$25.FncFlags;
        var v13458 = v19257.SetAccessor;
        v3436 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13457, v13458])
      }
      var isSetter$$4 = v3436;
      var v3437;
      var v19258 = isGetter$$4 || isSetter$$4;
      if(v19258) {
        v19258 = funcDecl$$31.accessorSymbol
      }
      var v13460 = v19258;
      if(v13460) {
        var v13459 = funcDecl$$31.accessorSymbol;
        v3437 = JAMScript.call(v13459.getType, v13459, [])
      }else {
        v3437 = null
      }
      var accessorType = v3437;
      var v3438 = this.checker;
      var prevModDecl$$1 = v3438.currentModDecl;
      var v13461 = funcDecl$$31.isConstructor;
      if(v13461) {
        var v19259 = funcDecl$$31.isOverload;
        v13461 = !v19259
      }
      var v3448 = v13461;
      if(v3448) {
        var v13462 = fnType.instanceType;
        var v3440 = v13462 == null;
        if(v3440) {
          var v13463 = this.checker;
          var v3439 = v13463.errorReporter;
          JAMScript.call(v3439.simpleError, v3439, [funcDecl$$31, "Malformed function body (is this a class named the same as an existing interface?)"]);
          return funcDecl$$31
        }
        var v3441 = fnType.instanceType;
        this.scope = v3441.constructorScope;
        var ssb = this.scope;
        var v3442 = ssb.valueMembers;
        funcTable$$1 = v3442.allMembers
      }else {
        var v19260 = JAMScript.call(funcDecl$$31.isSpecialFn, funcDecl$$31, []);
        if(v19260) {
          var v25037 = funcDecl$$31.fncFlags;
          var v25935 = TypeScript$$25.FncFlags;
          var v25038 = v25935.Signature;
          var v23108 = v25037 & v25038;
          v19260 = !v23108
        }
        var v13464 = v19260;
        var v19261 = !v13464;
        if(v19261) {
          v13464 = funcDecl$$31.isOverload
        }
        var v3447 = v13464;
        if(v3447) {
          funcTable$$1 = funcDecl$$31.symbols;
          var v23109 = funcDecl$$31.fncFlags;
          var v25039 = TypeScript$$25.FncFlags;
          var v23110 = v25039.Static;
          var v19262 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23109, v23110]);
          var v13465 = !v19262;
          if(v13465) {
            v13465 = fnType.containedScope
          }
          var v3443 = v13465;
          if(v3443) {
            this.scope = fnType.containedScope
          }
        }else {
          var v3444 = funcDecl$$31.bod;
          if(v3444) {
            this.scope = fnType.containedScope
          }
          ssb = this.scope;
          var v13466 = ssb;
          if(v13466) {
            v13466 = ssb.valueMembers
          }
          var v3446 = v13466;
          if(v3446) {
            var v3445 = ssb.valueMembers;
            funcTable$$1 = v3445.allMembers
          }
        }
      }
      var v13467 = funcDecl$$31.isConstructor;
      if(v13467) {
        var v19263 = funcDecl$$31.bod;
        if(v19263) {
          var v23111 = funcDecl$$31.fncFlags;
          var v25040 = TypeScript$$25.FncFlags;
          var v23112 = v25040.ClassMethod;
          v19263 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23111, v23112])
        }
        v13467 = v19263
      }
      var v3460 = v13467;
      if(v3460) {
        var v23113 = funcDecl$$31.classDecl;
        var v19264 = v23113.type;
        var v13468 = v19264.instanceType;
        var v3449 = v13468.typeFlags;
        var v13469 = TypeScript$$25.TypeFlags;
        var v3450 = v13469.HasBaseType;
        var hasBaseType = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3449, v3450]);
        var v3451 = !hasBaseType;
        var v13472 = !v3451;
        if(v13472) {
          var v25041 = funcDecl$$31.classDecl;
          var v23114 = v25041.type;
          var v19265 = v23114.instanceType;
          var v13470 = v19265.typeFlags;
          var v19266 = TypeScript$$25.TypeFlags;
          var v13471 = v19266.HasBaseTypeOfObject;
          v3451 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13470, v13471])
        }
        var noSuperCallAllowed = v3451;
        var v13473 = funcDecl$$31.classDecl;
        var v3452 = v13473.varFlags;
        var v13474 = TypeScript$$25.VarFlags;
        var v3453 = v13474.ClassSuperMustBeFirstCallInConstructor;
        var superCallMustBeFirst = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3452, v3453]);
        var v13475 = noSuperCallAllowed;
        if(v13475) {
          v13475 = JAMScript.call(this.classConstructorHasSuperCall, this, [funcDecl$$31])
        }
        var v3459 = v13475;
        if(v3459) {
          var v13476 = this.checker;
          var v3454 = v13476.errorReporter;
          JAMScript.call(v3454.simpleError, v3454, [funcDecl$$31, "Calls to 'super' constructor are not allowed in classes that either inherit directly from 'Object' or have no base class"])
        }else {
          if(hasBaseType) {
            if(superCallMustBeFirst) {
              var v19267 = funcDecl$$31.bod;
              var v13477 = !v19267;
              var v19269 = !v13477;
              if(v19269) {
                var v25936 = funcDecl$$31.bod;
                var v25042 = v25936.members;
                var v23115 = v25042.length;
                var v19268 = !v23115;
                var v23117 = !v19268;
                if(v23117) {
                  var v26833 = funcDecl$$31.bod;
                  var v26768 = v26833.members;
                  var v26662 = v26768[0];
                  var v26423 = v26662.nodeType;
                  var v26663 = TypeScript$$25.NodeType;
                  var v26424 = v26663.Call;
                  var v25937 = v26423 == v26424;
                  if(v25937) {
                    var v26880 = funcDecl$$31.bod;
                    var v26834 = v26880.members;
                    var v26769 = v26834[0];
                    var v26664 = v26769.target;
                    var v26425 = v26664.nodeType;
                    var v26665 = TypeScript$$25.NodeType;
                    var v26426 = v26665.Super;
                    v25937 = v26425 == v26426
                  }
                  var v25043 = v25937;
                  var v25939 = !v25043;
                  if(v25939) {
                    var v26666 = funcDecl$$31.bod;
                    var v26427 = v26666.flags;
                    var v26667 = TypeScript$$25.ASTFlags;
                    var v26428 = v26667.StrictMode;
                    var v25938 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v26427, v26428]);
                    if(v25938) {
                      var v26835 = funcDecl$$31.bod;
                      var v26770 = v26835.members;
                      var v26668 = v26770.length;
                      var v26429 = v26668 > 1;
                      if(v26429) {
                        var v26900 = funcDecl$$31.bod;
                        var v26881 = v26900.members;
                        var v26836 = v26881[1];
                        var v26771 = v26836.nodeType;
                        var v26837 = TypeScript$$25.NodeType;
                        var v26772 = v26837.Call;
                        var v26669 = v26771 == v26772;
                        if(v26669) {
                          var v26911 = funcDecl$$31.bod;
                          var v26901 = v26911.members;
                          var v26882 = v26901[1];
                          var v26838 = v26882.target;
                          var v26773 = v26838.nodeType;
                          var v26839 = TypeScript$$25.NodeType;
                          var v26774 = v26839.Super;
                          v26669 = v26773 == v26774
                        }
                        v26429 = v26669
                      }
                      v25938 = v26429
                    }
                    v25043 = v25938
                  }
                  var v23116 = v25043;
                  v19268 = !v23116
                }
                v13477 = v19268
              }
              var v3456 = v13477;
              if(v3456) {
                var v13478 = this.checker;
                var v3455 = v13478.errorReporter;
                JAMScript.call(v3455.simpleError, v3455, [funcDecl$$31, "If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor"])
              }
            }else {
              var v13479 = JAMScript.call(this.classConstructorHasSuperCall, this, [funcDecl$$31]);
              var v3458 = !v13479;
              if(v3458) {
                var v13480 = this.checker;
                var v3457 = v13480.errorReporter;
                JAMScript.call(v3457.simpleError, v3457, [funcDecl$$31, "Constructors for derived classes must contain a call to the class's 'super' constructor"])
              }
            }
          }
        }
      }
      var v13481 = JAMScript.call(funcDecl$$31.isMethod, funcDecl$$31, []);
      if(v13481) {
        var v19270 = funcDecl$$31.type;
        v13481 = v19270.enclosingType
      }
      var v3465 = v13481;
      if(v3465) {
        var enclosingClassNode = null;
        var v25940 = funcDecl$$31.type;
        var v25044 = v25940.enclosingType;
        var v23118 = v25044.symbol;
        var v19271 = v23118.declAST;
        var v13482 = v19271.nodeType;
        var v19272 = TypeScript$$25.NodeType;
        var v13483 = v19272.FuncDecl;
        var v3464 = v13482 == v13483;
        if(v3464) {
          var v23119 = funcDecl$$31.type;
          var v19273 = v23119.enclosingType;
          var v13484 = v19273.symbol;
          var v3461 = v13484.declAST;
          enclosingClassNode = v3461.classDecl
        }else {
          var v25941 = funcDecl$$31.type;
          var v25045 = v25941.enclosingType;
          var v23120 = v25045.symbol;
          var v19274 = v23120.declAST;
          var v13485 = v19274.nodeType;
          var v19275 = TypeScript$$25.NodeType;
          var v13486 = v19275.ClassDeclaration;
          var v3463 = v13485 == v13486;
          if(v3463) {
            var v19276 = funcDecl$$31.type;
            var v13487 = v19276.enclosingType;
            var v3462 = v13487.symbol;
            enclosingClassNode = v3462.declAST
          }
        }
        if(enclosingClassNode) {
          this.thisClassNode = enclosingClassNode
        }
      }
      var v3470 = fnType.enclosingType;
      if(v3470) {
        var v3466 = fnType.symbol;
        var enclosingSym = v3466.container;
        var v13488 = enclosingSym;
        if(v13488) {
          var v19277 = JAMScript.call(enclosingSym.isType, enclosingSym, []);
          if(v19277) {
            var v23121 = JAMScript.call(enclosingSym.getType, enclosingSym, []);
            v19277 = JAMScript.call(v23121.isClass, v23121, [])
          }
          v13488 = v19277
        }
        var v3467 = v13488;
        if(v3467) {
          enclosingSym = enclosingSym.container
        }
        var v13489 = enclosingSym;
        if(v13489) {
          var v19278 = enclosingSym.declAST;
          if(v19278) {
            var v25046 = enclosingSym.declAST;
            var v23122 = v25046.nodeType;
            var v25047 = TypeScript$$25.NodeType;
            var v23123 = v25047.ModuleDeclaration;
            v19278 = v23122 == v23123
          }
          v13489 = v19278
        }
        var v3469 = v13489;
        if(v3469) {
          var v3468 = this.checker;
          v3468.currentModDecl = enclosingSym.declAST
        }
      }
      var v13490 = funcDecl$$31.unitIndex;
      var v3474 = v13490 > 0;
      if(v3474) {
        var v19279 = this.checker;
        var v13491 = v19279.units;
        if(v13491) {
          var v19280 = funcDecl$$31.unitIndex;
          var v25048 = this.checker;
          var v23124 = v25048.units;
          var v19281 = v23124.length;
          v13491 = v19280 < v19281
        }
        var v3473 = v13491;
        if(v3473) {
          var v3471 = this.checker;
          var v19282 = this.checker;
          var v13492 = v19282.units;
          var v13493 = funcDecl$$31.unitIndex;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            v3471.locationInfo = v13492[v13493]
          }
        }else {
          var v3472 = this.checker;
          v3472.locationInfo = TypeScript$$25.unknownLocationInfo
        }
      }
      var v3475 = fnType.enclosingType;
      if(v3475) {
        this.thisType = fnType.enclosingType
      }else {
        this.thisType = prevThisType
      }
      var v3476 = signature$$10.parameters;
      var paramLen$$4 = v3476.length;
      var v19283 = funcDecl$$31.isConstructor;
      var v13494 = !v19283;
      if(v13494) {
        var v19284 = funcDecl$$31.bod;
        if(v19284) {
          var v23125 = JAMScript.call(funcDecl$$31.isSignature, funcDecl$$31, []);
          v19284 = !v23125
        }
        v13494 = v19284
      }
      var v3525 = v13494;
      if(v3525) {
        var tmpParamScope = this.scope;
        ssb = this.scope;
        var v19285 = JAMScript.call(funcDecl$$31.isMethod, funcDecl$$31, []);
        var v13495 = !v19285;
        if(v13495) {
          var v19286 = funcDecl$$31.returnTypeAnnotation;
          v13495 = v19286 == null
        }
        var v3494 = v13495;
        if(v3494) {
          var v13496 = prevScope$$4;
          if(v13496) {
            var v19287 = funcDecl$$31.name;
            if(v19287) {
              var v25049 = funcDecl$$31.name;
              var v23126 = JAMScript.call(v25049.isMissing, v25049, []);
              v19287 = !v23126
            }
            v13496 = v19287
          }
          var v3481 = v13496;
          if(v3481) {
            var v13497 = funcDecl$$31.name;
            var v3477 = v13497.text;
            var considerSym = JAMScript.call(prevScope$$4.findAmbient, prevScope$$4, [v3477, false, false]);
            var v13498 = considerSym;
            if(v13498) {
              var v19288 = considerSym.declAST;
              if(v19288) {
                var v23127 = considerSym.declAST;
                v19288 = v23127.type
              }
              v13498 = v19288
            }
            var v3480 = v13498;
            if(v3480) {
              var v3478 = this.checker;
              var v13499 = considerSym.declAST;
              var v3479 = v13499.type;
              JAMScript.call(v3478.setContextualType, v3478, [v3479, false])
            }
          }
          var v13500 = this.checker;
          var v3493 = JAMScript.call(v13500.hasTargetType, v13500, []);
          if(v3493) {
            var v3482 = this.checker;
            var candidateTypeContext = v3482.currentContextualTypeContext;
            var candidateType$$1 = candidateTypeContext.contextualType;
            var v13501 = this.checker;
            var v3492 = JAMScript.call(v13501.canContextuallyTypeFunction, v13501, [candidateType$$1, funcDecl$$31, true]);
            if(v3492) {
              var v3483;
              var v13502 = candidateType$$1.construct;
              if(v13502) {
                v3483 = candidateType$$1.construct
              }else {
                v3483 = candidateType$$1.call
              }
              var candidateSigs$$1 = v3483;
              var v3484 = candidateSigs$$1.signatures;
              candidateTypeContext.targetSig = v3484[0];
              var v3485 = candidateTypeContext.targetSig;
              var candidateParams = v3485.parameters;
              targetParams = candidateParams;
              var v13503 = candidateTypeContext.targetSig;
              var v3486 = v13503.returnType;
              targetReturnType$$1 = v3486.type;
              var v13504 = candidateTypeContext.targetSig;
              var v3489 = v13504.declAST;
              if(v3489) {
                var v19289 = candidateTypeContext.targetSig;
                var v13505 = v19289.declAST;
                var v3488 = v13505.isConstructor;
                if(v3488) {
                  funcDecl$$31.isTargetTypedAsMethod = true
                }else {
                  var v19290 = candidateTypeContext.targetSig;
                  var v13506 = v19290.declAST;
                  var v3487 = JAMScript.call(v13506.isMethod, v13506, []);
                  if(v3487) {
                    funcDecl$$31.isTargetTypedAsMethod = true
                  }
                }
              }
              fgSym$$4.type = candidateTypeContext.contextualType;
              acceptedContextualType = true
            }else {
              var v13507 = candidateType$$1;
              if(v13507) {
                v13507 = JAMScript.call(funcDecl$$31.isAccessor, funcDecl$$31, [])
              }
              var v3491 = v13507;
              if(v3491) {
                accessorType = candidateType$$1;
                candidateTypeContext.targetAccessorType = accessorType
              }else {
                var v3490 = this.checker;
                JAMScript.call(v3490.killCurrentContextualType, v3490, [])
              }
            }
          }
        }
        var paramTable = ssb.valueMembers;
        var v3495 = TypeScript$$25.SymbolScopeBuilder;
        var v26997 = JAMScript.new(v3495, [paramTable, null, null, null, prevScope$$4, container$$21]);
        this.scope = v26997;
        var p$$1 = 0;
        var v3508 = p$$1 < paramLen$$4;
        for(;v3508;) {
          var v3496 = signature$$10.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var symbol$$21 = v3496[p$$1]
          }
          var ast$$106 = symbol$$21.declAST;
          var v19291 = this.checker;
          var v13508 = JAMScript.call(v19291.hasTargetType, v19291, []);
          if(v13508) {
            var v19292 = targetParams;
            if(v19292) {
              var v26430 = this.checker;
              var v25942 = v26430.currentContextualTypeContext;
              var v25050 = v25942.targetSig;
              var v23128 = v25050.hasVariableArgList;
              var v25052 = !v23128;
              if(v25052) {
                var v25051 = targetParams.length;
                v23128 = p$$1 < v25051
              }
              v19292 = v23128
            }
            v13508 = v19292
          }
          var v3503 = v13508;
          if(v3503) {
            var v3497 = this.checker;
            candidateTypeContext = v3497.currentContextualTypeContext;
            var v3498 = candidateTypeContext.targetSig;
            var hasVarArgList = v3498.hasVariableArgList;
            var v3499 = ast$$106;
            var v13509;
            var v23129 = hasVarArgList;
            if(v23129) {
              var v25943 = targetParams.length;
              var v25053 = v25943 - 1;
              v23129 = p$$1 >= v25053
            }
            var v19295 = v23129;
            if(v19295) {
              var v25944 = targetParams.length;
              var v25054 = v25944 - 1;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v23130 = targetParams[v25054]
              }
              var v19293 = JAMScript.call(v23130.getType, v23130, []);
              v13509 = v19293.elementType
            }else {
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v19294 = targetParams[p$$1]
              }
              v13509 = JAMScript.call(v19294.getType, v19294, [])
            }
            v3499.type = v13509;
            var v3500 = ast$$106.sym;
            var v3501 = ast$$106.type;
            JAMScript.call(v3500.setType, v3500, [v3501]);
            var v3502 = ast$$106.sym;
            var v13510 = this.checker;
            var v26998 = JAMScript.call(v13510.getTypeCheckFinishedStatus, v13510, []);
            v3502.typeCheckStatus = v26998
          }else {
            JAMScript.call(this.typeCheck, this, [ast$$106])
          }
          var v3504 = isSetter$$4 && accessorType;
          if(v3504) {
            ast$$106 = JAMScript.call(this.cast, this, [ast$$106, accessorType])
          }
          symbol$$21.container = container$$21;
          var v3505 = JAMScript.call(symbol$$21.getType, symbol$$21, []);
          JAMScript.call(this.checkTypePrivacy, this, [v3505, container$$21, v1062]);
          var v3506 = paramTable.publicMembers;
          var v3507 = symbol$$21.name;
          JAMScript.call(v3506.add, v3506, [v3507, symbol$$21]);
          p$$1 = p$$1 + 1;
          v3508 = p$$1 < paramLen$$4
        }
        this.scope = tmpParamScope
      }else {
        var v3509 = funcDecl$$31.arguments;
        JAMScript.call(this.typeCheck, this, [v3509]);
        p$$1 = 0;
        var v3515 = p$$1 < paramLen$$4;
        for(;v3515;) {
          var v23131 = signature$$10.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19296 = v23131[p$$1]
          }
          var v13511 = v19296.parameter;
          var v3510 = v13511.typeLink;
          var v23132 = funcDecl$$31.arguments;
          var v19297 = v23132.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v13512 = v19297[p$$1]
          }
          v3510.type = v13512.type;
          var v19298 = signature$$10.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v13513 = v19298[p$$1]
          }
          var v3511 = JAMScript.call(v13513.getType, v13513, []);
          JAMScript.call(this.checkTypePrivacy, this, [v3511, container$$21, v1063]);
          var v23133 = funcDecl$$31.arguments;
          var v19299 = v23133.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v13514 = v19299[p$$1]
          }
          var v3514 = v13514.parameterPropertySym;
          if(v3514) {
            var v23134 = funcDecl$$31.arguments;
            var v19300 = v23134.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v13515 = v19300[p$$1]
            }
            var v3512 = v13515.parameterPropertySym;
            var v23135 = funcDecl$$31.arguments;
            var v19301 = v23135.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v13516 = v19301[p$$1]
            }
            var v3513 = v13516.type;
            JAMScript.call(v3512.setType, v3512, [v3513])
          }
          p$$1 = p$$1 + 1;
          v3515 = p$$1 < paramLen$$4
        }
        var v13517 = funcDecl$$31.fncFlags;
        var v19302 = TypeScript$$25.FncFlags;
        var v13518 = v19302.IndexerMember;
        var v3524 = v13517 & v13518;
        if(v3524) {
          var v13519 = !paramLen$$4;
          var v19303 = !v13519;
          if(v19303) {
            v13519 = paramLen$$4 > 1
          }
          var v3523 = v13519;
          if(v3523) {
            var v13520 = this.checker;
            var v3516 = v13520.errorReporter;
            JAMScript.call(v3516.simpleError, v3516, [funcDecl$$31, "Index signatures may take one and only one parameter"])
          }else {
            var v25055 = funcDecl$$31.arguments;
            var v23136 = v25055.members;
            var v19304 = v23136[0];
            var v13521 = v19304.type;
            var v19305 = this.checker;
            var v13522 = v19305.numberType;
            var v3522 = v13521 == v13522;
            if(v3522) {
              var v3517 = fnType.index;
              var v19306 = v3517.flags;
              var v23137 = TypeScript$$25.SignatureFlags;
              var v19307 = v23137.IsNumberIndexer;
              v3517.flags = v19306 | v19307
            }else {
              var v25056 = funcDecl$$31.arguments;
              var v23138 = v25056.members;
              var v19308 = v23138[0];
              var v13523 = v19308.type;
              var v19309 = this.checker;
              var v13524 = v19309.stringType;
              var v3521 = v13523 == v13524;
              if(v3521) {
                var v3518 = fnType.index;
                var v19310 = v3518.flags;
                var v23139 = TypeScript$$25.SignatureFlags;
                var v19311 = v23139.IsStringIndexer;
                v3518.flags = v19310 | v19311
              }else {
                var v13525 = this.checker;
                var v3519 = v13525.errorReporter;
                var v19312 = funcDecl$$31.arguments;
                var v13526 = v19312.members;
                var v3520 = v13526[0];
                JAMScript.call(v3519.simpleError, v3519, [v3520, "Index signatures may only take 'string' or 'number' as their parameter"])
              }
            }
          }
        }
      }
      var v13527 = funcDecl$$31.bod;
      if(v13527) {
        var v19313 = JAMScript.call(funcDecl$$31.isSignature, funcDecl$$31, []);
        v13527 = !v19313
      }
      var v3557 = v13527;
      if(v3557) {
        var v13528 = funcDecl$$31.isConstructor;
        var v3534 = !v13528;
        if(v3534) {
          JAMScript.call(this.addFormals, this, [container$$21, signature$$10, funcTable$$1])
        }else {
          var v13529 = funcDecl$$31.type;
          var v3526 = v13529.symbol;
          var v3527 = funcDecl$$31.arguments;
          var v13530 = funcDecl$$31.fncFlags;
          var v19314 = TypeScript$$25.FncFlags;
          var v13531 = v19314.ClassMethod;
          var v3528 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13530, v13531]);
          JAMScript.call(this.addConstructorLocalArgs, this, [v3526, v3527, funcTable$$1, v3528]);
          var v13532 = this.thisClassNode;
          if(v13532) {
            var v19315 = this.thisClassNode;
            v13532 = v19315.extendsList
          }
          var v3533 = v13532;
          if(v3533) {
            var tmpScope = this.scope;
            var v3529 = TypeScript$$25.ScopedMembers;
            var funcMembers$$1 = JAMScript.new(v3529, [funcTable$$1]);
            var v3530 = TypeScript$$25.FilteredSymbolScopeBuilder;
            var v13533 = funcDecl$$31.type;
            var v3531 = v13533.symbol;
            var v26999 = JAMScript.new(v3530, [funcMembers$$1, prevScope$$4, v3531, v1064]);
            this.scope = v26999;
            var v13534 = this.thisClassNode;
            var v3532 = v13534.extendsList;
            JAMScript.call(this.typeCheckBaseCalls, this, [v3532]);
            this.scope = tmpScope
          }
        }
        var v3535 = this.checker;
        var prevMod = v3535.currentModDecl;
        var v13535 = funcDecl$$31.type;
        if(v13535) {
          var v23140 = funcDecl$$31.type;
          var v19316 = v23140.symbol;
          if(v19316) {
            var v25057 = JAMScript.call(funcDecl$$31.isMethod, funcDecl$$31, []);
            var v23141 = !v25057;
            if(v23141) {
              var v25945 = funcDecl$$31.type;
              var v25058 = v25945.symbol;
              v23141 = v25058.declModule
            }
            v19316 = v23141
          }
          v13535 = v19316
        }
        var v3537 = v13535;
        if(v3537) {
          var v3536 = this.checker;
          var v19317 = funcDecl$$31.type;
          var v13536 = v19317.symbol;
          v3536.currentModDecl = v13536.declModule
        }
        if(acceptedContextualType) {
          var v3538 = this.checker;
          var v13537 = this.checker;
          var v3539 = JAMScript.call(v13537.inProvisionalTypecheckMode, v13537, []);
          JAMScript.call(v3538.setContextualType, v3538, [null, v3539])
        }
        var v3540 = funcDecl$$31.bod;
        JAMScript.call(this.typeCheck, this, [v3540]);
        if(acceptedContextualType) {
          var v3541 = this.checker;
          JAMScript.call(v3541.unsetContextualType, v3541, [])
        }
        var v3542 = this.checker;
        v3542.currentModDecl = prevMod;
        var v13538 = this.checker;
        var v3549 = v13538.checkControlFlow;
        if(v3549) {
          var cfg = JAMScript.call(funcDecl$$31.buildControlFlow, funcDecl$$31, []);
          var v13539 = this.checker;
          var v3544 = v13539.printControlFlowGraph;
          if(v3544) {
            var v19318 = this.checker;
            var v13540 = v19318.errorReporter;
            var v3543 = v13540.outfile;
            JAMScript.call(cfg.print, cfg, [v3543])
          }
          var v13541 = this.checker;
          var v3545 = v13541.errorReporter;
          JAMScript.call(cfg.reportUnreachable, cfg, [v3545]);
          var v13542 = this.checker;
          var v3548 = v13542.checkControlFlowUseDef;
          if(v3548) {
            var v13543 = this.checker;
            var v3546 = v13543.errorReporter;
            var v13544 = funcDecl$$31.type;
            var v3547 = v13544.symbol;
            JAMScript.call(cfg.useDef, cfg, [v3546, v3547])
          }
        }
        var v3556 = funcDecl$$31.isConstructor;
        if(v3556) {
          var fns$$1 = funcDecl$$31.scopes;
          var v3550 = fns$$1.members;
          var fnsLen$$1 = v3550.length;
          var freeVars$$2;
          var sym$$38;
          var j$$15 = 0;
          var v3555 = j$$15 < fnsLen$$1;
          for(;v3555;) {
            var v3551 = fns$$1.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var fn$$9 = v3551[j$$15]
            }
            var v13545 = JAMScript.call(fn$$9.isSignature, fn$$9, []);
            var v3554 = !v13545;
            if(v3554) {
              var v19319 = fn$$9.fncFlags;
              var v23142 = TypeScript$$25.FncFlags;
              var v19320 = v23142.Method;
              var v13546 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19319, v19320]);
              if(v13546) {
                var v23143 = fn$$9.fncFlags;
                var v25059 = TypeScript$$25.FncFlags;
                var v23144 = v25059.Static;
                var v19321 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23143, v23144]);
                v13546 = !v19321
              }
              var v3553 = v13546;
              if(v3553) {
                var v13547 = funcDecl$$31.type;
                var v3552 = v13547.symbol;
                JAMScript.call(this.checkPromoteFreeVars, this, [fn$$9, v3552])
              }
            }
            j$$15 = j$$15 + 1;
            v3555 = j$$15 < fnsLen$$1
          }
        }
      }
      this.scope = prevScope$$4;
      this.thisFnc = prevFnc;
      this.thisClassNode = prevClassNode;
      this.enclosingFncIsMethod = prevMethodStatus$$2;
      this.thisType = prevThisType;
      var v3558 = this.checker;
      v3558.locationInfo = prevLocationInfo$$2;
      var v3559 = this.checker;
      v3559.currentModDecl = prevModDecl$$1;
      var v3560 = signature$$10;
      var v13548 = this.checker;
      var v27000 = JAMScript.call(v13548.getTypeCheckFinishedStatus, v13548, []);
      v3560.typeCheckStatus = v27000;
      var v3568 = funcDecl$$31.returnTypeAnnotation;
      if(v3568) {
        var v13549 = funcDecl$$31.returnTypeAnnotation;
        var v3561 = v13549.type;
        var v3562 = funcDecl$$31.returnTypeAnnotation;
        JAMScript.call(this.checkForVoidConstructor, this, [v3561, v3562]);
        var v19322 = signature$$10.returnType;
        var v13550 = v19322.type;
        var v3566 = v13550 == null;
        if(v3566) {
          var v3563 = this.checker;
          var v3564 = this.scope;
          var v3565 = signature$$10.returnType;
          JAMScript.call(v3563.resolveTypeLink, v3563, [v3564, v3565, false])
        }
      }else {
        if(targetReturnType$$1) {
          var v3567 = signature$$10.returnType;
          v3567.type = targetReturnType$$1
        }
      }
      var v23145 = fgSym$$4.flags;
      var v25060 = TypeScript$$25.SymbolFlags;
      var v23146 = v25060.RecursivelyReferenced;
      var v19323 = v23145 & v23146;
      var v13551 = !v19323;
      if(v13551) {
        var v23147 = funcDecl$$31.returnStatementsWithExpressions;
        var v19324 = v23147.length;
        v13551 = v19324 > 0
      }
      var v3576 = v13551;
      if(v3576) {
        var collection$$2 = {getLength:v1065, setTypeAtIndex:v1066, getTypeAtIndex:v1067};
        var v13552 = funcDecl$$31.returnStatementsWithExpressions;
        var v3569 = v13552[0];
        var bestCommonReturnType = v3569.type;
        var v3570 = this.checker;
        bestCommonReturnType = JAMScript.call(v3570.findBestCommonType, v3570, [bestCommonReturnType, null, collection$$2, true]);
        if(bestCommonReturnType) {
          var v3571 = signature$$10.returnType;
          var v13553 = this.checker;
          var v27001 = JAMScript.call(v13553.widenType, v13553, [bestCommonReturnType]);
          v3571.type = v27001
        }else {
          var i$$100 = 0;
          var v19325 = funcDecl$$31.returnStatementsWithExpressions;
          var v13554 = v19325.length;
          var v3574 = i$$100 < v13554;
          for(;v3574;) {
            var v13555 = this.checker;
            var v3572 = v13555.errorReporter;
            var v13556 = funcDecl$$31.returnStatementsWithExpressions;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v3573 = v13556[i$$100]
            }
            JAMScript.call(v3572.simpleError, v3572, [v3573, "Incompatible return type"]);
            i$$100 = i$$100 + 1;
            var v19326 = funcDecl$$31.returnStatementsWithExpressions;
            var v13557 = v19326.length;
            v3574 = i$$100 < v13557
          }
          var v3575 = signature$$10.returnType;
          v3575.type = this.anyType
        }
      }
      var onlyHasThrow = false;
      var v19327 = signature$$10.returnType;
      var v13558 = v19327.type;
      var v3591 = v13558 == null;
      if(v3591) {
        var v13559 = funcDecl$$31.fncFlags;
        var v19328 = TypeScript$$25.FncFlags;
        var v13560 = v19328.HasReturnExpression;
        var v3581 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13559, v13560]);
        if(v3581) {
          var v19329 = this.checker;
          var v13561 = v19329.styleSettings;
          var v3578 = v13561.implicitAny;
          if(v3578) {
            var v13562 = this.checker;
            var v3577 = v13562.errorReporter;
            JAMScript.call(v3577.styleError, v3577, [funcDecl$$31, "type implicitly set to 'any'"])
          }
          var v3579 = signature$$10.returnType;
          v3579.type = this.anyType
        }else {
          var v3580 = signature$$10.returnType;
          v3580.type = this.voidType
        }
      }else {
        var v23148 = signature$$10.returnType;
        var v19330 = v23148.type;
        var v19331 = this.nullType;
        var v13563 = v19330 == v19331;
        var v19334 = !v13563;
        if(v19334) {
          var v23149 = signature$$10.returnType;
          var v19332 = v23149.type;
          var v23150 = this.checker;
          var v19333 = v23150.undefinedType;
          v13563 = v19332 == v19333
        }
        var v3590 = v13563;
        if(v3590) {
          var v3582 = signature$$10.returnType;
          v3582.type = this.anyType
        }else {
          var v23151 = signature$$10.returnType;
          var v19335 = v23151.type;
          var v19336 = this.voidType;
          var v13564 = v19335 != v19336;
          if(v13564) {
            var v25061 = signature$$10.returnType;
            var v23152 = v25061.type;
            var v25062 = this.checker;
            var v23153 = v25062.undefinedType;
            var v19337 = v23152 != v23153;
            if(v19337) {
              var v25063 = signature$$10.returnType;
              var v23154 = v25063.type;
              var v23155 = this.anyType;
              v19337 = v23154 != v23155
            }
            v13564 = v19337
          }
          var v3589 = v13564;
          if(v3589) {
            var v19338 = JAMScript.call(funcDecl$$31.isSignature, funcDecl$$31, []);
            var v13565 = !v19338;
            if(v13565) {
              var v23156 = funcDecl$$31.isConstructor;
              var v19339 = !v23156;
              if(v19339) {
                var v25946 = funcDecl$$31.fncFlags;
                var v26431 = TypeScript$$25.FncFlags;
                var v25947 = v26431.HasReturnExpression;
                var v25064 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v25946, v25947]);
                var v23157 = !v25064;
                if(v23157) {
                  var v25948 = funcDecl$$31.fncFlags;
                  var v26432 = TypeScript$$25.FncFlags;
                  var v25949 = v26432.IsFatArrowFunction;
                  var v25065 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v25948, v25949]);
                  v23157 = !v25065
                }
                v19339 = v23157
              }
              v13565 = v19339
            }
            var v3587 = v13565;
            if(v3587) {
              var v23158 = funcDecl$$31.bod;
              var v19340 = v23158.members;
              var v13566 = v19340.length;
              var v3583 = v13566 > 0;
              if(v3583) {
                var v25066 = funcDecl$$31.bod;
                var v23159 = v25066.members;
                var v19341 = v23159[0];
                var v13567 = v19341.nodeType;
                var v19342 = TypeScript$$25.NodeType;
                var v13568 = v19342.Throw;
                v3583 = v13567 == v13568
              }
              onlyHasThrow = v3583;
              var v3586 = !onlyHasThrow;
              if(v3586) {
                var v13569 = this.checker;
                var v3584 = v13569.errorReporter;
                var v13570 = funcDecl$$31.returnTypeAnnotation;
                var v19343 = !v13570;
                if(v19343) {
                  v13570 = funcDecl$$31
                }
                var v3585 = v13570;
                JAMScript.call(v3584.simpleError, v3584, [v3585, "Function declared a non-void return type, but has no return expression"])
              }
            }
            var v13571 = signature$$10.returnType;
            var v3588 = v13571.type;
            JAMScript.call(this.checkTypePrivacy, this, [v3588, container$$21, v1068])
          }
        }
      }
      var v3604 = funcDecl$$31.accessorSymbol;
      if(v3604) {
        var v3592 = funcDecl$$31.accessorSymbol;
        accessorType = JAMScript.call(v3592.getType, v3592, []);
        var v13572 = !onlyHasThrow;
        if(v13572) {
          var v23160 = funcDecl$$31.fncFlags;
          var v25067 = TypeScript$$25.FncFlags;
          var v23161 = v25067.GetAccessor;
          var v19344 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23160, v23161]);
          if(v19344) {
            var v25068 = funcDecl$$31.fncFlags;
            var v25950 = TypeScript$$25.FncFlags;
            var v25069 = v25950.HasReturnExpression;
            var v23162 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v25068, v25069]);
            v19344 = !v23162
          }
          v13572 = v19344
        }
        var v3594 = v13572;
        if(v3594) {
          var v13573 = this.checker;
          var v3593 = v13573.errorReporter;
          JAMScript.call(v3593.simpleError, v3593, [funcDecl$$31, "Getters must return a value"])
        }
        if(accessorType) {
          var v23163 = funcDecl$$31.fncFlags;
          var v25070 = TypeScript$$25.FncFlags;
          var v23164 = v25070.GetAccessor;
          var v19345 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23163, v23164]);
          if(v19345) {
            var v25071 = signature$$10.returnType;
            var v23165 = v25071.type;
            v19345 = accessorType != v23165
          }
          var v13574 = v19345;
          var v19347 = !v13574;
          if(v19347) {
            var v25951 = funcDecl$$31.arguments;
            var v25072 = v25951.members;
            var v23166 = v25072.length;
            var v19346 = v23166 > 0;
            if(v19346) {
              var v26433 = funcDecl$$31.arguments;
              var v25952 = v26433.members;
              var v25073 = v25952[0];
              var v23167 = v25073.type;
              v19346 = accessorType != v23167
            }
            v13574 = v19346
          }
          var v3596 = v13574;
          if(v3596) {
            var v13575 = this.checker;
            var v3595 = v13575.errorReporter;
            JAMScript.call(v3595.simpleError, v3595, [funcDecl$$31, "Getter and setter types do not agree"])
          }
        }else {
          var v13576 = funcDecl$$31.fncFlags;
          var v19348 = TypeScript$$25.FncFlags;
          var v13577 = v19348.GetAccessor;
          var v3603 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13576, v13577]);
          if(v3603) {
            var v3597 = funcDecl$$31.accessorSymbol;
            var v13578 = signature$$10.returnType;
            var v3598 = v13578.type;
            JAMScript.call(v3597.setType, v3597, [v3598])
          }else {
            var v23168 = funcDecl$$31.arguments;
            var v19349 = v23168.members;
            var v13579 = v19349.length;
            var v3602 = v13579 != 1;
            if(v3602) {
              var v13580 = this.checker;
              var v3599 = v13580.errorReporter;
              JAMScript.call(v3599.simpleError, v3599, [funcDecl$$31, "Setters may have one and only one argument"])
            }else {
              var v3600 = funcDecl$$31.accessorSymbol;
              var v23169 = funcDecl$$31.arguments;
              var v19350 = v23169.members;
              var v13581 = v19350[0];
              var v3601 = v13581.type;
              JAMScript.call(v3600.setType, v3600, [v3601])
            }
          }
        }
      }
      JAMScript.call(this.typeCheckOverloadSignatures, this, [fnType, funcDecl$$31]);
      return funcDecl$$31
    }
    function v1061(funcDecl$$30, signature$$9, typeName$$7, isModuleName$$6) {
      var reportOnFuncDecl = false;
      var v19351 = funcDecl$$30.returnTypeAnnotation;
      var v13582 = v19351 != null;
      if(v13582) {
        var v23170 = funcDecl$$30.returnTypeAnnotation;
        var v19352 = v23170.type;
        var v23171 = signature$$9.returnType;
        var v19353 = v23171.type;
        v13582 = v19352 == v19353
      }
      var v3606 = v13582;
      if(v3606) {
        var v3605 = funcDecl$$30.returnTypeAnnotation;
        JAMScript.call(this.returnTypePrivacyError, this, [v3605, funcDecl$$30, typeName$$7, isModuleName$$6])
      }
      var i$$99 = 0;
      var v19354 = funcDecl$$30.returnStatementsWithExpressions;
      var v13583 = v19354.length;
      var v3609 = i$$99 < v13583;
      for(;v3609;) {
        var v23172 = funcDecl$$30.returnStatementsWithExpressions;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v19355 = v23172[i$$99]
        }
        var v13584 = v19355.type;
        var v19356 = signature$$9.returnType;
        var v13585 = v19356.type;
        var v3608 = v13584 == v13585;
        if(v3608) {
          var v13586 = funcDecl$$30.returnStatementsWithExpressions;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v3607 = v13586[i$$99]
          }
          JAMScript.call(this.returnTypePrivacyError, this, [v3607, funcDecl$$30, typeName$$7, isModuleName$$6])
        }else {
          reportOnFuncDecl = true
        }
        i$$99 = i$$99 + 1;
        var v19357 = funcDecl$$30.returnStatementsWithExpressions;
        var v13587 = v19357.length;
        v3609 = i$$99 < v13587
      }
      if(reportOnFuncDecl) {
        JAMScript.call(this.returnTypePrivacyError, this, [funcDecl$$30, funcDecl$$30, typeName$$7, isModuleName$$6])
      }
      return
    }
    function v1060(astError, funcDecl$$29, typeName$$6, isModuleName$$5) {
      var v3610 = JAMScript.call(funcDecl$$29.isAccessor, funcDecl$$29, []);
      if(v3610) {
        var v13588 = funcDecl$$29.fncFlags;
        var v19358 = TypeScript$$25.FncFlags;
        var v13589 = v19358.GetAccessor;
        v3610 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13588, v13589])
      }
      var isGetter$$3 = v3610;
      var v3611 = JAMScript.call(funcDecl$$29.isAccessor, funcDecl$$29, []);
      if(v3611) {
        var v13590 = funcDecl$$29.fncFlags;
        var v19359 = TypeScript$$25.FncFlags;
        var v13591 = v19359.SetAccessor;
        v3611 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13590, v13591])
      }
      var isSetter$$3 = v3611;
      var v3612 = funcDecl$$29.fncFlags;
      var v13592 = TypeScript$$25.FncFlags;
      var v3613 = v13592.Public;
      var isPublicFunc$$1 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3612, v3613]);
      var v19360 = funcDecl$$29.type;
      var v13593 = v19360.symbol;
      var v13594 = this.checker;
      var v3614 = JAMScript.call(v13593.getInterfaceDeclFromSymbol, v13593, [v13594]);
      var isContainerInterface$$1 = v3614 != null;
      var typestring$$3 = "";
      if(isModuleName$$5) {
        var quotestring$$3 = "";
        var v13595 = JAMScript.call(TypeScript$$25.isQuoted, TypeScript$$25, [typeName$$6]);
        var v3615 = !v13595;
        if(v3615) {
          quotestring$$3 = "'"
        }
        var v13596 = " is using inaccessible module " + quotestring$$3;
        var v3616 = v13596 + typeName$$6;
        typestring$$3 = v3616 + quotestring$$3
      }else {
        var v3617 = " has or is using private type '" + typeName$$6;
        typestring$$3 = v3617 + "'"
      }
      var v3634 = !isContainerInterface$$1;
      if(v3634) {
        if(isGetter$$3) {
          var v13597 = this.checker;
          var v3618 = v13597.errorReporter;
          var v23173;
          if(isPublicFunc$$1) {
            v23173 = "public"
          }else {
            v23173 = "exported"
          }
          var v19361 = v23173;
          var v13598 = v19361 + " getter return type";
          var v3619 = v13598 + typestring$$3;
          JAMScript.call(v3618.simpleError, v3618, [astError, v3619])
        }else {
          var v3622 = !isSetter$$3;
          if(v3622) {
            var v13599 = this.checker;
            var v3620 = v13599.errorReporter;
            var v23174;
            if(isPublicFunc$$1) {
              v23174 = "public"
            }else {
              v23174 = "exported"
            }
            var v19362 = v23174;
            var v13600 = v19362 + " function return type";
            var v3621 = v13600 + typestring$$3;
            JAMScript.call(v3620.simpleError, v3620, [astError, v3621])
          }
        }
      }else {
        var v3633 = JAMScript.call(funcDecl$$29.isConstructMember, funcDecl$$29, []);
        if(v3633) {
          var v13601 = this.checker;
          var v3623 = v13601.errorReporter;
          var v3624 = "exported interface's constructor return type" + typestring$$3;
          JAMScript.call(v3623.simpleError, v3623, [astError, v3624])
        }else {
          var v3632 = JAMScript.call(funcDecl$$29.isCallMember, funcDecl$$29, []);
          if(v3632) {
            var v13602 = this.checker;
            var v3625 = v13602.errorReporter;
            var v3626 = "exported interface's call return type" + typestring$$3;
            JAMScript.call(v3625.simpleError, v3625, [astError, v3626])
          }else {
            var v3631 = JAMScript.call(funcDecl$$29.isIndexerMember, funcDecl$$29, []);
            if(v3631) {
              var v13603 = this.checker;
              var v3627 = v13603.errorReporter;
              var v3628 = "exported interface's indexer return type" + typestring$$3;
              JAMScript.call(v3627.simpleError, v3627, [astError, v3628])
            }else {
              var v13604 = this.checker;
              var v3629 = v13604.errorReporter;
              var v3630 = "exported interface's function return type" + typestring$$3;
              JAMScript.call(v3629.simpleError, v3629, [astError, v3630])
            }
          }
        }
      }
      return
    }
    function v1059(funcDecl$$28, p, paramSymbol, typeName$$5, isModuleName$$4) {
      var v3635 = JAMScript.call(funcDecl$$28.isAccessor, funcDecl$$28, []);
      if(v3635) {
        var v13605 = funcDecl$$28.fncFlags;
        var v19363 = TypeScript$$25.FncFlags;
        var v13606 = v19363.GetAccessor;
        v3635 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13605, v13606])
      }
      var isGetter$$2 = v3635;
      var v3636 = JAMScript.call(funcDecl$$28.isAccessor, funcDecl$$28, []);
      if(v3636) {
        var v13607 = funcDecl$$28.fncFlags;
        var v19364 = TypeScript$$25.FncFlags;
        var v13608 = v19364.SetAccessor;
        v3636 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13607, v13608])
      }
      var isSetter$$2 = v3636;
      var v3637 = funcDecl$$28.fncFlags;
      var v13609 = TypeScript$$25.FncFlags;
      var v3638 = v13609.Public;
      var isPublicFunc = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3637, v3638]);
      var v19365 = funcDecl$$28.type;
      var v13610 = v19365.symbol;
      var v13611 = this.checker;
      var v3639 = JAMScript.call(v13610.getInterfaceDeclFromSymbol, v13610, [v13611]);
      var isContainerInterface = v3639 != null;
      var typestring$$2 = "";
      if(isModuleName$$4) {
        var quotestring$$2 = "";
        var v13612 = JAMScript.call(TypeScript$$25.isQuoted, TypeScript$$25, [typeName$$5]);
        var v3640 = !v13612;
        if(v3640) {
          quotestring$$2 = "'"
        }
        var v13613 = " is using inaccessible module " + quotestring$$2;
        var v3641 = v13613 + typeName$$5;
        typestring$$2 = v3641 + quotestring$$2
      }else {
        var v3642 = " has or is using private type '" + typeName$$5;
        typestring$$2 = v3642 + "'"
      }
      var v3666 = !isContainerInterface;
      if(v3666) {
        var v3653 = funcDecl$$28.isConstructor;
        if(v3653) {
          var v13614 = this.checker;
          var v3643 = v13614.errorReporter;
          var v19366 = funcDecl$$28.arguments;
          var v13615 = v19366.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v3644 = v13615[p]
          }
          var v23175 = paramSymbol.name;
          var v19367 = "exported class's constructor parameter '" + v23175;
          var v13616 = v19367 + "'";
          var v3645 = v13616 + typestring$$2;
          JAMScript.call(v3643.simpleError, v3643, [v3644, v3645])
        }else {
          if(isSetter$$2) {
            var v13617 = this.checker;
            var v3646 = v13617.errorReporter;
            var v19368 = funcDecl$$28.arguments;
            var v13618 = v19368.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v3647 = v13618[p]
            }
            var v25953;
            if(isPublicFunc) {
              v25953 = "public"
            }else {
              v25953 = "exported"
            }
            var v25074 = v25953;
            var v23176 = v25074 + " setter parameter '";
            var v23177 = paramSymbol.name;
            var v19369 = v23176 + v23177;
            var v13619 = v19369 + "'";
            var v3648 = v13619 + typestring$$2;
            JAMScript.call(v3646.simpleError, v3646, [v3647, v3648])
          }else {
            var v3652 = !isGetter$$2;
            if(v3652) {
              var v13620 = this.checker;
              var v3649 = v13620.errorReporter;
              var v19370 = funcDecl$$28.arguments;
              var v13621 = v19370.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v3650 = v13621[p]
              }
              var v25954;
              if(isPublicFunc) {
                v25954 = "public"
              }else {
                v25954 = "exported"
              }
              var v25075 = v25954;
              var v23178 = v25075 + " function parameter '";
              var v23179 = paramSymbol.name;
              var v19371 = v23178 + v23179;
              var v13622 = v19371 + "'";
              var v3651 = v13622 + typestring$$2;
              JAMScript.call(v3649.simpleError, v3649, [v3650, v3651])
            }
          }
        }
      }else {
        var v3665 = JAMScript.call(funcDecl$$28.isConstructMember, funcDecl$$28, []);
        if(v3665) {
          var v13623 = this.checker;
          var v3654 = v13623.errorReporter;
          var v19372 = funcDecl$$28.arguments;
          var v13624 = v19372.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v3655 = v13624[p]
          }
          var v23180 = paramSymbol.name;
          var v19373 = "exported interface's constructor parameter '" + v23180;
          var v13625 = v19373 + "'";
          var v3656 = v13625 + typestring$$2;
          JAMScript.call(v3654.simpleError, v3654, [v3655, v3656])
        }else {
          var v3664 = JAMScript.call(funcDecl$$28.isCallMember, funcDecl$$28, []);
          if(v3664) {
            var v13626 = this.checker;
            var v3657 = v13626.errorReporter;
            var v19374 = funcDecl$$28.arguments;
            var v13627 = v19374.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v3658 = v13627[p]
            }
            var v23181 = paramSymbol.name;
            var v19375 = "exported interface's call parameter '" + v23181;
            var v13628 = v19375 + "'";
            var v3659 = v13628 + typestring$$2;
            JAMScript.call(v3657.simpleError, v3657, [v3658, v3659])
          }else {
            var v13629 = JAMScript.call(funcDecl$$28.isIndexerMember, funcDecl$$28, []);
            var v3663 = !v13629;
            if(v3663) {
              var v13630 = this.checker;
              var v3660 = v13630.errorReporter;
              var v19376 = funcDecl$$28.arguments;
              var v13631 = v19376.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v3661 = v13631[p]
              }
              var v23182 = paramSymbol.name;
              var v19377 = "exported interface's function parameter '" + v23182;
              var v13632 = v19377 + "'";
              var v3662 = v13632 + typestring$$2;
              JAMScript.call(v3660.simpleError, v3660, [v3661, v3662])
            }
          }
        }
      }
      return
    }
    function v1058(sgroup, declSymbol$$4, errorCallback$$6) {
      if(sgroup) {
        var v3667 = sgroup.signatures;
        var len$$47 = v3667.length;
        var i$$98 = 0;
        var v19378 = sgroup.signatures;
        var v13633 = v19378.length;
        var v3676 = i$$98 < v13633;
        for(;v3676;) {
          var v3668 = sgroup.signatures;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var signature$$8 = v3668[i$$98]
          }
          var v13634 = len$$47 > 1;
          if(v13634) {
            var v19379 = sgroup.definitionSignature;
            v13634 = signature$$8 == v19379
          }
          var v3669 = v13634;
          if(v3669) {
            i$$98 = i$$98 + 1;
            var v19380 = sgroup.signatures;
            var v13635 = v19380.length;
            v3676 = i$$98 < v13635;
            continue
          }
          var v3671 = signature$$8.returnType;
          if(v3671) {
            var v13636 = signature$$8.returnType;
            var v3670 = v13636.type;
            JAMScript.call(this.checkTypePrivacy, this, [v3670, declSymbol$$4, errorCallback$$6])
          }
          var v3672 = signature$$8.parameters;
          var paramLen$$3 = v3672.length;
          var j$$14 = 0;
          var v3675 = j$$14 < paramLen$$3;
          for(;v3675;) {
            var v3673 = signature$$8.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var param$$7 = v3673[j$$14]
            }
            var v3674 = JAMScript.call(param$$7.getType, param$$7, []);
            JAMScript.call(this.checkTypePrivacy, this, [v3674, declSymbol$$4, errorCallback$$6]);
            j$$14 = j$$14 + 1;
            v3675 = j$$14 < paramLen$$3
          }
          i$$98 = i$$98 + 1;
          var v19381 = sgroup.signatures;
          var v13637 = v19381.length;
          v3676 = i$$98 < v13637
        }
      }
      return
    }
    function v1057(type$$50, declSymbol$$3, errorCallback$$5) {
      function v1056(key$$43, s$$26, unused) {
        var sym$$37 = s$$26;
        var v19382 = sym$$37.flags;
        var v23183 = TypeScript$$25.SymbolFlags;
        var v19383 = v23183.BuiltIn;
        var v13638 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19382, v19383]);
        var v3678 = !v13638;
        if(v3678) {
          var v3677 = JAMScript.call(sym$$37.getType, sym$$37, []);
          JAMScript.call(_this$$9.checkTypePrivacy, _this$$9, [v3677, declSymbol$$3, errorCallback$$5])
        }
        return
      }
      var _this$$9 = this;
      var v19384 = type$$50;
      if(v19384) {
        var v23184 = type$$50.primitiveTypeClass;
        var v25076 = TypeScript$$25.Primitive;
        var v23185 = v25076.None;
        v19384 = v23184 == v23185
      }
      var v13639 = v19384;
      var v3679 = !v13639;
      if(v3679) {
        return
      }
      var v3681 = JAMScript.call(type$$50.isArray, type$$50, []);
      if(v3681) {
        var v3680 = type$$50.elementType;
        return JAMScript.call(this.checkTypePrivacy, this, [v3680, declSymbol$$3, errorCallback$$5])
      }
      var v13640 = type$$50.symbol;
      if(v13640) {
        var v23186 = type$$50.symbol;
        var v19385 = v23186.name;
        if(v19385) {
          var v25955 = type$$50.symbol;
          var v25077 = v25955.name;
          var v23187 = v25077 != "_anonymous";
          if(v23187) {
            var v26434 = type$$50.call;
            var v25956 = v26434 == null;
            if(v25956) {
              var v26670 = type$$50.construct;
              var v26435 = v26670 == null;
              if(v26435) {
                var v26671 = type$$50.index;
                v26435 = v26671 == null
              }
              v25956 = v26435
            }
            var v25078 = v25956;
            var v25958 = !v25078;
            if(v25958) {
              var v25957 = type$$50.members;
              if(v25957) {
                var v26436 = JAMScript.call(type$$50.isClass, type$$50, []);
                v25957 = !v26436
              }
              v25078 = v25957
            }
            v23187 = v25078
          }
          v19385 = v23187
        }
        v13640 = v19385
      }
      var v3683 = v13640;
      if(v3683) {
        var v3682 = type$$50.symbol;
        return JAMScript.call(this.checkSymbolPrivacy, this, [v3682, declSymbol$$3, errorCallback$$5])
      }
      var v3685 = type$$50.members;
      if(v3685) {
        var v13641 = type$$50.members;
        var v3684 = v13641.allMembers;
        JAMScript.call(v3684.map, v3684, [v1056, null])
      }
      var v3686 = type$$50.call;
      JAMScript.call(this.checkSignatureGroupPrivacy, this, [v3686, declSymbol$$3, errorCallback$$5]);
      var v3687 = type$$50.construct;
      JAMScript.call(this.checkSignatureGroupPrivacy, this, [v3687, declSymbol$$3, errorCallback$$5]);
      var v3688 = type$$50.index;
      JAMScript.call(this.checkSignatureGroupPrivacy, this, [v3688, declSymbol$$3, errorCallback$$5]);
      return
    }
    function v1055(typeSymbol$$5, declSymbol$$2, errorCallback$$4) {
      var externalModuleSymbol = null;
      var declSymbolPath = null;
      var v13642 = this.checker;
      var v3696 = JAMScript.call(typeSymbol$$5.isExternallyVisible, typeSymbol$$5, [v13642]);
      if(v3696) {
        var typeSymbolPath = JAMScript.call(typeSymbol$$5.pathToRoot, typeSymbol$$5, []);
        declSymbolPath = JAMScript.call(declSymbol$$2.pathToRoot, declSymbol$$2, []);
        var typeSymbolLength = typeSymbolPath.length;
        var declSymbolPathLength = declSymbolPath.length;
        var v3694 = typeSymbolLength > 0;
        if(v3694) {
          var v25079 = typeSymbolLength - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23188 = typeSymbolPath[v25079]
          }
          var v19386 = JAMScript.call(v23188.getType, v23188, []);
          var v13643 = JAMScript.call(v19386.isModuleType, v19386, []);
          if(v13643) {
            var v25080 = typeSymbolLength - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v23189 = typeSymbolPath[v25080]
            }
            var v19387 = v23189.isDynamic;
            if(v19387) {
              var v25081 = typeSymbolLength - 1;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v23190 = typeSymbolPath[v25081]
              }
              var v25082 = declSymbolPathLength - 1;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v23191 = declSymbolPath[v25082]
              }
              v19387 = v23190 != v23191
            }
            v13643 = v19387
          }
          var v3693 = v13643;
          if(v3693) {
            var v3689 = typeSymbolLength - 1;
            externalModuleSymbol = typeSymbolPath[v3689]
          }else {
            var v3692 = typeSymbolLength > 1;
            if(v3692) {
              var v25083 = typeSymbolLength - 2;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v23192 = typeSymbolPath[v25083]
              }
              var v19388 = JAMScript.call(v23192.getType, v23192, []);
              var v13644 = JAMScript.call(v19388.isModuleType, v19388, []);
              if(v13644) {
                var v25084 = typeSymbolLength - 2;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v23193 = typeSymbolPath[v25084]
                }
                var v19389 = v23193.isDynamic;
                if(v19389) {
                  var v23194 = declSymbolPathLength == 1;
                  var v25087 = !v23194;
                  if(v25087) {
                    var v25959 = typeSymbolLength - 2;
                    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                      var v25085 = typeSymbolPath[v25959]
                    }
                    var v25960 = declSymbolPathLength - 2;
                    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                      var v25086 = declSymbolPath[v25960]
                    }
                    v23194 = v25085 != v25086
                  }
                  v19389 = v23194
                }
                v13644 = v19389
              }
              var v3691 = v13644;
              if(v3691) {
                var v3690 = typeSymbolLength - 2;
                externalModuleSymbol = typeSymbolPath[v3690]
              }
            }
          }
        }
        var v3695 = externalModuleSymbol == null;
        if(v3695) {
          return
        }
      }
      var v3697 = this.checker;
      var interfaceDecl$$5 = JAMScript.call(declSymbol$$2.getInterfaceDeclFromSymbol, declSymbol$$2, [v3697]);
      var v13645 = interfaceDecl$$5;
      if(v13645) {
        var v23195 = interfaceDecl$$5.varFlags;
        var v25088 = TypeScript$$25.VarFlags;
        var v23196 = v25088.Exported;
        var v19390 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23195, v23196]);
        v13645 = !v19390
      }
      var v3698 = v13645;
      if(v3698) {
        return
      }
      var checkVisibilitySymbol = declSymbol$$2;
      var varDecl$$18 = JAMScript.call(declSymbol$$2.getVarDeclFromSymbol, declSymbol$$2, []);
      if(varDecl$$18) {
        var v13646 = varDecl$$18.varFlags;
        var v19391 = TypeScript$$25.VarFlags;
        var v13647 = v19391.Private;
        var v3700 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13646, v13647]);
        if(v3700) {
          return
        }else {
          var v13648 = varDecl$$18.varFlags;
          var v19392 = TypeScript$$25.VarFlags;
          var v13649 = v19392.Public;
          var v3699 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13648, v13649]);
          if(v3699) {
            checkVisibilitySymbol = declSymbol$$2.container
          }
        }
      }
      var v13650 = this.checker;
      var v3707 = JAMScript.call(checkVisibilitySymbol.isExternallyVisible, checkVisibilitySymbol, [v13650]);
      if(v3707) {
        var privateSymbolName = typeSymbol$$5.name;
        var v3705 = externalModuleSymbol != null;
        if(v3705) {
          var prettyName$$2 = JAMScript.call(externalModuleSymbol.getPrettyNameOfDynamicModule, externalModuleSymbol, [declSymbolPath]);
          var v3704 = prettyName$$2 != null;
          if(v3704) {
            var v3701 = this.currentScript;
            var v3702 = prettyName$$2.symbol;
            var v3703 = this.checker;
            JAMScript.call(v3701.AddExternallyVisibleImportedSymbol, v3701, [v3702, v3703]);
            return
          }else {
            privateSymbolName = externalModuleSymbol.prettyName
          }
        }
        var v13651 = typeSymbol$$5.name;
        var v3706 = v13651 != privateSymbolName;
        JAMScript.call(errorCallback$$4, null, [privateSymbolName, v3706])
      }
      return
    }
    function v1054(bases$$5, declSymbol$$1, extendsList$$8) {
      function v1053(typeName$$4, isModuleName$$3) {
        return JAMScript.call(_this$$8.baseListPrivacyErrorReporter, _this$$8, [bases$$5, i$$97, declSymbol$$1, extendsList$$8, typeName$$4, isModuleName$$3])
      }
      var _this$$8 = this;
      if(bases$$5) {
        var v3708 = bases$$5.members;
        var basesLen$$1 = v3708.length;
        var i$$97 = 0;
        var v3711 = i$$97 < basesLen$$1;
        for(;v3711;) {
          var v25089 = bases$$5.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23197 = v25089[i$$97]
          }
          var v19393 = v23197.type;
          var v13652 = !v19393;
          var v19396 = !v13652;
          if(v19396) {
            var v25090 = bases$$5.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v23198 = v25090[i$$97]
            }
            var v19394 = v23198.type;
            var v23199 = this.checker;
            var v19395 = v23199.anyType;
            v13652 = v19394 == v19395
          }
          var v3709 = v13652;
          if(v3709) {
            i$$97 = i$$97 + 1;
            v3711 = i$$97 < basesLen$$1;
            continue
          }
          var v23200 = bases$$5.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19397 = v23200[i$$97]
          }
          var v13653 = v19397.type;
          var v3710 = v13653.symbol;
          JAMScript.call(this.checkSymbolPrivacy, this, [v3710, declSymbol$$1, v1053]);
          i$$97 = i$$97 + 1;
          v3711 = i$$97 < basesLen$$1
        }
      }
      return
    }
    function v1052(bases$$4, i$$96, declSymbol, extendsList$$7, typeName$$3, isModuleName$$2) {
      var v19398 = bases$$4.members;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v13654 = v19398[i$$96]
      }
      var v3712 = v13654.type;
      var baseSymbol$$2 = v3712.symbol;
      var v3713;
      var v23201 = declSymbol.declAST;
      var v19399 = v23201.nodeType;
      var v23202 = TypeScript$$25.NodeType;
      var v19400 = v23202.InterfaceDeclaration;
      var v13655 = v19399 == v19400;
      if(v13655) {
        v3713 = "interface"
      }else {
        v3713 = "class"
      }
      var declTypeString = v3713;
      var v3714;
      if(extendsList$$7) {
        v3714 = "extends"
      }else {
        v3714 = "implements"
      }
      var baseListTypeString = v3714;
      var v3715;
      var v23203 = baseSymbol$$2.declAST;
      var v19401 = v23203.nodeType;
      var v23204 = TypeScript$$25.NodeType;
      var v19402 = v23204.InterfaceDeclaration;
      var v13656 = v19401 == v19402;
      if(v13656) {
        v3715 = "interface"
      }else {
        v3715 = "class"
      }
      var baseTypeString = v3715;
      var typestring$$1 = "";
      if(isModuleName$$2) {
        var quotestring$$1 = "";
        var v13657 = JAMScript.call(TypeScript$$25.isQuoted, TypeScript$$25, [typeName$$3]);
        var v3716 = !v13657;
        if(v3716) {
          quotestring$$1 = "'"
        }
        typestring$$1 = " is using inaccessible module ";
        var v23205 = " " + baseTypeString;
        var v19403 = v23205 + " from private module ";
        var v13658 = v19403 + quotestring$$1;
        var v3717 = v13658 + typeName$$3;
        baseTypeString = v3717 + quotestring$$1
      }else {
        var v19404 = " private " + baseTypeString;
        var v13659 = v19404 + " '";
        var v3718 = v13659 + typeName$$3;
        baseTypeString = v3718 + "'"
      }
      var v13660 = this.checker;
      var v3719 = v13660.errorReporter;
      var v13661 = bases$$4.members;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v3720 = v13661[i$$96]
      }
      var v25961 = "exported " + declTypeString;
      var v25091 = v25961 + " '";
      var v25092 = declSymbol.name;
      var v23206 = v25091 + v25092;
      var v19405 = v23206 + "' ";
      var v13662 = v19405 + baseListTypeString;
      var v3721 = v13662 + baseTypeString;
      JAMScript.call(v3719.simpleError, v3719, [v3720, v3721]);
      return
    }
    function v1051(funcDecl$$27) {
      function preFindSuperCall(ast$$105, parent$$67, walker$$51) {
        var go$$5 = true;
        var v3723 = ast$$105.nodeType;
        switch(v3723) {
          case TypeScript$$25.NodeType.FuncDecl:
            go$$5 = false;
            break;
          case TypeScript$$25.NodeType.Call:
            var call = ast$$105;
            var v19406 = call.target;
            var v13663 = v19406.nodeType;
            var v19407 = TypeScript$$25.NodeType;
            var v13664 = v19407.Super;
            var v3722 = v13663 == v13664;
            if(v3722) {
              go$$5 = false;
              foundSuper = true
            }
          ;
          default:
        }
        var v3724 = walker$$51.options;
        v3724.goChildren = go$$5;
        return ast$$105
      }
      var foundSuper = false;
      var v3725 = JAMScript.call(TypeScript$$25.getAstWalkerFactory, TypeScript$$25, []);
      var v3726 = funcDecl$$27.bod;
      JAMScript.call(v3725.walk, v3725, [v3726, preFindSuperCall]);
      return foundSuper
    }
    function v1050(funcDecl$$26) {
      function v1049(ast$$104, parent$$66, walker$$50) {
        var go$$4 = true;
        var v3728 = ast$$104.nodeType;
        switch(v3728) {
          case TypeScript$$25.NodeType.FuncDecl:
            go$$4 = false;
            break;
          case TypeScript$$25.NodeType.Return:
            var returnStmt = ast$$104;
            var v3727 = returnStmt.returnExpression;
            if(v3727) {
              allReturnsAreVoid = false;
              go$$4 = false
            }
          ;
          default:
        }
        var v3729 = walker$$50.options;
        v3729.goChildren = go$$4;
        var v3730 = walker$$50.options;
        v3730.goNextSibling = go$$4;
        return ast$$104
      }
      var allReturnsAreVoid = true;
      var v23207 = funcDecl$$26.signature;
      var v19408 = v23207.returnType;
      var v13665 = v19408.type;
      var v3733 = v13665 == null;
      if(v3733) {
        var preFindReturnExpressionTypes = v1049;
        var v3731 = JAMScript.call(TypeScript$$25.getAstWalkerFactory, TypeScript$$25, []);
        var v3732 = funcDecl$$26.bod;
        JAMScript.call(v3731.walk, v3731, [v3732, preFindReturnExpressionTypes])
      }
      return allReturnsAreVoid
    }
    function v1048(funcDecl$$25, constructorSym) {
      var freeVars$$1 = funcDecl$$25.freeVariables;
      var k$$14 = 0;
      var len$$46 = freeVars$$1.length;
      var v3741 = k$$14 < len$$46;
      for(;v3741;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var sym$$36 = freeVars$$1[k$$14]
        }
        var v19409 = JAMScript.call(sym$$36.isInstanceProperty, sym$$36, []);
        var v13666 = !v19409;
        if(v13666) {
          var v19410 = sym$$36.container;
          v13666 = v19410 == constructorSym
        }
        var v3740 = v13666;
        if(v3740) {
          var v3734 = TypeScript$$25.instanceFilter;
          JAMScript.call(v3734.reset, v3734, []);
          var v13667 = this.scope;
          var v13668 = TypeScript$$25.instanceFilter;
          var v13669 = sym$$36.name;
          var v3737 = JAMScript.call(v13667.search, v13667, [v13668, v13669, false, false]);
          if(v3737) {
            var v13670 = this.checker;
            var v3735 = v13670.errorReporter;
            var v25093 = sym$$36.name;
            var v23208 = "Constructor-local variable shadows class property '" + v25093;
            var v19411 = v23208 + "'. To access the class property, use 'self.";
            var v19412 = sym$$36.name;
            var v13671 = v19411 + v19412;
            var v3736 = v13671 + "'";
            JAMScript.call(v3735.simpleError, v3735, [funcDecl$$25, v3736])
          }
          var v13672 = this.checker;
          var v3738 = v13672.errorReporter;
          var v19413 = sym$$36.name;
          var v13673 = "Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable '" + v19413;
          var v3739 = v13673 + "' to a class property";
          JAMScript.call(v3738.simpleError, v3738, [funcDecl$$25, v3739])
        }
        k$$14 = k$$14 + 1;
        v3741 = k$$14 < len$$46
      }
      return
    }
    function v1047(funcDecl$$24) {
      var v13674 = JAMScript.call(funcDecl$$24.isMethod, funcDecl$$24, []);
      var v3744 = !v13674;
      if(v3744) {
        var freeVars = funcDecl$$24.freeVariables;
        var k$$13 = 0;
        var len$$45 = freeVars.length;
        var v3743 = k$$13 < len$$45;
        for(;v3743;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var sym$$35 = freeVars[k$$13]
          }
          var v3742 = JAMScript.call(sym$$35.isInstanceProperty, sym$$35, []);
          if(v3742) {
            return true
          }
          k$$13 = k$$13 + 1;
          v3743 = k$$13 < len$$45
        }
      }
      var fns = funcDecl$$24.scopes;
      var v3745 = fns.members;
      var fnsLen = v3745.length;
      var j$$13 = 0;
      var v3748 = j$$13 < fnsLen;
      for(;v3748;) {
        var v3746 = fns.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var fn$$8 = v3746[j$$13]
        }
        var v3747 = JAMScript.call(this.checkInitSelf, this, [fn$$8]);
        if(v3747) {
          return true
        }
        j$$13 = j$$13 + 1;
        v3748 = j$$13 < fnsLen
      }
      return false
    }
    function v1046(container$$20, args$$14, table$$9, isClass$$1) {
      if(args$$14) {
        var v3749 = args$$14.members;
        var len$$44 = v3749.length;
        var i$$95 = 0;
        var v3763 = i$$95 < len$$44;
        for(;v3763;) {
          var v3750 = args$$14.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var local$$1 = v3750[i$$95]
          }
          var v19414 = local$$1.sym;
          var v13675 = v19414 == null;
          var v19416 = !v13675;
          if(v19416) {
            var v19415 = isClass$$1;
            var v23211 = !v19415;
            if(v23211) {
              var v25094 = local$$1.sym;
              var v23209 = JAMScript.call(v25094.kind, v25094, []);
              var v25095 = TypeScript$$25.SymbolKind;
              var v23210 = v25095.Field;
              v19415 = v23209 != v23210
            }
            v13675 = v19415
          }
          var v3762 = v13675;
          if(v3762) {
            var result$$29 = null;
            var v23212 = local$$1.id;
            var v19417 = v23212.text;
            var v13676 = result$$29 = JAMScript.call(table$$9.lookup, table$$9, [v19417]);
            var v3761 = v13676 == null;
            if(v3761) {
              JAMScript.call(this.resolveBoundDecl, this, [local$$1]);
              var v3751 = TypeScript$$25.ValueLocation;
              var localVar$$1 = JAMScript.new(v3751, []);
              var v3752 = TypeScript$$25.TypeLink;
              var v27002 = JAMScript.new(v3752, []);
              localVar$$1.typeLink = v27002;
              var v3753 = TypeScript$$25.ParameterSymbol;
              var v13677 = local$$1.id;
              var v3754 = v13677.text;
              var v3755 = local$$1.minChar;
              var v19418 = this.checker;
              var v13678 = v19418.locationInfo;
              var v3756 = v13678.unitIndex;
              var varSym$$2 = JAMScript.new(v3753, [v3754, v3755, v3756, localVar$$1]);
              varSym$$2.declAST = local$$1;
              localVar$$1.symbol = varSym$$2;
              var v3757 = localVar$$1.typeLink;
              v3757.type = local$$1.type;
              var v3758 = localVar$$1.symbol;
              v3758.container = container$$20;
              local$$1.sym = localVar$$1.symbol;
              var v13679 = local$$1.id;
              var v3759 = v13679.text;
              JAMScript.call(table$$9.add, table$$9, [v3759, varSym$$2])
            }else {
              var v3760 = local$$1;
              var v27003 = JAMScript.call(result$$29.getType, result$$29, []);
              v3760.type = v27003;
              local$$1.sym = result$$29
            }
          }
          i$$95 = i$$95 + 1;
          v3763 = i$$95 < len$$44
        }
      }
      return
    }
    function v1045(scope$$30, container$$19, vars$$3, table$$8, isModContainer) {
      var v3764 = vars$$3.members;
      var len$$43 = v3764.length;
      var hasArgsDef = false;
      var i$$94 = 0;
      var v3789 = i$$94 < len$$43;
      for(;v3789;) {
        var v3765 = vars$$3.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var local = v3765[i$$94]
        }
        var v19419 = local.sym;
        var v13680 = v19419 == null;
        var v19422 = !v13680;
        if(v19422) {
          var v23213 = local.sym;
          var v19420 = JAMScript.call(v23213.kind, v23213, []);
          var v23214 = TypeScript$$25.SymbolKind;
          var v19421 = v23214.Field;
          v13680 = v19420 != v19421
        }
        var v3788 = v13680;
        if(v3788) {
          var result$$28 = null;
          var v23215 = local.id;
          var v19423 = v23215.text;
          var v13681 = result$$28 = JAMScript.call(table$$8.lookup, table$$8, [v19423]);
          var v3787 = v13681 == null;
          if(v3787) {
            var v3766 = TypeScript$$25.ValueLocation;
            var localVar = JAMScript.new(v3766, []);
            var v3767 = TypeScript$$25.TypeLink;
            var v27004 = JAMScript.new(v3767, []);
            localVar.typeLink = v27004;
            var varSym$$1 = null;
            var v13682 = local.varFlags;
            var v19424 = TypeScript$$25.VarFlags;
            var v13683 = v19424.Static;
            var v3776 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13682, v13683]);
            if(v3776) {
              var v13684 = local;
              var v19425 = local.varFlags;
              var v23216 = TypeScript$$25.VarFlags;
              var v19426 = v23216.LocalStatic;
              v13684.varFlags = v19425 | v19426;
              var v3768 = TypeScript$$25.FieldSymbol;
              var v13685 = local.id;
              var v3769 = v13685.text;
              var v3770 = local.minChar;
              var v19427 = this.checker;
              var v13686 = v19427.locationInfo;
              var v3771 = v13686.unitIndex;
              varSym$$1 = JAMScript.new(v3768, [v3769, v3770, v3771, true, localVar])
            }else {
              var v3772 = TypeScript$$25.VariableSymbol;
              var v13687 = local.id;
              var v3773 = v13687.text;
              var v3774 = local.minChar;
              var v19428 = this.checker;
              var v13688 = v19428.locationInfo;
              var v3775 = v13688.unitIndex;
              varSym$$1 = JAMScript.new(v3772, [v3773, v3774, v3775, localVar])
            }
            var v3777 = local.varFlags;
            JAMScript.call(varSym$$1.transferVarFlags, varSym$$1, [v3777]);
            localVar.symbol = varSym$$1;
            varSym$$1.declAST = local;
            var v3778 = localVar.typeLink;
            v3778.ast = local.typeExpr;
            var v3779 = this.checker;
            var v3780 = localVar.typeLink;
            JAMScript.call(v3779.resolveTypeLink, v3779, [scope$$30, v3780, false]);
            var v19429 = local.type;
            var v13689 = v19429 == null;
            if(v13689) {
              var v19430 = local.init;
              v13689 = v19430 == null
            }
            var v3781 = v13689;
            if(v3781) {
              local.type = this.anyType
            }
            var v3782 = localVar.typeLink;
            v3782.type = local.type;
            var v3783 = localVar.symbol;
            v3783.container = container$$19;
            local.sym = localVar.symbol;
            var v13690 = local.id;
            var v3784 = v13690.text;
            JAMScript.call(table$$8.add, table$$8, [v3784, varSym$$1]);
            var v19431 = local.id;
            var v13691 = v19431.text;
            var v3785 = v13691 == "arguments";
            if(v3785) {
              hasArgsDef = true
            }
          }else {
            var v3786 = local;
            var v27005 = JAMScript.call(result$$28.getType, result$$28, []);
            v3786.type = v27005;
            local.sym = result$$28
          }
        }
        i$$94 = i$$94 + 1;
        v3789 = i$$94 < len$$43
      }
      var v3798 = !isModContainer;
      if(v3798) {
        var v3797 = !hasArgsDef;
        if(v3797) {
          var v3790 = TypeScript$$25.ValueLocation;
          var argLoc = JAMScript.new(v3790, []);
          var v3791 = TypeScript$$25.TypeLink;
          var v27006 = JAMScript.new(v3791, []);
          argLoc.typeLink = v27006;
          var v3792 = TypeScript$$25.VariableSymbol;
          var v3793 = vars$$3.minChar;
          var v19432 = this.checker;
          var v13692 = v19432.locationInfo;
          var v3794 = v13692.unitIndex;
          var theArgSym = JAMScript.new(v3792, ["arguments", v3793, v3794, argLoc]);
          var v13693 = this.iargumentsInterfaceType;
          var v3795 = !v13693;
          if(v3795) {
            var argumentsSym = JAMScript.call(scope$$30.find, scope$$30, ["IArguments", false, true]);
            if(argumentsSym) {
              var v13694 = argumentsSym;
              var v19433 = argumentsSym.flags;
              var v23217 = TypeScript$$25.SymbolFlags;
              var v19434 = v23217.CompilerGenerated;
              v13694.flags = v19433 | v19434;
              var v27007 = JAMScript.call(argumentsSym.getType, argumentsSym, []);
              this.iargumentsInterfaceType = v27007
            }else {
              this.iargumentsInterfaceType = this.anyType
            }
          }
          var v3796 = argLoc.typeLink;
          v3796.type = this.iargumentsInterfaceType;
          JAMScript.call(table$$8.add, table$$8, ["arguments", theArgSym])
        }
      }
      return
    }
    function v1044(container$$18, signature$$7, table$$7) {
      var v3799 = signature$$7.parameters;
      var len$$42 = v3799.length;
      var i$$93 = 0;
      var v3802 = i$$93 < len$$42;
      for(;v3802;) {
        var v3800 = signature$$7.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var symbol$$20 = v3800[i$$93]
        }
        symbol$$20.container = container$$18;
        var v3801 = symbol$$20.name;
        JAMScript.call(table$$7.add, table$$7, [v3801, symbol$$20]);
        i$$93 = i$$93 + 1;
        v3802 = i$$93 < len$$42
      }
      return
    }
    function v1043(trinex) {
      var v3803 = trinex;
      var v13695 = trinex.operand1;
      var v27008 = JAMScript.call(this.typeCheck, this, [v13695]);
      v3803.operand1 = v27008;
      var v3804 = trinex;
      var v13696 = trinex.operand2;
      var v27009 = JAMScript.call(this.typeCheck, this, [v13696]);
      v3804.operand2 = v27009;
      var v3805 = trinex;
      var v13697 = trinex.operand3;
      var v27010 = JAMScript.call(this.typeCheck, this, [v13697]);
      v3805.operand3 = v27010;
      var v3806 = trinex.operand2;
      var leftType$$5 = v3806.type;
      var v3807 = trinex.operand3;
      var rightType$$4 = v3807.type;
      var v3813 = leftType$$5 == rightType$$4;
      if(v3813) {
        trinex.type = leftType$$5
      }else {
        var v13698 = this.checker;
        var v3812 = JAMScript.call(v13698.sourceIsSubtypeOfTarget, v13698, [leftType$$5, rightType$$4]);
        if(v3812) {
          trinex.type = rightType$$4
        }else {
          var v13699 = this.checker;
          var v3811 = JAMScript.call(v13699.sourceIsSubtypeOfTarget, v13699, [rightType$$4, leftType$$5]);
          if(v3811) {
            trinex.type = leftType$$5
          }else {
            trinex.type = this.anyType;
            var v13700 = this.checker;
            var v3808 = v13700.errorReporter;
            var v3809 = JAMScript.call(trinex.printLabel, trinex, []);
            var v3810 = this.scope;
            JAMScript.call(v3808.incompatibleTypes, v3808, [trinex, leftType$$5, rightType$$4, v3809, v3810])
          }
        }
      }
      return trinex
    }
    function v1042(binex$$8, assignment$$2) {
      var v3814 = binex$$8;
      var v19435 = binex$$8.operand1;
      var v13701 = JAMScript.call(this.typeCheck, this, [v19435]);
      var v13702 = this.doubleType;
      var v27011 = JAMScript.call(this.cast, this, [v13701, v13702]);
      v3814.operand1 = v27011;
      var v3815 = binex$$8;
      var v19436 = binex$$8.operand2;
      var v13703 = JAMScript.call(this.typeCheck, this, [v19436]);
      var v13704 = this.doubleType;
      var v27012 = JAMScript.call(this.cast, this, [v13703, v13704]);
      v3815.operand2 = v27012;
      var v13705 = assignment$$2;
      if(v13705) {
        var v23218 = binex$$8.operand1;
        var v19437 = JAMScript.call(this.astIsWriteable, this, [v23218]);
        v13705 = !v19437
      }
      var v3817 = v13705;
      if(v3817) {
        var v13706 = this.checker;
        var v3816 = v13706.errorReporter;
        JAMScript.call(v3816.valueCannotBeModified, v3816, [binex$$8])
      }
      binex$$8.type = this.doubleType;
      return binex$$8
    }
    function v1041(binex$$7) {
      var v3818 = binex$$7;
      var v19438 = binex$$7.operand1;
      var v13707 = JAMScript.call(this.typeCheck, this, [v19438]);
      var v13708 = this.stringType;
      var v27013 = JAMScript.call(this.cast, this, [v13707, v13708]);
      v3818.operand1 = v27013;
      var v3819 = binex$$7;
      var v13709 = binex$$7.operand2;
      var v27014 = JAMScript.call(this.typeCheck, this, [v13709]);
      v3819.operand2 = v27014;
      var v25962 = binex$$7.operand1;
      var v25096 = v25962.type;
      var v25963 = this.checker;
      var v25097 = v25963.anyType;
      var v23219 = v25096 == v25097;
      var v25100 = !v23219;
      if(v25100) {
        var v25964 = binex$$7.operand1;
        var v25098 = v25964.type;
        var v25965 = this.checker;
        var v25099 = v25965.stringType;
        v23219 = v25098 == v25099
      }
      var v19439 = v23219;
      if(v19439) {
        var v25966 = binex$$7.operand2;
        var v25101 = v25966.type;
        var v25102 = this.anyType;
        var v23220 = v25101 == v25102;
        var v25106 = !v23220;
        if(v25106) {
          var v25103 = this.checker;
          var v25967 = binex$$7.operand2;
          var v25104 = v25967.type;
          var v25105 = this.objectInterfaceType;
          v23220 = JAMScript.call(v25103.sourceIsSubtypeOfTarget, v25103, [v25104, v25105])
        }
        v19439 = v23220
      }
      var v13710 = v19439;
      var v3821 = !v13710;
      if(v3821) {
        var v13711 = this.checker;
        var v3820 = v13711.errorReporter;
        JAMScript.call(v3820.simpleError, v3820, [binex$$7, "The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type"])
      }
      binex$$7.type = this.booleanType;
      return binex$$7
    }
    function v1040(ast$$103) {
      var binex$$6 = ast$$103;
      var v3822 = binex$$6;
      var v13712 = binex$$6.operand1;
      var v27015 = JAMScript.call(this.typeCheck, this, [v13712]);
      v3822.operand1 = v27015;
      var v3823 = binex$$6;
      var v13713 = binex$$6.operand2;
      var v27016 = JAMScript.call(this.typeCheck, this, [v13713]);
      v3823.operand2 = v27016;
      var v23221 = this.checker;
      var v19440 = v23221.styleSettings;
      var v13714 = v19440.literalSubscript;
      var v3826 = !v13714;
      if(v3826) {
        var v19441 = binex$$6.operand2;
        var v13715 = v19441.nodeType;
        var v19442 = TypeScript$$25.NodeType;
        var v13716 = v19442.QString;
        var v3825 = v13715 == v13716;
        if(v3825) {
          var v13717 = this.checker;
          var v3824 = v13717.errorReporter;
          JAMScript.call(v3824.styleError, v3824, [ast$$103, "use literal subscript ('.') notation instead)"])
        }
      }
      var v3827 = binex$$6.operand1;
      var objExprType = v3827.type;
      var v3828 = binex$$6.operand2;
      var indexExprType = v3828.type;
      var v3847 = objExprType.elementType;
      if(v3847) {
        var v23222 = this.checker;
        var v19443 = v23222.anyType;
        var v13718 = indexExprType == v19443;
        var v19445 = !v13718;
        if(v19445) {
          var v25107 = this.checker;
          var v23223 = v25107.numberType;
          var v19444 = indexExprType == v23223;
          var v23226 = !v19444;
          if(v23226) {
            var v23224 = indexExprType.typeFlags;
            var v25108 = TypeScript$$25.TypeFlags;
            var v23225 = v25108.IsEnum;
            v19444 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23224, v23225])
          }
          v13718 = v19444
        }
        var v3833 = v13718;
        if(v3833) {
          binex$$6.type = objExprType.elementType
        }else {
          var v19446 = this.checker;
          var v13719 = v19446.stringType;
          var v3832 = indexExprType == v13719;
          if(v3832) {
            var v3829 = this.checker;
            binex$$6.type = v3829.anyType
          }else {
            var v13720 = this.checker;
            var v3830 = v13720.errorReporter;
            JAMScript.call(v3830.simpleError, v3830, [binex$$6, "Illegal property access"]);
            var v3831 = this.checker;
            binex$$6.type = v3831.anyType
          }
        }
      }else {
        var v3846 = objExprType.index;
        if(v3846) {
          var v23227 = this.checker;
          var v19447 = v23227.anyType;
          var v13721 = indexExprType == v19447;
          var v19449 = !v13721;
          if(v19449) {
            var v26437 = objExprType.index;
            var v25968 = v26437.flags;
            var v26438 = TypeScript$$25.SignatureFlags;
            var v25969 = v26438.IsStringIndexer;
            var v25109 = v25968 & v25969;
            var v25972 = !v25109;
            if(v25972) {
              var v26439 = objExprType.index;
              var v25970 = v26439.flags;
              var v26440 = TypeScript$$25.SignatureFlags;
              var v25971 = v26440.IsNumberIndexer;
              v25109 = v25970 & v25971
            }
            var v23228 = v25109;
            var v19448 = !v23228;
            var v23230 = !v19448;
            if(v23230) {
              var v26441 = objExprType.index;
              var v25973 = v26441.flags;
              var v26442 = TypeScript$$25.SignatureFlags;
              var v25974 = v26442.IsStringIndexer;
              var v25110 = v25973 & v25974;
              if(v25110) {
                var v26443 = this.checker;
                var v25975 = v26443.stringType;
                v25110 = indexExprType == v25975
              }
              var v23229 = v25110;
              var v25112 = !v23229;
              if(v25112) {
                var v26444 = objExprType.index;
                var v25976 = v26444.flags;
                var v26445 = TypeScript$$25.SignatureFlags;
                var v25977 = v26445.IsNumberIndexer;
                var v25111 = v25976 & v25977;
                if(v25111) {
                  var v26672 = this.checker;
                  var v26446 = v26672.numberType;
                  var v25978 = indexExprType == v26446;
                  var v26449 = !v25978;
                  if(v26449) {
                    var v26447 = indexExprType.typeFlags;
                    var v26673 = TypeScript$$25.TypeFlags;
                    var v26448 = v26673.IsEnum;
                    v25978 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v26447, v26448])
                  }
                  v25111 = v25978
                }
                v23229 = v25111
              }
              v19448 = v23229
            }
            v13721 = v19448
          }
          var v3841 = v13721;
          if(v3841) {
            var v3834 = objExprType.index;
            var sig$$3 = JAMScript.call(this.resolveOverload, this, [ast$$103, v3834]);
            if(sig$$3) {
              var v3835 = sig$$3.returnType;
              binex$$6.type = v3835.type
            }else {
              var v3836 = this.checker;
              binex$$6.type = v3836.anyType
            }
          }else {
            var v19450 = this.checker;
            var v13722 = v19450.stringType;
            var v3840 = indexExprType == v13722;
            if(v3840) {
              var v3837 = this.checker;
              binex$$6.type = v3837.anyType
            }else {
              var v13723 = this.checker;
              var v3838 = v13723.errorReporter;
              JAMScript.call(v3838.simpleError, v3838, [binex$$6, "Illegal property access"]);
              var v3839 = this.checker;
              binex$$6.type = v3839.anyType
            }
          }
        }else {
          var v25113 = this.checker;
          var v23231 = v25113.anyType;
          var v19451 = objExprType == v23231;
          var v23233 = !v19451;
          if(v23233) {
            var v25979 = this.checker;
            var v25114 = v25979.stringType;
            var v23232 = objExprType == v25114;
            var v25116 = !v23232;
            if(v25116) {
              var v26450 = this.checker;
              var v25980 = v26450.numberType;
              var v25115 = objExprType == v25980;
              var v25982 = !v25115;
              if(v25982) {
                var v26674 = this.checker;
                var v26451 = v26674.booleanType;
                var v25981 = objExprType == v26451;
                var v26452 = !v25981;
                if(v26452) {
                  v25981 = JAMScript.call(objExprType.isReferenceType, objExprType, [])
                }
                v25115 = v25981
              }
              v23232 = v25115
            }
            v19451 = v23232
          }
          var v13724 = v19451;
          if(v13724) {
            var v25117 = this.checker;
            var v23234 = v25117.anyType;
            var v19452 = indexExprType == v23234;
            var v23236 = !v19452;
            if(v23236) {
              var v25983 = this.checker;
              var v25118 = v25983.stringType;
              var v23235 = indexExprType == v25118;
              var v25120 = !v23235;
              if(v25120) {
                var v26453 = this.checker;
                var v25984 = v26453.numberType;
                var v25119 = indexExprType == v25984;
                var v25987 = !v25119;
                if(v25987) {
                  var v25985 = indexExprType.typeFlags;
                  var v26454 = TypeScript$$25.TypeFlags;
                  var v25986 = v26454.IsEnum;
                  v25119 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v25985, v25986])
                }
                v23235 = v25119
              }
              v19452 = v23235
            }
            v13724 = v19452
          }
          var v3845 = v13724;
          if(v3845) {
            var v3842 = this.checker;
            binex$$6.type = v3842.anyType
          }else {
            var v13725 = this.checker;
            var v3843 = v13725.errorReporter;
            JAMScript.call(v3843.simpleError, v3843, [binex$$6, "Illegal property access"]);
            var v3844 = this.checker;
            binex$$6.type = v3844.anyType
          }
        }
      }
      return binex$$6
    }
    function v1039(ast$$102) {
      var binex$$5 = ast$$102;
      var v13726 = binex$$5.operand2;
      var v3848 = v13726.isParenthesized;
      var applyTargetType$$2 = !v3848;
      var v3849 = binex$$5;
      var v13727 = binex$$5.operand1;
      var v27017 = JAMScript.call(this.typeCheck, this, [v13727]);
      v3849.operand1 = v27017;
      var v3850 = this.checker;
      var v13728 = binex$$5.operand1;
      var v3851 = v13728.type;
      var v13729 = this.checker;
      var v3852 = JAMScript.call(v13729.inProvisionalTypecheckMode, v13729, []);
      var v3853 = binex$$5.operand2;
      JAMScript.call(v3850.typeCheckWithContextualType, v3850, [v3851, v3852, applyTargetType$$2, v3853]);
      var v3854 = binex$$5.operand1;
      var leftType$$4 = v3854.type;
      var v3855 = binex$$5.operand2;
      var rightType$$3 = v3855.type;
      var v19453 = binex$$5.operand1;
      var v13730 = JAMScript.call(this.astIsWriteable, this, [v19453]);
      var v3857 = !v13730;
      if(v3857) {
        var v13731 = this.checker;
        var v3856 = v13731.errorReporter;
        JAMScript.call(v3856.valueCannotBeModified, v3856, [binex$$5])
      }
      var v19454 = binex$$5.operand1;
      var v13732 = v19454.nodeType;
      var v19455 = TypeScript$$25.NodeType;
      var v13733 = v19455.Call;
      var v3858 = v13732 == v13733;
      if(v3858) {
        var callEx$$1 = binex$$5.operand1
      }
      var preserveScope$$1 = false;
      var preservedContainedScope$$1 = null;
      var v13734 = binex$$5.operand2;
      var v3860 = v13734.type;
      if(v3860) {
        var v13735 = binex$$5.operand2;
        var v3859 = v13735.type;
        preservedContainedScope$$1 = v3859.containedScope;
        preserveScope$$1 = true
      }
      var v3861 = binex$$5;
      var v13736 = binex$$5.operand2;
      var v19456 = applyTargetType$$2;
      if(v19456) {
        var v25121 = this.checker;
        var v23237 = JAMScript.call(v25121.inProvisionalTypecheckMode, v25121, []);
        v19456 = !v23237
      }
      var v13737 = v19456;
      var v27018 = JAMScript.call(this.castWithCoercion, this, [v13736, leftType$$4, v13737, false]);
      v3861.operand2 = v27018;
      var v13738 = preserveScope$$1;
      if(v13738) {
        var v25122 = binex$$5.operand2;
        var v23238 = v25122.type;
        var v19457 = v23238.containedScope;
        v13738 = v19457 == null
      }
      var v3863 = v13738;
      if(v3863) {
        var v13739 = binex$$5.operand2;
        var v3862 = v13739.type;
        v3862.containedScope = preservedContainedScope$$1
      }
      binex$$5.type = rightType$$3;
      return binex$$5
    }
    function v1038(ast$$101) {
      var binex$$4 = ast$$101;
      var v3864 = binex$$4;
      var v13740 = binex$$4.operand1;
      var v27019 = JAMScript.call(this.typeCheck, this, [v13740]);
      v3864.operand1 = v27019;
      var v3865 = binex$$4;
      var v13741 = binex$$4.operand2;
      var v27020 = JAMScript.call(this.typeCheck, this, [v13741]);
      v3865.operand2 = v27020;
      var v3866 = binex$$4.operand1;
      var leftType$$3 = v3866.type;
      var v3867 = binex$$4.operand2;
      var rightType$$2 = v3867.type;
      var v23239 = this.checker;
      var v19458 = JAMScript.call(v23239.sourceIsAssignableToTarget, v23239, [leftType$$3, rightType$$2]);
      var v13742 = !v19458;
      if(v13742) {
        var v23240 = this.checker;
        var v19459 = JAMScript.call(v23240.sourceIsAssignableToTarget, v23240, [rightType$$2, leftType$$3]);
        v13742 = !v19459
      }
      var v3871 = v13742;
      if(v3871) {
        var v13743 = this.checker;
        var v3868 = v13743.errorReporter;
        var v3869 = JAMScript.call(binex$$4.printLabel, binex$$4, []);
        var v3870 = this.scope;
        JAMScript.call(v3868.incompatibleTypes, v3868, [binex$$4, leftType$$3, rightType$$2, v3869, v3870])
      }
      binex$$4.type = this.booleanType;
      return binex$$4
    }
    function v1037(ast$$100) {
      var binex$$3 = ast$$100;
      var leftIsFnc = false;
      var v3872 = binex$$3;
      var v13744 = binex$$3.operand1;
      var v27021 = JAMScript.call(this.typeCheck, this, [v13744]);
      v3872.operand1 = v27021;
      var v3873 = binex$$3.operand1;
      var leftType$$2 = v3873.type;
      var leftScope = null;
      if(leftType$$2) {
        var v13745 = this.anyType;
        var v3891 = leftType$$2 == v13745;
        if(v3891) {
          binex$$3.type = this.anyType;
          return binex$$3
        }else {
          var v13746 = this.stringType;
          var v3890 = leftType$$2 == v13746;
          if(v3890) {
            var v3875 = this.stringInterfaceType;
            if(v3875) {
              var v3874 = this.stringInterfaceType;
              leftScope = v3874.memberScope
            }else {
              binex$$3.type = this.anyType;
              return binex$$3
            }
          }else {
            var v13747 = this.doubleType;
            var v3889 = leftType$$2 == v13747;
            if(v3889) {
              var v3877 = this.numberInterfaceType;
              if(v3877) {
                var v3876 = this.numberInterfaceType;
                leftScope = v3876.memberScope
              }else {
                binex$$3.type = this.anyType;
                return binex$$3
              }
            }else {
              var v13748 = this.booleanType;
              var v3888 = leftType$$2 == v13748;
              if(v3888) {
                var v3879 = this.booleanInterfaceType;
                if(v3879) {
                  var v3878 = this.booleanInterfaceType;
                  leftScope = v3878.memberScope
                }else {
                  binex$$3.type = this.anyType;
                  return binex$$3
                }
              }else {
                var v19460 = leftType$$2.call;
                var v23241 = !v19460;
                if(v23241) {
                  v19460 = leftType$$2.construct
                }
                var v13749 = v19460;
                if(v13749) {
                  var v19461 = leftType$$2.members;
                  v13749 = v19461 == null
                }
                var v3887 = v13749;
                if(v3887) {
                  var v3881 = this.functionInterfaceType;
                  if(v3881) {
                    var v3880 = this.functionInterfaceType;
                    leftScope = v3880.memberScope
                  }else {
                    binex$$3.type = this.anyType;
                    return binex$$3
                  }
                }else {
                  var v3886 = leftType$$2.elementType;
                  if(v3886) {
                    var v3885 = this.arrayInterfaceType;
                    if(v3885) {
                      var v3882 = leftType$$2.elementType;
                      var v3883 = this.arrayInterfaceType;
                      var v3884 = this.checker;
                      var arrInstType$$1 = JAMScript.call(v3882.getArrayBase, v3882, [v3883, v3884]);
                      leftScope = arrInstType$$1.memberScope
                    }else {
                      binex$$3.type = this.anyType;
                      return binex$$3
                    }
                  }else {
                    leftScope = leftType$$2.memberScope
                  }
                }
              }
            }
          }
        }
      }
      var v3920 = leftScope == null;
      if(v3920) {
        var v13750 = this.checker;
        var v3892 = v13750.errorReporter;
        JAMScript.call(v3892.expectedClassOrInterface, v3892, [binex$$3]);
        binex$$3.type = this.anyType
      }else {
        var propertyName$$8 = binex$$3.operand2;
        var v13751 = this.thisClassNode;
        if(v13751) {
          var v23242 = binex$$3.operand1;
          var v19462 = v23242.type;
          var v25123 = this.thisClassNode;
          var v23243 = v25123.type;
          var v19463 = v23243.instanceType;
          v13751 = v19462 == v19463
        }
        var v3893 = v13751;
        var v13752 = !v3893;
        if(v13752) {
          v3893 = this.inTypeRefTypeCheck
        }
        var lhsIsEnclosingType = v3893;
        var v3894 = propertyName$$8.text;
        var v3895 = !lhsIsEnclosingType;
        var v3896 = this.inTypeRefTypeCheck;
        var symbol$$19 = JAMScript.call(leftScope.find, leftScope, [v3894, v3895, v3896]);
        var v3907 = !symbol$$19;
        if(v3907) {
          var v13753 = this.objectInterfaceType;
          if(v13753) {
            v13753 = leftType$$2
          }
          var v3906 = v13753;
          if(v3906) {
            var v3900 = JAMScript.call(leftType$$2.isReferenceType, leftType$$2, []);
            if(v3900) {
              var v13754 = this.objectInterfaceType;
              var v3897 = v13754.memberScope;
              var v3898 = propertyName$$8.text;
              var v3899 = this.inTypeRefTypeCheck;
              symbol$$19 = JAMScript.call(v3897.find, v3897, [v3898, false, v3899])
            }
            var v3905 = !symbol$$19;
            if(v3905) {
              var v13755 = this.functionInterfaceType;
              if(v13755) {
                var v19464 = leftType$$2.call;
                var v23244 = !v19464;
                if(v23244) {
                  v19464 = leftType$$2.construct
                }
                v13755 = v19464
              }
              var v3904 = v13755;
              if(v3904) {
                var v13756 = this.functionInterfaceType;
                var v3901 = v13756.memberScope;
                var v3902 = propertyName$$8.text;
                var v3903 = this.inTypeRefTypeCheck;
                symbol$$19 = JAMScript.call(v3901.find, v3901, [v3902, false, v3903])
              }
            }
          }
        }
        var v13757 = !symbol$$19;
        var v19466 = !v13757;
        if(v19466) {
          var v23245 = this.checker;
          var v19465 = JAMScript.call(symbol$$19.visible, symbol$$19, [leftScope, v23245]);
          v13757 = !v19465
        }
        var v3919 = v13757;
        if(v3919) {
          binex$$3.type = this.anyType;
          var v3913 = symbol$$19 == null;
          if(v3913) {
            var v13758 = this.checker;
            var v3908 = v13758.errorReporter;
            var v25124 = propertyName$$8.actualText;
            var v23246 = "The property '" + v25124;
            var v19467 = v23246 + "' does not exist on value of type '";
            var v23247 = this.scope;
            var v19468 = JAMScript.call(leftType$$2.getScopedTypeName, leftType$$2, [v23247]);
            var v13759 = v19467 + v19468;
            var v3909 = v13759 + "'";
            JAMScript.call(v3908.simpleError, v3908, [propertyName$$8, v3909])
          }else {
            var v13760 = this.inTypeRefTypeCheck;
            var v3912 = !v13760;
            if(v3912) {
              var v13761 = this.checker;
              var v3910 = v13761.errorReporter;
              var v25125 = propertyName$$8.actualText;
              var v23248 = "The property '" + v25125;
              var v19469 = v23248 + " on type '";
              var v23249 = this.scope;
              var v19470 = JAMScript.call(leftType$$2.getScopedTypeName, leftType$$2, [v23249]);
              var v13762 = v19469 + v19470;
              var v3911 = v13762 + "' is not visible";
              JAMScript.call(v3910.simpleError, v3910, [binex$$3, v3911])
            }
          }
        }else {
          var v3917 = JAMScript.call(symbol$$19.isVariable, symbol$$19, []);
          if(v3917) {
            var v3916 = JAMScript.call(symbol$$19.isInferenceSymbol, symbol$$19, []);
            if(v3916) {
              var infSym$$2 = symbol$$19;
              var v13763 = infSym$$2.declAST;
              if(v13763) {
                var v23250 = this.checker;
                var v23251 = infSym$$2.typeCheckStatus;
                var v19471 = JAMScript.call(v23250.typeStatusIsFinished, v23250, [v23251]);
                v13763 = !v19471
              }
              var v3915 = v13763;
              if(v3915) {
                var v3914 = infSym$$2.declAST;
                JAMScript.call(this.inScopeTypeCheckDecl, this, [v3914])
              }
            }
          }
          propertyName$$8.sym = symbol$$19;
          var v3918 = binex$$3;
          var v27022 = JAMScript.call(symbol$$19.getType, symbol$$19, []);
          v3918.type = v27022
        }
      }
      var v13764 = binex$$3.type;
      var v3921 = v13764 == null;
      if(v3921) {
        binex$$3.type = this.anyType
      }
      return binex$$3
    }
    function v1036(ast$$99, assignment$$1) {
      var binex$$2 = ast$$99;
      var v3922 = binex$$2;
      var v13765 = binex$$2.operand1;
      var v27023 = JAMScript.call(this.typeCheck, this, [v13765]);
      v3922.operand1 = v27023;
      var v3923 = binex$$2;
      var v13766 = binex$$2.operand2;
      var v27024 = JAMScript.call(this.typeCheck, this, [v13766]);
      v3923.operand2 = v27024;
      var v3924 = binex$$2.operand1;
      var leftType$$1 = v3924.type;
      var v3925 = binex$$2.operand2;
      var rightType$$1 = v3925.type;
      var v13767 = assignment$$1;
      if(v13767) {
        var v23252 = binex$$2.operand1;
        var v19472 = JAMScript.call(this.astIsWriteable, this, [v23252]);
        v13767 = !v19472
      }
      var v3927 = v13767;
      if(v3927) {
        var v13768 = this.checker;
        var v3926 = v13768.errorReporter;
        JAMScript.call(v3926.valueCannotBeModified, v3926, [binex$$2])
      }
      var v23253 = this.checker;
      var v19473 = v23253.styleSettings;
      var v13769 = v19473.bitwise;
      if(v13769) {
        var v23254 = binex$$2.nodeType;
        var v25126 = TypeScript$$25.NodeType;
        var v23255 = v25126.And;
        var v19474 = v23254 == v23255;
        var v23257 = !v19474;
        if(v23257) {
          var v25127 = binex$$2.nodeType;
          var v25988 = TypeScript$$25.NodeType;
          var v25128 = v25988.Or;
          var v23256 = v25127 == v25128;
          var v25130 = !v23256;
          if(v25130) {
            var v25989 = binex$$2.nodeType;
            var v26455 = TypeScript$$25.NodeType;
            var v25990 = v26455.AsgAnd;
            var v25129 = v25989 == v25990;
            var v25993 = !v25129;
            if(v25993) {
              var v25991 = binex$$2.nodeType;
              var v26456 = TypeScript$$25.NodeType;
              var v25992 = v26456.AsgOr;
              v25129 = v25991 == v25992
            }
            v23256 = v25129
          }
          v19474 = v23256
        }
        v13769 = v19474
      }
      var v3930 = v13769;
      if(v3930) {
        var v13770 = this.checker;
        var v3928 = v13770.errorReporter;
        var v19475 = TypeScript$$25.nodeTypeTable;
        var v19476 = binex$$2.nodeType;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v13771 = v19475[v19476]
        }
        var v3929 = "use of " + v13771;
        JAMScript.call(v3928.styleError, v3928, [ast$$99, v3929])
      }
      var v13772 = leftType$$1 == null;
      var v19477 = !v13772;
      if(v19477) {
        v13772 = rightType$$1 == null
      }
      var v3932 = v13772;
      if(v3932) {
        var v13773 = this.checker;
        var v3931 = v13773.errorReporter;
        JAMScript.call(v3931.simpleError, v3931, [binex$$2, "Could not typecheck arithmetic operation.  Possible recursive typecheck error?"]);
        binex$$2.type = this.anyType;
        return binex$$2
      }
      var nodeType$$14 = binex$$2.nodeType;
      var v13774 = this.checker;
      var v3933 = JAMScript.call(v13774.isNullOrUndefinedType, v13774, [leftType$$1]);
      if(v3933) {
        leftType$$1 = rightType$$1
      }
      var v13775 = this.checker;
      var v3934 = JAMScript.call(v13775.isNullOrUndefinedType, v13775, [rightType$$1]);
      if(v3934) {
        rightType$$1 = leftType$$1
      }
      var v3935 = this.checker;
      leftType$$1 = JAMScript.call(v3935.widenType, v3935, [leftType$$1]);
      var v3936 = this.checker;
      rightType$$1 = JAMScript.call(v3936.widenType, v3936, [rightType$$1]);
      var v23258 = TypeScript$$25.NodeType;
      var v19478 = v23258.Add;
      var v13776 = nodeType$$14 == v19478;
      var v19480 = !v13776;
      if(v19480) {
        var v23259 = TypeScript$$25.NodeType;
        var v19479 = v23259.AsgAdd;
        v13776 = nodeType$$14 == v19479
      }
      var v3957 = v13776;
      if(v3957) {
        var v23260 = this.checker;
        var v19481 = v23260.stringType;
        var v13777 = leftType$$1 == v19481;
        var v19483 = !v13777;
        if(v19483) {
          var v23261 = this.checker;
          var v19482 = v23261.stringType;
          v13777 = rightType$$1 == v19482
        }
        var v3947 = v13777;
        if(v3947) {
          var v3937 = this.checker;
          binex$$2.type = v3937.stringType
        }else {
          var v23262 = this.checker;
          var v19484 = v23262.numberType;
          var v13778 = leftType$$1 == v19484;
          if(v13778) {
            var v23263 = this.checker;
            var v19485 = v23263.numberType;
            v13778 = rightType$$1 == v19485
          }
          var v3946 = v13778;
          if(v3946) {
            var v3938 = this.checker;
            binex$$2.type = v3938.numberType
          }else {
            var v19486 = this.checker;
            var v23264 = this.checker;
            var v19487 = v23264.numberType;
            var v13779 = JAMScript.call(v19486.sourceIsSubtypeOfTarget, v19486, [leftType$$1, v19487]);
            if(v13779) {
              var v19488 = this.checker;
              var v23265 = this.checker;
              var v19489 = v23265.numberType;
              v13779 = JAMScript.call(v19488.sourceIsSubtypeOfTarget, v19488, [rightType$$1, v19489])
            }
            var v3945 = v13779;
            if(v3945) {
              var v3939 = this.checker;
              binex$$2.type = v3939.numberType
            }else {
              var v23266 = this.checker;
              var v19490 = v23266.anyType;
              var v13780 = leftType$$1 == v19490;
              var v19492 = !v13780;
              if(v19492) {
                var v23267 = this.checker;
                var v19491 = v23267.anyType;
                v13780 = rightType$$1 == v19491
              }
              var v3944 = v13780;
              if(v3944) {
                var v3940 = this.checker;
                binex$$2.type = v3940.anyType
              }else {
                binex$$2.type = this.anyType;
                var v13781 = this.checker;
                var v3941 = v13781.errorReporter;
                var v3942 = JAMScript.call(binex$$2.printLabel, binex$$2, []);
                var v3943 = this.scope;
                JAMScript.call(v3941.incompatibleTypes, v3941, [binex$$2, leftType$$1, rightType$$1, v3942, v3943])
              }
            }
          }
        }
      }else {
        var v23268 = this.checker;
        var v19493 = v23268.numberType;
        var v13782 = leftType$$1 == v19493;
        if(v13782) {
          var v23269 = this.checker;
          var v19494 = v23269.numberType;
          v13782 = rightType$$1 == v19494
        }
        var v3956 = v13782;
        if(v3956) {
          var v3948 = this.checker;
          binex$$2.type = v3948.numberType
        }else {
          var v19495 = this.checker;
          var v23270 = this.checker;
          var v19496 = v23270.numberType;
          var v13783 = JAMScript.call(v19495.sourceIsSubtypeOfTarget, v19495, [leftType$$1, v19496]);
          if(v13783) {
            var v19497 = this.checker;
            var v23271 = this.checker;
            var v19498 = v23271.numberType;
            v13783 = JAMScript.call(v19497.sourceIsSubtypeOfTarget, v19497, [rightType$$1, v19498])
          }
          var v3955 = v13783;
          if(v3955) {
            var v3949 = this.checker;
            binex$$2.type = v3949.numberType
          }else {
            var v23272 = this.checker;
            var v19499 = v23272.anyType;
            var v13784 = leftType$$1 == v19499;
            var v19501 = !v13784;
            if(v19501) {
              var v23273 = this.checker;
              var v19500 = v23273.anyType;
              v13784 = rightType$$1 == v19500
            }
            var v3954 = v13784;
            if(v3954) {
              var v3950 = this.checker;
              binex$$2.type = v3950.numberType
            }else {
              binex$$2.type = this.anyType;
              var v13785 = this.checker;
              var v3951 = v13785.errorReporter;
              var v3952 = JAMScript.call(binex$$2.printLabel, binex$$2, []);
              var v3953 = this.scope;
              JAMScript.call(v3951.incompatibleTypes, v3951, [binex$$2, leftType$$1, rightType$$1, v3952, v3953])
            }
          }
        }
      }
      return binex$$2
    }
    function v1035(ast$$98, assignment) {
      var binex$$1 = ast$$98;
      var resultType$$1 = null;
      var v3958 = binex$$1;
      var v13786 = binex$$1.operand1;
      var v27025 = JAMScript.call(this.typeCheck, this, [v13786]);
      v3958.operand1 = v27025;
      var v3959 = binex$$1;
      var v13787 = binex$$1.operand2;
      var v27026 = JAMScript.call(this.typeCheck, this, [v13787]);
      v3959.operand2 = v27026;
      var v3960 = binex$$1.operand1;
      var leftType = v3960.type;
      var v3961 = binex$$1.operand2;
      var rightType = v3961.type;
      var v13788 = assignment;
      if(v13788) {
        var v19502 = JAMScript.call(this.astIsWriteable, this, [binex$$1]);
        v13788 = !v19502
      }
      var v3963 = v13788;
      if(v3963) {
        var v13789 = this.checker;
        var v3962 = v13789.errorReporter;
        JAMScript.call(v3962.valueCannotBeModified, v3962, [binex$$1])
      }
      var v19503 = this.checker;
      var v13790 = v19503.styleSettings;
      var v3966 = v13790.bitwise;
      if(v3966) {
        var v13791 = this.checker;
        var v3964 = v13791.errorReporter;
        var v19504 = TypeScript$$25.nodeTypeTable;
        var v19505 = binex$$1.nodeType;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v13792 = v19504[v19505]
        }
        var v3965 = "use of " + v13792;
        JAMScript.call(v3964.styleError, v3964, [ast$$98, v3965])
      }
      var v19506 = this.checker;
      var v19507 = this.doubleType;
      var v13793 = JAMScript.call(v19506.sourceIsSubtypeOfTarget, v19506, [leftType, v19507]);
      if(v13793) {
        var v19508 = this.checker;
        var v19509 = this.doubleType;
        v13793 = JAMScript.call(v19508.sourceIsSubtypeOfTarget, v19508, [rightType, v19509])
      }
      var v3972 = v13793;
      if(v3972) {
        resultType$$1 = this.doubleType
      }else {
        var v19510 = this.booleanType;
        var v13794 = leftType == v19510;
        if(v13794) {
          var v19511 = this.booleanType;
          v13794 = rightType == v19511
        }
        var v3971 = v13794;
        if(v3971) {
          resultType$$1 = this.booleanType
        }else {
          var v13795 = this.anyType;
          var v3970 = leftType == v13795;
          if(v3970) {
            var v19512 = this.anyType;
            var v13796 = rightType == v19512;
            var v19514 = !v13796;
            if(v19514) {
              var v23274 = this.doubleType;
              var v19513 = rightType == v23274;
              var v23276 = !v19513;
              if(v23276) {
                var v23275 = this.booleanType;
                v19513 = rightType == v23275
              }
              v13796 = v19513
            }
            var v3967 = v13796;
            if(v3967) {
              resultType$$1 = this.anyType
            }
          }else {
            var v13797 = this.anyType;
            var v3969 = rightType == v13797;
            if(v3969) {
              var v19515 = this.anyType;
              var v13798 = leftType == v19515;
              var v19517 = !v13798;
              if(v19517) {
                var v23277 = this.doubleType;
                var v19516 = leftType == v23277;
                var v23279 = !v19516;
                if(v23279) {
                  var v23278 = this.booleanType;
                  v19516 = leftType == v23278
                }
                v13798 = v19516
              }
              var v3968 = v13798;
              if(v3968) {
                resultType$$1 = this.anyType
              }
            }
          }
        }
      }
      var v3976 = resultType$$1 == null;
      if(v3976) {
        resultType$$1 = this.anyType;
        var v13799 = this.checker;
        var v3973 = v13799.errorReporter;
        var v3974 = JAMScript.call(binex$$1.printLabel, binex$$1, []);
        var v3975 = this.scope;
        JAMScript.call(v3973.incompatibleTypes, v3973, [binex$$1, leftType, rightType, v3974, v3975])
      }
      binex$$1.type = resultType$$1;
      return binex$$1
    }
    function v1034(ast$$97) {
      var unex$$3 = ast$$97;
      var lval$$1 = unex$$3.operand;
      var v13800 = JAMScript.call(this.astIsWriteable, this, [unex$$3]);
      var v3980 = !v13800;
      if(v3980) {
        var v13801 = this.checker;
        var v3977 = v13801.errorReporter;
        JAMScript.call(v3977.valueCannotBeModified, v3977, [unex$$3]);
        unex$$3.type = this.doubleType
      }else {
        unex$$3 = JAMScript.call(this.typeCheckUnaryNumberOperator, this, [ast$$97]);
        var v23280 = unex$$3.operand;
        var v19518 = v23280.type;
        var v23281 = this.checker;
        var v19519 = v23281.numberType;
        var v13802 = v19518 != v19519;
        if(v13802) {
          var v25131 = unex$$3.operand;
          var v23282 = v25131.type;
          var v25132 = this.checker;
          var v23283 = v25132.anyType;
          var v19520 = v23282 != v23283;
          if(v19520) {
            var v26457 = unex$$3.operand;
            var v25994 = v26457.type;
            var v25133 = v25994.typeFlags;
            var v25995 = TypeScript$$25.TypeFlags;
            var v25134 = v25995.IsEnum;
            var v23284 = v25133 & v25134;
            v19520 = !v23284
          }
          v13802 = v19520
        }
        var v3979 = v13802;
        if(v3979) {
          var v13803 = this.checker;
          var v3978 = v13803.errorReporter;
          JAMScript.call(v3978.simpleError, v3978, [ast$$97, "'++' and '--' may only be applied to operands of type 'number' or 'any'"])
        }
      }
      return unex$$3
    }
    function v1033(ast$$96) {
      var v3981 = ast$$96.flags;
      var v13804 = TypeScript$$25.ASTFlags;
      var v3982 = v13804.Writeable;
      return JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v3981, v3982])
    }
    function v1032(ast$$95) {
      var unex$$2 = ast$$95;
      var v3983 = unex$$2;
      var v13805 = unex$$2.operand;
      var v27027 = JAMScript.call(this.typeCheck, this, [v13805]);
      v3983.operand = v27027;
      unex$$2.type = this.booleanType;
      return unex$$2
    }
    function v1031(ast$$94) {
      var unex$$1 = ast$$94;
      var v3984 = unex$$1;
      var v13806 = unex$$1.operand;
      var v27028 = JAMScript.call(this.typeCheck, this, [v13806]);
      v3984.operand = v27028;
      unex$$1.type = this.doubleType;
      return ast$$94
    }
    function v1030(ast$$93) {
      var unex = ast$$93;
      var v3985 = unex;
      var v13807 = unex.operand;
      var v27029 = JAMScript.call(this.typeCheck, this, [v13807]);
      v3985.operand = v27029;
      unex.type = this.doubleType;
      return unex
    }
    function v1029(script$$16) {
      var v3986 = this.checker;
      v3986.locationInfo = script$$16.locationInfo;
      var v3987 = this.checker;
      this.scope = v3987.globalScope;
      var v13808 = script$$16.topLevelMod;
      var v3992 = !v13808;
      if(v3992) {
        var v3988 = this.scope;
        var v13809 = this.checker;
        var v3989 = v13809.gloMod;
        var v3990 = script$$16.vars;
        var v13810 = this.checker;
        var v3991 = v13810.globals;
        JAMScript.call(this.addLocalsFromScope, this, [v3988, v3989, v3990, v3991, true])
      }
      this.currentScript = script$$16;
      var v3993 = script$$16;
      var v13811 = script$$16.bod;
      var v27030 = JAMScript.call(this.typeCheck, this, [v13811]);
      v3993.bod = v27030;
      this.currentScript = null;
      return script$$16
    }
    function v1028(ast$$92) {
      function v1027(id$$22) {
        var v3994 = _this$$7.scope;
        return JAMScript.call(v3994.find, v3994, [id$$22, false, typespace$$24])
      }
      var _this$$7 = this;
      var identifier$$3 = ast$$92;
      var v13812 = this.checker;
      var v4015 = v13812.inWith;
      if(v4015) {
        identifier$$3.type = this.anyType
      }else {
        var typespace$$24 = this.inTypeRefTypeCheck;
        var idText$$4 = identifier$$3.text;
        var originalIdText$$1 = idText$$4;
        var v3995 = identifier$$3.text;
        var isDynamicModuleName = JAMScript.call(TypeScript$$25.isQuoted, TypeScript$$25, [v3995]);
        var v3996 = this.scope;
        var symbol$$18 = JAMScript.call(v3996.find, v3996, [idText$$4, false, typespace$$24]);
        var v13813 = symbol$$18 == null;
        if(v13813) {
          v13813 = isDynamicModuleName
        }
        var v3999 = v13813;
        if(v3999) {
          var v3997 = this.checker;
          var v19521 = this.currentScript;
          var v13814 = v19521.locationInfo;
          var v3998 = v13814.filename;
          symbol$$18 = JAMScript.call(v3997.findSymbolForDynamicModule, v3997, [idText$$4, v3998, v1027])
        }
        var v4014 = !symbol$$18;
        if(v4014) {
          var v13815 = JAMScript.call(identifier$$3.isMissing, identifier$$3, []);
          var v4002 = !v13815;
          if(v4002) {
            var v13816 = this.checker;
            var v4000 = v13816.errorReporter;
            var v4001 = identifier$$3.text;
            JAMScript.call(v4000.unresolvedSymbol, v4000, [identifier$$3, v4001])
          }
          identifier$$3.type = this.anyType
        }else {
          var v13817 = TypeScript$$25.optimizeModuleCodeGen;
          if(v13817) {
            var v19522 = symbol$$18;
            if(v19522) {
              v19522 = JAMScript.call(symbol$$18.isType, symbol$$18, [])
            }
            v13817 = v19522
          }
          var v4006 = v13817;
          if(v4006) {
            var symType$$2 = JAMScript.call(symbol$$18.getType, symbol$$18, []);
            var v13818 = symType$$2;
            if(v13818) {
              var v19523 = symbol$$18.aliasLink;
              if(v19523) {
                v19523 = symbol$$18.onlyReferencedAsTypeRef
              }
              v13818 = v19523
            }
            var v4005 = v13818;
            if(v4005) {
              var v4003 = symType$$2.symbol;
              var modDecl$$2 = v4003.declAST;
              var v13819 = modDecl$$2;
              if(v13819) {
                var v19524 = modDecl$$2.modFlags;
                var v23285 = TypeScript$$25.ModuleFlags;
                var v19525 = v23285.IsDynamic;
                v13819 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19524, v19525])
              }
              var v4004 = v13819;
              if(v4004) {
                symbol$$18.onlyReferencedAsTypeRef = this.inTypeRefTypeCheck
              }
            }
          }
          var v13820 = symbol$$18.declAST;
          if(v13820) {
            var v25135 = symbol$$18.declAST;
            var v23286 = v25135.nodeType;
            var v25136 = TypeScript$$25.NodeType;
            var v23287 = v25136.FuncDecl;
            var v19526 = v23286 == v23287;
            if(v19526) {
              var v25996 = symbol$$18.declAST;
              var v25137 = v25996.returnTypeAnnotation;
              var v23288 = !v25137;
              if(v23288) {
                var v26458 = symbol$$18.declAST;
                var v25997 = v26458.signature;
                var v25138 = v25997.typeCheckStatus;
                var v25998 = TypeScript$$25.TypeCheckStatus;
                var v25139 = v25998.Started;
                v23288 = v25138 == v25139
              }
              v19526 = v23288
            }
            v13820 = v19526
          }
          var v4009 = v13820;
          if(v4009) {
            var v19527 = symbol$$18.declAST;
            var v13821 = v19527.type;
            var v4007 = v13821.symbol;
            var v19528 = v4007.flags;
            var v23289 = TypeScript$$25.SymbolFlags;
            var v19529 = v23289.RecursivelyReferenced;
            v4007.flags = v19528 | v19529;
            var v19530 = symbol$$18.declAST;
            var v13822 = v19530.signature;
            var v4008 = v13822.returnType;
            v4008.type = this.anyType
          }
          JAMScript.call(this.setTypeFromSymbol, this, [ast$$92, symbol$$18]);
          identifier$$3.sym = symbol$$18;
          var v4013 = this.thisFnc;
          if(v4013) {
            var v19531 = this.thisFnc;
            var v13823 = v19531.type;
            if(v13823) {
              var v19532 = symbol$$18.container;
              var v25140 = this.thisFnc;
              var v23290 = v25140.type;
              var v19533 = v23290.symbol;
              v13823 = v19532 != v19533
            }
            var v4012 = v13823;
            if(v4012) {
              var v13824 = this.thisFnc;
              var v4010 = v13824.freeVariables;
              var v19534 = this.thisFnc;
              var v13825 = v19534.freeVariables;
              var v4011 = v13825.length;
              JAMScript.set(v4010, v4011, symbol$$18)
            }
          }
        }
      }
      return ast$$92
    }
    function v1026(ast$$91, symbol$$17) {
      var v4031 = JAMScript.call(symbol$$17.isVariable, symbol$$17, []);
      if(v4031) {
        var v4022 = JAMScript.call(symbol$$17.isInferenceSymbol, symbol$$17, []);
        if(v4022) {
          var infSym$$1 = symbol$$17;
          var v13826 = infSym$$1.declAST;
          if(v13826) {
            var v23291 = this.checker;
            var v23292 = infSym$$1.typeCheckStatus;
            var v19535 = JAMScript.call(v23291.typeStatusIsFinished, v23291, [v23292]);
            v13826 = !v19535
          }
          var v4017 = v13826;
          if(v4017) {
            var v4016 = infSym$$1.declAST;
            JAMScript.call(this.inScopeTypeCheckDecl, this, [v4016])
          }
          var v23293 = this.checker;
          var v19536 = v23293.styleSettings;
          var v13827 = v19536.innerScopeDeclEscape;
          var v4021 = !v13827;
          if(v4021) {
            var v13828 = infSym$$1.declAST;
            if(v13828) {
              var v23294 = infSym$$1.declAST;
              var v19537 = v23294.nodeType;
              var v23295 = TypeScript$$25.NodeType;
              var v19538 = v23295.VarDecl;
              v13828 = v19537 == v19538
            }
            var v4020 = v13828;
            if(v4020) {
              var v13829 = this.nestingLevel;
              var v19539 = infSym$$1.declAST;
              var v13830 = v19539.nestingLevel;
              var v4019 = v13829 < v13830;
              if(v4019) {
                var v13831 = this.checker;
                var v4018 = v13831.errorReporter;
                JAMScript.call(v4018.styleError, v4018, [ast$$91, "Illegal reference to a variable defined in more nested scope"])
              }
            }
          }
        }
        var v4023 = ast$$91;
        var v27031 = JAMScript.call(symbol$$17.getType, symbol$$17, []);
        v4023.type = v27031;
        var v13832 = JAMScript.call(symbol$$17.writeable, symbol$$17, []);
        var v4025 = !v13832;
        if(v4025) {
          var v4024 = ast$$91;
          var v13833 = ast$$91.flags;
          var v23296 = TypeScript$$25.ASTFlags;
          var v19540 = v23296.Writeable;
          var v13834 = ~v19540;
          v4024.flags = v13833 & v13834
        }
      }else {
        var v4030 = JAMScript.call(symbol$$17.isType, symbol$$17, []);
        if(v4030) {
          var v4026 = ast$$91;
          var v27032 = JAMScript.call(symbol$$17.getType, symbol$$17, []);
          v4026.type = v27032;
          var v4027 = ast$$91;
          var v13835 = ast$$91.flags;
          var v23297 = TypeScript$$25.ASTFlags;
          var v19541 = v23297.Writeable;
          var v13836 = ~v19541;
          v4027.flags = v13835 & v13836
        }else {
          ast$$91.type = this.anyType;
          var v13837 = this.checker;
          var v4028 = v13837.errorReporter;
          var v4029 = symbol$$17.name;
          JAMScript.call(v4028.symbolDoesNotReferToAValue, v4028, [ast$$91, v4029])
        }
      }
      return
    }
    function v1025(ast$$90) {
      ast$$90.type = this.anyType;
      var illegalThisRef = false;
      var v13838 = this.thisFnc;
      var v4039 = v13838 == null;
      if(v4039) {
        var v4035 = this.thisType;
        if(v4035) {
          var v13839 = this.thisClassNode;
          if(v13839) {
            var v23298 = this.thisClassNode;
            var v19542 = v23298.nodeType;
            var v23299 = TypeScript$$25.NodeType;
            var v19543 = v23299.ClassDeclaration;
            v13839 = v19542 == v19543
          }
          var v4032 = v13839;
          if(v4032) {
            illegalThisRef = true
          }else {
            ast$$90.type = this.thisType
          }
        }else {
          var v13840 = this.checker;
          var v4034 = v13840.currentModDecl;
          if(v4034) {
            var v13841 = this.checker;
            var v4033 = v13841.errorReporter;
            JAMScript.call(v4033.simpleError, v4033, [ast$$90, "'this' may not be referenced within module bodies"])
          }
        }
      }else {
        var v13842 = this.thisClassNode;
        if(v13842) {
          var v25141 = this.thisFnc;
          var v23300 = v25141.fncFlags;
          var v25142 = TypeScript$$25.FncFlags;
          var v23301 = v25142.IsPropertyBound;
          var v19544 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23300, v23301]);
          var v23303 = !v19544;
          if(v23303) {
            var v23302 = this.inSuperCall;
            if(v23302) {
              var v25999 = this.thisClassNode;
              var v25143 = v25999.varFlags;
              var v26000 = TypeScript$$25.VarFlags;
              var v25144 = v26000.ClassSuperMustBeFirstCallInConstructor;
              v23302 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v25143, v25144])
            }
            v19544 = v23302
          }
          v13842 = v19544
        }
        var v4036 = v13842;
        if(v4036) {
          illegalThisRef = true
        }
        var v19545 = this.thisFnc;
        var v13843 = JAMScript.call(v19545.isMethod, v19545, []);
        var v19547 = !v13843;
        if(v19547) {
          var v23304 = this.thisFnc;
          var v19546 = v23304.isConstructor;
          var v23306 = !v19546;
          if(v23306) {
            var v23305 = this.thisFnc;
            v19546 = v23305.isTargetTypedAsMethod
          }
          v13843 = v19546
        }
        var v4038 = v13843;
        if(v4038) {
          var v13844 = this.thisType;
          if(v13844) {
            var v25145 = this.thisFnc;
            var v23307 = v25145.fncFlags;
            var v25146 = TypeScript$$25.FncFlags;
            var v23308 = v25146.Static;
            var v19548 = v23307 & v23308;
            v13844 = !v19548
          }
          var v4037 = v13844;
          if(v4037) {
            ast$$90.type = this.thisType
          }
        }
      }
      var v19549 = this.enclosingFncIsMethod;
      var v13845 = !v19549;
      if(v13845) {
        var v19550 = this.thisFnc;
        if(v19550) {
          var v25147 = this.thisFnc;
          var v23309 = v25147.fncFlags;
          var v25148 = TypeScript$$25.FncFlags;
          var v23310 = v25148.IsFatArrowFunction;
          v19550 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23309, v23310])
        }
        v13845 = v19550
      }
      var v4055 = v13845;
      if(v4055) {
        var v13846 = this.thisFnc;
        var v4054 = v13846.boundToProperty;
        if(v4054) {
          var v19551 = this.thisFnc;
          var v13847 = v19551.boundToProperty;
          var v4040 = v13847.sym;
          var container$$17 = v4040.container;
          var v19552 = container$$17.declAST;
          var v13848 = v19552.nodeType;
          var v19553 = TypeScript$$25.NodeType;
          var v13849 = v19553.FuncDecl;
          var v4042 = v13848 == v13849;
          if(v4042) {
            var v4041 = container$$17.declAST;
            JAMScript.call(v4041.setHasSelfReference, v4041, [])
          }
        }else {
          var v4043 = this.thisFnc;
          var encFnc = v4043.enclosingFnc;
          var firstEncFnc = encFnc;
          for(;encFnc;) {
            var v13850 = this.thisClassNode;
            if(v13850) {
              var v19554 = encFnc.fncFlags;
              var v23311 = TypeScript$$25.FncFlags;
              var v19555 = v23311.IsPropertyBound;
              v13850 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19554, v19555])
            }
            var v4044 = v13850;
            if(v4044) {
              illegalThisRef = true
            }
            var v23312 = encFnc.fncFlags;
            var v25149 = TypeScript$$25.FncFlags;
            var v23313 = v25149.IsFatArrowFunction;
            var v19556 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v23312, v23313]);
            var v13851 = !v19556;
            var v19557 = !v13851;
            if(v19557) {
              v13851 = JAMScript.call(encFnc.hasSelfReference, encFnc, [])
            }
            var v4045 = v13851;
            if(v4045) {
              JAMScript.call(encFnc.setHasSelfReference, encFnc, []);
              break
            }
            encFnc = encFnc.enclosingFnc
          }
          var v13852 = !encFnc;
          if(v13852) {
            v13852 = firstEncFnc
          }
          var v4052 = v13852;
          if(v4052) {
            encFnc = firstEncFnc;
            JAMScript.call(encFnc.setHasSelfReference, encFnc, [])
          }else {
            var v4051 = !encFnc;
            if(v4051) {
              var v4050 = this.thisClassNode;
              if(v4050) {
                var v4046 = this.thisClassNode;
                var v19558 = v4046.varFlags;
                var v23314 = TypeScript$$25.VarFlags;
                var v19559 = v23314.MustCaptureThis;
                v4046.varFlags = v19558 | v19559
              }else {
                var v13853 = this.checker;
                var v4049 = v13853.currentModDecl;
                if(v4049) {
                  var v13854 = this.checker;
                  var v4047 = v13854.currentModDecl;
                  var v19560 = v4047.modFlags;
                  var v23315 = TypeScript$$25.ModuleFlags;
                  var v19561 = v23315.MustCaptureThis;
                  v4047.modFlags = v19560 | v19561
                }else {
                  var v4048 = this.checker;
                  v4048.mustCaptureGlobalThis = true
                }
              }
            }
          }
          var v13855 = encFnc;
          if(v13855) {
            var v23316 = JAMScript.call(encFnc.isMethod, encFnc, []);
            var v25150 = !v23316;
            if(v25150) {
              v23316 = encFnc.isConstructor
            }
            var v19562 = v23316;
            if(v19562) {
              var v23317 = this.thisType;
              if(v23317) {
                var v26001 = encFnc.fncFlags;
                var v26459 = TypeScript$$25.FncFlags;
                var v26002 = v26459.Static;
                var v25151 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v26001, v26002]);
                v23317 = !v25151
              }
              v19562 = v23317
            }
            v13855 = v19562
          }
          var v4053 = v13855;
          if(v4053) {
            ast$$90.type = this.thisType
          }
        }
      }
      if(illegalThisRef) {
        var v13856 = this.checker;
        var v4056 = v13856.errorReporter;
        JAMScript.call(v4056.simpleError, v4056, [ast$$90, "Keyword 'this' cannot be referenced in initializers in a class body, or in super constructor calls"])
      }
      return ast$$90
    }
    function v1024(ast$$89) {
      var v13857 = this.thisType;
      if(v13857) {
        var v23318 = this.enclosingFncIsMethod;
        if(v23318) {
          var v26003 = this.thisFnc;
          var v25152 = JAMScript.call(v26003.isStatic, v26003, []);
          v23318 = !v25152
        }
        var v19563 = v23318;
        if(v19563) {
          var v23319 = this.thisType;
          v19563 = JAMScript.call(v23319.baseClass, v23319, [])
        }
        v13857 = v19563
      }
      var v4064 = v13857;
      if(v4064) {
        var v4057 = ast$$89;
        var v13858 = this.thisType;
        var v27033 = JAMScript.call(v13858.baseClass, v13858, []);
        v4057.type = v27033
      }else {
        var v19564 = this.enclosingFncIsMethod;
        var v13859 = !v19564;
        if(v13859) {
          var v19565 = this.thisType;
          if(v19565) {
            var v25153 = this.thisType;
            var v23320 = JAMScript.call(v25153.baseClass, v25153, []);
            if(v23320) {
              var v25154 = this.thisFnc;
              if(v25154) {
                var v26460 = this.thisFnc;
                var v26004 = v26460.fncFlags;
                var v26461 = TypeScript$$25.FncFlags;
                var v26005 = v26461.IsFatArrowFunction;
                v25154 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v26004, v26005])
              }
              v23320 = v25154
            }
            v19565 = v23320
          }
          v13859 = v19565
        }
        var v4062 = v13859;
        if(v4062) {
          var v4058 = this.thisFnc;
          var enclosingFnc = v4058.enclosingFnc;
          var v13860 = enclosingFnc.fncFlags;
          var v19566 = TypeScript$$25.FncFlags;
          var v13861 = v19566.IsFatArrowFunction;
          var v4059 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13860, v13861]);
          for(;v4059;) {
            enclosingFnc = enclosingFnc.enclosingFnc;
            var v13862 = enclosingFnc.fncFlags;
            var v19567 = TypeScript$$25.FncFlags;
            var v13863 = v19567.IsFatArrowFunction;
            v4059 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13862, v13863])
          }
          var v13864 = enclosingFnc;
          if(v13864) {
            var v23321 = JAMScript.call(enclosingFnc.isMethod, enclosingFnc, []);
            var v25155 = !v23321;
            if(v25155) {
              v23321 = enclosingFnc.isConstructor
            }
            var v19568 = v23321;
            if(v19568) {
              var v23322 = JAMScript.call(enclosingFnc.isStatic, enclosingFnc, []);
              v19568 = !v23322
            }
            v13864 = v19568
          }
          var v4061 = v13864;
          if(v4061) {
            var v4060 = ast$$89;
            var v13865 = this.thisType;
            var v27034 = JAMScript.call(v13865.baseClass, v13865, []);
            v4060.type = v27034;
            JAMScript.call(enclosingFnc.setHasSuperReferenceInFatArrowFunction, enclosingFnc, []);
            return ast$$89
          }
        }
        ast$$89.type = this.anyType;
        var v13866 = this.checker;
        var v4063 = v13866.errorReporter;
        JAMScript.call(v4063.invalidSuperReference, v4063, [ast$$89])
      }
      return ast$$89
    }
    function v1023(varDecl$$17, typeName$$2, isModuleName$$1) {
      var typestring = "";
      if(isModuleName$$1) {
        var quotestring = "";
        var v13867 = JAMScript.call(TypeScript$$25.isQuoted, TypeScript$$25, [typeName$$2]);
        var v4065 = !v13867;
        if(v4065) {
          quotestring = "'"
        }
        var v13868 = " is using inaccessible module " + quotestring;
        var v4066 = v13868 + typeName$$2;
        typestring = v4066 + quotestring
      }else {
        var v4067 = " has or is using private type '" + typeName$$2;
        typestring = v4067 + "'"
      }
      var v13869 = varDecl$$17.varFlags;
      var v19569 = TypeScript$$25.VarFlags;
      var v13870 = v19569.Public;
      var v4075 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13869, v13870]);
      if(v4075) {
        var v25156 = varDecl$$17.sym;
        var v23323 = v25156.container;
        var v19570 = v23323.declAST;
        var v13871 = v19570.nodeType;
        var v19571 = TypeScript$$25.NodeType;
        var v13872 = v19571.InterfaceDeclaration;
        var v4072 = v13871 == v13872;
        if(v4072) {
          var v13873 = this.checker;
          var v4068 = v13873.errorReporter;
          var v25157 = varDecl$$17.sym;
          var v23324 = v25157.name;
          var v19572 = "property '" + v23324;
          var v13874 = v19572 + "' of exported interface";
          var v4069 = v13874 + typestring;
          JAMScript.call(v4068.simpleError, v4068, [varDecl$$17, v4069])
        }else {
          var v13875 = this.checker;
          var v4070 = v13875.errorReporter;
          var v25158 = varDecl$$17.sym;
          var v23325 = v25158.name;
          var v19573 = "public member '" + v23325;
          var v13876 = v19573 + "' of exported class";
          var v4071 = v13876 + typestring;
          JAMScript.call(v4070.simpleError, v4070, [varDecl$$17, v4071])
        }
      }else {
        var v13877 = this.checker;
        var v4073 = v13877.errorReporter;
        var v25159 = varDecl$$17.sym;
        var v23326 = v25159.name;
        var v19574 = "exported variable '" + v23326;
        var v13878 = v19574 + "'";
        var v4074 = v13878 + typestring;
        JAMScript.call(v4073.simpleError, v4073, [varDecl$$17, v4074])
      }
      return
    }
    function v1022(varDecl$$16) {
      function v1021(typeName$$1, isModuleName) {
        return JAMScript.call(_this$$6.varPrivacyErrorReporter, _this$$6, [varDecl$$16, typeName$$1, isModuleName])
      }
      function v1020(ast$$88, parent$$65, walker$$49) {
        var v13879 = ast$$88;
        if(v13879) {
          var v19575 = ast$$88.nodeType;
          var v23327 = TypeScript$$25.NodeType;
          var v19576 = v23327.FuncDecl;
          v13879 = v19575 == v19576
        }
        var v4078 = v13879;
        if(v4078) {
          var v13880 = ast$$88.fncFlags;
          var v19577 = TypeScript$$25.FncFlags;
          var v13881 = v19577.IsFatArrowFunction;
          var v4076 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v13880, v13881]);
          if(v4076) {
            var v13882 = ast$$88;
            var v19578 = ast$$88.fncFlags;
            var v23328 = TypeScript$$25.FncFlags;
            var v19579 = v23328.IsPropertyBound;
            v13882.fncFlags = v19578 | v19579
          }
          var v4077 = walker$$49.options;
          v4077.goChildren = false
        }
        return ast$$88
      }
      var _this$$6 = this;
      var infSym = varDecl$$16.sym;
      var v4128 = infSym == null;
      if(v4128) {
        var v4083 = varDecl$$16.init;
        if(v4083) {
          var v4079 = varDecl$$16;
          var v13883 = varDecl$$16.init;
          var v27035 = JAMScript.call(this.typeCheck, this, [v13883]);
          v4079.init = v27035;
          var v4080 = varDecl$$16;
          var v13884 = this.checker;
          var v19580 = varDecl$$16.init;
          var v13885 = v19580.type;
          var v27036 = JAMScript.call(v13884.widenType, v13884, [v13885]);
          v4080.type = v27036
        }else {
          var v19581 = this.checker;
          var v13886 = v19581.styleSettings;
          var v4082 = v13886.implicitAny;
          if(v4082) {
            var v13887 = this.checker;
            var v4081 = v13887.errorReporter;
            JAMScript.call(v4081.styleError, v4081, [varDecl$$16, "type implicitly set to 'any'"])
          }
          varDecl$$16.type = this.anyType
        }
      }else {
        var v13888 = infSym.typeCheckStatus;
        var v19582 = TypeScript$$25.TypeCheckStatus;
        var v13889 = v19582.Started;
        var v4127 = v13888 == v13889;
        if(v4127) {
          var v19583 = this.checker;
          var v13890 = v19583.styleSettings;
          var v4085 = v13890.implicitAny;
          if(v4085) {
            var v13891 = this.checker;
            var v4084 = v13891.errorReporter;
            JAMScript.call(v4084.styleError, v4084, [varDecl$$16, "type implicitly set to 'any'"])
          }
          varDecl$$16.type = this.anyType;
          var v4086 = this.anyType;
          JAMScript.call(infSym.setType, infSym, [v4086])
        }else {
          var v13892 = infSym.typeCheckStatus;
          var v19584 = TypeScript$$25.TypeCheckStatus;
          var v13893 = v19584.NotStarted;
          var v4126 = v13892 == v13893;
          if(v4126) {
            var v4087 = TypeScript$$25.TypeCheckStatus;
            infSym.typeCheckStatus = v4087.Started;
            var v4088 = this.checker;
            JAMScript.call(v4088.addStartedPTO, v4088, [infSym]);
            var resolved$$1 = false;
            var v13894 = varDecl$$16.type;
            var v4092 = v13894 == null;
            if(v4092) {
              var v4091 = varDecl$$16.typeExpr;
              if(v4091) {
                JAMScript.call(this.resolveBoundDecl, this, [varDecl$$16]);
                resolved$$1 = true;
                var v4089 = varDecl$$16;
                var v13895 = varDecl$$16.typeExpr;
                v4089.type = v13895.type;
                var v4090 = infSym;
                var v13896 = this.checker;
                var v27037 = JAMScript.call(v13896.getTypeCheckFinishedStatus, v13896, []);
                v4090.typeCheckStatus = v27037
              }
            }
            var v4119 = varDecl$$16.init;
            if(v4119) {
              var v4093 = varDecl$$16.varFlags;
              var v13897 = TypeScript$$25.VarFlags;
              var v4094 = v13897.LocalStatic;
              var isLocalStatic = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v4093, v4094]);
              var prevScope$$3 = this.scope;
              var v13898 = varDecl$$16.init;
              var v4095 = v13898.isParenthesized;
              var applyTargetType$$1 = !v4095;
              if(isLocalStatic) {
                var v19585 = varDecl$$16.sym;
                var v13899 = v19585.container;
                var v4096 = JAMScript.call(v13899.getType, v13899, []);
                this.scope = v4096.memberScope
              }
              var v19586 = varDecl$$16.varFlags;
              var v23329 = TypeScript$$25.VarFlags;
              var v19587 = v23329.Property;
              var v13900 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19586, v19587]);
              if(v13900) {
                v13900 = this.thisClassNode
              }
              var v4099 = v13900;
              if(v4099) {
                var v4097 = JAMScript.call(TypeScript$$25.getAstWalkerFactory, TypeScript$$25, []);
                var v4098 = varDecl$$16.init;
                JAMScript.call(v4097.walk, v4097, [v4098, v1020])
              }
              var v4100 = this.checker;
              var v4101 = varDecl$$16.type;
              var v13901 = this.checker;
              var v4102 = JAMScript.call(v13901.inProvisionalTypecheckMode, v13901, []);
              var v4103 = varDecl$$16.init;
              JAMScript.call(v4100.typeCheckWithContextualType, v4100, [v4101, v4102, applyTargetType$$1, v4103]);
              this.scope = prevScope$$3;
              var v4116 = varDecl$$16.type;
              if(v4116) {
                var preserveScope = false;
                var preservedContainedScope = null;
                var v13902 = varDecl$$16.init;
                var v4108 = v13902.type;
                if(v4108) {
                  var v13903 = varDecl$$16.init;
                  var v4104 = v13903.type;
                  preservedContainedScope = v4104.containedScope;
                  preserveScope = true;
                  var v19588 = varDecl$$16.init;
                  var v13904 = v19588.type;
                  var v13905 = this.voidType;
                  var v4107 = v13904 == v13905;
                  if(v4107) {
                    var v13906 = this.checker;
                    var v4105 = v13906.errorReporter;
                    var v23330 = varDecl$$16.id;
                    var v19589 = v23330.actualText;
                    var v13907 = "Cannot assign type 'void' to variable '" + v19589;
                    var v4106 = v13907 + "'";
                    JAMScript.call(v4105.simpleError, v4105, [varDecl$$16, v4106])
                  }
                }
                var v4109 = varDecl$$16;
                var v13908 = varDecl$$16.init;
                var v13909 = varDecl$$16.type;
                var v19590 = applyTargetType$$1;
                if(v19590) {
                  var v25160 = this.checker;
                  var v23331 = JAMScript.call(v25160.inProvisionalTypecheckMode, v25160, []);
                  v19590 = !v23331
                }
                var v13910 = v19590;
                var v27038 = JAMScript.call(this.castWithCoercion, this, [v13908, v13909, v13910, false]);
                v4109.init = v27038;
                var v13911 = preserveScope;
                if(v13911) {
                  var v25161 = varDecl$$16.init;
                  var v23332 = v25161.type;
                  var v19591 = v23332.containedScope;
                  v13911 = v19591 == null
                }
                var v4111 = v13911;
                if(v4111) {
                  var v13912 = varDecl$$16.init;
                  var v4110 = v13912.type;
                  v4110.containedScope = preservedContainedScope
                }
              }else {
                var v4112 = varDecl$$16;
                var v13913 = this.checker;
                var v19592 = varDecl$$16.init;
                var v13914 = v19592.type;
                var v27039 = JAMScript.call(v13913.widenType, v13913, [v13914]);
                v4112.type = v27039;
                var v13915 = varDecl$$16.type;
                var v13916 = this.voidType;
                var v4115 = v13915 == v13916;
                if(v4115) {
                  var v13917 = this.checker;
                  var v4113 = v13917.errorReporter;
                  var v23333 = varDecl$$16.id;
                  var v19593 = v23333.actualText;
                  var v13918 = "Cannot assign type 'void' to variable '" + v19593;
                  var v4114 = v13918 + "'";
                  JAMScript.call(v4113.simpleError, v4113, [varDecl$$16, v4114]);
                  varDecl$$16.type = this.anyType
                }
              }
              var v4117 = varDecl$$16.type;
              JAMScript.call(infSym.setType, infSym, [v4117])
            }else {
              var v4118 = !resolved$$1;
              if(v4118) {
                JAMScript.call(this.resolveBoundDecl, this, [varDecl$$16])
              }
            }
            var v4120 = infSym;
            var v13919 = this.checker;
            var v27040 = JAMScript.call(v13919.getTypeCheckFinishedStatus, v13919, []);
            v4120.typeCheckStatus = v27040
          }else {
            var v19594 = this.checker;
            var v19595 = infSym.typeCheckStatus;
            var v13920 = JAMScript.call(v19594.typeStatusIsFinished, v19594, [v19595]);
            if(v13920) {
              var v19596 = infSym.declAST;
              v13920 = v19596 != varDecl$$16
            }
            var v4125 = v13920;
            if(v4125) {
              var v4124 = varDecl$$16.init;
              if(v4124) {
                var v4121 = varDecl$$16;
                var v13921 = varDecl$$16.init;
                var v27041 = JAMScript.call(this.typeCheck, this, [v13921]);
                v4121.init = v27041;
                var v4122 = varDecl$$16;
                var v27042 = JAMScript.call(infSym.getType, infSym, []);
                v4122.type = v27042;
                var v4123 = varDecl$$16;
                var v13922 = varDecl$$16.init;
                var v13923 = varDecl$$16.type;
                var v27043 = JAMScript.call(this.cast, this, [v13922, v13923]);
                v4123.init = v27043
              }
            }
          }
        }
      }
      var v13924 = varDecl$$16.id;
      if(v13924) {
        v13924 = varDecl$$16.sym
      }
      var v4130 = v13924;
      if(v4130) {
        var v4129 = varDecl$$16.id;
        v4129.sym = varDecl$$16.sym
      }
      var v13925 = varDecl$$16.sym;
      if(v13925) {
        var v19597 = varDecl$$16.sym;
        v13925 = v19597.container
      }
      var v4133 = v13925;
      if(v4133) {
        var v13926 = varDecl$$16.sym;
        var v4131 = JAMScript.call(v13926.getType, v13926, []);
        var v4132 = varDecl$$16.sym;
        JAMScript.call(this.checkTypePrivacy, this, [v4131, v4132, v1021])
      }
      return varDecl$$16
    }
    function v1019(varDecl$$15) {
      var v4150 = varDecl$$15.typeExpr;
      if(v4150) {
        var v23334 = varDecl$$15.typeExpr;
        var v19598 = v23334.type;
        var v13927 = v19598 == null;
        var v19600 = !v13927;
        if(v19600) {
          var v25162 = varDecl$$15.typeExpr;
          var v23335 = v25162.type;
          if(v23335) {
            var v26462 = varDecl$$15.typeExpr;
            var v26006 = v26462.type;
            var v26007 = this.anyType;
            var v25163 = v26006 == v26007;
            if(v25163) {
              v25163 = this.scope
            }
            v23335 = v25163
          }
          var v19599 = v23335;
          var v23337 = !v19599;
          if(v23337) {
            var v26463 = varDecl$$15.typeExpr;
            var v26008 = v26463.type;
            var v25164 = v26008.symbol;
            var v23336 = v25164 == null;
            var v25166 = !v23336;
            if(v25166) {
              var v26009 = this.checker;
              var v26775 = varDecl$$15.typeExpr;
              var v26675 = v26775.type;
              var v26464 = v26675.symbol;
              var v26010 = v26464.typeCheckStatus;
              var v25165 = JAMScript.call(v26009.typeStatusIsFinished, v26009, [v26010]);
              v23336 = !v25165
            }
            v19599 = v23336
          }
          v13927 = v19599
        }
        var v4135 = v13927;
        if(v4135) {
          var v4134 = varDecl$$15.typeExpr;
          JAMScript.call(this.typeCheck, this, [v4134])
        }
        var v4136 = varDecl$$15;
        var v13928 = varDecl$$15.typeExpr;
        v4136.type = v13928.type;
        var v4139 = varDecl$$15.sym;
        if(v4139) {
          var v4137 = varDecl$$15.sym;
          var v4138 = varDecl$$15.type;
          JAMScript.call(v4137.setType, v4137, [v4138])
        }
      }else {
        var v13929 = varDecl$$15.init;
        var v4149 = v13929 == null;
        if(v4149) {
          var v19601 = this.checker;
          var v13930 = v19601.styleSettings;
          var v4141 = v13930.implicitAny;
          if(v4141) {
            var v13931 = this.checker;
            var v4140 = v13931.errorReporter;
            JAMScript.call(v4140.styleError, v4140, [varDecl$$15, "type implicitly set to 'any'"])
          }
          varDecl$$15.type = this.anyType;
          var v4148 = varDecl$$15.sym;
          if(v4148) {
            var v13932 = varDecl$$15.sym;
            var v4145 = JAMScript.call(v13932.isType, v13932, []);
            if(v4145) {
              var tsym$$1 = varDecl$$15.sym;
              var v4144 = tsym$$1.isMethod;
              if(v4144) {
                var v13933 = this.checker;
                var v4142 = v13933.errorReporter;
                JAMScript.call(v4142.simpleError, v4142, [varDecl$$15, "Cannot bind method group to variable.  (Did you mean to use 'declare function' instead of 'declare var'?)"]);
                return
              }else {
                var v13934 = this.checker;
                var v4143 = v13934.errorReporter;
                JAMScript.call(v4143.simpleError, v4143, [varDecl$$15, "Cannot bind type to variable"]);
                return
              }
            }
            var v4146 = varDecl$$15.sym;
            var v4147 = varDecl$$15.type;
            JAMScript.call(v4146.setType, v4146, [v4147])
          }
        }
      }
      return
    }
    function v1018(varDecl$$14) {
      var sym$$34 = varDecl$$14.sym;
      var svThisFnc$$1 = this.thisFnc;
      var svThisType$$1 = this.thisType;
      var prevMethodStatus$$1 = this.enclosingFncIsMethod;
      var v4151 = this.checker;
      var prevLocationInfo$$1 = v4151.locationInfo;
      var v13935 = sym$$34;
      if(v13935) {
        v13935 = sym$$34.container
      }
      var v4161 = v13935;
      if(v4161) {
        var v4152;
        var v19602 = varDecl$$14.varFlags;
        var v23338 = TypeScript$$25.VarFlags;
        var v19603 = v23338.ClassConstructorProperty;
        var v13938 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19602, v19603]);
        if(v13938) {
          var v19604 = sym$$34.container;
          var v13936 = JAMScript.call(v19604.getType, v19604, []);
          v4152 = v13936.constructorScope
        }else {
          var v13937 = sym$$34.container;
          v4152 = JAMScript.call(v13937.instanceScope, v13937, [])
        }
        var instanceScope = v4152;
        var v19605 = varDecl$$14.varFlags;
        var v23339 = TypeScript$$25.VarFlags;
        var v19606 = v23339.Property;
        var v13939 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19605, v19606]);
        if(v13939) {
          var v25167 = sym$$34.container;
          var v23340 = v25167.declAST;
          var v19607 = v23340.nodeType;
          var v23341 = TypeScript$$25.NodeType;
          var v19608 = v23341.FuncDecl;
          v13939 = v19607 == v19608
        }
        var v4154 = v13939;
        if(v4154) {
          var v4153 = sym$$34.container;
          this.thisFnc = v4153.declAST
        }
        if(instanceScope) {
          var prevScope$$2 = this.scope;
          this.scope = instanceScope;
          var container$$16 = sym$$34.container;
          var v19609 = this.checker;
          var v13940 = v19609.units;
          if(v13940) {
            var v23342 = sym$$34.unitIndex;
            var v19610 = v23342 >= 0;
            if(v19610) {
              var v23343 = sym$$34.unitIndex;
              var v26011 = this.checker;
              var v25168 = v26011.units;
              var v23344 = v25168.length;
              v19610 = v23343 < v23344
            }
            v13940 = v19610
          }
          var v4157 = v13940;
          if(v4157) {
            var v4155 = this.checker;
            var v19611 = this.checker;
            var v13941 = v19611.units;
            var v13942 = sym$$34.unitIndex;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              v4155.locationInfo = v13941[v13942]
            }
          }else {
            var v4156 = this.checker;
            v4156.locationInfo = TypeScript$$25.unknownLocationInfo
          }
          for(;container$$16;) {
            var v13943 = JAMScript.call(container$$16.kind, container$$16, []);
            var v19612 = TypeScript$$25.SymbolKind;
            var v13944 = v19612.Type;
            var v4160 = v13943 == v13944;
            if(v4160) {
              var typeSym$$3 = container$$16;
              var type$$49 = typeSym$$3.type;
              var v4158 = type$$49.call;
              if(v4158) {
                this.enclosingFncIsMethod = typeSym$$3.isMethod
              }
              var v4159 = JAMScript.call(type$$49.isClass, type$$49, []);
              if(v4159) {
                this.thisType = type$$49.instanceType;
                break
              }
            }
            container$$16 = container$$16.container
          }
          JAMScript.call(this.typeCheckBoundDecl, this, [varDecl$$14]);
          this.scope = prevScope$$2
        }
      }
      this.thisFnc = svThisFnc$$1;
      this.thisType = svThisType$$1;
      var v4162 = this.checker;
      v4162.locationInfo = prevLocationInfo$$1;
      this.enclosingFncIsMethod = prevMethodStatus$$1;
      return
    }
    function v1017(ast$$87) {
      var v19613 = ast$$87.nodeType;
      var v23345 = TypeScript$$25.NodeType;
      var v19614 = v23345.VarDecl;
      var v13945 = v19613 == v19614;
      var v19617 = !v13945;
      if(v19617) {
        var v19615 = ast$$87.nodeType;
        var v23346 = TypeScript$$25.NodeType;
        var v19616 = v23346.ArgDecl;
        v13945 = v19615 == v19616
      }
      var v4165 = v13945;
      if(v4165) {
        JAMScript.call(this.inScopeTypeCheckBoundDecl, this, [ast$$87])
      }else {
        var v13946 = ast$$87.nodeType;
        var v19618 = TypeScript$$25.NodeType;
        var v13947 = v19618.FuncDecl;
        var v4164 = v13946 == v13947;
        if(v4164) {
          var funcDecl$$23 = ast$$87;
          var v4163 = JAMScript.call(funcDecl$$23.isAccessor, funcDecl$$23, []);
          if(v4163) {
            JAMScript.call(this.typeCheckFunction, this, [funcDecl$$23])
          }
        }
      }
      return
    }
    function v1016(ast$$86) {
      if(ast$$86) {
        return JAMScript.call(ast$$86.typeCheck, ast$$86, [this])
      }else {
        return null
      }
      return
    }
    function v1015(ast$$85, enclosingScope) {
      var prevScope$$1 = this.scope;
      this.scope = enclosingScope;
      var svThisFnc = this.thisFnc;
      var svThisType = this.thisType;
      var svThisClassNode = this.thisClassNode;
      var v4166 = this.checker;
      var svCurrentModDecl = v4166.currentModDecl;
      var prevMethodStatus = this.enclosingFncIsMethod;
      var v4167 = this.scope;
      var container$$15 = v4167.container;
      var fnc$$1 = null;
      for(;container$$15;) {
        var v13948 = JAMScript.call(container$$15.kind, container$$15, []);
        var v19619 = TypeScript$$25.SymbolKind;
        var v13949 = v19619.Type;
        var v4174 = v13948 == v13949;
        if(v4174) {
          var typeSym$$2 = container$$15;
          var type$$48 = typeSym$$2.type;
          var v4169 = type$$48.call;
          if(v4169) {
            var v4168 = fnc$$1 == null;
            if(v4168) {
              this.enclosingFncIsMethod = typeSym$$2.isMethod;
              fnc$$1 = container$$15.declAST
            }
          }
          var v4171 = JAMScript.call(type$$48.isClass, type$$48, []);
          if(v4171) {
            this.thisType = type$$48.instanceType;
            var v13950 = typeSym$$2.declAST;
            if(v13950) {
              var v23347 = typeSym$$2.declAST;
              var v19620 = v23347.nodeType;
              var v23348 = TypeScript$$25.NodeType;
              var v19621 = v23348.ClassDeclaration;
              v13950 = v19620 == v19621
            }
            var v4170 = v13950;
            if(v4170) {
              this.thisClassNode = typeSym$$2.declAST
            }
            break
          }
          var v4173 = JAMScript.call(type$$48.isModuleType, type$$48, []);
          if(v4173) {
            var v4172 = this.checker;
            v4172.currentModDecl = typeSym$$2.declAST;
            break
          }
        }
        container$$15 = container$$15.container
      }
      this.thisFnc = fnc$$1;
      var updated = JAMScript.call(this.typeCheck, this, [ast$$85]);
      this.thisFnc = svThisFnc;
      this.thisType = svThisType;
      this.thisClassNode = svThisClassNode;
      var v4175 = this.checker;
      v4175.currentModDecl = svCurrentModDecl;
      this.enclosingFncIsMethod = prevMethodStatus;
      this.scope = prevScope$$1;
      return updated
    }
    function v1014(ast$$84, type$$47, applyCoercion, typeAssertion) {
      var v4176 = TypeScript$$25.TypeComparisonInfo;
      var comparisonInfo$$12 = JAMScript.new(v4176, []);
      var v19622 = this.checker;
      var v19623 = ast$$84.type;
      var v13951 = JAMScript.call(v19622.sourceIsAssignableToTarget, v19622, [v19623, type$$47, comparisonInfo$$12]);
      var v19625 = !v13951;
      if(v19625) {
        var v19624 = typeAssertion;
        if(v19624) {
          var v23349 = this.checker;
          var v23350 = ast$$84.type;
          v19624 = JAMScript.call(v23349.sourceIsAssignableToTarget, v23349, [type$$47, v23350, comparisonInfo$$12])
        }
        v13951 = v19624
      }
      var v4182 = v13951;
      if(v4182) {
        if(applyCoercion) {
          var v4178 = type$$47 == null;
          if(v4178) {
            ast$$84.type = this.anyType
          }else {
            var v4177 = JAMScript.call(type$$47.isClass, type$$47, []);
            if(v4177) {
              ast$$84.type = type$$47.instanceType
            }else {
              ast$$84.type = type$$47
            }
          }
        }
        return ast$$84
      }else {
        var v13952 = this.checker;
        var v4179 = v13952.errorReporter;
        var v4180 = ast$$84.type;
        var v4181 = this.scope;
        JAMScript.call(v4179.incompatibleTypes, v4179, [ast$$84, v4180, type$$47, null, v4181, comparisonInfo$$12]);
        return ast$$84
      }
      return
    }
    function v1013(ast$$83, type$$46) {
      return JAMScript.call(this.castWithCoercion, this, [ast$$83, type$$46, true, false])
    }
    function v1012() {
      var v4183 = this.globalScope;
      var arraySym = JAMScript.call(v4183.find, v4183, ["Array", false, true]);
      var v13953 = arraySym;
      if(v13953) {
        var v19626 = JAMScript.call(arraySym.kind, arraySym, []);
        var v23351 = TypeScript$$25.SymbolKind;
        var v19627 = v23351.Type;
        v13953 = v19626 == v19627
      }
      var v4184 = v13953;
      if(v4184) {
        this.arrayInterfaceType = arraySym.type
      }
      var v4185 = this.globalScope;
      var stringSym = JAMScript.call(v4185.find, v4185, ["String", false, true]);
      var v13954 = stringSym;
      if(v13954) {
        var v19628 = JAMScript.call(stringSym.kind, stringSym, []);
        var v23352 = TypeScript$$25.SymbolKind;
        var v19629 = v23352.Type;
        v13954 = v19628 == v19629
      }
      var v4186 = v13954;
      if(v4186) {
        this.stringInterfaceType = stringSym.type
      }
      var v4187 = this.globalScope;
      var objectSym = JAMScript.call(v4187.find, v4187, ["Object", false, true]);
      var v13955 = objectSym;
      if(v13955) {
        var v19630 = JAMScript.call(objectSym.kind, objectSym, []);
        var v23353 = TypeScript$$25.SymbolKind;
        var v19631 = v23353.Type;
        v13955 = v19630 == v19631
      }
      var v4188 = v13955;
      if(v4188) {
        this.objectInterfaceType = objectSym.type
      }
      var v4189 = this.globalScope;
      var fnSym = JAMScript.call(v4189.find, v4189, ["Function", false, true]);
      var v13956 = fnSym;
      if(v13956) {
        var v19632 = JAMScript.call(fnSym.kind, fnSym, []);
        var v23354 = TypeScript$$25.SymbolKind;
        var v19633 = v23354.Type;
        v13956 = v19632 == v19633
      }
      var v4190 = v13956;
      if(v4190) {
        this.functionInterfaceType = fnSym.type
      }
      var v4191 = this.globalScope;
      var numberSym = JAMScript.call(v4191.find, v4191, ["Number", false, true]);
      var v13957 = numberSym;
      if(v13957) {
        var v19634 = JAMScript.call(numberSym.kind, numberSym, []);
        var v23355 = TypeScript$$25.SymbolKind;
        var v19635 = v23355.Type;
        v13957 = v19634 == v19635
      }
      var v4192 = v13957;
      if(v4192) {
        this.numberInterfaceType = numberSym.type
      }
      var v4193 = this.globalScope;
      var booleanSym = JAMScript.call(v4193.find, v4193, ["Boolean", false, true]);
      var v13958 = booleanSym;
      if(v13958) {
        var v19636 = JAMScript.call(booleanSym.kind, booleanSym, []);
        var v23356 = TypeScript$$25.SymbolKind;
        var v19637 = v23356.Type;
        v13958 = v19636 == v19637
      }
      var v4194 = v13958;
      if(v4194) {
        this.booleanInterfaceType = booleanSym.type
      }
      var v4195 = this.globalScope;
      var regexSym = JAMScript.call(v4195.find, v4195, ["RegExp", false, true]);
      var v13959 = regexSym;
      if(v13959) {
        var v19638 = JAMScript.call(regexSym.kind, regexSym, []);
        var v23357 = TypeScript$$25.SymbolKind;
        var v19639 = v23357.Type;
        v13959 = v19638 == v19639
      }
      var v4196 = v13959;
      if(v4196) {
        this.regexType = regexSym.type
      }
      return
    }
    function TypeFlow$$1(logger$$4, initScope, parser$$2, checker$$17) {
      this.logger = logger$$4;
      this.initScope = initScope;
      this.parser = parser$$2;
      this.checker = checker$$17;
      this.thisFnc = null;
      this.thisClassNode = null;
      this.enclosingFncIsMethod = false;
      this.arrayInterfaceType = null;
      this.stringInterfaceType = null;
      this.objectInterfaceType = null;
      this.functionInterfaceType = null;
      this.numberInterfaceType = null;
      this.booleanInterfaceType = null;
      this.iargumentsInterfaceType = null;
      this.currentScript = null;
      this.inImportTypeCheck = false;
      this.inTypeRefTypeCheck = false;
      this.inArrayElementTypeCheck = false;
      var v27044 = JAMScript.new(ResolutionDataCache, []);
      this.resolutionDataCache = v27044;
      this.nestingLevel = 0;
      this.inSuperCall = false;
      var v4197 = this.checker;
      v4197.typeFlow = this;
      this.scope = this.initScope;
      this.globalScope = this.initScope;
      var v4198 = this.checker;
      this.doubleType = v4198.numberType;
      var v4199 = this.checker;
      this.booleanType = v4199.booleanType;
      var v4200 = this.checker;
      this.stringType = v4200.stringType;
      var v4201 = this.checker;
      this.anyType = v4201.anyType;
      this.regexType = this.anyType;
      var v4202 = this.checker;
      this.nullType = v4202.nullType;
      var v4203 = this.checker;
      this.voidType = v4203.voidType;
      var v4204 = this.checker;
      var v4205 = this.anyType;
      var v27045 = JAMScript.call(v4204.makeArrayType, v4204, [v4205]);
      this.arrayAnyType = v27045;
      return
    }
    var v4206 = TypeFlow$$1.prototype;
    v4206.initLibs = v1012;
    var v4207 = TypeFlow$$1.prototype;
    v4207.cast = v1013;
    var v4208 = TypeFlow$$1.prototype;
    v4208.castWithCoercion = v1014;
    var v4209 = TypeFlow$$1.prototype;
    v4209.inScopeTypeCheck = v1015;
    var v4210 = TypeFlow$$1.prototype;
    v4210.typeCheck = v1016;
    var v4211 = TypeFlow$$1.prototype;
    v4211.inScopeTypeCheckDecl = v1017;
    var v4212 = TypeFlow$$1.prototype;
    v4212.inScopeTypeCheckBoundDecl = v1018;
    var v4213 = TypeFlow$$1.prototype;
    v4213.resolveBoundDecl = v1019;
    var v4214 = TypeFlow$$1.prototype;
    v4214.typeCheckBoundDecl = v1022;
    var v4215 = TypeFlow$$1.prototype;
    v4215.varPrivacyErrorReporter = v1023;
    var v4216 = TypeFlow$$1.prototype;
    v4216.typeCheckSuper = v1024;
    var v4217 = TypeFlow$$1.prototype;
    v4217.typeCheckThis = v1025;
    var v4218 = TypeFlow$$1.prototype;
    v4218.setTypeFromSymbol = v1026;
    var v4219 = TypeFlow$$1.prototype;
    v4219.typeCheckName = v1028;
    var v4220 = TypeFlow$$1.prototype;
    v4220.typeCheckScript = v1029;
    var v4221 = TypeFlow$$1.prototype;
    v4221.typeCheckBitNot = v1030;
    var v4222 = TypeFlow$$1.prototype;
    v4222.typeCheckUnaryNumberOperator = v1031;
    var v4223 = TypeFlow$$1.prototype;
    v4223.typeCheckLogNot = v1032;
    var v4224 = TypeFlow$$1.prototype;
    v4224.astIsWriteable = v1033;
    var v4225 = TypeFlow$$1.prototype;
    v4225.typeCheckIncOrDec = v1034;
    var v4226 = TypeFlow$$1.prototype;
    v4226.typeCheckBitwiseOperator = v1035;
    var v4227 = TypeFlow$$1.prototype;
    v4227.typeCheckArithmeticOperator = v1036;
    var v4228 = TypeFlow$$1.prototype;
    v4228.typeCheckDotOperator = v1037;
    var v4229 = TypeFlow$$1.prototype;
    v4229.typeCheckBooleanOperator = v1038;
    var v4230 = TypeFlow$$1.prototype;
    v4230.typeCheckAsgOperator = v1039;
    var v4231 = TypeFlow$$1.prototype;
    v4231.typeCheckIndex = v1040;
    var v4232 = TypeFlow$$1.prototype;
    v4232.typeCheckInOperator = v1041;
    var v4233 = TypeFlow$$1.prototype;
    v4233.typeCheckShift = v1042;
    var v4234 = TypeFlow$$1.prototype;
    v4234.typeCheckQMark = v1043;
    var v4235 = TypeFlow$$1.prototype;
    v4235.addFormals = v1044;
    var v4236 = TypeFlow$$1.prototype;
    v4236.addLocalsFromScope = v1045;
    var v4237 = TypeFlow$$1.prototype;
    v4237.addConstructorLocalArgs = v1046;
    var v4238 = TypeFlow$$1.prototype;
    v4238.checkInitSelf = v1047;
    var v4239 = TypeFlow$$1.prototype;
    v4239.checkPromoteFreeVars = v1048;
    var v4240 = TypeFlow$$1.prototype;
    v4240.allReturnsAreVoid = v1050;
    var v4241 = TypeFlow$$1.prototype;
    v4241.classConstructorHasSuperCall = v1051;
    var v4242 = TypeFlow$$1.prototype;
    v4242.baseListPrivacyErrorReporter = v1052;
    var v4243 = TypeFlow$$1.prototype;
    v4243.typeCheckBaseListPrivacy = v1054;
    var v4244 = TypeFlow$$1.prototype;
    v4244.checkSymbolPrivacy = v1055;
    var v4245 = TypeFlow$$1.prototype;
    v4245.checkTypePrivacy = v1057;
    var v4246 = TypeFlow$$1.prototype;
    v4246.checkSignatureGroupPrivacy = v1058;
    var v4247 = TypeFlow$$1.prototype;
    v4247.functionArgumentPrivacyErrorReporter = v1059;
    var v4248 = TypeFlow$$1.prototype;
    v4248.returnTypePrivacyError = v1060;
    var v4249 = TypeFlow$$1.prototype;
    v4249.functionReturnTypePrivacyErrorReporter = v1061;
    var v4250 = TypeFlow$$1.prototype;
    v4250.typeCheckFunction = v1069;
    var v4251 = TypeFlow$$1.prototype;
    v4251.typeCheckBases = v1070;
    var v4252 = TypeFlow$$1.prototype;
    v4252.checkMembersImplementInterfaces = v1071;
    var v4253 = TypeFlow$$1.prototype;
    v4253.typeCheckBaseCalls = v1072;
    var v4254 = TypeFlow$$1.prototype;
    v4254.assertUniqueNamesInBaseTypes = v1074;
    var v4255 = TypeFlow$$1.prototype;
    v4255.checkBaseTypeMemberInheritance = v1076;
    var v4256 = TypeFlow$$1.prototype;
    v4256.typeCheckClass = v1077;
    var v4257 = TypeFlow$$1.prototype;
    v4257.typeCheckOverloadSignatures = v1078;
    var v4258 = TypeFlow$$1.prototype;
    v4258.typeCheckInterface = v1079;
    var v4259 = TypeFlow$$1.prototype;
    v4259.typeCheckImportDecl = v1080;
    var v4260 = TypeFlow$$1.prototype;
    v4260.typeCheckModule = v1081;
    var v4261 = TypeFlow$$1.prototype;
    v4261.typeCheckFor = v1082;
    var v4262 = TypeFlow$$1.prototype;
    v4262.typeCheckWith = v1083;
    var v4263 = TypeFlow$$1.prototype;
    v4263.typeCheckForIn = v1084;
    var v4264 = TypeFlow$$1.prototype;
    v4264.typeCheckWhile = v1085;
    var v4265 = TypeFlow$$1.prototype;
    v4265.typeCheckDoWhile = v1086;
    var v4266 = TypeFlow$$1.prototype;
    v4266.typeCheckCondExpr = v1087;
    var v4267 = TypeFlow$$1.prototype;
    v4267.typeCheckCompoundStmtBlock = v1088;
    var v4268 = TypeFlow$$1.prototype;
    v4268.typeCheckIf = v1089;
    var v4269 = TypeFlow$$1.prototype;
    v4269.typeFromAccessorFuncDecl = v1090;
    var v4270 = TypeFlow$$1.prototype;
    v4270.typeCheckObjectLit = v1091;
    var v4271 = TypeFlow$$1.prototype;
    v4271.typeCheckArrayLit = v1095;
    var v4272 = TypeFlow$$1.prototype;
    v4272.checkForVoidConstructor = v1096;
    var v4273 = TypeFlow$$1.prototype;
    v4273.typeCheckReturn = v1097;
    var v4274 = TypeFlow$$1.prototype;
    v4274.typeCheckInstOf = v1098;
    var v4275 = TypeFlow$$1.prototype;
    v4275.typeCheckCommaOperator = v1099;
    var v4276 = TypeFlow$$1.prototype;
    v4276.typeCheckLogOr = v1100;
    var v4277 = TypeFlow$$1.prototype;
    v4277.typeCheckLogAnd = v1101;
    var v4278 = TypeFlow$$1.prototype;
    v4278.tryAddCandidates = v1102;
    var v4279 = TypeFlow$$1.prototype;
    v4279.resolveOverload = v1103;
    var v4280 = TypeFlow$$1.prototype;
    v4280.typeCheckNew = v1104;
    var v4281 = TypeFlow$$1.prototype;
    v4281.preTypeCheckCallArgs = v1105;
    var v4282 = TypeFlow$$1.prototype;
    v4282.postTypeCheckCallArgs = v1106;
    var v4283 = TypeFlow$$1.prototype;
    v4283.typeCheckCall = v1107;
    var v4284 = TypeFlow$$1.prototype;
    v4284.assignScopes = v1108;
    var v4285 = TypeFlow$$1.prototype;
    v4285.findMemberScope = v1109;
    var v4286 = TypeFlow$$1.prototype;
    v4286.findMemberScopeAt = v1110;
    var v4287 = TypeFlow$$1.prototype;
    v4287.findMemberScopeAtFullAst = v1111;
    return TypeFlow$$1
  }
  function v1011() {
    function v1010(rd$$1) {
      var v4288 = rd$$1.actuals;
      v4288.length = 0;
      var v4289 = rd$$1.exactCandidates;
      v4289.length = 0;
      var v4290 = rd$$1.conversionCandidates;
      v4290.length = 0;
      this.nextUp = rd$$1.id;
      return
    }
    function v1009() {
      var rd = null;
      var v13960 = this.nextUp;
      var v13961 = this.cacheSize;
      var v4293 = v13960 < v13961;
      if(v4293) {
        var v4291 = this.rdCache;
        var v4292 = this.nextUp;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          rd = v4291[v4292]
        }
      }
      var v4300 = rd == null;
      if(v4300) {
        var v13962 = this.cacheSize;
        this.cacheSize = v13962 + 1;
        var v4294 = new Array;
        var v4295 = new Array;
        var v4296 = new Array;
        var v4297 = this.cacheSize;
        rd = {actuals:v4294, exactCandidates:v4295, conversionCandidates:v4296, id:v4297};
        var v4298 = this.rdCache;
        var v4299 = this.cacheSize;
        JAMScript.set(v4298, v4299, rd)
      }
      var v13963 = this.nextUp;
      this.nextUp = v13963 + 1;
      return rd
    }
    function ResolutionDataCache$$1() {
      this.cacheSize = 16;
      this.rdCache = [];
      this.nextUp = 0;
      var i$$92 = 0;
      var v13964 = this.cacheSize;
      var v4303 = i$$92 < v13964;
      for(;v4303;) {
        var v4301 = this.rdCache;
        var v4302 = i$$92;
        var v13965 = new Array;
        var v13966 = new Array;
        var v13967 = new Array;
        v4301[v4302] = {actuals:v13965, exactCandidates:v13966, conversionCandidates:v13967, id:i$$92};
        i$$92 = i$$92 + 1;
        var v13968 = this.cacheSize;
        v4303 = i$$92 < v13968
      }
      return
    }
    var v4304 = ResolutionDataCache$$1.prototype;
    v4304.getResolutionData = v1009;
    var v4305 = ResolutionDataCache$$1.prototype;
    v4305.returnResolutionData = v1010;
    return ResolutionDataCache$$1
  }
  function v1008() {
    function v1007(ast$$82) {
      var v4307 = this.current;
      if(v4307) {
        var v13969 = this.current;
        var v4306 = v13969.content;
        JAMScript.call(v4306.append, v4306, [ast$$82])
      }
      return
    }
    function v1006(target$$45, isContinue) {
      var targetBB = null;
      var i$$91 = 0;
      var v4308 = this.statementStack;
      var len$$41 = v4308.length;
      var v4311 = i$$91 < len$$41;
      for(;v4311;) {
        var v4309 = this.statementStack;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var targetInfo$$5 = v4309[i$$91]
        }
        var v13970 = targetInfo$$5.stmt;
        var v4310 = v13970 == target$$45;
        if(v4310) {
          if(isContinue) {
            targetBB = targetInfo$$5.continueBB
          }else {
            targetBB = targetInfo$$5.breakBB
          }
          break
        }
        i$$91 = i$$91 + 1;
        v4311 = i$$91 < len$$41
      }
      if(targetBB) {
        var v4312 = this.current;
        JAMScript.call(v4312.addSuccessor, v4312, [targetBB])
      }
      JAMScript.call(this.setUnreachable, this, []);
      return
    }
    function v1005(ast$$81) {
      var v13971 = this.unreachable;
      var v4313 = v13971 === null;
      if(v4313) {
        var v27046 = new Array;
        this.unreachable = v27046
      }
      var v4314 = this.unreachable;
      var v13972 = this.unreachable;
      var v4315 = v13972.length;
      JAMScript.set(v4314, v4315, ast$$81);
      return
    }
    function v1004() {
      this.current = null;
      this.noContinuation = true;
      return
    }
    function v1003() {
      var v4316 = this.current;
      var v4317 = this.exit;
      JAMScript.call(v4316.addSuccessor, v4316, [v4317]);
      JAMScript.call(this.setUnreachable, this, []);
      return
    }
    function v1002() {
      var v4318 = this.statementStack;
      return JAMScript.call(v4318.pop, v4318, [])
    }
    function v1001(stmt$$5, continueBB, breakBB) {
      var v4319 = this.statementStack;
      var v4320 = {stmt:stmt$$5, continueBB:continueBB, breakBB:breakBB};
      JAMScript.call(v4319.push, v4319, [v4320]);
      return
    }
    function v1000(outfile$$14) {
      function node$$3(bb$$6) {
        var v13973 = bb$$6.index;
        var v4321 = v13973 < 0;
        if(v4321) {
          bb$$6.index = index$$56;
          index$$56 = index$$56 + 1
        }
        var v13974 = _this$$5.exit;
        var v4324 = bb$$6 == v13974;
        if(v4324) {
          var v13975 = bb$$6.index;
          var v4322 = "Exit block with index " + v13975;
          JAMScript.call(outfile$$14.WriteLine, outfile$$14, [v4322])
        }else {
          var v13976 = bb$$6.index;
          var v4323 = "Basic block with index " + v13976;
          JAMScript.call(outfile$$14.WriteLine, outfile$$14, [v4323]);
          JAMScript.call(_this$$5.printBlockContent, _this$$5, [bb$$6, outfile$$14])
        }
        return
      }
      function preEdges$$1() {
        JAMScript.call(outfile$$14.Write, outfile$$14, ["  Branches to "]);
        return
      }
      function postEdges$$1() {
        JAMScript.call(outfile$$14.WriteLine, outfile$$14, [""]);
        return
      }
      function edge(node1, node2) {
        var v13977 = node2.index;
        var v4325 = v13977 < 0;
        if(v4325) {
          node2.index = index$$56;
          index$$56 = index$$56 + 1
        }
        var v13978 = node2.index;
        var v4326 = v13978 + " ";
        JAMScript.call(outfile$$14.Write, outfile$$14, [v4326]);
        return
      }
      var _this$$5 = this;
      var index$$56 = 0;
      JAMScript.call(this.bfs, this, [node$$3, edge, preEdges$$1, postEdges$$1]);
      var v13979 = this.unreachable;
      var v4330 = v13979 != null;
      if(v4330) {
        var i$$90 = 0;
        var v4327 = this.unreachable;
        var len$$40 = v4327.length;
        var v4329 = i$$90 < len$$40;
        for(;v4329;) {
          JAMScript.call(outfile$$14.WriteLine, outfile$$14, ["Unreachable basic block ..."]);
          var v13980 = this.unreachable;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v4328 = v13980[i$$90]
          }
          JAMScript.call(this.printAST, this, [v4328, outfile$$14]);
          i$$90 = i$$90 + 1;
          v4329 = i$$90 < len$$40
        }
      }
      return
    }
    function v999(er$$1, funcSym) {
      function v998(index$$55) {
        var v4331 = useDefContext$$3.uses;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var ast$$80 = v4331[index$$55]
        }
        var v19640 = ast$$80.actualText;
        var v13981 = "use of variable '" + v19640;
        var v4332 = v13981 + "' that is not definitely assigned";
        JAMScript.call(er$$1.simpleError, er$$1, [ast$$80, v4332]);
        return
      }
      function useDefInit(bb$$5) {
        var v4333 = bb$$5;
        var v27047 = JAMScript.new(BBUseDefInfo, [bb$$5]);
        v4333.useDef = v27047;
        var v4334 = bb$$5.useDef;
        JAMScript.call(v4334.initialize, v4334, [useDefContext$$3]);
        var v4335 = _this$$4.linearBBs;
        var v13982 = _this$$4.linearBBs;
        var v4336 = v13982.length;
        JAMScript.set(v4335, v4336, bb$$5);
        return
      }
      var _this$$4 = this;
      var useDefContext$$3 = JAMScript.new(UseDefContext, []);
      useDefContext$$3.func = funcSym;
      JAMScript.call(this.bfs, this, [useDefInit, null, null, null]);
      var i$$89;
      var bbLen;
      i$$89 = 0;
      var v13983 = this.linearBBs;
      bbLen = v13983.length;
      var v4339 = i$$89 < bbLen;
      for(;v4339;) {
        var v19641 = this.linearBBs;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v13984 = v19641[i$$89]
        }
        var v4337 = v13984.useDef;
        JAMScript.call(v4337.initializeGen, v4337, [useDefContext$$3]);
        var v19642 = this.linearBBs;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v13985 = v19642[i$$89]
        }
        var v4338 = v13985.useDef;
        JAMScript.call(v4338.initializeKill, v4338, [useDefContext$$3]);
        i$$89 = i$$89 + 1;
        v4339 = i$$89 < bbLen
      }
      var changed$$1 = true;
      for(;changed$$1;) {
        changed$$1 = false;
        i$$89 = 0;
        var v4341 = i$$89 < bbLen;
        for(;v4341;) {
          var v23358 = this.linearBBs;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19643 = v23358[i$$89]
          }
          var v13986 = v19643.useDef;
          var v4340 = JAMScript.call(v13986.updateTop, v13986, []);
          var v13987 = !v4340;
          if(v13987) {
            v4340 = changed$$1
          }
          changed$$1 = v4340;
          i$$89 = i$$89 + 1;
          v4341 = i$$89 < bbLen
        }
      }
      var v13988 = this.entry;
      var v4342 = v13988.useDef;
      var top$$2 = v4342.top;
      JAMScript.call(top$$2.map, top$$2, [v998]);
      return
    }
    function v997(nodeFunc, edgeFunc, preEdges, postEdges) {
      var markValue = this.markBase;
      var v13989 = this.markBase;
      this.markBase = v13989 + 1;
      var q = new Array;
      var v4343 = q.length;
      q[v4343] = this.entry;
      var v13990 = q.length;
      var v4351 = v13990 > 0;
      for(;v4351;) {
        var bb$$4 = JAMScript.call(q.pop, q, []);
        var v13991 = JAMScript.call(bb$$4.marked, bb$$4, [markValue]);
        var v4350 = !v13991;
        if(v4350) {
          JAMScript.call(bb$$4.mark, bb$$4, []);
          if(nodeFunc) {
            JAMScript.call(nodeFunc, null, [bb$$4])
          }
          var v4344 = bb$$4.successors;
          var succLen$$1 = v4344.length;
          var v4349 = succLen$$1 > 0;
          if(v4349) {
            if(preEdges) {
              JAMScript.call(preEdges, null, [])
            }
            var j$$12 = succLen$$1 - 1;
            var v4348 = j$$12 >= 0;
            for(;v4348;) {
              var v4345 = bb$$4.successors;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var successor$$1 = v4345[j$$12]
              }
              var v19644 = this.markBase;
              var v13992 = JAMScript.call(successor$$1.marked, successor$$1, [v19644]);
              var v4347 = !v13992;
              if(v4347) {
                if(edgeFunc) {
                  JAMScript.call(edgeFunc, null, [bb$$4, successor$$1])
                }
                var v4346 = q.length;
                q[v4346] = successor$$1
              }
              j$$12 = j$$12 - 1;
              v4348 = j$$12 >= 0
            }
            if(postEdges) {
              JAMScript.call(postEdges, null, [])
            }
          }
        }
        var v13993 = q.length;
        v4351 = v13993 > 0
      }
      return
    }
    function v996(bb$$3, outfile$$13) {
      var content$$4 = bb$$3.content;
      var i$$88 = 0;
      var v4352 = content$$4.members;
      var len$$39 = v4352.length;
      var v4354 = i$$88 < len$$39;
      for(;v4354;) {
        var v4353 = content$$4.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var ast$$79 = v4353[i$$88]
        }
        JAMScript.call(this.printAST, this, [ast$$79, outfile$$13]);
        i$$88 = i$$88 + 1;
        v4354 = i$$88 < len$$39
      }
      return
    }
    function v995(ast$$78, outfile$$12) {
      var v4355 = TypeScript$$25.PrintContext;
      var printContext = JAMScript.new(v4355, [outfile$$12, null]);
      JAMScript.call(printContext.increaseIndent, printContext, []);
      var v4356 = JAMScript.call(TypeScript$$25.getAstWalkerFactory, TypeScript$$25, []);
      var v4357 = TypeScript$$25.prePrintAST;
      var v4358 = TypeScript$$25.postPrintAST;
      JAMScript.call(v4356.walk, v4356, [ast$$78, v4357, v4358, null, printContext]);
      JAMScript.call(printContext.decreaseIndent, printContext, []);
      return
    }
    function v994(er) {
      var v13994 = this.unreachable;
      if(v13994) {
        var v23359 = this.unreachable;
        var v19645 = v23359.length;
        v13994 = v19645 > 0
      }
      var v4363 = v13994;
      if(v4363) {
        var v4359 = this.unreachable;
        var len$$38 = v4359.length;
        var i$$87 = 0;
        var v4362 = i$$87 < len$$38;
        for(;v4362;) {
          var v4360 = this.unreachable;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var unreachableAST = v4360[i$$87]
          }
          var v13995 = unreachableAST.nodeType;
          var v19646 = TypeScript$$25.NodeType;
          var v13996 = v19646.EndCode;
          var v4361 = v13995 != v13996;
          if(v4361) {
            JAMScript.call(er.simpleError, er, [unreachableAST, "unreachable code"])
          }
          i$$87 = i$$87 + 1;
          v4362 = i$$87 < len$$38
        }
      }
      return
    }
    function v993() {
      var v4364 = this.currentSwitch;
      return JAMScript.call(v4364.pop, v4364, [])
    }
    function v992(bb$$2) {
      var v4365 = this.currentSwitch;
      JAMScript.call(v4365.push, v4365, [bb$$2]);
      return
    }
    function v991(ast$$77, parent$$64) {
      var v4366 = this.walker;
      return JAMScript.call(v4366.walk, v4366, [ast$$77, parent$$64])
    }
    function ControlFlowContext$$1(current$$3, exit$$1) {
      this.current = current$$3;
      this.exit = exit$$1;
      this.entry = null;
      this.unreachable = null;
      this.noContinuation = false;
      var v27048 = new Array;
      this.statementStack = v27048;
      var v27049 = new Array;
      this.currentSwitch = v27049;
      this.markBase = 0;
      var v27050 = new Array;
      this.linearBBs = v27050;
      this.entry = this.current;
      return
    }
    var v4367 = ControlFlowContext$$1.prototype;
    v4367.walk = v991;
    var v4368 = ControlFlowContext$$1.prototype;
    v4368.pushSwitch = v992;
    var v4369 = ControlFlowContext$$1.prototype;
    v4369.popSwitch = v993;
    var v4370 = ControlFlowContext$$1.prototype;
    v4370.reportUnreachable = v994;
    var v4371 = ControlFlowContext$$1.prototype;
    v4371.printAST = v995;
    var v4372 = ControlFlowContext$$1.prototype;
    v4372.printBlockContent = v996;
    var v4373 = ControlFlowContext$$1.prototype;
    v4373.bfs = v997;
    var v4374 = ControlFlowContext$$1.prototype;
    v4374.useDef = v999;
    var v4375 = ControlFlowContext$$1.prototype;
    v4375.print = v1000;
    var v4376 = ControlFlowContext$$1.prototype;
    v4376.pushStatement = v1001;
    var v4377 = ControlFlowContext$$1.prototype;
    v4377.popStatement = v1002;
    var v4378 = ControlFlowContext$$1.prototype;
    v4378.returnStmt = v1003;
    var v4379 = ControlFlowContext$$1.prototype;
    v4379.setUnreachable = v1004;
    var v4380 = ControlFlowContext$$1.prototype;
    v4380.addUnreachable = v1005;
    var v4381 = ControlFlowContext$$1.prototype;
    v4381.unconditionalBranch = v1006;
    var v4382 = ControlFlowContext$$1.prototype;
    v4382.addContent = v1007;
    return ControlFlowContext$$1
  }
  function v990() {
    function v989(successor) {
      var v4383 = this.successors;
      var v13997 = this.successors;
      var v4384 = v13997.length;
      JAMScript.set(v4383, v4384, successor);
      var v4385 = successor.predecessors;
      var v13998 = successor.predecessors;
      var v4386 = v13998.length;
      JAMScript.set(v4385, v4386, this);
      return
    }
    function v988() {
      var v13999 = this.markValue;
      this.markValue = v13999 + 1;
      return
    }
    function v987(markBase) {
      var v4387 = this.markValue;
      return v4387 > markBase
    }
    function BasicBlock$$1() {
      var v27051 = new Array;
      this.predecessors = v27051;
      this.index = -1;
      this.markValue = 0;
      var v27052 = new Array;
      this.successors = v27052;
      this.useDef = null;
      var v4388 = TypeScript$$25.ASTList;
      var v27053 = JAMScript.new(v4388, []);
      this.content = v27053;
      return
    }
    var v4389 = BasicBlock$$1.prototype;
    v4389.marked = v987;
    var v4390 = BasicBlock$$1.prototype;
    v4390.mark = v988;
    var v4391 = BasicBlock$$1.prototype;
    v4391.addSuccessor = v989;
    return BasicBlock$$1
  }
  function v986() {
    function v985(b$$13) {
      var oldFirstBits = this.firstBits;
      var v14000 = this.firstBits;
      var v19647 = b$$13.firstBits;
      var v14001 = ~v19647;
      this.firstBits = v14000 & v14001;
      var v4397 = this.restOfBits;
      if(v4397) {
        var k$$12 = 0;
        var v4392 = this.restOfBits;
        var len$$37 = v4392.length;
        var v4396 = k$$12 < len$$37;
        for(;v4396;) {
          var v4393 = this.restOfBits;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var myBits$$4 = v4393[k$$12]
          }
          var v4394 = b$$13.restOfBits;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var bBits$$3 = v4394[k$$12]
          }
          var v4395 = this.restOfBits;
          var v19648 = k$$12;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23360 = v4395[k$$12]
          }
          var v23361 = ~bBits$$3;
          v4395[v19648] = v23360 & v23361;
          k$$12 = k$$12 + 1;
          v4396 = k$$12 < len$$37
        }
      }
      return
    }
    function v984(b$$12) {
      var v14002 = this.firstBits;
      var v14003 = b$$12.firstBits;
      var v4398 = v14002 != v14003;
      if(v4398) {
        return true
      }
      var v4404 = this.restOfBits;
      if(v4404) {
        var k$$11 = 0;
        var v4399 = this.restOfBits;
        var len$$36 = v4399.length;
        var v4403 = k$$11 < len$$36;
        for(;v4403;) {
          var v4400 = this.restOfBits;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var myBits$$3 = v4400[k$$11]
          }
          var v4401 = b$$12.restOfBits;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var bBits$$2 = v4401[k$$11]
          }
          var v4402 = myBits$$3 != bBits$$2;
          if(v4402) {
            return true
          }
          k$$11 = k$$11 + 1;
          v4403 = k$$11 < len$$36
        }
      }
      return false
    }
    function v983(b$$11) {
      var v14004 = this.firstBits;
      var v14005 = b$$11.firstBits;
      this.firstBits = v14004 & v14005;
      var v4410 = this.restOfBits;
      if(v4410) {
        var k$$10 = 0;
        var v4405 = this.restOfBits;
        var len$$35 = v4405.length;
        var v4409 = k$$10 < len$$35;
        for(;v4409;) {
          var v4406 = this.restOfBits;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var myBits$$2 = v4406[k$$10]
          }
          var v4407 = b$$11.restOfBits;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var bBits$$1 = v4407[k$$10]
          }
          var v4408 = this.restOfBits;
          v4408[k$$10] = myBits$$2 & bBits$$1;
          k$$10 = k$$10 + 1;
          v4409 = k$$10 < len$$35
        }
      }
      return
    }
    function v982(b$$10) {
      var v14006 = this.firstBits;
      var v14007 = b$$10.firstBits;
      this.firstBits = v14006 | v14007;
      var v4416 = this.restOfBits;
      if(v4416) {
        var k$$9 = 0;
        var v4411 = this.restOfBits;
        var len$$34 = v4411.length;
        var v4415 = k$$9 < len$$34;
        for(;v4415;) {
          var v4412 = this.restOfBits;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var myBits$$1 = v4412[k$$9]
          }
          var v4413 = b$$10.restOfBits;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var bBits = v4413[k$$9]
          }
          var v4414 = this.restOfBits;
          v4414[k$$9] = myBits$$1 | bBits;
          k$$9 = k$$9 + 1;
          v4415 = k$$9 < len$$34
        }
      }
      return
    }
    function v981(fn$$7) {
      var k$$8;
      k$$8 = 0;
      var v14008 = BitVector$$1.packBits;
      var v4419 = k$$8 < v14008;
      for(;v4419;) {
        var v14009 = this.bitCount;
        var v4417 = k$$8 == v14009;
        if(v4417) {
          return
        }
        var v19649 = 1 << k$$8;
        var v19650 = this.firstBits;
        var v14010 = v19649 & v19650;
        var v4418 = v14010 != 0;
        if(v4418) {
          JAMScript.call(fn$$7, null, [k$$8])
        }
        k$$8 = k$$8 + 1;
        var v14011 = BitVector$$1.packBits;
        v4419 = k$$8 < v14011
      }
      var v4425 = this.restOfBits;
      if(v4425) {
        var len$$33;
        var cumu = BitVector$$1.packBits;
        k$$8 = 0;
        var v14012 = this.restOfBits;
        len$$33 = v14012.length;
        var v4424 = k$$8 < len$$33;
        for(;v4424;) {
          var v4420 = this.restOfBits;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var myBits = v4420[k$$8]
          }
          var j$$11 = 0;
          var v14013 = BitVector$$1.packBits;
          var v4423 = j$$11 < v14013;
          for(;v4423;) {
            var v19651 = 1 << j$$11;
            var v14014 = v19651 & myBits;
            var v4421 = v14014 != 0;
            if(v4421) {
              JAMScript.call(fn$$7, null, [cumu])
            }
            cumu = cumu + 1;
            var v14015 = this.bitCount;
            var v4422 = cumu == v14015;
            if(v4422) {
              return
            }
            j$$11 = j$$11 + 1;
            var v14016 = BitVector$$1.packBits;
            v4423 = j$$11 < v14016
          }
          k$$8 = k$$8 + 1;
          v4424 = k$$8 < len$$33
        }
      }
      return
    }
    function v980(bitIndex, value$$42) {
      var v14017 = BitVector$$1.packBits;
      var v4430 = bitIndex < v14017;
      if(v4430) {
        if(value$$42) {
          var v14018 = this.firstBits;
          var v14019 = 1 << bitIndex;
          this.firstBits = v14018 | v14019
        }else {
          var v14020 = this.firstBits;
          var v19652 = 1 << bitIndex;
          var v14021 = ~v19652;
          this.firstBits = v14020 & v14021
        }
      }else {
        var v19653 = BitVector$$1.packBits;
        var v14022 = bitIndex / v19653;
        var v4426 = Math.floor(v14022);
        var offset$$13 = v4426 - 1;
        var v4427 = BitVector$$1.packBits;
        var localIndex = bitIndex % v4427;
        if(value$$42) {
          var v4428 = this.restOfBits;
          var v19654 = offset$$13;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23362 = v4428[offset$$13]
          }
          var v23363 = 1 << localIndex;
          v4428[v19654] = v23362 | v23363
        }else {
          var v4429 = this.restOfBits;
          var v19655 = offset$$13;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23364 = v4429[offset$$13]
          }
          var v25169 = 1 << localIndex;
          var v23365 = ~v25169;
          v4429[v19655] = v23364 & v23365
        }
      }
      return
    }
    function BitVector$$1(bitCount$$1) {
      this.bitCount = bitCount$$1;
      this.firstBits = 0;
      this.restOfBits = null;
      var v14023 = this.bitCount;
      var v14024 = BitVector$$1.packBits;
      var v4434 = v14023 > v14024;
      if(v4434) {
        var v27054 = new Array;
        this.restOfBits = v27054;
        var v14025 = this.bitCount;
        var v14026 = BitVector$$1.packBits;
        var v4431 = v14025 / v14026;
        var len$$32 = Math.floor(v4431);
        var i$$86 = 0;
        var v4433 = i$$86 < len$$32;
        for(;v4433;) {
          var v4432 = this.restOfBits;
          v4432[i$$86] = 0;
          i$$86 = i$$86 + 1;
          v4433 = i$$86 < len$$32
        }
      }
      return
    }
    BitVector$$1.packBits = 30;
    var v4435 = BitVector$$1.prototype;
    v4435.set = v980;
    var v4436 = BitVector$$1.prototype;
    v4436.map = v981;
    var v4437 = BitVector$$1.prototype;
    v4437.union = v982;
    var v4438 = BitVector$$1.prototype;
    v4438.intersection = v983;
    var v4439 = BitVector$$1.prototype;
    v4439.notEq = v984;
    var v4440 = BitVector$$1.prototype;
    v4440.difference = v985;
    return BitVector$$1
  }
  function v979() {
    function v978(sym$$33, bbUses) {
      var v4441 = this.symbolMap;
      var v4442 = sym$$33.name;
      var index$$54 = JAMScript.call(v4441.lookup, v4441, [v4442]);
      var v4443 = this.useIndexBySymbol;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var usesOfSym = v4443[index$$54]
      }
      var k$$7 = 0;
      var len$$31 = usesOfSym.length;
      var v4445 = k$$7 < len$$31;
      for(;v4445;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v4444 = usesOfSym[k$$7]
        }
        JAMScript.call(bbUses.set, bbUses, [v4444, true]);
        k$$7 = k$$7 + 1;
        v4445 = k$$7 < len$$31
      }
      return
    }
    function v977(sym$$32) {
      var v4446 = sym$$32;
      if(v4446) {
        var v19656 = sym$$32.container;
        var v19657 = this.func;
        var v14027 = v19656 == v19657;
        if(v14027) {
          var v19658 = JAMScript.call(sym$$32.kind, sym$$32, []);
          var v23366 = TypeScript$$25.SymbolKind;
          var v19659 = v23366.Variable;
          v14027 = v19658 == v19659
        }
        v4446 = v14027
      }
      return v4446
    }
    function v976(ast$$76) {
      var v4447 = this.uses;
      var v14028 = this.uses;
      var v4448 = v14028.length;
      JAMScript.set(v4447, v4448, ast$$76);
      var v14029 = this.uses;
      var v4449 = v14029.length;
      return v4449 - 1
    }
    function v975(symIndex$$1, astIndex$$1) {
      var v4450 = this.useIndexBySymbol;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var useBySym = v4450[symIndex$$1]
      }
      var v4452 = useBySym == undefined;
      if(v4452) {
        useBySym = new Array;
        var v4451 = this.useIndexBySymbol;
        JAMScript.set(v4451, symIndex$$1, useBySym)
      }
      var v4453 = useBySym.length;
      JAMScript.set(useBySym, v4453, astIndex$$1);
      return
    }
    function v974(sym$$31) {
      var name$$86 = sym$$31.name;
      var v4454 = this.symbolMap;
      var index$$53 = JAMScript.call(v4454.lookup, v4454, [name$$86]);
      var v4457 = index$$53 == null;
      if(v4457) {
        index$$53 = this.symbolCount;
        var v14030 = this.symbolCount;
        this.symbolCount = v14030 + 1;
        var v4455 = this.symbols;
        JAMScript.set(v4455, index$$53, sym$$31);
        var v4456 = this.symbolMap;
        JAMScript.call(v4456.add, v4456, [name$$86, index$$53])
      }
      return index$$53
    }
    function UseDefContext$$1() {
      var v27055 = new Array;
      this.useIndexBySymbol = v27055;
      var v27056 = new Array;
      this.uses = v27056;
      var v27057 = new Array;
      this.symbols = v27057;
      var v4458 = TypeScript$$25.StringHashTable;
      var v27058 = JAMScript.new(v4458, []);
      this.symbolMap = v27058;
      this.symbolCount = 0;
      return
    }
    var v4459 = UseDefContext$$1.prototype;
    v4459.getSymbolIndex = v974;
    var v4460 = UseDefContext$$1.prototype;
    v4460.addUse = v975;
    var v4461 = UseDefContext$$1.prototype;
    v4461.getUseIndex = v976;
    var v4462 = UseDefContext$$1.prototype;
    v4462.isLocalSym = v977;
    var v4463 = UseDefContext$$1.prototype;
    v4463.killSymbol = v978;
    return UseDefContext$$1
  }
  function v973() {
    function v972(useDefContext$$2) {
      var v14031 = this.gen;
      var v4464 = v14031.bitCount;
      var v27059 = JAMScript.new(BitVector, [v4464]);
      this.kill = v27059;
      var s$$25 = 0;
      var v4465 = this.defsBySymbol;
      var symbolLen$$1 = v4465.length;
      var v4471 = s$$25 < symbolLen$$1;
      for(;v4471;) {
        var v14032 = this.defsBySymbol;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v4470 = v14032[s$$25]
        }
        if(v4470) {
          var v4466 = useDefContext$$2.useIndexBySymbol;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var globalSymUses = v4466[s$$25]
          }
          if(globalSymUses) {
            var u$$1 = 0;
            var useLen = globalSymUses.length;
            var v4469 = u$$1 < useLen;
            for(;v4469;) {
              var v4467 = this.kill;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v4468 = globalSymUses[u$$1]
              }
              JAMScript.call(v4467.set, v4467, [v4468, true]);
              u$$1 = u$$1 + 1;
              v4469 = u$$1 < useLen
            }
          }
        }
        s$$25 = s$$25 + 1;
        v4471 = s$$25 < symbolLen$$1
      }
      return
    }
    function v971(useDefContext$$1) {
      var v4472 = this.useIndexBySymbol;
      var symbolLen = v4472.length;
      var v4473 = useDefContext$$1.uses;
      var bitCount = v4473.length;
      var v27060 = JAMScript.new(BitVector, [bitCount]);
      this.gen = v27060;
      var s$$24 = 0;
      var v4479 = s$$24 < symbolLen;
      for(;v4479;) {
        var v4474 = this.useIndexBySymbol;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var symUses$$1 = v4474[s$$24]
        }
        var v14033 = symUses$$1 != undefined;
        if(v14033) {
          var v19660 = symUses$$1.length;
          v14033 = v19660 > 0
        }
        var v4478 = v14033;
        if(v4478) {
          var u = 0;
          var uLen = symUses$$1.length;
          var v4477 = u < uLen;
          for(;v4477;) {
            var v4475 = this.gen;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v4476 = symUses$$1[u]
            }
            JAMScript.call(v4475.set, v4475, [v4476, true]);
            u = u + 1;
            v4477 = u < uLen
          }
        }
        s$$24 = s$$24 + 1;
        v4479 = s$$24 < symbolLen
      }
      this.top = this.gen;
      return
    }
    function v970(useDefContext) {
      function defSym(sym$$29, context$$62) {
        var v4482 = JAMScript.call(context$$62.isLocalSym, context$$62, [sym$$29]);
        if(v4482) {
          var index$$52 = JAMScript.call(context$$62.getSymbolIndex, context$$62, [sym$$29]);
          var v4480 = _this$$3.useIndexBySymbol;
          var v27061 = new Array;
          JAMScript.set(v4480, index$$52, v27061);
          var v4481 = _this$$3.defsBySymbol;
          JAMScript.set(v4481, index$$52, true)
        }
        return
      }
      function initUseDefPre(cur$$9, parent$$63, walker$$48) {
        var context$$61 = walker$$48.state;
        var v4483 = cur$$9 == null;
        if(v4483) {
          cur$$9 = null
        }
        var v14034 = cur$$9.nodeType;
        var v19661 = TypeScript$$25.NodeType;
        var v14035 = v19661.VarDecl;
        var v4500 = v14034 == v14035;
        if(v4500) {
          var varDecl$$13 = cur$$9;
          var v14036 = varDecl$$13.init;
          var v19664 = !v14036;
          if(v19664) {
            var v19662 = varDecl$$13.varFlags;
            var v23367 = TypeScript$$25.VarFlags;
            var v19663 = v23367.AutoInit;
            v14036 = JAMScript.call(TypeScript$$25.hasFlag, TypeScript$$25, [v19662, v19663])
          }
          var v4485 = v14036;
          if(v4485) {
            var v4484 = varDecl$$13.sym;
            defSym(v4484, context$$61)
          }
        }else {
          var v14037 = cur$$9.nodeType;
          var v19665 = TypeScript$$25.NodeType;
          var v14038 = v19665.Name;
          var v4499 = v14037 == v14038;
          if(v4499) {
            if(parent$$63) {
              var v14039 = parent$$63.nodeType;
              var v19666 = TypeScript$$25.NodeType;
              var v14040 = v19666.Asg;
              var v4489 = v14039 == v14040;
              if(v4489) {
                var asg = parent$$63;
                var v14041 = asg.operand1;
                var v4486 = v14041 == cur$$9;
                if(v4486) {
                  return cur$$9
                }
              }else {
                var v14042 = parent$$63.nodeType;
                var v19667 = TypeScript$$25.NodeType;
                var v14043 = v19667.VarDecl;
                var v4488 = v14042 == v14043;
                if(v4488) {
                  var parentDecl = parent$$63;
                  var v14044 = parentDecl.id;
                  var v4487 = v14044 == cur$$9;
                  if(v4487) {
                    return cur$$9
                  }
                }
              }
            }
            var id$$21 = cur$$9;
            var sym$$inline_16 = id$$21.sym;
            var context$$inline_17 = context$$61;
            var ast$$inline_18 = cur$$9;
            var v4493 = JAMScript.call(context$$inline_17.isLocalSym, context$$inline_17, [sym$$inline_16]);
            if(v4493) {
              var symIndex$$inline_19 = JAMScript.call(context$$inline_17.getSymbolIndex, context$$inline_17, [sym$$inline_16]);
              var v19668 = _this$$3.useIndexBySymbol;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v14045 = v19668[symIndex$$inline_19]
              }
              var v4491 = v14045 == undefined;
              if(v4491) {
                var v4490 = _this$$3.useIndexBySymbol;
                var v27062 = new Array;
                JAMScript.set(v4490, symIndex$$inline_19, v27062)
              }
              var v4492 = _this$$3.useIndexBySymbol;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var symUses$$inline_20 = v4492[symIndex$$inline_19]
              }
              var astIndex$$inline_21 = JAMScript.call(context$$inline_17.getUseIndex, context$$inline_17, [ast$$inline_18]);
              JAMScript.call(context$$inline_17.addUse, context$$inline_17, [symIndex$$inline_19, astIndex$$inline_21]);
              JAMScript.call(symUses$$inline_20.push, symUses$$inline_20, [astIndex$$inline_21])
            }
          }else {
            var v19669 = cur$$9.nodeType;
            var v23368 = TypeScript$$25.NodeType;
            var v19670 = v23368.Asg;
            var v14046 = v19669 >= v19670;
            if(v14046) {
              var v19671 = cur$$9.nodeType;
              var v23369 = TypeScript$$25.NodeType;
              var v19672 = v23369.LastAsg;
              v14046 = v19671 <= v19672
            }
            var v4498 = v14046;
            if(v4498) {
              asg = cur$$9;
              var v14047 = asg.operand1;
              if(v14047) {
                var v23370 = asg.operand1;
                var v19673 = v23370.nodeType;
                var v23371 = TypeScript$$25.NodeType;
                var v19674 = v23371.Name;
                v14047 = v19673 == v19674
              }
              var v4495 = v14047;
              if(v4495) {
                id$$21 = asg.operand1;
                var v4494 = id$$21.sym;
                defSym(v4494, context$$61)
              }
            }else {
              var v14048 = cur$$9.nodeType;
              var v19675 = TypeScript$$25.NodeType;
              var v14049 = v19675.FuncDecl;
              var v4497 = v14048 == v14049;
              if(v4497) {
                var v4496 = walker$$48.options;
                v4496.goChildren = false
              }
            }
          }
        }
        return cur$$9
      }
      var _this$$3 = this;
      var v4501 = TypeScript$$25.AstWalkOptions;
      var options$$6 = JAMScript.new(v4501, []);
      options$$6.reverseSiblings = true;
      var v4502 = JAMScript.call(TypeScript$$25.getAstWalkerFactory, TypeScript$$25, []);
      var v14050 = this.bb;
      var v4503 = v14050.content;
      JAMScript.call(v4502.walk, v4502, [v4503, initUseDefPre, null, options$$6, useDefContext]);
      return
    }
    function v969() {
      var v14051 = this.top;
      var v4504 = v14051.bitCount;
      var temp$$16 = JAMScript.new(BitVector, [v4504]);
      var i$$85 = 0;
      var v14052 = this.bb;
      var v4505 = v14052.successors;
      var succLen = v4505.length;
      var v4509 = i$$85 < succLen;
      for(;v4509;) {
        var v14053 = this.bb;
        var v4506 = v14053.successors;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var succ = v4506[i$$85]
        }
        var v4508 = succ.useDef;
        if(v4508) {
          var v14054 = succ.useDef;
          var v4507 = v14054.top;
          JAMScript.call(temp$$16.union, temp$$16, [v4507])
        }
        i$$85 = i$$85 + 1;
        v4509 = i$$85 < succLen
      }
      var v4510 = this.kill;
      JAMScript.call(temp$$16.difference, temp$$16, [v4510]);
      var v4511 = this.gen;
      JAMScript.call(temp$$16.union, temp$$16, [v4511]);
      var v4512 = this.top;
      var changed = JAMScript.call(temp$$16.notEq, temp$$16, [v4512]);
      this.top = temp$$16;
      return changed
    }
    function BBUseDefInfo$$1(bb$$1) {
      this.bb = bb$$1;
      var v27063 = new Array;
      this.defsBySymbol = v27063;
      var v27064 = new Array;
      this.useIndexBySymbol = v27064;
      return
    }
    var v4513 = BBUseDefInfo$$1.prototype;
    v4513.updateTop = v969;
    var v4514 = BBUseDefInfo$$1.prototype;
    v4514.initialize = v970;
    var v4515 = BBUseDefInfo$$1.prototype;
    v4515.initializeGen = v971;
    var v4516 = BBUseDefInfo$$1.prototype;
    v4516.initializeKill = v972;
    return BBUseDefInfo$$1
  }
  function v968() {
    function ScopeChain$$1(container$$14, previous$$1, scope$$29) {
      this.container = container$$14;
      this.previous = previous$$1;
      this.scope = scope$$29;
      return
    }
    return ScopeChain$$1
  }
  var ScopeChain = v968();
  TypeScript$$25.ScopeChain = ScopeChain;
  var BBUseDefInfo = v973();
  TypeScript$$25.BBUseDefInfo = BBUseDefInfo;
  var UseDefContext = v979();
  TypeScript$$25.UseDefContext = UseDefContext;
  var BitVector = v986();
  TypeScript$$25.BitVector = BitVector;
  var BasicBlock = v990();
  TypeScript$$25.BasicBlock = BasicBlock;
  var ControlFlowContext = v1008();
  TypeScript$$25.ControlFlowContext = ControlFlowContext;
  var ResolutionDataCache = v1011();
  TypeScript$$25.ResolutionDataCache = ResolutionDataCache;
  var TypeFlow = v1112();
  TypeScript$$25.TypeFlow = TypeFlow;
  return
}
function v967(TypeScript$$24) {
  function v966() {
    function Continuation$$1(normalBlock) {
      this.normalBlock = normalBlock;
      this.exceptionBlock = -1;
      return
    }
    return Continuation$$1
  }
  function getBaseTypeLinks(bases$$3, baseTypeLinks) {
    if(bases$$3) {
      var v4517 = bases$$3.members;
      var len$$30 = v4517.length;
      var v4518 = baseTypeLinks == null;
      if(v4518) {
        baseTypeLinks = new Array
      }
      var i$$83 = 0;
      var v4522 = i$$83 < len$$30;
      for(;v4522;) {
        var v4519 = bases$$3.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var baseExpr$$1 = v4519[i$$83]
        }
        var name$$83 = baseExpr$$1;
        var v4520 = TypeScript$$24.TypeLink;
        var typeLink$$3 = JAMScript.new(v4520, []);
        typeLink$$3.ast = name$$83;
        var v4521 = baseTypeLinks.length;
        JAMScript.set(baseTypeLinks, v4521, typeLink$$3);
        i$$83 = i$$83 + 1;
        v4522 = i$$83 < len$$30
      }
    }
    return baseTypeLinks
  }
  function getBases(type$$44, typeDecl) {
    var v4523 = type$$44;
    var v14055 = typeDecl.extendsList;
    var v14056 = type$$44.extendsTypeLinks;
    var v27065 = getBaseTypeLinks(v14055, v14056);
    v4523.extendsTypeLinks = v27065;
    var v4524 = type$$44;
    var v14057 = typeDecl.implementsList;
    var v14058 = type$$44.implementsTypeLinks;
    var v27066 = getBaseTypeLinks(v14057, v14058);
    v4524.implementsTypeLinks = v27066;
    return
  }
  function createNewConstructGroupForType(type$$45) {
    var v4525 = TypeScript$$24.Signature;
    var signature$$6 = JAMScript.new(v4525, []);
    var v4526 = TypeScript$$24.TypeLink;
    var v27067 = JAMScript.new(v4526, []);
    signature$$6.returnType = v27067;
    var v4527 = signature$$6.returnType;
    v4527.type = type$$45.instanceType;
    signature$$6.parameters = [];
    var v4528 = TypeScript$$24.SignatureGroup;
    var v27068 = JAMScript.new(v4528, []);
    type$$45.construct = v27068;
    var v4529 = type$$45.construct;
    JAMScript.call(v4529.addSignature, v4529, [signature$$6]);
    return
  }
  function cloneParentConstructGroupForChildType(child$$1, parent$$53) {
    var v4530 = TypeScript$$24.SignatureGroup;
    var v27069 = JAMScript.new(v4530, []);
    child$$1.construct = v27069;
    var sig$$1 = null;
    var v14059 = parent$$53.construct;
    var v4531 = !v14059;
    if(v4531) {
      createNewConstructGroupForType(parent$$53)
    }
    var i$$84 = 0;
    var v23372 = parent$$53.construct;
    var v19676 = v23372.signatures;
    var v14060 = v19676.length;
    var v4540 = i$$84 < v14060;
    for(;v4540;) {
      var v4532 = TypeScript$$24.Signature;
      sig$$1 = JAMScript.new(v4532, []);
      var v19677 = parent$$53.construct;
      var v14061 = v19677.signatures;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v4533 = v14061[i$$84]
      }
      sig$$1.parameters = v4533.parameters;
      var v19678 = parent$$53.construct;
      var v14062 = v19678.signatures;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v4534 = v14062[i$$84]
      }
      sig$$1.nonOptionalParameterCount = v4534.nonOptionalParameterCount;
      var v19679 = parent$$53.construct;
      var v14063 = v19679.signatures;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v4535 = v14063[i$$84]
      }
      sig$$1.typeCheckStatus = v4535.typeCheckStatus;
      var v19680 = parent$$53.construct;
      var v14064 = v19680.signatures;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v4536 = v14064[i$$84]
      }
      sig$$1.declAST = v4536.declAST;
      var v4537 = TypeScript$$24.TypeLink;
      var v27070 = JAMScript.new(v4537, []);
      sig$$1.returnType = v27070;
      var v4538 = sig$$1.returnType;
      v4538.type = child$$1.instanceType;
      var v4539 = child$$1.construct;
      JAMScript.call(v4539.addSignature, v4539, [sig$$1]);
      i$$84 = i$$84 + 1;
      var v23373 = parent$$53.construct;
      var v19681 = v23373.signatures;
      var v14065 = v19681.length;
      v4540 = i$$84 < v14065
    }
    return
  }
  function findTypeSymbolInScopeChain(name$$84, scopeChain$$2) {
    var v4541 = scopeChain$$2.scope;
    var symbol$$14 = JAMScript.call(v4541.find, v4541, [name$$84, false, true]);
    var v14066 = symbol$$14 == null;
    if(v14066) {
      v14066 = scopeChain$$2.previous
    }
    var v4543 = v14066;
    if(v4543) {
      var v4542 = scopeChain$$2.previous;
      symbol$$14 = findTypeSymbolInScopeChain(name$$84, v4542)
    }
    return symbol$$14
  }
  function findSymbolFromAlias(alias$$2, context$$51) {
    function v965(id$$20) {
      var v4546 = context$$51.members;
      if(v4546) {
        var v4544 = context$$51.members;
        return JAMScript.call(v4544.lookup, v4544, [name$$85])
      }else {
        var v4545 = context$$51.topLevelScope;
        return findTypeSymbolInScopeChain(name$$85, v4545)
      }
      return
    }
    var symbol$$15 = null;
    var v4552 = alias$$2.nodeType;
    switch(v4552) {
      case TypeScript$$24.NodeType.Name:
        var name$$85 = alias$$2.text;
        var isDynamic = JAMScript.call(TypeScript$$24.isQuoted, TypeScript$$24, [name$$85]);
        var findSym = v965;
        if(isDynamic) {
          var v14067 = context$$51.tcContext;
          var v4547 = v14067.checker;
          var v23374 = context$$51.tcContext;
          var v19682 = v23374.script;
          var v14068 = v19682.locationInfo;
          var v4548 = v14068.filename;
          symbol$$15 = JAMScript.call(v4547.findSymbolForDynamicModule, v4547, [name$$85, v4548, findSym])
        }else {
          symbol$$15 = JAMScript.call(findSym, null, [name$$85])
        }
        break;
      case TypeScript$$24.NodeType.Dot:
        var dottedExpr = alias$$2;
        var v4549 = dottedExpr.operand1;
        var op1Sym = findSymbolFromAlias(v4549, context$$51);
        var v14069 = op1Sym;
        if(v14069) {
          v14069 = JAMScript.call(op1Sym.getType, op1Sym, [])
        }
        var v4551 = v14069;
        if(v4551) {
          var v4550 = dottedExpr.operand2;
          symbol$$15 = findSymbolFromAlias(v4550, context$$51)
        }
      ;
      default:
    }
    if(symbol$$15) {
      var symType$$1 = JAMScript.call(symbol$$15.getType, symbol$$15, []);
      if(symType$$1) {
        var members$$25 = symType$$1.members;
        if(members$$25) {
          context$$51.members = members$$25.publicMembers
        }
      }
    }
    return symbol$$15
  }
  function preCollectImportTypes(ast$$66, parent$$54, context$$52) {
    var scopeChain$$3 = context$$52.scopeChain;
    var typeSymbol$$2 = null;
    var modType = null;
    var importDecl$$1 = ast$$66;
    var v4553 = importDecl$$1.alias;
    var v4554 = {topLevelScope:scopeChain$$3, members:null, tcContext:context$$52};
    var aliasedModSymbol = findSymbolFromAlias(v4553, v4554);
    var v14070 = context$$52.scopeChain;
    var v4555 = v14070.container;
    var v14071 = context$$52.checker;
    var v4556 = v14071.gloMod;
    var isGlobal$$1 = v4555 == v4556;
    if(aliasedModSymbol) {
      var aliasedModType = JAMScript.call(aliasedModSymbol.getType, aliasedModSymbol, []);
      if(aliasedModType) {
        modType = aliasedModType
      }
    }
    var v4557 = TypeScript$$24.TypeSymbol;
    var v14072 = importDecl$$1.id;
    var v4558 = v14072.text;
    var v14073 = importDecl$$1.id;
    var v4559 = v14073.minChar;
    var v14074 = importDecl$$1.limChar;
    var v14075 = importDecl$$1.minChar;
    var v4560 = v14074 - v14075;
    var v19683 = context$$52.checker;
    var v14076 = v19683.locationInfo;
    var v4561 = v14076.unitIndex;
    typeSymbol$$2 = JAMScript.new(v4557, [v4558, v4559, v4560, v4561, modType]);
    typeSymbol$$2.aliasLink = importDecl$$1;
    var v14077 = context$$52.scopeChain;
    var v4563 = v14077.moduleDecl;
    if(v4563) {
      var v14078 = typeSymbol$$2;
      var v19684 = typeSymbol$$2.flags;
      var v23375 = TypeScript$$24.SymbolFlags;
      var v19685 = v23375.ModuleMember;
      v14078.flags = v19684 | v19685;
      var v4562 = context$$52.scopeChain;
      typeSymbol$$2.declModule = v4562.moduleDecl
    }
    typeSymbol$$2.declAST = importDecl$$1;
    var v4564 = importDecl$$1.id;
    v4564.sym = typeSymbol$$2;
    var v4565 = scopeChain$$3.scope;
    var v4566 = scopeChain$$3.container;
    var v14079 = context$$52.checker;
    var v4567 = v14079.errorReporter;
    JAMScript.call(v4565.enter, v4565, [v4566, ast$$66, typeSymbol$$2, v4567, isGlobal$$1, true, false]);
    var v4568 = scopeChain$$3.scope;
    var v4569 = scopeChain$$3.container;
    var v14080 = context$$52.checker;
    var v4570 = v14080.errorReporter;
    JAMScript.call(v4568.enter, v4568, [v4569, ast$$66, typeSymbol$$2, v4570, isGlobal$$1, false, false]);
    return true
  }
  function preCollectModuleTypes(ast$$67, parent$$55, context$$53) {
    var scopeChain$$4 = context$$53.scopeChain;
    var moduleDecl$$6 = ast$$67;
    var v4571 = moduleDecl$$6.modFlags;
    var v14081 = TypeScript$$24.ModuleFlags;
    var v4572 = v14081.Ambient;
    var isAmbient$$5 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4571, v4572]);
    var v4573 = moduleDecl$$6.modFlags;
    var v14082 = TypeScript$$24.ModuleFlags;
    var v4574 = v14082.IsEnum;
    var isEnum = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4573, v4574]);
    var v14083 = context$$53.scopeChain;
    var v4575 = v14083.container;
    var v14084 = context$$53.checker;
    var v4576 = v14084.gloMod;
    var isGlobal$$2 = v4575 == v4576;
    var v4577 = moduleDecl$$6.modFlags;
    var v14085 = TypeScript$$24.ModuleFlags;
    var v4578 = v14085.Exported;
    var isExported$$2 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4577, v4578]);
    var v4579 = moduleDecl$$6.name;
    var modName$$3 = v4579.text;
    var isDynamic$$1 = JAMScript.call(TypeScript$$24.isQuoted, TypeScript$$24, [modName$$3]);
    var v4580 = scopeChain$$4.scope;
    var symbol$$16 = JAMScript.call(v4580.findLocal, v4580, [modName$$3, false, false]);
    var typeSymbol$$3 = null;
    var modType$$1 = null;
    var v14086 = symbol$$16 == null;
    var v19688 = !v14086;
    if(v19688) {
      var v19686 = JAMScript.call(symbol$$16.kind, symbol$$16, []);
      var v23376 = TypeScript$$24.SymbolKind;
      var v19687 = v23376.Type;
      v14086 = v19686 != v19687
    }
    var v4629 = v14086;
    if(v4629) {
      var v4590 = modType$$1 == null;
      if(v4590) {
        var v4581 = TypeScript$$24.ScopedMembers;
        var v14087 = TypeScript$$24.DualStringHashTable;
        var v19689 = TypeScript$$24.StringHashTable;
        var v14088 = JAMScript.new(v19689, []);
        var v19690 = TypeScript$$24.StringHashTable;
        var v14089 = JAMScript.new(v19690, []);
        var v4582 = JAMScript.new(v14087, [v14088, v14089]);
        var enclosedTypes$$3 = JAMScript.new(v4581, [v4582]);
        var v4583 = TypeScript$$24.ScopedMembers;
        var v14090 = TypeScript$$24.DualStringHashTable;
        var v19691 = TypeScript$$24.StringHashTable;
        var v14091 = JAMScript.new(v19691, []);
        var v19692 = TypeScript$$24.StringHashTable;
        var v14092 = JAMScript.new(v19692, []);
        var v4584 = JAMScript.new(v14090, [v14091, v14092]);
        var ambientEnclosedTypes$$3 = JAMScript.new(v4583, [v4584]);
        var v4585 = TypeScript$$24.ModuleType;
        modType$$1 = JAMScript.new(v4585, [enclosedTypes$$3, ambientEnclosedTypes$$3]);
        if(isEnum) {
          var v14093 = modType$$1;
          var v19693 = modType$$1.typeFlags;
          var v23377 = TypeScript$$24.TypeFlags;
          var v19694 = v23377.IsEnum;
          v14093.typeFlags = v19693 | v19694
        }
        var v4586 = TypeScript$$24.ScopedMembers;
        var v14094 = TypeScript$$24.DualStringHashTable;
        var v19695 = TypeScript$$24.StringHashTable;
        var v14095 = JAMScript.new(v19695, []);
        var v19696 = TypeScript$$24.StringHashTable;
        var v14096 = JAMScript.new(v19696, []);
        var v4587 = JAMScript.new(v14094, [v14095, v14096]);
        var v27071 = JAMScript.new(v4586, [v4587]);
        modType$$1.members = v27071;
        var v4588 = TypeScript$$24.ScopedMembers;
        var v14097 = TypeScript$$24.DualStringHashTable;
        var v19697 = TypeScript$$24.StringHashTable;
        var v14098 = JAMScript.new(v19697, []);
        var v19698 = TypeScript$$24.StringHashTable;
        var v14099 = JAMScript.new(v19698, []);
        var v4589 = JAMScript.new(v14097, [v14098, v14099]);
        var v27072 = JAMScript.new(v4588, [v4589]);
        modType$$1.ambientMembers = v27072;
        JAMScript.call(modType$$1.setHasImplementation, modType$$1, [])
      }
      var v4591 = TypeScript$$24.TypeSymbol;
      var v14100 = moduleDecl$$6.name;
      var v4592 = v14100.minChar;
      var v4593 = modName$$3.length;
      var v19699 = context$$53.checker;
      var v14101 = v19699.locationInfo;
      var v4594 = v14101.unitIndex;
      typeSymbol$$3 = JAMScript.new(v4591, [modName$$3, v4592, v4593, v4594, modType$$1]);
      var v4595 = typeSymbol$$3;
      var v14102 = moduleDecl$$6.prettyName;
      var v27073 = JAMScript.call(TypeScript$$24.isQuoted, TypeScript$$24, [v14102]);
      v4595.isDynamic = v27073;
      var v14103 = context$$53.scopeChain;
      var v4597 = v14103.moduleDecl;
      if(v4597) {
        var v4596 = context$$53.scopeChain;
        typeSymbol$$3.declModule = v4596.moduleDecl
      }
      typeSymbol$$3.declAST = moduleDecl$$6;
      typeSymbol$$3.prettyName = moduleDecl$$6.prettyName;
      var v4598 = scopeChain$$4.scope;
      var v4599 = scopeChain$$4.container;
      var v14104 = context$$53.checker;
      var v4600 = v14104.errorReporter;
      var v4601 = isExported$$2 || isGlobal$$2;
      JAMScript.call(v4598.enter, v4598, [v4599, ast$$67, typeSymbol$$3, v4600, v4601, true, isAmbient$$5]);
      var v4602 = scopeChain$$4.scope;
      var v4603 = scopeChain$$4.container;
      var v14105 = context$$53.checker;
      var v4604 = v14105.errorReporter;
      var v4605 = isExported$$2 || isGlobal$$2;
      JAMScript.call(v4602.enter, v4602, [v4603, ast$$67, typeSymbol$$3, v4604, v4605, false, isAmbient$$5]);
      modType$$1.symbol = typeSymbol$$3
    }else {
      var v14106 = symbol$$16;
      if(v14106) {
        var v19700 = symbol$$16.declAST;
        if(v19700) {
          var v25170 = symbol$$16.declAST;
          var v23378 = v25170.nodeType;
          var v25171 = TypeScript$$24.NodeType;
          var v23379 = v25171.ModuleDeclaration;
          v19700 = v23378 != v23379
        }
        v14106 = v19700
      }
      var v4608 = v14106;
      if(v4608) {
        var v14107 = context$$53.checker;
        var v4606 = v14107.errorReporter;
        var v14108 = "Conflicting symbol name for module '" + modName$$3;
        var v4607 = v14108 + "'";
        JAMScript.call(v4606.simpleError, v4606, [moduleDecl$$6, v4607])
      }
      typeSymbol$$3 = symbol$$16;
      var v14109 = typeSymbol$$3.type;
      var v4609 = JAMScript.call(v14109.getAllEnclosedTypes, v14109, []);
      var publicEnclosedTypes = v4609.publicMembers;
      var v4610;
      var v14111 = publicEnclosedTypes == null;
      if(v14111) {
        var v14110 = TypeScript$$24.StringHashTable;
        v4610 = JAMScript.new(v14110, [])
      }else {
        v4610 = publicEnclosedTypes
      }
      var publicEnclosedTypesTable = v4610;
      var v4611 = TypeScript$$24.ScopedMembers;
      var v14112 = TypeScript$$24.DualStringHashTable;
      var v19701 = TypeScript$$24.StringHashTable;
      var v14113 = JAMScript.new(v19701, []);
      var v4612 = JAMScript.new(v14112, [publicEnclosedTypesTable, v14113]);
      enclosedTypes$$3 = JAMScript.new(v4611, [v4612]);
      var v14114 = typeSymbol$$3.type;
      var v4613 = JAMScript.call(v14114.getAllAmbientEnclosedTypes, v14114, []);
      var publicEnclosedAmbientTypes = v4613.publicMembers;
      var v4614;
      var v14116 = publicEnclosedAmbientTypes == null;
      if(v14116) {
        var v14115 = TypeScript$$24.StringHashTable;
        v4614 = JAMScript.new(v14115, [])
      }else {
        v4614 = publicEnclosedAmbientTypes
      }
      var publicAmbientEnclosedTypesTable = v4614;
      var v4615 = TypeScript$$24.ScopedMembers;
      var v14117 = TypeScript$$24.DualStringHashTable;
      var v19702 = TypeScript$$24.StringHashTable;
      var v14118 = JAMScript.new(v19702, []);
      var v4616 = JAMScript.new(v14117, [publicAmbientEnclosedTypesTable, v14118]);
      ambientEnclosedTypes$$3 = JAMScript.new(v4615, [v4616]);
      var v14119 = typeSymbol$$3.type;
      var v4617 = v14119.members;
      var publicMembers = v4617.publicMembers;
      var v4618;
      var v14121 = publicMembers == null;
      if(v14121) {
        var v14120 = TypeScript$$24.StringHashTable;
        v4618 = JAMScript.new(v14120, [])
      }else {
        v4618 = publicMembers
      }
      var publicMembersTable = v4618;
      var v4619 = TypeScript$$24.ScopedMembers;
      var v14122 = TypeScript$$24.DualStringHashTable;
      var v19703 = TypeScript$$24.StringHashTable;
      var v14123 = JAMScript.new(v19703, []);
      var v4620 = JAMScript.new(v14122, [publicMembersTable, v14123]);
      var members$$26 = JAMScript.new(v4619, [v4620]);
      var v14124 = typeSymbol$$3.type;
      var v4621 = v14124.ambientMembers;
      var publicAmbientMembers = v4621.publicMembers;
      var v4622;
      var v14126 = publicAmbientMembers == null;
      if(v14126) {
        var v14125 = TypeScript$$24.StringHashTable;
        v4622 = JAMScript.new(v14125, [])
      }else {
        v4622 = publicAmbientMembers
      }
      var publicAmbientMembersTable = v4622;
      var v4623 = TypeScript$$24.ScopedMembers;
      var v14127 = TypeScript$$24.DualStringHashTable;
      var v19704 = TypeScript$$24.StringHashTable;
      var v14128 = JAMScript.new(v19704, []);
      var v4624 = JAMScript.new(v14127, [publicAmbientMembersTable, v14128]);
      var ambientMembers$$2 = JAMScript.new(v4623, [v4624]);
      var v4625 = TypeScript$$24.ModuleType;
      modType$$1 = JAMScript.new(v4625, [enclosedTypes$$3, ambientEnclosedTypes$$3]);
      if(isEnum) {
        var v14129 = modType$$1;
        var v19705 = modType$$1.typeFlags;
        var v23380 = TypeScript$$24.TypeFlags;
        var v19706 = v23380.IsEnum;
        v14129.typeFlags = v19705 | v19706
      }
      modType$$1.members = members$$26;
      modType$$1.ambientMembers = ambientMembers$$2;
      JAMScript.call(modType$$1.setHasImplementation, modType$$1, []);
      modType$$1.symbol = typeSymbol$$3;
      var v4626 = moduleDecl$$6.minChar;
      JAMScript.call(typeSymbol$$3.addLocation, typeSymbol$$3, [v4626]);
      var v4627 = typeSymbol$$3.expansions;
      JAMScript.call(v4627.push, v4627, [modType$$1]);
      var v4628 = typeSymbol$$3.expansionsDeclAST;
      JAMScript.call(v4628.push, v4628, [moduleDecl$$6])
    }
    var v14130 = context$$53.scopeChain;
    var v4631 = v14130.moduleDecl;
    if(v4631) {
      var v14131 = context$$53.scopeChain;
      var v4630 = v14131.moduleDecl;
      JAMScript.call(v4630.recordNonInterface, v4630, [])
    }
    if(isExported$$2) {
      var v14132 = typeSymbol$$3;
      var v19707 = typeSymbol$$3.flags;
      var v23381 = TypeScript$$24.SymbolFlags;
      var v19708 = v23381.Exported;
      v14132.flags = v19707 | v19708
    }
    var v19709 = context$$53.scopeChain;
    var v14133 = v19709.moduleDecl;
    var v19712 = !v14133;
    if(v19712) {
      var v23382 = context$$53.scopeChain;
      var v19710 = v23382.container;
      var v23383 = context$$53.checker;
      var v19711 = v23383.gloMod;
      v14133 = v19710 == v19711
    }
    var v4632 = v14133;
    if(v4632) {
      var v14134 = typeSymbol$$3;
      var v19713 = typeSymbol$$3.flags;
      var v23384 = TypeScript$$24.SymbolFlags;
      var v19714 = v23384.ModuleMember;
      v14134.flags = v19713 | v19714
    }
    moduleDecl$$6.mod = modType$$1;
    var v4633 = modType$$1.members;
    var v4634 = modType$$1.ambientMembers;
    var v4635 = modType$$1.enclosedTypes;
    var v4636 = modType$$1.ambientEnclosedTypes;
    JAMScript.call(TypeScript$$24.pushTypeCollectionScope, TypeScript$$24, [typeSymbol$$3, v4633, v4634, v4635, v4636, context$$53, null, null, moduleDecl$$6]);
    return true
  }
  function preCollectClassTypes(ast$$68, parent$$56, context$$54) {
    var scopeChain$$5 = context$$54.scopeChain;
    var classDecl$$7 = ast$$68;
    var classType$$5;
    var instanceType$$4;
    var typeSymbol$$4 = null;
    var v4637 = classDecl$$7.name;
    var className$$4 = v4637.text;
    var alreadyInScope = false;
    var v4638 = classDecl$$7.varFlags;
    var v14135 = TypeScript$$24.VarFlags;
    var v4639 = v14135.Ambient;
    var isAmbient$$6 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4638, v4639]);
    var v4640 = classDecl$$7.varFlags;
    var v14136 = TypeScript$$24.VarFlags;
    var v4641 = v14136.Exported;
    var isExported$$3 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4640, v4641]);
    var v14137 = context$$54.scopeChain;
    var v4642 = v14137.container;
    var v14138 = context$$54.checker;
    var v4643 = v14138.gloMod;
    var isGlobal$$3 = v4642 == v4643;
    var containerMod = scopeChain$$5.container;
    var foundValSymbol = false;
    var v4644 = scopeChain$$5.scope;
    typeSymbol$$4 = JAMScript.call(v4644.findLocal, v4644, [className$$4, false, true]);
    var v4651 = !typeSymbol$$4;
    if(v4651) {
      var v4645 = scopeChain$$5.scope;
      var valTypeSymbol = JAMScript.call(v4645.findLocal, v4645, [className$$4, false, false]);
      var v14139 = valTypeSymbol;
      if(v14139) {
        var v19715 = JAMScript.call(valTypeSymbol.isType, valTypeSymbol, []);
        if(v19715) {
          var v23385 = valTypeSymbol.declAST;
          if(v23385) {
            var v26465 = valTypeSymbol.declAST;
            var v26012 = v26465.nodeType;
            var v26466 = TypeScript$$24.NodeType;
            var v26013 = v26466.FuncDecl;
            var v25172 = v26012 == v26013;
            if(v25172) {
              var v26014 = valTypeSymbol.declAST;
              v25172 = JAMScript.call(v26014.isSignature, v26014, [])
            }
            v23385 = v25172
          }
          v19715 = v23385
        }
        v14139 = v19715
      }
      var v4650 = v14139;
      if(v4650) {
        typeSymbol$$4 = valTypeSymbol;
        foundValSymbol = true;
        if(isExported$$3) {
          var v14140 = typeSymbol$$4;
          var v19716 = typeSymbol$$4.flags;
          var v23386 = TypeScript$$24.SymbolFlags;
          var v19717 = v23386.Exported;
          v14140.flags = v19716 | v19717
        }
        if(isAmbient$$6) {
          var v14141 = typeSymbol$$4;
          var v19718 = typeSymbol$$4.flags;
          var v23387 = TypeScript$$24.SymbolFlags;
          var v19719 = v23387.Ambient;
          v14141.flags = v19718 | v19719
        }
        var v14142 = context$$54.scopeChain;
        var v4646 = v14142.scope;
        var v14143 = context$$54.scopeChain;
        var v4647 = v14143.container;
        var v14144 = context$$54.checker;
        var v4648 = v14144.errorReporter;
        var v4649 = isExported$$3 || isGlobal$$3;
        JAMScript.call(v4646.enter, v4646, [v4647, ast$$68, typeSymbol$$4, v4648, v4649, true, isAmbient$$6])
      }
    }
    var v14145 = typeSymbol$$4;
    if(v14145) {
      var v19720 = !foundValSymbol;
      if(v19720) {
        var v23388 = typeSymbol$$4.declAST;
        v19720 = v23388 != classDecl$$7
      }
      v14145 = v19720
    }
    var v4652 = v14145;
    if(v4652) {
      typeSymbol$$4 = null
    }
    var v4697 = typeSymbol$$4 == null;
    if(v4697) {
      var v4653 = scopeChain$$5.scope;
      var valueSymbol = JAMScript.call(v4653.findLocal, v4653, [className$$4, false, false]);
      var v4654 = TypeScript$$24.Type;
      classType$$5 = JAMScript.new(v4654, []);
      JAMScript.call(classType$$5.setHasImplementation, classType$$5, []);
      var v4655 = TypeScript$$24.Type;
      instanceType$$4 = JAMScript.new(v4655, []);
      JAMScript.call(instanceType$$4.setHasImplementation, instanceType$$4, []);
      classType$$5.instanceType = instanceType$$4;
      var v4656 = TypeScript$$24.ScopedMembers;
      var v14146 = TypeScript$$24.DualStringHashTable;
      var v19721 = TypeScript$$24.StringHashTable;
      var v14147 = JAMScript.new(v19721, []);
      var v19722 = TypeScript$$24.StringHashTable;
      var v14148 = JAMScript.new(v19722, []);
      var v4657 = JAMScript.new(v14146, [v14147, v14148]);
      var v27074 = JAMScript.new(v4656, [v4657]);
      classType$$5.members = v27074;
      var v4658 = TypeScript$$24.ScopedMembers;
      var v14149 = TypeScript$$24.DualStringHashTable;
      var v19723 = TypeScript$$24.StringHashTable;
      var v14150 = JAMScript.new(v19723, []);
      var v19724 = TypeScript$$24.StringHashTable;
      var v14151 = JAMScript.new(v19724, []);
      var v4659 = JAMScript.new(v14149, [v14150, v14151]);
      var v27075 = JAMScript.new(v4658, [v4659]);
      classType$$5.ambientMembers = v27075;
      var classType$$inline_10 = classType$$5;
      var ast$$inline_11 = classDecl$$7;
      var context$$inline_12 = context$$54;
      var v4660 = TypeScript$$24.ValueLocation;
      var field$$inline_13 = JAMScript.new(v4660, []);
      var v4661 = TypeScript$$24.TypeLink;
      var v27076 = JAMScript.new(v4661, []);
      field$$inline_13.typeLink = v27076;
      var v4662 = field$$inline_13.typeLink;
      v4662.ast = ast$$inline_11;
      var v4663 = field$$inline_13.typeLink;
      v4663.type = classType$$inline_10.instanceType;
      var v4664 = TypeScript$$24.FieldSymbol;
      var v4665 = ast$$inline_11.minChar;
      var v19725 = context$$inline_12.checker;
      var v14152 = v19725.locationInfo;
      var v4666 = v14152.unitIndex;
      var fieldSymbol$$inline_14 = JAMScript.new(v4664, ["prototype", v4665, v4666, true, field$$inline_13]);
      var v14153 = fieldSymbol$$inline_14;
      var v19726 = fieldSymbol$$inline_14.flags;
      var v25173 = TypeScript$$24.SymbolFlags;
      var v23389 = v25173.Property;
      var v25174 = TypeScript$$24.SymbolFlags;
      var v23390 = v25174.BuiltIn;
      var v19727 = v23389 | v23390;
      v14153.flags = v19726 | v19727;
      field$$inline_13.symbol = fieldSymbol$$inline_14;
      fieldSymbol$$inline_14.declAST = ast$$inline_11;
      var v4667 = classType$$inline_10.members;
      JAMScript.call(v4667.addPublicMember, v4667, ["prototype", fieldSymbol$$inline_14]);
      var v4668 = TypeScript$$24.ScopedMembers;
      var v14154 = TypeScript$$24.DualStringHashTable;
      var v19728 = TypeScript$$24.StringHashTable;
      var v14155 = JAMScript.new(v19728, []);
      var v19729 = TypeScript$$24.StringHashTable;
      var v14156 = JAMScript.new(v19729, []);
      var v4669 = JAMScript.new(v14154, [v14155, v14156]);
      var v27077 = JAMScript.new(v4668, [v4669]);
      instanceType$$4.members = v27077;
      var v4670 = TypeScript$$24.ScopedMembers;
      var v14157 = TypeScript$$24.DualStringHashTable;
      var v19730 = TypeScript$$24.StringHashTable;
      var v14158 = JAMScript.new(v19730, []);
      var v19731 = TypeScript$$24.StringHashTable;
      var v14159 = JAMScript.new(v19731, []);
      var v4671 = JAMScript.new(v14157, [v14158, v14159]);
      var v27078 = JAMScript.new(v4670, [v4671]);
      instanceType$$4.ambientMembers = v27078;
      var v4672 = TypeScript$$24.TypeSymbol;
      var v14160 = classDecl$$7.name;
      var v4673 = v14160.minChar;
      var v4674 = className$$4.length;
      var v19732 = context$$54.checker;
      var v14161 = v19732.locationInfo;
      var v4675 = v14161.unitIndex;
      typeSymbol$$4 = JAMScript.new(v4672, [className$$4, v4673, v4674, v4675, classType$$5]);
      typeSymbol$$4.declAST = classDecl$$7;
      typeSymbol$$4.instanceType = instanceType$$4;
      classType$$5.symbol = typeSymbol$$4;
      instanceType$$4.symbol = typeSymbol$$4;
      var v14162 = context$$54.scopeChain;
      var v4678 = v14162.moduleDecl;
      if(v4678) {
        var v14163 = context$$54.scopeChain;
        var v4676 = v14163.moduleDecl;
        JAMScript.call(v4676.recordNonInterface, v4676, []);
        var v4677 = context$$54.scopeChain;
        typeSymbol$$4.declModule = v4677.moduleDecl;
        var v14164 = typeSymbol$$4;
        var v19733 = typeSymbol$$4.flags;
        var v23391 = TypeScript$$24.SymbolFlags;
        var v19734 = v23391.ModuleMember;
        v14164.flags = v19733 | v19734
      }
      if(isExported$$3) {
        var v14165 = typeSymbol$$4;
        var v19735 = typeSymbol$$4.flags;
        var v23392 = TypeScript$$24.SymbolFlags;
        var v19736 = v23392.Exported;
        v14165.flags = v19735 | v19736
      }
      if(isAmbient$$6) {
        var v14166 = typeSymbol$$4;
        var v19737 = typeSymbol$$4.flags;
        var v23393 = TypeScript$$24.SymbolFlags;
        var v19738 = v23393.Ambient;
        v14166.flags = v19737 | v19738
      }
      ast$$68.type = classType$$5;
      var v14167 = context$$54.scopeChain;
      var v4679 = v14167.scope;
      var v14168 = context$$54.scopeChain;
      var v4680 = v14168.container;
      var v14169 = context$$54.checker;
      var v4681 = v14169.errorReporter;
      var v4682 = isExported$$3 || isGlobal$$3;
      JAMScript.call(v4679.enter, v4679, [v4680, ast$$68, typeSymbol$$4, v4681, v4682, true, isAmbient$$6]);
      var v4687 = valueSymbol == null;
      if(v4687) {
        var v14170 = context$$54.scopeChain;
        var v4683 = v14170.scope;
        var v14171 = context$$54.scopeChain;
        var v4684 = v14171.container;
        var v14172 = context$$54.checker;
        var v4685 = v14172.errorReporter;
        var v4686 = isExported$$3 || isGlobal$$3;
        JAMScript.call(v4683.enter, v4683, [v4684, ast$$68, typeSymbol$$4, v4685, v4686, false, isAmbient$$6])
      }
    }else {
      classType$$5 = typeSymbol$$4.type;
      var v14173 = classType$$5.instanceType;
      var v4696 = v14173 == null;
      if(v4696) {
        var v4688 = TypeScript$$24.Type;
        var v27079 = JAMScript.new(v4688, []);
        classType$$5.instanceType = v27079;
        var v4689 = classType$$5.instanceType;
        JAMScript.call(v4689.setHasImplementation, v4689, []);
        var v4690 = classType$$5.instanceType;
        var v14174 = TypeScript$$24.ScopedMembers;
        var v19739 = TypeScript$$24.DualStringHashTable;
        var v23394 = TypeScript$$24.StringHashTable;
        var v19740 = JAMScript.new(v23394, []);
        var v23395 = TypeScript$$24.StringHashTable;
        var v19741 = JAMScript.new(v23395, []);
        var v14175 = JAMScript.new(v19739, [v19740, v19741]);
        var v27080 = JAMScript.new(v14174, [v14175]);
        v4690.members = v27080;
        var v4691 = classType$$5.instanceType;
        v4691.symbol = classType$$5.symbol;
        var v4692 = TypeScript$$24.ScopedMembers;
        var v14176 = TypeScript$$24.DualStringHashTable;
        var v19742 = TypeScript$$24.StringHashTable;
        var v14177 = JAMScript.new(v19742, []);
        var v19743 = TypeScript$$24.StringHashTable;
        var v14178 = JAMScript.new(v19743, []);
        var v4693 = JAMScript.new(v14176, [v14177, v14178]);
        var v27081 = JAMScript.new(v4692, [v4693]);
        classType$$5.members = v27081;
        var v4694 = TypeScript$$24.ScopedMembers;
        var v14179 = TypeScript$$24.DualStringHashTable;
        var v19744 = TypeScript$$24.StringHashTable;
        var v14180 = JAMScript.new(v19744, []);
        var v19745 = TypeScript$$24.StringHashTable;
        var v14181 = JAMScript.new(v19745, []);
        var v4695 = JAMScript.new(v14179, [v14180, v14181]);
        var v27082 = JAMScript.new(v4694, [v4695]);
        classType$$5.ambientMembers = v27082
      }
      instanceType$$4 = classType$$5.instanceType;
      ast$$68.type = classType$$5
    }
    var v14182 = classDecl$$7.constructorDecl;
    var v4703 = !v14182;
    if(v4703) {
      var v14183 = typeSymbol$$4;
      if(v14183) {
        var v19746 = typeSymbol$$4.declAST;
        if(v19746) {
          var v25175 = typeSymbol$$4.declAST;
          var v23396 = v25175.type;
          if(v23396) {
            var v26467 = typeSymbol$$4.declAST;
            var v26015 = v26467.type;
            var v25176 = v26015.call;
            if(v25176) {
              var v26468 = typeSymbol$$4.declAST;
              var v26016 = v26468.isOverload;
              v25176 = !v26016
            }
            v23396 = v25176
          }
          v19746 = v23396
        }
        v14183 = v19746
      }
      var v4701 = v14183;
      if(v4701) {
        var v14184 = context$$54.checker;
        var v4698 = v14184.errorReporter;
        var v4699 = typeSymbol$$4.declAST;
        var v4700 = typeSymbol$$4.name;
        JAMScript.call(v4698.duplicateIdentifier, v4698, [v4699, v4700])
      }
      var v4702 = classDecl$$7.type;
      createNewConstructGroupForType(v4702)
    }
    var v14185 = classType$$5;
    var v19747 = classType$$5.typeFlags;
    var v23397 = TypeScript$$24.TypeFlags;
    var v19748 = v23397.IsClass;
    v14185.typeFlags = v19747 | v19748;
    var v14186 = instanceType$$4;
    var v19749 = instanceType$$4.typeFlags;
    var v23398 = TypeScript$$24.TypeFlags;
    var v19750 = v23398.IsClass;
    v14186.typeFlags = v19749 | v19750;
    getBases(instanceType$$4, classDecl$$7);
    var v4704 = instanceType$$4.members;
    var v4705 = instanceType$$4.ambientMembers;
    JAMScript.call(TypeScript$$24.pushTypeCollectionScope, TypeScript$$24, [typeSymbol$$4, v4704, v4705, null, null, context$$54, instanceType$$4, classType$$5, null]);
    return true
  }
  function preCollectInterfaceTypes(ast$$69, parent$$57, context$$55) {
    var scopeChain$$6 = context$$55.scopeChain;
    var interfaceDecl$$4 = ast$$69;
    var interfaceSymbol$$1 = null;
    var interfaceType$$2 = null;
    var v4706 = interfaceDecl$$4.varFlags;
    var v14187 = TypeScript$$24.VarFlags;
    var v4707 = v14187.Exported;
    var isExported$$4 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4706, v4707]);
    var v14188 = context$$55.scopeChain;
    var v4708 = v14188.container;
    var v14189 = context$$55.checker;
    var v4709 = v14189.gloMod;
    var isGlobal$$4 = v4708 == v4709;
    var alreadyInScope$$1 = true;
    alreadyInScope$$1 = false;
    var v4710 = interfaceDecl$$4.name;
    var interfaceName = v4710.text;
    var v4711 = scopeChain$$6.scope;
    interfaceSymbol$$1 = JAMScript.call(v4711.findLocal, v4711, [interfaceName, false, true]);
    var v4722 = interfaceSymbol$$1 == null;
    if(v4722) {
      var v4712 = TypeScript$$24.Type;
      interfaceType$$2 = JAMScript.new(v4712, []);
      var v4713 = TypeScript$$24.TypeSymbol;
      var v14190 = interfaceDecl$$4.name;
      var v4714 = v14190.minChar;
      var v4715 = interfaceName.length;
      var v19751 = context$$55.checker;
      var v14191 = v19751.locationInfo;
      var v4716 = v14191.unitIndex;
      interfaceSymbol$$1 = JAMScript.new(v4713, [interfaceName, v4714, v4715, v4716, interfaceType$$2]);
      interfaceType$$2.symbol = interfaceSymbol$$1;
      var v4717 = TypeScript$$24.ScopedMembers;
      var v14192 = TypeScript$$24.DualStringHashTable;
      var v19752 = TypeScript$$24.StringHashTable;
      var v14193 = JAMScript.new(v19752, []);
      var v19753 = TypeScript$$24.StringHashTable;
      var v14194 = JAMScript.new(v19753, []);
      var v4718 = JAMScript.new(v14192, [v14193, v14194]);
      var v27083 = JAMScript.new(v4717, [v4718]);
      interfaceType$$2.members = v27083;
      var v4719 = TypeScript$$24.ScopedMembers;
      var v14195 = TypeScript$$24.DualStringHashTable;
      var v19754 = TypeScript$$24.StringHashTable;
      var v14196 = JAMScript.new(v19754, []);
      var v19755 = TypeScript$$24.StringHashTable;
      var v14197 = JAMScript.new(v19755, []);
      var v4720 = JAMScript.new(v14195, [v14196, v14197]);
      var v27084 = JAMScript.new(v4719, [v4720]);
      interfaceType$$2.ambientMembers = v27084;
      interfaceSymbol$$1.declAST = interfaceDecl$$4;
      var v4721 = context$$55.scopeChain;
      interfaceSymbol$$1.declModule = v4721.moduleDecl
    }else {
      alreadyInScope$$1 = true;
      interfaceType$$2 = interfaceSymbol$$1.type
    }
    var v4724 = !interfaceType$$2;
    if(v4724) {
      var v4723 = context$$55.checker;
      interfaceType$$2 = v4723.anyType
    }
    ast$$69.type = interfaceType$$2;
    getBases(interfaceType$$2, interfaceDecl$$4);
    if(isExported$$4) {
      var v14198 = interfaceSymbol$$1;
      var v19756 = interfaceSymbol$$1.flags;
      var v23399 = TypeScript$$24.SymbolFlags;
      var v19757 = v23399.Exported;
      v14198.flags = v19756 | v19757
    }
    var v14199 = context$$55.scopeChain;
    var v4725 = v14199.moduleDecl;
    if(v4725) {
      var v14200 = interfaceSymbol$$1;
      var v19758 = interfaceSymbol$$1.flags;
      var v23400 = TypeScript$$24.SymbolFlags;
      var v19759 = v23400.ModuleMember;
      v14200.flags = v19758 | v19759
    }
    var v4730 = !alreadyInScope$$1;
    if(v4730) {
      var v14201 = context$$55.scopeChain;
      var v4726 = v14201.scope;
      var v14202 = context$$55.scopeChain;
      var v4727 = v14202.container;
      var v14203 = context$$55.checker;
      var v4728 = v14203.errorReporter;
      var v4729 = isGlobal$$4 || isExported$$4;
      JAMScript.call(v4726.enter, v4726, [v4727, ast$$69, interfaceSymbol$$1, v4728, v4729, true, false])
    }
    var v4731 = interfaceType$$2.members;
    var v4732 = interfaceType$$2.ambientMembers;
    JAMScript.call(TypeScript$$24.pushTypeCollectionScope, TypeScript$$24, [interfaceSymbol$$1, v4731, v4732, null, null, context$$55, interfaceType$$2, null, null]);
    return true
  }
  function preCollectArgDeclTypes(ast$$70, parent$$58, context$$56) {
    var scopeChain$$7 = context$$56.scopeChain;
    var argDecl$$1 = ast$$70;
    var v14204 = argDecl$$1.varFlags;
    var v23401 = TypeScript$$24.VarFlags;
    var v19760 = v23401.Public;
    var v23402 = TypeScript$$24.VarFlags;
    var v19761 = v23402.Private;
    var v14205 = v19760 | v19761;
    var v4747 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v14204, v14205]);
    if(v4747) {
      var v4733 = TypeScript$$24.ValueLocation;
      var field$$4 = JAMScript.new(v4733, []);
      var v4734 = argDecl$$1.varFlags;
      var v14206 = TypeScript$$24.VarFlags;
      var v4735 = v14206.Private;
      var isPrivate$$2 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4734, v4735]);
      var v4736 = TypeScript$$24.FieldSymbol;
      var v14207 = argDecl$$1.id;
      var v4737 = v14207.text;
      var v14208 = argDecl$$1.id;
      var v4738 = v14208.minChar;
      var v19762 = context$$56.checker;
      var v14209 = v19762.locationInfo;
      var v4739 = v14209.unitIndex;
      var v19763 = argDecl$$1.varFlags;
      var v23403 = TypeScript$$24.VarFlags;
      var v19764 = v23403.Readonly;
      var v14210 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v19763, v19764]);
      var v4740 = !v14210;
      var fieldSymbol$$2 = JAMScript.new(v4736, [v4737, v4738, v4739, v4740, field$$4]);
      var v4741 = argDecl$$1.varFlags;
      JAMScript.call(fieldSymbol$$2.transferVarFlags, fieldSymbol$$2, [v4741]);
      field$$4.symbol = fieldSymbol$$2;
      fieldSymbol$$2.declAST = ast$$70;
      argDecl$$1.parameterPropertySym = fieldSymbol$$2;
      var v14211 = context$$56.scopeChain;
      var v4742 = v14211.scope;
      var v14212 = context$$56.scopeChain;
      var v4743 = v14212.container;
      var v14213 = context$$56.checker;
      var v4744 = v14213.errorReporter;
      var v4745 = !isPrivate$$2;
      JAMScript.call(v4742.enter, v4742, [v4743, ast$$70, fieldSymbol$$2, v4744, v4745, false, false]);
      var v4746 = field$$4;
      var v14214 = argDecl$$1.typeExpr;
      var v14215 = context$$56.checker;
      var v19765 = argDecl$$1.init;
      var v14216 = v19765 == null;
      var v27085 = JAMScript.call(TypeScript$$24.getTypeLink, TypeScript$$24, [v14214, v14215, v14216]);
      v4746.typeLink = v27085;
      argDecl$$1.sym = fieldSymbol$$2
    }
    return false
  }
  function preCollectVarDeclTypes(ast$$71, parent$$59, context$$57) {
    var scopeChain$$8 = context$$57.scopeChain;
    var varDecl$$12 = ast$$71;
    var v4748 = varDecl$$12.varFlags;
    var v14217 = TypeScript$$24.VarFlags;
    var v4749 = v14217.Ambient;
    var isAmbient$$7 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4748, v4749]);
    var v4750 = varDecl$$12.varFlags;
    var v14218 = TypeScript$$24.VarFlags;
    var v4751 = v14218.Exported;
    var isExported$$5 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4750, v4751]);
    var v14219 = context$$57.scopeChain;
    var v4752 = v14219.container;
    var v14220 = context$$57.checker;
    var v4753 = v14220.gloMod;
    var isGlobal$$5 = v4752 == v4753;
    var v4754 = varDecl$$12.varFlags;
    var v14221 = TypeScript$$24.VarFlags;
    var v4755 = v14221.Property;
    var isProperty = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4754, v4755]);
    var v4756 = varDecl$$12.varFlags;
    var v14222 = TypeScript$$24.VarFlags;
    var v4757 = v14222.Static;
    var isStatic$$8 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4756, v4757]);
    var v4758 = varDecl$$12.varFlags;
    var v14223 = TypeScript$$24.VarFlags;
    var v4759 = v14223.Private;
    var isPrivate$$3 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4758, v4759]);
    var v14224 = varDecl$$12.id;
    var v4760 = v14224.flags;
    var v14225 = TypeScript$$24.ASTFlags;
    var v4761 = v14225.OptionalName;
    var isOptional$$1 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4760, v4761]);
    var v14226 = context$$57.scopeChain;
    var v4763 = v14226.moduleDecl;
    if(v4763) {
      var v14227 = context$$57.scopeChain;
      var v4762 = v14227.moduleDecl;
      JAMScript.call(v4762.recordNonInterface, v4762, [])
    }
    var v14228 = isProperty;
    var v19767 = !v14228;
    if(v19767) {
      var v19766 = isExported$$5;
      var v23405 = !v19766;
      if(v23405) {
        var v26017 = context$$57.scopeChain;
        var v25177 = v26017.container;
        var v26018 = context$$57.checker;
        var v25178 = v26018.gloMod;
        var v23404 = v25177 == v25178;
        var v25180 = !v23404;
        if(v25180) {
          var v25179 = context$$57.scopeChain;
          v23404 = v25179.moduleDecl
        }
        v19766 = v23404
      }
      v14228 = v19766
    }
    var v4788 = v14228;
    if(v4788) {
      if(isAmbient$$7) {
        var v4764 = scopeChain$$8.scope;
        var v14229 = varDecl$$12.id;
        var v4765 = v14229.text;
        var existingSym = JAMScript.call(v4764.findLocal, v4764, [v4765, false, false]);
        if(existingSym) {
          varDecl$$12.sym = existingSym;
          return false
        }
      }
      var v14230 = varDecl$$12.id;
      var v4767 = v14230 == null;
      if(v4767) {
        var v14231 = context$$57.checker;
        var v4766 = v14231.errorReporter;
        JAMScript.call(v4766.simpleError, v4766, [varDecl$$12, "Expected variable identifier at this location"]);
        return false
      }
      var v4768 = TypeScript$$24.ValueLocation;
      var field$$5 = JAMScript.new(v4768, []);
      var v4769 = TypeScript$$24.FieldSymbol;
      var v14232 = varDecl$$12.id;
      var v4770 = v14232.text;
      var v14233 = varDecl$$12.id;
      var v4771 = v14233.minChar;
      var v19768 = context$$57.checker;
      var v14234 = v19768.locationInfo;
      var v4772 = v14234.unitIndex;
      var v19769 = varDecl$$12.varFlags;
      var v23406 = TypeScript$$24.VarFlags;
      var v19770 = v23406.Readonly;
      var v14235 = v19769 & v19770;
      var v19771 = TypeScript$$24.VarFlags;
      var v14236 = v19771.None;
      var v4773 = v14235 == v14236;
      var fieldSymbol$$3 = JAMScript.new(v4769, [v4770, v4771, v4772, v4773, field$$5]);
      var v4774 = varDecl$$12.varFlags;
      JAMScript.call(fieldSymbol$$3.transferVarFlags, fieldSymbol$$3, [v4774]);
      if(isOptional$$1) {
        var v14237 = fieldSymbol$$3;
        var v19772 = fieldSymbol$$3.flags;
        var v23407 = TypeScript$$24.SymbolFlags;
        var v19773 = v23407.Optional;
        v14237.flags = v19772 | v19773
      }
      field$$5.symbol = fieldSymbol$$3;
      fieldSymbol$$3.declAST = ast$$71;
      var v19774 = context$$57.scopeChain;
      var v14238 = v19774.moduleDecl;
      var v19777 = !v14238;
      if(v19777) {
        var v23408 = context$$57.scopeChain;
        var v19775 = v23408.container;
        var v23409 = context$$57.checker;
        var v19776 = v23409.gloMod;
        v14238 = v19775 == v19776
      }
      var v4776 = v14238;
      if(v4776) {
        var v14239 = fieldSymbol$$3;
        var v19778 = fieldSymbol$$3.flags;
        var v23410 = TypeScript$$24.SymbolFlags;
        var v19779 = v23410.ModuleMember;
        v14239.flags = v19778 | v19779;
        var v4775 = context$$57.scopeChain;
        fieldSymbol$$3.declModule = v4775.moduleDecl
      }
      var v19780 = varDecl$$12.varFlags;
      var v23411 = TypeScript$$24.VarFlags;
      var v19781 = v23411.Property;
      var v14240 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v19780, v19781]);
      if(v14240) {
        var v19782 = isStatic$$8;
        if(v19782) {
          var v23412 = context$$57.scopeChain;
          v19782 = v23412.classType
        }
        v14240 = v19782
      }
      var v4785 = v14240;
      if(v4785) {
        var v26019 = context$$57.scopeChain;
        var v25181 = v26019.classType;
        var v23413 = v25181.members;
        var v19783 = v23413.publicMembers;
        var v23414 = varDecl$$12.id;
        var v19784 = v23414.text;
        var v14241 = JAMScript.call(v19783.add, v19783, [v19784, fieldSymbol$$3]);
        var v4779 = !v14241;
        if(v4779) {
          var v14242 = context$$57.checker;
          var v4777 = v14242.errorReporter;
          var v4778 = fieldSymbol$$3.name;
          JAMScript.call(v4777.duplicateIdentifier, v4777, [ast$$71, v4778])
        }
        var v14243 = context$$57.scopeChain;
        var v4780 = v14243.classType;
        fieldSymbol$$3.container = v4780.symbol
      }else {
        var v14244 = context$$57.scopeChain;
        var v4781 = v14244.scope;
        var v14245 = context$$57.scopeChain;
        var v4782 = v14245.container;
        var v14246 = context$$57.checker;
        var v4783 = v14246.errorReporter;
        var v14247 = !isPrivate$$3;
        if(v14247) {
          var v19785 = isProperty;
          var v23416 = !v19785;
          if(v23416) {
            var v23415 = isExported$$5;
            var v25182 = !v23415;
            if(v25182) {
              v23415 = isGlobal$$5 || isStatic$$8
            }
            v19785 = v23415
          }
          v14247 = v19785
        }
        var v4784 = v14247;
        JAMScript.call(v4781.enter, v4781, [v4782, ast$$71, fieldSymbol$$3, v4783, v4784, false, isAmbient$$7])
      }
      var v14248 = varDecl$$12.varFlags;
      var v19786 = TypeScript$$24.VarFlags;
      var v14249 = v19786.Exported;
      var v4786 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v14248, v14249]);
      if(v4786) {
        var v14250 = fieldSymbol$$3;
        var v19787 = fieldSymbol$$3.flags;
        var v23417 = TypeScript$$24.SymbolFlags;
        var v19788 = v23417.Exported;
        v14250.flags = v19787 | v19788
      }
      var v4787 = field$$5;
      var v14251 = varDecl$$12.typeExpr;
      var v14252 = context$$57.checker;
      var v19789 = varDecl$$12.init;
      var v14253 = v19789 == null;
      var v27086 = JAMScript.call(TypeScript$$24.getTypeLink, TypeScript$$24, [v14251, v14252, v14253]);
      v4787.typeLink = v27086;
      varDecl$$12.sym = fieldSymbol$$3
    }
    return false
  }
  function preCollectFuncDeclTypes(ast$$72, parent$$60, context$$58) {
    var scopeChain$$9 = context$$58.scopeChain;
    var v14254 = context$$58.scopeChain;
    var v4790 = v14254.moduleDecl;
    if(v4790) {
      var v14255 = context$$58.scopeChain;
      var v4789 = v14255.moduleDecl;
      JAMScript.call(v4789.recordNonInterface, v4789, [])
    }
    var funcDecl$$22 = ast$$72;
    var fgSym$$3 = null;
    var nameText$$3 = JAMScript.call(funcDecl$$22.getNameText, funcDecl$$22, []);
    var v4791 = funcDecl$$22.fncFlags;
    var v19790 = TypeScript$$24.FncFlags;
    var v14256 = v19790.Exported;
    var v19791 = TypeScript$$24.FncFlags;
    var v14257 = v19791.ClassPropertyMethodExported;
    var v4792 = v14256 | v14257;
    var isExported$$6 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4791, v4792]);
    var v4793 = funcDecl$$22.fncFlags;
    var v14258 = TypeScript$$24.FncFlags;
    var v4794 = v14258.Static;
    var isStatic$$9 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4793, v4794]);
    var v4795 = funcDecl$$22.fncFlags;
    var v14259 = TypeScript$$24.FncFlags;
    var v4796 = v14259.Private;
    var isPrivate$$4 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v4795, v4796]);
    var v4797 = JAMScript.call(funcDecl$$22.isConstructMember, funcDecl$$22, []);
    var v14260 = !v4797;
    if(v14260) {
      v4797 = funcDecl$$22.isConstructor
    }
    var isConstructor$$3 = v4797;
    var v4798;
    var v25183 = JAMScript.call(funcDecl$$22.isMethod, funcDecl$$22, []);
    if(v25183) {
      v25183 = isStatic$$9
    }
    var v23418 = v25183;
    var v25184 = !v23418;
    if(v25184) {
      v23418 = JAMScript.call(funcDecl$$22.isAccessor, funcDecl$$22, [])
    }
    var v19792 = v23418;
    if(v19792) {
      var v23419 = context$$58.scopeChain;
      v19792 = v23419.classType
    }
    var v14263 = v19792;
    if(v14263) {
      var v19793 = context$$58.scopeChain;
      var v14261 = v19793.classType;
      v4798 = v14261.symbol
    }else {
      var v14262 = context$$58.scopeChain;
      v4798 = v14262.container
    }
    var containerSym = v4798;
    var v4799 = context$$58.scopeChain;
    var containerScope = v4799.scope;
    var v14264 = context$$58.checker;
    var v4800 = v14264.gloMod;
    var isGlobal$$6 = containerSym == v4800;
    var v4801 = funcDecl$$22.name;
    if(v4801) {
      var v19794 = funcDecl$$22.name;
      var v14265 = v19794.flags;
      var v19795 = TypeScript$$24.ASTFlags;
      var v14266 = v19795.OptionalName;
      v4801 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v14265, v14266])
    }
    var isOptional$$2 = v4801;
    var go$$2 = false;
    var foundSymbol = false;
    var v14267 = isConstructor$$3;
    if(v14267) {
      var v19796 = funcDecl$$22.fncFlags;
      var v23420 = TypeScript$$24.FncFlags;
      var v19797 = v23420.ClassMethod;
      v14267 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v19796, v19797])
    }
    var v4803 = v14267;
    if(v4803) {
      containerSym = containerSym.container;
      var v4802 = scopeChain$$9.previous;
      containerScope = v4802.scope
    }
    var v14268 = context$$58.checker;
    var v4804 = v14268.locationInfo;
    funcDecl$$22.unitIndex = v4804.unitIndex;
    var v19798 = funcDecl$$22.isConstructor;
    var v14269 = !v19798;
    if(v14269) {
      var v19799 = containerSym;
      if(v19799) {
        var v23421 = containerSym.declAST;
        if(v23421) {
          var v26469 = containerSym.declAST;
          var v26020 = v26469.nodeType;
          var v26470 = TypeScript$$24.NodeType;
          var v26021 = v26470.FuncDecl;
          var v25185 = v26020 == v26021;
          if(v25185) {
            var v26471 = containerSym.declAST;
            var v26022 = v26471.isConstructor;
            if(v26022) {
              var v26472 = JAMScript.call(funcDecl$$22.isMethod, funcDecl$$22, []);
              v26022 = !v26472
            }
            v25185 = v26022
          }
          v23421 = v25185
        }
        v19799 = v23421
      }
      v14269 = v19799
    }
    var v4805 = v14269;
    if(v4805) {
      return go$$2
    }
    var v14270 = funcDecl$$22.fncFlags;
    var v19800 = TypeScript$$24.FncFlags;
    var v14271 = v19800.Signature;
    var v4839 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v14270, v14271]);
    if(v4839) {
      var v4806 = context$$58.scopeChain;
      var instType$$1 = v4806.thisType;
      var v14272 = nameText$$3;
      if(v14272) {
        v14272 = nameText$$3 != "__missing"
      }
      var v4810 = v14272;
      if(v4810) {
        if(isStatic$$9) {
          var v19801 = containerSym.type;
          var v14273 = v19801.members;
          var v4807 = v14273.allMembers;
          fgSym$$3 = JAMScript.call(v4807.lookup, v4807, [nameText$$3])
        }else {
          fgSym$$3 = JAMScript.call(containerScope.findLocal, containerScope, [nameText$$3, false, false]);
          var v4808 = fgSym$$3 == null;
          if(v4808) {
            fgSym$$3 = JAMScript.call(containerScope.findLocal, containerScope, [nameText$$3, false, true])
          }
        }
        if(fgSym$$3) {
          foundSymbol = true;
          var v19802 = JAMScript.call(funcDecl$$22.isSignature, funcDecl$$22, []);
          var v14274 = !v19802;
          if(v14274) {
            var v23422 = funcDecl$$22.fncFlags;
            var v25186 = TypeScript$$24.FncFlags;
            var v23423 = v25186.Ambient;
            var v19803 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v23422, v23423]);
            var v23424 = fgSym$$3.flags;
            var v25187 = TypeScript$$24.SymbolFlags;
            var v23425 = v25187.Ambient;
            var v19804 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v23424, v23425]);
            v14274 = v19803 != v19804
          }
          var v4809 = v14274;
          if(v4809) {
            fgSym$$3 = null
          }
        }
      }
      var v4819 = fgSym$$3 == null;
      if(v4819) {
        var v14275 = JAMScript.call(funcDecl$$22.isSpecialFn, funcDecl$$22, []);
        var v4813 = !v14275;
        if(v4813) {
          var v23426 = context$$58.checker;
          var v23427 = !foundSymbol;
          var v19805 = JAMScript.call(v23426.createFunctionSignature, v23426, [funcDecl$$22, containerSym, containerScope, null, v23427]);
          var v14276 = v19805.declAST;
          var v4811 = v14276.type;
          fgSym$$3 = v4811.symbol
        }else {
          var v23428 = context$$58.checker;
          var v19806 = JAMScript.call(v23428.createFunctionSignature, v23428, [funcDecl$$22, containerSym, containerScope, containerSym, false]);
          var v14277 = v19806.declAST;
          var v4812 = v14277.type;
          fgSym$$3 = v4812.symbol
        }
        var v19807 = fgSym$$3.declAST;
        var v14278 = v19807 == null;
        var v19809 = !v14278;
        if(v19809) {
          var v19808 = JAMScript.call(funcDecl$$22.isSpecialFn, funcDecl$$22, []);
          v14278 = !v19808
        }
        var v4814 = v14278;
        if(v4814) {
          fgSym$$3.declAST = ast$$72
        }
      }else {
        var v14279 = JAMScript.call(fgSym$$3.kind, fgSym$$3, []);
        var v19810 = TypeScript$$24.SymbolKind;
        var v14280 = v19810.Type;
        var v4818 = v14279 == v14280;
        if(v4818) {
          var v23429 = context$$58.checker;
          var v19811 = JAMScript.call(v23429.createFunctionSignature, v23429, [funcDecl$$22, containerSym, containerScope, fgSym$$3, false]);
          var v14281 = v19811.declAST;
          var v4815 = v14281.type;
          fgSym$$3 = v4815.symbol
        }else {
          var v14282 = context$$58.checker;
          var v4816 = v14282.errorReporter;
          var v23430 = funcDecl$$22.name;
          var v19812 = v23430.actualText;
          var v14283 = "Function or method '" + v19812;
          var v4817 = v14283 + "' already declared as a property";
          JAMScript.call(v4816.simpleError, v4816, [funcDecl$$22, v4817])
        }
      }
      var v14284 = JAMScript.call(funcDecl$$22.isSpecialFn, funcDecl$$22, []);
      if(v14284) {
        v14284 = !isStatic$$9
      }
      var v4821 = v14284;
      if(v4821) {
        var v4820;
        if(instType$$1) {
          v4820 = instType$$1
        }else {
          v4820 = fgSym$$3.type
        }
        funcDecl$$22.type = v4820
      }else {
        funcDecl$$22.type = fgSym$$3.type
      }
    }else {
      if(nameText$$3) {
        if(isStatic$$9) {
          var v19813 = containerSym.type;
          var v14285 = v19813.members;
          var v4822 = v14285.allMembers;
          fgSym$$3 = JAMScript.call(v4822.lookup, v4822, [nameText$$3])
        }else {
          var v14286 = funcDecl$$22.isConstructor;
          if(v14286) {
            var v19814 = context$$58.scopeChain;
            v14286 = v19814.previous
          }
          var v4824 = v14286;
          if(v4824) {
            var v19815 = context$$58.scopeChain;
            var v14287 = v19815.previous;
            var v4823 = v14287.scope;
            fgSym$$3 = JAMScript.call(v4823.findLocal, v4823, [nameText$$3, false, false])
          }
          var v4825 = fgSym$$3 == null;
          if(v4825) {
            fgSym$$3 = JAMScript.call(containerScope.findLocal, containerScope, [nameText$$3, false, false])
          }
        }
        if(fgSym$$3) {
          foundSymbol = true;
          var v14288 = !isConstructor$$3;
          if(v14288) {
            var v25188 = fgSym$$3.declAST;
            var v23431 = v25188.nodeType;
            var v25189 = TypeScript$$24.NodeType;
            var v23432 = v25189.FuncDecl;
            var v19816 = v23431 == v23432;
            if(v19816) {
              var v26023 = fgSym$$3.declAST;
              var v25190 = JAMScript.call(v26023.isAccessor, v26023, []);
              var v23433 = !v25190;
              if(v23433) {
                var v26024 = fgSym$$3.declAST;
                var v25191 = JAMScript.call(v26024.isSignature, v26024, []);
                v23433 = !v25191
              }
              v19816 = v23433
            }
            v14288 = v19816
          }
          var v4826 = v14288;
          if(v4826) {
            fgSym$$3 = null;
            foundSymbol = false
          }
        }
      }
      var v14289 = fgSym$$3;
      if(v14289) {
        var v23434 = JAMScript.call(fgSym$$3.isAccessor, fgSym$$3, []);
        var v19817 = !v23434;
        if(v19817) {
          var v23435 = fgSym$$3.type;
          if(v23435) {
            var v26025 = fgSym$$3.type;
            var v25192 = v26025.construct;
            if(v25192) {
              var v26776 = fgSym$$3.type;
              var v26676 = v26776.construct;
              var v26473 = v26676.signatures;
              var v26026 = v26473 != [];
              if(v26026) {
                var v26912 = fgSym$$3.type;
                var v26902 = v26912.construct;
                var v26883 = v26902.signatures;
                var v26840 = v26883[0];
                var v26777 = v26840.declAST;
                var v26677 = v26777 == null;
                var v26779 = !v26677;
                if(v26779) {
                  var v26916 = fgSym$$3.type;
                  var v26915 = v26916.construct;
                  var v26913 = v26915.signatures;
                  var v26903 = v26913[0];
                  var v26884 = v26903.declAST;
                  var v26841 = v26884.fncFlags;
                  var v26885 = TypeScript$$24.FncFlags;
                  var v26842 = v26885.Ambient;
                  var v26778 = JAMScript.call(TypeScript$$24.hasFlag, TypeScript$$24, [v26841, v26842]);
                  v26677 = !v26778
                }
                var v26474 = v26677;
                if(v26474) {
                  var v26678 = funcDecl$$22.isConstructor;
                  v26474 = !v26678
                }
                v26026 = v26474
              }
              v25192 = v26026
            }
            v23435 = v25192
          }
          v19817 = v23435
        }
        v14289 = v19817
      }
      var v4828 = v14289;
      if(v4828) {
        var v14290 = context$$58.checker;
        var v4827 = v14290.errorReporter;
        JAMScript.call(v4827.simpleError, v4827, [funcDecl$$22, "Functions may not have class overloads"])
      }
      var v14291 = fgSym$$3;
      if(v14291) {
        var v25193 = JAMScript.call(fgSym$$3.kind, fgSym$$3, []);
        var v26027 = TypeScript$$24.SymbolKind;
        var v25194 = v26027.Type;
        var v23436 = v25193 == v25194;
        var v19818 = !v23436;
        if(v19818) {
          var v23437 = JAMScript.call(funcDecl$$22.isMethod, funcDecl$$22, []);
          if(v23437) {
            var v26028 = JAMScript.call(funcDecl$$22.isAccessor, funcDecl$$22, []);
            var v25195 = !v26028;
            if(v25195) {
              var v26029 = funcDecl$$22.isConstructor;
              v25195 = !v26029
            }
            v23437 = v25195
          }
          v19818 = v23437
        }
        v14291 = v19818
      }
      var v4832 = v14291;
      if(v4832) {
        var v14292 = context$$58.checker;
        var v4829 = v14292.errorReporter;
        var v23438 = funcDecl$$22.name;
        var v19819 = v23438.actualText;
        var v14293 = "Function or method '" + v19819;
        var v4830 = v14293 + "' already declared as a property";
        JAMScript.call(v4829.simpleError, v4829, [funcDecl$$22, v4830]);
        var v4831 = context$$58.checker;
        fgSym$$3.type = v4831.anyType
      }
      var v4833 = context$$58.checker;
      var v4834 = !foundSymbol;
      var sig$$2 = JAMScript.call(v4833.createFunctionSignature, v4833, [funcDecl$$22, containerSym, containerScope, fgSym$$3, v4834]);
      var v23439 = !fgSym$$3;
      var v25198 = !v23439;
      if(v25198) {
        var v26030 = fgSym$$3.declAST;
        var v25196 = v26030.nodeType;
        var v26031 = TypeScript$$24.NodeType;
        var v25197 = v26031.FuncDecl;
        v23439 = v25196 != v25197
      }
      var v19820 = v23439;
      if(v19820) {
        v19820 = JAMScript.call(funcDecl$$22.isAccessor, funcDecl$$22, [])
      }
      var v14294 = v19820;
      var v19822 = !v14294;
      if(v19822) {
        var v19821 = fgSym$$3;
        if(v19821) {
          v19821 = JAMScript.call(fgSym$$3.isAccessor, fgSym$$3, [])
        }
        v14294 = v19821
      }
      var v4836 = v14294;
      if(v4836) {
        var v4835 = funcDecl$$22;
        var v14295 = context$$58.checker;
        var v14296 = containerSym.type;
        var v19823 = JAMScript.call(funcDecl$$22.isMethod, funcDecl$$22, []);
        if(v19823) {
          v19823 = isStatic$$9
        }
        var v14297 = v19823;
        var v27087 = JAMScript.call(v14295.createAccessorSymbol, v14295, [funcDecl$$22, fgSym$$3, v14296, v14297, true, containerScope, containerSym]);
        v4835.accessorSymbol = v27087
      }
      var v14298 = funcDecl$$22.type;
      var v4837 = v14298.symbol;
      v4837.declAST = ast$$72;
      var v4838 = funcDecl$$22.isConstructor;
      if(v4838) {
        go$$2 = true
      }
    }
    if(isExported$$6) {
      var v14299 = funcDecl$$22.type;
      var v4841 = v14299.call;
      if(v4841) {
        var v14300 = funcDecl$$22.type;
        var v4840 = v14300.symbol;
        var v19824 = v4840.flags;
        var v23440 = TypeScript$$24.SymbolFlags;
        var v19825 = v23440.Exported;
        v4840.flags = v19824 | v19825
      }
      var v14301 = fgSym$$3;
      if(v14301) {
        var v23441 = JAMScript.call(fgSym$$3.isAccessor, fgSym$$3, []);
        var v19826 = !v23441;
        if(v19826) {
          var v25199 = JAMScript.call(fgSym$$3.kind, fgSym$$3, []);
          var v26032 = TypeScript$$24.SymbolKind;
          var v25200 = v26032.Type;
          var v23442 = v25199 == v25200;
          if(v23442) {
            var v25201 = fgSym$$3.type;
            v23442 = v25201.call
          }
          v19826 = v23442
        }
        v14301 = v19826
      }
      var v4842 = v14301;
      if(v4842) {
        var v14302 = fgSym$$3;
        var v19827 = fgSym$$3.flags;
        var v23443 = TypeScript$$24.SymbolFlags;
        var v19828 = v23443.Exported;
        v14302.flags = v19827 | v19828
      }
    }
    var v19829 = context$$58.scopeChain;
    var v14303 = v19829.moduleDecl;
    if(v14303) {
      var v19830 = JAMScript.call(funcDecl$$22.isSpecialFn, funcDecl$$22, []);
      v14303 = !v19830
    }
    var v4845 = v14303;
    if(v4845) {
      var v14304 = funcDecl$$22.type;
      var v4843 = v14304.symbol;
      var v19831 = v4843.flags;
      var v23444 = TypeScript$$24.SymbolFlags;
      var v19832 = v23444.ModuleMember;
      v4843.flags = v19831 | v19832;
      var v14305 = funcDecl$$22.type;
      var v4844 = v14305.symbol;
      var v14306 = context$$58.scopeChain;
      v4844.declModule = v14306.moduleDecl
    }
    var v4846 = fgSym$$3 && isOptional$$2;
    if(v4846) {
      var v14307 = fgSym$$3;
      var v19833 = fgSym$$3.flags;
      var v23445 = TypeScript$$24.SymbolFlags;
      var v19834 = v23445.Optional;
      v14307.flags = v19833 | v19834
    }
    return go$$2
  }
  function preCollectTypes(ast$$73, parent$$61, walker$$46) {
    var context$$59 = walker$$46.state;
    var go$$3 = false;
    var scopeChain$$10 = context$$59.scopeChain;
    var v14308 = ast$$73.nodeType;
    var v19835 = TypeScript$$24.NodeType;
    var v14309 = v19835.Script;
    var v4859 = v14308 == v14309;
    if(v4859) {
      var script$$15 = ast$$73;
      context$$59.script = script$$15;
      go$$3 = true
    }else {
      var v14310 = ast$$73.nodeType;
      var v19836 = TypeScript$$24.NodeType;
      var v14311 = v19836.List;
      var v4858 = v14310 == v14311;
      if(v4858) {
        go$$3 = true
      }else {
        var v14312 = ast$$73.nodeType;
        var v19837 = TypeScript$$24.NodeType;
        var v14313 = v19837.ImportDeclaration;
        var v4857 = v14312 == v14313;
        if(v4857) {
          go$$3 = preCollectImportTypes(ast$$73, parent$$61, context$$59)
        }else {
          var v14314 = ast$$73.nodeType;
          var v19838 = TypeScript$$24.NodeType;
          var v14315 = v19838.With;
          var v4856 = v14314 == v14315;
          if(v4856) {
            go$$3 = false
          }else {
            var v14316 = ast$$73.nodeType;
            var v19839 = TypeScript$$24.NodeType;
            var v14317 = v19839.ModuleDeclaration;
            var v4855 = v14316 == v14317;
            if(v4855) {
              go$$3 = preCollectModuleTypes(ast$$73, parent$$61, context$$59)
            }else {
              var v14318 = ast$$73.nodeType;
              var v19840 = TypeScript$$24.NodeType;
              var v14319 = v19840.ClassDeclaration;
              var v4854 = v14318 == v14319;
              if(v4854) {
                go$$3 = preCollectClassTypes(ast$$73, parent$$61, context$$59)
              }else {
                var v14320 = ast$$73.nodeType;
                var v19841 = TypeScript$$24.NodeType;
                var v14321 = v19841.Block;
                var v4853 = v14320 == v14321;
                if(v4853) {
                  go$$3 = true
                }else {
                  var v14322 = ast$$73.nodeType;
                  var v19842 = TypeScript$$24.NodeType;
                  var v14323 = v19842.InterfaceDeclaration;
                  var v4852 = v14322 == v14323;
                  if(v4852) {
                    go$$3 = preCollectInterfaceTypes(ast$$73, parent$$61, context$$59)
                  }else {
                    var v14324 = ast$$73.nodeType;
                    var v19843 = TypeScript$$24.NodeType;
                    var v14325 = v19843.ArgDecl;
                    var v4851 = v14324 == v14325;
                    if(v4851) {
                      go$$3 = preCollectArgDeclTypes(ast$$73, parent$$61, context$$59)
                    }else {
                      var v14326 = ast$$73.nodeType;
                      var v19844 = TypeScript$$24.NodeType;
                      var v14327 = v19844.VarDecl;
                      var v4850 = v14326 == v14327;
                      if(v4850) {
                        go$$3 = preCollectVarDeclTypes(ast$$73, parent$$61, context$$59)
                      }else {
                        var v14328 = ast$$73.nodeType;
                        var v19845 = TypeScript$$24.NodeType;
                        var v14329 = v19845.FuncDecl;
                        var v4849 = v14328 == v14329;
                        if(v4849) {
                          go$$3 = preCollectFuncDeclTypes(ast$$73, parent$$61, context$$59)
                        }else {
                          var v14330 = JAMScript.call(ast$$73.isStatementOrExpression, ast$$73, []);
                          if(v14330) {
                            var v19846 = context$$59.scopeChain;
                            v14330 = v19846.moduleDecl
                          }
                          var v4848 = v14330;
                          if(v4848) {
                            var v14331 = context$$59.scopeChain;
                            var v4847 = v14331.moduleDecl;
                            JAMScript.call(v4847.recordNonInterface, v4847, [])
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var v4860 = walker$$46.options;
    v4860.goChildren = go$$3;
    return ast$$73
  }
  function postCollectTypes(ast$$74, parent$$62, walker$$47) {
    var context$$60 = walker$$47.state;
    var v14332 = ast$$74.nodeType;
    var v19847 = TypeScript$$24.NodeType;
    var v14333 = v19847.ModuleDeclaration;
    var v4863 = v14332 == v14333;
    if(v4863) {
      JAMScript.call(TypeScript$$24.popTypeCollectionScope, TypeScript$$24, [context$$60])
    }else {
      var v14334 = ast$$74.nodeType;
      var v19848 = TypeScript$$24.NodeType;
      var v14335 = v19848.ClassDeclaration;
      var v4862 = v14334 == v14335;
      if(v4862) {
        JAMScript.call(TypeScript$$24.popTypeCollectionScope, TypeScript$$24, [context$$60])
      }else {
        var v14336 = ast$$74.nodeType;
        var v19849 = TypeScript$$24.NodeType;
        var v14337 = v19849.InterfaceDeclaration;
        var v4861 = v14336 == v14337;
        if(v4861) {
          JAMScript.call(TypeScript$$24.popTypeCollectionScope, TypeScript$$24, [context$$60])
        }
      }
    }
    return ast$$74
  }
  var Continuation = v966();
  TypeScript$$24.Continuation = Continuation;
  TypeScript$$24.createNewConstructGroupForType = createNewConstructGroupForType;
  TypeScript$$24.cloneParentConstructGroupForChildType = cloneParentConstructGroupForChildType;
  TypeScript$$24.globalId = "__GLO";
  TypeScript$$24.preCollectImportTypes = preCollectImportTypes;
  TypeScript$$24.preCollectModuleTypes = preCollectModuleTypes;
  TypeScript$$24.preCollectClassTypes = preCollectClassTypes;
  TypeScript$$24.preCollectInterfaceTypes = preCollectInterfaceTypes;
  TypeScript$$24.preCollectArgDeclTypes = preCollectArgDeclTypes;
  TypeScript$$24.preCollectVarDeclTypes = preCollectVarDeclTypes;
  TypeScript$$24.preCollectFuncDeclTypes = preCollectFuncDeclTypes;
  TypeScript$$24.preCollectTypes = preCollectTypes;
  TypeScript$$24.postCollectTypes = postCollectTypes;
  return
}
function v964(TypeScript$$23) {
  function v963() {
    function v962(sourceSig, targetSig, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11) {
      var v19850 = sourceSig.parameters;
      var v14338 = !v19850;
      var v19852 = !v14338;
      if(v19852) {
        var v19851 = targetSig.parameters;
        v14338 = !v19851
      }
      var v4864 = v14338;
      if(v4864) {
        return false
      }
      var v4865;
      var v14340 = targetSig.hasVariableArgList;
      if(v14340) {
        var v14339 = targetSig.nonOptionalParameterCount;
        v4865 = v14339 - 1
      }else {
        v4865 = targetSig.nonOptionalParameterCount
      }
      var targetVarArgCount = v4865;
      var v4866;
      var v14342 = sourceSig.hasVariableArgList;
      if(v14342) {
        var v14341 = sourceSig.nonOptionalParameterCount;
        v4866 = v14341 - 1
      }else {
        v4866 = sourceSig.nonOptionalParameterCount
      }
      var sourceVarArgCount = v4866;
      var v14343 = sourceVarArgCount > targetVarArgCount;
      if(v14343) {
        var v19853 = targetSig.hasVariableArgList;
        v14343 = !v19853
      }
      var v4868 = v14343;
      if(v4868) {
        if(comparisonInfo$$11) {
          var v14344 = comparisonInfo$$11;
          var v19854 = comparisonInfo$$11.flags;
          var v23446 = TypeScript$$23.TypeRelationshipFlags;
          var v19855 = v23446.SourceSignatureHasTooManyParameters;
          v14344.flags = v19854 | v19855;
          var v14345 = "Call signature expects " + targetVarArgCount;
          var v4867 = v14345 + " or fewer parameters";
          JAMScript.call(comparisonInfo$$11.addMessageToFront, comparisonInfo$$11, [v4867])
        }
        return false
      }
      var v4869 = sourceSig.returnType;
      var sourceReturnType = v4869.type;
      var v4870 = targetSig.returnType;
      var targetReturnType = v4870.type;
      var v14346 = this.voidType;
      var v4872 = targetReturnType != v14346;
      if(v4872) {
        var v14347 = JAMScript.call(this.sourceIsRelatableToTarget, this, [sourceReturnType, targetReturnType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11]);
        var v4871 = !v14347;
        if(v4871) {
          if(comparisonInfo$$11) {
            var v14348 = comparisonInfo$$11;
            var v19856 = comparisonInfo$$11.flags;
            var v23447 = TypeScript$$23.TypeRelationshipFlags;
            var v19857 = v23447.IncompatibleReturnTypes;
            v14348.flags = v19856 | v19857
          }
          return false
        }
      }
      var v4873;
      var v19858 = sourceVarArgCount < targetVarArgCount;
      if(v19858) {
        v19858 = sourceSig.hasVariableArgList
      }
      var v14349 = v19858;
      if(v14349) {
        v4873 = targetVarArgCount
      }else {
        v4873 = sourceVarArgCount
      }
      var len$$29 = v4873;
      var sourceParamType = null;
      var targetParamType = null;
      var sourceParamName = "";
      var targetParamName = "";
      var iSource = 0;
      var iTarget = 0;
      var v4889 = iSource < len$$29;
      for(;v4889;) {
        var v19859 = sourceSig.hasVariableArgList;
        var v14350 = !v19859;
        var v19860 = !v14350;
        if(v19860) {
          v14350 = iSource < sourceVarArgCount
        }
        var v4880 = v14350;
        if(v4880) {
          var v23448 = sourceSig.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19861 = v23448[iSource]
          }
          var v14351 = v19861.parameter;
          var v4874 = v14351.typeLink;
          sourceParamType = v4874.type;
          var v23449 = sourceSig.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19862 = v23449[iSource]
          }
          var v14352 = v19862.parameter;
          var v4875 = v14352.symbol;
          sourceParamName = v4875.name
        }else {
          var v4879 = iSource == sourceVarArgCount;
          if(v4879) {
            var v23450 = sourceSig.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v19863 = v23450[iSource]
            }
            var v14353 = v19863.parameter;
            var v4876 = v14353.typeLink;
            sourceParamType = v4876.type;
            var v4877 = sourceParamType.elementType;
            if(v4877) {
              sourceParamType = sourceParamType.elementType
            }
            var v23451 = sourceSig.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v19864 = v23451[iSource]
            }
            var v14354 = v19864.parameter;
            var v4878 = v14354.symbol;
            sourceParamName = v4878.name
          }
        }
        var v23452 = targetSig.parameters;
        var v19865 = v23452.length;
        var v14355 = iTarget < v19865;
        if(v14355) {
          v14355 = iTarget < targetVarArgCount
        }
        var v4887 = v14355;
        if(v4887) {
          var v23453 = targetSig.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19866 = v23453[iTarget]
          }
          var v14356 = v19866.parameter;
          var v4881 = v14356.typeLink;
          targetParamType = v4881.type;
          var v23454 = targetSig.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v19867 = v23454[iTarget]
          }
          var v14357 = v19867.parameter;
          var v4882 = v14357.symbol;
          targetParamName = v4882.name
        }else {
          var v14358 = targetSig.hasVariableArgList;
          if(v14358) {
            v14358 = iTarget == targetVarArgCount
          }
          var v4886 = v14358;
          if(v4886) {
            var v23455 = targetSig.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v19868 = v23455[iTarget]
            }
            var v14359 = v19868.parameter;
            var v4883 = v14359.typeLink;
            targetParamType = v4883.type;
            var v4884 = targetParamType.elementType;
            if(v4884) {
              targetParamType = targetParamType.elementType
            }
            var v23456 = targetSig.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v19869 = v23456[iTarget]
            }
            var v14360 = v19869.parameter;
            var v4885 = v14360.symbol;
            targetParamName = v4885.name
          }
        }
        var v19870 = JAMScript.call(this.sourceIsRelatableToTarget, this, [sourceParamType, targetParamType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11]);
        var v23457 = !v19870;
        if(v23457) {
          v19870 = JAMScript.call(this.sourceIsRelatableToTarget, this, [targetParamType, sourceParamType, assignableTo$$2, comparisonCache$$2, comparisonInfo$$11])
        }
        var v14361 = v19870;
        var v4888 = !v14361;
        if(v4888) {
          if(comparisonInfo$$11) {
            var v14362 = comparisonInfo$$11;
            var v19871 = comparisonInfo$$11.flags;
            var v23458 = TypeScript$$23.TypeRelationshipFlags;
            var v19872 = v23458.IncompatibleParameterTypes;
            v14362.flags = v19871 | v19872
          }
          return false
        }
        iSource = iSource + 1;
        iTarget = iTarget + 1;
        v4889 = iSource < len$$29
      }
      return true
    }
    function v961(sourceSG, targetSG, assignableTo$$1, comparisonCache$$1, comparisonInfo$$10) {
      var v4890 = sourceSG == targetSG;
      if(v4890) {
        return true
      }
      var v14363 = sourceSG && targetSG;
      var v4891 = !v14363;
      if(v4891) {
        return false
      }
      var mSig = null;
      var nSig = null;
      var foundMatch = false;
      var iMSig = 0;
      var v19873 = targetSG.signatures;
      var v14364 = v19873.length;
      var v4896 = iMSig < v14364;
      for(;v4896;) {
        var v4892 = targetSG.signatures;
        mSig = v4892[iMSig];
        var iNSig = 0;
        var v19874 = sourceSG.signatures;
        var v14365 = v19874.length;
        var v4895 = iNSig < v14365;
        for(;v4895;) {
          var v4893 = sourceSG.signatures;
          nSig = v4893[iNSig];
          var v4894 = JAMScript.call(this.signatureIsRelatableToTarget, this, [nSig, mSig, assignableTo$$1, comparisonCache$$1, comparisonInfo$$10]);
          if(v4894) {
            foundMatch = true;
            break
          }
          iNSig = iNSig + 1;
          var v19875 = sourceSG.signatures;
          var v14366 = v19875.length;
          v4895 = iNSig < v14366
        }
        if(foundMatch) {
          foundMatch = false;
          iMSig = iMSig + 1;
          var v19876 = targetSG.signatures;
          var v14367 = v19876.length;
          v4896 = iMSig < v14367;
          continue
        }
        return false
      }
      return true
    }
    function v960(source$$3, target$$44, assignableTo, comparisonCache, comparisonInfo$$9) {
      var v4897 = source$$3 == target$$44;
      if(v4897) {
        return true
      }
      var v14368 = source$$3 && target$$44;
      var v4898 = !v14368;
      if(v4898) {
        return true
      }
      var v14369 = source$$3.typeID;
      var v4899 = v14369 << 16;
      var v4900 = target$$44.typeID;
      var comboId$$1 = v4899 | v4900;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v14370 = comparisonCache[comboId$$1]
      }
      var v4901 = v14370 != undefined;
      if(v4901) {
        return true
      }
      if(assignableTo) {
        var v19877 = this.anyType;
        var v14371 = source$$3 == v19877;
        var v19879 = !v14371;
        if(v19879) {
          var v19878 = this.anyType;
          v14371 = target$$44 == v19878
        }
        var v4902 = v14371;
        if(v4902) {
          return true
        }
      }else {
        var v14372 = this.anyType;
        var v4903 = target$$44 == v14372;
        if(v4903) {
          return true
        }
      }
      var v14373 = this.undefinedType;
      var v4904 = source$$3 == v14373;
      if(v4904) {
        return true
      }
      var v19880 = this.nullType;
      var v14374 = source$$3 == v19880;
      if(v14374) {
        var v23459 = this.undefinedType;
        var v19881 = target$$44 != v23459;
        if(v19881) {
          var v23460 = this.voidType;
          v19881 = target$$44 != v23460
        }
        v14374 = v19881
      }
      var v4905 = v14374;
      if(v4905) {
        return true
      }
      var v19882 = this.numberType;
      var v14375 = target$$44 == v19882;
      if(v14375) {
        var v19883 = source$$3.typeFlags;
        var v23461 = TypeScript$$23.TypeFlags;
        var v19884 = v23461.IsEnum;
        v14375 = v19883 & v19884
      }
      var v4906 = v14375;
      if(v4906) {
        return true
      }
      var v19885 = this.numberType;
      var v14376 = source$$3 == v19885;
      if(v14376) {
        var v19886 = target$$44.typeFlags;
        var v23462 = TypeScript$$23.TypeFlags;
        var v19887 = v23462.IsEnum;
        v14376 = v19886 & v19887
      }
      var v4907 = v14376;
      if(v4907) {
        return true
      }
      var v19888 = source$$3.typeFlags;
      var v23463 = TypeScript$$23.TypeFlags;
      var v19889 = v23463.IsEnum;
      var v14377 = v19888 & v19889;
      var v19892 = !v14377;
      if(v19892) {
        var v19890 = target$$44.typeFlags;
        var v23464 = TypeScript$$23.TypeFlags;
        var v19891 = v23464.IsEnum;
        v14377 = v19890 & v19891
      }
      var v4908 = v14377;
      if(v4908) {
        return false
      }
      var v14378 = JAMScript.call(source$$3.isArray, source$$3, []);
      var v19893 = !v14378;
      if(v19893) {
        v14378 = JAMScript.call(target$$44.isArray, target$$44, [])
      }
      var v4912 = v14378;
      if(v4912) {
        var v19894 = JAMScript.call(source$$3.isArray, source$$3, []);
        if(v19894) {
          v19894 = JAMScript.call(target$$44.isArray, target$$44, [])
        }
        var v14379 = v19894;
        var v4909 = !v14379;
        if(v4909) {
          return false
        }
        comparisonCache[comboId$$1] = false;
        var v4910 = source$$3.elementType;
        var v4911 = target$$44.elementType;
        var ret$$1 = JAMScript.call(this.sourceIsRelatableToTarget, this, [v4910, v4911, assignableTo, comparisonCache, comparisonInfo$$9]);
        if(ret$$1) {
          comparisonCache[comboId$$1] = true
        }else {
          comparisonCache[comboId$$1] = undefined
        }
        return ret$$1
      }
      var v14380 = source$$3.primitiveTypeClass;
      var v14381 = target$$44.primitiveTypeClass;
      var v4920 = v14380 != v14381;
      if(v4920) {
        var v14382 = target$$44.primitiveTypeClass;
        var v19895 = TypeScript$$23.Primitive;
        var v14383 = v19895.None;
        var v4919 = v14382 == v14383;
        if(v4919) {
          var v19896 = this.numberType;
          var v14384 = source$$3 == v19896;
          if(v14384) {
            var v19897 = this.typeFlow;
            v14384 = v19897.numberInterfaceType
          }
          var v4918 = v14384;
          if(v4918) {
            var v4913 = this.typeFlow;
            source$$3 = v4913.numberInterfaceType
          }else {
            var v19898 = this.stringType;
            var v14385 = source$$3 == v19898;
            if(v14385) {
              var v19899 = this.typeFlow;
              v14385 = v19899.stringInterfaceType
            }
            var v4917 = v14385;
            if(v4917) {
              var v4914 = this.typeFlow;
              source$$3 = v4914.stringInterfaceType
            }else {
              var v19900 = this.booleanType;
              var v14386 = source$$3 == v19900;
              if(v14386) {
                var v19901 = this.typeFlow;
                v14386 = v19901.booleanInterfaceType
              }
              var v4916 = v14386;
              if(v4916) {
                var v4915 = this.typeFlow;
                source$$3 = v4915.booleanInterfaceType
              }else {
                return false
              }
            }
          }
        }else {
          return false
        }
      }
      comparisonCache[comboId$$1] = false;
      var v4921 = JAMScript.call(source$$3.hasBase, source$$3, [target$$44]);
      if(v4921) {
        comparisonCache[comboId$$1] = true;
        return true
      }
      var v19902 = this.typeFlow;
      var v14387 = v19902.objectInterfaceType;
      if(v14387) {
        var v23465 = this.typeFlow;
        var v19903 = v23465.objectInterfaceType;
        v14387 = target$$44 == v19903
      }
      var v4922 = v14387;
      if(v4922) {
        return true
      }
      var v19904 = this.typeFlow;
      var v14388 = v19904.functionInterfaceType;
      if(v14388) {
        var v23466 = source$$3.call;
        var v25202 = !v23466;
        if(v25202) {
          v23466 = source$$3.construct
        }
        var v19905 = v23466;
        if(v19905) {
          var v25203 = this.typeFlow;
          var v23467 = v25203.functionInterfaceType;
          v19905 = target$$44 == v23467
        }
        v14388 = v19905
      }
      var v4923 = v14388;
      if(v4923) {
        return true
      }
      var v14389 = JAMScript.call(target$$44.isClass, target$$44, []);
      var v19906 = !v14389;
      if(v19906) {
        v14389 = JAMScript.call(target$$44.isClassInstance, target$$44, [])
      }
      var v4924 = v14389;
      if(v4924) {
        comparisonCache[comboId$$1] = undefined;
        return false
      }
      var v14390 = target$$44.memberScope;
      if(v14390) {
        v14390 = source$$3.memberScope
      }
      var v4954 = v14390;
      if(v4954) {
        var v4925 = target$$44.memberScope;
        var mPropKeys = JAMScript.call(v4925.getAllValueSymbolNames, v4925, [true]);
        var mProp = null;
        var nProp = null;
        var mPropType = null;
        var nPropType = null;
        var inferenceSymbol = null;
        var iMProp = 0;
        var v14391 = mPropKeys.length;
        var v4953 = iMProp < v14391;
        for(;v4953;) {
          var v4926 = target$$44.memberScope;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v4927 = mPropKeys[iMProp]
          }
          mProp = JAMScript.call(v4926.find, v4926, [v4927, false, false]);
          var v4928 = source$$3.memberScope;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v4929 = mPropKeys[iMProp]
          }
          nProp = JAMScript.call(v4928.find, v4928, [v4929, false, false]);
          var v19907 = mProp.name;
          var v14392 = v19907 == "arguments";
          if(v14392) {
            var v23468 = this.typeFlow;
            var v19908 = v23468.iargumentsInterfaceType;
            if(v19908) {
              var v26679 = this.typeFlow;
              var v26475 = v26679.iargumentsInterfaceType;
              var v26033 = v26475.symbol;
              var v25204 = v26033.flags;
              var v26034 = TypeScript$$23.SymbolFlags;
              var v25205 = v26034.CompilerGenerated;
              var v23469 = v25204 & v25205;
              if(v23469) {
                var v26035 = JAMScript.call(mProp.kind, mProp, []);
                var v26476 = TypeScript$$23.SymbolKind;
                var v26036 = v26476.Variable;
                var v25206 = v26035 == v26036;
                if(v25206) {
                  var v26680 = mProp.variable;
                  var v26477 = v26680.typeLink;
                  var v26037 = v26477.type;
                  var v26478 = this.typeFlow;
                  var v26038 = v26478.iargumentsInterfaceType;
                  v25206 = v26037 == v26038
                }
                v23469 = v25206
              }
              v19908 = v23469
            }
            v14392 = v19908
          }
          var v4930 = v14392;
          if(v4930) {
            iMProp = iMProp + 1;
            var v14393 = mPropKeys.length;
            v4953 = iMProp < v14393;
            continue
          }
          var v4934 = JAMScript.call(mProp.isInferenceSymbol, mProp, []);
          if(v4934) {
            inferenceSymbol = mProp;
            var v14394 = inferenceSymbol.typeCheckStatus;
            var v19909 = TypeScript$$23.TypeCheckStatus;
            var v14395 = v19909.NotStarted;
            var v4933 = v14394 == v14395;
            if(v4933) {
              var v4931 = this.typeFlow;
              var v4932 = mProp.declAST;
              JAMScript.call(v4931.typeCheck, v4931, [v4932])
            }
          }
          mPropType = JAMScript.call(mProp.getType, mProp, []);
          var v4945 = !nProp;
          if(v4945) {
            var v14396 = this.typeFlow;
            var v4937 = v14396.objectInterfaceType;
            if(v4937) {
              var v19910 = this.typeFlow;
              var v14397 = v19910.objectInterfaceType;
              var v4935 = v14397.memberScope;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v4936 = mPropKeys[iMProp]
              }
              nProp = JAMScript.call(v4935.find, v4935, [v4936, false, false])
            }
            var v4944 = !nProp;
            if(v4944) {
              var v19911 = this.typeFlow;
              var v14398 = v19911.functionInterfaceType;
              if(v14398) {
                var v19912 = mPropType.call;
                var v23470 = !v19912;
                if(v23470) {
                  v19912 = mPropType.construct
                }
                v14398 = v19912
              }
              var v4940 = v14398;
              if(v4940) {
                var v19913 = this.typeFlow;
                var v14399 = v19913.functionInterfaceType;
                var v4938 = v14399.memberScope;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v4939 = mPropKeys[iMProp]
                }
                nProp = JAMScript.call(v4938.find, v4938, [v4939, false, false])
              }
              var v4943 = !nProp;
              if(v4943) {
                var v19914 = mProp.flags;
                var v23471 = TypeScript$$23.SymbolFlags;
                var v19915 = v23471.Optional;
                var v14400 = v19914 & v19915;
                var v4942 = !v14400;
                if(v4942) {
                  comparisonCache[comboId$$1] = undefined;
                  if(comparisonInfo$$9) {
                    var v14401 = comparisonInfo$$9;
                    var v19916 = comparisonInfo$$9.flags;
                    var v23472 = TypeScript$$23.TypeRelationshipFlags;
                    var v19917 = v23472.RequiredPropertyIsMissing;
                    v14401.flags = v19916 | v19917;
                    var v26479 = JAMScript.call(source$$3.getTypeName, source$$3, []);
                    var v26039 = "Type '" + v26479;
                    var v25207 = v26039 + "' is missing property '";
                    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                      var v25208 = mPropKeys[iMProp]
                    }
                    var v23473 = v25207 + v25208;
                    var v19918 = v23473 + "' from type '";
                    var v19919 = JAMScript.call(target$$44.getTypeName, target$$44, []);
                    var v14402 = v19918 + v19919;
                    var v4941 = v14402 + "'";
                    JAMScript.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4941])
                  }
                  return false
                }else {
                  iMProp = iMProp + 1;
                  var v14403 = mPropKeys.length;
                  v4953 = iMProp < v14403;
                  continue
                }
              }
            }
          }
          var v4949 = JAMScript.call(nProp.isInferenceSymbol, nProp, []);
          if(v4949) {
            inferenceSymbol = nProp;
            var v14404 = inferenceSymbol.typeCheckStatus;
            var v19920 = TypeScript$$23.TypeCheckStatus;
            var v14405 = v19920.NotStarted;
            var v4948 = v14404 == v14405;
            if(v4948) {
              var v4946 = this.typeFlow;
              var v4947 = nProp.declAST;
              JAMScript.call(v4946.typeCheck, v4946, [v4947])
            }
          }
          nPropType = JAMScript.call(nProp.getType, nProp, []);
          var v14406 = mPropType;
          if(v14406) {
            var v19921 = nPropType;
            if(v19921) {
              var v26480 = nPropType.typeID;
              var v26040 = v26480 << 16;
              var v26041 = mPropType.typeID;
              var v25209 = v26040 | v26041;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v23474 = comparisonCache[v25209]
              }
              v19921 = v23474 != undefined
            }
            v14406 = v19921
          }
          var v4950 = v14406;
          if(v4950) {
            iMProp = iMProp + 1;
            var v14407 = mPropKeys.length;
            v4953 = iMProp < v14407;
            continue
          }
          var v14408 = JAMScript.call(this.sourceIsRelatableToTarget, this, [nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo$$9]);
          var v4952 = !v14408;
          if(v4952) {
            comparisonCache[comboId$$1] = undefined;
            if(comparisonInfo$$9) {
              var v14409 = comparisonInfo$$9;
              var v19922 = comparisonInfo$$9.flags;
              var v23475 = TypeScript$$23.TypeRelationshipFlags;
              var v19923 = v23475.IncompatiblePropertyTypes;
              v14409.flags = v19922 | v19923;
              var v26481 = mProp.name;
              var v26042 = "Types of property '" + v26481;
              var v25210 = v26042 + "' of types '";
              var v25211 = JAMScript.call(source$$3.getTypeName, source$$3, []);
              var v23476 = v25210 + v25211;
              var v19924 = v23476 + "' and '";
              var v19925 = JAMScript.call(target$$44.getTypeName, target$$44, []);
              var v14410 = v19924 + v19925;
              var v4951 = v14410 + "' are incompatible";
              JAMScript.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4951])
            }
            return false
          }
          iMProp = iMProp + 1;
          var v14411 = mPropKeys.length;
          v4953 = iMProp < v14411
        }
      }
      var v14412 = source$$3.call;
      var v19926 = !v14412;
      if(v19926) {
        v14412 = target$$44.call
      }
      var v4961 = v14412;
      if(v4961) {
        var v19927 = source$$3.call;
        var v19928 = target$$44.call;
        var v14413 = JAMScript.call(this.signatureGroupIsRelatableToTarget, this, [v19927, v19928, assignableTo, comparisonCache, comparisonInfo$$9]);
        var v4960 = !v14413;
        if(v4960) {
          if(comparisonInfo$$9) {
            var v14414 = source$$3.call;
            if(v14414) {
              v14414 = target$$44.call
            }
            var v4959 = v14414;
            if(v4959) {
              var v25212 = JAMScript.call(source$$3.getTypeName, source$$3, []);
              var v23477 = "Call signatures of types '" + v25212;
              var v19929 = v23477 + "' and '";
              var v19930 = JAMScript.call(target$$44.getTypeName, target$$44, []);
              var v14415 = v19929 + v19930;
              var v4955 = v14415 + "' are incompatible";
              JAMScript.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4955])
            }else {
              var v4956;
              var v14416 = target$$44.call;
              if(v14416) {
                v4956 = JAMScript.call(target$$44.getTypeName, target$$44, [])
              }else {
                v4956 = JAMScript.call(source$$3.getTypeName, source$$3, [])
              }
              var hasSig = v4956;
              var v4957;
              var v19931 = target$$44.call;
              var v14417 = !v19931;
              if(v14417) {
                v4957 = JAMScript.call(target$$44.getTypeName, target$$44, [])
              }else {
                v4957 = JAMScript.call(source$$3.getTypeName, source$$3, [])
              }
              var lacksSig = v4957;
              var v23478 = "Type '" + hasSig;
              var v19932 = v23478 + "' requires a call signature, but Type '";
              var v14418 = v19932 + lacksSig;
              var v4958 = v14418 + "' lacks one";
              JAMScript.call(comparisonInfo$$9.setMessage, comparisonInfo$$9, [v4958])
            }
            var v14419 = comparisonInfo$$9;
            var v19933 = comparisonInfo$$9.flags;
            var v23479 = TypeScript$$23.TypeRelationshipFlags;
            var v19934 = v23479.IncompatibleSignatures;
            v14419.flags = v19933 | v19934
          }
          comparisonCache[comboId$$1] = undefined;
          return false
        }
      }
      var v14420 = source$$3.construct;
      var v19935 = !v14420;
      if(v19935) {
        v14420 = target$$44.construct
      }
      var v4968 = v14420;
      if(v4968) {
        var v19936 = source$$3.construct;
        var v19937 = target$$44.construct;
        var v14421 = JAMScript.call(this.signatureGroupIsRelatableToTarget, this, [v19936, v19937, assignableTo, comparisonCache, comparisonInfo$$9]);
        var v4967 = !v14421;
        if(v4967) {
          if(comparisonInfo$$9) {
            var v14422 = source$$3.construct;
            if(v14422) {
              v14422 = target$$44.construct
            }
            var v4966 = v14422;
            if(v4966) {
              var v25213 = JAMScript.call(source$$3.getTypeName, source$$3, []);
              var v23480 = "Construct signatures of types '" + v25213;
              var v19938 = v23480 + "' and '";
              var v19939 = JAMScript.call(target$$44.getTypeName, target$$44, []);
              var v14423 = v19938 + v19939;
              var v4962 = v14423 + "' are incompatible";
              JAMScript.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4962])
            }else {
              var v4963;
              var v14424 = target$$44.construct;
              if(v14424) {
                v4963 = JAMScript.call(target$$44.getTypeName, target$$44, [])
              }else {
                v4963 = JAMScript.call(source$$3.getTypeName, source$$3, [])
              }
              hasSig = v4963;
              var v4964;
              var v19940 = target$$44.construct;
              var v14425 = !v19940;
              if(v14425) {
                v4964 = JAMScript.call(target$$44.getTypeName, target$$44, [])
              }else {
                v4964 = JAMScript.call(source$$3.getTypeName, source$$3, [])
              }
              lacksSig = v4964;
              var v23481 = "Type '" + hasSig;
              var v19941 = v23481 + "' requires a construct signature, but Type '";
              var v14426 = v19941 + lacksSig;
              var v4965 = v14426 + "' lacks one";
              JAMScript.call(comparisonInfo$$9.setMessage, comparisonInfo$$9, [v4965])
            }
            var v14427 = comparisonInfo$$9;
            var v19942 = comparisonInfo$$9.flags;
            var v23482 = TypeScript$$23.TypeRelationshipFlags;
            var v19943 = v23482.IncompatibleSignatures;
            v14427.flags = v19942 | v19943
          }
          comparisonCache[comboId$$1] = undefined;
          return false
        }
      }
      var v4973 = target$$44.index;
      if(v4973) {
        var v4969;
        var v23483 = target$$44.index;
        var v19944 = !v23483;
        if(v19944) {
          var v23484 = this.typeFlow;
          v19944 = v23484.objectInterfaceType
        }
        var v14429 = v19944;
        if(v14429) {
          var v19945 = this.typeFlow;
          var v14428 = v19945.objectInterfaceType;
          v4969 = v14428.index
        }else {
          v4969 = target$$44.index
        }
        var targetIndex = v4969;
        var v4970;
        var v23485 = source$$3.index;
        var v19946 = !v23485;
        if(v19946) {
          var v23486 = this.typeFlow;
          v19946 = v23486.objectInterfaceType
        }
        var v14431 = v19946;
        if(v14431) {
          var v19947 = this.typeFlow;
          var v14430 = v19947.objectInterfaceType;
          v4970 = v14430.index
        }else {
          v4970 = source$$3.index
        }
        var sourceIndex = v4970;
        var v14432 = JAMScript.call(this.signatureGroupIsRelatableToTarget, this, [sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo$$9]);
        var v4972 = !v14432;
        if(v4972) {
          if(comparisonInfo$$9) {
            var v25214 = JAMScript.call(source$$3.getTypeName, source$$3, []);
            var v23487 = "Index signatures of types '" + v25214;
            var v19948 = v23487 + "' and '";
            var v19949 = JAMScript.call(target$$44.getTypeName, target$$44, []);
            var v14433 = v19948 + v19949;
            var v4971 = v14433 + "' are incompatible";
            JAMScript.call(comparisonInfo$$9.addMessageToFront, comparisonInfo$$9, [v4971]);
            var v14434 = comparisonInfo$$9;
            var v19950 = comparisonInfo$$9.flags;
            var v23488 = TypeScript$$23.TypeRelationshipFlags;
            var v19951 = v23488.IncompatibleSignatures;
            v14434.flags = v19950 | v19951
          }
          comparisonCache[comboId$$1] = undefined;
          return false
        }
      }
      comparisonCache[comboId$$1] = true;
      return true
    }
    function v959(s1$$2, s2$$2, comparisonInfo$$8) {
      var v4974 = this.assignableCache;
      return JAMScript.call(this.signatureIsRelatableToTarget, this, [s1$$2, s2$$2, true, v4974, comparisonInfo$$8])
    }
    function v958(sg1$$2, sg2$$2, comparisonInfo$$7) {
      var v4975 = this.assignableCache;
      return JAMScript.call(this.signatureGroupIsRelatableToTarget, this, [sg1$$2, sg2$$2, true, v4975, comparisonInfo$$7])
    }
    function v957(source$$2, target$$43, comparisonInfo$$6) {
      var v4976 = this.assignableCache;
      return JAMScript.call(this.sourceIsRelatableToTarget, this, [source$$2, target$$43, true, v4976, comparisonInfo$$6])
    }
    function v956(s1$$1, s2$$1, comparisonInfo$$5) {
      var v4977 = this.subtypeCache;
      return JAMScript.call(this.signatureIsRelatableToTarget, this, [s1$$1, s2$$1, false, v4977, comparisonInfo$$5])
    }
    function v955(sg1$$1, sg2$$1, comparisonInfo$$4) {
      var v4978 = this.subtypeCache;
      return JAMScript.call(this.signatureGroupIsRelatableToTarget, this, [sg1$$1, sg2$$1, false, v4978, comparisonInfo$$4])
    }
    function v954(source$$1, target$$42, comparisonInfo$$3) {
      var v4979 = this.subtypeCache;
      return JAMScript.call(this.sourceIsRelatableToTarget, this, [source$$1, target$$42, false, v4979, comparisonInfo$$3])
    }
    function v953(s1, s2) {
      var v14435 = s1.hasVariableArgList;
      var v14436 = s2.hasVariableArgList;
      var v4980 = v14435 != v14436;
      if(v4980) {
        return false
      }
      var v14437 = s1.nonOptionalParameterCount;
      var v14438 = s2.nonOptionalParameterCount;
      var v4981 = v14437 != v14438;
      if(v4981) {
        return false
      }
      var v19952 = s1.parameters;
      var v14439 = v19952.length;
      var v19953 = s2.parameters;
      var v14440 = v19953.length;
      var v4982 = v14439 != v14440;
      if(v4982) {
        return false
      }
      var v23489 = s1.returnType;
      var v19954 = v23489.type;
      var v23490 = s2.returnType;
      var v19955 = v23490.type;
      var v14441 = JAMScript.call(this.typesAreIdentical, this, [v19954, v19955]);
      var v4983 = !v14441;
      if(v4983) {
        return false
      }
      var iParam = 0;
      var v19956 = s1.parameters;
      var v14442 = v19956.length;
      var v4985 = iParam < v14442;
      for(;v4985;) {
        var v26482 = s1.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v26043 = v26482[iParam]
        }
        var v25215 = v26043.parameter;
        var v23491 = v25215.typeLink;
        var v19957 = v23491.type;
        var v26483 = s2.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v26044 = v26483[iParam]
        }
        var v25216 = v26044.parameter;
        var v23492 = v25216.typeLink;
        var v19958 = v23492.type;
        var v14443 = JAMScript.call(this.typesAreIdentical, this, [v19957, v19958]);
        var v4984 = !v14443;
        if(v4984) {
          return false
        }
        iParam = iParam + 1;
        var v19959 = s1.parameters;
        var v14444 = v19959.length;
        v4985 = iParam < v14444
      }
      return true
    }
    function v952(sg1, sg2) {
      var v4986 = sg1 == sg2;
      if(v4986) {
        return true
      }
      var v14445 = !sg1;
      var v19960 = !v14445;
      if(v19960) {
        v14445 = !sg2
      }
      var v4987 = v14445;
      if(v4987) {
        return false
      }
      var v19961 = sg1.signatures;
      var v14446 = v19961.length;
      var v19962 = sg2.signatures;
      var v14447 = v19962.length;
      var v4988 = v14446 != v14447;
      if(v4988) {
        return false
      }
      var sig1 = null;
      var sig2 = null;
      var sigsMatch = false;
      var iSig1 = 0;
      var v19963 = sg1.signatures;
      var v14448 = v19963.length;
      var v4993 = iSig1 < v14448;
      for(;v4993;) {
        var v4989 = sg1.signatures;
        sig1 = v4989[iSig1];
        var iSig2 = 0;
        var v19964 = sg2.signatures;
        var v14449 = v19964.length;
        var v4992 = iSig2 < v14449;
        for(;v4992;) {
          var v4990 = sg2.signatures;
          sig2 = v4990[iSig2];
          var v4991 = JAMScript.call(this.signaturesAreIdentical, this, [sig1, sig2]);
          if(v4991) {
            sigsMatch = true;
            break
          }
          iSig2 = iSig2 + 1;
          var v19965 = sg2.signatures;
          var v14450 = v19965.length;
          v4992 = iSig2 < v14450
        }
        if(sigsMatch) {
          sigsMatch = false;
          iSig1 = iSig1 + 1;
          var v19966 = sg1.signatures;
          var v14451 = v19966.length;
          v4993 = iSig1 < v14451;
          continue
        }
        return false
      }
      return true
    }
    function v951(t1$$1, t2$$1) {
      var v4994 = t1$$1 == t2$$1;
      if(v4994) {
        return true
      }
      var v14452 = !t1$$1;
      var v19967 = !v14452;
      if(v19967) {
        v14452 = !t2$$1
      }
      var v4995 = v14452;
      if(v4995) {
        return false
      }
      var v14453 = JAMScript.call(t1$$1.isClass, t1$$1, []);
      var v19968 = !v14453;
      if(v19968) {
        v14453 = JAMScript.call(t1$$1.isClassInstance, t1$$1, [])
      }
      var v4996 = v14453;
      if(v4996) {
        return false
      }
      var v14454 = t2$$1.typeID;
      var v4997 = v14454 << 16;
      var v4998 = t1$$1.typeID;
      var comboId = v4997 | v4998;
      var v14455 = this.identicalCache;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v4999 = v14455[comboId]
      }
      if(v4999) {
        return true
      }
      var v19969 = t1$$1.typeFlags;
      var v23493 = TypeScript$$23.TypeFlags;
      var v19970 = v23493.IsEnum;
      var v14456 = v19969 & v19970;
      var v19973 = !v14456;
      if(v19973) {
        var v19971 = t2$$1.typeFlags;
        var v23494 = TypeScript$$23.TypeFlags;
        var v19972 = v23494.IsEnum;
        v14456 = v19971 & v19972
      }
      var v5000 = v14456;
      if(v5000) {
        return false
      }
      var v14457 = JAMScript.call(t1$$1.isArray, t1$$1, []);
      var v19974 = !v14457;
      if(v19974) {
        v14457 = JAMScript.call(t2$$1.isArray, t2$$1, [])
      }
      var v5007 = v14457;
      if(v5007) {
        var v19975 = JAMScript.call(t1$$1.isArray, t1$$1, []);
        if(v19975) {
          v19975 = JAMScript.call(t2$$1.isArray, t2$$1, [])
        }
        var v14458 = v19975;
        var v5001 = !v14458;
        if(v5001) {
          return false
        }
        var v5002 = this.identicalCache;
        v5002[comboId] = false;
        var v5003 = t1$$1.elementType;
        var v5004 = t2$$1.elementType;
        var ret = JAMScript.call(this.typesAreIdentical, this, [v5003, v5004]);
        if(ret) {
          var v5005 = this.subtypeCache;
          v5005[comboId] = true
        }else {
          var v5006 = this.subtypeCache;
          v5006[comboId] = undefined
        }
        return ret
      }
      var v14459 = t1$$1.primitiveTypeClass;
      var v14460 = t2$$1.primitiveTypeClass;
      var v5008 = v14459 != v14460;
      if(v5008) {
        return false
      }
      var v5009 = this.identicalCache;
      v5009[comboId] = false;
      var v14461 = t1$$1.memberScope;
      if(v14461) {
        v14461 = t2$$1.memberScope
      }
      var v5028 = v14461;
      if(v5028) {
        var v14462 = t1$$1.memberScope;
        var v5010 = JAMScript.call(v14462.getAllValueSymbolNames, v14462, [true]);
        var t1MemberKeys = v5010.sort();
        var v14463 = t2$$1.memberScope;
        var v5011 = JAMScript.call(v14463.getAllValueSymbolNames, v14463, [true]);
        var t2MemberKeys = v5011.sort();
        var v14464 = t1MemberKeys.length;
        var v14465 = t2MemberKeys.length;
        var v5013 = v14464 != v14465;
        if(v5013) {
          var v5012 = this.identicalCache;
          v5012[comboId] = undefined;
          return false
        }
        var t1MemberSymbol = null;
        var t2MemberSymbol = null;
        var t1MemberType = null;
        var t2MemberType = null;
        var iMember$$1 = 0;
        var v14466 = t1MemberKeys.length;
        var v5025 = iMember$$1 < v14466;
        for(;v5025;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v14467 = t1MemberKeys[iMember$$1]
          }
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v14468 = t2MemberKeys[iMember$$1]
          }
          var v5015 = v14467 != v14468;
          if(v5015) {
            var v5014 = this.identicalCache;
            v5014[comboId] = undefined;
            return false
          }
          var v5016 = t1$$1.memberScope;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v5017 = t1MemberKeys[iMember$$1]
          }
          t1MemberSymbol = JAMScript.call(v5016.find, v5016, [v5017, false, false]);
          var v5018 = t2$$1.memberScope;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v5019 = t2MemberKeys[iMember$$1]
          }
          t2MemberSymbol = JAMScript.call(v5018.find, v5018, [v5019, false, false]);
          var v19976 = t1MemberSymbol.flags;
          var v23495 = TypeScript$$23.SymbolFlags;
          var v19977 = v23495.Optional;
          var v14469 = v19976 & v19977;
          var v19978 = t2MemberSymbol.flags;
          var v23496 = TypeScript$$23.SymbolFlags;
          var v19979 = v23496.Optional;
          var v14470 = v19978 & v19979;
          var v5021 = v14469 != v14470;
          if(v5021) {
            var v5020 = this.identicalCache;
            v5020[comboId] = undefined;
            return false
          }
          t1MemberType = JAMScript.call(t1MemberSymbol.getType, t1MemberSymbol, []);
          t2MemberType = JAMScript.call(t2MemberSymbol.getType, t2MemberSymbol, []);
          var v14471 = t1MemberType;
          if(v14471) {
            var v19980 = t2MemberType;
            if(v19980) {
              var v25217 = this.identicalCache;
              var v26484 = t2MemberType.typeID;
              var v26045 = v26484 << 16;
              var v26046 = t1MemberType.typeID;
              var v25218 = v26045 | v26046;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v23497 = v25217[v25218]
              }
              v19980 = v23497 != undefined
            }
            v14471 = v19980
          }
          var v5022 = v14471;
          if(v5022) {
            iMember$$1 = iMember$$1 + 1;
            var v14472 = t1MemberKeys.length;
            v5025 = iMember$$1 < v14472;
            continue
          }
          var v14473 = JAMScript.call(this.typesAreIdentical, this, [t1MemberType, t2MemberType]);
          var v5024 = !v14473;
          if(v5024) {
            var v5023 = this.identicalCache;
            v5023[comboId] = undefined;
            return false
          }
          iMember$$1 = iMember$$1 + 1;
          var v14474 = t1MemberKeys.length;
          v5025 = iMember$$1 < v14474
        }
      }else {
        var v14475 = t1$$1.memberScope;
        var v19981 = !v14475;
        if(v19981) {
          v14475 = t2$$1.memberScope
        }
        var v5027 = v14475;
        if(v5027) {
          var v5026 = this.identicalCache;
          v5026[comboId] = undefined;
          return false
        }
      }
      var v19982 = t1$$1.call;
      var v19983 = t2$$1.call;
      var v14476 = JAMScript.call(this.signatureGroupsAreIdentical, this, [v19982, v19983]);
      var v5030 = !v14476;
      if(v5030) {
        var v5029 = this.identicalCache;
        v5029[comboId] = undefined;
        return false
      }
      var v19984 = t1$$1.construct;
      var v19985 = t2$$1.construct;
      var v14477 = JAMScript.call(this.signatureGroupsAreIdentical, this, [v19984, v19985]);
      var v5032 = !v14477;
      if(v5032) {
        var v5031 = this.identicalCache;
        v5031[comboId] = undefined;
        return false
      }
      var v19986 = t1$$1.index;
      var v19987 = t2$$1.index;
      var v14478 = JAMScript.call(this.signatureGroupsAreIdentical, this, [v19986, v19987]);
      var v5034 = !v14478;
      if(v5034) {
        var v5033 = this.identicalCache;
        v5033[comboId] = undefined;
        return false
      }
      var v5035 = this.identicalCache;
      v5035[comboId] = true;
      return true
    }
    function v950(initialType, targetType$$4, collection$$1, acceptVoid, comparisonInfo$$2) {
      var i$$82 = 0;
      var len$$28 = JAMScript.call(collection$$1.getLength, collection$$1, []);
      var nlastChecked = 0;
      var bestCommonType = initialType;
      if(targetType$$4) {
        var v5036;
        if(bestCommonType) {
          v5036 = JAMScript.call(bestCommonType.mergeOrdered, bestCommonType, [targetType$$4, this, acceptVoid])
        }else {
          v5036 = targetType$$4
        }
        bestCommonType = v5036
      }
      var convergenceType = bestCommonType;
      var v5043 = nlastChecked < len$$28;
      for(;v5043;) {
        i$$82 = 0;
        var v5040 = i$$82 < len$$28;
        for(;v5040;) {
          var v5037 = i$$82 == nlastChecked;
          if(v5037) {
            i$$82 = i$$82 + 1;
            v5040 = i$$82 < len$$28;
            continue
          }
          var v14479 = convergenceType;
          if(v14479) {
            var v19988 = JAMScript.call(collection$$1.getTypeAtIndex, collection$$1, [i$$82]);
            v14479 = bestCommonType = JAMScript.call(convergenceType.mergeOrdered, convergenceType, [v19988, this, acceptVoid, comparisonInfo$$2])
          }
          var v5038 = v14479;
          if(v5038) {
            convergenceType = bestCommonType
          }
          var v19989 = this.anyType;
          var v14480 = bestCommonType == v19989;
          var v19990 = !v14480;
          if(v19990) {
            v14480 = bestCommonType == null
          }
          var v5039 = v14480;
          if(v5039) {
            break
          }else {
            if(targetType$$4) {
              JAMScript.call(collection$$1.setTypeAtIndex, collection$$1, [i$$82, targetType$$4])
            }
          }
          i$$82 = i$$82 + 1;
          v5040 = i$$82 < len$$28
        }
        var v5041 = convergenceType && bestCommonType;
        if(v5041) {
          break
        }
        nlastChecked = nlastChecked + 1;
        var v5042 = nlastChecked < len$$28;
        if(v5042) {
          convergenceType = JAMScript.call(collection$$1.getTypeAtIndex, collection$$1, [nlastChecked])
        }
        v5043 = nlastChecked < len$$28
      }
      var v5044;
      if(acceptVoid) {
        v5044 = bestCommonType
      }else {
        var v14481;
        var v23498 = this.voidType;
        var v19991 = bestCommonType == v23498;
        if(v19991) {
          v14481 = null
        }else {
          v14481 = bestCommonType
        }
        v5044 = v14481
      }
      return v5044
    }
    function v949(t$$1) {
      var v14482 = this.undefinedType;
      var v5045 = t$$1 == v14482;
      var v14484 = !v5045;
      if(v14484) {
        var v14483 = this.nullType;
        v5045 = t$$1 == v14483
      }
      return v5045
    }
    function v948(t) {
      var v19992 = this.undefinedType;
      var v14485 = t == v19992;
      var v19994 = !v14485;
      if(v19994) {
        var v19993 = this.nullType;
        v14485 = t == v19993
      }
      var v5046 = v14485;
      if(v5046) {
        return this.anyType
      }
      return t
    }
    function v947(targetType$$3, objectLit$$1) {
      var v19995 = this.typeFlow;
      var v14486 = v19995.objectInterfaceType;
      var v5047 = targetType$$3 == v14486;
      if(v5047) {
        return true
      }
      var memberDecls = objectLit$$1.operand;
      var v19996 = memberDecls;
      if(v19996) {
        v19996 = targetType$$3.memberScope
      }
      var v14487 = v19996;
      var v5048 = !v14487;
      if(v5048) {
        return false
      }
      var id$$19 = null;
      var targetMember = null;
      var text$$23 = "";
      var foundSyms = {};
      var i$$81 = 0;
      var v19997 = memberDecls.members;
      var v14488 = v19997.length;
      var v5055 = i$$81 < v14488;
      for(;v5055;) {
        var v14489 = memberDecls.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v5049 = v14489[i$$81]
        }
        id$$19 = v5049.operand1;
        var v14490 = id$$19.nodeType;
        var v19998 = TypeScript$$23.NodeType;
        var v14491 = v19998.Name;
        var v5052 = v14490 == v14491;
        if(v5052) {
          text$$23 = id$$19.text
        }else {
          var v14492 = id$$19.nodeType;
          var v19999 = TypeScript$$23.NodeType;
          var v14493 = v19999.QString;
          var v5051 = v14492 == v14493;
          if(v5051) {
            var idText$$3 = id$$19.text;
            var v14494 = idText$$3.length;
            var v5050 = v14494 - 1;
            text$$23 = JAMScript.call(idText$$3.substring, idText$$3, [1, v5050])
          }else {
            return false
          }
        }
        var v5053 = targetType$$3.memberScope;
        targetMember = JAMScript.call(v5053.find, v5053, [text$$23, true, false]);
        var v5054 = !targetMember;
        if(v5054) {
          return false
        }
        JAMScript.set(foundSyms, text$$23, true);
        i$$81 = i$$81 + 1;
        var v20000 = memberDecls.members;
        var v14495 = v20000.length;
        v5055 = i$$81 < v14495
      }
      var v5056 = targetType$$3.memberScope;
      var targetMembers = JAMScript.call(v5056.getAllValueSymbolNames, v5056, [true]);
      i$$81 = 0;
      var v14496 = targetMembers.length;
      var v5059 = i$$81 < v14496;
      for(;v5059;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var memberName$$2 = targetMembers[i$$81]
        }
        var v5057 = targetType$$3.memberScope;
        var memberSym = JAMScript.call(v5057.find, v5057, [memberName$$2, true, false]);
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v23499 = targetMembers[i$$81]
        }
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v20001 = foundSyms[v23499]
        }
        var v14497 = !v20001;
        if(v14497) {
          var v23500 = memberSym.flags;
          var v25219 = TypeScript$$23.SymbolFlags;
          var v23501 = v25219.Optional;
          var v20002 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v23500, v23501]);
          v14497 = !v20002
        }
        var v5058 = v14497;
        if(v5058) {
          return false
        }
        i$$81 = i$$81 + 1;
        var v14498 = targetMembers.length;
        v5059 = i$$81 < v14498
      }
      return true
    }
    function v946(candidateType, funcDecl$$21, beStringent) {
      var v14499 = funcDecl$$21.isParenthesized;
      var v20004 = !v14499;
      if(v20004) {
        var v20003 = JAMScript.call(funcDecl$$21.isMethod, funcDecl$$21, []);
        var v23503 = !v20003;
        if(v23503) {
          var v25220 = beStringent;
          if(v25220) {
            v25220 = funcDecl$$21.returnTypeAnnotation
          }
          var v23502 = v25220;
          var v25221 = !v23502;
          if(v25221) {
            v23502 = funcDecl$$21.isInlineCallLiteral
          }
          v20003 = v23502
        }
        v14499 = v20003
      }
      var v5060 = v14499;
      if(v5060) {
        return false
      }
      var v5061 = beStringent;
      var v14501 = !v5061;
      if(v14501) {
        var v20005 = this.typeFlow;
        var v14500 = v20005.functionInterfaceType;
        v5061 = v14500 == candidateType
      }
      beStringent = v5061;
      var v5062 = !beStringent;
      if(v5062) {
        return true
      }
      var v14502 = funcDecl$$21.signature;
      var v5066 = !v14502;
      if(v5066) {
        var v20006 = this.typeFlow;
        var v14503 = v20006.scope;
        var v5063 = v14503.container;
        var v14504 = this.typeFlow;
        var v5064 = v14504.scope;
        JAMScript.call(this.createFunctionSignature, this, [funcDecl$$21, v5063, v5064, null, null]);
        var v5065 = this.typeFlow;
        JAMScript.call(v5065.typeCheck, v5065, [funcDecl$$21])
      }
      var signature$$5 = funcDecl$$21.signature;
      var v5067 = signature$$5.parameters;
      var paramLen$$2 = v5067.length;
      var i$$80 = 0;
      var v5070 = i$$80 < paramLen$$2;
      for(;v5070;) {
        var v5068 = signature$$5.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var param$$6 = v5068[i$$80]
        }
        var symbol$$13 = param$$6;
        var argDecl = symbol$$13.declAST;
        var v14505 = beStringent;
        if(v14505) {
          v14505 = argDecl.typeExpr
        }
        var v5069 = v14505;
        if(v5069) {
          return false
        }
        i$$80 = i$$80 + 1;
        v5070 = i$$80 < paramLen$$2
      }
      var v14506 = candidateType.construct;
      if(v14506) {
        v14506 = candidateType.call
      }
      var v5071 = v14506;
      if(v5071) {
        return false
      }
      var v5072;
      var v14507 = candidateType.construct;
      if(v14507) {
        v5072 = candidateType.construct
      }else {
        v5072 = candidateType.call
      }
      var candidateSigs = v5072;
      var v14508 = !candidateSigs;
      var v20008 = !v14508;
      if(v20008) {
        var v23504 = candidateSigs.signatures;
        var v20007 = v23504.length;
        v14508 = v20007 > 1
      }
      var v5073 = v14508;
      if(v5073) {
        return false
      }
      return true
    }
    function v945(signatures$$3, args$$13, comparisonInfo$$1) {
      var applicableSigs = [];
      var memberType = null;
      var miss = false;
      var cxt = null;
      var hadProvisionalErrors = false;
      var i$$79 = 0;
      var v14509 = signatures$$3.length;
      var v5101 = i$$79 < v14509;
      for(;v5101;) {
        miss = false;
        var j$$10 = 0;
        var v20009 = args$$13.members;
        var v14510 = v20009.length;
        var v5098 = j$$10 < v14510;
        for(;v5098;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23505 = signatures$$3[i$$79]
          }
          var v20010 = v23505.parameters;
          var v14511 = v20010.length;
          var v5074 = j$$10 >= v14511;
          if(v5074) {
            j$$10 = j$$10 + 1;
            var v20011 = args$$13.members;
            var v14512 = v20011.length;
            v5098 = j$$10 < v14512;
            continue
          }
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v20012 = signatures$$3[i$$79]
          }
          var v14513 = v20012.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v5075 = v14513[j$$10]
          }
          memberType = JAMScript.call(v5075.getType, v5075, []);
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23506 = signatures$$3[i$$79]
          }
          var v20013 = v23506.declAST;
          var v14514 = v20013.variableArgList;
          if(v14514) {
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v26047 = signatures$$3[i$$79]
            }
            var v25222 = v26047.nonOptionalParameterCount;
            var v23507 = v25222 - 1;
            var v20014 = j$$10 >= v23507;
            if(v20014) {
              v20014 = JAMScript.call(memberType.isArray, memberType, [])
            }
            v14514 = v20014
          }
          var v5076 = v14514;
          if(v5076) {
            memberType = memberType.elementType
          }
          var v14515 = this.anyType;
          var v5097 = memberType == v14515;
          if(v5097) {
          }else {
            var v23508 = args$$13.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v20015 = v23508[j$$10]
            }
            var v14516 = v20015.nodeType;
            var v20016 = TypeScript$$23.NodeType;
            var v14517 = v20016.FuncDecl;
            var v5096 = v14516 == v14517;
            if(v5096) {
              var v20017 = this.typeFlow;
              var v14518 = v20017.functionInterfaceType;
              if(v14518) {
                var v23509 = this.typeFlow;
                var v20018 = v23509.functionInterfaceType;
                v14518 = memberType == v20018
              }
              var v5077 = v14518;
              if(v5077) {
                j$$10 = j$$10 + 1;
                var v20019 = args$$13.members;
                var v14519 = v20019.length;
                v5098 = j$$10 < v14519;
                continue
              }
              var v23510 = args$$13.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v20020 = v23510[j$$10]
              }
              var v14520 = JAMScript.call(this.canContextuallyTypeFunction, this, [memberType, v20020, true]);
              var v5085 = !v14520;
              if(v5085) {
                var v20021 = args$$13.members;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v14521 = v20021[j$$10]
                }
                var v5081 = JAMScript.call(this.canContextuallyTypeFunction, this, [memberType, v14521, false]);
                if(v5081) {
                  var v5078 = this.typeFlow;
                  var v14522 = args$$13.members;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v5079 = v14522[j$$10]
                  }
                  JAMScript.call(v5078.typeCheck, v5078, [v5079]);
                  var v25223 = args$$13.members;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v23511 = v25223[j$$10]
                  }
                  var v20022 = v23511.type;
                  var v14523 = JAMScript.call(this.sourceIsAssignableToTarget, this, [v20022, memberType, comparisonInfo$$1]);
                  var v5080 = !v14523;
                  if(v5080) {
                    break
                  }
                }else {
                  break
                }
              }else {
                var v14524 = args$$13.members;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v5082 = v14524[j$$10]
                }
                JAMScript.call(this.typeCheckWithContextualType, this, [memberType, true, true, v5082]);
                JAMScript.call(this.cleanStartedPTO, this, []);
                hadProvisionalErrors = JAMScript.call(this.hadProvisionalErrors, this, []);
                var v25224 = args$$13.members;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v23512 = v25224[j$$10]
                }
                var v20023 = v23512.type;
                var v14525 = JAMScript.call(this.sourceIsAssignableToTarget, this, [v20023, memberType, comparisonInfo$$1]);
                var v5084 = !v14525;
                if(v5084) {
                  if(comparisonInfo$$1) {
                    var v26485 = JAMScript.call(memberType.getTypeName, memberType, []);
                    var v26048 = "Could not apply type '" + v26485;
                    var v25225 = v26048 + "' to argument ";
                    var v25226 = j$$10 + 1;
                    var v23513 = v25225 + v25226;
                    var v20024 = v23513 + ", which is of type '";
                    var v26049 = args$$13.members;
                    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                      var v25227 = v26049[j$$10]
                    }
                    var v23514 = v25227.type;
                    var v20025 = JAMScript.call(v23514.getTypeName, v23514, []);
                    var v14526 = v20024 + v20025;
                    var v5083 = v14526 + "'";
                    JAMScript.call(comparisonInfo$$1.setMessage, comparisonInfo$$1, [v5083])
                  }
                  miss = true
                }
                JAMScript.call(this.resetProvisionalErrors, this, []);
                if(miss) {
                  break
                }
              }
            }else {
              var v23515 = args$$13.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v20026 = v23515[j$$10]
              }
              var v14527 = v20026.nodeType;
              var v20027 = TypeScript$$23.NodeType;
              var v14528 = v20027.ObjectLit;
              var v5095 = v14527 == v14528;
              if(v5095) {
                var v20028 = this.typeFlow;
                var v14529 = v20028.objectInterfaceType;
                if(v14529) {
                  var v23516 = this.typeFlow;
                  var v20029 = v23516.objectInterfaceType;
                  v14529 = memberType == v20029
                }
                var v5086 = v14529;
                if(v5086) {
                  j$$10 = j$$10 + 1;
                  var v20030 = args$$13.members;
                  var v14530 = v20030.length;
                  v5098 = j$$10 < v14530;
                  continue
                }
                var v14531 = args$$13.members;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v5087 = v14531[j$$10]
                }
                JAMScript.call(this.typeCheckWithContextualType, this, [memberType, true, true, v5087]);
                JAMScript.call(this.cleanStartedPTO, this, []);
                hadProvisionalErrors = JAMScript.call(this.hadProvisionalErrors, this, []);
                var v25228 = args$$13.members;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v23517 = v25228[j$$10]
                }
                var v20031 = v23517.type;
                var v14532 = JAMScript.call(this.sourceIsAssignableToTarget, this, [v20031, memberType, comparisonInfo$$1]);
                var v5089 = !v14532;
                if(v5089) {
                  if(comparisonInfo$$1) {
                    var v26486 = JAMScript.call(memberType.getTypeName, memberType, []);
                    var v26050 = "Could not apply type '" + v26486;
                    var v25229 = v26050 + "' to argument ";
                    var v25230 = j$$10 + 1;
                    var v23518 = v25229 + v25230;
                    var v20032 = v23518 + ", which is of type '";
                    var v26051 = args$$13.members;
                    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                      var v25231 = v26051[j$$10]
                    }
                    var v23519 = v25231.type;
                    var v20033 = JAMScript.call(v23519.getTypeName, v23519, []);
                    var v14533 = v20032 + v20033;
                    var v5088 = v14533 + "'";
                    JAMScript.call(comparisonInfo$$1.setMessage, comparisonInfo$$1, [v5088])
                  }
                  miss = true
                }
                JAMScript.call(this.resetProvisionalErrors, this, []);
                if(miss) {
                  break
                }
              }else {
                var v23520 = args$$13.members;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v20034 = v23520[j$$10]
                }
                var v14534 = v20034.nodeType;
                var v20035 = TypeScript$$23.NodeType;
                var v14535 = v20035.ArrayLit;
                var v5094 = v14534 == v14535;
                if(v5094) {
                  var v20036 = this.typeFlow;
                  var v14536 = v20036.arrayInterfaceType;
                  if(v14536) {
                    var v23521 = this.typeFlow;
                    var v20037 = v23521.arrayInterfaceType;
                    v14536 = memberType == v20037
                  }
                  var v5090 = v14536;
                  if(v5090) {
                    j$$10 = j$$10 + 1;
                    var v20038 = args$$13.members;
                    var v14537 = v20038.length;
                    v5098 = j$$10 < v14537;
                    continue
                  }
                  var v14538 = args$$13.members;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v5091 = v14538[j$$10]
                  }
                  JAMScript.call(this.typeCheckWithContextualType, this, [memberType, true, true, v5091]);
                  JAMScript.call(this.cleanStartedPTO, this, []);
                  hadProvisionalErrors = JAMScript.call(this.hadProvisionalErrors, this, []);
                  var v25232 = args$$13.members;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v23522 = v25232[j$$10]
                  }
                  var v20039 = v23522.type;
                  var v14539 = JAMScript.call(this.sourceIsAssignableToTarget, this, [v20039, memberType, comparisonInfo$$1]);
                  var v5093 = !v14539;
                  if(v5093) {
                    if(comparisonInfo$$1) {
                      var v26487 = JAMScript.call(memberType.getTypeName, memberType, []);
                      var v26052 = "Could not apply type '" + v26487;
                      var v25233 = v26052 + "' to argument ";
                      var v25234 = j$$10 + 1;
                      var v23523 = v25233 + v25234;
                      var v20040 = v23523 + ", which is of type '";
                      var v26053 = args$$13.members;
                      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                        var v25235 = v26053[j$$10]
                      }
                      var v23524 = v25235.type;
                      var v20041 = JAMScript.call(v23524.getTypeName, v23524, []);
                      var v14540 = v20040 + v20041;
                      var v5092 = v14540 + "'";
                      JAMScript.call(comparisonInfo$$1.setMessage, comparisonInfo$$1, [v5092])
                    }
                    break
                  }
                  JAMScript.call(this.resetProvisionalErrors, this, []);
                  if(miss) {
                    break
                  }
                }
              }
            }
          }
          j$$10 = j$$10 + 1;
          var v20042 = args$$13.members;
          var v14541 = v20042.length;
          v5098 = j$$10 < v14541
        }
        var v20043 = args$$13.members;
        var v14542 = v20043.length;
        var v5100 = j$$10 == v14542;
        if(v5100) {
          var v5099 = applicableSigs.length;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v14543 = signatures$$3[i$$79]
          }
          applicableSigs[v5099] = {signature:v14543, hadProvisionalErrors:hadProvisionalErrors}
        }
        hadProvisionalErrors = false;
        i$$79 = i$$79 + 1;
        var v14544 = signatures$$3.length;
        v5101 = i$$79 < v14544
      }
      return applicableSigs
    }
    function v944(signatures$$2, args$$12) {
      function v943(index$$51) {
        var v5102;
        if(index$$51) {
          var v20044 = Q.signature;
          var v14545 = v20044.returnType;
          v5102 = v14545.type
        }else {
          var v20045 = best.signature;
          var v14546 = v20045.returnType;
          v5102 = v14546.type
        }
        return v5102
      }
      function v942(index$$50, type$$43) {
        return
      }
      function v941() {
        return 2
      }
      var v14547 = signatures$$2.length;
      var v5104 = v14547 == 1;
      if(v5104) {
        var v14548 = signatures$$2[0];
        var v5103 = v14548.signature;
        return{sig:v5103, ambiguous:false}
      }
      var best = signatures$$2[0];
      var Q = null;
      var AType = null;
      var PType = null;
      var QType = null;
      var ambiguous = false;
      var qSig = 1;
      var v14549 = signatures$$2.length;
      var v5118 = qSig < v14549;
      for(;v5118;) {
        Q = signatures$$2[qSig];
        var i$$78 = 0;
        i$$78 = 0;
        var v14550 = args$$12;
        if(v14550) {
          var v23525 = args$$12.members;
          var v20046 = v23525.length;
          v14550 = i$$78 < v20046
        }
        var v5115 = v14550;
        for(;v5115;) {
          var v14551 = args$$12.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v5105 = v14551[i$$78]
          }
          AType = v5105.type;
          var v5106;
          var v25236 = best.signature;
          var v23526 = v25236.parameters;
          var v20047 = v23526.length;
          var v14554 = i$$78 < v20047;
          if(v14554) {
            var v23527 = best.signature;
            var v20048 = v23527.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v14552 = v20048[i$$78]
            }
            v5106 = JAMScript.call(v14552.getType, v14552, [])
          }else {
            var v25237 = best.signature;
            var v23528 = v25237.parameters;
            var v26488 = best.signature;
            var v26054 = v26488.parameters;
            var v25238 = v26054.length;
            var v23529 = v25238 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v20049 = v23528[v23529]
            }
            var v14553 = JAMScript.call(v20049.getType, v20049, []);
            v5106 = v14553.elementType
          }
          PType = v5106;
          var v5107;
          var v25239 = Q.signature;
          var v23530 = v25239.parameters;
          var v20050 = v23530.length;
          var v14557 = i$$78 < v20050;
          if(v14557) {
            var v23531 = Q.signature;
            var v20051 = v23531.parameters;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v14555 = v20051[i$$78]
            }
            v5107 = JAMScript.call(v14555.getType, v14555, [])
          }else {
            var v25240 = Q.signature;
            var v23532 = v25240.parameters;
            var v26489 = Q.signature;
            var v26055 = v26489.parameters;
            var v25241 = v26055.length;
            var v23533 = v25241 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v20052 = v23532[v23533]
            }
            var v14556 = JAMScript.call(v20052.getType, v20052, []);
            v5107 = v14556.elementType
          }
          QType = v5107;
          var v5114 = JAMScript.call(this.typesAreIdentical, this, [PType, QType]);
          if(v5114) {
          }else {
            var v5113 = JAMScript.call(this.typesAreIdentical, this, [AType, PType]);
            if(v5113) {
              break
            }else {
              var v5112 = JAMScript.call(this.typesAreIdentical, this, [AType, QType]);
              if(v5112) {
                best = Q;
                break
              }else {
                var v5111 = JAMScript.call(this.sourceIsSubtypeOfTarget, this, [PType, QType]);
                if(v5111) {
                  break
                }else {
                  var v5110 = JAMScript.call(this.sourceIsSubtypeOfTarget, this, [QType, PType]);
                  if(v5110) {
                    best = Q;
                    break
                  }else {
                    var v5109 = Q.hadProvisionalErrors;
                    if(v5109) {
                      break
                    }else {
                      var v5108 = best.hadProvisionalErrors;
                      if(v5108) {
                        best = Q;
                        break
                      }
                    }
                  }
                }
              }
            }
          }
          i$$78 = i$$78 + 1;
          var v14558 = args$$12;
          if(v14558) {
            var v23534 = args$$12.members;
            var v20053 = v23534.length;
            v14558 = i$$78 < v20053
          }
          v5115 = v14558
        }
        var v14559 = !args$$12;
        var v20055 = !v14559;
        if(v20055) {
          var v23535 = args$$12.members;
          var v20054 = v23535.length;
          v14559 = i$$78 == v20054
        }
        var v5117 = v14559;
        if(v5117) {
          var collection = {getLength:v941, setTypeAtIndex:v942, getTypeAtIndex:v943};
          var v20056 = best.signature;
          var v14560 = v20056.returnType;
          var v5116 = v14560.type;
          var bct = JAMScript.call(this.findBestCommonType, this, [v5116, null, collection, true]);
          ambiguous = !bct
        }else {
          ambiguous = false
        }
        qSig = qSig + 1;
        var v14561 = signatures$$2.length;
        v5118 = qSig < v14561
      }
      var v5119 = best.signature;
      return{sig:v5119, ambiguous:ambiguous}
    }
    function v940(typeLink$$2, scope$$28) {
      this.resolvingBases = true;
      JAMScript.call(this.resolveTypeLink, this, [scope$$28, typeLink$$2, true]);
      this.resolvingBases = false;
      var extendsType = null;
      var v14562 = typeLink$$2.type;
      var v5121 = JAMScript.call(v14562.isClass, v14562, []);
      if(v5121) {
        var v5120 = typeLink$$2.type;
        extendsType = v5120.instanceType
      }else {
        extendsType = typeLink$$2.type
      }
      return extendsType
    }
    function v939(scope$$27, typeLink$$1, supplyVar$$1) {
      var arrayCount$$1 = 0;
      var v14563 = typeLink$$1.type;
      var v5166 = v14563 == null;
      if(v5166) {
        var ast$$64 = typeLink$$1.ast;
        if(ast$$64) {
          var v14564 = typeLink$$1.type;
          var v5160 = v14564 == null;
          for(;v5160;) {
            var v5159 = ast$$64.nodeType;
            switch(v5159) {
              case TypeScript$$23.NodeType.Name:
                var identifier$$2 = ast$$64;
                var v5122 = identifier$$2.text;
                var symbol$$12 = JAMScript.call(scope$$27.find, scope$$27, [v5122, false, true]);
                var v5134 = symbol$$12 == null;
                if(v5134) {
                  typeLink$$1.type = this.anyType;
                  var v5123 = this.errorReporter;
                  var v5124 = identifier$$2.actualText;
                  JAMScript.call(v5123.unresolvedSymbol, v5123, [identifier$$2, v5124])
                }else {
                  var v5133 = JAMScript.call(symbol$$12.isType, symbol$$12, []);
                  if(v5133) {
                    var v14565 = JAMScript.call(symbol$$12.visible, symbol$$12, [scope$$27, this]);
                    var v5127 = !v14565;
                    if(v5127) {
                      var v5125 = this.errorReporter;
                      var v20057 = identifier$$2.actualText;
                      var v14566 = "The symbol '" + v20057;
                      var v5126 = v14566 + "' is not visible at this point";
                      JAMScript.call(v5125.simpleError, v5125, [ast$$64, v5126])
                    }
                    identifier$$2.sym = symbol$$12;
                    var v5128 = typeLink$$1;
                    var v27088 = JAMScript.call(symbol$$12.getType, symbol$$12, []);
                    v5128.type = v27088;
                    var v5131 = typeLink$$1.type;
                    if(v5131) {
                      var v14567 = typeLink$$1.type;
                      var v5130 = JAMScript.call(v14567.isClass, v14567, []);
                      if(v5130) {
                        var v5129 = typeLink$$1;
                        var v14568 = typeLink$$1.type;
                        v5129.type = v14568.instanceType
                      }
                    }else {
                      typeLink$$1.type = this.anyType
                    }
                  }else {
                    typeLink$$1.type = this.anyType;
                    var v5132 = this.errorReporter;
                    JAMScript.call(v5132.simpleError, v5132, [ast$$64, "Expected type"])
                  }
                }
                break;
              case TypeScript$$23.NodeType.Dot:
                var v5135 = typeLink$$1;
                var v27089 = JAMScript.call(this.resolveTypeMember, this, [scope$$27, ast$$64]);
                v5135.type = v27089;
                break;
              case TypeScript$$23.NodeType.TypeRef:
                var typeRef$$2 = ast$$64;
                arrayCount$$1 = typeRef$$2.arrayCount;
                ast$$64 = typeRef$$2.term;
                var v5136 = ast$$64 == null;
                if(v5136) {
                  typeLink$$1.type = this.anyType
                }
                break;
              case TypeScript$$23.NodeType.InterfaceDeclaration:
                var interfaceDecl$$3 = ast$$64;
                var v5137 = TypeScript$$23.Type;
                var interfaceType$$1 = JAMScript.new(v5137, []);
                var v5138 = TypeScript$$23.TypeSymbol;
                var v14569 = interfaceDecl$$3.name;
                var v5139 = v14569.text;
                var v5140 = ast$$64.minChar;
                var v14570 = ast$$64.limChar;
                var v14571 = ast$$64.minChar;
                var v5141 = v14570 - v14571;
                var v14572 = this.locationInfo;
                var v5142 = v14572.unitIndex;
                var interfaceSymbol = JAMScript.new(v5138, [v5139, v5140, v5141, v5142, interfaceType$$1]);
                interfaceType$$1.symbol = interfaceSymbol;
                var v5143 = TypeScript$$23.ScopedMembers;
                var v14573 = TypeScript$$23.DualStringHashTable;
                var v20058 = TypeScript$$23.StringHashTable;
                var v14574 = JAMScript.new(v20058, []);
                var v20059 = TypeScript$$23.StringHashTable;
                var v14575 = JAMScript.new(v20059, []);
                var v5144 = JAMScript.new(v14573, [v14574, v14575]);
                var v27090 = JAMScript.new(v5143, [v5144]);
                interfaceType$$1.members = v27090;
                var v5145 = interfaceType$$1;
                var v14576 = TypeScript$$23.SymbolTableScope;
                var v14577 = interfaceType$$1.members;
                var v27091 = JAMScript.new(v14576, [v14577, null, null, null, interfaceSymbol]);
                v5145.containedScope = v27091;
                var v5146 = interfaceType$$1.containedScope;
                v5146.container = interfaceSymbol;
                var v5147 = interfaceType$$1;
                v5147.memberScope = interfaceType$$1.containedScope;
                var memberList = interfaceDecl$$3.members;
                var props$$1 = memberList.members;
                var propsLen = props$$1.length;
                var j$$9 = 0;
                var v5157 = j$$9 < propsLen;
                for(;v5157;) {
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var propDecl = props$$1[j$$9]
                  }
                  var propSym = null;
                  var addMember = true;
                  var id$$18 = null;
                  var v14578 = propDecl.nodeType;
                  var v20060 = TypeScript$$23.NodeType;
                  var v14579 = v20060.FuncDecl;
                  var v5152 = v14578 == v14579;
                  if(v5152) {
                    var funcDecl$$20 = propDecl;
                    id$$18 = funcDecl$$20.name;
                    var v14580 = interfaceType$$1.members;
                    var v5148 = v14580.allMembers;
                    var v5149 = JAMScript.call(funcDecl$$20.getNameText, funcDecl$$20, []);
                    propSym = JAMScript.call(v5148.lookup, v5148, [v5149]);
                    addMember = propSym == null;
                    var v5150 = JAMScript.call(funcDecl$$20.isSpecialFn, funcDecl$$20, []);
                    if(v5150) {
                      addMember = false;
                      propSym = JAMScript.call(this.resolveFuncDecl, this, [funcDecl$$20, scope$$27, interfaceSymbol])
                    }else {
                      propSym = JAMScript.call(this.resolveFuncDecl, this, [funcDecl$$20, scope$$27, propSym])
                    }
                    funcDecl$$20.type = propSym.type
                  }else {
                    id$$18 = propDecl.id;
                    propSym = JAMScript.call(this.resolveVarDecl, this, [propDecl, scope$$27]);
                    var v5151 = JAMScript.call(id$$18.isMissing, id$$18, []);
                    addMember = !v5151
                  }
                  if(addMember) {
                    var v14581 = id$$18;
                    if(v14581) {
                      var v20061 = id$$18.flags;
                      var v23536 = TypeScript$$23.ASTFlags;
                      var v20062 = v23536.OptionalName;
                      v14581 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v20061, v20062])
                    }
                    var v5153 = v14581;
                    if(v5153) {
                      var v14582 = propSym;
                      var v20063 = propSym.flags;
                      var v23537 = TypeScript$$23.SymbolFlags;
                      var v20064 = v23537.Optional;
                      v14582.flags = v20063 | v20064
                    }
                    var v23538 = interfaceType$$1.members;
                    var v20065 = v23538.allMembers;
                    var v20066 = propSym.name;
                    var v14583 = JAMScript.call(v20065.add, v20065, [v20066, propSym]);
                    var v5156 = !v14583;
                    if(v5156) {
                      var v5154 = this.errorReporter;
                      var v5155 = propSym.name;
                      JAMScript.call(v5154.duplicateIdentifier, v5154, [ast$$64, v5155])
                    }
                  }
                  j$$9 = j$$9 + 1;
                  v5157 = j$$9 < propsLen
                }
                ast$$64.type = interfaceType$$1;
                typeLink$$1.type = interfaceType$$1;
                break;
              case TypeScript$$23.NodeType.FuncDecl:
                var tsym = JAMScript.call(this.resolveFuncDecl, this, [ast$$64, scope$$27, null]);
                typeLink$$1.type = tsym.type;
                break;
              default:
                typeLink$$1.type = this.anyType;
                var v5158 = this.errorReporter;
                JAMScript.call(v5158.simpleError, v5158, [ast$$64, "Expected type"])
            }
            var v14584 = typeLink$$1.type;
            v5160 = v14584 == null
          }
        }
        var count$$8 = arrayCount$$1;
        var v5162 = count$$8 > 0;
        for(;v5162;) {
          var v5161 = typeLink$$1;
          var v14585 = typeLink$$1.type;
          var v27092 = JAMScript.call(this.makeArrayType, this, [v14585]);
          v5161.type = v27092;
          count$$8 = count$$8 - 1;
          v5162 = count$$8 > 0
        }
        var v14586 = supplyVar$$1;
        if(v14586) {
          var v20067 = typeLink$$1.type;
          v14586 = v20067 == null
        }
        var v5163 = v14586;
        if(v5163) {
          typeLink$$1.type = this.anyType
        }
        var v5165 = typeLink$$1.ast;
        if(v5165) {
          var v5164 = typeLink$$1.ast;
          v5164.type = typeLink$$1.type
        }
      }
      return
    }
    function v938(varDecl$$11, scope$$26) {
      var v5167 = TypeScript$$23.ValueLocation;
      var field$$2 = JAMScript.new(v5167, []);
      var v5168 = TypeScript$$23.FieldSymbol;
      var v14587 = varDecl$$11.id;
      var v5169 = v14587.text;
      var v5170 = varDecl$$11.minChar;
      var v14588 = this.locationInfo;
      var v5171 = v14588.unitIndex;
      var v20068 = varDecl$$11.varFlags;
      var v23539 = TypeScript$$23.VarFlags;
      var v20069 = v23539.Readonly;
      var v14589 = v20068 & v20069;
      var v20070 = TypeScript$$23.VarFlags;
      var v14590 = v20070.None;
      var v5172 = v14589 == v14590;
      var fieldSymbol = JAMScript.new(v5168, [v5169, v5170, v5171, v5172, field$$2]);
      var v5173 = varDecl$$11.varFlags;
      JAMScript.call(fieldSymbol.transferVarFlags, fieldSymbol, [v5173]);
      field$$2.symbol = fieldSymbol;
      fieldSymbol.declAST = varDecl$$11;
      var v5174 = field$$2;
      var v14591 = varDecl$$11.typeExpr;
      var v20071 = varDecl$$11.init;
      var v14592 = v20071 == null;
      var v27093 = JAMScript.call(TypeScript$$23.getTypeLink, TypeScript$$23, [v14591, this, v14592]);
      v5174.typeLink = v27093;
      var v5175 = field$$2.typeLink;
      JAMScript.call(this.resolveTypeLink, this, [scope$$26, v5175, true]);
      varDecl$$11.sym = fieldSymbol;
      var v5176 = field$$2.typeLink;
      varDecl$$11.type = v5176.type;
      return fieldSymbol
    }
    function v937(funcDecl$$19, scope$$25, fgSym$$2) {
      var v23540 = scope$$25.container;
      var v20072 = JAMScript.call(this.createFunctionSignature, this, [funcDecl$$19, v23540, scope$$25, fgSym$$2, false]);
      var v14593 = v20072.declAST;
      var v5177 = v14593.type;
      var functionGroupSymbol = v5177.symbol;
      var signatures$$1;
      var v5182 = JAMScript.call(funcDecl$$19.isConstructMember, funcDecl$$19, []);
      if(v5182) {
        var v14594 = functionGroupSymbol.type;
        var v5178 = v14594.construct;
        signatures$$1 = v5178.signatures
      }else {
        var v5181 = JAMScript.call(funcDecl$$19.isIndexerMember, funcDecl$$19, []);
        if(v5181) {
          var v20073 = functionGroupSymbol.type;
          var v14595 = JAMScript.call(v20073.getInstanceType, v20073, []);
          var v5179 = v14595.index;
          signatures$$1 = v5179.signatures
        }else {
          var v14596 = functionGroupSymbol.type;
          var v5180 = v14596.call;
          signatures$$1 = v5180.signatures
        }
      }
      var v14597 = signatures$$1.length;
      var v5183 = v14597 - 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var signature$$4 = signatures$$1[v5183]
      }
      var v5184 = signature$$4.parameters;
      var len$$27 = v5184.length;
      var i$$77 = 0;
      var v5187 = i$$77 < len$$27;
      for(;v5187;) {
        var v5185 = signature$$4.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var paramSym$$2 = v5185[i$$77]
        }
        var v14598 = paramSym$$2.parameter;
        var v5186 = v14598.typeLink;
        JAMScript.call(this.resolveTypeLink, this, [scope$$25, v5186, true]);
        i$$77 = i$$77 + 1;
        v5187 = i$$77 < len$$27
      }
      var v14599 = len$$27;
      if(v14599) {
        v14599 = funcDecl$$19.variableArgList
      }
      var v5192 = v14599;
      if(v5192) {
        var v26490 = signature$$4.parameters;
        var v26491 = len$$27 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v26056 = v26490[v26491]
        }
        var v25242 = v26056.parameter;
        var v23541 = v25242.typeLink;
        var v20074 = v23541.type;
        var v14600 = v20074.elementType;
        var v5191 = !v14600;
        if(v5191) {
          var v5188 = this.errorReporter;
          var v23542 = signature$$4.parameters;
          var v23543 = len$$27 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v20075 = v23542[v23543]
          }
          var v14601 = v20075.parameter;
          var v5189 = v14601.symbol;
          JAMScript.call(v5188.simpleErrorFromSym, v5188, [v5189, "... parameter must have array type"]);
          var v23544 = signature$$4.parameters;
          var v23545 = len$$27 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v20076 = v23544[v23545]
          }
          var v14602 = v20076.parameter;
          var v5190 = v14602.typeLink;
          var v26057 = signature$$4.parameters;
          var v26058 = len$$27 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25243 = v26057[v26058]
          }
          var v23546 = v25243.parameter;
          var v20077 = v23546.typeLink;
          var v14603 = v20077.type;
          var v27094 = JAMScript.call(this.makeArrayType, this, [v14603]);
          v5190.type = v27094
        }
      }
      var v5193 = signature$$4.returnType;
      var v5194 = JAMScript.call(funcDecl$$19.isSignature, funcDecl$$19, []);
      JAMScript.call(this.resolveTypeLink, this, [scope$$25, v5193, v5194]);
      return functionGroupSymbol
    }
    function v936(scope$$24, dotNode$$2) {
      function v935(id$$17) {
        return JAMScript.call(scope$$24.find, scope$$24, [id$$17, false, true])
      }
      var lhs = dotNode$$2.operand1;
      var rhs = dotNode$$2.operand2;
      var resultType = this.anyType;
      var lhsType = this.anyType;
      var v14604 = lhs;
      if(v14604) {
        var v20078 = rhs;
        if(v20078) {
          var v23547 = rhs.nodeType;
          var v25244 = TypeScript$$23.NodeType;
          var v23548 = v25244.Name;
          v20078 = v23547 == v23548
        }
        v14604 = v20078
      }
      var v5223 = v14604;
      if(v5223) {
        var v14605 = lhs.nodeType;
        var v20079 = TypeScript$$23.NodeType;
        var v14606 = v20079.Dot;
        var v5214 = v14605 == v14606;
        if(v5214) {
          lhsType = JAMScript.call(this.resolveTypeMember, this, [scope$$24, lhs])
        }else {
          var v14607 = lhs.nodeType;
          var v20080 = TypeScript$$23.NodeType;
          var v14608 = v20080.Name;
          var v5213 = v14607 == v14608;
          if(v5213) {
            var identifier$$1 = lhs;
            var v5195 = identifier$$1.text;
            var symbol$$11 = JAMScript.call(scope$$24.find, scope$$24, [v5195, false, true]);
            var v5212 = symbol$$11 == null;
            if(v5212) {
              var v5196 = this.errorReporter;
              var v5197 = identifier$$1.actualText;
              JAMScript.call(v5196.unresolvedSymbol, v5196, [identifier$$1, v5197])
            }else {
              var v5211 = JAMScript.call(symbol$$11.isType, symbol$$11, []);
              if(v5211) {
                var typeSymbol$$1 = symbol$$11;
                var v14609 = typeSymbol$$1.aliasLink;
                if(v14609) {
                  var v23549 = typeSymbol$$1.type;
                  var v20081 = !v23549;
                  if(v20081) {
                    var v26059 = typeSymbol$$1.aliasLink;
                    var v25245 = v26059.alias;
                    var v23550 = v25245.nodeType;
                    var v25246 = TypeScript$$23.NodeType;
                    var v23551 = v25246.Name;
                    v20081 = v23550 == v23551
                  }
                  v14609 = v20081
                }
                var v5201 = v14609;
                if(v5201) {
                  var v14610 = typeSymbol$$1.aliasLink;
                  var v5198 = v14610.alias;
                  var modPath$$2 = v5198.text;
                  var v14611 = this.locationInfo;
                  var v5199 = v14611.filename;
                  var modSym$$1 = JAMScript.call(this.findSymbolForDynamicModule, this, [modPath$$2, v5199, v935]);
                  if(modSym$$1) {
                    var v5200 = typeSymbol$$1;
                    var v27095 = JAMScript.call(modSym$$1.getType, modSym$$1, []);
                    v5200.type = v27095
                  }
                }
                var v14612 = TypeScript$$23.optimizeModuleCodeGen;
                if(v14612) {
                  v14612 = symbol$$11
                }
                var v5206 = v14612;
                if(v5206) {
                  var symType = JAMScript.call(symbol$$11.getType, symbol$$11, []);
                  var v14613 = symType;
                  if(v14613) {
                    var v20082 = typeSymbol$$1.aliasLink;
                    if(v20082) {
                      v20082 = typeSymbol$$1.onlyReferencedAsTypeRef
                    }
                    v14613 = v20082
                  }
                  var v5205 = v14613;
                  if(v5205) {
                    var v5202 = symType.symbol;
                    var modDecl$$1 = v5202.declAST;
                    var v14614 = modDecl$$1;
                    if(v14614) {
                      var v20083 = modDecl$$1.modFlags;
                      var v23552 = TypeScript$$23.ModuleFlags;
                      var v20084 = v23552.IsDynamic;
                      v14614 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v20083, v20084])
                    }
                    var v5204 = v14614;
                    if(v5204) {
                      var v5203 = this.resolvingBases;
                      typeSymbol$$1.onlyReferencedAsTypeRef = !v5203
                    }
                  }
                }
                var v14615 = JAMScript.call(symbol$$11.visible, symbol$$11, [scope$$24, this]);
                var v5209 = !v14615;
                if(v5209) {
                  var v5207 = this.errorReporter;
                  var v20085 = identifier$$1.actualText;
                  var v14616 = "The symbol '" + v20085;
                  var v5208 = v14616 + "' is not visible at this point";
                  JAMScript.call(v5207.simpleError, v5207, [lhs, v5208])
                }
                lhsType = JAMScript.call(symbol$$11.getType, symbol$$11, []);
                identifier$$1.sym = symbol$$11
              }else {
                var v5210 = this.errorReporter;
                JAMScript.call(v5210.simpleError, v5210, [lhs, "Expected type"])
              }
            }
          }
        }
        var v5215 = !lhsType;
        if(v5215) {
          lhsType = this.anyType
        }
        var v14617 = this.anyType;
        var v5222 = lhsType != v14617;
        if(v5222) {
          var rhsIdentifier = rhs;
          var v5216 = rhsIdentifier.text;
          var resultSymbol = JAMScript.call(this.lookupMemberTypeSymbol, this, [lhsType, v5216]);
          var v5221 = resultSymbol == null;
          if(v5221) {
            resultType = this.anyType;
            var v5217 = this.errorReporter;
            JAMScript.call(v5217.simpleError, v5217, [dotNode$$2, "Expected type"])
          }else {
            resultType = JAMScript.call(resultSymbol.getType, resultSymbol, []);
            var v14618 = JAMScript.call(resultSymbol.visible, resultSymbol, [scope$$24, this]);
            var v5220 = !v14618;
            if(v5220) {
              var v5218 = this.errorReporter;
              var v20086 = rhs.actualText;
              var v14619 = "The symbol '" + v20086;
              var v5219 = v14619 + "' is not visible at this point";
              JAMScript.call(v5218.simpleError, v5218, [lhs, v5219])
            }
          }
          rhsIdentifier.sym = resultType.symbol
        }
      }
      var v5224 = JAMScript.call(resultType.isClass, resultType, []);
      if(v5224) {
        resultType = resultType.instanceType
      }
      return resultType
    }
    function v934(idText$$2, currentFileName, search) {
      var originalIdText = idText$$2;
      var symbol$$10 = JAMScript.call(search, null, [idText$$2]);
      var v5245 = symbol$$10 == null;
      if(v5245) {
        var v5225 = !symbol$$10;
        if(v5225) {
          idText$$2 = JAMScript.call(TypeScript$$23.swapQuotes, TypeScript$$23, [originalIdText]);
          symbol$$10 = JAMScript.call(search, null, [idText$$2])
        }
        var v5227 = !symbol$$10;
        if(v5227) {
          var v5226 = JAMScript.call(TypeScript$$23.stripQuotes, TypeScript$$23, [originalIdText]);
          idText$$2 = v5226 + ".ts";
          symbol$$10 = JAMScript.call(search, null, [idText$$2])
        }
        var v5229 = !symbol$$10;
        if(v5229) {
          var v5228 = JAMScript.call(TypeScript$$23.stripQuotes, TypeScript$$23, [originalIdText]);
          idText$$2 = v5228 + ".str";
          symbol$$10 = JAMScript.call(search, null, [idText$$2])
        }
        var v5231 = !symbol$$10;
        if(v5231) {
          var v5230 = JAMScript.call(TypeScript$$23.stripQuotes, TypeScript$$23, [originalIdText]);
          idText$$2 = v5230 + ".d.ts";
          symbol$$10 = JAMScript.call(search, null, [idText$$2])
        }
        var v5233 = !symbol$$10;
        if(v5233) {
          var v5232 = JAMScript.call(TypeScript$$23.stripQuotes, TypeScript$$23, [originalIdText]);
          idText$$2 = v5232 + ".d.str";
          symbol$$10 = JAMScript.call(search, null, [idText$$2])
        }
        var v14620 = !symbol$$10;
        if(v14620) {
          var v20087 = JAMScript.call(TypeScript$$23.isRelative, TypeScript$$23, [originalIdText]);
          v14620 = !v20087
        }
        var v5244 = v14620;
        if(v5244) {
          idText$$2 = originalIdText;
          var strippedIdText = JAMScript.call(TypeScript$$23.stripQuotes, TypeScript$$23, [idText$$2]);
          var v5234 = JAMScript.call(TypeScript$$23.switchToForwardSlashes, TypeScript$$23, [currentFileName]);
          var path$$7 = JAMScript.call(TypeScript$$23.getRootFilePath, TypeScript$$23, [v5234]);
          var v14621 = symbol$$10 == null;
          if(v14621) {
            v14621 = path$$7 != ""
          }
          var v5243 = v14621;
          for(;v5243;) {
            var v14622 = path$$7 + strippedIdText;
            var v5235 = v14622 + ".ts";
            idText$$2 = JAMScript.call(TypeScript$$23.normalizePath, TypeScript$$23, [v5235]);
            symbol$$10 = JAMScript.call(search, null, [idText$$2]);
            var v5236 = symbol$$10 == null;
            if(v5236) {
              idText$$2 = JAMScript.call(TypeScript$$23.changePathToSTR, TypeScript$$23, [idText$$2]);
              symbol$$10 = JAMScript.call(search, null, [idText$$2])
            }
            var v5237 = symbol$$10 == null;
            if(v5237) {
              idText$$2 = JAMScript.call(TypeScript$$23.changePathToDTS, TypeScript$$23, [idText$$2]);
              symbol$$10 = JAMScript.call(search, null, [idText$$2])
            }
            var v5238 = symbol$$10 == null;
            if(v5238) {
              idText$$2 = JAMScript.call(TypeScript$$23.changePathToDSTR, TypeScript$$23, [idText$$2]);
              symbol$$10 = JAMScript.call(search, null, [idText$$2])
            }
            var v5242 = symbol$$10 == null;
            if(v5242) {
              var v5241 = path$$7 === "/";
              if(v5241) {
                path$$7 = ""
              }else {
                var v5239 = path$$7 + "..";
                path$$7 = JAMScript.call(TypeScript$$23.normalizePath, TypeScript$$23, [v5239]);
                var v5240;
                var v20088 = path$$7;
                if(v20088) {
                  v20088 = path$$7 != "/"
                }
                var v14623 = v20088;
                if(v14623) {
                  v5240 = path$$7 + "/"
                }else {
                  v5240 = path$$7
                }
                path$$7 = v5240
              }
            }
            var v14624 = symbol$$10 == null;
            if(v14624) {
              v14624 = path$$7 != ""
            }
            v5243 = v14624
          }
        }
      }
      return symbol$$10
    }
    function v933(containingType, name$$82) {
      var symbol$$9 = null;
      var v5251 = containingType.containedScope;
      if(v5251) {
        var v5246 = containingType.containedScope;
        symbol$$9 = JAMScript.call(v5246.find, v5246, [name$$82, false, true])
      }else {
        var v5250 = containingType.members;
        if(v5250) {
          var v14625 = containingType.members;
          var v5247 = v14625.allMembers;
          symbol$$9 = JAMScript.call(v5247.lookup, v5247, [name$$82]);
          var v14626 = symbol$$9 == null;
          if(v14626) {
            v14626 = containingType.ambientMembers
          }
          var v5249 = v14626;
          if(v5249) {
            var v14627 = containingType.ambientMembers;
            var v5248 = v14627.allMembers;
            symbol$$9 = JAMScript.call(v5248.lookup, v5248, [name$$82])
          }
        }
      }
      var v5255 = symbol$$9 == null;
      if(v5255) {
        var typeMembers$$1 = JAMScript.call(containingType.getAllEnclosedTypes, containingType, []);
        var ambientTypeMembers$$1 = JAMScript.call(containingType.getAllAmbientEnclosedTypes, containingType, []);
        if(typeMembers$$1) {
          var v5252 = typeMembers$$1.allMembers;
          symbol$$9 = JAMScript.call(v5252.lookup, v5252, [name$$82]);
          var v14628 = symbol$$9 == null;
          if(v14628) {
            v14628 = ambientTypeMembers$$1
          }
          var v5254 = v14628;
          if(v5254) {
            var v5253 = ambientTypeMembers$$1.allMembers;
            symbol$$9 = JAMScript.call(v5253.lookup, v5253, [name$$82])
          }
        }
      }
      var v14629 = symbol$$9;
      if(v14629) {
        v14629 = JAMScript.call(symbol$$9.isType, symbol$$9, [])
      }
      var v5256 = v14629;
      if(v5256) {
        return symbol$$9
      }else {
        return null
      }
      return
    }
    function v932(type$$42) {
      var v5257 = TypeScript$$23.SymbolAggregateScope;
      var v5258 = type$$42.symbol;
      var resultScope$$1 = JAMScript.new(v5257, [v5258]);
      var v14630;
      var v23553 = type$$42.symbol;
      if(v23553) {
        var v25247 = type$$42.symbol;
        v23553 = v25247.name
      }
      var v20090 = v23553;
      if(v20090) {
        var v20089 = type$$42.symbol;
        v14630 = v20089.name
      }else {
        v14630 = "{}"
      }
      var v5259 = v14630;
      var v5260 = type$$42.typeID;
      var baseContext$$1 = {base:v5259, baseId:v5260};
      JAMScript.call(this.addBases, this, [resultScope$$1, type$$42, baseContext$$1]);
      return resultScope$$1
    }
    function v931(resultScope, type$$41, baseContext) {
      var v14631 = TypeScript$$23.SymbolTableScope;
      var v14632 = type$$41.members;
      var v14633 = type$$41.ambientMembers;
      var v14634 = JAMScript.call(type$$41.getAllEnclosedTypes, type$$41, []);
      var v14635 = JAMScript.call(type$$41.getAllAmbientEnclosedTypes, type$$41, []);
      var v14636 = type$$41.symbol;
      var v5261 = JAMScript.new(v14631, [v14632, v14633, v14634, v14635, v14636]);
      JAMScript.call(resultScope.addParentScope, resultScope, [v5261]);
      var i$$76 = 0;
      var parent$$52;
      var v5270 = type$$41.extendsList;
      if(v5270) {
        var v5262 = type$$41.extendsList;
        var len$$26 = v5262.length;
        var v5269 = i$$76 < len$$26;
        for(;v5269;) {
          var v5263 = type$$41.extendsList;
          parent$$52 = v5263[i$$76];
          var v14637 = baseContext.baseId;
          var v14638 = parent$$52.typeID;
          var v5268 = v14637 == v14638;
          if(v5268) {
            var v5264 = this.errorReporter;
            var v5265 = parent$$52.symbol;
            var v20091 = baseContext.base;
            var v14639 = "Type '" + v20091;
            var v5266 = v14639 + "' is recursively referenced as a base class of itself";
            JAMScript.call(v5264.reportErrorFromSym, v5264, [v5265, v5266]);
            var v5267 = parent$$52.symbol;
            var v20092 = v5267.flags;
            var v23554 = TypeScript$$23.SymbolFlags;
            var v20093 = v23554.RecursivelyReferenced;
            v5267.flags = v20092 | v20093;
            break
          }
          JAMScript.call(this.addBases, this, [resultScope, parent$$52, baseContext]);
          i$$76 = i$$76 + 1;
          v5269 = i$$76 < len$$26
        }
      }
      return
    }
    function v930(funcDecl$$18, fgSym$$1, enclosingClass, addToMembers, isClassProperty, scope$$23, container$$13) {
      var accessorSym = null;
      var sig = funcDecl$$18.signature;
      var v5271 = funcDecl$$18.name;
      var nameText$$2 = v5271.text;
      var v5272 = funcDecl$$18.fncFlags;
      var v14640 = TypeScript$$23.FncFlags;
      var v5273 = v14640.Static;
      var isStatic$$7 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5272, v5273]);
      var v5274 = funcDecl$$18.fncFlags;
      var v14641 = TypeScript$$23.FncFlags;
      var v5275 = v14641.Private;
      var isPrivate$$1 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5274, v5275]);
      var v5303 = fgSym$$1 == null;
      if(v5303) {
        var v5276 = TypeScript$$23.ValueLocation;
        var field$$1 = JAMScript.new(v5276, []);
        var v5277 = TypeScript$$23.FieldSymbol;
        var v5278 = funcDecl$$18.minChar;
        var v14642 = this.locationInfo;
        var v5279 = v14642.unitIndex;
        accessorSym = JAMScript.new(v5277, [nameText$$2, v5278, v5279, false, field$$1]);
        field$$1.symbol = accessorSym;
        accessorSym.declAST = funcDecl$$18;
        var v14643 = funcDecl$$18.fncFlags;
        var v20094 = TypeScript$$23.FncFlags;
        var v14644 = v20094.GetAccessor;
        var v5286 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v14643, v14644]);
        if(v5286) {
          var v5281 = accessorSym.getter;
          if(v5281) {
            var v5280 = this.errorReporter;
            JAMScript.call(v5280.simpleError, v5280, [funcDecl$$18, "Redeclaration of property getter"])
          }
          var v14645 = sig.declAST;
          var v5282 = v14645.type;
          accessorSym.getter = v5282.symbol
        }else {
          var v5284 = accessorSym.setter;
          if(v5284) {
            var v5283 = this.errorReporter;
            JAMScript.call(v5283.simpleError, v5283, [funcDecl$$18, "Redeclaration of property setter"])
          }
          var v14646 = sig.declAST;
          var v5285 = v14646.type;
          accessorSym.setter = v5285.symbol
        }
        var v5287 = field$$1;
        var v27096 = JAMScript.call(TypeScript$$23.getTypeLink, TypeScript$$23, [null, this, false]);
        v5287.typeLink = v27096;
        if(addToMembers) {
          if(enclosingClass) {
            var v23555 = enclosingClass.members;
            var v20095 = v23555.publicMembers;
            var v14647 = JAMScript.call(v20095.add, v20095, [nameText$$2, accessorSym]);
            var v5290 = !v14647;
            if(v5290) {
              var v5288 = this.errorReporter;
              var v5289 = accessorSym.name;
              JAMScript.call(v5288.duplicateIdentifier, v5288, [funcDecl$$18, v5289])
            }
            accessorSym.container = enclosingClass.symbol
          }else {
            var v5291 = this.errorReporter;
            JAMScript.call(v5291.simpleError, v5291, [funcDecl$$18, "Accessor property may not be added in this context"])
          }
        }else {
          var v5292 = this.errorReporter;
          var v14648 = !isPrivate$$1;
          var v20096 = !v14648;
          if(v20096) {
            v14648 = isStatic$$7
          }
          var v5293 = v14648;
          JAMScript.call(scope$$23.enter, scope$$23, [container$$13, funcDecl$$18, accessorSym, v5292, v5293, false, false])
        }
        if(isClassProperty) {
          var v14649 = accessorSym;
          var v20097 = accessorSym.flags;
          var v23556 = TypeScript$$23.SymbolFlags;
          var v20098 = v23556.Property;
          v14649.flags = v20097 | v20098
        }
        if(isStatic$$7) {
          var v14650 = accessorSym;
          var v20099 = accessorSym.flags;
          var v23557 = TypeScript$$23.SymbolFlags;
          var v20100 = v23557.Static;
          v14650.flags = v20099 | v20100
        }
        if(isPrivate$$1) {
          var v14651 = accessorSym;
          var v20101 = accessorSym.flags;
          var v23558 = TypeScript$$23.SymbolFlags;
          var v20102 = v23558.Private;
          v14651.flags = v20101 | v20102
        }else {
          var v14652 = accessorSym;
          var v20103 = accessorSym.flags;
          var v23559 = TypeScript$$23.SymbolFlags;
          var v20104 = v23559.Public;
          v14652.flags = v20103 | v20104
        }
      }else {
        accessorSym = fgSym$$1;
        var v20105 = accessorSym.flags;
        var v23560 = TypeScript$$23.SymbolFlags;
        var v20106 = v23560.Private;
        var v14653 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v20105, v20106]);
        var v5295 = isPrivate$$1 != v14653;
        if(v5295) {
          var v5294 = this.errorReporter;
          JAMScript.call(v5294.simpleError, v5294, [funcDecl$$18, "Getter and setter accessors do not agree in visibility"])
        }
        var v14654 = funcDecl$$18.fncFlags;
        var v20107 = TypeScript$$23.FncFlags;
        var v14655 = v20107.GetAccessor;
        var v5302 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v14654, v14655]);
        if(v5302) {
          var v5297 = accessorSym.getter;
          if(v5297) {
            var v5296 = this.errorReporter;
            JAMScript.call(v5296.simpleError, v5296, [funcDecl$$18, "Redeclaration of property getter"])
          }
          var v5298 = funcDecl$$18.type;
          accessorSym.getter = v5298.symbol
        }else {
          var v5300 = accessorSym.setter;
          if(v5300) {
            var v5299 = this.errorReporter;
            JAMScript.call(v5299.simpleError, v5299, [funcDecl$$18, "Redeclaration of property setter"])
          }
          var v5301 = funcDecl$$18.type;
          accessorSym.setter = v5301.symbol
        }
      }
      return accessorSym
    }
    function v929(funcDecl$$17, container$$12, scope$$22, overloadGroupSym, addToScope) {
      var v14656 = funcDecl$$17.fncFlags;
      var v23561 = TypeScript$$23.FncFlags;
      var v20108 = v23561.Exported;
      var v23562 = TypeScript$$23.FncFlags;
      var v20109 = v23562.ClassPropertyMethodExported;
      var v14657 = v20108 | v20109;
      var v5304 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v14656, v14657]);
      var v14659 = !v5304;
      if(v14659) {
        var v14658 = this.gloMod;
        v5304 = container$$12 == v14658
      }
      var isExported$$1 = v5304;
      var v5305 = funcDecl$$17.fncFlags;
      var v14660 = TypeScript$$23.FncFlags;
      var v5306 = v14660.Static;
      var isStatic$$6 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5305, v5306]);
      var v5307 = funcDecl$$17.fncFlags;
      var v14661 = TypeScript$$23.FncFlags;
      var v5308 = v14661.Private;
      var isPrivate = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5307, v5308]);
      var v5309 = funcDecl$$17.fncFlags;
      var v14662 = TypeScript$$23.FncFlags;
      var v5310 = v14662.Definition;
      var isDefinition = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5309, v5310]);
      var v5311 = funcDecl$$17.fncFlags;
      var v14663 = TypeScript$$23.FncFlags;
      var v5312 = v14663.Ambient;
      var isAmbient$$4 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v5311, v5312]);
      var v5313 = JAMScript.call(funcDecl$$17.isConstructMember, funcDecl$$17, []);
      var v14664 = !v5313;
      if(v14664) {
        v5313 = funcDecl$$17.isConstructor
      }
      var isConstructor$$2 = v5313;
      var v5314 = this.gloMod;
      var isGlobal = container$$12 == v5314;
      var v5315 = TypeScript$$23.Signature;
      var signature$$3 = JAMScript.new(v5315, []);
      var v5316 = funcDecl$$17.fncFlags;
      var v14665 = TypeScript$$23.FncFlags;
      var v5317 = v14665.IsFunctionExpression;
      var isLambda$$2 = v5316 & v5317;
      var v14666 = funcDecl$$17.returnTypeAnnotation;
      var v20110 = !v14666;
      if(v20110) {
        v14666 = isDefinition
      }
      var v5321 = v14666;
      if(v5321) {
        var v5318 = signature$$3;
        var v14667 = funcDecl$$17.returnTypeAnnotation;
        var v27097 = JAMScript.call(TypeScript$$23.getTypeLink, TypeScript$$23, [v14667, this, false]);
        v5318.returnType = v27097
      }else {
        var v5319 = TypeScript$$23.TypeLink;
        var v27098 = JAMScript.new(v5319, []);
        signature$$3.returnType = v27098;
        var v5320 = signature$$3.returnType;
        v5320.type = this.anyType
      }
      signature$$3.hasVariableArgList = funcDecl$$17.variableArgList;
      var sigData = JAMScript.call(this.getParameterList, this, [funcDecl$$17, container$$12]);
      signature$$3.parameters = sigData.parameters;
      signature$$3.nonOptionalParameterCount = sigData.nonOptionalParameterCount;
      funcDecl$$17.signature = signature$$3;
      signature$$3.declAST = funcDecl$$17;
      var v5322 = overloadGroupSym;
      if(v5322) {
        var v14668 = JAMScript.call(overloadGroupSym.getType, overloadGroupSym, []);
        if(v14668) {
          var v23563 = JAMScript.call(overloadGroupSym.isAccessor, overloadGroupSym, []);
          var v20111 = !v23563;
          if(v20111) {
            var v23564 = JAMScript.call(funcDecl$$17.isSignature, funcDecl$$17, []);
            var v25249 = !v23564;
            if(v25249) {
              var v26060 = overloadGroupSym.flags;
              var v26492 = TypeScript$$23.SymbolFlags;
              var v26061 = v26492.Ambient;
              var v25248 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v26060, v26061]);
              v23564 = isAmbient$$4 == v25248
            }
            v20111 = v23564
          }
          v14668 = v20111
        }
        v5322 = v14668
      }
      var useOverloadGroupSym = v5322;
      var v14669 = useOverloadGroupSym;
      if(v14669) {
        var v23565 = overloadGroupSym.flags;
        var v25250 = TypeScript$$23.SymbolFlags;
        var v23566 = v25250.Private;
        var v20112 = JAMScript.call(TypeScript$$23.hasFlag, TypeScript$$23, [v23565, v23566]);
        v14669 = isPrivate != v20112
      }
      var v5324 = v14669;
      if(v5324) {
        var v5323 = this.errorReporter;
        JAMScript.call(v5323.simpleError, v5323, [funcDecl$$17, "Public/Private visibility of overloads does not agree"])
      }
      var v5325;
      if(useOverloadGroupSym) {
        v5325 = JAMScript.call(overloadGroupSym.getType, overloadGroupSym, [])
      }else {
        var v14670 = TypeScript$$23.Type;
        v5325 = JAMScript.new(v14670, [])
      }
      var groupType = v5325;
      if(isConstructor$$2) {
        var v14671 = groupType.construct;
        var v5327 = v14671 == null;
        if(v5327) {
          var v5326 = TypeScript$$23.SignatureGroup;
          var v27099 = JAMScript.new(v5326, []);
          groupType.construct = v27099
        }
        var v5328 = groupType.construct;
        JAMScript.call(v5328.addSignature, v5328, [signature$$3]);
        var v5329 = groupType.construct;
        var v14672 = JAMScript.call(funcDecl$$17.isSignature, funcDecl$$17, []);
        v5329.hasImplementation = !v14672;
        var v14673 = groupType.construct;
        var v5330 = v14673.hasImplementation;
        if(v5330) {
          JAMScript.call(groupType.setHasImplementation, groupType, [])
        }
      }else {
        var v5342 = JAMScript.call(funcDecl$$17.isIndexerMember, funcDecl$$17, []);
        if(v5342) {
          var v14674 = groupType.index;
          var v5333 = v14674 == null;
          if(v5333) {
            var v5331 = TypeScript$$23.SignatureGroup;
            var v27100 = JAMScript.new(v5331, []);
            groupType.index = v27100;
            var v5332 = groupType.index;
            var v20113 = v5332.flags;
            var v23567 = TypeScript$$23.SignatureFlags;
            var v20114 = v23567.IsIndexer;
            v5332.flags = v20113 | v20114
          }
          var v5334 = groupType.index;
          JAMScript.call(v5334.addSignature, v5334, [signature$$3]);
          var v5335 = groupType.index;
          var v14675 = JAMScript.call(funcDecl$$17.isSignature, funcDecl$$17, []);
          v5335.hasImplementation = !v14675;
          var v14676 = groupType.index;
          var v5336 = v14676.hasImplementation;
          if(v5336) {
            JAMScript.call(groupType.setHasImplementation, groupType, [])
          }
        }else {
          var v14677 = groupType.call;
          var v5338 = v14677 == null;
          if(v5338) {
            var v5337 = TypeScript$$23.SignatureGroup;
            var v27101 = JAMScript.new(v5337, []);
            groupType.call = v27101
          }
          var v5339 = groupType.call;
          JAMScript.call(v5339.addSignature, v5339, [signature$$3]);
          var v5340 = groupType.call;
          var v14678 = JAMScript.call(funcDecl$$17.isSignature, funcDecl$$17, []);
          v5340.hasImplementation = !v14678;
          var v14679 = groupType.call;
          var v5341 = v14679.hasImplementation;
          if(v5341) {
            JAMScript.call(groupType.setHasImplementation, groupType, [])
          }
        }
      }
      var instanceType$$3 = groupType.instanceType;
      var funcName$$1 = null;
      var usedHint = false;
      var v14680 = funcDecl$$17.name;
      if(v14680) {
        var v23568 = funcDecl$$17.name;
        var v20115 = JAMScript.call(v23568.isMissing, v23568, []);
        v14680 = !v20115
      }
      var v5345 = v14680;
      if(v5345) {
        var v5343 = funcDecl$$17.name;
        funcName$$1 = v5343.text
      }else {
        var v5344 = funcDecl$$17.hint;
        if(v5344) {
          funcName$$1 = funcDecl$$17.hint;
          usedHint = true
        }
      }
      var v14681 = groupType.symbol;
      var v5349 = v14681 == null;
      if(v5349) {
        var v5346 = groupType;
        var v14682 = TypeScript$$23.TypeSymbol;
        var v20116;
        if(funcName$$1) {
          v20116 = funcName$$1
        }else {
          v20116 = this.anon
        }
        var v14683 = v20116;
        var v14684 = funcDecl$$17.minChar;
        var v20117 = funcDecl$$17.limChar;
        var v20118 = funcDecl$$17.minChar;
        var v14685 = v20117 - v20118;
        var v20119 = this.locationInfo;
        var v14686 = v20119.unitIndex;
        var v27102 = JAMScript.new(v14682, [v14683, v14684, v14685, v14686, groupType]);
        v5346.symbol = v27102;
        var v5348 = !useOverloadGroupSym;
        if(v5348) {
          var v5347 = groupType.symbol;
          v5347.declAST = funcDecl$$17
        }
      }
      if(isStatic$$6) {
        var v5350 = groupType.symbol;
        var v20120 = v5350.flags;
        var v23569 = TypeScript$$23.SymbolFlags;
        var v20121 = v23569.Static;
        v5350.flags = v20120 | v20121
      }
      if(isAmbient$$4) {
        var v5351 = groupType.symbol;
        var v20122 = v5351.flags;
        var v23570 = TypeScript$$23.SymbolFlags;
        var v20123 = v23570.Ambient;
        v5351.flags = v20122 | v20123
      }
      if(isPrivate) {
        var v5352 = groupType.symbol;
        var v20124 = v5352.flags;
        var v23571 = TypeScript$$23.SymbolFlags;
        var v20125 = v23571.Private;
        v5352.flags = v20124 | v20125
      }
      var v5353 = groupType.symbol;
      var v27103 = JAMScript.call(funcDecl$$17.isMethod, funcDecl$$17, []);
      v5353.isMethod = v27103;
      var v14687 = groupType.symbol;
      var v5355 = v14687.isMethod;
      if(v5355) {
        var v5354 = groupType.symbol;
        var v20126 = v5354.flags;
        var v23572 = TypeScript$$23.SymbolFlags;
        var v20127 = v23572.Property;
        v5354.flags = v20126 | v20127
      }
      funcDecl$$17.type = groupType;
      var v5369 = !isConstructor$$2;
      if(v5369) {
        var v14688 = funcName$$1;
        if(v14688) {
          var v20128 = !isLambda$$2;
          if(v20128) {
            var v25251 = JAMScript.call(funcDecl$$17.isAccessor, funcDecl$$17, []);
            var v23573 = !v25251;
            if(v23573) {
              v23573 = !usedHint
            }
            v20128 = v23573
          }
          v14688 = v20128
        }
        var v5368 = v14688;
        if(v5368) {
          if(addToScope) {
            var v14689 = JAMScript.call(funcDecl$$17.isMethod, funcDecl$$17, []);
            if(v14689) {
              v14689 = isStatic$$6
            }
            var v5363 = v14689;
            if(v5363) {
              var v25252 = container$$12.type;
              var v23574 = v25252.members;
              var v20129 = v23574.publicMembers;
              var v20130 = groupType.symbol;
              var v14690 = JAMScript.call(v20129.add, v20129, [funcName$$1, v20130]);
              var v5357 = !v14690;
              if(v5357) {
                var v5356 = this.errorReporter;
                JAMScript.call(v5356.duplicateIdentifier, v5356, [funcDecl$$17, funcName$$1])
              }
              var v5358 = groupType.symbol;
              v5358.container = container$$12
            }else {
              var v14691 = overloadGroupSym == null;
              var v20132 = !v14691;
              if(v20132) {
                var v20131 = overloadGroupSym.declAST;
                if(v20131) {
                  var v26062 = overloadGroupSym.declAST;
                  var v25253 = v26062.isOverload;
                  var v23575 = !v25253;
                  if(v23575) {
                    v23575 = JAMScript.call(container$$12.isType, container$$12, [])
                  }
                  v20131 = v23575
                }
                v14691 = v20131
              }
              var v5362 = v14691;
              if(v5362) {
                var v5359 = groupType.symbol;
                var v5360 = this.errorReporter;
                var v14692 = !isPrivate;
                if(v14692) {
                  var v20133 = isExported$$1;
                  var v23576 = !v20133;
                  if(v23576) {
                    v20133 = isStatic$$6 || isGlobal
                  }
                  v14692 = v20133
                }
                var v5361 = v14692;
                JAMScript.call(scope$$22.enter, scope$$22, [container$$12, funcDecl$$17, v5359, v5360, v5361, false, isAmbient$$4])
              }
            }
          }else {
            var v14693 = JAMScript.call(funcDecl$$17.isSpecialFn, funcDecl$$17, []);
            var v5365 = !v14693;
            if(v5365) {
              var v5364 = groupType.symbol;
              v5364.container = container$$12
            }
          }
        }else {
          var v14694 = JAMScript.call(funcDecl$$17.isSpecialFn, funcDecl$$17, []);
          var v5367 = !v14694;
          if(v5367) {
            var v5366 = groupType.symbol;
            v5366.container = container$$12
          }
        }
      }
      if(useOverloadGroupSym) {
        var v5370;
        if(overloadGroupSym) {
          v5370 = JAMScript.call(overloadGroupSym.getType, overloadGroupSym, [])
        }else {
          v5370 = null
        }
        var overloadGroupType = v5370;
        var classType$$3 = groupType;
        var v5391 = classType$$3 != overloadGroupType;
        if(v5391) {
          var v14695 = classType$$3.construct;
          var v5376 = v14695 == null;
          if(v5376) {
            var v14696 = overloadGroupType;
            if(v14696) {
              v14696 = overloadGroupType.construct
            }
            var v5372 = v14696;
            if(v5372) {
              classType$$3.construct = overloadGroupType.construct
            }else {
              var v5371 = TypeScript$$23.SignatureGroup;
              var v27104 = JAMScript.new(v5371, []);
              classType$$3.construct = v27104
            }
          }else {
            if(overloadGroupType) {
              var v5375 = overloadGroupType.construct;
              if(v5375) {
                var v14697 = classType$$3.construct;
                var v5373 = v14697.signatures;
                var v14698 = overloadGroupType.construct;
                var v5374 = v14698.signatures;
                v5373.concat(v5374)
              }
            }
          }
          if(overloadGroupType) {
            var v14699 = classType$$3.call;
            var v5380 = v14699 == null;
            if(v5380) {
              classType$$3.call = overloadGroupType.call
            }else {
              var v5379 = overloadGroupType.call;
              if(v5379) {
                var v14700 = classType$$3.call;
                var v5377 = v14700.signatures;
                var v14701 = overloadGroupType.call;
                var v5378 = v14701.signatures;
                v5377.concat(v5378)
              }
            }
            var v5386 = !isStatic$$6;
            if(v5386) {
              var v14702 = classType$$3.instanceType;
              var v5381 = v14702 == null;
              if(v5381) {
                classType$$3.instanceType = overloadGroupType.instanceType
              }
              instanceType$$3 = classType$$3.instanceType;
              if(instanceType$$3) {
                var v14703 = instanceType$$3.call;
                var v5385 = v14703 == null;
                if(v5385) {
                  instanceType$$3.call = overloadGroupType.call
                }else {
                  var v5384 = overloadGroupType.call;
                  if(v5384) {
                    var v14704 = instanceType$$3.call;
                    var v5382 = v14704.signatures;
                    var v14705 = overloadGroupType.call;
                    var v5383 = v14705.signatures;
                    v5382.concat(v5383)
                  }
                }
              }
            }
            var v14706 = classType$$3.index;
            var v5390 = v14706 == null;
            if(v5390) {
              classType$$3.index = overloadGroupType.index
            }else {
              var v5389 = overloadGroupType.index;
              if(v5389) {
                var v14707 = classType$$3.index;
                var v5387 = v14707.signatures;
                var v14708 = overloadGroupType.index;
                var v5388 = v14708.signatures;
                v5387.concat(v5388)
              }
            }
          }
        }
      }
      return signature$$3
    }
    function v928(funcDecl$$16, container$$11) {
      var args$$11 = funcDecl$$16.arguments;
      var parameterTable = null;
      var parameterBuilder = null;
      var v5392 = args$$11.members;
      var len$$25 = v5392.length;
      var nonOptionalParams = 0;
      var result$$27 = [];
      var v5408 = len$$25 > 0;
      if(v5408) {
        var v5393 = TypeScript$$23.ScopedMembers;
        var v14709 = TypeScript$$23.DualStringHashTable;
        var v20134 = TypeScript$$23.StringHashTable;
        var v14710 = JAMScript.new(v20134, []);
        var v20135 = TypeScript$$23.StringHashTable;
        var v14711 = JAMScript.new(v20135, []);
        var v5394 = JAMScript.new(v14709, [v14710, v14711]);
        parameterTable = JAMScript.new(v5393, [v5394]);
        var v5395 = TypeScript$$23.SymbolScopeBuilder;
        parameterBuilder = JAMScript.new(v5395, [parameterTable, null, null, null, null, container$$11]);
        var i$$75 = 0;
        var v5407 = i$$75 < len$$25;
        for(;v5407;) {
          var v5396 = args$$11.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var parameter$$1 = v5396[i$$75]
          }
          var v5397 = TypeScript$$23.ValueLocation;
          var paramDef$$2 = JAMScript.new(v5397, []);
          var v5398 = TypeScript$$23.ParameterSymbol;
          var v14712 = parameter$$1.id;
          var v5399 = v14712.text;
          var v5400 = parameter$$1.minChar;
          var v14713 = this.locationInfo;
          var v5401 = v14713.unitIndex;
          var parameterSymbol = JAMScript.new(v5398, [v5399, v5400, v5401, paramDef$$2]);
          parameterSymbol.declAST = parameter$$1;
          parameterSymbol.funcDecl = funcDecl$$16;
          var v5402 = parameter$$1.id;
          v5402.sym = parameterSymbol;
          parameter$$1.sym = parameterSymbol;
          paramDef$$2.symbol = parameterSymbol;
          var v5403 = paramDef$$2;
          var v14714 = parameter$$1.typeExpr;
          var v27105 = JAMScript.call(TypeScript$$23.getTypeLink, TypeScript$$23, [v14714, this, false]);
          v5403.typeLink = v27105;
          var v5404 = this.errorReporter;
          JAMScript.call(parameterBuilder.enter, parameterBuilder, [null, parameter$$1, parameterSymbol, v5404, true, false, false]);
          var v5405 = result$$27.length;
          result$$27[v5405] = parameterSymbol;
          var v14715 = JAMScript.call(parameter$$1.isOptionalArg, parameter$$1, []);
          var v5406 = !v14715;
          if(v5406) {
            nonOptionalParams = nonOptionalParams + 1
          }
          i$$75 = i$$75 + 1;
          v5407 = i$$75 < len$$25
        }
      }
      return{parameters:result$$27, nonOptionalParameterCount:nonOptionalParams}
    }
    function v927(type$$40) {
      var v14716 = type$$40.arrayCache;
      var v5412 = v14716 == null;
      if(v5412) {
        var v27106 = JAMScript.new(ArrayCache, []);
        type$$40.arrayCache = v27106;
        var v5409 = type$$40.arrayCache;
        var v14717 = TypeScript$$23.Type;
        var v27107 = JAMScript.new(v14717, []);
        v5409.arrayType = v27107;
        var v14718 = type$$40.arrayCache;
        var v5410 = v14718.arrayType;
        v5410.elementType = type$$40;
        var v14719 = type$$40.arrayCache;
        var v5411 = v14719.arrayType;
        v5411.symbol = type$$40.symbol
      }
      var v5413 = type$$40.arrayCache;
      return v5413.arrayType
    }
    function v926(ast$$63) {
      var v14720 = ast$$63.nodeType;
      var v20136 = TypeScript$$23.NodeType;
      var v14721 = v20136.Script;
      var v5414 = v14720 == v14721;
      if(v5414) {
        var script$$14 = ast$$63;
        this.locationInfo = script$$14.locationInfo
      }
      var v5415 = TypeScript$$23.ScopeChain;
      var v5416 = this.gloMod;
      var v5417 = this.globalScope;
      var globalChain = JAMScript.new(v5415, [v5416, null, v5417]);
      var v5418 = TypeScript$$23.TypeCollectionContext;
      var context$$49 = JAMScript.new(v5418, [globalChain, this]);
      var v5419 = JAMScript.call(TypeScript$$23.getAstWalkerFactory, TypeScript$$23, []);
      var v5420 = TypeScript$$23.preCollectTypes;
      var v5421 = TypeScript$$23.postCollectTypes;
      JAMScript.call(v5419.walk, v5419, [ast$$63, v5420, v5421, null, context$$49]);
      return
    }
    function v925() {
      var i$$74 = 0;
      var v20137 = this.provisionalStartedTypecheckObjects;
      var v14722 = v20137.length;
      var v5424 = i$$74 < v14722;
      for(;v5424;) {
        var v23577 = this.provisionalStartedTypecheckObjects;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v20138 = v23577[i$$74]
        }
        var v14723 = v20138.typeCheckStatus;
        var v20139 = this.typingContextStack;
        var v14724 = JAMScript.call(v20139.getContextID, v20139, []);
        var v5423 = v14723 >= v14724;
        if(v5423) {
          var v14725 = this.provisionalStartedTypecheckObjects;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v5422 = v14725[i$$74]
          }
          var v14726 = TypeScript$$23.TypeCheckStatus;
          v5422.typeCheckStatus = v14726.NotStarted
        }
        i$$74 = i$$74 + 1;
        var v20140 = this.provisionalStartedTypecheckObjects;
        var v14727 = v20140.length;
        v5424 = i$$74 < v14727
      }
      this.provisionalStartedTypecheckObjects = [];
      return
    }
    function v924(pto) {
      var v5427 = JAMScript.call(this.inProvisionalTypecheckMode, this, []);
      if(v5427) {
        var v5425 = this.provisionalStartedTypecheckObjects;
        var v14728 = this.provisionalStartedTypecheckObjects;
        var v5426 = v14728.length;
        JAMScript.set(v5425, v5426, pto)
      }
      return
    }
    function v923(status) {
      var v20141 = TypeScript$$23.TypeCheckStatus;
      var v14729 = v20141.Finished;
      var v5428 = status == v14729;
      var v14731 = !v5428;
      if(v14731) {
        var v14730 = JAMScript.call(this.inProvisionalTypecheckMode, this, []);
        if(v14730) {
          var v23578 = this.typingContextStack;
          var v20142 = JAMScript.call(v23578.getContextID, v23578, []);
          v14730 = status == v20142
        }
        v5428 = v14730
      }
      return v5428
    }
    function v922() {
      var v5430 = JAMScript.call(this.inProvisionalTypecheckMode, this, []);
      if(v5430) {
        var v5429 = this.typingContextStack;
        return JAMScript.call(v5429.getContextID, v5429, [])
      }
      var v5431 = TypeScript$$23.TypeCheckStatus;
      return v5431.Finished
    }
    function v921() {
      var v5432 = this.typingContextStack;
      return JAMScript.call(v5432.isProvisional, v5432, [])
    }
    function v920() {
      return this.currentContextualTypeContext
    }
    function v919() {
      var v5433 = this.currentContextualTypeContext;
      if(v5433) {
        var v14732 = this.currentContextualTypeContext;
        v5433 = v14732.contextualType
      }
      return v5433
    }
    function v918() {
      this.currentContextualTypeContext = null;
      var v5434 = this.errorReporter;
      v5434.pushToErrorSink = false;
      return
    }
    function v917() {
      var v5435 = this.typingContextStack;
      var v27108 = JAMScript.call(v5435.getContextualType, v5435, []);
      this.currentContextualTypeContext = v27108;
      return
    }
    function v916(contextType, provisional$$3, condition, ast$$62) {
      if(condition) {
        var v20143 = this.typingContextStack;
        var v14733 = JAMScript.call(v20143.isProvisional, v20143, []);
        var v20144 = !v14733;
        if(v20144) {
          v14733 = provisional$$3
        }
        var v5436 = v14733;
        JAMScript.call(this.setContextualType, this, [contextType, v5436])
      }
      var v5437 = this.typeFlow;
      JAMScript.call(v5437.typeCheck, v5437, [ast$$62]);
      if(condition) {
        JAMScript.call(this.unsetContextualType, this, [])
      }
      return
    }
    function v915() {
      var v20145 = this.typingContextStack;
      var v14734 = JAMScript.call(v20145.getContextualType, v20145, []);
      var v5439 = !v14734;
      if(v5439) {
        var v5438 = this.typingContextStack;
        v5438.hadProvisionalErrors = false
      }
      return
    }
    function v914() {
      var v5440 = this.typingContextStack;
      return v5440.hadProvisionalErrors
    }
    function v913() {
      var v5441 = this.typingContextStack;
      var lastTC = JAMScript.call(v5441.popContextualType, v5441, []);
      var v5442 = this.typingContextStack;
      var v27109 = JAMScript.call(v5442.getContextualType, v5442, []);
      this.currentContextualTypeContext = v27109;
      return lastTC
    }
    function v912(type$$39, provisional$$2) {
      var v5443 = this.typingContextStack;
      JAMScript.call(v5443.pushContextualType, v5443, [type$$39, provisional$$2]);
      var v5444 = this.typingContextStack;
      var v27110 = JAMScript.call(v5444.getContextualType, v5444, []);
      this.currentContextualTypeContext = v27110;
      return
    }
    function v911(style) {
      this.styleSettings = style;
      return
    }
    function TypeChecker$$1(persistentState) {
      this.persistentState = persistentState;
      this.errorReporter = null;
      this.checkControlFlow = false;
      this.printControlFlowGraph = false;
      this.checkControlFlowUseDef = false;
      this.styleSettings = null;
      this.units = null;
      this.anon = "_anonymous";
      this.locationInfo = null;
      this.typeFlow = null;
      this.currentCompareA = null;
      this.currentCompareB = null;
      this.currentModDecl = null;
      this.inBind = false;
      this.inWith = false;
      this.errorsOnWith = true;
      this.currentContextualTypeContext = null;
      this.resolvingBases = false;
      this.canCallDefinitionSignature = false;
      this.assignableCache = {};
      this.subtypeCache = {};
      this.identicalCache = {};
      this.provisionalStartedTypecheckObjects = [];
      this.mustCaptureGlobalThis = false;
      var v5445 = this.persistentState;
      this.voidType = v5445.voidType;
      var v5446 = this.persistentState;
      this.booleanType = v5446.booleanType;
      var v5447 = this.persistentState;
      this.numberType = v5447.doubleType;
      var v5448 = this.persistentState;
      this.stringType = v5448.stringType;
      var v5449 = this.persistentState;
      this.anyType = v5449.anyType;
      var v5450 = this.persistentState;
      this.nullType = v5450.nullType;
      var v5451 = this.persistentState;
      this.undefinedType = v5451.undefinedType;
      var v5452 = this.persistentState;
      this.globals = v5452.dualGlobalValues;
      var v5453 = this.persistentState;
      this.globalTypes = v5453.dualGlobalTypes;
      var v5454 = this.persistentState;
      this.ambientGlobals = v5454.dualAmbientGlobalValues;
      var v5455 = this.persistentState;
      this.ambientGlobalTypes = v5455.dualAmbientGlobalTypes;
      var v5456 = this.persistentState;
      this.gloModType = v5456.mod;
      var v5457 = this.persistentState;
      this.gloMod = v5457.gloMod;
      var v5458 = this.persistentState;
      this.wildElm = v5458.wildElm;
      var v5459 = this.persistentState;
      this.globalScope = v5459.globalScope;
      var v27111 = JAMScript.new(ContextualTypingContextStack, [this]);
      this.typingContextStack = v27111;
      return
    }
    var v5460 = TypeChecker$$1.prototype;
    v5460.setStyleOptions = v911;
    var v5461 = TypeChecker$$1.prototype;
    v5461.setContextualType = v912;
    var v5462 = TypeChecker$$1.prototype;
    v5462.unsetContextualType = v913;
    var v5463 = TypeChecker$$1.prototype;
    v5463.hadProvisionalErrors = v914;
    var v5464 = TypeChecker$$1.prototype;
    v5464.resetProvisionalErrors = v915;
    var v5465 = TypeChecker$$1.prototype;
    v5465.typeCheckWithContextualType = v916;
    var v5466 = TypeChecker$$1.prototype;
    v5466.resetTargetType = v917;
    var v5467 = TypeChecker$$1.prototype;
    v5467.killCurrentContextualType = v918;
    var v5468 = TypeChecker$$1.prototype;
    v5468.hasTargetType = v919;
    var v5469 = TypeChecker$$1.prototype;
    v5469.getTargetTypeContext = v920;
    var v5470 = TypeChecker$$1.prototype;
    v5470.inProvisionalTypecheckMode = v921;
    var v5471 = TypeChecker$$1.prototype;
    v5471.getTypeCheckFinishedStatus = v922;
    var v5472 = TypeChecker$$1.prototype;
    v5472.typeStatusIsFinished = v923;
    var v5473 = TypeChecker$$1.prototype;
    v5473.addStartedPTO = v924;
    var v5474 = TypeChecker$$1.prototype;
    v5474.cleanStartedPTO = v925;
    var v5475 = TypeChecker$$1.prototype;
    v5475.collectTypes = v926;
    var v5476 = TypeChecker$$1.prototype;
    v5476.makeArrayType = v927;
    var v5477 = TypeChecker$$1.prototype;
    v5477.getParameterList = v928;
    var v5478 = TypeChecker$$1.prototype;
    v5478.createFunctionSignature = v929;
    var v5479 = TypeChecker$$1.prototype;
    v5479.createAccessorSymbol = v930;
    var v5480 = TypeChecker$$1.prototype;
    v5480.addBases = v931;
    var v5481 = TypeChecker$$1.prototype;
    v5481.scopeOf = v932;
    var v5482 = TypeChecker$$1.prototype;
    v5482.lookupMemberTypeSymbol = v933;
    var v5483 = TypeChecker$$1.prototype;
    v5483.findSymbolForDynamicModule = v934;
    var v5484 = TypeChecker$$1.prototype;
    v5484.resolveTypeMember = v936;
    var v5485 = TypeChecker$$1.prototype;
    v5485.resolveFuncDecl = v937;
    var v5486 = TypeChecker$$1.prototype;
    v5486.resolveVarDecl = v938;
    var v5487 = TypeChecker$$1.prototype;
    v5487.resolveTypeLink = v939;
    var v5488 = TypeChecker$$1.prototype;
    v5488.resolveBaseTypeLink = v940;
    var v5489 = TypeChecker$$1.prototype;
    v5489.findMostApplicableSignature = v944;
    var v5490 = TypeChecker$$1.prototype;
    v5490.getApplicableSignatures = v945;
    var v5491 = TypeChecker$$1.prototype;
    v5491.canContextuallyTypeFunction = v946;
    var v5492 = TypeChecker$$1.prototype;
    v5492.canContextuallyTypeObjectLiteral = v947;
    var v5493 = TypeChecker$$1.prototype;
    v5493.widenType = v948;
    var v5494 = TypeChecker$$1.prototype;
    v5494.isNullOrUndefinedType = v949;
    var v5495 = TypeChecker$$1.prototype;
    v5495.findBestCommonType = v950;
    var v5496 = TypeChecker$$1.prototype;
    v5496.typesAreIdentical = v951;
    var v5497 = TypeChecker$$1.prototype;
    v5497.signatureGroupsAreIdentical = v952;
    var v5498 = TypeChecker$$1.prototype;
    v5498.signaturesAreIdentical = v953;
    var v5499 = TypeChecker$$1.prototype;
    v5499.sourceIsSubtypeOfTarget = v954;
    var v5500 = TypeChecker$$1.prototype;
    v5500.signatureGroupIsSubtypeOfTarget = v955;
    var v5501 = TypeChecker$$1.prototype;
    v5501.signatureIsSubtypeOfTarget = v956;
    var v5502 = TypeChecker$$1.prototype;
    v5502.sourceIsAssignableToTarget = v957;
    var v5503 = TypeChecker$$1.prototype;
    v5503.signatureGroupIsAssignableToTarget = v958;
    var v5504 = TypeChecker$$1.prototype;
    v5504.signatureIsAssignableToTarget = v959;
    var v5505 = TypeChecker$$1.prototype;
    v5505.sourceIsRelatableToTarget = v960;
    var v5506 = TypeChecker$$1.prototype;
    v5506.signatureGroupIsRelatableToTarget = v961;
    var v5507 = TypeChecker$$1.prototype;
    v5507.signatureIsRelatableToTarget = v962;
    return TypeChecker$$1
  }
  function v910() {
    function v909() {
      var v5508;
      var v23579 = this.contextStack;
      var v20146 = v23579.length;
      var v14736 = !v20146;
      if(v14736) {
        v5508 = false
      }else {
        var v20147 = this.contextStack;
        var v25254 = this.contextStack;
        var v23580 = v25254.length;
        var v20148 = v23580 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v14735 = v20147[v20148]
        }
        v5508 = v14735.provisional
      }
      return v5508
    }
    function v908() {
      var v5509;
      var v23581 = this.contextStack;
      var v20149 = v23581.length;
      var v14739 = !v20149;
      if(v14739) {
        var v14737 = TypeScript$$23.TypeCheckStatus;
        v5509 = v14737.Finished
      }else {
        var v20150 = this.contextStack;
        var v25255 = this.contextStack;
        var v23582 = v25255.length;
        var v20151 = v23582 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v14738 = v20150[v20151]
        }
        v5509 = v14738.contextID
      }
      return v5509
    }
    function v907() {
      var v5510;
      var v23583 = this.contextStack;
      var v20152 = v23583.length;
      var v14742 = !v20152;
      if(v14742) {
        v5510 = null
      }else {
        var v14740 = this.contextStack;
        var v23584 = this.contextStack;
        var v20153 = v23584.length;
        var v14741 = v20153 - 1;
        v5510 = v14740[v14741]
      }
      return v5510
    }
    function v906() {
      var v5511 = this.contextStack;
      var tc$$2 = JAMScript.call(v5511.pop, v5511, []);
      var v14743 = this.checker;
      var v5512 = v14743.errorReporter;
      var v27112 = JAMScript.call(this.isProvisional, this, []);
      v5512.pushToErrorSink = v27112;
      var v5513 = this.hadProvisionalErrors;
      var v14745 = !v5513;
      if(v14745) {
        var v14744 = tc$$2.provisional;
        if(v14744) {
          var v25256 = this.checker;
          var v23585 = v25256.errorReporter;
          var v20154 = v23585.errorSink;
          v14744 = v20154.length
        }
        v5513 = v14744
      }
      this.hadProvisionalErrors = v5513;
      var v14746 = this.checker;
      var v5514 = v14746.errorReporter;
      JAMScript.call(v5514.freeCapturedErrors, v5514, []);
      return tc$$2
    }
    function v905(type$$38, provisional$$1) {
      var v5515 = this.contextStack;
      var v14747 = ContextualTypingContextStack$$1.contextID;
      var v23586 = ContextualTypingContextStack$$1;
      var v25257 = ContextualTypingContextStack$$1.contextID;
      v23586.contextID = v25257 + 1;
      var v5516 = JAMScript.new(ContextualTypeContext, [type$$38, provisional$$1, v14747]);
      JAMScript.call(v5515.push, v5515, [v5516]);
      var v14748 = this.checker;
      var v5517 = v14748.errorReporter;
      v5517.pushToErrorSink = provisional$$1;
      return
    }
    function ContextualTypingContextStack$$1(checker$$16) {
      this.checker = checker$$16;
      this.contextStack = [];
      this.hadProvisionalErrors = false;
      return
    }
    var v14749 = TypeScript$$23.TypeCheckStatus;
    var v5518 = v14749.Finished;
    ContextualTypingContextStack$$1.contextID = v5518 + 1;
    var v5519 = ContextualTypingContextStack$$1.prototype;
    v5519.pushContextualType = v905;
    var v5520 = ContextualTypingContextStack$$1.prototype;
    v5520.popContextualType = v906;
    var v5521 = ContextualTypingContextStack$$1.prototype;
    v5521.getContextualType = v907;
    var v5522 = ContextualTypingContextStack$$1.prototype;
    v5522.getContextID = v908;
    var v5523 = ContextualTypingContextStack$$1.prototype;
    v5523.isProvisional = v909;
    return ContextualTypingContextStack$$1
  }
  function v904() {
    function ContextualTypeContext$$1(contextualType, provisional, contextID) {
      this.contextualType = contextualType;
      this.provisional = provisional;
      this.contextID = contextID;
      this.targetSig = null;
      this.targetThis = null;
      this.targetAccessorType = null;
      return
    }
    return ContextualTypeContext$$1
  }
  function v903() {
    function v902(name$$81, type$$37) {
      var v5524 = TypeScript$$23.ValueLocation;
      var valueLocation = JAMScript.new(v5524, []);
      var v5525 = TypeScript$$23.TypeLink;
      var v27113 = JAMScript.new(v5525, []);
      valueLocation.typeLink = v27113;
      var v5526 = TypeScript$$23.VariableSymbol;
      var sym$$28 = JAMScript.new(v5526, [name$$81, 0, -1, valueLocation]);
      JAMScript.call(sym$$28.setType, sym$$28, [type$$37]);
      var v5527 = TypeScript$$23.TypeCheckStatus;
      sym$$28.typeCheckStatus = v5527.Finished;
      sym$$28.container = this.gloMod;
      var v5528 = this.importedGlobalsTable;
      JAMScript.call(v5528.addPublicMember, v5528, [name$$81, sym$$28]);
      return
    }
    function v901() {
      var v5529 = TypeScript$$23.StringHashTable;
      var v27114 = JAMScript.new(v5529, []);
      this.globals = v27114;
      var v5530 = TypeScript$$23.StringHashTable;
      var v27115 = JAMScript.new(v5530, []);
      this.globalTypes = v27115;
      var v5531 = TypeScript$$23.StringHashTable;
      var v27116 = JAMScript.new(v5531, []);
      this.ambientGlobals = v27116;
      var v5532 = TypeScript$$23.StringHashTable;
      var v27117 = JAMScript.new(v5532, []);
      this.ambientGlobalTypes = v27117;
      var v5533 = this.globalTypes;
      var v20155 = this.voidType;
      var v14750 = v20155.symbol;
      var v5534 = v14750.name;
      var v14751 = this.voidType;
      var v5535 = v14751.symbol;
      JAMScript.call(v5533.add, v5533, [v5534, v5535]);
      var v5536 = this.globalTypes;
      var v20156 = this.booleanType;
      var v14752 = v20156.symbol;
      var v5537 = v14752.name;
      var v14753 = this.booleanType;
      var v5538 = v14753.symbol;
      JAMScript.call(v5536.add, v5536, [v5537, v5538]);
      var v5539 = this.globalTypes;
      var v20157 = this.doubleType;
      var v14754 = v20157.symbol;
      var v5540 = v14754.name;
      var v14755 = this.doubleType;
      var v5541 = v14755.symbol;
      JAMScript.call(v5539.add, v5539, [v5540, v5541]);
      var v5542 = this.globalTypes;
      var v14756 = this.doubleType;
      var v5543 = v14756.symbol;
      JAMScript.call(v5542.add, v5542, ["number", v5543]);
      var v5544 = this.globalTypes;
      var v20158 = this.stringType;
      var v14757 = v20158.symbol;
      var v5545 = v14757.name;
      var v14758 = this.stringType;
      var v5546 = v14758.symbol;
      JAMScript.call(v5544.add, v5544, [v5545, v5546]);
      var v5547 = this.globalTypes;
      var v20159 = this.anyType;
      var v14759 = v20159.symbol;
      var v5548 = v14759.name;
      var v14760 = this.anyType;
      var v5549 = v14760.symbol;
      JAMScript.call(v5547.add, v5547, [v5548, v5549]);
      var v5550 = this.globalTypes;
      var v20160 = this.nullType;
      var v14761 = v20160.symbol;
      var v5551 = v14761.name;
      var v14762 = this.nullType;
      var v5552 = v14762.symbol;
      JAMScript.call(v5550.add, v5550, [v5551, v5552]);
      var v5553 = this.globalTypes;
      var v20161 = this.undefinedType;
      var v14763 = v20161.symbol;
      var v5554 = v14763.name;
      var v14764 = this.undefinedType;
      var v5555 = v14764.symbol;
      JAMScript.call(v5553.add, v5553, [v5554, v5555]);
      var v5556 = this.dualGlobalValues;
      v5556.secondaryTable = this.globals;
      var v5557 = this.dualGlobalTypes;
      v5557.secondaryTable = this.globalTypes;
      var v5558 = this.dualAmbientGlobalValues;
      v5558.secondaryTable = this.ambientGlobals;
      var v5559 = this.dualAmbientGlobalTypes;
      v5559.secondaryTable = this.ambientGlobalTypes;
      return
    }
    function v900(mode$$8) {
      var v5560 = this.dualGlobalValues;
      var v14765 = this.dualGlobalTypes;
      var v20162 = this.dualAmbientGlobalValues;
      var v23587 = this.dualAmbientGlobalTypes;
      var v25258 = TypeCheckCollectionMode.Resident;
      this.residentTypeCheck = v5560.insertPrimary = v14765.insertPrimary = v20162.insertPrimary = v23587.insertPrimary = mode$$8 == v25258;
      return
    }
    function v899(flags$$3, name$$80) {
      var v5561 = TypeScript$$23.Type;
      var primitive = JAMScript.new(v5561, []);
      primitive.primitiveTypeClass = flags$$3;
      var v5562 = TypeScript$$23.TypeSymbol;
      var v5563 = name$$80.length;
      var symbol$$8 = JAMScript.new(v5562, [name$$80, -1, v5563, -1, primitive]);
      var v5564 = TypeScript$$23.TypeCheckStatus;
      symbol$$8.typeCheckStatus = v5564.Finished;
      primitive.symbol = symbol$$8;
      var v5565 = this.importedGlobals;
      var v5566 = this.errorReporter;
      JAMScript.call(v5565.enter, v5565, [null, null, symbol$$8, v5566, true, true, true]);
      return primitive
    }
    function PersistentGlobalTypeState$$1(errorReporter$$4) {
      this.errorReporter = errorReporter$$4;
      var v5567 = TypeScript$$23.ScopedMembers;
      var v14766 = TypeScript$$23.DualStringHashTable;
      var v20163 = TypeScript$$23.StringHashTable;
      var v14767 = JAMScript.new(v20163, []);
      var v20164 = TypeScript$$23.StringHashTable;
      var v14768 = JAMScript.new(v20164, []);
      var v5568 = JAMScript.new(v14766, [v14767, v14768]);
      var v27118 = JAMScript.new(v5567, [v5568]);
      this.importedGlobalsTable = v27118;
      var v5569 = TypeScript$$23.ScopedMembers;
      var v14769 = TypeScript$$23.DualStringHashTable;
      var v20165 = TypeScript$$23.StringHashTable;
      var v14770 = JAMScript.new(v20165, []);
      var v20166 = TypeScript$$23.StringHashTable;
      var v14771 = JAMScript.new(v20166, []);
      var v5570 = JAMScript.new(v14769, [v14770, v14771]);
      var v27119 = JAMScript.new(v5569, [v5570]);
      this.importedGlobalsTypeTable = v27119;
      this.globals = null;
      this.globalTypes = null;
      this.ambientGlobals = null;
      this.ambientGlobalTypes = null;
      var v5571 = TypeScript$$23.StringHashTable;
      var v27120 = JAMScript.new(v5571, []);
      this.residentGlobalValues = v27120;
      var v5572 = TypeScript$$23.StringHashTable;
      var v27121 = JAMScript.new(v5572, []);
      this.residentGlobalTypes = v27121;
      var v5573 = TypeScript$$23.StringHashTable;
      var v27122 = JAMScript.new(v5573, []);
      this.residentGlobalAmbientValues = v27122;
      var v5574 = TypeScript$$23.StringHashTable;
      var v27123 = JAMScript.new(v5574, []);
      this.residentGlobalAmbientTypes = v27123;
      this.residentTypeCheck = true;
      this.mod = null;
      this.gloMod = null;
      this.wildElm = null;
      var v5575 = TypeScript$$23.SymbolScopeBuilder;
      var v5576 = this.importedGlobalsTable;
      var v5577 = this.importedGlobalsTypeTable;
      var v27124 = JAMScript.new(v5575, [null, v5576, null, v5577, null, null]);
      this.importedGlobals = v27124;
      var v5578 = TypeScript$$23.DualStringHashTable;
      var v5579 = this.residentGlobalValues;
      var v14772 = TypeScript$$23.StringHashTable;
      var v5580 = JAMScript.new(v14772, []);
      var v27125 = JAMScript.new(v5578, [v5579, v5580]);
      this.dualGlobalValues = v27125;
      var v5581 = TypeScript$$23.DualStringHashTable;
      var v5582 = this.residentGlobalTypes;
      var v14773 = TypeScript$$23.StringHashTable;
      var v5583 = JAMScript.new(v14773, []);
      var v27126 = JAMScript.new(v5581, [v5582, v5583]);
      this.dualGlobalTypes = v27126;
      var v5584 = TypeScript$$23.DualStringHashTable;
      var v5585 = this.residentGlobalAmbientValues;
      var v14774 = TypeScript$$23.StringHashTable;
      var v5586 = JAMScript.new(v14774, []);
      var v27127 = JAMScript.new(v5584, [v5585, v5586]);
      this.dualAmbientGlobalValues = v27127;
      var v5587 = TypeScript$$23.DualStringHashTable;
      var v5588 = this.residentGlobalAmbientTypes;
      var v14775 = TypeScript$$23.StringHashTable;
      var v5589 = JAMScript.new(v14775, []);
      var v27128 = JAMScript.new(v5587, [v5588, v5589]);
      this.dualAmbientGlobalTypes = v27128;
      var v5590 = TypeScript$$23.ScopedMembers;
      var v14776 = TypeScript$$23.DualStringHashTable;
      var v14777 = this.dualGlobalValues;
      var v20167 = TypeScript$$23.StringHashTable;
      var v14778 = JAMScript.new(v20167, []);
      var v5591 = JAMScript.new(v14776, [v14777, v14778]);
      var dualGlobalScopedMembers = JAMScript.new(v5590, [v5591]);
      var v5592 = TypeScript$$23.ScopedMembers;
      var v14779 = TypeScript$$23.DualStringHashTable;
      var v14780 = this.dualAmbientGlobalValues;
      var v20168 = TypeScript$$23.StringHashTable;
      var v14781 = JAMScript.new(v20168, []);
      var v5593 = JAMScript.new(v14779, [v14780, v14781]);
      var dualGlobalScopedAmbientMembers = JAMScript.new(v5592, [v5593]);
      var v5594 = TypeScript$$23.ScopedMembers;
      var v14782 = TypeScript$$23.DualStringHashTable;
      var v14783 = this.dualGlobalTypes;
      var v20169 = TypeScript$$23.StringHashTable;
      var v14784 = JAMScript.new(v20169, []);
      var v5595 = JAMScript.new(v14782, [v14783, v14784]);
      var dualGlobalScopedEnclosedTypes = JAMScript.new(v5594, [v5595]);
      var v5596 = TypeScript$$23.ScopedMembers;
      var v14785 = TypeScript$$23.DualStringHashTable;
      var v14786 = this.dualAmbientGlobalTypes;
      var v20170 = TypeScript$$23.StringHashTable;
      var v14787 = JAMScript.new(v20170, []);
      var v5597 = JAMScript.new(v14785, [v14786, v14787]);
      var dualGlobalScopedAmbientEnclosedTypes = JAMScript.new(v5596, [v5597]);
      var v5598 = TypeScript$$23.SymbolScopeBuilder;
      var v5599 = this.importedGlobals;
      var v27129 = JAMScript.new(v5598, [dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, v5599, null]);
      this.globalScope = v27129;
      var v14788 = TypeScript$$23.Primitive;
      var v5600 = v14788.Void;
      var v27130 = JAMScript.call(this.enterPrimitive, this, [v5600, "void"]);
      this.voidType = v27130;
      var v14789 = TypeScript$$23.Primitive;
      var v5601 = v14789.Boolean;
      var v27131 = JAMScript.call(this.enterPrimitive, this, [v5601, "bool"]);
      this.booleanType = v27131;
      var v14790 = TypeScript$$23.Primitive;
      var v5602 = v14790.Double;
      var v27132 = JAMScript.call(this.enterPrimitive, this, [v5602, "number"]);
      this.doubleType = v27132;
      var v14791 = this.importedGlobals;
      var v5603 = v14791.ambientEnclosedTypes;
      var v14792 = this.doubleType;
      var v5604 = v14792.symbol;
      JAMScript.call(v5603.addPublicMember, v5603, ["number", v5604]);
      var v14793 = TypeScript$$23.Primitive;
      var v5605 = v14793.String;
      var v27133 = JAMScript.call(this.enterPrimitive, this, [v5605, "string"]);
      this.stringType = v27133;
      var v14794 = TypeScript$$23.Primitive;
      var v5606 = v14794.Any;
      var v27134 = JAMScript.call(this.enterPrimitive, this, [v5606, "any"]);
      this.anyType = v27134;
      var v14795 = TypeScript$$23.Primitive;
      var v5607 = v14795.Null;
      var v27135 = JAMScript.call(this.enterPrimitive, this, [v5607, "null"]);
      this.nullType = v27135;
      var v14796 = TypeScript$$23.Primitive;
      var v5608 = v14796.Undefined;
      var v27136 = JAMScript.call(this.enterPrimitive, this, [v5608, "undefined"]);
      this.undefinedType = v27136;
      var v5609 = TypeCheckCollectionMode.Resident;
      JAMScript.call(this.setCollectionMode, this, [v5609]);
      var v5610 = TypeScript$$23.TypeSymbol;
      var v14797 = TypeScript$$23.Type;
      var v5611 = JAMScript.new(v14797, []);
      var v27137 = JAMScript.new(v5610, ["_element", -1, 0, -1, v5611]);
      this.wildElm = v27137;
      var v5612 = this.importedGlobalsTypeTable;
      var v14798 = this.wildElm;
      var v5613 = v14798.name;
      var v5614 = this.wildElm;
      JAMScript.call(v5612.addPublicMember, v5612, [v5613, v5614]);
      var v5615 = TypeScript$$23.ModuleType;
      var v27138 = JAMScript.new(v5615, [dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes]);
      this.mod = v27138;
      var v5616 = this.mod;
      v5616.members = dualGlobalScopedMembers;
      var v5617 = this.mod;
      v5617.ambientMembers = dualGlobalScopedAmbientMembers;
      var v5618 = this.mod;
      v5618.containedScope = this.globalScope;
      var v5619 = TypeScript$$23.TypeSymbol;
      var v5620 = TypeScript$$23.globalId;
      var v5621 = this.mod;
      var v27139 = JAMScript.new(v5619, [v5620, -1, 0, -1, v5621]);
      this.gloMod = v27139;
      var v14799 = this.mod;
      var v5622 = v14799.members;
      var v14800 = this.gloMod;
      var v5623 = v14800.name;
      var v5624 = this.gloMod;
      JAMScript.call(v5622.addPublicMember, v5622, [v5623, v5624]);
      var v5625 = this.undefinedType;
      JAMScript.call(this.defineGlobalValue, this, ["undefined", v5625]);
      return
    }
    var v5626 = PersistentGlobalTypeState$$1.prototype;
    v5626.enterPrimitive = v899;
    var v5627 = PersistentGlobalTypeState$$1.prototype;
    v5627.setCollectionMode = v900;
    var v5628 = PersistentGlobalTypeState$$1.prototype;
    v5628.refreshPersistentState = v901;
    var v5629 = PersistentGlobalTypeState$$1.prototype;
    v5629.defineGlobalValue = v902;
    return PersistentGlobalTypeState$$1
  }
  function v898(TypeCheckCollectionMode$$1) {
    TypeCheckCollectionMode$$1._map = [];
    var v5630 = TypeCheckCollectionMode$$1._map;
    v5630[0] = "Resident";
    TypeCheckCollectionMode$$1.Resident = 0;
    var v5631 = TypeCheckCollectionMode$$1._map;
    v5631[1] = "Transient";
    TypeCheckCollectionMode$$1.Transient = 1;
    return
  }
  function v897() {
    function v896(message$$19) {
      this.message = message$$19;
      return
    }
    function v895(message$$18) {
      var v14801 = this.onlyCaptureFirstError;
      var v5633 = !v14801;
      if(v5633) {
        var v5632;
        var v14804 = this.message;
        if(v14804) {
          var v14802 = message$$18 + ":\n\t";
          var v14803 = this.message;
          v5632 = v14802 + v14803
        }else {
          v5632 = message$$18
        }
        this.message = v5632
      }else {
        JAMScript.call(this.setMessage, this, [message$$18])
      }
      return
    }
    function TypeComparisonInfo$$1() {
      this.onlyCaptureFirstError = false;
      var v5634 = TypeScript$$23.TypeRelationshipFlags;
      this.flags = v5634.SuccessfulComparison;
      this.message = "";
      return
    }
    var v5635 = TypeComparisonInfo$$1.prototype;
    v5635.addMessageToFront = v895;
    var v5636 = TypeComparisonInfo$$1.prototype;
    v5636.setMessage = v896;
    return TypeComparisonInfo$$1
  }
  function v894() {
    function v893(arrInstType, checker$$15) {
      var v14805 = this.arrayBase;
      var v5639 = v14805 == null;
      if(v5639) {
        var v14806 = checker$$15.wildElm;
        var v5637 = v14806.type;
        var v14807 = this.arrayType;
        var v5638 = v14807.elementType;
        var v27140 = JAMScript.call(arrInstType.specializeType, arrInstType, [v5637, v5638, checker$$15, true]);
        this.arrayBase = v27140
      }
      return this.arrayBase
    }
    function ArrayCache$$1() {
      this.arrayBase = null;
      return
    }
    var v5640 = ArrayCache$$1.prototype;
    v5640.specialize = v893;
    return ArrayCache$$1
  }
  var ArrayCache = v894();
  TypeScript$$23.ArrayCache = ArrayCache;
  var TypeComparisonInfo = v897();
  TypeScript$$23.TypeComparisonInfo = TypeComparisonInfo;
  var v14808 = TypeScript$$23.TypeCheckCollectionMode;
  var v20171 = !v14808;
  if(v20171) {
    v14808 = TypeScript$$23.TypeCheckCollectionMode = {}
  }
  var v5641 = v14808;
  v898(v5641);
  var TypeCheckCollectionMode = TypeScript$$23.TypeCheckCollectionMode;
  var PersistentGlobalTypeState = v903();
  TypeScript$$23.PersistentGlobalTypeState = PersistentGlobalTypeState;
  var ContextualTypeContext = v904();
  TypeScript$$23.ContextualTypeContext = ContextualTypeContext;
  var ContextualTypingContextStack = v910();
  TypeScript$$23.ContextualTypingContextStack = ContextualTypingContextStack;
  var TypeChecker = v963();
  TypeScript$$23.TypeChecker = TypeChecker;
  return
}
function v892(TypeScript$$22) {
  function v891(_super$$64) {
    function v890() {
      return TokenClass.RegExpLiteral
    }
    function v889() {
      var v5642 = this.regex;
      return JAMScript.call(v5642.toString, v5642, [])
    }
    function RegularExpressionLiteralToken$$1(regex$$3) {
      var v5643 = TokenID.RegularExpressionLiteral;
      JAMScript.call(_super$$64.call, _super$$64, [this, v5643]);
      this.regex = regex$$3;
      return
    }
    JAMScript.call(__extends, null, [RegularExpressionLiteralToken$$1, _super$$64]);
    var v5644 = RegularExpressionLiteralToken$$1.prototype;
    v5644.getText = v889;
    var v5645 = RegularExpressionLiteralToken$$1.prototype;
    v5645.classification = v890;
    return RegularExpressionLiteralToken$$1
  }
  function v888(_super$$63) {
    function v887() {
      return TokenClass.Comment
    }
    function v886() {
      return this.value
    }
    function CommentToken$$1(tokenID, value$$41, isBlock, startPos$$2, line$$11, endsLine$$2) {
      JAMScript.call(_super$$63.call, _super$$63, [this, tokenID]);
      this.value = value$$41;
      this.isBlock = isBlock;
      this.startPos = startPos$$2;
      this.line = line$$11;
      this.endsLine = endsLine$$2;
      return
    }
    JAMScript.call(__extends, null, [CommentToken$$1, _super$$63]);
    var v5646 = CommentToken$$1.prototype;
    v5646.getText = v886;
    var v5647 = CommentToken$$1.prototype;
    v5647.classification = v887;
    return CommentToken$$1
  }
  function v885(_super$$62) {
    function v884() {
      return TokenClass.Whitespace
    }
    function v883() {
      return this.value
    }
    function WhitespaceToken$$1(tokenId$$48, value$$40) {
      JAMScript.call(_super$$62.call, _super$$62, [this, tokenId$$48]);
      this.value = value$$40;
      return
    }
    JAMScript.call(__extends, null, [WhitespaceToken$$1, _super$$62]);
    var v5648 = WhitespaceToken$$1.prototype;
    v5648.getText = v883;
    var v5649 = WhitespaceToken$$1.prototype;
    v5649.classification = v884;
    return WhitespaceToken$$1
  }
  function v882(_super$$61) {
    function v881() {
      return TokenClass.Identifier
    }
    function v880() {
      return this.value
    }
    function IdentifierToken$$1(value$$39, hasEscapeSequence$$3) {
      var v5650 = TokenID.Identifier;
      JAMScript.call(_super$$61.call, _super$$61, [this, v5650]);
      this.value = value$$39;
      this.hasEscapeSequence = hasEscapeSequence$$3;
      return
    }
    JAMScript.call(__extends, null, [IdentifierToken$$1, _super$$61]);
    var v5651 = IdentifierToken$$1.prototype;
    v5651.getText = v880;
    var v5652 = IdentifierToken$$1.prototype;
    v5652.classification = v881;
    return IdentifierToken$$1
  }
  function v879(_super$$60) {
    function v878() {
      return TokenClass.StringLiteral
    }
    function v877() {
      return this.value
    }
    function StringLiteralToken$$1(value$$38) {
      var v5653 = TokenID.StringLiteral;
      JAMScript.call(_super$$60.call, _super$$60, [this, v5653]);
      this.value = value$$38;
      return
    }
    JAMScript.call(__extends, null, [StringLiteralToken$$1, _super$$60]);
    var v5654 = StringLiteralToken$$1.prototype;
    v5654.getText = v877;
    var v5655 = StringLiteralToken$$1.prototype;
    v5655.classification = v878;
    return StringLiteralToken$$1
  }
  function v876(_super$$59) {
    function v875() {
      return TokenClass.NumberLiteral
    }
    function v874() {
      var v5656;
      var v14811 = this.hasEmptyFraction;
      if(v14811) {
        var v20172 = this.value;
        var v14809 = JAMScript.call(v20172.toString, v20172, []);
        v5656 = v14809 + ".0"
      }else {
        var v14810 = this.value;
        v5656 = JAMScript.call(v14810.toString, v14810, [])
      }
      return v5656
    }
    function NumberLiteralToken$$1(value$$37, hasEmptyFraction$$1) {
      var v5657 = TokenID.NumberLiteral;
      JAMScript.call(_super$$59.call, _super$$59, [this, v5657]);
      this.value = value$$37;
      this.hasEmptyFraction = hasEmptyFraction$$1;
      return
    }
    JAMScript.call(__extends, null, [NumberLiteralToken$$1, _super$$59]);
    var v5658 = NumberLiteralToken$$1.prototype;
    v5658.getText = v874;
    var v5659 = NumberLiteralToken$$1.prototype;
    v5659.classification = v875;
    return NumberLiteralToken$$1
  }
  function v873() {
    function v872() {
      var v14812 = this.tokenId;
      var v14813 = TokenID.LimKeyword;
      var v5663 = v14812 <= v14813;
      if(v5663) {
        return TokenClass.Keyword
      }else {
        var v5660 = this.tokenId;
        var tokenInfo$$2 = lookupToken(v5660);
        var v5662 = tokenInfo$$2 != undefined;
        if(v5662) {
          var v20173 = tokenInfo$$2.unopNodeType;
          var v23588 = TypeScript$$22.NodeType;
          var v20174 = v23588.None;
          var v14814 = v20173 != v20174;
          var v20177 = !v14814;
          if(v20177) {
            var v20175 = tokenInfo$$2.binopNodeType;
            var v23589 = TypeScript$$22.NodeType;
            var v20176 = v23589.None;
            v14814 = v20175 != v20176
          }
          var v5661 = v14814;
          if(v5661) {
            return TokenClass.Operator
          }
        }
      }
      return TokenClass.Punctuation
    }
    function v871() {
      var v14815 = TypeScript$$22.tokenTable;
      var v14816 = this.tokenId;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v5664 = v14815[v14816]
      }
      return v5664.text
    }
    function v870(line$$10, outfile$$11) {
      var v20178 = JAMScript.call(this.toString, this, []);
      var v14817 = v20178 + ",on line";
      var v5665 = v14817 + line$$10;
      JAMScript.call(outfile$$11.WriteLine, outfile$$11, [v5665]);
      return
    }
    function v869() {
      var v26063 = this.tokenId;
      var v25259 = "token: " + v26063;
      var v23590 = v25259 + " ";
      var v23591 = JAMScript.call(this.getText, this, []);
      var v20179 = v23590 + v23591;
      var v14818 = v20179 + " (";
      var v20180 = TokenID._map;
      var v20181 = this.tokenId;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v14819 = v20180[v20181]
      }
      var v5666 = v14818 + v14819;
      return v5666 + ")"
    }
    function Token$$1(tokenId$$47) {
      this.tokenId = tokenId$$47;
      return
    }
    var v5667 = Token$$1.prototype;
    v5667.toString = v869;
    var v5668 = Token$$1.prototype;
    v5668.print = v870;
    var v5669 = Token$$1.prototype;
    v5669.getText = v871;
    var v5670 = Token$$1.prototype;
    v5670.classification = v872;
    return Token$$1
  }
  function v868() {
    function SavedToken$$1(tok$$4, minChar$$32, limChar$$11) {
      this.tok = tok$$4;
      this.minChar = minChar$$32;
      this.limChar = limChar$$11;
      return
    }
    return SavedToken$$1
  }
  function v867(TokenClass$$1) {
    TokenClass$$1._map = [];
    var v5671 = TokenClass$$1._map;
    v5671[0] = "Punctuation";
    TokenClass$$1.Punctuation = 0;
    var v5672 = TokenClass$$1._map;
    v5672[1] = "Keyword";
    TokenClass$$1.Keyword = 1;
    var v5673 = TokenClass$$1._map;
    v5673[2] = "Operator";
    TokenClass$$1.Operator = 2;
    var v5674 = TokenClass$$1._map;
    v5674[3] = "Comment";
    TokenClass$$1.Comment = 3;
    var v5675 = TokenClass$$1._map;
    v5675[4] = "Whitespace";
    TokenClass$$1.Whitespace = 4;
    var v5676 = TokenClass$$1._map;
    v5676[5] = "Identifier";
    TokenClass$$1.Identifier = 5;
    var v5677 = TokenClass$$1._map;
    v5677[6] = "NumberLiteral";
    TokenClass$$1.NumberLiteral = 6;
    var v5678 = TokenClass$$1._map;
    v5678[7] = "StringLiteral";
    TokenClass$$1.StringLiteral = 7;
    var v5679 = TokenClass$$1._map;
    v5679[8] = "RegExpLiteral";
    TokenClass$$1.RegExpLiteral = 8;
    return
  }
  function v866() {
    function TokenInfo$$1(tokenId$$46, reservation$$1, binopPrecedence$$1, binopNodeType$$1, unopPrecedence$$1, unopNodeType$$1, text$$22, ers$$2) {
      this.tokenId = tokenId$$46;
      this.reservation = reservation$$1;
      this.binopPrecedence = binopPrecedence$$1;
      this.binopNodeType = binopNodeType$$1;
      this.unopPrecedence = unopPrecedence$$1;
      this.unopNodeType = unopNodeType$$1;
      this.text = text$$22;
      this.ers = ers$$2;
      return
    }
    return TokenInfo$$1
  }
  function v865(Reservation$$1) {
    Reservation$$1._map = [];
    Reservation$$1.None = 0;
    Reservation$$1.Javascript = 1;
    Reservation$$1.JavascriptFuture = 2;
    Reservation$$1.TypeScript = 4;
    Reservation$$1.JavascriptFutureStrict = 8;
    var v5680 = Reservation$$1;
    var v14820 = Reservation$$1.Javascript;
    var v14821 = Reservation$$1.TypeScript;
    v5680.TypeScriptAndJS = v14820 | v14821;
    var v5681 = Reservation$$1;
    var v14822 = Reservation$$1.JavascriptFuture;
    var v14823 = Reservation$$1.TypeScript;
    v5681.TypeScriptAndJSFuture = v14822 | v14823;
    var v5682 = Reservation$$1;
    var v14824 = Reservation$$1.JavascriptFutureStrict;
    var v14825 = Reservation$$1.TypeScript;
    v5682.TypeScriptAndJSFutureStrict = v14824 | v14825;
    return
  }
  function v864(OperatorPrecedence$$1) {
    OperatorPrecedence$$1._map = [];
    var v5683 = OperatorPrecedence$$1._map;
    v5683[0] = "None";
    OperatorPrecedence$$1.None = 0;
    var v5684 = OperatorPrecedence$$1._map;
    v5684[1] = "Comma";
    OperatorPrecedence$$1.Comma = 1;
    var v5685 = OperatorPrecedence$$1._map;
    v5685[2] = "Assignment";
    OperatorPrecedence$$1.Assignment = 2;
    var v5686 = OperatorPrecedence$$1._map;
    v5686[3] = "Conditional";
    OperatorPrecedence$$1.Conditional = 3;
    var v5687 = OperatorPrecedence$$1._map;
    v5687[4] = "LogicalOr";
    OperatorPrecedence$$1.LogicalOr = 4;
    var v5688 = OperatorPrecedence$$1._map;
    v5688[5] = "LogicalAnd";
    OperatorPrecedence$$1.LogicalAnd = 5;
    var v5689 = OperatorPrecedence$$1._map;
    v5689[6] = "BitwiseOr";
    OperatorPrecedence$$1.BitwiseOr = 6;
    var v5690 = OperatorPrecedence$$1._map;
    v5690[7] = "BitwiseExclusiveOr";
    OperatorPrecedence$$1.BitwiseExclusiveOr = 7;
    var v5691 = OperatorPrecedence$$1._map;
    v5691[8] = "BitwiseAnd";
    OperatorPrecedence$$1.BitwiseAnd = 8;
    var v5692 = OperatorPrecedence$$1._map;
    v5692[9] = "Equality";
    OperatorPrecedence$$1.Equality = 9;
    var v5693 = OperatorPrecedence$$1._map;
    v5693[10] = "Relational";
    OperatorPrecedence$$1.Relational = 10;
    var v5694 = OperatorPrecedence$$1._map;
    v5694[11] = "Shift";
    OperatorPrecedence$$1.Shift = 11;
    var v5695 = OperatorPrecedence$$1._map;
    v5695[12] = "Additive";
    OperatorPrecedence$$1.Additive = 12;
    var v5696 = OperatorPrecedence$$1._map;
    v5696[13] = "Multiplicative";
    OperatorPrecedence$$1.Multiplicative = 13;
    var v5697 = OperatorPrecedence$$1._map;
    v5697[14] = "Unary";
    OperatorPrecedence$$1.Unary = 14;
    var v5698 = OperatorPrecedence$$1._map;
    v5698[15] = "Lim";
    OperatorPrecedence$$1.Lim = 15;
    return
  }
  function v863(TokenID$$1) {
    TokenID$$1._map = [];
    var v5699 = TokenID$$1._map;
    v5699[0] = "Any";
    TokenID$$1.Any = 0;
    var v5700 = TokenID$$1._map;
    v5700[1] = "Bool";
    TokenID$$1.Bool = 1;
    var v5701 = TokenID$$1._map;
    v5701[2] = "Break";
    TokenID$$1.Break = 2;
    var v5702 = TokenID$$1._map;
    v5702[3] = "Case";
    TokenID$$1.Case = 3;
    var v5703 = TokenID$$1._map;
    v5703[4] = "Catch";
    TokenID$$1.Catch = 4;
    var v5704 = TokenID$$1._map;
    v5704[5] = "Class";
    TokenID$$1.Class = 5;
    var v5705 = TokenID$$1._map;
    v5705[6] = "Const";
    TokenID$$1.Const = 6;
    var v5706 = TokenID$$1._map;
    v5706[7] = "Continue";
    TokenID$$1.Continue = 7;
    var v5707 = TokenID$$1._map;
    v5707[8] = "Debugger";
    TokenID$$1.Debugger = 8;
    var v5708 = TokenID$$1._map;
    v5708[9] = "Default";
    TokenID$$1.Default = 9;
    var v5709 = TokenID$$1._map;
    v5709[10] = "Delete";
    TokenID$$1.Delete = 10;
    var v5710 = TokenID$$1._map;
    v5710[11] = "Do";
    TokenID$$1.Do = 11;
    var v5711 = TokenID$$1._map;
    v5711[12] = "Else";
    TokenID$$1.Else = 12;
    var v5712 = TokenID$$1._map;
    v5712[13] = "Enum";
    TokenID$$1.Enum = 13;
    var v5713 = TokenID$$1._map;
    v5713[14] = "Export";
    TokenID$$1.Export = 14;
    var v5714 = TokenID$$1._map;
    v5714[15] = "Extends";
    TokenID$$1.Extends = 15;
    var v5715 = TokenID$$1._map;
    v5715[16] = "Declare";
    TokenID$$1.Declare = 16;
    var v5716 = TokenID$$1._map;
    v5716[17] = "False";
    TokenID$$1.False = 17;
    var v5717 = TokenID$$1._map;
    v5717[18] = "Finally";
    TokenID$$1.Finally = 18;
    var v5718 = TokenID$$1._map;
    v5718[19] = "For";
    TokenID$$1.For = 19;
    var v5719 = TokenID$$1._map;
    v5719[20] = "Function";
    TokenID$$1.Function = 20;
    var v5720 = TokenID$$1._map;
    v5720[21] = "Constructor";
    TokenID$$1.Constructor = 21;
    var v5721 = TokenID$$1._map;
    v5721[22] = "Get";
    TokenID$$1.Get = 22;
    var v5722 = TokenID$$1._map;
    v5722[23] = "If";
    TokenID$$1.If = 23;
    var v5723 = TokenID$$1._map;
    v5723[24] = "Implements";
    TokenID$$1.Implements = 24;
    var v5724 = TokenID$$1._map;
    v5724[25] = "Import";
    TokenID$$1.Import = 25;
    var v5725 = TokenID$$1._map;
    v5725[26] = "In";
    TokenID$$1.In = 26;
    var v5726 = TokenID$$1._map;
    v5726[27] = "InstanceOf";
    TokenID$$1.InstanceOf = 27;
    var v5727 = TokenID$$1._map;
    v5727[28] = "Interface";
    TokenID$$1.Interface = 28;
    var v5728 = TokenID$$1._map;
    v5728[29] = "Let";
    TokenID$$1.Let = 29;
    var v5729 = TokenID$$1._map;
    v5729[30] = "Module";
    TokenID$$1.Module = 30;
    var v5730 = TokenID$$1._map;
    v5730[31] = "New";
    TokenID$$1.New = 31;
    var v5731 = TokenID$$1._map;
    v5731[32] = "Number";
    TokenID$$1.Number = 32;
    var v5732 = TokenID$$1._map;
    v5732[33] = "Null";
    TokenID$$1.Null = 33;
    var v5733 = TokenID$$1._map;
    v5733[34] = "Package";
    TokenID$$1.Package = 34;
    var v5734 = TokenID$$1._map;
    v5734[35] = "Private";
    TokenID$$1.Private = 35;
    var v5735 = TokenID$$1._map;
    v5735[36] = "Protected";
    TokenID$$1.Protected = 36;
    var v5736 = TokenID$$1._map;
    v5736[37] = "Public";
    TokenID$$1.Public = 37;
    var v5737 = TokenID$$1._map;
    v5737[38] = "Return";
    TokenID$$1.Return = 38;
    var v5738 = TokenID$$1._map;
    v5738[39] = "Set";
    TokenID$$1.Set = 39;
    var v5739 = TokenID$$1._map;
    v5739[40] = "Static";
    TokenID$$1.Static = 40;
    var v5740 = TokenID$$1._map;
    v5740[41] = "String";
    TokenID$$1.String = 41;
    var v5741 = TokenID$$1._map;
    v5741[42] = "Super";
    TokenID$$1.Super = 42;
    var v5742 = TokenID$$1._map;
    v5742[43] = "Switch";
    TokenID$$1.Switch = 43;
    var v5743 = TokenID$$1._map;
    v5743[44] = "This";
    TokenID$$1.This = 44;
    var v5744 = TokenID$$1._map;
    v5744[45] = "Throw";
    TokenID$$1.Throw = 45;
    var v5745 = TokenID$$1._map;
    v5745[46] = "True";
    TokenID$$1.True = 46;
    var v5746 = TokenID$$1._map;
    v5746[47] = "Try";
    TokenID$$1.Try = 47;
    var v5747 = TokenID$$1._map;
    v5747[48] = "TypeOf";
    TokenID$$1.TypeOf = 48;
    var v5748 = TokenID$$1._map;
    v5748[49] = "Var";
    TokenID$$1.Var = 49;
    var v5749 = TokenID$$1._map;
    v5749[50] = "Void";
    TokenID$$1.Void = 50;
    var v5750 = TokenID$$1._map;
    v5750[51] = "With";
    TokenID$$1.With = 51;
    var v5751 = TokenID$$1._map;
    v5751[52] = "While";
    TokenID$$1.While = 52;
    var v5752 = TokenID$$1._map;
    v5752[53] = "Yield";
    TokenID$$1.Yield = 53;
    var v5753 = TokenID$$1._map;
    v5753[54] = "Semicolon";
    TokenID$$1.Semicolon = 54;
    var v5754 = TokenID$$1._map;
    v5754[55] = "OpenParen";
    TokenID$$1.OpenParen = 55;
    var v5755 = TokenID$$1._map;
    v5755[56] = "CloseParen";
    TokenID$$1.CloseParen = 56;
    var v5756 = TokenID$$1._map;
    v5756[57] = "OpenBracket";
    TokenID$$1.OpenBracket = 57;
    var v5757 = TokenID$$1._map;
    v5757[58] = "CloseBracket";
    TokenID$$1.CloseBracket = 58;
    var v5758 = TokenID$$1._map;
    v5758[59] = "OpenBrace";
    TokenID$$1.OpenBrace = 59;
    var v5759 = TokenID$$1._map;
    v5759[60] = "CloseBrace";
    TokenID$$1.CloseBrace = 60;
    var v5760 = TokenID$$1._map;
    v5760[61] = "Comma";
    TokenID$$1.Comma = 61;
    var v5761 = TokenID$$1._map;
    v5761[62] = "Equals";
    TokenID$$1.Equals = 62;
    var v5762 = TokenID$$1._map;
    v5762[63] = "PlusEquals";
    TokenID$$1.PlusEquals = 63;
    var v5763 = TokenID$$1._map;
    v5763[64] = "MinusEquals";
    TokenID$$1.MinusEquals = 64;
    var v5764 = TokenID$$1._map;
    v5764[65] = "AsteriskEquals";
    TokenID$$1.AsteriskEquals = 65;
    var v5765 = TokenID$$1._map;
    v5765[66] = "SlashEquals";
    TokenID$$1.SlashEquals = 66;
    var v5766 = TokenID$$1._map;
    v5766[67] = "PercentEquals";
    TokenID$$1.PercentEquals = 67;
    var v5767 = TokenID$$1._map;
    v5767[68] = "AmpersandEquals";
    TokenID$$1.AmpersandEquals = 68;
    var v5768 = TokenID$$1._map;
    v5768[69] = "CaretEquals";
    TokenID$$1.CaretEquals = 69;
    var v5769 = TokenID$$1._map;
    v5769[70] = "BarEquals";
    TokenID$$1.BarEquals = 70;
    var v5770 = TokenID$$1._map;
    v5770[71] = "LessThanLessThanEquals";
    TokenID$$1.LessThanLessThanEquals = 71;
    var v5771 = TokenID$$1._map;
    v5771[72] = "GreaterThanGreaterThanEquals";
    TokenID$$1.GreaterThanGreaterThanEquals = 72;
    var v5772 = TokenID$$1._map;
    v5772[73] = "GreaterThanGreaterThanGreaterThanEquals";
    TokenID$$1.GreaterThanGreaterThanGreaterThanEquals = 73;
    var v5773 = TokenID$$1._map;
    v5773[74] = "Question";
    TokenID$$1.Question = 74;
    var v5774 = TokenID$$1._map;
    v5774[75] = "Colon";
    TokenID$$1.Colon = 75;
    var v5775 = TokenID$$1._map;
    v5775[76] = "BarBar";
    TokenID$$1.BarBar = 76;
    var v5776 = TokenID$$1._map;
    v5776[77] = "AmpersandAmpersand";
    TokenID$$1.AmpersandAmpersand = 77;
    var v5777 = TokenID$$1._map;
    v5777[78] = "Bar";
    TokenID$$1.Bar = 78;
    var v5778 = TokenID$$1._map;
    v5778[79] = "Caret";
    TokenID$$1.Caret = 79;
    var v5779 = TokenID$$1._map;
    v5779[80] = "And";
    TokenID$$1.And = 80;
    var v5780 = TokenID$$1._map;
    v5780[81] = "EqualsEquals";
    TokenID$$1.EqualsEquals = 81;
    var v5781 = TokenID$$1._map;
    v5781[82] = "ExclamationEquals";
    TokenID$$1.ExclamationEquals = 82;
    var v5782 = TokenID$$1._map;
    v5782[83] = "EqualsEqualsEquals";
    TokenID$$1.EqualsEqualsEquals = 83;
    var v5783 = TokenID$$1._map;
    v5783[84] = "ExclamationEqualsEquals";
    TokenID$$1.ExclamationEqualsEquals = 84;
    var v5784 = TokenID$$1._map;
    v5784[85] = "LessThan";
    TokenID$$1.LessThan = 85;
    var v5785 = TokenID$$1._map;
    v5785[86] = "LessThanEquals";
    TokenID$$1.LessThanEquals = 86;
    var v5786 = TokenID$$1._map;
    v5786[87] = "GreaterThan";
    TokenID$$1.GreaterThan = 87;
    var v5787 = TokenID$$1._map;
    v5787[88] = "GreaterThanEquals";
    TokenID$$1.GreaterThanEquals = 88;
    var v5788 = TokenID$$1._map;
    v5788[89] = "LessThanLessThan";
    TokenID$$1.LessThanLessThan = 89;
    var v5789 = TokenID$$1._map;
    v5789[90] = "GreaterThanGreaterThan";
    TokenID$$1.GreaterThanGreaterThan = 90;
    var v5790 = TokenID$$1._map;
    v5790[91] = "GreaterThanGreaterThanGreaterThan";
    TokenID$$1.GreaterThanGreaterThanGreaterThan = 91;
    var v5791 = TokenID$$1._map;
    v5791[92] = "Plus";
    TokenID$$1.Plus = 92;
    var v5792 = TokenID$$1._map;
    v5792[93] = "Minus";
    TokenID$$1.Minus = 93;
    var v5793 = TokenID$$1._map;
    v5793[94] = "Asterisk";
    TokenID$$1.Asterisk = 94;
    var v5794 = TokenID$$1._map;
    v5794[95] = "Slash";
    TokenID$$1.Slash = 95;
    var v5795 = TokenID$$1._map;
    v5795[96] = "Percent";
    TokenID$$1.Percent = 96;
    var v5796 = TokenID$$1._map;
    v5796[97] = "Tilde";
    TokenID$$1.Tilde = 97;
    var v5797 = TokenID$$1._map;
    v5797[98] = "Exclamation";
    TokenID$$1.Exclamation = 98;
    var v5798 = TokenID$$1._map;
    v5798[99] = "PlusPlus";
    TokenID$$1.PlusPlus = 99;
    var v5799 = TokenID$$1._map;
    v5799[100] = "MinusMinus";
    TokenID$$1.MinusMinus = 100;
    var v5800 = TokenID$$1._map;
    v5800[101] = "Dot";
    TokenID$$1.Dot = 101;
    var v5801 = TokenID$$1._map;
    v5801[102] = "DotDotDot";
    TokenID$$1.DotDotDot = 102;
    var v5802 = TokenID$$1._map;
    v5802[103] = "Error";
    TokenID$$1.Error = 103;
    var v5803 = TokenID$$1._map;
    v5803[104] = "EndOfFile";
    TokenID$$1.EndOfFile = 104;
    var v5804 = TokenID$$1._map;
    v5804[105] = "EqualsGreaterThan";
    TokenID$$1.EqualsGreaterThan = 105;
    var v5805 = TokenID$$1._map;
    v5805[106] = "Identifier";
    TokenID$$1.Identifier = 106;
    var v5806 = TokenID$$1._map;
    v5806[107] = "StringLiteral";
    TokenID$$1.StringLiteral = 107;
    var v5807 = TokenID$$1._map;
    v5807[108] = "RegularExpressionLiteral";
    TokenID$$1.RegularExpressionLiteral = 108;
    var v5808 = TokenID$$1._map;
    v5808[109] = "NumberLiteral";
    TokenID$$1.NumberLiteral = 109;
    var v5809 = TokenID$$1._map;
    v5809[110] = "Whitespace";
    TokenID$$1.Whitespace = 110;
    var v5810 = TokenID$$1._map;
    v5810[111] = "Comment";
    TokenID$$1.Comment = 111;
    var v5811 = TokenID$$1._map;
    v5811[112] = "Lim";
    TokenID$$1.Lim = 112;
    var v5812 = TokenID$$1;
    v5812.LimFixed = TokenID$$1.EqualsGreaterThan;
    var v5813 = TokenID$$1;
    v5813.LimKeyword = TokenID$$1.Yield;
    return
  }
  function setTokenInfo(tokenId$$44, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text$$21, ers$$1) {
    var v5821 = tokenId$$44 !== undefined;
    if(v5821) {
      var v5814 = TypeScript$$22.tokenTable;
      var v5815 = tokenId$$44;
      var v27141 = JAMScript.new(TokenInfo, [tokenId$$44, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text$$21, ers$$1]);
      JAMScript.set(v5814, v5815, v27141);
      var v20182 = TypeScript$$22.NodeType;
      var v14826 = v20182.None;
      var v5818 = binopNodeType != v14826;
      if(v5818) {
        var v5816 = TypeScript$$22.nodeTypeTable;
        JAMScript.set(v5816, binopNodeType, text$$21);
        var v5817 = TypeScript$$22.nodeTypeToTokTable;
        JAMScript.set(v5817, binopNodeType, tokenId$$44)
      }
      var v20183 = TypeScript$$22.NodeType;
      var v14827 = v20183.None;
      var v5820 = unopNodeType != v14827;
      if(v5820) {
        var v5819 = TypeScript$$22.nodeTypeTable;
        JAMScript.set(v5819, unopNodeType, text$$21)
      }
    }
    return
  }
  function lookupToken(tokenId$$45) {
    var v5822 = TypeScript$$22.tokenTable;
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      return v5822[tokenId$$45]
    }
  }
  function initializeStaticTokens() {
    var i$$73 = 0;
    var v14828 = TokenID.LimFixed;
    var v5825 = i$$73 <= v14828;
    for(;v5825;) {
      var v5823 = TypeScript$$22.staticTokens;
      var v5824 = i$$73;
      var v27142 = JAMScript.new(Token, [i$$73]);
      v5823[v5824] = v27142;
      i$$73 = i$$73 + 1;
      var v14829 = TokenID.LimFixed;
      v5825 = i$$73 <= v14829
    }
    return
  }
  var v14830 = TypeScript$$22.TokenID;
  var v20184 = !v14830;
  if(v20184) {
    v14830 = TypeScript$$22.TokenID = {}
  }
  var v5826 = v14830;
  v863(v5826);
  var TokenID = TypeScript$$22.TokenID;
  var v27143 = new Array;
  TypeScript$$22.tokenTable = v27143;
  var v27144 = new Array;
  TypeScript$$22.nodeTypeTable = v27144;
  var v27145 = new Array;
  TypeScript$$22.nodeTypeToTokTable = v27145;
  var v27146 = new Array;
  TypeScript$$22.noRegexTable = v27146;
  var v5827 = TypeScript$$22.noRegexTable;
  var v5828 = TokenID.Identifier;
  JAMScript.set(v5827, v5828, true);
  var v5829 = TypeScript$$22.noRegexTable;
  var v5830 = TokenID.StringLiteral;
  JAMScript.set(v5829, v5830, true);
  var v5831 = TypeScript$$22.noRegexTable;
  var v5832 = TokenID.NumberLiteral;
  JAMScript.set(v5831, v5832, true);
  var v5833 = TypeScript$$22.noRegexTable;
  var v5834 = TokenID.RegularExpressionLiteral;
  JAMScript.set(v5833, v5834, true);
  var v5835 = TypeScript$$22.noRegexTable;
  var v5836 = TokenID.This;
  JAMScript.set(v5835, v5836, true);
  var v5837 = TypeScript$$22.noRegexTable;
  var v5838 = TokenID.PlusPlus;
  JAMScript.set(v5837, v5838, true);
  var v5839 = TypeScript$$22.noRegexTable;
  var v5840 = TokenID.MinusMinus;
  JAMScript.set(v5839, v5840, true);
  var v5841 = TypeScript$$22.noRegexTable;
  var v5842 = TokenID.CloseParen;
  JAMScript.set(v5841, v5842, true);
  var v5843 = TypeScript$$22.noRegexTable;
  var v5844 = TokenID.CloseBracket;
  JAMScript.set(v5843, v5844, true);
  var v5845 = TypeScript$$22.noRegexTable;
  var v5846 = TokenID.CloseBrace;
  JAMScript.set(v5845, v5846, true);
  var v5847 = TypeScript$$22.noRegexTable;
  var v5848 = TokenID.True;
  JAMScript.set(v5847, v5848, true);
  var v5849 = TypeScript$$22.noRegexTable;
  var v5850 = TokenID.False;
  JAMScript.set(v5849, v5850, true);
  var v14831 = TypeScript$$22.OperatorPrecedence;
  var v20185 = !v14831;
  if(v20185) {
    v14831 = TypeScript$$22.OperatorPrecedence = {}
  }
  var v5851 = v14831;
  v864(v5851);
  var OperatorPrecedence = TypeScript$$22.OperatorPrecedence;
  var v14832 = TypeScript$$22.Reservation;
  var v20186 = !v14832;
  if(v20186) {
    v14832 = TypeScript$$22.Reservation = {}
  }
  var v5852 = v14832;
  v865(v5852);
  var Reservation = TypeScript$$22.Reservation;
  var TokenInfo = v866();
  TypeScript$$22.TokenInfo = TokenInfo;
  var v5853 = TokenID.Any;
  var v5854 = Reservation.TypeScript;
  var v5855 = OperatorPrecedence.None;
  var v14833 = TypeScript$$22.NodeType;
  var v5856 = v14833.None;
  var v5857 = OperatorPrecedence.None;
  var v14834 = TypeScript$$22.NodeType;
  var v5858 = v14834.None;
  var v14835 = TypeScript$$22.ErrorRecoverySet;
  var v5859 = v14835.PrimType;
  setTokenInfo(v5853, v5854, v5855, v5856, v5857, v5858, "any", v5859);
  var v5860 = TokenID.Bool;
  var v5861 = Reservation.TypeScript;
  var v5862 = OperatorPrecedence.None;
  var v14836 = TypeScript$$22.NodeType;
  var v5863 = v14836.None;
  var v5864 = OperatorPrecedence.None;
  var v14837 = TypeScript$$22.NodeType;
  var v5865 = v14837.None;
  var v14838 = TypeScript$$22.ErrorRecoverySet;
  var v5866 = v14838.PrimType;
  setTokenInfo(v5860, v5861, v5862, v5863, v5864, v5865, "bool", v5866);
  var v5867 = TokenID.Break;
  var v5868 = Reservation.TypeScriptAndJS;
  var v5869 = OperatorPrecedence.None;
  var v14839 = TypeScript$$22.NodeType;
  var v5870 = v14839.None;
  var v5871 = OperatorPrecedence.None;
  var v14840 = TypeScript$$22.NodeType;
  var v5872 = v14840.None;
  var v14841 = TypeScript$$22.ErrorRecoverySet;
  var v5873 = v14841.Stmt;
  setTokenInfo(v5867, v5868, v5869, v5870, v5871, v5872, "break", v5873);
  var v5874 = TokenID.Case;
  var v5875 = Reservation.TypeScriptAndJS;
  var v5876 = OperatorPrecedence.None;
  var v14842 = TypeScript$$22.NodeType;
  var v5877 = v14842.None;
  var v5878 = OperatorPrecedence.None;
  var v14843 = TypeScript$$22.NodeType;
  var v5879 = v14843.None;
  var v14844 = TypeScript$$22.ErrorRecoverySet;
  var v5880 = v14844.SCase;
  setTokenInfo(v5874, v5875, v5876, v5877, v5878, v5879, "case", v5880);
  var v5881 = TokenID.Catch;
  var v5882 = Reservation.TypeScriptAndJS;
  var v5883 = OperatorPrecedence.None;
  var v14845 = TypeScript$$22.NodeType;
  var v5884 = v14845.None;
  var v5885 = OperatorPrecedence.None;
  var v14846 = TypeScript$$22.NodeType;
  var v5886 = v14846.None;
  var v14847 = TypeScript$$22.ErrorRecoverySet;
  var v5887 = v14847.Catch;
  setTokenInfo(v5881, v5882, v5883, v5884, v5885, v5886, "catch", v5887);
  var v5888 = TokenID.Class;
  var v5889 = Reservation.TypeScriptAndJSFuture;
  var v5890 = OperatorPrecedence.None;
  var v14848 = TypeScript$$22.NodeType;
  var v5891 = v14848.None;
  var v5892 = OperatorPrecedence.None;
  var v14849 = TypeScript$$22.NodeType;
  var v5893 = v14849.None;
  var v14850 = TypeScript$$22.ErrorRecoverySet;
  var v5894 = v14850.TypeScriptS;
  setTokenInfo(v5888, v5889, v5890, v5891, v5892, v5893, "class", v5894);
  var v5895 = TokenID.Const;
  var v5896 = Reservation.TypeScriptAndJSFuture;
  var v5897 = OperatorPrecedence.None;
  var v14851 = TypeScript$$22.NodeType;
  var v5898 = v14851.None;
  var v5899 = OperatorPrecedence.None;
  var v14852 = TypeScript$$22.NodeType;
  var v5900 = v14852.None;
  var v14853 = TypeScript$$22.ErrorRecoverySet;
  var v5901 = v14853.Var;
  setTokenInfo(v5895, v5896, v5897, v5898, v5899, v5900, "const", v5901);
  var v5902 = TokenID.Continue;
  var v5903 = Reservation.TypeScriptAndJS;
  var v5904 = OperatorPrecedence.None;
  var v14854 = TypeScript$$22.NodeType;
  var v5905 = v14854.None;
  var v5906 = OperatorPrecedence.None;
  var v14855 = TypeScript$$22.NodeType;
  var v5907 = v14855.None;
  var v14856 = TypeScript$$22.ErrorRecoverySet;
  var v5908 = v14856.Stmt;
  setTokenInfo(v5902, v5903, v5904, v5905, v5906, v5907, "continue", v5908);
  var v5909 = TokenID.Debugger;
  var v5910 = Reservation.TypeScriptAndJS;
  var v5911 = OperatorPrecedence.None;
  var v14857 = TypeScript$$22.NodeType;
  var v5912 = v14857.None;
  var v5913 = OperatorPrecedence.None;
  var v14858 = TypeScript$$22.NodeType;
  var v5914 = v14858.Debugger;
  var v14859 = TypeScript$$22.ErrorRecoverySet;
  var v5915 = v14859.Stmt;
  setTokenInfo(v5909, v5910, v5911, v5912, v5913, v5914, "debugger", v5915);
  var v5916 = TokenID.Default;
  var v5917 = Reservation.TypeScriptAndJS;
  var v5918 = OperatorPrecedence.None;
  var v14860 = TypeScript$$22.NodeType;
  var v5919 = v14860.None;
  var v5920 = OperatorPrecedence.None;
  var v14861 = TypeScript$$22.NodeType;
  var v5921 = v14861.None;
  var v14862 = TypeScript$$22.ErrorRecoverySet;
  var v5922 = v14862.SCase;
  setTokenInfo(v5916, v5917, v5918, v5919, v5920, v5921, "default", v5922);
  var v5923 = TokenID.Delete;
  var v5924 = Reservation.TypeScriptAndJS;
  var v5925 = OperatorPrecedence.None;
  var v14863 = TypeScript$$22.NodeType;
  var v5926 = v14863.None;
  var v5927 = OperatorPrecedence.Unary;
  var v14864 = TypeScript$$22.NodeType;
  var v5928 = v14864.Delete;
  var v14865 = TypeScript$$22.ErrorRecoverySet;
  var v5929 = v14865.Prefix;
  setTokenInfo(v5923, v5924, v5925, v5926, v5927, v5928, "delete", v5929);
  var v5930 = TokenID.Do;
  var v5931 = Reservation.TypeScriptAndJS;
  var v5932 = OperatorPrecedence.None;
  var v14866 = TypeScript$$22.NodeType;
  var v5933 = v14866.None;
  var v5934 = OperatorPrecedence.None;
  var v14867 = TypeScript$$22.NodeType;
  var v5935 = v14867.None;
  var v14868 = TypeScript$$22.ErrorRecoverySet;
  var v5936 = v14868.Stmt;
  setTokenInfo(v5930, v5931, v5932, v5933, v5934, v5935, "do", v5936);
  var v5937 = TokenID.Else;
  var v5938 = Reservation.TypeScriptAndJS;
  var v5939 = OperatorPrecedence.None;
  var v14869 = TypeScript$$22.NodeType;
  var v5940 = v14869.None;
  var v5941 = OperatorPrecedence.None;
  var v14870 = TypeScript$$22.NodeType;
  var v5942 = v14870.None;
  var v14871 = TypeScript$$22.ErrorRecoverySet;
  var v5943 = v14871.Else;
  setTokenInfo(v5937, v5938, v5939, v5940, v5941, v5942, "else", v5943);
  var v5944 = TokenID.Enum;
  var v5945 = Reservation.TypeScriptAndJSFuture;
  var v5946 = OperatorPrecedence.None;
  var v14872 = TypeScript$$22.NodeType;
  var v5947 = v14872.None;
  var v5948 = OperatorPrecedence.None;
  var v14873 = TypeScript$$22.NodeType;
  var v5949 = v14873.None;
  var v14874 = TypeScript$$22.ErrorRecoverySet;
  var v5950 = v14874.TypeScriptS;
  setTokenInfo(v5944, v5945, v5946, v5947, v5948, v5949, "enum", v5950);
  var v5951 = TokenID.Export;
  var v5952 = Reservation.TypeScriptAndJSFuture;
  var v5953 = OperatorPrecedence.None;
  var v14875 = TypeScript$$22.NodeType;
  var v5954 = v14875.None;
  var v5955 = OperatorPrecedence.None;
  var v14876 = TypeScript$$22.NodeType;
  var v5956 = v14876.None;
  var v14877 = TypeScript$$22.ErrorRecoverySet;
  var v5957 = v14877.TypeScriptS;
  setTokenInfo(v5951, v5952, v5953, v5954, v5955, v5956, "export", v5957);
  var v5958 = TokenID.Extends;
  var v5959 = Reservation.TypeScriptAndJSFuture;
  var v5960 = OperatorPrecedence.None;
  var v14878 = TypeScript$$22.NodeType;
  var v5961 = v14878.None;
  var v5962 = OperatorPrecedence.None;
  var v14879 = TypeScript$$22.NodeType;
  var v5963 = v14879.None;
  var v14880 = TypeScript$$22.ErrorRecoverySet;
  var v5964 = v14880.None;
  setTokenInfo(v5958, v5959, v5960, v5961, v5962, v5963, "extends", v5964);
  var v5965 = TokenID.Declare;
  var v5966 = Reservation.TypeScript;
  var v5967 = OperatorPrecedence.None;
  var v14881 = TypeScript$$22.NodeType;
  var v5968 = v14881.None;
  var v5969 = OperatorPrecedence.None;
  var v14882 = TypeScript$$22.NodeType;
  var v5970 = v14882.None;
  var v14883 = TypeScript$$22.ErrorRecoverySet;
  var v5971 = v14883.Stmt;
  setTokenInfo(v5965, v5966, v5967, v5968, v5969, v5970, "declare", v5971);
  var v5972 = TokenID.False;
  var v5973 = Reservation.TypeScriptAndJS;
  var v5974 = OperatorPrecedence.None;
  var v14884 = TypeScript$$22.NodeType;
  var v5975 = v14884.None;
  var v5976 = OperatorPrecedence.None;
  var v14885 = TypeScript$$22.NodeType;
  var v5977 = v14885.None;
  var v14886 = TypeScript$$22.ErrorRecoverySet;
  var v5978 = v14886.RLit;
  setTokenInfo(v5972, v5973, v5974, v5975, v5976, v5977, "false", v5978);
  var v5979 = TokenID.Finally;
  var v5980 = Reservation.TypeScriptAndJS;
  var v5981 = OperatorPrecedence.None;
  var v14887 = TypeScript$$22.NodeType;
  var v5982 = v14887.None;
  var v5983 = OperatorPrecedence.None;
  var v14888 = TypeScript$$22.NodeType;
  var v5984 = v14888.None;
  var v14889 = TypeScript$$22.ErrorRecoverySet;
  var v5985 = v14889.Catch;
  setTokenInfo(v5979, v5980, v5981, v5982, v5983, v5984, "finally", v5985);
  var v5986 = TokenID.For;
  var v5987 = Reservation.TypeScriptAndJS;
  var v5988 = OperatorPrecedence.None;
  var v14890 = TypeScript$$22.NodeType;
  var v5989 = v14890.None;
  var v5990 = OperatorPrecedence.None;
  var v14891 = TypeScript$$22.NodeType;
  var v5991 = v14891.None;
  var v14892 = TypeScript$$22.ErrorRecoverySet;
  var v5992 = v14892.Stmt;
  setTokenInfo(v5986, v5987, v5988, v5989, v5990, v5991, "for", v5992);
  var v5993 = TokenID.Function;
  var v5994 = Reservation.TypeScriptAndJS;
  var v5995 = OperatorPrecedence.None;
  var v14893 = TypeScript$$22.NodeType;
  var v5996 = v14893.None;
  var v5997 = OperatorPrecedence.None;
  var v14894 = TypeScript$$22.NodeType;
  var v5998 = v14894.None;
  var v14895 = TypeScript$$22.ErrorRecoverySet;
  var v5999 = v14895.Func;
  setTokenInfo(v5993, v5994, v5995, v5996, v5997, v5998, "function", v5999);
  var v6000 = TokenID.Constructor;
  var v6001 = Reservation.TypeScriptAndJSFutureStrict;
  var v6002 = OperatorPrecedence.None;
  var v14896 = TypeScript$$22.NodeType;
  var v6003 = v14896.None;
  var v6004 = OperatorPrecedence.None;
  var v14897 = TypeScript$$22.NodeType;
  var v6005 = v14897.None;
  var v14898 = TypeScript$$22.ErrorRecoverySet;
  var v6006 = v14898.Func;
  setTokenInfo(v6000, v6001, v6002, v6003, v6004, v6005, "constructor", v6006);
  var v6007 = TokenID.Get;
  var v6008 = Reservation.TypeScript;
  var v6009 = OperatorPrecedence.None;
  var v14899 = TypeScript$$22.NodeType;
  var v6010 = v14899.None;
  var v6011 = OperatorPrecedence.None;
  var v14900 = TypeScript$$22.NodeType;
  var v6012 = v14900.None;
  var v14901 = TypeScript$$22.ErrorRecoverySet;
  var v6013 = v14901.Func;
  setTokenInfo(v6007, v6008, v6009, v6010, v6011, v6012, "get", v6013);
  var v6014 = TokenID.Set;
  var v6015 = Reservation.TypeScript;
  var v6016 = OperatorPrecedence.None;
  var v14902 = TypeScript$$22.NodeType;
  var v6017 = v14902.None;
  var v6018 = OperatorPrecedence.None;
  var v14903 = TypeScript$$22.NodeType;
  var v6019 = v14903.None;
  var v14904 = TypeScript$$22.ErrorRecoverySet;
  var v6020 = v14904.Func;
  setTokenInfo(v6014, v6015, v6016, v6017, v6018, v6019, "set", v6020);
  var v6021 = TokenID.If;
  var v6022 = Reservation.TypeScriptAndJS;
  var v6023 = OperatorPrecedence.None;
  var v14905 = TypeScript$$22.NodeType;
  var v6024 = v14905.None;
  var v6025 = OperatorPrecedence.None;
  var v14906 = TypeScript$$22.NodeType;
  var v6026 = v14906.None;
  var v14907 = TypeScript$$22.ErrorRecoverySet;
  var v6027 = v14907.Stmt;
  setTokenInfo(v6021, v6022, v6023, v6024, v6025, v6026, "if", v6027);
  var v6028 = TokenID.Implements;
  var v6029 = Reservation.TypeScriptAndJSFutureStrict;
  var v6030 = OperatorPrecedence.None;
  var v14908 = TypeScript$$22.NodeType;
  var v6031 = v14908.None;
  var v6032 = OperatorPrecedence.None;
  var v14909 = TypeScript$$22.NodeType;
  var v6033 = v14909.None;
  var v14910 = TypeScript$$22.ErrorRecoverySet;
  var v6034 = v14910.None;
  setTokenInfo(v6028, v6029, v6030, v6031, v6032, v6033, "implements", v6034);
  var v6035 = TokenID.Import;
  var v6036 = Reservation.TypeScriptAndJSFuture;
  var v6037 = OperatorPrecedence.None;
  var v14911 = TypeScript$$22.NodeType;
  var v6038 = v14911.None;
  var v6039 = OperatorPrecedence.None;
  var v14912 = TypeScript$$22.NodeType;
  var v6040 = v14912.None;
  var v14913 = TypeScript$$22.ErrorRecoverySet;
  var v6041 = v14913.TypeScriptS;
  setTokenInfo(v6035, v6036, v6037, v6038, v6039, v6040, "import", v6041);
  var v6042 = TokenID.In;
  var v6043 = Reservation.TypeScriptAndJS;
  var v6044 = OperatorPrecedence.Relational;
  var v14914 = TypeScript$$22.NodeType;
  var v6045 = v14914.In;
  var v6046 = OperatorPrecedence.None;
  var v14915 = TypeScript$$22.NodeType;
  var v6047 = v14915.None;
  var v14916 = TypeScript$$22.ErrorRecoverySet;
  var v6048 = v14916.None;
  setTokenInfo(v6042, v6043, v6044, v6045, v6046, v6047, "in", v6048);
  var v6049 = TokenID.InstanceOf;
  var v6050 = Reservation.TypeScriptAndJS;
  var v6051 = OperatorPrecedence.Relational;
  var v14917 = TypeScript$$22.NodeType;
  var v6052 = v14917.InstOf;
  var v6053 = OperatorPrecedence.None;
  var v14918 = TypeScript$$22.NodeType;
  var v6054 = v14918.None;
  var v14919 = TypeScript$$22.ErrorRecoverySet;
  var v6055 = v14919.BinOp;
  setTokenInfo(v6049, v6050, v6051, v6052, v6053, v6054, "instanceof", v6055);
  var v6056 = TokenID.Interface;
  var v6057 = Reservation.TypeScriptAndJSFutureStrict;
  var v6058 = OperatorPrecedence.None;
  var v14920 = TypeScript$$22.NodeType;
  var v6059 = v14920.None;
  var v6060 = OperatorPrecedence.None;
  var v14921 = TypeScript$$22.NodeType;
  var v6061 = v14921.None;
  var v14922 = TypeScript$$22.ErrorRecoverySet;
  var v6062 = v14922.TypeScriptS;
  setTokenInfo(v6056, v6057, v6058, v6059, v6060, v6061, "interface", v6062);
  var v6063 = TokenID.Let;
  var v6064 = Reservation.JavascriptFutureStrict;
  var v6065 = OperatorPrecedence.None;
  var v14923 = TypeScript$$22.NodeType;
  var v6066 = v14923.None;
  var v6067 = OperatorPrecedence.None;
  var v14924 = TypeScript$$22.NodeType;
  var v6068 = v14924.None;
  var v14925 = TypeScript$$22.ErrorRecoverySet;
  var v6069 = v14925.None;
  setTokenInfo(v6063, v6064, v6065, v6066, v6067, v6068, "let", v6069);
  var v6070 = TokenID.Module;
  var v6071 = Reservation.TypeScript;
  var v6072 = OperatorPrecedence.None;
  var v14926 = TypeScript$$22.NodeType;
  var v6073 = v14926.None;
  var v6074 = OperatorPrecedence.None;
  var v14927 = TypeScript$$22.NodeType;
  var v6075 = v14927.None;
  var v14928 = TypeScript$$22.ErrorRecoverySet;
  var v6076 = v14928.TypeScriptS;
  setTokenInfo(v6070, v6071, v6072, v6073, v6074, v6075, "module", v6076);
  var v6077 = TokenID.New;
  var v6078 = Reservation.TypeScriptAndJS;
  var v6079 = OperatorPrecedence.None;
  var v14929 = TypeScript$$22.NodeType;
  var v6080 = v14929.None;
  var v6081 = OperatorPrecedence.None;
  var v14930 = TypeScript$$22.NodeType;
  var v6082 = v14930.None;
  var v14931 = TypeScript$$22.ErrorRecoverySet;
  var v6083 = v14931.PreOp;
  setTokenInfo(v6077, v6078, v6079, v6080, v6081, v6082, "new", v6083);
  var v6084 = TokenID.Number;
  var v6085 = Reservation.TypeScript;
  var v6086 = OperatorPrecedence.None;
  var v14932 = TypeScript$$22.NodeType;
  var v6087 = v14932.None;
  var v6088 = OperatorPrecedence.None;
  var v14933 = TypeScript$$22.NodeType;
  var v6089 = v14933.None;
  var v14934 = TypeScript$$22.ErrorRecoverySet;
  var v6090 = v14934.PrimType;
  setTokenInfo(v6084, v6085, v6086, v6087, v6088, v6089, "number", v6090);
  var v6091 = TokenID.Null;
  var v6092 = Reservation.TypeScriptAndJS;
  var v6093 = OperatorPrecedence.None;
  var v14935 = TypeScript$$22.NodeType;
  var v6094 = v14935.None;
  var v6095 = OperatorPrecedence.None;
  var v14936 = TypeScript$$22.NodeType;
  var v6096 = v14936.None;
  var v14937 = TypeScript$$22.ErrorRecoverySet;
  var v6097 = v14937.RLit;
  setTokenInfo(v6091, v6092, v6093, v6094, v6095, v6096, "null", v6097);
  var v6098 = TokenID.Package;
  var v6099 = Reservation.JavascriptFutureStrict;
  var v6100 = OperatorPrecedence.None;
  var v14938 = TypeScript$$22.NodeType;
  var v6101 = v14938.None;
  var v6102 = OperatorPrecedence.None;
  var v14939 = TypeScript$$22.NodeType;
  var v6103 = v14939.None;
  var v14940 = TypeScript$$22.ErrorRecoverySet;
  var v6104 = v14940.None;
  setTokenInfo(v6098, v6099, v6100, v6101, v6102, v6103, "package", v6104);
  var v6105 = TokenID.Private;
  var v6106 = Reservation.TypeScriptAndJSFutureStrict;
  var v6107 = OperatorPrecedence.None;
  var v14941 = TypeScript$$22.NodeType;
  var v6108 = v14941.None;
  var v6109 = OperatorPrecedence.None;
  var v14942 = TypeScript$$22.NodeType;
  var v6110 = v14942.None;
  var v14943 = TypeScript$$22.ErrorRecoverySet;
  var v6111 = v14943.TypeScriptS;
  setTokenInfo(v6105, v6106, v6107, v6108, v6109, v6110, "private", v6111);
  var v6112 = TokenID.Protected;
  var v6113 = Reservation.JavascriptFutureStrict;
  var v6114 = OperatorPrecedence.None;
  var v14944 = TypeScript$$22.NodeType;
  var v6115 = v14944.None;
  var v6116 = OperatorPrecedence.None;
  var v14945 = TypeScript$$22.NodeType;
  var v6117 = v14945.None;
  var v14946 = TypeScript$$22.ErrorRecoverySet;
  var v6118 = v14946.None;
  setTokenInfo(v6112, v6113, v6114, v6115, v6116, v6117, "protected", v6118);
  var v6119 = TokenID.Public;
  var v6120 = Reservation.TypeScriptAndJSFutureStrict;
  var v6121 = OperatorPrecedence.None;
  var v14947 = TypeScript$$22.NodeType;
  var v6122 = v14947.None;
  var v6123 = OperatorPrecedence.None;
  var v14948 = TypeScript$$22.NodeType;
  var v6124 = v14948.None;
  var v14949 = TypeScript$$22.ErrorRecoverySet;
  var v6125 = v14949.TypeScriptS;
  setTokenInfo(v6119, v6120, v6121, v6122, v6123, v6124, "public", v6125);
  var v6126 = TokenID.Return;
  var v6127 = Reservation.TypeScriptAndJS;
  var v6128 = OperatorPrecedence.None;
  var v14950 = TypeScript$$22.NodeType;
  var v6129 = v14950.None;
  var v6130 = OperatorPrecedence.None;
  var v14951 = TypeScript$$22.NodeType;
  var v6131 = v14951.None;
  var v14952 = TypeScript$$22.ErrorRecoverySet;
  var v6132 = v14952.Stmt;
  setTokenInfo(v6126, v6127, v6128, v6129, v6130, v6131, "return", v6132);
  var v6133 = TokenID.Static;
  var v6134 = Reservation.TypeScriptAndJSFutureStrict;
  var v6135 = OperatorPrecedence.None;
  var v14953 = TypeScript$$22.NodeType;
  var v6136 = v14953.None;
  var v6137 = OperatorPrecedence.None;
  var v14954 = TypeScript$$22.NodeType;
  var v6138 = v14954.None;
  var v14955 = TypeScript$$22.ErrorRecoverySet;
  var v6139 = v14955.None;
  setTokenInfo(v6133, v6134, v6135, v6136, v6137, v6138, "static", v6139);
  var v6140 = TokenID.String;
  var v6141 = Reservation.TypeScript;
  var v6142 = OperatorPrecedence.None;
  var v14956 = TypeScript$$22.NodeType;
  var v6143 = v14956.None;
  var v6144 = OperatorPrecedence.None;
  var v14957 = TypeScript$$22.NodeType;
  var v6145 = v14957.None;
  var v14958 = TypeScript$$22.ErrorRecoverySet;
  var v6146 = v14958.PrimType;
  setTokenInfo(v6140, v6141, v6142, v6143, v6144, v6145, "string", v6146);
  var v6147 = TokenID.Super;
  var v6148 = Reservation.TypeScriptAndJSFuture;
  var v6149 = OperatorPrecedence.None;
  var v14959 = TypeScript$$22.NodeType;
  var v6150 = v14959.None;
  var v6151 = OperatorPrecedence.None;
  var v14960 = TypeScript$$22.NodeType;
  var v6152 = v14960.None;
  var v14961 = TypeScript$$22.ErrorRecoverySet;
  var v6153 = v14961.RLit;
  setTokenInfo(v6147, v6148, v6149, v6150, v6151, v6152, "super", v6153);
  var v6154 = TokenID.Switch;
  var v6155 = Reservation.TypeScriptAndJS;
  var v6156 = OperatorPrecedence.None;
  var v14962 = TypeScript$$22.NodeType;
  var v6157 = v14962.None;
  var v6158 = OperatorPrecedence.None;
  var v14963 = TypeScript$$22.NodeType;
  var v6159 = v14963.None;
  var v14964 = TypeScript$$22.ErrorRecoverySet;
  var v6160 = v14964.Stmt;
  setTokenInfo(v6154, v6155, v6156, v6157, v6158, v6159, "switch", v6160);
  var v6161 = TokenID.This;
  var v6162 = Reservation.TypeScriptAndJS;
  var v6163 = OperatorPrecedence.None;
  var v14965 = TypeScript$$22.NodeType;
  var v6164 = v14965.None;
  var v6165 = OperatorPrecedence.None;
  var v14966 = TypeScript$$22.NodeType;
  var v6166 = v14966.None;
  var v14967 = TypeScript$$22.ErrorRecoverySet;
  var v6167 = v14967.RLit;
  setTokenInfo(v6161, v6162, v6163, v6164, v6165, v6166, "this", v6167);
  var v6168 = TokenID.Throw;
  var v6169 = Reservation.TypeScriptAndJS;
  var v6170 = OperatorPrecedence.None;
  var v14968 = TypeScript$$22.NodeType;
  var v6171 = v14968.None;
  var v6172 = OperatorPrecedence.None;
  var v14969 = TypeScript$$22.NodeType;
  var v6173 = v14969.None;
  var v14970 = TypeScript$$22.ErrorRecoverySet;
  var v6174 = v14970.Stmt;
  setTokenInfo(v6168, v6169, v6170, v6171, v6172, v6173, "throw", v6174);
  var v6175 = TokenID.True;
  var v6176 = Reservation.TypeScriptAndJS;
  var v6177 = OperatorPrecedence.None;
  var v14971 = TypeScript$$22.NodeType;
  var v6178 = v14971.None;
  var v6179 = OperatorPrecedence.None;
  var v14972 = TypeScript$$22.NodeType;
  var v6180 = v14972.None;
  var v14973 = TypeScript$$22.ErrorRecoverySet;
  var v6181 = v14973.RLit;
  setTokenInfo(v6175, v6176, v6177, v6178, v6179, v6180, "true", v6181);
  var v6182 = TokenID.Try;
  var v6183 = Reservation.TypeScriptAndJS;
  var v6184 = OperatorPrecedence.None;
  var v14974 = TypeScript$$22.NodeType;
  var v6185 = v14974.None;
  var v6186 = OperatorPrecedence.None;
  var v14975 = TypeScript$$22.NodeType;
  var v6187 = v14975.None;
  var v14976 = TypeScript$$22.ErrorRecoverySet;
  var v6188 = v14976.Stmt;
  setTokenInfo(v6182, v6183, v6184, v6185, v6186, v6187, "try", v6188);
  var v6189 = TokenID.TypeOf;
  var v6190 = Reservation.TypeScriptAndJS;
  var v6191 = OperatorPrecedence.None;
  var v14977 = TypeScript$$22.NodeType;
  var v6192 = v14977.None;
  var v6193 = OperatorPrecedence.Unary;
  var v14978 = TypeScript$$22.NodeType;
  var v6194 = v14978.Typeof;
  var v14979 = TypeScript$$22.ErrorRecoverySet;
  var v6195 = v14979.Prefix;
  setTokenInfo(v6189, v6190, v6191, v6192, v6193, v6194, "typeof", v6195);
  var v6196 = TokenID.Var;
  var v6197 = Reservation.TypeScriptAndJS;
  var v6198 = OperatorPrecedence.None;
  var v14980 = TypeScript$$22.NodeType;
  var v6199 = v14980.None;
  var v6200 = OperatorPrecedence.None;
  var v14981 = TypeScript$$22.NodeType;
  var v6201 = v14981.None;
  var v14982 = TypeScript$$22.ErrorRecoverySet;
  var v6202 = v14982.Var;
  setTokenInfo(v6196, v6197, v6198, v6199, v6200, v6201, "var", v6202);
  var v6203 = TokenID.Void;
  var v6204 = Reservation.TypeScriptAndJS;
  var v6205 = OperatorPrecedence.None;
  var v14983 = TypeScript$$22.NodeType;
  var v6206 = v14983.None;
  var v6207 = OperatorPrecedence.Unary;
  var v14984 = TypeScript$$22.NodeType;
  var v6208 = v14984.Void;
  var v14985 = TypeScript$$22.ErrorRecoverySet;
  var v6209 = v14985.Prefix;
  setTokenInfo(v6203, v6204, v6205, v6206, v6207, v6208, "void", v6209);
  var v6210 = TokenID.With;
  var v6211 = Reservation.TypeScriptAndJS;
  var v6212 = OperatorPrecedence.None;
  var v14986 = TypeScript$$22.NodeType;
  var v6213 = v14986.None;
  var v6214 = OperatorPrecedence.None;
  var v14987 = TypeScript$$22.NodeType;
  var v6215 = v14987.With;
  var v14988 = TypeScript$$22.ErrorRecoverySet;
  var v6216 = v14988.Stmt;
  setTokenInfo(v6210, v6211, v6212, v6213, v6214, v6215, "with", v6216);
  var v6217 = TokenID.While;
  var v6218 = Reservation.TypeScriptAndJS;
  var v6219 = OperatorPrecedence.None;
  var v14989 = TypeScript$$22.NodeType;
  var v6220 = v14989.None;
  var v6221 = OperatorPrecedence.None;
  var v14990 = TypeScript$$22.NodeType;
  var v6222 = v14990.None;
  var v14991 = TypeScript$$22.ErrorRecoverySet;
  var v6223 = v14991.While;
  setTokenInfo(v6217, v6218, v6219, v6220, v6221, v6222, "while", v6223);
  var v6224 = TokenID.Yield;
  var v6225 = Reservation.JavascriptFutureStrict;
  var v6226 = OperatorPrecedence.None;
  var v14992 = TypeScript$$22.NodeType;
  var v6227 = v14992.None;
  var v6228 = OperatorPrecedence.None;
  var v14993 = TypeScript$$22.NodeType;
  var v6229 = v14993.None;
  var v14994 = TypeScript$$22.ErrorRecoverySet;
  var v6230 = v14994.None;
  setTokenInfo(v6224, v6225, v6226, v6227, v6228, v6229, "yield", v6230);
  var v6231 = TokenID.Identifier;
  var v6232 = Reservation.None;
  var v6233 = OperatorPrecedence.None;
  var v14995 = TypeScript$$22.NodeType;
  var v6234 = v14995.None;
  var v6235 = OperatorPrecedence.None;
  var v14996 = TypeScript$$22.NodeType;
  var v6236 = v14996.None;
  var v14997 = TypeScript$$22.ErrorRecoverySet;
  var v6237 = v14997.ID;
  setTokenInfo(v6231, v6232, v6233, v6234, v6235, v6236, "identifier", v6237);
  var v6238 = TokenID.NumberLiteral;
  var v6239 = Reservation.None;
  var v6240 = OperatorPrecedence.None;
  var v14998 = TypeScript$$22.NodeType;
  var v6241 = v14998.None;
  var v6242 = OperatorPrecedence.None;
  var v14999 = TypeScript$$22.NodeType;
  var v6243 = v14999.None;
  var v15000 = TypeScript$$22.ErrorRecoverySet;
  var v6244 = v15000.Literal;
  setTokenInfo(v6238, v6239, v6240, v6241, v6242, v6243, "numberLiteral", v6244);
  var v6245 = TokenID.RegularExpressionLiteral;
  var v6246 = Reservation.None;
  var v6247 = OperatorPrecedence.None;
  var v15001 = TypeScript$$22.NodeType;
  var v6248 = v15001.None;
  var v6249 = OperatorPrecedence.None;
  var v15002 = TypeScript$$22.NodeType;
  var v6250 = v15002.None;
  var v15003 = TypeScript$$22.ErrorRecoverySet;
  var v6251 = v15003.RegExp;
  setTokenInfo(v6245, v6246, v6247, v6248, v6249, v6250, "regex", v6251);
  var v6252 = TokenID.StringLiteral;
  var v6253 = Reservation.None;
  var v6254 = OperatorPrecedence.None;
  var v15004 = TypeScript$$22.NodeType;
  var v6255 = v15004.None;
  var v6256 = OperatorPrecedence.None;
  var v15005 = TypeScript$$22.NodeType;
  var v6257 = v15005.None;
  var v15006 = TypeScript$$22.ErrorRecoverySet;
  var v6258 = v15006.Literal;
  setTokenInfo(v6252, v6253, v6254, v6255, v6256, v6257, "qstring", v6258);
  var v6259 = TokenID.Semicolon;
  var v6260 = Reservation.None;
  var v6261 = OperatorPrecedence.None;
  var v15007 = TypeScript$$22.NodeType;
  var v6262 = v15007.None;
  var v6263 = OperatorPrecedence.None;
  var v15008 = TypeScript$$22.NodeType;
  var v6264 = v15008.None;
  var v15009 = TypeScript$$22.ErrorRecoverySet;
  var v6265 = v15009.SColon;
  setTokenInfo(v6259, v6260, v6261, v6262, v6263, v6264, ";", v6265);
  var v6266 = TokenID.CloseParen;
  var v6267 = Reservation.None;
  var v6268 = OperatorPrecedence.None;
  var v15010 = TypeScript$$22.NodeType;
  var v6269 = v15010.None;
  var v6270 = OperatorPrecedence.None;
  var v15011 = TypeScript$$22.NodeType;
  var v6271 = v15011.None;
  var v15012 = TypeScript$$22.ErrorRecoverySet;
  var v6272 = v15012.RParen;
  setTokenInfo(v6266, v6267, v6268, v6269, v6270, v6271, ")", v6272);
  var v6273 = TokenID.CloseBracket;
  var v6274 = Reservation.None;
  var v6275 = OperatorPrecedence.None;
  var v15013 = TypeScript$$22.NodeType;
  var v6276 = v15013.None;
  var v6277 = OperatorPrecedence.None;
  var v15014 = TypeScript$$22.NodeType;
  var v6278 = v15014.None;
  var v15015 = TypeScript$$22.ErrorRecoverySet;
  var v6279 = v15015.RBrack;
  setTokenInfo(v6273, v6274, v6275, v6276, v6277, v6278, "]", v6279);
  var v6280 = TokenID.OpenBrace;
  var v6281 = Reservation.None;
  var v6282 = OperatorPrecedence.None;
  var v15016 = TypeScript$$22.NodeType;
  var v6283 = v15016.None;
  var v6284 = OperatorPrecedence.None;
  var v15017 = TypeScript$$22.NodeType;
  var v6285 = v15017.None;
  var v15018 = TypeScript$$22.ErrorRecoverySet;
  var v6286 = v15018.LCurly;
  setTokenInfo(v6280, v6281, v6282, v6283, v6284, v6285, "{", v6286);
  var v6287 = TokenID.CloseBrace;
  var v6288 = Reservation.None;
  var v6289 = OperatorPrecedence.None;
  var v15019 = TypeScript$$22.NodeType;
  var v6290 = v15019.None;
  var v6291 = OperatorPrecedence.None;
  var v15020 = TypeScript$$22.NodeType;
  var v6292 = v15020.None;
  var v15021 = TypeScript$$22.ErrorRecoverySet;
  var v6293 = v15021.RCurly;
  setTokenInfo(v6287, v6288, v6289, v6290, v6291, v6292, "}", v6293);
  var v6294 = TokenID.DotDotDot;
  var v6295 = Reservation.None;
  var v6296 = OperatorPrecedence.None;
  var v15022 = TypeScript$$22.NodeType;
  var v6297 = v15022.None;
  var v6298 = OperatorPrecedence.None;
  var v15023 = TypeScript$$22.NodeType;
  var v6299 = v15023.None;
  var v15024 = TypeScript$$22.ErrorRecoverySet;
  var v6300 = v15024.None;
  setTokenInfo(v6294, v6295, v6296, v6297, v6298, v6299, "...", v6300);
  var v6301 = TokenID.Comma;
  var v6302 = Reservation.None;
  var v6303 = OperatorPrecedence.Comma;
  var v15025 = TypeScript$$22.NodeType;
  var v6304 = v15025.Comma;
  var v6305 = OperatorPrecedence.None;
  var v15026 = TypeScript$$22.NodeType;
  var v6306 = v15026.None;
  var v15027 = TypeScript$$22.ErrorRecoverySet;
  var v6307 = v15027.Comma;
  setTokenInfo(v6301, v6302, v6303, v6304, v6305, v6306, ",", v6307);
  var v6308 = TokenID.Equals;
  var v6309 = Reservation.None;
  var v6310 = OperatorPrecedence.Assignment;
  var v15028 = TypeScript$$22.NodeType;
  var v6311 = v15028.Asg;
  var v6312 = OperatorPrecedence.None;
  var v15029 = TypeScript$$22.NodeType;
  var v6313 = v15029.None;
  var v15030 = TypeScript$$22.ErrorRecoverySet;
  var v6314 = v15030.Asg;
  setTokenInfo(v6308, v6309, v6310, v6311, v6312, v6313, "=", v6314);
  var v6315 = TokenID.PlusEquals;
  var v6316 = Reservation.None;
  var v6317 = OperatorPrecedence.Assignment;
  var v15031 = TypeScript$$22.NodeType;
  var v6318 = v15031.AsgAdd;
  var v6319 = OperatorPrecedence.None;
  var v15032 = TypeScript$$22.NodeType;
  var v6320 = v15032.None;
  var v15033 = TypeScript$$22.ErrorRecoverySet;
  var v6321 = v15033.BinOp;
  setTokenInfo(v6315, v6316, v6317, v6318, v6319, v6320, "+=", v6321);
  var v6322 = TokenID.MinusEquals;
  var v6323 = Reservation.None;
  var v6324 = OperatorPrecedence.Assignment;
  var v15034 = TypeScript$$22.NodeType;
  var v6325 = v15034.AsgSub;
  var v6326 = OperatorPrecedence.None;
  var v15035 = TypeScript$$22.NodeType;
  var v6327 = v15035.None;
  var v15036 = TypeScript$$22.ErrorRecoverySet;
  var v6328 = v15036.BinOp;
  setTokenInfo(v6322, v6323, v6324, v6325, v6326, v6327, "-=", v6328);
  var v6329 = TokenID.AsteriskEquals;
  var v6330 = Reservation.None;
  var v6331 = OperatorPrecedence.Assignment;
  var v15037 = TypeScript$$22.NodeType;
  var v6332 = v15037.AsgMul;
  var v6333 = OperatorPrecedence.None;
  var v15038 = TypeScript$$22.NodeType;
  var v6334 = v15038.None;
  var v15039 = TypeScript$$22.ErrorRecoverySet;
  var v6335 = v15039.BinOp;
  setTokenInfo(v6329, v6330, v6331, v6332, v6333, v6334, "*=", v6335);
  var v6336 = TokenID.SlashEquals;
  var v6337 = Reservation.None;
  var v6338 = OperatorPrecedence.Assignment;
  var v15040 = TypeScript$$22.NodeType;
  var v6339 = v15040.AsgDiv;
  var v6340 = OperatorPrecedence.None;
  var v15041 = TypeScript$$22.NodeType;
  var v6341 = v15041.None;
  var v15042 = TypeScript$$22.ErrorRecoverySet;
  var v6342 = v15042.BinOp;
  setTokenInfo(v6336, v6337, v6338, v6339, v6340, v6341, "/=", v6342);
  var v6343 = TokenID.PercentEquals;
  var v6344 = Reservation.None;
  var v6345 = OperatorPrecedence.Assignment;
  var v15043 = TypeScript$$22.NodeType;
  var v6346 = v15043.AsgMod;
  var v6347 = OperatorPrecedence.None;
  var v15044 = TypeScript$$22.NodeType;
  var v6348 = v15044.None;
  var v15045 = TypeScript$$22.ErrorRecoverySet;
  var v6349 = v15045.BinOp;
  setTokenInfo(v6343, v6344, v6345, v6346, v6347, v6348, "%=", v6349);
  var v6350 = TokenID.AmpersandEquals;
  var v6351 = Reservation.None;
  var v6352 = OperatorPrecedence.Assignment;
  var v15046 = TypeScript$$22.NodeType;
  var v6353 = v15046.AsgAnd;
  var v6354 = OperatorPrecedence.None;
  var v15047 = TypeScript$$22.NodeType;
  var v6355 = v15047.None;
  var v15048 = TypeScript$$22.ErrorRecoverySet;
  var v6356 = v15048.BinOp;
  setTokenInfo(v6350, v6351, v6352, v6353, v6354, v6355, "&=", v6356);
  var v6357 = TokenID.CaretEquals;
  var v6358 = Reservation.None;
  var v6359 = OperatorPrecedence.Assignment;
  var v15049 = TypeScript$$22.NodeType;
  var v6360 = v15049.AsgXor;
  var v6361 = OperatorPrecedence.None;
  var v15050 = TypeScript$$22.NodeType;
  var v6362 = v15050.None;
  var v15051 = TypeScript$$22.ErrorRecoverySet;
  var v6363 = v15051.BinOp;
  setTokenInfo(v6357, v6358, v6359, v6360, v6361, v6362, "^=", v6363);
  var v6364 = TokenID.BarEquals;
  var v6365 = Reservation.None;
  var v6366 = OperatorPrecedence.Assignment;
  var v15052 = TypeScript$$22.NodeType;
  var v6367 = v15052.AsgOr;
  var v6368 = OperatorPrecedence.None;
  var v15053 = TypeScript$$22.NodeType;
  var v6369 = v15053.None;
  var v15054 = TypeScript$$22.ErrorRecoverySet;
  var v6370 = v15054.BinOp;
  setTokenInfo(v6364, v6365, v6366, v6367, v6368, v6369, "|=", v6370);
  var v6371 = TokenID.LessThanLessThanEquals;
  var v6372 = Reservation.None;
  var v6373 = OperatorPrecedence.Assignment;
  var v15055 = TypeScript$$22.NodeType;
  var v6374 = v15055.AsgLsh;
  var v6375 = OperatorPrecedence.None;
  var v15056 = TypeScript$$22.NodeType;
  var v6376 = v15056.None;
  var v15057 = TypeScript$$22.ErrorRecoverySet;
  var v6377 = v15057.BinOp;
  setTokenInfo(v6371, v6372, v6373, v6374, v6375, v6376, "<<=", v6377);
  var v6378 = TokenID.GreaterThanGreaterThanEquals;
  var v6379 = Reservation.None;
  var v6380 = OperatorPrecedence.Assignment;
  var v15058 = TypeScript$$22.NodeType;
  var v6381 = v15058.AsgRsh;
  var v6382 = OperatorPrecedence.None;
  var v15059 = TypeScript$$22.NodeType;
  var v6383 = v15059.None;
  var v15060 = TypeScript$$22.ErrorRecoverySet;
  var v6384 = v15060.BinOp;
  setTokenInfo(v6378, v6379, v6380, v6381, v6382, v6383, ">>=", v6384);
  var v6385 = TokenID.GreaterThanGreaterThanGreaterThanEquals;
  var v6386 = Reservation.None;
  var v6387 = OperatorPrecedence.Assignment;
  var v15061 = TypeScript$$22.NodeType;
  var v6388 = v15061.AsgRs2;
  var v6389 = OperatorPrecedence.None;
  var v15062 = TypeScript$$22.NodeType;
  var v6390 = v15062.None;
  var v15063 = TypeScript$$22.ErrorRecoverySet;
  var v6391 = v15063.BinOp;
  setTokenInfo(v6385, v6386, v6387, v6388, v6389, v6390, ">>>=", v6391);
  var v6392 = TokenID.Question;
  var v6393 = Reservation.None;
  var v6394 = OperatorPrecedence.Conditional;
  var v15064 = TypeScript$$22.NodeType;
  var v6395 = v15064.ConditionalExpression;
  var v6396 = OperatorPrecedence.None;
  var v15065 = TypeScript$$22.NodeType;
  var v6397 = v15065.None;
  var v15066 = TypeScript$$22.ErrorRecoverySet;
  var v6398 = v15066.BinOp;
  setTokenInfo(v6392, v6393, v6394, v6395, v6396, v6397, "?", v6398);
  var v6399 = TokenID.Colon;
  var v6400 = Reservation.None;
  var v6401 = OperatorPrecedence.None;
  var v15067 = TypeScript$$22.NodeType;
  var v6402 = v15067.None;
  var v6403 = OperatorPrecedence.None;
  var v15068 = TypeScript$$22.NodeType;
  var v6404 = v15068.None;
  var v15069 = TypeScript$$22.ErrorRecoverySet;
  var v6405 = v15069.Colon;
  setTokenInfo(v6399, v6400, v6401, v6402, v6403, v6404, ":", v6405);
  var v6406 = TokenID.BarBar;
  var v6407 = Reservation.None;
  var v6408 = OperatorPrecedence.LogicalOr;
  var v15070 = TypeScript$$22.NodeType;
  var v6409 = v15070.LogOr;
  var v6410 = OperatorPrecedence.None;
  var v15071 = TypeScript$$22.NodeType;
  var v6411 = v15071.None;
  var v15072 = TypeScript$$22.ErrorRecoverySet;
  var v6412 = v15072.BinOp;
  setTokenInfo(v6406, v6407, v6408, v6409, v6410, v6411, "||", v6412);
  var v6413 = TokenID.AmpersandAmpersand;
  var v6414 = Reservation.None;
  var v6415 = OperatorPrecedence.LogicalAnd;
  var v15073 = TypeScript$$22.NodeType;
  var v6416 = v15073.LogAnd;
  var v6417 = OperatorPrecedence.None;
  var v15074 = TypeScript$$22.NodeType;
  var v6418 = v15074.None;
  var v15075 = TypeScript$$22.ErrorRecoverySet;
  var v6419 = v15075.BinOp;
  setTokenInfo(v6413, v6414, v6415, v6416, v6417, v6418, "&&", v6419);
  var v6420 = TokenID.Bar;
  var v6421 = Reservation.None;
  var v6422 = OperatorPrecedence.BitwiseOr;
  var v15076 = TypeScript$$22.NodeType;
  var v6423 = v15076.Or;
  var v6424 = OperatorPrecedence.None;
  var v15077 = TypeScript$$22.NodeType;
  var v6425 = v15077.None;
  var v15078 = TypeScript$$22.ErrorRecoverySet;
  var v6426 = v15078.BinOp;
  setTokenInfo(v6420, v6421, v6422, v6423, v6424, v6425, "|", v6426);
  var v6427 = TokenID.Caret;
  var v6428 = Reservation.None;
  var v6429 = OperatorPrecedence.BitwiseExclusiveOr;
  var v15079 = TypeScript$$22.NodeType;
  var v6430 = v15079.Xor;
  var v6431 = OperatorPrecedence.None;
  var v15080 = TypeScript$$22.NodeType;
  var v6432 = v15080.None;
  var v15081 = TypeScript$$22.ErrorRecoverySet;
  var v6433 = v15081.BinOp;
  setTokenInfo(v6427, v6428, v6429, v6430, v6431, v6432, "^", v6433);
  var v6434 = TokenID.And;
  var v6435 = Reservation.None;
  var v6436 = OperatorPrecedence.BitwiseAnd;
  var v15082 = TypeScript$$22.NodeType;
  var v6437 = v15082.And;
  var v6438 = OperatorPrecedence.None;
  var v15083 = TypeScript$$22.NodeType;
  var v6439 = v15083.None;
  var v15084 = TypeScript$$22.ErrorRecoverySet;
  var v6440 = v15084.BinOp;
  setTokenInfo(v6434, v6435, v6436, v6437, v6438, v6439, "&", v6440);
  var v6441 = TokenID.EqualsEquals;
  var v6442 = Reservation.None;
  var v6443 = OperatorPrecedence.Equality;
  var v15085 = TypeScript$$22.NodeType;
  var v6444 = v15085.Eq;
  var v6445 = OperatorPrecedence.None;
  var v15086 = TypeScript$$22.NodeType;
  var v6446 = v15086.None;
  var v15087 = TypeScript$$22.ErrorRecoverySet;
  var v6447 = v15087.BinOp;
  setTokenInfo(v6441, v6442, v6443, v6444, v6445, v6446, "==", v6447);
  var v6448 = TokenID.ExclamationEquals;
  var v6449 = Reservation.None;
  var v6450 = OperatorPrecedence.Equality;
  var v15088 = TypeScript$$22.NodeType;
  var v6451 = v15088.Ne;
  var v6452 = OperatorPrecedence.None;
  var v15089 = TypeScript$$22.NodeType;
  var v6453 = v15089.None;
  var v15090 = TypeScript$$22.ErrorRecoverySet;
  var v6454 = v15090.BinOp;
  setTokenInfo(v6448, v6449, v6450, v6451, v6452, v6453, "!=", v6454);
  var v6455 = TokenID.EqualsEqualsEquals;
  var v6456 = Reservation.None;
  var v6457 = OperatorPrecedence.Equality;
  var v15091 = TypeScript$$22.NodeType;
  var v6458 = v15091.Eqv;
  var v6459 = OperatorPrecedence.None;
  var v15092 = TypeScript$$22.NodeType;
  var v6460 = v15092.None;
  var v15093 = TypeScript$$22.ErrorRecoverySet;
  var v6461 = v15093.BinOp;
  setTokenInfo(v6455, v6456, v6457, v6458, v6459, v6460, "===", v6461);
  var v6462 = TokenID.ExclamationEqualsEquals;
  var v6463 = Reservation.None;
  var v6464 = OperatorPrecedence.Equality;
  var v15094 = TypeScript$$22.NodeType;
  var v6465 = v15094.NEqv;
  var v6466 = OperatorPrecedence.None;
  var v15095 = TypeScript$$22.NodeType;
  var v6467 = v15095.None;
  var v15096 = TypeScript$$22.ErrorRecoverySet;
  var v6468 = v15096.BinOp;
  setTokenInfo(v6462, v6463, v6464, v6465, v6466, v6467, "!==", v6468);
  var v6469 = TokenID.LessThan;
  var v6470 = Reservation.None;
  var v6471 = OperatorPrecedence.Relational;
  var v15097 = TypeScript$$22.NodeType;
  var v6472 = v15097.Lt;
  var v6473 = OperatorPrecedence.None;
  var v15098 = TypeScript$$22.NodeType;
  var v6474 = v15098.None;
  var v15099 = TypeScript$$22.ErrorRecoverySet;
  var v6475 = v15099.BinOp;
  setTokenInfo(v6469, v6470, v6471, v6472, v6473, v6474, "<", v6475);
  var v6476 = TokenID.LessThanEquals;
  var v6477 = Reservation.None;
  var v6478 = OperatorPrecedence.Relational;
  var v15100 = TypeScript$$22.NodeType;
  var v6479 = v15100.Le;
  var v6480 = OperatorPrecedence.None;
  var v15101 = TypeScript$$22.NodeType;
  var v6481 = v15101.None;
  var v15102 = TypeScript$$22.ErrorRecoverySet;
  var v6482 = v15102.BinOp;
  setTokenInfo(v6476, v6477, v6478, v6479, v6480, v6481, "<=", v6482);
  var v6483 = TokenID.GreaterThan;
  var v6484 = Reservation.None;
  var v6485 = OperatorPrecedence.Relational;
  var v15103 = TypeScript$$22.NodeType;
  var v6486 = v15103.Gt;
  var v6487 = OperatorPrecedence.None;
  var v15104 = TypeScript$$22.NodeType;
  var v6488 = v15104.None;
  var v15105 = TypeScript$$22.ErrorRecoverySet;
  var v6489 = v15105.BinOp;
  setTokenInfo(v6483, v6484, v6485, v6486, v6487, v6488, ">", v6489);
  var v6490 = TokenID.GreaterThanEquals;
  var v6491 = Reservation.None;
  var v6492 = OperatorPrecedence.Relational;
  var v15106 = TypeScript$$22.NodeType;
  var v6493 = v15106.Ge;
  var v6494 = OperatorPrecedence.None;
  var v15107 = TypeScript$$22.NodeType;
  var v6495 = v15107.None;
  var v15108 = TypeScript$$22.ErrorRecoverySet;
  var v6496 = v15108.BinOp;
  setTokenInfo(v6490, v6491, v6492, v6493, v6494, v6495, ">=", v6496);
  var v6497 = TokenID.LessThanLessThan;
  var v6498 = Reservation.None;
  var v6499 = OperatorPrecedence.Shift;
  var v15109 = TypeScript$$22.NodeType;
  var v6500 = v15109.Lsh;
  var v6501 = OperatorPrecedence.None;
  var v15110 = TypeScript$$22.NodeType;
  var v6502 = v15110.None;
  var v15111 = TypeScript$$22.ErrorRecoverySet;
  var v6503 = v15111.BinOp;
  setTokenInfo(v6497, v6498, v6499, v6500, v6501, v6502, "<<", v6503);
  var v6504 = TokenID.GreaterThanGreaterThan;
  var v6505 = Reservation.None;
  var v6506 = OperatorPrecedence.Shift;
  var v15112 = TypeScript$$22.NodeType;
  var v6507 = v15112.Rsh;
  var v6508 = OperatorPrecedence.None;
  var v15113 = TypeScript$$22.NodeType;
  var v6509 = v15113.None;
  var v15114 = TypeScript$$22.ErrorRecoverySet;
  var v6510 = v15114.BinOp;
  setTokenInfo(v6504, v6505, v6506, v6507, v6508, v6509, ">>", v6510);
  var v6511 = TokenID.GreaterThanGreaterThanGreaterThan;
  var v6512 = Reservation.None;
  var v6513 = OperatorPrecedence.Shift;
  var v15115 = TypeScript$$22.NodeType;
  var v6514 = v15115.Rs2;
  var v6515 = OperatorPrecedence.None;
  var v15116 = TypeScript$$22.NodeType;
  var v6516 = v15116.None;
  var v15117 = TypeScript$$22.ErrorRecoverySet;
  var v6517 = v15117.BinOp;
  setTokenInfo(v6511, v6512, v6513, v6514, v6515, v6516, ">>>", v6517);
  var v6518 = TokenID.Plus;
  var v6519 = Reservation.None;
  var v6520 = OperatorPrecedence.Additive;
  var v15118 = TypeScript$$22.NodeType;
  var v6521 = v15118.Add;
  var v6522 = OperatorPrecedence.Unary;
  var v15119 = TypeScript$$22.NodeType;
  var v6523 = v15119.Pos;
  var v15120 = TypeScript$$22.ErrorRecoverySet;
  var v6524 = v15120.AddOp;
  setTokenInfo(v6518, v6519, v6520, v6521, v6522, v6523, "+", v6524);
  var v6525 = TokenID.Minus;
  var v6526 = Reservation.None;
  var v6527 = OperatorPrecedence.Additive;
  var v15121 = TypeScript$$22.NodeType;
  var v6528 = v15121.Sub;
  var v6529 = OperatorPrecedence.Unary;
  var v15122 = TypeScript$$22.NodeType;
  var v6530 = v15122.Neg;
  var v15123 = TypeScript$$22.ErrorRecoverySet;
  var v6531 = v15123.AddOp;
  setTokenInfo(v6525, v6526, v6527, v6528, v6529, v6530, "-", v6531);
  var v6532 = TokenID.Asterisk;
  var v6533 = Reservation.None;
  var v6534 = OperatorPrecedence.Multiplicative;
  var v15124 = TypeScript$$22.NodeType;
  var v6535 = v15124.Mul;
  var v6536 = OperatorPrecedence.None;
  var v15125 = TypeScript$$22.NodeType;
  var v6537 = v15125.None;
  var v15126 = TypeScript$$22.ErrorRecoverySet;
  var v6538 = v15126.BinOp;
  setTokenInfo(v6532, v6533, v6534, v6535, v6536, v6537, "*", v6538);
  var v6539 = TokenID.Slash;
  var v6540 = Reservation.None;
  var v6541 = OperatorPrecedence.Multiplicative;
  var v15127 = TypeScript$$22.NodeType;
  var v6542 = v15127.Div;
  var v6543 = OperatorPrecedence.None;
  var v15128 = TypeScript$$22.NodeType;
  var v6544 = v15128.None;
  var v15129 = TypeScript$$22.ErrorRecoverySet;
  var v6545 = v15129.BinOp;
  setTokenInfo(v6539, v6540, v6541, v6542, v6543, v6544, "/", v6545);
  var v6546 = TokenID.Percent;
  var v6547 = Reservation.None;
  var v6548 = OperatorPrecedence.Multiplicative;
  var v15130 = TypeScript$$22.NodeType;
  var v6549 = v15130.Mod;
  var v6550 = OperatorPrecedence.None;
  var v15131 = TypeScript$$22.NodeType;
  var v6551 = v15131.None;
  var v15132 = TypeScript$$22.ErrorRecoverySet;
  var v6552 = v15132.BinOp;
  setTokenInfo(v6546, v6547, v6548, v6549, v6550, v6551, "%", v6552);
  var v6553 = TokenID.Tilde;
  var v6554 = Reservation.None;
  var v6555 = OperatorPrecedence.None;
  var v15133 = TypeScript$$22.NodeType;
  var v6556 = v15133.None;
  var v6557 = OperatorPrecedence.Unary;
  var v15134 = TypeScript$$22.NodeType;
  var v6558 = v15134.Not;
  var v15135 = TypeScript$$22.ErrorRecoverySet;
  var v6559 = v15135.PreOp;
  setTokenInfo(v6553, v6554, v6555, v6556, v6557, v6558, "~", v6559);
  var v6560 = TokenID.Exclamation;
  var v6561 = Reservation.None;
  var v6562 = OperatorPrecedence.None;
  var v15136 = TypeScript$$22.NodeType;
  var v6563 = v15136.None;
  var v6564 = OperatorPrecedence.Unary;
  var v15137 = TypeScript$$22.NodeType;
  var v6565 = v15137.LogNot;
  var v15138 = TypeScript$$22.ErrorRecoverySet;
  var v6566 = v15138.PreOp;
  setTokenInfo(v6560, v6561, v6562, v6563, v6564, v6565, "!", v6566);
  var v6567 = TokenID.PlusPlus;
  var v6568 = Reservation.None;
  var v6569 = OperatorPrecedence.None;
  var v15139 = TypeScript$$22.NodeType;
  var v6570 = v15139.None;
  var v6571 = OperatorPrecedence.Unary;
  var v15140 = TypeScript$$22.NodeType;
  var v6572 = v15140.IncPre;
  var v15141 = TypeScript$$22.ErrorRecoverySet;
  var v6573 = v15141.PreOp;
  setTokenInfo(v6567, v6568, v6569, v6570, v6571, v6572, "++", v6573);
  var v6574 = TokenID.MinusMinus;
  var v6575 = Reservation.None;
  var v6576 = OperatorPrecedence.None;
  var v15142 = TypeScript$$22.NodeType;
  var v6577 = v15142.None;
  var v6578 = OperatorPrecedence.Unary;
  var v15143 = TypeScript$$22.NodeType;
  var v6579 = v15143.DecPre;
  var v15144 = TypeScript$$22.ErrorRecoverySet;
  var v6580 = v15144.PreOp;
  setTokenInfo(v6574, v6575, v6576, v6577, v6578, v6579, "--", v6580);
  var v6581 = TokenID.OpenParen;
  var v6582 = Reservation.None;
  var v6583 = OperatorPrecedence.None;
  var v15145 = TypeScript$$22.NodeType;
  var v6584 = v15145.None;
  var v6585 = OperatorPrecedence.None;
  var v15146 = TypeScript$$22.NodeType;
  var v6586 = v15146.None;
  var v15147 = TypeScript$$22.ErrorRecoverySet;
  var v6587 = v15147.LParen;
  setTokenInfo(v6581, v6582, v6583, v6584, v6585, v6586, "(", v6587);
  var v6588 = TokenID.OpenBracket;
  var v6589 = Reservation.None;
  var v6590 = OperatorPrecedence.None;
  var v15148 = TypeScript$$22.NodeType;
  var v6591 = v15148.None;
  var v6592 = OperatorPrecedence.None;
  var v15149 = TypeScript$$22.NodeType;
  var v6593 = v15149.None;
  var v15150 = TypeScript$$22.ErrorRecoverySet;
  var v6594 = v15150.LBrack;
  setTokenInfo(v6588, v6589, v6590, v6591, v6592, v6593, "[", v6594);
  var v6595 = TokenID.Dot;
  var v6596 = Reservation.None;
  var v6597 = OperatorPrecedence.Unary;
  var v15151 = TypeScript$$22.NodeType;
  var v6598 = v15151.None;
  var v6599 = OperatorPrecedence.None;
  var v15152 = TypeScript$$22.NodeType;
  var v6600 = v15152.None;
  var v15153 = TypeScript$$22.ErrorRecoverySet;
  var v6601 = v15153.Dot;
  setTokenInfo(v6595, v6596, v6597, v6598, v6599, v6600, ".", v6601);
  var v6602 = TokenID.EndOfFile;
  var v6603 = Reservation.None;
  var v6604 = OperatorPrecedence.None;
  var v15154 = TypeScript$$22.NodeType;
  var v6605 = v15154.None;
  var v6606 = OperatorPrecedence.None;
  var v15155 = TypeScript$$22.NodeType;
  var v6607 = v15155.None;
  var v15156 = TypeScript$$22.ErrorRecoverySet;
  var v6608 = v15156.EOF;
  setTokenInfo(v6602, v6603, v6604, v6605, v6606, v6607, "<EOF>", v6608);
  var v6609 = TokenID.EqualsGreaterThan;
  var v6610 = Reservation.None;
  var v6611 = OperatorPrecedence.None;
  var v15157 = TypeScript$$22.NodeType;
  var v6612 = v15157.None;
  var v6613 = OperatorPrecedence.None;
  var v15158 = TypeScript$$22.NodeType;
  var v6614 = v15158.None;
  var v15159 = TypeScript$$22.ErrorRecoverySet;
  var v6615 = v15159.None;
  setTokenInfo(v6609, v6610, v6611, v6612, v6613, v6614, "=>", v6615);
  TypeScript$$22.lookupToken = lookupToken;
  var v15160 = TypeScript$$22.TokenClass;
  var v20187 = !v15160;
  if(v20187) {
    v15160 = TypeScript$$22.TokenClass = {}
  }
  var v6616 = v15160;
  v867(v6616);
  var TokenClass = TypeScript$$22.TokenClass;
  var SavedToken = v868();
  TypeScript$$22.SavedToken = SavedToken;
  var Token = v873();
  TypeScript$$22.Token = Token;
  var NumberLiteralToken = v876(Token);
  TypeScript$$22.NumberLiteralToken = NumberLiteralToken;
  var StringLiteralToken = v879(Token);
  TypeScript$$22.StringLiteralToken = StringLiteralToken;
  var IdentifierToken = v882(Token);
  TypeScript$$22.IdentifierToken = IdentifierToken;
  var WhitespaceToken = v885(Token);
  TypeScript$$22.WhitespaceToken = WhitespaceToken;
  var CommentToken = v888(Token);
  TypeScript$$22.CommentToken = CommentToken;
  var RegularExpressionLiteralToken = v891(Token);
  TypeScript$$22.RegularExpressionLiteralToken = RegularExpressionLiteralToken;
  var v27147 = new Array;
  TypeScript$$22.staticTokens = v27147;
  TypeScript$$22.initializeStaticTokens = initializeStaticTokens;
  return
}
function v862(TypeScript$$21) {
  function v861(_super$$58) {
    function v860(name$$79, publicOnly$$23, typespace$$23) {
      var v15161 = _super$$58.prototype;
      var v6617 = v15161.findLocal;
      var sym$$27 = JAMScript.call(v6617.call, v6617, [this, name$$79, publicOnly$$23, typespace$$23]);
      if(sym$$27) {
        var v15162 = JAMScript.call(this.filter, this, [sym$$27]);
        var v6618 = !v15162;
        if(v6618) {
          return null
        }
      }
      var v15163 = _super$$58.prototype;
      var v6619 = v15163.find;
      return JAMScript.call(v6619.call, v6619, [this, name$$79, publicOnly$$23, typespace$$23])
    }
    function v859(filter$$6, name$$78, publicOnly$$22, typespace$$22) {
      throw new Error("please implement");
    }
    function v858(name$$77, publicOnly$$21, typespace$$21) {
      var v15164 = _super$$58.prototype;
      var v6620 = v15164.findLocal;
      var sym$$26 = JAMScript.call(v6620.call, v6620, [this, name$$77, publicOnly$$21, typespace$$21]);
      if(sym$$26) {
        var v15165 = JAMScript.call(this.filter, this, [sym$$26]);
        var v6621 = !v15165;
        if(v6621) {
          return null
        }
      }
      return sym$$26
    }
    function FilteredSymbolScopeBuilder$$1(valueMembers$$3, parent$$51, container$$10, filter$$5) {
      JAMScript.call(_super$$58.call, _super$$58, [this, valueMembers$$3, null, null, null, parent$$51, container$$10]);
      this.filter = filter$$5;
      return
    }
    JAMScript.call(__extends, null, [FilteredSymbolScopeBuilder$$1, _super$$58]);
    var v6622 = FilteredSymbolScopeBuilder$$1.prototype;
    v6622.findLocal = v858;
    var v6623 = FilteredSymbolScopeBuilder$$1.prototype;
    v6623.search = v859;
    var v6624 = FilteredSymbolScopeBuilder$$1.prototype;
    v6624.find = v860;
    return FilteredSymbolScopeBuilder$$1
  }
  function v857(_super$$57) {
    function v856(name$$76, publicOnly$$20, typespace$$20) {
      var v6625 = this.scope;
      return JAMScript.call(v6625.findLocal, v6625, [name$$76, publicOnly$$20, typespace$$20])
    }
    function v855(name$$75, publicOnly$$19, typespace$$19) {
      var v6626 = this.filter;
      JAMScript.call(v6626.reset, v6626, []);
      var v6627 = this.scope;
      var v6628 = this.filter;
      return JAMScript.call(v6627.search, v6627, [v6628, name$$75, publicOnly$$19, typespace$$19])
    }
    function v854(outfile$$10) {
      var v6629 = this.scope;
      JAMScript.call(v6629.print, v6629, [outfile$$10]);
      return
    }
    function FilteredSymbolScope$$1(scope$$21, container$$9, filter$$4) {
      JAMScript.call(_super$$57.call, _super$$57, [this, container$$9]);
      this.scope = scope$$21;
      this.filter = filter$$4;
      return
    }
    JAMScript.call(__extends, null, [FilteredSymbolScope$$1, _super$$57]);
    var v6630 = FilteredSymbolScope$$1.prototype;
    v6630.print = v854;
    var v6631 = FilteredSymbolScope$$1.prototype;
    v6631.find = v855;
    var v6632 = FilteredSymbolScope$$1.prototype;
    v6632.findLocal = v856;
    return FilteredSymbolScope$$1
  }
  function v853(_super$$56) {
    function v852() {
      var v6633 = this.valueMembers;
      return v6633.allMembers
    }
    function v851(container$$8, ast$$61, symbol$$7, errorReporter$$3, insertAsPublic, typespace$$18, ambient$$1) {
      var table$$6 = null;
      if(ambient$$1) {
        if(typespace$$18) {
          var v6634;
          var v20188 = this.ambientEnclosedTypes;
          var v15167 = v20188 == null;
          if(v15167) {
            v6634 = null
          }else {
            var v15166;
            if(insertAsPublic) {
              var v20189 = this.ambientEnclosedTypes;
              v15166 = v20189.publicMembers
            }else {
              var v20190 = this.ambientEnclosedTypes;
              v15166 = v20190.privateMembers
            }
            v6634 = v15166
          }
          table$$6 = v6634
        }else {
          var v6635;
          var v20191 = this.ambientValueMembers;
          var v15169 = v20191 == null;
          if(v15169) {
            v6635 = null
          }else {
            var v15168;
            if(insertAsPublic) {
              var v20192 = this.ambientValueMembers;
              v15168 = v20192.publicMembers
            }else {
              var v20193 = this.ambientValueMembers;
              v15168 = v20193.privateMembers
            }
            v6635 = v15168
          }
          table$$6 = v6635
        }
      }else {
        if(typespace$$18) {
          var v6636;
          var v20194 = this.enclosedTypes;
          var v15171 = v20194 == null;
          if(v15171) {
            v6636 = null
          }else {
            var v15170;
            if(insertAsPublic) {
              var v20195 = this.enclosedTypes;
              v15170 = v20195.publicMembers
            }else {
              var v20196 = this.enclosedTypes;
              v15170 = v20196.privateMembers
            }
            v6636 = v15170
          }
          table$$6 = v6636
        }else {
          var v6637;
          var v20197 = this.valueMembers;
          var v15173 = v20197 == null;
          if(v15173) {
            v6637 = null
          }else {
            var v15172;
            if(insertAsPublic) {
              var v20198 = this.valueMembers;
              v15172 = v20198.publicMembers
            }else {
              var v20199 = this.valueMembers;
              v15172 = v20199.privateMembers
            }
            v6637 = v15172
          }
          table$$6 = v6637
        }
      }
      if(table$$6) {
        var v20200 = symbol$$7.name;
        var v15174 = JAMScript.call(table$$6.add, table$$6, [v20200, symbol$$7]);
        var v6639 = !v15174;
        if(v6639) {
          var v6638 = symbol$$7.name;
          JAMScript.call(errorReporter$$3.duplicateIdentifier, errorReporter$$3, [ast$$61, v6638])
        }
      }else {
        var v6640 = TypeScript$$21.CompilerDiagnostics;
        JAMScript.call(v6640.Alert, v6640, ["YYYYY"])
      }
      symbol$$7.container = container$$8;
      return
    }
    function v850(name$$74, publicOnly$$18, typespace$$17) {
      var sym$$25 = null;
      var v6641;
      var v20201 = this.valueMembers;
      var v15176 = v20201 == null;
      if(v15176) {
        v6641 = null
      }else {
        var v15175;
        if(publicOnly$$18) {
          var v20202 = this.valueMembers;
          v15175 = v20202.publicMembers
        }else {
          var v20203 = this.valueMembers;
          v15175 = v20203.allMembers
        }
        v6641 = v15175
      }
      var table$$5 = v6641;
      var v6642;
      var v20204 = this.ambientValueMembers;
      var v15178 = v20204 == null;
      if(v15178) {
        v6642 = null
      }else {
        var v15177;
        if(publicOnly$$18) {
          var v20205 = this.ambientValueMembers;
          v15177 = v20205.publicMembers
        }else {
          var v20206 = this.ambientValueMembers;
          v15177 = v20206.allMembers
        }
        v6642 = v15177
      }
      var ambientTable$$5 = v6642;
      if(typespace$$17) {
        var v6643;
        var v20207 = this.enclosedTypes;
        var v15180 = v20207 == null;
        if(v15180) {
          v6643 = null
        }else {
          var v15179;
          if(publicOnly$$18) {
            var v20208 = this.enclosedTypes;
            v15179 = v20208.publicMembers
          }else {
            var v20209 = this.enclosedTypes;
            v15179 = v20209.allMembers
          }
          v6643 = v15179
        }
        table$$5 = v6643;
        var v6644;
        var v20210 = this.ambientEnclosedTypes;
        var v15182 = v20210 == null;
        if(v15182) {
          v6644 = null
        }else {
          var v15181;
          if(publicOnly$$18) {
            var v20211 = this.ambientEnclosedTypes;
            v15181 = v20211.publicMembers
          }else {
            var v20212 = this.ambientEnclosedTypes;
            v15181 = v20212.allMembers
          }
          v6644 = v15181
        }
        ambientTable$$5 = v6644
      }
      if(table$$5) {
        var v15183 = sym$$25 = JAMScript.call(table$$5.lookup, table$$5, [name$$74]);
        var v6645 = v15183 != null;
        if(v6645) {
          if(sym$$25) {
            return sym$$25
          }
        }
      }
      if(ambientTable$$5) {
        var v15184 = sym$$25 = JAMScript.call(ambientTable$$5.lookup, ambientTable$$5, [name$$74]);
        var v6646 = v15184 != null;
        if(v6646) {
          if(sym$$25) {
            return sym$$25
          }
        }
      }
      return null
    }
    function v849(name$$73, publicOnly$$17, typespace$$16) {
      var sym$$24 = null;
      var v6647;
      var v20213 = this.ambientValueMembers;
      var v15186 = v20213 == null;
      if(v15186) {
        v6647 = null
      }else {
        var v15185;
        if(publicOnly$$17) {
          var v20214 = this.ambientValueMembers;
          v15185 = v20214.publicMembers
        }else {
          var v20215 = this.ambientValueMembers;
          v15185 = v20215.allMembers
        }
        v6647 = v15185
      }
      var ambientTable$$4 = v6647;
      if(typespace$$16) {
        var v6648;
        var v20216 = this.ambientEnclosedTypes;
        var v15188 = v20216 == null;
        if(v15188) {
          v6648 = null
        }else {
          var v15187;
          if(publicOnly$$17) {
            var v20217 = this.ambientEnclosedTypes;
            v15187 = v20217.publicMembers
          }else {
            var v20218 = this.ambientEnclosedTypes;
            v15187 = v20218.allMembers
          }
          v6648 = v15187
        }
        ambientTable$$4 = v6648
      }
      var v15189 = ambientTable$$4;
      if(v15189) {
        var v20219 = sym$$24 = JAMScript.call(ambientTable$$4.lookup, ambientTable$$4, [name$$73]);
        v15189 = v20219 != null
      }
      var v6649 = v15189;
      if(v6649) {
        return sym$$24
      }
      var v6651 = this.parent;
      if(v6651) {
        var v6650 = this.parent;
        return JAMScript.call(v6650.findAmbient, v6650, [name$$73, publicOnly$$17, typespace$$16])
      }
      return null
    }
    function v848(name$$72, publicOnly$$16, typespace$$15) {
      var sym$$23 = null;
      var v6652;
      var v20220 = this.valueMembers;
      var v15191 = v20220 == null;
      if(v15191) {
        v6652 = null
      }else {
        var v15190;
        if(publicOnly$$16) {
          var v20221 = this.valueMembers;
          v15190 = v20221.publicMembers
        }else {
          var v20222 = this.valueMembers;
          v15190 = v20222.allMembers
        }
        v6652 = v15190
      }
      var table$$4 = v6652;
      var v6653;
      var v20223 = this.ambientValueMembers;
      var v15193 = v20223 == null;
      if(v15193) {
        v6653 = null
      }else {
        var v15192;
        if(publicOnly$$16) {
          var v20224 = this.ambientValueMembers;
          v15192 = v20224.publicMembers
        }else {
          var v20225 = this.ambientValueMembers;
          v15192 = v20225.allMembers
        }
        v6653 = v15192
      }
      var ambientTable$$3 = v6653;
      if(typespace$$15) {
        var v6654;
        var v20226 = this.enclosedTypes;
        var v15195 = v20226 == null;
        if(v15195) {
          v6654 = null
        }else {
          var v15194;
          if(publicOnly$$16) {
            var v20227 = this.enclosedTypes;
            v15194 = v20227.publicMembers
          }else {
            var v20228 = this.enclosedTypes;
            v15194 = v20228.allMembers
          }
          v6654 = v15194
        }
        table$$4 = v6654;
        var v6655;
        var v20229 = this.ambientEnclosedTypes;
        var v15197 = v20229 == null;
        if(v15197) {
          v6655 = null
        }else {
          var v15196;
          if(publicOnly$$16) {
            var v20230 = this.ambientEnclosedTypes;
            v15196 = v20230.publicMembers
          }else {
            var v20231 = this.ambientEnclosedTypes;
            v15196 = v20231.allMembers
          }
          v6655 = v15196
        }
        ambientTable$$3 = v6655
      }
      var v15198 = ambientTable$$3;
      if(v15198) {
        var v20232 = sym$$23 = JAMScript.call(ambientTable$$3.lookup, ambientTable$$3, [name$$72]);
        v15198 = v20232 != null
      }
      var v6656 = v15198;
      if(v6656) {
        return sym$$23
      }
      var v15199 = table$$4;
      if(v15199) {
        var v20233 = sym$$23 = JAMScript.call(table$$4.lookup, table$$4, [name$$72]);
        v15199 = v20233 != null
      }
      var v6657 = v15199;
      if(v6657) {
        return sym$$23
      }
      var v6659 = this.parent;
      if(v6659) {
        var v6658 = this.parent;
        return JAMScript.call(v6658.find, v6658, [name$$72, publicOnly$$16, typespace$$15])
      }
      return null
    }
    function v847(outfile$$9) {
      function v846(key$$42, s$$23, context$$48) {
        var sym$$22 = s$$23;
        var v6660 = "  " + key$$42;
        JAMScript.call(outfile$$9.WriteLine, outfile$$9, [v6660]);
        return
      }
      function v845(key$$41, s$$22, context$$47) {
        var sym$$21 = s$$22;
        var v6661 = "  " + key$$41;
        JAMScript.call(outfile$$9.WriteLine, outfile$$9, [v6661]);
        return
      }
      function v844(key$$40, s$$21, context$$46) {
        var sym$$20 = s$$21;
        var v6662 = "  " + key$$40;
        JAMScript.call(outfile$$9.WriteLine, outfile$$9, [v6662]);
        return
      }
      function v843(key$$39, s$$20, context$$45) {
        var sym$$19 = s$$20;
        var v6663 = "  " + key$$39;
        JAMScript.call(outfile$$9.WriteLine, outfile$$9, [v6663]);
        return
      }
      var v15200 = _super$$56.prototype;
      var v6664 = v15200.print;
      JAMScript.call(v6664.call, v6664, [this, outfile$$9]);
      var v6666 = this.ambientValueMembers;
      if(v6666) {
        var v15201 = this.ambientValueMembers;
        var v6665 = v15201.allMembers;
        JAMScript.call(v6665.map, v6665, [v843, null])
      }
      var v6668 = this.valueMembers;
      if(v6668) {
        var v15202 = this.valueMembers;
        var v6667 = v15202.allMembers;
        JAMScript.call(v6667.map, v6667, [v844, null])
      }
      var v6670 = this.ambientEnclosedTypes;
      if(v6670) {
        var v15203 = this.ambientEnclosedTypes;
        var v6669 = v15203.allMembers;
        JAMScript.call(v6669.map, v6669, [v845, null])
      }
      var v6672 = this.enclosedTypes;
      if(v6672) {
        var v15204 = this.enclosedTypes;
        var v6671 = v15204.allMembers;
        JAMScript.call(v6671.map, v6671, [v846, null])
      }
      var v6674 = this.parent;
      if(v6674) {
        var v6673 = this.parent;
        JAMScript.call(v6673.print, v6673, [outfile$$9])
      }
      return
    }
    function v842(filter$$3, name$$71, publicOnly$$15, typespace$$14) {
      var sym$$18 = null;
      var v6675;
      var v20234 = this.valueMembers;
      var v15206 = v20234 == null;
      if(v15206) {
        v6675 = null
      }else {
        var v15205;
        if(publicOnly$$15) {
          var v20235 = this.valueMembers;
          v15205 = v20235.publicMembers
        }else {
          var v20236 = this.valueMembers;
          v15205 = v20236.allMembers
        }
        v6675 = v15205
      }
      var table$$3 = v6675;
      var v6676;
      var v20237 = this.ambientValueMembers;
      var v15208 = v20237 == null;
      if(v15208) {
        v6676 = null
      }else {
        var v15207;
        if(publicOnly$$15) {
          var v20238 = this.ambientValueMembers;
          v15207 = v20238.publicMembers
        }else {
          var v20239 = this.ambientValueMembers;
          v15207 = v20239.allMembers
        }
        v6676 = v15207
      }
      var ambientTable$$2 = v6676;
      if(typespace$$14) {
        var v6677;
        var v20240 = this.enclosedTypes;
        var v15210 = v20240 == null;
        if(v15210) {
          v6677 = null
        }else {
          var v15209;
          if(publicOnly$$15) {
            var v20241 = this.enclosedTypes;
            v15209 = v20241.publicMembers
          }else {
            var v20242 = this.enclosedTypes;
            v15209 = v20242.allMembers
          }
          v6677 = v15209
        }
        table$$3 = v6677;
        var v6678;
        var v20243 = this.ambientEnclosedTypes;
        var v15212 = v20243 == null;
        if(v15212) {
          v6678 = null
        }else {
          var v15211;
          if(publicOnly$$15) {
            var v20244 = this.ambientEnclosedTypes;
            v15211 = v20244.publicMembers
          }else {
            var v20245 = this.ambientEnclosedTypes;
            v15211 = v20245.allMembers
          }
          v6678 = v15211
        }
        ambientTable$$2 = v6678
      }
      if(ambientTable$$2) {
        var v15213 = sym$$18 = JAMScript.call(ambientTable$$2.lookup, ambientTable$$2, [name$$71]);
        var v6680 = v15213 != null;
        if(v6680) {
          var v6679 = JAMScript.call(filter$$3.update, filter$$3, [sym$$18]);
          if(v6679) {
            return sym$$18
          }
        }
      }
      if(table$$3) {
        var v15214 = sym$$18 = JAMScript.call(table$$3.lookup, table$$3, [name$$71]);
        var v6682 = v15214 != null;
        if(v6682) {
          var v6681 = JAMScript.call(filter$$3.update, filter$$3, [sym$$18]);
          if(v6681) {
            return sym$$18
          }
        }
      }
      var v6685 = this.parent;
      if(v6685) {
        var v6683 = this.parent;
        sym$$18 = JAMScript.call(v6683.search, v6683, [filter$$3, name$$71, publicOnly$$15, typespace$$14]);
        if(sym$$18) {
          var v6684 = JAMScript.call(filter$$3.update, filter$$3, [sym$$18]);
          if(v6684) {
            return sym$$18
          }
        }
      }
      return filter$$3.result
    }
    function v841(members$$24) {
      var result$$26 = [];
      var v6687 = this.ambientValueMembers;
      if(v6687) {
        var v20246 = this.ambientValueMembers;
        var v15215 = v20246.allMembers;
        var v6686 = JAMScript.call(v15215.getAllKeys, v15215, []);
        result$$26 = result$$26.concat(v6686)
      }
      var v6689 = this.valueMembers;
      if(v6689) {
        var v20247 = this.valueMembers;
        var v15216 = v20247.allMembers;
        var v6688 = JAMScript.call(v15216.getAllKeys, v15216, []);
        result$$26 = result$$26.concat(v6688)
      }
      var v15217 = !members$$24;
      if(v15217) {
        v15217 = this.parent
      }
      var v6691 = v15217;
      if(v6691) {
        var v6690 = this.parent;
        var parentResult$$4 = JAMScript.call(v6690.getAllValueSymbolNames, v6690, [members$$24]);
        if(parentResult$$4) {
          result$$26 = result$$26.concat(parentResult$$4)
        }
      }
      return result$$26
    }
    function v840(members$$23) {
      var result$$25 = [];
      var v6693 = this.ambientEnclosedTypes;
      if(v6693) {
        var v20248 = this.ambientEnclosedTypes;
        var v15218 = v20248.allMembers;
        var v6692 = JAMScript.call(v15218.getAllKeys, v15218, []);
        result$$25 = result$$25.concat(v6692)
      }
      var v6695 = this.enclosedTypes;
      if(v6695) {
        var v20249 = this.enclosedTypes;
        var v15219 = v20249.allMembers;
        var v6694 = JAMScript.call(v15219.getAllKeys, v15219, []);
        result$$25 = result$$25.concat(v6694)
      }
      var v15220 = !members$$23;
      if(v15220) {
        v15220 = this.parent
      }
      var v6697 = v15220;
      if(v6697) {
        var v6696 = this.parent;
        var parentResult$$3 = JAMScript.call(v6696.getAllTypeSymbolNames, v6696, [members$$23]);
        if(parentResult$$3) {
          result$$25 = result$$25.concat(parentResult$$3)
        }
      }
      return result$$25
    }
    function v839(members$$22) {
      var result$$24 = JAMScript.call(this.getAllTypeSymbolNames, this, [members$$22]);
      var v6698 = JAMScript.call(this.getAllValueSymbolNames, this, [members$$22]);
      return result$$24.concat(v6698)
    }
    function v838() {
      return"builder"
    }
    function SymbolScopeBuilder$$1(valueMembers$$2, ambientValueMembers$$2, enclosedTypes$$2, ambientEnclosedTypes$$2, parent$$50, container$$7) {
      JAMScript.call(_super$$56.call, _super$$56, [this, container$$7]);
      this.valueMembers = valueMembers$$2;
      this.ambientValueMembers = ambientValueMembers$$2;
      this.enclosedTypes = enclosedTypes$$2;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$2;
      this.parent = parent$$50;
      this.container = container$$7;
      return
    }
    JAMScript.call(__extends, null, [SymbolScopeBuilder$$1, _super$$56]);
    var v6699 = SymbolScopeBuilder$$1.prototype;
    v6699.printLabel = v838;
    var v6700 = SymbolScopeBuilder$$1.prototype;
    v6700.getAllSymbolNames = v839;
    var v6701 = SymbolScopeBuilder$$1.prototype;
    v6701.getAllTypeSymbolNames = v840;
    var v6702 = SymbolScopeBuilder$$1.prototype;
    v6702.getAllValueSymbolNames = v841;
    var v6703 = SymbolScopeBuilder$$1.prototype;
    v6703.search = v842;
    var v6704 = SymbolScopeBuilder$$1.prototype;
    v6704.print = v847;
    var v6705 = SymbolScopeBuilder$$1.prototype;
    v6705.find = v848;
    var v6706 = SymbolScopeBuilder$$1.prototype;
    v6706.findAmbient = v849;
    var v6707 = SymbolScopeBuilder$$1.prototype;
    v6707.findLocal = v850;
    var v6708 = SymbolScopeBuilder$$1.prototype;
    v6708.enter = v851;
    var v6709 = SymbolScopeBuilder$$1.prototype;
    v6709.getTable = v852;
    return SymbolScopeBuilder$$1
  }
  function v837(_super$$55) {
    function v836() {
      var v6710 = this.valueMembers;
      return v6710.publicMembers
    }
    function v835(name$$70, publicOnly$$14, typespace$$13) {
      var sym$$17 = JAMScript.call(this.find, this, [name$$70, publicOnly$$14, typespace$$13]);
      if(sym$$17) {
        var v15221 = JAMScript.call(sym$$17.kind, sym$$17, []);
        var v15222 = SymbolKind.Type;
        var v6715 = v15221 == v15222;
        if(v6715) {
          var typeSym$$1 = sym$$17;
          var v20250 = typeSym$$1.type;
          var v15223 = JAMScript.call(v20250.hasImplementation, v20250, []);
          var v6711 = !v15223;
          if(v6711) {
            sym$$17 = null
          }
        }else {
          var v6714 = sym$$17.container;
          if(v6714) {
            var v20251 = sym$$17.container;
            var v15224 = JAMScript.call(v20251.kind, v20251, []);
            var v15225 = SymbolKind.Type;
            var v6713 = v15224 == v15225;
            if(v6713) {
              var ctypeSym = sym$$17.container;
              var v20252 = ctypeSym.type;
              var v15226 = JAMScript.call(v20252.hasImplementation, v20252, []);
              var v6712 = !v15226;
              if(v6712) {
                sym$$17 = null
              }
            }
          }
        }
      }
      return sym$$17
    }
    function v834(outfile$$8) {
      function v833(key$$38, sym$$16, context$$44) {
        var v6716 = "  " + key$$38;
        JAMScript.call(outfile$$8.WriteLine, outfile$$8, [v6716]);
        return
      }
      function v832(key$$37, sym$$15, context$$43) {
        var v6717 = "  " + key$$37;
        JAMScript.call(outfile$$8.WriteLine, outfile$$8, [v6717]);
        return
      }
      function v831(key$$36, sym$$14, context$$42) {
        var v6718 = "  " + key$$36;
        JAMScript.call(outfile$$8.WriteLine, outfile$$8, [v6718]);
        return
      }
      function v830(key$$35, sym$$13, context$$41) {
        var v6719 = "  " + key$$35;
        JAMScript.call(outfile$$8.WriteLine, outfile$$8, [v6719]);
        return
      }
      var v15227 = _super$$55.prototype;
      var v6720 = v15227.print;
      JAMScript.call(v6720.call, v6720, [this, outfile$$8]);
      var v6722 = this.ambientValueMembers;
      if(v6722) {
        var v15228 = this.ambientValueMembers;
        var v6721 = v15228.allMembers;
        JAMScript.call(v6721.map, v6721, [v830, null])
      }
      var v6724 = this.valueMembers;
      if(v6724) {
        var v15229 = this.valueMembers;
        var v6723 = v15229.allMembers;
        JAMScript.call(v6723.map, v6723, [v831, null])
      }
      var v6726 = this.ambientEnclosedTypes;
      if(v6726) {
        var v15230 = this.ambientEnclosedTypes;
        var v6725 = v15230.allMembers;
        JAMScript.call(v6725.map, v6725, [v832, null])
      }
      var v6728 = this.enclosedTypes;
      if(v6728) {
        var v15231 = this.enclosedTypes;
        var v6727 = v15231.allMembers;
        JAMScript.call(v6727.map, v6727, [v833, null])
      }
      return
    }
    function v829(name$$69, publicOnly$$13, typespace$$12) {
      var v6729;
      var v20253 = this.ambientValueMembers;
      var v15233 = v20253 == null;
      if(v15233) {
        v6729 = null
      }else {
        var v15232;
        if(publicOnly$$13) {
          var v20254 = this.ambientValueMembers;
          v15232 = v20254.publicMembers
        }else {
          var v20255 = this.ambientValueMembers;
          v15232 = v20255.allMembers
        }
        v6729 = v15232
      }
      var ambientTable$$1 = v6729;
      if(typespace$$12) {
        var v6730;
        var v20256 = this.ambientEnclosedTypes;
        var v15235 = v20256 == null;
        if(v15235) {
          v6730 = null
        }else {
          var v15234;
          if(publicOnly$$13) {
            var v20257 = this.ambientEnclosedTypes;
            v15234 = v20257.publicMembers
          }else {
            var v20258 = this.ambientEnclosedTypes;
            v15234 = v20258.allMembers
          }
          v6730 = v15234
        }
        ambientTable$$1 = v6730
      }
      if(ambientTable$$1) {
        var s$$19 = JAMScript.call(ambientTable$$1.lookup, ambientTable$$1, [name$$69]);
        if(s$$19) {
          return s$$19
        }
      }
      return null
    }
    function v828(name$$68, publicOnly$$12, typespace$$11) {
      var table$$2 = null;
      var ambientTable = null;
      if(typespace$$11) {
        var v6731;
        var v20259 = this.enclosedTypes;
        var v15237 = v20259 == null;
        if(v15237) {
          v6731 = null
        }else {
          var v15236;
          if(publicOnly$$12) {
            var v20260 = this.enclosedTypes;
            v15236 = v20260.publicMembers
          }else {
            var v20261 = this.enclosedTypes;
            v15236 = v20261.allMembers
          }
          v6731 = v15236
        }
        table$$2 = v6731;
        var v6732;
        var v20262 = this.ambientEnclosedTypes;
        var v15239 = v20262 == null;
        if(v15239) {
          v6732 = null
        }else {
          var v15238;
          if(publicOnly$$12) {
            var v20263 = this.ambientEnclosedTypes;
            v15238 = v20263.publicMembers
          }else {
            var v20264 = this.ambientEnclosedTypes;
            v15238 = v20264.allMembers
          }
          v6732 = v15238
        }
        ambientTable = v6732
      }else {
        var v6733;
        var v20265 = this.valueMembers;
        var v15241 = v20265 == null;
        if(v15241) {
          v6733 = null
        }else {
          var v15240;
          if(publicOnly$$12) {
            var v20266 = this.valueMembers;
            v15240 = v20266.publicMembers
          }else {
            var v20267 = this.valueMembers;
            v15240 = v20267.allMembers
          }
          v6733 = v15240
        }
        table$$2 = v6733;
        var v6734;
        var v20268 = this.ambientValueMembers;
        var v15243 = v20268 == null;
        if(v15243) {
          v6734 = null
        }else {
          var v15242;
          if(publicOnly$$12) {
            var v20269 = this.ambientValueMembers;
            v15242 = v20269.publicMembers
          }else {
            var v20270 = this.ambientValueMembers;
            v15242 = v20270.allMembers
          }
          v6734 = v15242
        }
        ambientTable = v6734
      }
      if(ambientTable) {
        var s$$18 = JAMScript.call(ambientTable.lookup, ambientTable, [name$$68]);
        if(s$$18) {
          return s$$18
        }
      }
      if(table$$2) {
        s$$18 = JAMScript.call(table$$2.lookup, table$$2, [name$$68]);
        if(s$$18) {
          return s$$18
        }
      }
      return null
    }
    function v827(filter$$2, name$$67, publicOnly$$11, typespace$$10) {
      var sym$$12 = JAMScript.call(this.find, this, [name$$67, publicOnly$$11, typespace$$10]);
      JAMScript.call(filter$$2.update, filter$$2, [sym$$12]);
      return filter$$2.result
    }
    function v826(members$$21) {
      var result$$23 = [];
      var v6736 = this.ambientValueMembers;
      if(v6736) {
        var v20271 = this.ambientValueMembers;
        var v15244 = v20271.allMembers;
        var v6735 = JAMScript.call(v15244.getAllKeys, v15244, []);
        result$$23 = result$$23.concat(v6735)
      }
      var v6738 = this.valueMembers;
      if(v6738) {
        var v20272 = this.valueMembers;
        var v15245 = v20272.allMembers;
        var v6737 = JAMScript.call(v15245.getAllKeys, v15245, []);
        result$$23 = result$$23.concat(v6737)
      }
      return result$$23
    }
    function v825(members$$20) {
      var result$$22 = [];
      var v6740 = this.ambientEnclosedTypes;
      if(v6740) {
        var v20273 = this.ambientEnclosedTypes;
        var v15246 = v20273.allMembers;
        var v6739 = JAMScript.call(v15246.getAllKeys, v15246, []);
        result$$22 = result$$22.concat(v6739)
      }
      var v6742 = this.enclosedTypes;
      if(v6742) {
        var v20274 = this.enclosedTypes;
        var v15247 = v20274.allMembers;
        var v6741 = JAMScript.call(v15247.getAllKeys, v15247, []);
        result$$22 = result$$22.concat(v6741)
      }
      return result$$22
    }
    function v824(members$$19) {
      var result$$21 = JAMScript.call(this.getAllTypeSymbolNames, this, [members$$19]);
      var v6743 = JAMScript.call(this.getAllValueSymbolNames, this, [members$$19]);
      return result$$21.concat(v6743)
    }
    function v823() {
      return"table"
    }
    function SymbolTableScope$$1(valueMembers$$1, ambientValueMembers$$1, enclosedTypes$$1, ambientEnclosedTypes$$1, container$$6) {
      JAMScript.call(_super$$55.call, _super$$55, [this, container$$6]);
      this.valueMembers = valueMembers$$1;
      this.ambientValueMembers = ambientValueMembers$$1;
      this.enclosedTypes = enclosedTypes$$1;
      this.ambientEnclosedTypes = ambientEnclosedTypes$$1;
      this.container = container$$6;
      return
    }
    JAMScript.call(__extends, null, [SymbolTableScope$$1, _super$$55]);
    var v6744 = SymbolTableScope$$1.prototype;
    v6744.printLabel = v823;
    var v6745 = SymbolTableScope$$1.prototype;
    v6745.getAllSymbolNames = v824;
    var v6746 = SymbolTableScope$$1.prototype;
    v6746.getAllTypeSymbolNames = v825;
    var v6747 = SymbolTableScope$$1.prototype;
    v6747.getAllValueSymbolNames = v826;
    var v6748 = SymbolTableScope$$1.prototype;
    v6748.search = v827;
    var v6749 = SymbolTableScope$$1.prototype;
    v6749.find = v828;
    var v6750 = SymbolTableScope$$1.prototype;
    v6750.findAmbient = v829;
    var v6751 = SymbolTableScope$$1.prototype;
    v6751.print = v834;
    var v6752 = SymbolTableScope$$1.prototype;
    v6752.findImplementation = v835;
    var v6753 = SymbolTableScope$$1.prototype;
    v6753.getTable = v836;
    return SymbolTableScope$$1
  }
  function v822(_super$$54) {
    function v821(parent$$49) {
      var v15248 = this.parents;
      var v6754 = v15248 == null;
      if(v6754) {
        var v27148 = new Array;
        this.parents = v27148
      }
      var v6755 = this.parents;
      var v15249 = this.parents;
      var v6756 = v15249.length;
      JAMScript.set(v6755, v6756, parent$$49);
      return
    }
    function v820(name$$66, publicOnly$$10, typespace$$9) {
      var sym$$11 = null;
      var i$$72 = 0;
      var cache$$1 = this.valueAmbientCache;
      if(typespace$$9) {
        cache$$1 = this.typeAmbientCache
      }
      var v15250 = cache$$1;
      if(v15250) {
        var v20275 = sym$$11 = JAMScript.call(cache$$1.lookup, cache$$1, [name$$66]);
        v15250 = v20275 != null
      }
      var v6757 = v15250;
      if(v6757) {
        return sym$$11
      }
      var v6760 = this.parents;
      if(v6760) {
        i$$72 = 0;
        var v20276 = this.parents;
        var v15251 = v20276.length;
        var v6759 = i$$72 < v15251;
        for(;v6759;) {
          var v15252 = this.parents;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6758 = v15252[i$$72]
          }
          sym$$11 = JAMScript.call(v6758.findAmbient, v6758, [name$$66, publicOnly$$10, typespace$$9]);
          if(sym$$11) {
            break
          }
          i$$72 = i$$72 + 1;
          var v20277 = this.parents;
          var v15253 = v20277.length;
          v6759 = i$$72 < v15253
        }
      }
      var v6763 = cache$$1 == null;
      if(v6763) {
        if(typespace$$9) {
          var v6761 = TypeScript$$21.StringHashTable;
          var v27149 = JAMScript.new(v6761, []);
          this.typeAmbientCache = v27149;
          cache$$1 = this.typeAmbientCache
        }else {
          var v6762 = TypeScript$$21.StringHashTable;
          var v27150 = JAMScript.new(v6762, []);
          this.valueAmbientCache = v27150;
          cache$$1 = this.valueAmbientCache
        }
      }
      JAMScript.call(cache$$1.add, cache$$1, [name$$66, sym$$11]);
      return sym$$11
    }
    function v819(name$$65, publicOnly$$9, typespace$$8) {
      var sym$$10 = null;
      var i$$71 = 0;
      var cache = this.valueCache;
      if(typespace$$8) {
        cache = this.typeCache
      }
      var v15254 = cache;
      if(v15254) {
        var v23592 = sym$$10 = JAMScript.call(cache.lookup, cache, [name$$65]);
        var v20278 = v23592 != null;
        if(v20278) {
          var v23593;
          if(publicOnly$$9) {
            var v26493 = sym$$10.flags;
            var v26681 = TypeScript$$21.SymbolFlags;
            var v26494 = v26681.Private;
            var v26064 = JAMScript.call(TypeScript$$21.hasFlag, TypeScript$$21, [v26493, v26494]);
            var v26496 = !v26064;
            if(v26496) {
              var v26495 = sym$$10.declAST;
              if(v26495) {
                var v26843 = sym$$10.declAST;
                var v26780 = v26843.nodeType;
                var v26844 = TypeScript$$21.NodeType;
                var v26781 = v26844.FuncDecl;
                var v26682 = v26780 == v26781;
                if(v26682) {
                  var v26845 = sym$$10.declAST;
                  var v26782 = v26845.fncFlags;
                  var v26846 = TypeScript$$21.FncFlags;
                  var v26783 = v26846.Private;
                  v26682 = JAMScript.call(TypeScript$$21.hasFlag, TypeScript$$21, [v26782, v26783])
                }
                v26495 = v26682
              }
              v26064 = v26495
            }
            var v25260 = v26064;
            v23593 = !v25260
          }else {
            v23593 = true
          }
          v20278 = v23593
        }
        v15254 = v20278
      }
      var v6764 = v15254;
      if(v6764) {
        return sym$$10
      }
      var v6767 = this.parents;
      if(v6767) {
        i$$71 = 0;
        var v20279 = this.parents;
        var v15255 = v20279.length;
        var v6766 = i$$71 < v15255;
        for(;v6766;) {
          var v15256 = this.parents;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6765 = v15256[i$$71]
          }
          sym$$10 = JAMScript.call(v6765.find, v6765, [name$$65, publicOnly$$9, typespace$$8]);
          if(sym$$10) {
            break
          }
          i$$71 = i$$71 + 1;
          var v20280 = this.parents;
          var v15257 = v20280.length;
          v6766 = i$$71 < v15257
        }
      }
      var v6770 = cache == null;
      if(v6770) {
        if(typespace$$8) {
          var v6768 = TypeScript$$21.StringHashTable;
          var v27151 = JAMScript.new(v6768, []);
          this.typeCache = v27151;
          cache = this.typeCache
        }else {
          var v6769 = TypeScript$$21.StringHashTable;
          var v27152 = JAMScript.new(v6769, []);
          this.valueCache = v27152;
          cache = this.valueCache
        }
      }
      JAMScript.call(cache.add, cache, [name$$65, sym$$10]);
      return sym$$10
    }
    function v818(name$$64, publicOnly$$8, typespace$$7) {
      var sym$$9 = null;
      var i$$70 = 0;
      var implCache = this.valueImplCache;
      if(typespace$$7) {
        implCache = this.typeImplCache
      }
      var v15258 = implCache;
      if(v15258) {
        var v23594 = sym$$9 = JAMScript.call(implCache.lookup, implCache, [name$$64]);
        var v20281 = v23594 != null;
        if(v20281) {
          var v23595;
          if(publicOnly$$8) {
            var v26497 = sym$$9.flags;
            var v26683 = TypeScript$$21.SymbolFlags;
            var v26498 = v26683.Private;
            var v26065 = JAMScript.call(TypeScript$$21.hasFlag, TypeScript$$21, [v26497, v26498]);
            var v26500 = !v26065;
            if(v26500) {
              var v26499 = sym$$9.declAST;
              if(v26499) {
                var v26847 = sym$$9.declAST;
                var v26784 = v26847.nodeType;
                var v26848 = TypeScript$$21.NodeType;
                var v26785 = v26848.FuncDecl;
                var v26684 = v26784 == v26785;
                if(v26684) {
                  var v26849 = sym$$9.declAST;
                  var v26786 = v26849.fncFlags;
                  var v26850 = TypeScript$$21.FncFlags;
                  var v26787 = v26850.Private;
                  v26684 = JAMScript.call(TypeScript$$21.hasFlag, TypeScript$$21, [v26786, v26787])
                }
                v26499 = v26684
              }
              v26065 = v26499
            }
            var v25261 = v26065;
            v23595 = !v25261
          }else {
            v23595 = true
          }
          v20281 = v23595
        }
        v15258 = v20281
      }
      var v6771 = v15258;
      if(v6771) {
        return sym$$9
      }
      var v6774 = this.parents;
      if(v6774) {
        i$$70 = 0;
        var v20282 = this.parents;
        var v15259 = v20282.length;
        var v6773 = i$$70 < v15259;
        for(;v6773;) {
          var v15260 = this.parents;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6772 = v15260[i$$70]
          }
          sym$$9 = JAMScript.call(v6772.findImplementation, v6772, [name$$64, publicOnly$$8, typespace$$7]);
          if(sym$$9) {
            break
          }
          i$$70 = i$$70 + 1;
          var v20283 = this.parents;
          var v15261 = v20283.length;
          v6773 = i$$70 < v15261
        }
      }
      if(implCache) {
        if(typespace$$7) {
          var v6775 = TypeScript$$21.StringHashTable;
          var v27153 = JAMScript.new(v6775, []);
          this.typeImplCache = v27153;
          implCache = this.typeImplCache
        }else {
          var v6776 = TypeScript$$21.StringHashTable;
          var v27154 = JAMScript.new(v6776, []);
          this.valueImplCache = v27154;
          implCache = this.valueImplCache
        }
      }
      JAMScript.call(implCache.add, implCache, [name$$64, sym$$9]);
      return sym$$9
    }
    function v817(outfile$$7) {
      var v15262 = _super$$54.prototype;
      var v6777 = v15262.print;
      JAMScript.call(v6777.call, v6777, [this, outfile$$7]);
      var v6780 = this.parents;
      if(v6780) {
        var i$$69 = 0;
        var v20284 = this.parents;
        var v15263 = v20284.length;
        var v6779 = i$$69 < v15263;
        for(;v6779;) {
          var v15264 = this.parents;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6778 = v15264[i$$69]
          }
          JAMScript.call(v6778.print, v6778, [outfile$$7]);
          i$$69 = i$$69 + 1;
          var v20285 = this.parents;
          var v15265 = v20285.length;
          v6779 = i$$69 < v15265
        }
      }
      return
    }
    function v816(members$$18) {
      var result$$20 = [];
      var v6783 = this.parents;
      if(v6783) {
        var i$$68 = 0;
        var v20286 = this.parents;
        var v15266 = v20286.length;
        var v6782 = i$$68 < v15266;
        for(;v6782;) {
          var v15267 = this.parents;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6781 = v15267[i$$68]
          }
          var parentResult$$2 = JAMScript.call(v6781.getAllValueSymbolNames, v6781, [members$$18]);
          if(parentResult$$2) {
            result$$20 = result$$20.concat(parentResult$$2)
          }
          i$$68 = i$$68 + 1;
          var v20287 = this.parents;
          var v15268 = v20287.length;
          v6782 = i$$68 < v15268
        }
      }
      return result$$20
    }
    function v815(members$$17) {
      var result$$19 = [];
      var v6786 = this.parents;
      if(v6786) {
        var i$$67 = 0;
        var v20288 = this.parents;
        var v15269 = v20288.length;
        var v6785 = i$$67 < v15269;
        for(;v6785;) {
          var v15270 = this.parents;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6784 = v15270[i$$67]
          }
          var parentResult$$1 = JAMScript.call(v6784.getAllTypeSymbolNames, v6784, [members$$17]);
          if(parentResult$$1) {
            result$$19 = result$$19.concat(parentResult$$1)
          }
          i$$67 = i$$67 + 1;
          var v20289 = this.parents;
          var v15271 = v20289.length;
          v6785 = i$$67 < v15271
        }
      }
      return result$$19
    }
    function v814(members$$16) {
      var result$$18 = [];
      var v6789 = this.parents;
      if(v6789) {
        var i$$66 = 0;
        var v20290 = this.parents;
        var v15272 = v20290.length;
        var v6788 = i$$66 < v15272;
        for(;v6788;) {
          var v15273 = this.parents;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6787 = v15273[i$$66]
          }
          var parentResult = JAMScript.call(v6787.getAllSymbolNames, v6787, [members$$16]);
          if(parentResult) {
            result$$18 = result$$18.concat(parentResult)
          }
          i$$66 = i$$66 + 1;
          var v20291 = this.parents;
          var v15274 = v20291.length;
          v6788 = i$$66 < v15274
        }
      }
      return result$$18
    }
    function v813(filter$$1, name$$63, publicOnly$$7, typespace$$6) {
      var v6793 = this.parents;
      if(v6793) {
        var i$$65 = 0;
        var v20292 = this.parents;
        var v15275 = v20292.length;
        var v6792 = i$$65 < v15275;
        for(;v6792;) {
          var v15276 = this.parents;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6790 = v15276[i$$65]
          }
          var sym$$8 = JAMScript.call(v6790.search, v6790, [filter$$1, name$$63, publicOnly$$7, typespace$$6]);
          if(sym$$8) {
            var v6791 = JAMScript.call(filter$$1.update, filter$$1, [sym$$8]);
            if(v6791) {
              return sym$$8
            }
          }
          i$$65 = i$$65 + 1;
          var v20293 = this.parents;
          var v15277 = v20293.length;
          v6792 = i$$65 < v15277
        }
      }
      return filter$$1.result
    }
    function v812() {
      return"agg"
    }
    function SymbolAggregateScope$$1(container$$5) {
      JAMScript.call(_super$$54.call, _super$$54, [this, container$$5]);
      this.valueCache = null;
      this.valueImplCache = null;
      this.valueAmbientCache = null;
      this.typeCache = null;
      this.typeImplCache = null;
      this.typeAmbientCache = null;
      this.parents = null;
      this.container = container$$5;
      return
    }
    JAMScript.call(__extends, null, [SymbolAggregateScope$$1, _super$$54]);
    var v6794 = SymbolAggregateScope$$1.prototype;
    v6794.printLabel = v812;
    var v6795 = SymbolAggregateScope$$1.prototype;
    v6795.search = v813;
    var v6796 = SymbolAggregateScope$$1.prototype;
    v6796.getAllSymbolNames = v814;
    var v6797 = SymbolAggregateScope$$1.prototype;
    v6797.getAllTypeSymbolNames = v815;
    var v6798 = SymbolAggregateScope$$1.prototype;
    v6798.getAllValueSymbolNames = v816;
    var v6799 = SymbolAggregateScope$$1.prototype;
    v6799.print = v817;
    var v6800 = SymbolAggregateScope$$1.prototype;
    v6800.findImplementation = v818;
    var v6801 = SymbolAggregateScope$$1.prototype;
    v6801.find = v819;
    var v6802 = SymbolAggregateScope$$1.prototype;
    v6802.findAmbient = v820;
    var v6803 = SymbolAggregateScope$$1.prototype;
    v6803.addParentScope = v821;
    return SymbolAggregateScope$$1
  }
  function v811() {
    function v810() {
      throw new Error("please implement in derived class");
    }
    function v809(container$$4, ast$$60, symbol$$6, errorReporter$$2, publicOnly$$6, typespace$$5, ambient) {
      throw new Error("please implement in derived class");
    }
    function v808(outfile$$6) {
      var v6806 = this.container;
      if(v6806) {
        var v23596 = JAMScript.call(this.printLabel, this, []);
        var v20294 = v23596 + " scope with container: ";
        var v23597 = this.container;
        var v20295 = v23597.name;
        var v15278 = v20294 + v20295;
        var v6804 = v15278 + "...";
        JAMScript.call(outfile$$6.WriteLine, outfile$$6, [v6804])
      }else {
        var v15279 = JAMScript.call(this.printLabel, this, []);
        var v6805 = v15279 + " scope...";
        JAMScript.call(outfile$$6.WriteLine, outfile$$6, [v6805])
      }
      return
    }
    function v807(name$$62, publicOnly$$5, typespace$$4) {
      return null
    }
    function v806(name$$61, publicOnly$$4, typespace$$3) {
      return null
    }
    function v805(name$$60, publicOnly$$3, typespace$$2) {
      return null
    }
    function v804(name$$59, publicOnly$$2, typespace$$1) {
      return null
    }
    function v803(filter, name$$58, publicOnly$$1, typespace) {
      return null
    }
    function v802(members$$15) {
      return["please", "implement", "in", "derived", "classes"]
    }
    function v801(members$$14) {
      return["please", "implement", "in", "derived", "classes"]
    }
    function v800(members$$13) {
      return["please", "implement", "in", "derived", "classes"]
    }
    function v799() {
      return"base"
    }
    function SymbolScope$$1(container$$3) {
      this.container = container$$3;
      return
    }
    var v6807 = SymbolScope$$1.prototype;
    v6807.printLabel = v799;
    var v6808 = SymbolScope$$1.prototype;
    v6808.getAllSymbolNames = v800;
    var v6809 = SymbolScope$$1.prototype;
    v6809.getAllTypeSymbolNames = v801;
    var v6810 = SymbolScope$$1.prototype;
    v6810.getAllValueSymbolNames = v802;
    var v6811 = SymbolScope$$1.prototype;
    v6811.search = v803;
    var v6812 = SymbolScope$$1.prototype;
    v6812.findLocal = v804;
    var v6813 = SymbolScope$$1.prototype;
    v6813.find = v805;
    var v6814 = SymbolScope$$1.prototype;
    v6814.findImplementation = v806;
    var v6815 = SymbolScope$$1.prototype;
    v6815.findAmbient = v807;
    var v6816 = SymbolScope$$1.prototype;
    v6816.print = v808;
    var v6817 = SymbolScope$$1.prototype;
    v6817.enter = v809;
    var v6818 = SymbolScope$$1.prototype;
    v6818.getTable = v810;
    return SymbolScope$$1
  }
  function v798(SymbolKind$$1) {
    SymbolKind$$1._map = [];
    var v6819 = SymbolKind$$1._map;
    v6819[0] = "None";
    SymbolKind$$1.None = 0;
    var v6820 = SymbolKind$$1._map;
    v6820[1] = "Type";
    SymbolKind$$1.Type = 1;
    var v6821 = SymbolKind$$1._map;
    v6821[2] = "Field";
    SymbolKind$$1.Field = 2;
    var v6822 = SymbolKind$$1._map;
    v6822[3] = "Parameter";
    SymbolKind$$1.Parameter = 3;
    var v6823 = SymbolKind$$1._map;
    v6823[4] = "Variable";
    SymbolKind$$1.Variable = 4;
    return
  }
  function v797() {
    function v796(key$$34, data$$34) {
      var v15280 = this.dualMembers;
      var v6824 = v15280.secondaryTable;
      return JAMScript.call(v6824.add, v6824, [key$$34, data$$34])
    }
    function v795(key$$33, data$$33) {
      var v15281 = this.dualMembers;
      var v6825 = v15281.primaryTable;
      return JAMScript.call(v6825.add, v6825, [key$$33, data$$33])
    }
    function ScopedMembers$$1(dualMembers) {
      this.dualMembers = dualMembers;
      this.allMembers = this.dualMembers;
      var v6826 = this.dualMembers;
      this.publicMembers = v6826.primaryTable;
      var v6827 = this.dualMembers;
      this.privateMembers = v6827.secondaryTable;
      return
    }
    var v6828 = ScopedMembers$$1.prototype;
    v6828.addPublicMember = v795;
    var v6829 = ScopedMembers$$1.prototype;
    v6829.addPrivateMember = v796;
    return ScopedMembers$$1
  }
  var ScopedMembers = v797();
  TypeScript$$21.ScopedMembers = ScopedMembers;
  var v15282 = TypeScript$$21.SymbolKind;
  var v20296 = !v15282;
  if(v20296) {
    v15282 = TypeScript$$21.SymbolKind = {}
  }
  var v6830 = v15282;
  v798(v6830);
  var SymbolKind = TypeScript$$21.SymbolKind;
  var SymbolScope = v811();
  TypeScript$$21.SymbolScope = SymbolScope;
  var SymbolAggregateScope = v822(SymbolScope);
  TypeScript$$21.SymbolAggregateScope = SymbolAggregateScope;
  var SymbolTableScope = v837(SymbolScope);
  TypeScript$$21.SymbolTableScope = SymbolTableScope;
  var SymbolScopeBuilder = v853(SymbolScope);
  TypeScript$$21.SymbolScopeBuilder = SymbolScopeBuilder;
  var FilteredSymbolScope = v857(SymbolScope);
  TypeScript$$21.FilteredSymbolScope = FilteredSymbolScope;
  var FilteredSymbolScopeBuilder = v861(SymbolScopeBuilder);
  TypeScript$$21.FilteredSymbolScopeBuilder = FilteredSymbolScopeBuilder;
  return
}
function v794(TypeScript$$20) {
  function v793(_super$$53) {
    function v792() {
      return true
    }
    function v791(type$$36) {
      var v15283 = this.variable;
      var v6831 = v15283.typeLink;
      v6831.type = type$$36;
      return
    }
    function v790(scope$$20) {
      var v6832 = TypeScript$$20.MemberName;
      var v15284 = JAMScript.call(this.getType, this, []);
      var v6833 = JAMScript.call(v15284.getScopedTypeNameEx, v15284, [scope$$20]);
      var v15285 = this.name;
      var v6834 = v15285 + ": ";
      return JAMScript.call(v6832.create, v6832, [v6833, v6834, ""])
    }
    function v789() {
      var v15286 = this.variable;
      var v6835 = v15286.typeLink;
      return v6835.type
    }
    function v788() {
      return true
    }
    function v787() {
      var v6836 = TypeScript$$20.SymbolKind;
      return v6836.Variable
    }
    function VariableSymbol$$1(name$$57, location$$27, unitIndex$$9, variable) {
      var v6837 = name$$57.length;
      JAMScript.call(_super$$53.call, _super$$53, [this, name$$57, location$$27, v6837, unitIndex$$9]);
      this.variable = variable;
      return
    }
    JAMScript.call(__extends, null, [VariableSymbol$$1, _super$$53]);
    var v6838 = VariableSymbol$$1.prototype;
    v6838.kind = v787;
    var v6839 = VariableSymbol$$1.prototype;
    v6839.writeable = v788;
    var v6840 = VariableSymbol$$1.prototype;
    v6840.getType = v789;
    var v6841 = VariableSymbol$$1.prototype;
    v6841.getTypeNameEx = v790;
    var v6842 = VariableSymbol$$1.prototype;
    v6842.setType = v791;
    var v6843 = VariableSymbol$$1.prototype;
    v6843.isVariable = v792;
    return VariableSymbol$$1
  }
  function v786(_super$$52) {
    function v785() {
      var v15287 = this.paramDocComment;
      var v6852 = !v15287;
      if(v6852) {
        var parameterComments = [];
        var v6848 = this.funcDecl;
        if(v6848) {
          var v6844 = this.funcDecl;
          var fncDocComments$$1 = JAMScript.call(v6844.getDocComments, v6844, []);
          var v6845 = TypeScript$$20.Comment;
          var v6846 = this.name;
          var paramComment = JAMScript.call(v6845.getParameterDocCommentText, v6845, [v6846, fncDocComments$$1]);
          var v6847 = paramComment != "";
          if(v6847) {
            JAMScript.call(parameterComments.push, parameterComments, [paramComment])
          }
        }
        var v6849 = TypeScript$$20.Comment;
        var v6850 = JAMScript.call(this.getDocComments, this, []);
        var docComments$$1 = JAMScript.call(v6849.getDocCommentText, v6849, [v6850]);
        var v6851 = docComments$$1 != "";
        if(v6851) {
          JAMScript.call(parameterComments.push, parameterComments, [docComments$$1])
        }
        var v27155 = parameterComments.join("\n");
        this.paramDocComment = v27155
      }
      return this.paramDocComment
    }
    function v784(pattern$$7, replacement$$5, checker$$14) {
      var v20297 = this.parameter;
      var v15288 = v20297.typeLink;
      var v6853 = v15288.type;
      var rType$$1 = JAMScript.call(v6853.specializeType, v6853, [pattern$$7, replacement$$5, checker$$14, false]);
      var v23598 = this.parameter;
      var v20298 = v23598.typeLink;
      var v15289 = v20298.type;
      var v6856 = v15289 != rType$$1;
      if(v6856) {
        var paramDef$$1 = JAMScript.new(ValueLocation, []);
        var v6854 = this.name;
        var v15290 = checker$$14.locationInfo;
        var v6855 = v15290.unitIndex;
        var result$$17 = new ParameterSymbol$$1(v6854, 0, v6855, paramDef$$1);
        paramDef$$1.symbol = result$$17;
        JAMScript.call(result$$17.setType, result$$17, [rType$$1]);
        return result$$17
      }else {
        return this
      }
      return
    }
    function v783() {
      var v6857 = JAMScript.call(this.getTypeNameEx, this, [null]);
      return JAMScript.call(v6857.toString, v6857, [])
    }
    function v782(scope$$19) {
      var v6858 = TypeScript$$20.MemberName;
      var v15291 = JAMScript.call(this.getType, this, []);
      var v6859 = JAMScript.call(v15291.getScopedTypeNameEx, v15291, [scope$$19]);
      var v20299 = this.name;
      var v23599;
      var v25262 = JAMScript.call(this.isOptional, this, []);
      if(v25262) {
        v23599 = "?"
      }else {
        v23599 = ""
      }
      var v20300 = v23599;
      var v15292 = v20299 + v20300;
      var v6860 = v15292 + ": ";
      return JAMScript.call(v6858.create, v6858, [v6859, v6860, ""])
    }
    function v781() {
      var v15293 = this.parameter;
      if(v15293) {
        var v23600 = this.parameter;
        var v20301 = v23600.symbol;
        if(v20301) {
          var v25263 = this.parameter;
          var v23601 = v25263.symbol;
          v20301 = v23601.declAST
        }
        v15293 = v20301
      }
      var v6862 = v15293;
      if(v6862) {
        var v20302 = this.parameter;
        var v15294 = v20302.symbol;
        var v6861 = v15294.declAST;
        return v6861.isOptional
      }else {
        return false
      }
      return
    }
    function v780() {
      return true
    }
    function v779(type$$35) {
      var v15295 = this.parameter;
      var v6863 = v15295.typeLink;
      v6863.type = type$$35;
      return
    }
    function v778() {
      var v15296 = this.parameter;
      var v6864 = v15296.typeLink;
      return v6864.type
    }
    function v777() {
      return true
    }
    function v776() {
      var v6865 = TypeScript$$20.SymbolKind;
      return v6865.Parameter
    }
    function ParameterSymbol$$1(name$$56, location$$26, unitIndex$$8, parameter) {
      var v6866 = name$$56.length;
      JAMScript.call(_super$$52.call, _super$$52, [this, name$$56, location$$26, v6866, unitIndex$$8]);
      this.parameter = parameter;
      this.paramDocComment = null;
      this.funcDecl = null;
      this.argsOffset = -1;
      this.name = name$$56;
      this.location = location$$26;
      return
    }
    JAMScript.call(__extends, null, [ParameterSymbol$$1, _super$$52]);
    var v6867 = ParameterSymbol$$1.prototype;
    v6867.kind = v776;
    var v6868 = ParameterSymbol$$1.prototype;
    v6868.writeable = v777;
    var v6869 = ParameterSymbol$$1.prototype;
    v6869.getType = v778;
    var v6870 = ParameterSymbol$$1.prototype;
    v6870.setType = v779;
    var v6871 = ParameterSymbol$$1.prototype;
    v6871.isVariable = v780;
    var v6872 = ParameterSymbol$$1.prototype;
    v6872.isOptional = v781;
    var v6873 = ParameterSymbol$$1.prototype;
    v6873.getTypeNameEx = v782;
    var v6874 = ParameterSymbol$$1.prototype;
    v6874.toString = v783;
    var v6875 = ParameterSymbol$$1.prototype;
    v6875.specializeType = v784;
    var v6876 = ParameterSymbol$$1.prototype;
    v6876.getParameterDocComments = v785;
    return ParameterSymbol$$1
  }
  function v775(_super$$51) {
    function v774() {
      var v20303 = this.getter;
      var v15297 = v20303 != null;
      var v20305 = !v15297;
      if(v20305) {
        var v20304 = this.setter;
        v15297 = v20304 != null
      }
      var v6883 = v15297;
      if(v6883) {
        var comments$$11 = [];
        var v15298 = this.getter;
        var v6878 = v15298 != null;
        if(v6878) {
          var v15299 = this.getter;
          var v6877 = JAMScript.call(v15299.getDocComments, v15299, []);
          comments$$11 = comments$$11.concat(v6877)
        }
        var v15300 = this.setter;
        var v6880 = v15300 != null;
        if(v6880) {
          var v15301 = this.setter;
          var v6879 = JAMScript.call(v15301.getDocComments, v15301, []);
          comments$$11 = comments$$11.concat(v6879)
        }
        return comments$$11
      }else {
        var v15302 = this.declAST;
        var v6882 = v15302 != null;
        if(v6882) {
          var v6881 = this.declAST;
          return JAMScript.call(v6881.getDocComments, v6881, [])
        }
      }
      return[]
    }
    function v773(pattern$$6, replacement$$4, checker$$13) {
      var v20306 = this.field;
      var v15303 = v20306.typeLink;
      var v6884 = v15303.type;
      var rType = JAMScript.call(v6884.specializeType, v6884, [pattern$$6, replacement$$4, checker$$13, false]);
      var v23602 = this.field;
      var v20307 = v23602.typeLink;
      var v15304 = v20307.type;
      var v6889 = rType != v15304;
      if(v6889) {
        var fieldDef = JAMScript.new(ValueLocation, []);
        var v6885 = this.name;
        var v15305 = checker$$13.locationInfo;
        var v6886 = v15305.unitIndex;
        var v6887 = this.canWrite;
        var result$$16 = new FieldSymbol$$1(v6885, 0, v6886, v6887, fieldDef);
        result$$16.flags = this.flags;
        fieldDef.symbol = result$$16;
        var v6888 = TypeScript$$20.TypeLink;
        var v27156 = JAMScript.new(v6888, []);
        fieldDef.typeLink = v27156;
        JAMScript.call(result$$16.setType, result$$16, [rType]);
        result$$16.typeCheckStatus = TypeCheckStatus.Finished;
        return result$$16
      }else {
        return this
      }
      return
    }
    function v772() {
      var v6890 = JAMScript.call(this.getTypeNameEx, this, [null]);
      return JAMScript.call(v6890.toString, v6890, [])
    }
    function v771() {
      return true
    }
    function v770() {
      var v15306 = this.getter;
      var v6891 = v15306 != null;
      var v15308 = !v6891;
      if(v15308) {
        var v15307 = this.setter;
        v6891 = v15307 != null
      }
      return v6891
    }
    function v769(type$$34) {
      var v15309 = this.field;
      var v6892 = v15309.typeLink;
      v6892.type = type$$34;
      return
    }
    function v768() {
      return true
    }
    function v767(scope$$18) {
      var v6893 = TypeScript$$20.MemberName;
      var v23603 = this.field;
      var v20308 = v23603.typeLink;
      var v15310 = v20308.type;
      var v6894 = JAMScript.call(v15310.getScopedTypeNameEx, v15310, [scope$$18]);
      var v20309 = this.name;
      var v20310 = JAMScript.call(this.getOptionalNameString, this, []);
      var v15311 = v20309 + v20310;
      var v6895 = v15311 + ": ";
      return JAMScript.call(v6893.create, v6893, [v6894, v6895, ""])
    }
    function v766() {
      var v15312 = this.field;
      var v6896 = v15312.typeLink;
      return v6896.type
    }
    function v765() {
      var v6897;
      var v15314 = JAMScript.call(this.isAccessor, this, []);
      if(v15314) {
        var v15313 = this.setter;
        v6897 = v15313 != null
      }else {
        v6897 = this.canWrite
      }
      return v6897
    }
    function v764() {
      var v6898 = TypeScript$$20.SymbolKind;
      return v6898.Field
    }
    function FieldSymbol$$1(name$$55, location$$25, unitIndex$$7, canWrite, field) {
      var v6899 = name$$55.length;
      JAMScript.call(_super$$51.call, _super$$51, [this, name$$55, location$$25, v6899, unitIndex$$7]);
      this.canWrite = canWrite;
      this.field = field;
      this.getter = null;
      this.setter = null;
      this.hasBeenEmitted = false;
      this.name = name$$55;
      this.location = location$$25;
      return
    }
    JAMScript.call(__extends, null, [FieldSymbol$$1, _super$$51]);
    var v6900 = FieldSymbol$$1.prototype;
    v6900.kind = v764;
    var v6901 = FieldSymbol$$1.prototype;
    v6901.writeable = v765;
    var v6902 = FieldSymbol$$1.prototype;
    v6902.getType = v766;
    var v6903 = FieldSymbol$$1.prototype;
    v6903.getTypeNameEx = v767;
    var v6904 = FieldSymbol$$1.prototype;
    v6904.isMember = v768;
    var v6905 = FieldSymbol$$1.prototype;
    v6905.setType = v769;
    var v6906 = FieldSymbol$$1.prototype;
    v6906.isAccessor = v770;
    var v6907 = FieldSymbol$$1.prototype;
    v6907.isVariable = v771;
    var v6908 = FieldSymbol$$1.prototype;
    v6908.toString = v772;
    var v6909 = FieldSymbol$$1.prototype;
    v6909.specializeType = v773;
    var v6910 = FieldSymbol$$1.prototype;
    v6910.getDocComments = v774;
    return FieldSymbol$$1
  }
  function v763(_super$$50) {
    function v762() {
      return true
    }
    function WithSymbol$$1(location$$24, unitIndex$$6, withType$$1) {
      JAMScript.call(_super$$50.call, _super$$50, [this, "with", location$$24, 4, unitIndex$$6, withType$$1]);
      return
    }
    JAMScript.call(__extends, null, [WithSymbol$$1, _super$$50]);
    var v6911 = WithSymbol$$1.prototype;
    v6911.isWith = v762;
    return WithSymbol$$1
  }
  function v761(_super$$49) {
    function v760() {
      var comments$$10 = [];
      var v15315 = this.declAST;
      var v6913 = v15315 != null;
      if(v6913) {
        var v15316 = this.declAST;
        var v6912 = JAMScript.call(v15316.getDocComments, v15316, []);
        comments$$10 = comments$$10.concat(v6912)
      }
      var i$$64 = 0;
      var v20311 = this.expansionsDeclAST;
      var v15317 = v20311.length;
      var v6915 = i$$64 < v15317;
      for(;v6915;) {
        var v20312 = this.expansionsDeclAST;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v15318 = v20312[i$$64]
        }
        var v6914 = JAMScript.call(v15318.getDocComments, v15318, []);
        comments$$10 = comments$$10.concat(v6914);
        i$$64 = i$$64 + 1;
        var v20313 = this.expansionsDeclAST;
        var v15319 = v20313.length;
        v6915 = i$$64 < v15319
      }
      return comments$$10
    }
    function v759(scopeSymbolPath) {
      var scopeSymbolPathLength = scopeSymbolPath.length;
      var externalSymbol = null;
      var v20314 = scopeSymbolPath.length;
      var v15320 = v20314 > 0;
      if(v15320) {
        var v26066 = scopeSymbolPathLength - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v25264 = scopeSymbolPath[v26066]
        }
        var v23604 = JAMScript.call(v25264.getType, v25264, []);
        var v20315 = JAMScript.call(v23604.isModuleType, v23604, []);
        if(v20315) {
          var v25265 = scopeSymbolPathLength - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23605 = scopeSymbolPath[v25265]
          }
          v20315 = v23605.isDynamic
        }
        v15320 = v20315
      }
      var v6922 = v15320;
      if(v6922) {
        var v15321 = scopeSymbolPathLength > 1;
        if(v15321) {
          var v26067 = scopeSymbolPathLength - 2;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25266 = scopeSymbolPath[v26067]
          }
          var v23606 = JAMScript.call(v25266.getType, v25266, []);
          var v20316 = JAMScript.call(v23606.isModuleType, v23606, []);
          if(v20316) {
            var v25267 = scopeSymbolPathLength - 2;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v23607 = scopeSymbolPath[v25267]
            }
            v20316 = v23607.isDynamic
          }
          v15321 = v20316
        }
        var v6918 = v15321;
        if(v6918) {
          var v15322 = scopeSymbolPathLength - 2;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6916 = scopeSymbolPath[v15322]
          }
          var moduleType = JAMScript.call(v6916.getType, v6916, []);
          var v6917 = this.type;
          externalSymbol = JAMScript.call(moduleType.findDynamicModuleName, moduleType, [v6917])
        }
        var v6921 = externalSymbol == null;
        if(v6921) {
          var v15323 = scopeSymbolPathLength - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v6919 = scopeSymbolPath[v15323]
          }
          moduleType = JAMScript.call(v6919.getType, v6919, []);
          var v6920 = this.type;
          externalSymbol = JAMScript.call(moduleType.findDynamicModuleName, moduleType, [v6920])
        }
      }
      return externalSymbol
    }
    function v758(scopeSymbol$$1) {
      var v20317 = !scopeSymbol$$1;
      var v15324 = !v20317;
      if(v15324) {
        var v23608 = this.prettyName;
        var v20318 = JAMScript.call(TypeScript$$20.isQuoted, TypeScript$$20, [v23608]);
        if(v20318) {
          var v23609 = this.type;
          v20318 = JAMScript.call(v23609.isModuleType, v23609, [])
        }
        v15324 = v20318
      }
      var v6924 = v15324;
      if(v6924) {
        var symbolPath = JAMScript.call(scopeSymbol$$1.pathToRoot, scopeSymbol$$1, []);
        var prettyName$$1 = JAMScript.call(this.getPrettyNameOfDynamicModule, this, [symbolPath]);
        var v6923 = prettyName$$1 != null;
        if(v6923) {
          return prettyName$$1.name
        }
      }
      return this.prettyName
    }
    function v757(pattern$$5, replacement$$3, checker$$12) {
      var v15325 = this.type;
      var v6928 = v15325 == pattern$$5;
      if(v6928) {
        return replacement$$3.symbol
      }else {
        var v6925 = this.type;
        var replType = JAMScript.call(v6925.specializeType, v6925, [pattern$$5, replacement$$3, checker$$12, false]);
        var v15326 = this.type;
        var v6927 = replType != v15326;
        if(v6927) {
          var v6926 = this.name;
          var result$$15 = new TypeSymbol$$1(v6926, -1, 0, -1, replType);
          return result$$15
        }else {
          return this
        }
      }
      return
    }
    function v756() {
      var v15327 = this.declAST;
      var v6929 = v15327 != null;
      if(v6929) {
        var v20319 = this.declAST;
        var v15328 = v20319.nodeType;
        var v20320 = TypeScript$$20.NodeType;
        var v15329 = v20320.FuncDecl;
        v6929 = v15328 == v15329
      }
      return v6929
    }
    function v755() {
      var v6930 = this.instanceType;
      return v6930 != null
    }
    function v754() {
      var v6931 = this.type;
      var result$$14 = JAMScript.call(v6931.getTypeName, v6931, []);
      var v6933 = this.name;
      if(v6933) {
        var v15330 = this.name;
        var v6932 = v15330 + ":";
        result$$14 = v6932 + result$$14
      }
      return result$$14
    }
    function v753() {
      var v25268 = this.type;
      var v23610 = v25268.typeFlags;
      var v25269 = TypeScript$$20.TypeFlags;
      var v23611 = v25269.IsClass;
      var v20321 = v23610 & v23611;
      var v15331 = !v20321;
      if(v15331) {
        var v20322 = this.type;
        v15331 = JAMScript.call(v20322.isClass, v20322, [])
      }
      var v6936 = v15331;
      if(v6936) {
        var v15332 = this.type;
        var v6934 = v15332.instanceType;
        return v6934.constructorScope
      }else {
        var v6935 = this.type;
        return v6935.containedScope
      }
      return
    }
    function v752(scope$$17) {
      var v6937 = this.type;
      var v15333;
      var v20325 = this.name;
      if(v20325) {
        var v20323 = this.name;
        var v20324 = JAMScript.call(this.getOptionalNameString, this, []);
        v15333 = v20323 + v20324
      }else {
        v15333 = ""
      }
      var v6938 = v15333;
      return JAMScript.call(v6937.getMemberTypeNameEx, v6937, [v6938, false, false, scope$$17])
    }
    function v751() {
      return this.type
    }
    function v750() {
      return true
    }
    function v749() {
      var v6939 = TypeScript$$20.SymbolKind;
      return v6939.Type
    }
    function v748(loc) {
      var v15334 = this.additionalLocations;
      var v6940 = v15334 == null;
      if(v6940) {
        this.additionalLocations = []
      }
      var v6941 = this.additionalLocations;
      var v15335 = this.additionalLocations;
      var v6942 = v15335.length;
      JAMScript.set(v6941, v6942, loc);
      return
    }
    function TypeSymbol$$1(locName, location$$23, length$$17, unitIndex$$5, type$$33) {
      JAMScript.call(_super$$49.call, _super$$49, [this, locName, location$$23, length$$17, unitIndex$$5]);
      this.type = type$$33;
      this.expansions = [];
      this.expansionsDeclAST = [];
      this.isDynamic = false;
      this.isMethod = false;
      this.aliasLink = null;
      this.onlyReferencedAsTypeRef = TypeScript$$20.optimizeModuleCodeGen;
      this.prettyName = this.name;
      return
    }
    JAMScript.call(__extends, null, [TypeSymbol$$1, _super$$49]);
    var v6943 = TypeSymbol$$1.prototype;
    v6943.addLocation = v748;
    var v6944 = TypeSymbol$$1.prototype;
    v6944.kind = v749;
    var v6945 = TypeSymbol$$1.prototype;
    v6945.isType = v750;
    var v6946 = TypeSymbol$$1.prototype;
    v6946.getType = v751;
    var v6947 = TypeSymbol$$1.prototype;
    v6947.getTypeNameEx = v752;
    var v6948 = TypeSymbol$$1.prototype;
    v6948.instanceScope = v753;
    var v6949 = TypeSymbol$$1.prototype;
    v6949.toString = v754;
    var v6950 = TypeSymbol$$1.prototype;
    v6950.isClass = v755;
    var v6951 = TypeSymbol$$1.prototype;
    v6951.isFunction = v756;
    var v6952 = TypeSymbol$$1.prototype;
    v6952.specializeType = v757;
    var v6953 = TypeSymbol$$1.prototype;
    v6953.getPrettyName = v758;
    var v6954 = TypeSymbol$$1.prototype;
    v6954.getPrettyNameOfDynamicModule = v759;
    var v6955 = TypeSymbol$$1.prototype;
    v6955.getDocComments = v760;
    return TypeSymbol$$1
  }
  function v747(_super$$48) {
    function v746(varFlags) {
      var v20326 = TypeScript$$20.VarFlags;
      var v15336 = v20326.Ambient;
      var v6956 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15336]);
      if(v6956) {
        var v15337 = this.flags;
        var v20327 = TypeScript$$20.SymbolFlags;
        var v15338 = v20327.Ambient;
        this.flags = v15337 | v15338
      }
      var v20328 = TypeScript$$20.VarFlags;
      var v15339 = v20328.Constant;
      var v6957 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15339]);
      if(v6957) {
        var v15340 = this.flags;
        var v20329 = TypeScript$$20.SymbolFlags;
        var v15341 = v20329.Constant;
        this.flags = v15340 | v15341
      }
      var v20330 = TypeScript$$20.VarFlags;
      var v15342 = v20330.Static;
      var v6958 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15342]);
      if(v6958) {
        var v15343 = this.flags;
        var v20331 = TypeScript$$20.SymbolFlags;
        var v15344 = v20331.Static;
        this.flags = v15343 | v15344
      }
      var v20332 = TypeScript$$20.VarFlags;
      var v15345 = v20332.Property;
      var v6959 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15345]);
      if(v6959) {
        var v15346 = this.flags;
        var v20333 = TypeScript$$20.SymbolFlags;
        var v15347 = v20333.Property;
        this.flags = v15346 | v15347
      }
      var v20334 = TypeScript$$20.VarFlags;
      var v15348 = v20334.Private;
      var v6960 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15348]);
      if(v6960) {
        var v15349 = this.flags;
        var v20335 = TypeScript$$20.SymbolFlags;
        var v15350 = v20335.Private;
        this.flags = v15349 | v15350
      }
      var v20336 = TypeScript$$20.VarFlags;
      var v15351 = v20336.Public;
      var v6961 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15351]);
      if(v6961) {
        var v15352 = this.flags;
        var v20337 = TypeScript$$20.SymbolFlags;
        var v15353 = v20337.Public;
        this.flags = v15352 | v15353
      }
      var v20338 = TypeScript$$20.VarFlags;
      var v15354 = v20338.Readonly;
      var v6962 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15354]);
      if(v6962) {
        var v15355 = this.flags;
        var v20339 = TypeScript$$20.SymbolFlags;
        var v15356 = v20339.Readonly;
        this.flags = v15355 | v15356
      }
      var v20340 = TypeScript$$20.VarFlags;
      var v15357 = v20340.Exported;
      var v6963 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [varFlags, v15357]);
      if(v6963) {
        var v15358 = this.flags;
        var v20341 = TypeScript$$20.SymbolFlags;
        var v15359 = v20341.Exported;
        this.flags = v15358 | v15359
      }
      return
    }
    function v745() {
      return true
    }
    function InferenceSymbol$$1(name$$54, location$$22, length$$16, unitIndex$$4) {
      JAMScript.call(_super$$48.call, _super$$48, [this, name$$54, location$$22, length$$16, unitIndex$$4]);
      this.typeCheckStatus = TypeCheckStatus.NotStarted;
      return
    }
    JAMScript.call(__extends, null, [InferenceSymbol$$1, _super$$48]);
    var v6964 = InferenceSymbol$$1.prototype;
    v6964.isInferenceSymbol = v745;
    var v6965 = InferenceSymbol$$1.prototype;
    v6965.transferVarFlags = v746;
    return InferenceSymbol$$1
  }
  function v744() {
    function ValueLocation$$1() {
      return
    }
    return ValueLocation$$1
  }
  function v743() {
    function v742() {
      var v6966 = this.flags;
      var v15360 = TypeScript$$20.SymbolFlags;
      var v6967 = v15360.Static;
      return JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v6966, v6967])
    }
    function v741() {
      var v15361 = this.declAST;
      var v6969 = v15361 != null;
      if(v6969) {
        var v6968 = this.declAST;
        return JAMScript.call(v6968.getDocComments, v6968, [])
      }
      return[]
    }
    function v740() {
      var v20342 = this.declAST;
      var v15362 = v20342 != null;
      if(v15362) {
        var v23612 = this.declAST;
        var v20343 = v23612.nodeType;
        var v23613 = TypeScript$$20.NodeType;
        var v20344 = v23613.VarDecl;
        v15362 = v20343 == v20344
      }
      var v6970 = v15362;
      if(v6970) {
        return this.declAST
      }
      return null
    }
    function v739(checker$$11) {
      var v15363 = this.declAST;
      var v6974 = v15363 != null;
      if(v6974) {
        var v20345 = this.declAST;
        var v15364 = v20345.nodeType;
        var v20346 = TypeScript$$20.NodeType;
        var v15365 = v20346.InterfaceDeclaration;
        var v6973 = v15364 == v15365;
        if(v6973) {
          return this.declAST
        }else {
          var v20347 = this.container;
          var v15366 = v20347 != null;
          if(v15366) {
            var v23614 = this.container;
            var v23615 = checker$$11.gloMod;
            var v20348 = v23614 != v23615;
            if(v20348) {
              var v26068 = this.container;
              var v25270 = v26068.declAST;
              var v23616 = v25270.nodeType;
              var v25271 = TypeScript$$20.NodeType;
              var v23617 = v25271.InterfaceDeclaration;
              v20348 = v23616 == v23617
            }
            v15366 = v20348
          }
          var v6972 = v15366;
          if(v6972) {
            var v6971 = this.container;
            return v6971.declAST
          }
        }
      }
      return null
    }
    function v738() {
      throw new Error("please implement in derived class");
    }
    function v737(type$$32) {
      throw new Error("please implement in derived class");
    }
    function v736(pattern$$4, replacement$$2, checker$$10) {
      throw new Error("please implement in derived class");
    }
    function v735(outfile$$5) {
      var v6975 = JAMScript.call(this.toString, this, []);
      JAMScript.call(outfile$$5.Write, outfile$$5, [v6975]);
      return
    }
    function v734() {
      var v6976 = this.name;
      if(v6976) {
        return this.name
      }else {
        return"_anonymous"
      }
      return
    }
    function v733(identifier) {
      var v15367 = this.refs;
      var v6977 = !v15367;
      if(v6977) {
        this.refs = []
      }
      var v6978 = this.refs;
      var v15368 = this.refs;
      var v6979 = v15368.length;
      JAMScript.set(v6978, v6979, identifier);
      return
    }
    function v732(scope$$16, checker$$9) {
      var v15369 = checker$$9 == null;
      var v20351 = !v15369;
      if(v20351) {
        var v20349 = this.container;
        var v20350 = checker$$9.gloMod;
        v15369 = v20349 == v20350
      }
      var v6980 = v15369;
      if(v6980) {
        return true
      }
      var v15370 = this.flags;
      var v20352 = TypeScript$$20.SymbolFlags;
      var v15371 = v20352.ModuleMember;
      var v6996 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15370, v15371]);
      if(v6996) {
        var v15372 = this.flags;
        var v20353 = TypeScript$$20.SymbolFlags;
        var v15373 = v20353.Exported;
        var v6984 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15372, v15373]);
        if(v6984) {
          var v20354 = this.flags;
          var v23618 = TypeScript$$20.SymbolFlags;
          var v20355 = v23618.Private;
          var v15374 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20354, v20355]);
          var v6982 = !v15374;
          if(v6982) {
            return true
          }else {
            var v6981 = scope$$16.container;
            return aEnclosesB(this, v6981)
          }
        }else {
          var v15375 = checker$$9;
          if(v15375) {
            var v20356 = checker$$9.currentModDecl;
            var v20357 = this.declModule;
            v15375 = v20356 == v20357
          }
          var v6983 = v15375;
          var v15377 = !v6983;
          if(v15377) {
            var v15376 = checker$$9.currentModDecl;
            if(v15376) {
              var v23619 = checker$$9.currentModDecl;
              var v20358 = v23619.mod;
              if(v20358) {
                var v26069 = checker$$9.currentModDecl;
                var v25272 = v26069.mod;
                var v23620 = v25272.symbol;
                if(v23620) {
                  var v25273 = this.declModule;
                  if(v25273) {
                    var v26501 = this.declModule;
                    var v26070 = v26501.mod;
                    if(v26070) {
                      var v26788 = this.declModule;
                      var v26685 = v26788.mod;
                      var v26502 = v26685.symbol;
                      if(v26502) {
                        var v26851 = checker$$9.currentModDecl;
                        var v26789 = v26851.mod;
                        var v26686 = v26789.symbol;
                        var v26852 = this.declModule;
                        var v26790 = v26852.mod;
                        var v26687 = v26790.symbol;
                        v26502 = aEnclosesB(v26686, v26687)
                      }
                      v26070 = v26502
                    }
                    v25273 = v26070
                  }
                  v23620 = v25273
                }
                v20358 = v23620
              }
              v15376 = v20358
            }
            v6983 = v15376
          }
          return v6983
        }
      }else {
        var v6985 = this.declAST;
        if(v6985) {
          var v20359 = this.declAST;
          var v15378 = v20359.nodeType;
          var v20360 = TypeScript$$20.NodeType;
          var v15379 = v20360.FuncDecl;
          v6985 = v15378 == v15379
        }
        var isFunction = v6985;
        var v6986 = isFunction;
        if(v6986) {
          var v15380 = this.declAST;
          v6986 = JAMScript.call(v15380.isMethod, v15380, [])
        }
        var isMethod$$2 = v6986;
        var v6987 = isFunction;
        if(v6987) {
          var v20361 = this.declAST;
          var v15381 = v20361.fncFlags;
          var v20362 = TypeScript$$20.FncFlags;
          var v15382 = v20362.Static;
          v6987 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15381, v15382])
        }
        var isStaticFunction = v6987;
        var v6988 = isMethod$$2;
        if(v6988) {
          var v20363 = this.declAST;
          var v15383 = v20363.fncFlags;
          var v20364 = TypeScript$$20.FncFlags;
          var v15384 = v20364.Private;
          v6988 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15383, v15384])
        }
        var isPrivateMethod = v6988;
        var v6989 = JAMScript.call(this.isType, this, []);
        if(v6989) {
          v6989 = this.aliasLink
        }
        var isAlias = v6989;
        var v15385 = JAMScript.call(this.isMember, this, []);
        var v20366 = !v15385;
        if(v20366) {
          var v20365 = isMethod$$2;
          var v23621 = !v20365;
          if(v23621) {
            v20365 = isStaticFunction || isAlias
          }
          v15385 = v20365
        }
        var v6995 = v15385;
        if(v6995) {
          var v20367 = this.flags;
          var v23622 = TypeScript$$20.SymbolFlags;
          var v20368 = v23622.Private;
          var v15386 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20367, v20368]);
          var v20369 = !v15386;
          if(v20369) {
            v15386 = isPrivateMethod
          }
          var v6992 = v15386;
          if(v6992) {
            var v20370 = scope$$16.container;
            var v15387 = v20370 == null;
            if(v15387) {
              var v20371 = this.container;
              var v20372 = scope$$16.container;
              v15387 = v20371 != v20372
            }
            var v6991 = v15387;
            if(v6991) {
              return false
            }else {
              var v6990;
              var v20373 = this.container;
              var v15390 = v20373 == null;
              if(v15390) {
                v6990 = true
              }else {
                var v15388 = scope$$16.container;
                var v15389 = this.container;
                v6990 = aEnclosesB(v15388, v15389)
              }
              return v6990
            }
          }else {
            return true
          }
        }else {
          var v6994 = this.container;
          if(v6994) {
            var v6993 = scope$$16.container;
            return aEnclosesB(this, v6993)
          }else {
            return true
          }
        }
      }
      return
    }
    function v731(checker$$8) {
      var v15391 = checker$$8.gloMod;
      var v6997 = this == v15391;
      if(v6997) {
        return true
      }
      var v15392 = this.flags;
      var v20374 = TypeScript$$20.SymbolFlags;
      var v15393 = v20374.Private;
      var v6998 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15392, v15393]);
      if(v6998) {
        return false
      }
      var v20375 = this.flags;
      var v23623 = TypeScript$$20.SymbolFlags;
      var v20376 = v23623.Exported;
      var v15394 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20375, v20376]);
      var v7001 = !v15394;
      if(v7001) {
        var v6999 = this.container;
        var v7000 = checker$$8.gloMod;
        return v6999 == v7000
      }
      var v7002 = this.container;
      return JAMScript.call(v7002.isExternallyVisible, v7002, [checker$$8])
    }
    function v730() {
      var builder$$4 = this.name;
      var ancestor = this.container;
      var v15395 = ancestor;
      if(v15395) {
        var v20377 = ancestor.name;
        var v20378 = TypeScript$$20.globalId;
        v15395 = v20377 != v20378
      }
      var v7004 = v15395;
      for(;v7004;) {
        var v15396 = ancestor.name;
        var v7003 = v15396 + ".";
        builder$$4 = v7003 + builder$$4;
        ancestor = ancestor.container;
        var v15397 = ancestor;
        if(v15397) {
          var v20379 = ancestor.name;
          var v20380 = TypeScript$$20.globalId;
          v15397 = v20379 != v20380
        }
        v7004 = v15397
      }
      return builder$$4
    }
    function v729(scope$$15) {
      var v7007 = scope$$15 == null;
      if(v7007) {
        var v7005 = JAMScript.call(this.getPrettyName, this, [null]);
        var v7006 = JAMScript.call(this.getOptionalNameString, this, []);
        return v7005 + v7006
      }
      var v7008 = scope$$15.container;
      var lca = JAMScript.call(this.findCommonAncestorPath, this, [v7008]);
      var builder$$3 = "";
      var i$$63 = 0;
      var len$$24 = lca.length;
      var v7012 = i$$63 < len$$24;
      for(;v7012;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v7009 = lca[i$$63]
        }
        var v15398;
        var v23624 = len$$24 - 1;
        var v20382 = i$$63 == v23624;
        if(v20382) {
          v15398 = scope$$15.container
        }else {
          var v20381 = i$$63 + 1;
          v15398 = lca[v20381]
        }
        var v7010 = v15398;
        var prettyName = JAMScript.call(v7009.getPrettyName, v7009, [v7010]);
        var v7011 = prettyName + ".";
        builder$$3 = v7011 + builder$$3;
        i$$63 = i$$63 + 1;
        v7012 = i$$63 < len$$24
      }
      var v25274;
      var v26071 = len$$24 == 0;
      if(v26071) {
        v25274 = scope$$15.container
      }else {
        v25274 = lca[0]
      }
      var v23625 = v25274;
      var v20383 = JAMScript.call(this.getPrettyName, this, [v23625]);
      var v20384 = JAMScript.call(this.getOptionalNameString, this, []);
      var v15399 = v20383 + v20384;
      builder$$3 = builder$$3 + v15399;
      return builder$$3
    }
    function v728(scopeSymbol) {
      return this.name
    }
    function v727(b$$9) {
      var v15400 = this.container;
      var v7013 = v15400 == null;
      if(v7013) {
        return new Array
      }
      var v7014 = this.container;
      var aPath = JAMScript.call(v7014.pathToRoot, v7014, []);
      var bPath;
      if(b$$9) {
        bPath = JAMScript.call(b$$9.pathToRoot, b$$9, [])
      }else {
        bPath = new Array
      }
      var commonNodeIndex = -1;
      var i$$62 = 0;
      var aLen = aPath.length;
      var v7018 = i$$62 < aLen;
      for(;v7018;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var aNode = aPath[i$$62]
        }
        var j$$8 = 0;
        var bLen = bPath.length;
        var v7016 = j$$8 < bLen;
        for(;v7016;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var bNode = bPath[j$$8]
          }
          var v7015 = aNode == bNode;
          if(v7015) {
            commonNodeIndex = i$$62;
            break
          }
          j$$8 = j$$8 + 1;
          v7016 = j$$8 < bLen
        }
        var v7017 = commonNodeIndex >= 0;
        if(v7017) {
          break
        }
        i$$62 = i$$62 + 1;
        v7018 = i$$62 < aLen
      }
      var v7019 = commonNodeIndex >= 0;
      if(v7019) {
        return aPath.slice(0, commonNodeIndex)
      }else {
        return aPath
      }
      return
    }
    function v726() {
      var path$$6 = new Array;
      var node$$2 = this;
      var v15401 = node$$2;
      if(v15401) {
        var v20385 = node$$2.name;
        var v20386 = TypeScript$$20.globalId;
        v15401 = v20385 != v20386
      }
      var v7021 = v15401;
      for(;v7021;) {
        var v7020 = path$$6.length;
        path$$6[v7020] = node$$2;
        node$$2 = node$$2.container;
        var v15402 = node$$2;
        if(v15402) {
          var v20387 = node$$2.name;
          var v20388 = TypeScript$$20.globalId;
          v15402 = v20387 != v20388
        }
        v7021 = v15402
      }
      return path$$6
    }
    function v725() {
      var v7022;
      var v20389 = this.flags;
      var v23626 = TypeScript$$20.SymbolFlags;
      var v20390 = v23626.Optional;
      var v15403 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20389, v20390]);
      if(v15403) {
        v7022 = "?"
      }else {
        v7022 = ""
      }
      return v7022
    }
    function v724(scope$$14) {
      var v7023 = TypeScript$$20.MemberName;
      var v7024 = JAMScript.call(this.toString, this, []);
      return JAMScript.call(v7023.create, v7023, [v7024])
    }
    function v723(scope$$13) {
      var v7025 = JAMScript.call(this.getTypeNameEx, this, [scope$$13]);
      return JAMScript.call(v7025.toString, v7025, [])
    }
    function v722() {
      var v15404 = this.flags;
      var v20391 = TypeScript$$20.SymbolFlags;
      var v15405 = v20391.Property;
      var v7026 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v15404, v15405]);
      if(v7026) {
        var v20392 = this.flags;
        var v23627 = TypeScript$$20.SymbolFlags;
        var v20393 = v23627.ModuleMember;
        var v15406 = JAMScript.call(TypeScript$$20.hasFlag, TypeScript$$20, [v20392, v20393]);
        v7026 = !v15406
      }
      return v7026
    }
    function v721() {
      return false
    }
    function v720() {
      return null
    }
    function v719() {
      return false
    }
    function v718() {
      return false
    }
    function v717() {
      return false
    }
    function v716() {
      return false
    }
    function v715() {
      return false
    }
    function v714() {
      return false
    }
    function v713() {
      return null
    }
    function Symbol$$1(name$$53, location$$21, length$$15, unitIndex$$3) {
      this.name = name$$53;
      this.location = location$$21;
      this.length = length$$15;
      this.unitIndex = unitIndex$$3;
      this.bound = false;
      var v7027 = TypeScript$$20.SymbolFlags;
      this.flags = v7027.None;
      this.isObjectLitField = false;
      this.declAST = null;
      this.declModule = null;
      var v7028 = TypeScript$$20.CompilerDiagnostics;
      this.passSymbolCreated = v7028.analysisPass;
      return
    }
    var v7029 = Symbol$$1.prototype;
    v7029.instanceScope = v713;
    var v7030 = Symbol$$1.prototype;
    v7030.isVariable = v714;
    var v7031 = Symbol$$1.prototype;
    v7031.isMember = v715;
    var v7032 = Symbol$$1.prototype;
    v7032.isInferenceSymbol = v716;
    var v7033 = Symbol$$1.prototype;
    v7033.isWith = v717;
    var v7034 = Symbol$$1.prototype;
    v7034.writeable = v718;
    var v7035 = Symbol$$1.prototype;
    v7035.isType = v719;
    var v7036 = Symbol$$1.prototype;
    v7036.getType = v720;
    var v7037 = Symbol$$1.prototype;
    v7037.isAccessor = v721;
    var v7038 = Symbol$$1.prototype;
    v7038.isInstanceProperty = v722;
    var v7039 = Symbol$$1.prototype;
    v7039.getTypeName = v723;
    var v7040 = Symbol$$1.prototype;
    v7040.getTypeNameEx = v724;
    var v7041 = Symbol$$1.prototype;
    v7041.getOptionalNameString = v725;
    var v7042 = Symbol$$1.prototype;
    v7042.pathToRoot = v726;
    var v7043 = Symbol$$1.prototype;
    v7043.findCommonAncestorPath = v727;
    var v7044 = Symbol$$1.prototype;
    v7044.getPrettyName = v728;
    var v7045 = Symbol$$1.prototype;
    v7045.scopeRelativeName = v729;
    var v7046 = Symbol$$1.prototype;
    v7046.fullName = v730;
    var v7047 = Symbol$$1.prototype;
    v7047.isExternallyVisible = v731;
    var v7048 = Symbol$$1.prototype;
    v7048.visible = v732;
    var v7049 = Symbol$$1.prototype;
    v7049.addRef = v733;
    var v7050 = Symbol$$1.prototype;
    v7050.toString = v734;
    var v7051 = Symbol$$1.prototype;
    v7051.print = v735;
    var v7052 = Symbol$$1.prototype;
    v7052.specializeType = v736;
    var v7053 = Symbol$$1.prototype;
    v7053.setType = v737;
    var v7054 = Symbol$$1.prototype;
    v7054.kind = v738;
    var v7055 = Symbol$$1.prototype;
    v7055.getInterfaceDeclFromSymbol = v739;
    var v7056 = Symbol$$1.prototype;
    v7056.getVarDeclFromSymbol = v740;
    var v7057 = Symbol$$1.prototype;
    v7057.getDocComments = v741;
    var v7058 = Symbol$$1.prototype;
    v7058.isStatic = v742;
    return Symbol$$1
  }
  function v712(TypeCheckStatus$$1) {
    TypeCheckStatus$$1._map = [];
    var v7059 = TypeCheckStatus$$1._map;
    v7059[0] = "NotStarted";
    TypeCheckStatus$$1.NotStarted = 0;
    var v7060 = TypeCheckStatus$$1._map;
    v7060[1] = "Started";
    TypeCheckStatus$$1.Started = 1;
    var v7061 = TypeCheckStatus$$1._map;
    v7061[2] = "Finished";
    TypeCheckStatus$$1.Finished = 2;
    return
  }
  function aLexicallyEnclosesB(a$$7, b$$7) {
    var v15407 = a$$7.declAST;
    if(v15407) {
      var v20394 = b$$7;
      if(v20394) {
        var v23628 = b$$7.declAST;
        if(v23628) {
          var v26072 = a$$7.declAST;
          var v25275 = v26072.nodeType;
          var v26073 = TypeScript$$20.NodeType;
          var v25276 = v26073.FuncDecl;
          v23628 = v25275 == v25276
        }
        v20394 = v23628
      }
      v15407 = v20394
    }
    var v7063 = v15407;
    if(v7063) {
      var v20395 = a$$7.declAST;
      var v15408 = v20395.minChar;
      var v20396 = b$$7.declAST;
      var v15409 = v20396.minChar;
      var v7062 = v15408 <= v15409;
      if(v7062) {
        var v20397 = a$$7.declAST;
        var v15410 = v20397.limChar;
        var v20398 = b$$7.declAST;
        var v15411 = v20398.limChar;
        v7062 = v15410 >= v15411
      }
      return v7062
    }else {
      return false
    }
    return
  }
  function aEnclosesB(a$$8, b$$8) {
    var v7065 = a$$8.container;
    for(;v7065;) {
      var v15412 = a$$8 == b$$8;
      var v20400 = !v15412;
      if(v20400) {
        var v20399 = a$$8.container;
        v15412 = aLexicallyEnclosesB(v20399, b$$8)
      }
      var v7064 = v15412;
      if(v7064) {
        return true
      }
      a$$8 = a$$8.container;
      v7065 = a$$8.container
    }
    return false
  }
  var v15413 = TypeScript$$20.TypeCheckStatus;
  var v20401 = !v15413;
  if(v20401) {
    v15413 = TypeScript$$20.TypeCheckStatus = {}
  }
  var v7066 = v15413;
  v712(v7066);
  var TypeCheckStatus = TypeScript$$20.TypeCheckStatus;
  TypeScript$$20.aLexicallyEnclosesB = aLexicallyEnclosesB;
  TypeScript$$20.aEnclosesB = aEnclosesB;
  var Symbol = v743();
  TypeScript$$20.Symbol = Symbol;
  var ValueLocation = v744();
  TypeScript$$20.ValueLocation = ValueLocation;
  var InferenceSymbol = v747(Symbol);
  TypeScript$$20.InferenceSymbol = InferenceSymbol;
  var TypeSymbol = v761(InferenceSymbol);
  TypeScript$$20.TypeSymbol = TypeSymbol;
  var WithSymbol = v763(TypeSymbol);
  TypeScript$$20.WithSymbol = WithSymbol;
  var FieldSymbol = v775(InferenceSymbol);
  TypeScript$$20.FieldSymbol = FieldSymbol;
  var ParameterSymbol = v786(InferenceSymbol);
  TypeScript$$20.ParameterSymbol = ParameterSymbol;
  var VariableSymbol = v793(InferenceSymbol);
  TypeScript$$20.VariableSymbol = VariableSymbol;
  return
}
function v711(TypeScript$$19) {
  function v710() {
    function v709(checker$$7, ast$$59, hasConstruct) {
      var v7067 = this.hasBeenTypechecked;
      if(v7067) {
        return
      }
      this.hasBeenTypechecked = true;
      var len$$23 = 0;
      var v15414 = this.signatures;
      if(v15414) {
        var v23629 = this.signatures;
        var v20402 = len$$23 = v23629.length;
        v15414 = v20402 > 0
      }
      var v7077 = v15414;
      if(v7077) {
        var i$$61 = 0;
        var v7076 = i$$61 < len$$23;
        for(;v7076;) {
          var v15415 = !hasConstruct;
          if(v15415) {
            var v23630 = this.definitionSignature;
            var v20403 = !v23630;
            if(v20403) {
              var v26074 = this.signatures;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25277 = v26074[i$$61]
              }
              var v23631 = v25277.declAST;
              if(v23631) {
                var v26688 = this.signatures;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v26503 = v26688[i$$61]
                }
                var v26075 = v26503.declAST;
                var v25278 = v26075.isOverload;
                if(v25278) {
                  var v26853 = this.signatures;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v26791 = v26853[i$$61]
                  }
                  var v26689 = v26791.declAST;
                  var v26504 = v26689.fncFlags;
                  var v26690 = TypeScript$$19.FncFlags;
                  var v26505 = v26690.Ambient;
                  var v26076 = JAMScript.call(TypeScript$$19.hasFlag, TypeScript$$19, [v26504, v26505]);
                  v25278 = !v26076
                }
                v23631 = v25278
              }
              v20403 = v23631
            }
            v15415 = v20403
          }
          var v7070 = v15415;
          if(v7070) {
            var v7068 = checker$$7.errorReporter;
            var v20404 = this.signatures;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v15416 = v20404[i$$61]
            }
            var v7069 = v15416.declAST;
            JAMScript.call(v7068.simpleError, v7068, [v7069, "Overload declaration lacks definition"])
          }
          var v23632 = this.signatures;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v20405 = v23632[i$$61]
          }
          var v15417 = v20405.declAST;
          if(v15417) {
            var v26077 = this.signatures;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25279 = v26077[i$$61]
            }
            var v23633 = v25279.declAST;
            var v20406 = v23633.isConstructor;
            if(v20406) {
              var v26506 = this.signatures;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v26078 = v26506[i$$61]
              }
              var v25280 = v26078.declAST;
              var v23634 = v25280.classDecl;
              if(v23634) {
                var v26886 = this.signatures;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v26854 = v26886[i$$61]
                }
                var v26792 = v26854.declAST;
                var v26691 = v26792.classDecl;
                var v26507 = v26691.type;
                var v26079 = v26507.symbol;
                var v25281 = v26079.typeCheckStatus;
                var v26080 = TypeScript$$19.TypeCheckStatus;
                var v25282 = v26080.NotStarted;
                v23634 = v25281 == v25282
              }
              v20406 = v23634
            }
            v15417 = v20406
          }
          var v7073 = v15417;
          if(v7073) {
            var v7071 = checker$$7.typeFlow;
            var v23635 = this.signatures;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v20407 = v23635[i$$61]
            }
            var v15418 = v20407.declAST;
            var v7072 = v15418.classDecl;
            JAMScript.call(v7071.typeCheck, v7071, [v7072])
          }
          var v7074 = checker$$7.typeFlow;
          var v20408 = this.signatures;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v15419 = v20408[i$$61]
          }
          var v7075 = v15419.declAST;
          JAMScript.call(v7074.typeCheck, v7074, [v7075]);
          i$$61 = i$$61 + 1;
          v7076 = i$$61 < len$$23
        }
        JAMScript.call(this.verifySignatures, this, [checker$$7])
      }
      return
    }
    function v708(checker$$6) {
      var len$$22 = 0;
      var v15420 = this.signatures;
      if(v15420) {
        var v23636 = this.signatures;
        var v20409 = len$$22 = v23636.length;
        v15420 = v20409 > 0
      }
      var v7088 = v15420;
      if(v7088) {
        var i$$60 = 0;
        var v7087 = i$$60 < len$$22;
        for(;v7087;) {
          var j$$7 = i$$60 + 1;
          var v7082 = j$$7 < len$$22;
          for(;v7082;) {
            var v23637 = this.signatures;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v20410 = v23637[i$$60]
            }
            var v15421 = v20410.declAST;
            if(v15421) {
              var v25283 = this.signatures;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v23638 = v25283[j$$7]
              }
              var v20411 = v23638.declAST;
              if(v20411) {
                var v26855 = this.signatures;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v26793 = v26855[i$$60]
                }
                var v26692 = v26793.declAST;
                var v26508 = v26692.fncFlags;
                var v26693 = TypeScript$$19.FncFlags;
                var v26509 = v26693.Definition;
                var v26081 = JAMScript.call(TypeScript$$19.hasFlag, TypeScript$$19, [v26508, v26509]);
                var v25284 = !v26081;
                if(v25284) {
                  var v26856 = this.signatures;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v26794 = v26856[j$$7]
                  }
                  var v26694 = v26794.declAST;
                  var v26510 = v26694.fncFlags;
                  var v26695 = TypeScript$$19.FncFlags;
                  var v26511 = v26695.Definition;
                  var v26082 = JAMScript.call(TypeScript$$19.hasFlag, TypeScript$$19, [v26510, v26511]);
                  v25284 = !v26082
                }
                var v23639 = v25284;
                if(v23639) {
                  var v26083 = this.signatures;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v25285 = v26083[i$$60]
                  }
                  var v26084 = this.signatures;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v25286 = v26084[j$$7]
                  }
                  v23639 = JAMScript.call(checker$$6.signaturesAreIdentical, checker$$6, [v25285, v25286])
                }
                v20411 = v23639
              }
              v15421 = v20411
            }
            var v7081 = v15421;
            if(v7081) {
              var v7078 = checker$$6.errorReporter;
              var v20412 = this.signatures;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v15422 = v20412[i$$60]
              }
              var v7079 = v15422.declAST;
              var v15423;
              var v26085 = this.signatures;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25287 = v26085[i$$60]
              }
              var v23640 = v25287.declAST;
              if(v23640) {
                var v26512 = this.signatures;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v26086 = v26512[i$$60]
                }
                var v25288 = v26086.declAST;
                v23640 = v25288.name
              }
              var v20414 = v23640;
              if(v20414) {
                var v26696 = this.signatures;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v26513 = v26696[i$$60]
                }
                var v26087 = v26513.declAST;
                var v25289 = v26087.name;
                var v23641 = v25289.actualText;
                var v20413 = "Signature for '" + v23641;
                v15423 = v20413 + "' is duplicated"
              }else {
                v15423 = "Signature is duplicated"
              }
              var v7080 = v15423;
              JAMScript.call(v7078.simpleError, v7078, [v7079, v7080])
            }
            j$$7 = j$$7 + 1;
            v7082 = j$$7 < len$$22
          }
          var v7086 = this.definitionSignature;
          if(v7086) {
            var v20415 = this.definitionSignature;
            var v23642 = this.signatures;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v20416 = v23642[i$$60]
            }
            var v15424 = JAMScript.call(checker$$6.signatureIsAssignableToTarget, checker$$6, [v20415, v20416]);
            var v7085 = !v15424;
            if(v7085) {
              var v7083 = checker$$6.errorReporter;
              var v20417 = this.signatures;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v15425 = v20417[i$$60]
              }
              var v7084 = v15425.declAST;
              JAMScript.call(v7083.simpleError, v7083, [v7084, "Overload signature is not compatible with function definition"])
            }
          }
          i$$60 = i$$60 + 1;
          v7087 = i$$60 < len$$22
        }
      }
      return
    }
    function v707(pattern$$3, replacement$$1, checker$$5) {
      var result$$13 = new SignatureGroup$$1;
      var v7092 = this.signatures;
      if(v7092) {
        var i$$59 = 0;
        var v7089 = this.signatures;
        var len$$21 = v7089.length;
        var v7091 = i$$59 < len$$21;
        for(;v7091;) {
          var v20418 = this.signatures;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v15426 = v20418[i$$59]
          }
          var v7090 = JAMScript.call(v15426.specializeType, v15426, [pattern$$3, replacement$$1, checker$$5]);
          JAMScript.call(result$$13.addSignature, result$$13, [v7090]);
          i$$59 = i$$59 + 1;
          v7091 = i$$59 < len$$21
        }
      }
      return result$$13
    }
    function v706(prefix$$3, shortform$$2, scope$$12) {
      var result$$12 = [];
      var v7093 = this.signatures;
      var len$$20 = v7093.length;
      var v7094 = len$$20 > 1;
      if(v7094) {
        shortform$$2 = false
      }
      var i$$58 = 0;
      var v7099 = i$$58 < len$$20;
      for(;v7099;) {
        var v15427 = len$$20 > 1;
        if(v15427) {
          var v23643 = this.signatures;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v20419 = v23643[i$$58]
          }
          var v20420 = this.definitionSignature;
          v15427 = v20419 == v20420
        }
        var v7095 = v15427;
        if(v7095) {
          i$$58 = i$$58 + 1;
          v7099 = i$$58 < len$$20;
          continue
        }
        var v15428 = this.flags;
        var v20421 = TypeScript$$19.SignatureFlags;
        var v15429 = v20421.IsIndexer;
        var v7098 = v15428 & v15429;
        if(v7098) {
          var v20422 = this.signatures;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v15430 = v20422[i$$58]
          }
          var v7096 = JAMScript.call(v15430.toStringHelperEx, v15430, [shortform$$2, true, scope$$12]);
          JAMScript.call(result$$12.push, result$$12, [v7096])
        }else {
          var v20423 = this.signatures;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v15431 = v20423[i$$58]
          }
          var v7097 = JAMScript.call(v15431.toStringHelperEx, v15431, [shortform$$2, false, scope$$12, prefix$$3]);
          JAMScript.call(result$$12.push, result$$12, [v7097])
        }
        i$$58 = i$$58 + 1;
        v7099 = i$$58 < len$$20
      }
      return result$$12
    }
    function v705() {
      var v7100 = this.signatures;
      return JAMScript.call(v7100.toString, v7100, [])
    }
    function v704(signature$$2) {
      var v15432 = this.signatures;
      var v7101 = v15432 == null;
      if(v7101) {
        var v27157 = new Array;
        this.signatures = v27157
      }
      var v7102 = this.signatures;
      var v15433 = this.signatures;
      var v7103 = v15433.length;
      JAMScript.set(v7102, v7103, signature$$2);
      var v15434 = signature$$2.declAST;
      if(v15434) {
        var v25290 = signature$$2.declAST;
        var v23644 = v25290.isOverload;
        var v20424 = !v23644;
        if(v20424) {
          var v26088 = signature$$2.declAST;
          var v25291 = JAMScript.call(v26088.isSignature, v26088, []);
          var v23645 = !v25291;
          if(v23645) {
            var v26697 = signature$$2.declAST;
            var v26514 = v26697.fncFlags;
            var v26698 = TypeScript$$19.FncFlags;
            var v26515 = v26698.Ambient;
            var v26089 = JAMScript.call(TypeScript$$19.hasFlag, TypeScript$$19, [v26514, v26515]);
            var v25292 = !v26089;
            if(v25292) {
              var v26516 = signature$$2.declAST;
              var v26090 = v26516.fncFlags;
              var v26517 = TypeScript$$19.FncFlags;
              var v26091 = v26517.Definition;
              v25292 = JAMScript.call(TypeScript$$19.hasFlag, TypeScript$$19, [v26090, v26091])
            }
            v23645 = v25292
          }
          v20424 = v23645
        }
        v15434 = v20424
      }
      var v7104 = v15434;
      if(v7104) {
        this.definitionSignature = signature$$2
      }
      return
    }
    function SignatureGroup$$1() {
      this.signatures = [];
      this.hasImplementation = true;
      this.definitionSignature = null;
      this.hasBeenTypechecked = false;
      var v7105 = TypeScript$$19.SignatureFlags;
      this.flags = v7105.None;
      return
    }
    var v7106 = SignatureGroup$$1.prototype;
    v7106.addSignature = v704;
    var v7107 = SignatureGroup$$1.prototype;
    v7107.toString = v705;
    var v7108 = SignatureGroup$$1.prototype;
    v7108.toStrings = v706;
    var v7109 = SignatureGroup$$1.prototype;
    v7109.specializeType = v707;
    var v7110 = SignatureGroup$$1.prototype;
    v7110.verifySignatures = v708;
    var v7111 = SignatureGroup$$1.prototype;
    v7111.typeCheck = v709;
    return SignatureGroup$$1
  }
  function v703() {
    function v702(shortform$$1, brackets$$1, scope$$11, prefix$$2) {
      var v15435 = typeof prefix$$2;
      var v7112 = v15435 === "undefined";
      if(v7112) {
        prefix$$2 = ""
      }
      var v7113 = TypeScript$$19.MemberNameArray;
      var builder$$2 = JAMScript.new(v7113, []);
      if(brackets$$1) {
        builder$$2.prefix = prefix$$2 + "["
      }else {
        builder$$2.prefix = prefix$$2 + "("
      }
      var v7114 = this.parameters;
      var paramLen$$1 = v7114.length;
      var v7115;
      var v15436 = this.hasVariableArgList;
      if(v15436) {
        v7115 = paramLen$$1 - 1
      }else {
        v7115 = paramLen$$1
      }
      var len$$19 = v7115;
      var i$$57 = 0;
      var v7120 = i$$57 < len$$19;
      for(;v7120;) {
        var v15437 = TypeScript$$19.MemberName;
        var v26092 = this.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v25293 = v26092[i$$57]
        }
        var v23646 = v25293.name;
        var v25294;
        var v26699 = this.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v26518 = v26699[i$$57]
        }
        var v26093 = JAMScript.call(v26518.isOptional, v26518, []);
        if(v26093) {
          v25294 = "?"
        }else {
          v25294 = ""
        }
        var v23647 = v25294;
        var v20425 = v23646 + v23647;
        var v15438 = v20425 + ": ";
        var v7116 = JAMScript.call(v15437.create, v15437, [v15438]);
        JAMScript.call(builder$$2.add, builder$$2, [v7116]);
        var v23648 = this.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v20426 = v23648[i$$57]
        }
        var v15439 = JAMScript.call(v20426.getType, v20426, []);
        var v7117 = JAMScript.call(v15439.getScopedTypeNameEx, v15439, [scope$$11]);
        JAMScript.call(builder$$2.add, builder$$2, [v7117]);
        var v15440 = paramLen$$1 - 1;
        var v7119 = i$$57 < v15440;
        if(v7119) {
          var v15441 = TypeScript$$19.MemberName;
          var v7118 = JAMScript.call(v15441.create, v15441, [", "]);
          JAMScript.call(builder$$2.add, builder$$2, [v7118])
        }
        i$$57 = i$$57 + 1;
        v7120 = i$$57 < len$$19
      }
      var v7123 = this.hasVariableArgList;
      if(v7123) {
        var v15442 = TypeScript$$19.MemberName;
        var v26094 = this.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v25295 = v26094[i$$57]
        }
        var v23649 = v25295.name;
        var v20427 = "..." + v23649;
        var v15443 = v20427 + ": ";
        var v7121 = JAMScript.call(v15442.create, v15442, [v15443]);
        JAMScript.call(builder$$2.add, builder$$2, [v7121]);
        var v23650 = this.parameters;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v20428 = v23650[i$$57]
        }
        var v15444 = JAMScript.call(v20428.getType, v20428, []);
        var v7122 = JAMScript.call(v15444.getScopedTypeNameEx, v15444, [scope$$11]);
        JAMScript.call(builder$$2.add, builder$$2, [v7122])
      }
      if(shortform$$1) {
        if(brackets$$1) {
          var v15445 = TypeScript$$19.MemberName;
          var v7124 = JAMScript.call(v15445.create, v15445, ["] => "]);
          JAMScript.call(builder$$2.add, builder$$2, [v7124])
        }else {
          var v15446 = TypeScript$$19.MemberName;
          var v7125 = JAMScript.call(v15446.create, v15446, [") => "]);
          JAMScript.call(builder$$2.add, builder$$2, [v7125])
        }
      }else {
        if(brackets$$1) {
          var v15447 = TypeScript$$19.MemberName;
          var v7126 = JAMScript.call(v15447.create, v15447, ["]: "]);
          JAMScript.call(builder$$2.add, builder$$2, [v7126])
        }else {
          var v15448 = TypeScript$$19.MemberName;
          var v7127 = JAMScript.call(v15448.create, v15448, ["): "]);
          JAMScript.call(builder$$2.add, builder$$2, [v7127])
        }
      }
      var v15449 = this.returnType;
      var v7130 = v15449.type;
      if(v7130) {
        var v20429 = this.returnType;
        var v15450 = v20429.type;
        var v7128 = JAMScript.call(v15450.getScopedTypeNameEx, v15450, [scope$$11]);
        JAMScript.call(builder$$2.add, builder$$2, [v7128])
      }else {
        var v15451 = TypeScript$$19.MemberName;
        var v7129 = JAMScript.call(v15451.create, v15451, ["any"]);
        JAMScript.call(builder$$2.add, builder$$2, [v7129])
      }
      return builder$$2
    }
    function v701(shortform, brackets, scope$$10) {
      var v7131 = JAMScript.call(this.toStringHelperEx, this, [shortform, brackets, scope$$10]);
      return JAMScript.call(v7131.toString, v7131, [])
    }
    function v700() {
      return JAMScript.call(this.toStringHelper, this, [false, false, null])
    }
    function v699(pattern$$2, replacement, checker$$4) {
      var result$$11 = new Signature$$1;
      var v7132 = this.hasVariableArgList;
      if(v7132) {
        result$$11.hasVariableArgList = true
      }
      var v7133 = TypeScript$$19.TypeLink;
      var v27158 = JAMScript.new(v7133, []);
      result$$11.returnType = v27158;
      var v15452 = this.returnType;
      var v7136 = v15452.type;
      if(v7136) {
        var v7134 = result$$11.returnType;
        var v20430 = this.returnType;
        var v15453 = v20430.type;
        var v27159 = JAMScript.call(v15453.specializeType, v15453, [pattern$$2, replacement, checker$$4, false]);
        v7134.type = v27159
      }else {
        var v7135 = result$$11.returnType;
        v7135.type = checker$$4.anyType
      }
      var v7150 = this.parameters;
      if(v7150) {
        result$$11.parameters = [];
        var i$$56 = 0;
        var v7137 = this.parameters;
        var len$$18 = v7137.length;
        var v7149 = i$$56 < len$$18;
        for(;v7149;) {
          var v7138 = this.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var oldSym = v7138[i$$56]
          }
          var v7139 = TypeScript$$19.ValueLocation;
          var paramDef = JAMScript.new(v7139, []);
          var v7140 = TypeScript$$19.ParameterSymbol;
          var v7141 = oldSym.name;
          var v7142 = oldSym.location;
          var v15454 = checker$$4.locationInfo;
          var v7143 = v15454.unitIndex;
          var paramSym$$1 = JAMScript.new(v7140, [v7141, v7142, v7143, paramDef]);
          paramSym$$1.declAST = this.declAST;
          paramDef.symbol = paramSym$$1;
          var v7144 = TypeScript$$19.TypeLink;
          var v27160 = JAMScript.new(v7144, []);
          paramDef.typeLink = v27160;
          var v7145 = result$$11.parameters;
          v7145[i$$56] = paramSym$$1;
          var oldType = JAMScript.call(oldSym.getType, oldSym, []);
          if(oldType) {
            var v7146 = paramDef.typeLink;
            var v27161 = JAMScript.call(oldType.specializeType, oldType, [pattern$$2, replacement, checker$$4, false]);
            v7146.type = v27161;
            var v7147 = paramSym$$1.declAST;
            var v15455 = paramDef.typeLink;
            v7147.type = v15455.type
          }else {
            var v7148 = paramDef.typeLink;
            v7148.type = checker$$4.anyType
          }
          i$$56 = i$$56 + 1;
          v7149 = i$$56 < len$$18
        }
      }
      result$$11.nonOptionalParameterCount = this.nonOptionalParameterCount;
      result$$11.declAST = this.declAST;
      return result$$11
    }
    function Signature$$1() {
      this.hasVariableArgList = false;
      this.parameters = null;
      this.declAST = null;
      var v7151 = TypeScript$$19.TypeCheckStatus;
      this.typeCheckStatus = v7151.NotStarted;
      this.nonOptionalParameterCount = 0;
      return
    }
    var v7152 = Signature$$1.prototype;
    v7152.specializeType = v699;
    var v7153 = Signature$$1.prototype;
    v7153.toString = v700;
    var v7154 = Signature$$1.prototype;
    v7154.toStringHelper = v701;
    var v7155 = Signature$$1.prototype;
    v7155.toStringHelperEx = v702;
    return Signature$$1
  }
  var Signature = v703();
  TypeScript$$19.Signature = Signature;
  var SignatureGroup = v710();
  TypeScript$$19.SignatureGroup = SignatureGroup;
  return
}
function v698(TypeScript$$18) {
  function v697() {
    function v696() {
      var v15456 = this.scriptFragment;
      var v7158 = v15456 == null;
      if(v7158) {
        var ast$$58 = this.scopeStartAST;
        var minChar$$31 = ast$$58.minChar;
        var v7156;
        var v15458 = this.isMemberCompletion;
        if(v15458) {
          v7156 = this.pos
        }else {
          var v15457 = this.pos;
          v7156 = v15457 + 1
        }
        var limChar$$10 = v7156;
        var v15459 = this.logger;
        var v15460 = this.text;
        var v7157 = JAMScript.call(TypeScript$$18.quickParse, TypeScript$$18, [v15459, ast$$58, v15460, minChar$$31, limChar$$10, null]);
        this.scriptFragment = v7157.Script
      }
      return this.scriptFragment
    }
    function v695() {
      var v7159 = this.scopeStartAST;
      return v7159.minChar
    }
    function v694() {
      return this.scopeStartAST
    }
    function v693() {
      var v7160 = this.scopeStartAST;
      return v7160.minChar
    }
    function v692() {
      return this.scopeStartAST
    }
    function v691() {
      return JAMScript.call(this.objectLiteralScopeGetter, this, [])
    }
    function v690() {
      return JAMScript.call(this.scopeGetter, this, [])
    }
    function EnclosingScopeContext$$1(logger$$3, script$$13, text$$20, pos$$5, isMemberCompletion$$1) {
      this.logger = logger$$3;
      this.script = script$$13;
      this.text = text$$20;
      this.pos = pos$$5;
      this.isMemberCompletion = isMemberCompletion$$1;
      this.scopeGetter = null;
      this.objectLiteralScopeGetter = null;
      this.scopeStartAST = null;
      this.skipNextFuncDeclForClass = false;
      this.deepestModuleDecl = null;
      this.enclosingClassDecl = null;
      this.enclosingObjectLit = null;
      this.publicsOnly = true;
      this.useFullAst = false;
      return
    }
    var v7161 = EnclosingScopeContext$$1.prototype;
    v7161.getScope = v690;
    var v7162 = EnclosingScopeContext$$1.prototype;
    v7162.getObjectLiteralScope = v691;
    var v7163 = EnclosingScopeContext$$1.prototype;
    v7163.getScopeAST = v692;
    var v7164 = EnclosingScopeContext$$1.prototype;
    v7164.getScopePosition = v693;
    var v7165 = EnclosingScopeContext$$1.prototype;
    v7165.getScriptFragmentStartAST = v694;
    var v7166 = EnclosingScopeContext$$1.prototype;
    v7166.getScriptFragmentPosition = v695;
    var v7167 = EnclosingScopeContext$$1.prototype;
    v7167.getScriptFragment = v696;
    return EnclosingScopeContext$$1
  }
  function v689() {
    function MemberScopeContext$$1(flow, pos$$4, matchFlag) {
      this.flow = flow;
      this.pos = pos$$4;
      this.matchFlag = matchFlag;
      this.type = null;
      this.ast = null;
      var v7168 = TypeScript$$18.AstWalkOptions;
      var v27162 = JAMScript.new(v7168, []);
      this.options = v27162;
      return
    }
    return MemberScopeContext$$1
  }
  function v688() {
    function TypeCollectionContext$$1(scopeChain$$1, checker$$3) {
      this.scopeChain = scopeChain$$1;
      this.checker = checker$$3;
      this.script = null;
      return
    }
    return TypeCollectionContext$$1
  }
  function preFindMemberScope(ast$$56, parent$$47, walker$$44) {
    var memScope = walker$$44.state;
    var v20431 = ast$$56.flags;
    var v20432 = memScope.matchFlag;
    var v15461 = JAMScript.call(TypeScript$$18.hasFlag, TypeScript$$18, [v20431, v20432]);
    if(v15461) {
      var v23651 = memScope.pos;
      var v20433 = v23651 < 0;
      var v23654 = !v20433;
      if(v23654) {
        var v23652 = memScope.pos;
        var v23653 = ast$$56.limChar;
        v20433 = v23652 == v23653
      }
      v15461 = v20433
    }
    var v7173 = v15461;
    if(v7173) {
      memScope.ast = ast$$56;
      var v20434 = ast$$56.type;
      var v15462 = v20434 == null;
      if(v15462) {
        var v20435 = memScope.pos;
        v15462 = v20435 >= 0
      }
      var v7171 = v15462;
      if(v7171) {
        var v7169 = memScope.flow;
        var v7170 = memScope.scope;
        JAMScript.call(v7169.inScopeTypeCheck, v7169, [ast$$56, v7170])
      }
      memScope.type = ast$$56.type;
      var v7172 = memScope.options;
      JAMScript.call(v7172.stopWalk, v7172, [])
    }
    return ast$$56
  }
  function pushTypeCollectionScope(container$$2, valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, context$$37, thisType$$1, classType$$2, moduleDecl$$5) {
    var v7174 = TypeScript$$18.SymbolScopeBuilder;
    var builder$$1 = JAMScript.new(v7174, [valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container$$2]);
    var v7175 = TypeScript$$18.ScopeChain;
    var v7176 = context$$37.scopeChain;
    var chain$$1 = JAMScript.new(v7175, [container$$2, v7176, builder$$1]);
    chain$$1.thisType = thisType$$1;
    chain$$1.classType = classType$$2;
    chain$$1.moduleDecl = moduleDecl$$5;
    context$$37.scopeChain = chain$$1;
    return
  }
  function popTypeCollectionScope(context$$38) {
    var v7177 = context$$38;
    var v15463 = context$$38.scopeChain;
    v7177.scopeChain = v15463.previous;
    return
  }
  function preFindEnclosingScope(ast$$57, parent$$48, walker$$45) {
    function v687() {
      var v15464 = funcDecl$$15.isConstructor;
      if(v15464) {
        var v20436 = funcDecl$$15.fncFlags;
        var v23655 = TypeScript$$18.FncFlags;
        var v20437 = v23655.ClassMethod;
        v15464 = JAMScript.call(TypeScript$$18.hasFlag, TypeScript$$18, [v20436, v20437])
      }
      var v7180 = v15464;
      if(v7180) {
        var v15465 = ast$$57.type;
        if(v15465) {
          var v20438 = ast$$57.type;
          v15465 = v20438.enclosingType
        }
        var v7179 = v15465;
        if(v7179) {
          var v15466 = ast$$57.type;
          var v7178 = v15466.enclosingType;
          return v7178.constructorScope
        }
      }
      var v7182 = funcDecl$$15.scopeType;
      if(v7182) {
        var v7181 = funcDecl$$15.scopeType;
        return v7181.containedScope
      }
      var v7184 = funcDecl$$15.type;
      if(v7184) {
        var v7183 = funcDecl$$15.type;
        return v7183.containedScope
      }
      return null
    }
    function v686() {
      var v7185;
      var v20439 = ast$$57.type;
      var v15468 = v20439 === null;
      if(v15468) {
        v7185 = null
      }else {
        var v15467 = ast$$57.type;
        v7185 = v15467.containedScope
      }
      return v7185
    }
    function v685() {
      var v7186;
      var v20440 = ast$$57.type;
      var v15470 = v20440 === null;
      if(v15470) {
        v7186 = null
      }else {
        var v15469 = ast$$57.type;
        v7186 = v15469.containedScope
      }
      return v7186
    }
    function v684() {
      var v7187 = objectLit.targetType;
      return v7187.memberScope
    }
    function v683() {
      var v7188 = objectLit.targetType;
      return v7188.containedScope
    }
    function v682() {
      var v7189;
      var v23656 = ast$$57.type;
      var v20441 = v23656 === null;
      var v23658 = !v20441;
      if(v23658) {
        var v26095 = ast$$57.type;
        var v25296 = v26095.instanceType;
        var v23657 = v25296.containedScope;
        v20441 = v23657 === null
      }
      var v15472 = v20441;
      if(v15472) {
        v7189 = null
      }else {
        var v20442 = ast$$57.type;
        var v15471 = v20442.instanceType;
        v7189 = v15471.containedScope
      }
      return v7189
    }
    function v681() {
      var v7190;
      var v20443 = script$$11.bod;
      var v15474 = v20443 === null;
      if(v15474) {
        v7190 = null
      }else {
        var v15473 = script$$11.bod;
        v7190 = v15473.enclosingScope
      }
      return v7190
    }
    var context$$39 = walker$$45.state;
    var minChar$$30 = ast$$57.minChar;
    var limChar$$9 = ast$$57.limChar;
    var v20444 = ast$$57.nodeType;
    var v23659 = TypeScript$$18.NodeType;
    var v20445 = v23659.Script;
    var v15475 = v20444 == v20445;
    if(v15475) {
      var v20446 = context$$39.pos;
      v15475 = v20446 > limChar$$9
    }
    var v7191 = v15475;
    if(v7191) {
      limChar$$9 = context$$39.pos
    }
    var v20447 = context$$39.pos;
    var v15476 = minChar$$30 <= v20447;
    if(v15476) {
      var v20448 = context$$39.pos;
      v15476 = limChar$$9 >= v20448
    }
    var v7197 = v15476;
    if(v7197) {
      var v7194 = ast$$57.nodeType;
      switch(v7194) {
        case TypeScript$$18.NodeType.Script:
          var script$$11 = ast$$57;
          context$$39.scopeGetter = v681;
          context$$39.scopeStartAST = script$$11;
          break;
        case TypeScript$$18.NodeType.ClassDeclaration:
          context$$39.scopeGetter = v682;
          context$$39.scopeStartAST = ast$$57;
          context$$39.enclosingClassDecl = ast$$57;
          break;
        case TypeScript$$18.NodeType.ObjectLit:
          var objectLit = ast$$57;
          var v7192 = objectLit.targetType;
          if(v7192) {
            context$$39.scopeGetter = v683;
            context$$39.objectLiteralScopeGetter = v684;
            context$$39.enclosingObjectLit = objectLit
          }
          break;
        case TypeScript$$18.NodeType.ModuleDeclaration:
          context$$39.deepestModuleDecl = ast$$57;
          context$$39.scopeGetter = v685;
          context$$39.scopeStartAST = ast$$57;
          break;
        case TypeScript$$18.NodeType.InterfaceDeclaration:
          context$$39.scopeGetter = v686;
          context$$39.scopeStartAST = ast$$57;
          break;
        case TypeScript$$18.NodeType.FuncDecl:
          var funcDecl$$15 = ast$$57;
          var v7193 = context$$39.skipNextFuncDeclForClass;
          if(v7193) {
            context$$39.skipNextFuncDeclForClass = false
          }else {
            context$$39.scopeGetter = v687;
            context$$39.scopeStartAST = ast$$57
          }
      }
      var v7195 = walker$$45.options;
      v7195.goChildren = true
    }else {
      var v7196 = walker$$45.options;
      v7196.goChildren = false
    }
    return ast$$57
  }
  function findEnclosingScopeAt(logger$$2, script$$12, text$$19, pos$$3, isMemberCompletion) {
    var context$$40 = JAMScript.new(EnclosingScopeContext, [logger$$2, script$$12, text$$19, pos$$3, isMemberCompletion]);
    var v7198 = JAMScript.call(TypeScript$$18.getAstWalkerFactory, TypeScript$$18, []);
    JAMScript.call(v7198.walk, v7198, [script$$12, preFindEnclosingScope, null, null, context$$40]);
    var v15477 = context$$40.scopeStartAST;
    var v7199 = v15477 === null;
    if(v7199) {
      return null
    }
    return context$$40
  }
  var TypeCollectionContext = v688();
  TypeScript$$18.TypeCollectionContext = TypeCollectionContext;
  var MemberScopeContext = v689();
  TypeScript$$18.MemberScopeContext = MemberScopeContext;
  var EnclosingScopeContext = v697();
  TypeScript$$18.EnclosingScopeContext = EnclosingScopeContext;
  TypeScript$$18.preFindMemberScope = preFindMemberScope;
  TypeScript$$18.pushTypeCollectionScope = pushTypeCollectionScope;
  TypeScript$$18.popTypeCollectionScope = popTypeCollectionScope;
  TypeScript$$18.preFindEnclosingScope = preFindEnclosingScope;
  TypeScript$$18.findEnclosingScopeAt = findEnclosingScopeAt;
  return
}
function v680(TypeScript$$17) {
  function v679() {
    function v678(b$$6) {
      var v7200 = this.result;
      var v27163 = JAMScript.call(this.select, this, [v7200, b$$6]);
      this.result = v27163;
      var v7202 = this.result;
      if(v7202) {
        var v7201 = this.result;
        return JAMScript.call(this.stop, this, [v7201])
      }else {
        return false
      }
      return
    }
    function v677() {
      this.result = null;
      return
    }
    function ScopeSearchFilter$$1(select, stop$$1) {
      this.select = select;
      this.stop = stop$$1;
      this.result = null;
      return
    }
    var v7203 = ScopeSearchFilter$$1.prototype;
    v7203.reset = v677;
    var v7204 = ScopeSearchFilter$$1.prototype;
    v7204.update = v678;
    return ScopeSearchFilter$$1
  }
  function v676() {
    function AssignScopeContext$$1(scopeChain, typeFlow$$36, modDeclChain) {
      this.scopeChain = scopeChain;
      this.typeFlow = typeFlow$$36;
      this.modDeclChain = modDeclChain;
      return
    }
    return AssignScopeContext$$1
  }
  function pushAssignScope(scope$$9, context$$27, type$$31, classType, fnc) {
    var v7205 = TypeScript$$17.ScopeChain;
    var v7206 = context$$27.scopeChain;
    var chain = JAMScript.new(v7205, [null, v7206, scope$$9]);
    chain.thisType = type$$31;
    chain.classType = classType;
    chain.fnc = fnc;
    context$$27.scopeChain = chain;
    return
  }
  function popAssignScope(context$$28) {
    var v7207 = context$$28;
    var v15478 = context$$28.scopeChain;
    v7207.scopeChain = v15478.previous;
    return
  }
  function instanceCompare(a$$6, b$$5) {
    var v15479 = a$$6 == null;
    var v20450 = !v15479;
    if(v20450) {
      var v20449 = JAMScript.call(a$$6.isInstanceProperty, a$$6, []);
      v15479 = !v20449
    }
    var v7208 = v15479;
    if(v7208) {
      return b$$5
    }else {
      return a$$6
    }
    return
  }
  function instanceFilterStop(s$$17) {
    return JAMScript.call(s$$17.isInstanceProperty, s$$17, [])
  }
  function preAssignModuleScopes(ast$$48, context$$29) {
    var moduleDecl$$4 = ast$$48;
    var memberScope$$1 = null;
    var aggScope = null;
    var v15480 = moduleDecl$$4.name;
    if(v15480) {
      v15480 = moduleDecl$$4.mod
    }
    var v7210 = v15480;
    if(v7210) {
      var v7209 = moduleDecl$$4.name;
      var v15481 = moduleDecl$$4.mod;
      v7209.sym = v15481.symbol
    }
    var mod$$1 = moduleDecl$$4.mod;
    var v7211 = !mod$$1;
    if(v7211) {
      return
    }
    var v7212 = TypeScript$$17.SymbolTableScope;
    var v7213 = mod$$1.members;
    var v7214 = mod$$1.ambientMembers;
    var v7215 = mod$$1.enclosedTypes;
    var v7216 = mod$$1.ambientEnclosedTypes;
    var v7217 = mod$$1.symbol;
    memberScope$$1 = JAMScript.new(v7212, [v7213, v7214, v7215, v7216, v7217]);
    mod$$1.memberScope = memberScope$$1;
    var v7218 = context$$29.modDeclChain;
    JAMScript.call(v7218.push, v7218, [moduleDecl$$4]);
    var v15482 = context$$29.typeFlow;
    var v7219 = v15482.checker;
    v7219.currentModDecl = moduleDecl$$4;
    var v7220 = TypeScript$$17.SymbolAggregateScope;
    var v7221 = mod$$1.symbol;
    aggScope = JAMScript.new(v7220, [v7221]);
    JAMScript.call(aggScope.addParentScope, aggScope, [memberScope$$1]);
    var v15483 = context$$29.scopeChain;
    var v7222 = v15483.scope;
    JAMScript.call(aggScope.addParentScope, aggScope, [v7222]);
    pushAssignScope(aggScope, context$$29, null, null, null);
    mod$$1.containedScope = aggScope;
    var v7228 = mod$$1.symbol;
    if(v7228) {
      var v7223 = context$$29.typeFlow;
      var v7224 = mod$$1.containedScope;
      var v7225 = mod$$1.symbol;
      var v7226 = moduleDecl$$4.vars;
      var v15484 = mod$$1.members;
      var v7227 = v15484.privateMembers;
      JAMScript.call(v7223.addLocalsFromScope, v7223, [v7224, v7225, v7226, v7227, true])
    }
    return
  }
  function preAssignClassScopes(ast$$49, context$$30) {
    var classDecl$$6 = ast$$49;
    var memberScope$$2 = null;
    var aggScope$$1 = null;
    var v15485 = classDecl$$6.name;
    if(v15485) {
      v15485 = classDecl$$6.type
    }
    var v7230 = v15485;
    if(v7230) {
      var v7229 = classDecl$$6.name;
      var v15486 = classDecl$$6.type;
      v7229.sym = v15486.symbol
    }
    var classType$$1 = ast$$49.type;
    if(classType$$1) {
      var classSym = classType$$1.symbol;
      var v15487 = context$$30.typeFlow;
      var v7231 = v15487.checker;
      memberScope$$2 = JAMScript.call(v7231.scopeOf, v7231, [classType$$1]);
      var v7232 = TypeScript$$17.SymbolAggregateScope;
      var v7233 = classType$$1.symbol;
      aggScope$$1 = JAMScript.new(v7232, [v7233]);
      JAMScript.call(aggScope$$1.addParentScope, aggScope$$1, [memberScope$$2]);
      var v15488 = context$$30.scopeChain;
      var v7234 = v15488.scope;
      JAMScript.call(aggScope$$1.addParentScope, aggScope$$1, [v7234]);
      classType$$1.containedScope = aggScope$$1;
      classType$$1.memberScope = memberScope$$2;
      var instanceType$$2 = classType$$1.instanceType;
      var v15489 = context$$30.typeFlow;
      var v7235 = v15489.checker;
      memberScope$$2 = JAMScript.call(v7235.scopeOf, v7235, [instanceType$$2]);
      instanceType$$2.memberScope = memberScope$$2;
      var v7236 = TypeScript$$17.SymbolAggregateScope;
      var v7237 = instanceType$$2.symbol;
      aggScope$$1 = JAMScript.new(v7236, [v7237]);
      var v15490 = context$$30.scopeChain;
      var v7238 = v15490.scope;
      JAMScript.call(aggScope$$1.addParentScope, aggScope$$1, [v7238]);
      pushAssignScope(aggScope$$1, context$$30, instanceType$$2, classType$$1, null);
      instanceType$$2.containedScope = aggScope$$1
    }else {
      var v7239 = context$$30.typeFlow;
      ast$$49.type = v7239.anyType
    }
    return
  }
  function preAssignInterfaceScopes(ast$$50, context$$31) {
    var interfaceDecl$$2 = ast$$50;
    var memberScope$$3 = null;
    var aggScope$$2 = null;
    var v15491 = interfaceDecl$$2.name;
    if(v15491) {
      v15491 = interfaceDecl$$2.type
    }
    var v7241 = v15491;
    if(v7241) {
      var v7240 = interfaceDecl$$2.name;
      var v15492 = interfaceDecl$$2.type;
      v7240.sym = v15492.symbol
    }
    var interfaceType = ast$$50.type;
    var v15493 = context$$31.typeFlow;
    var v7242 = v15493.checker;
    memberScope$$3 = JAMScript.call(v7242.scopeOf, v7242, [interfaceType]);
    interfaceType.memberScope = memberScope$$3;
    var v7243 = TypeScript$$17.SymbolAggregateScope;
    var v7244 = interfaceType.symbol;
    aggScope$$2 = JAMScript.new(v7243, [v7244]);
    JAMScript.call(aggScope$$2.addParentScope, aggScope$$2, [memberScope$$3]);
    var v15494 = context$$31.scopeChain;
    var v7245 = v15494.scope;
    JAMScript.call(aggScope$$2.addParentScope, aggScope$$2, [v7245]);
    pushAssignScope(aggScope$$2, context$$31, null, null, null);
    interfaceType.containedScope = aggScope$$2;
    return
  }
  function preAssignWithScopes(ast$$51, context$$32) {
    var withStmt$$1 = ast$$51;
    var withType = withStmt$$1.type;
    var v7246 = TypeScript$$17.ScopedMembers;
    var v15495 = TypeScript$$17.DualStringHashTable;
    var v20451 = TypeScript$$17.StringHashTable;
    var v15496 = JAMScript.new(v20451, []);
    var v20452 = TypeScript$$17.StringHashTable;
    var v15497 = JAMScript.new(v20452, []);
    var v7247 = JAMScript.new(v15495, [v15496, v15497]);
    var members$$12 = JAMScript.new(v7246, [v7247]);
    var v7248 = TypeScript$$17.ScopedMembers;
    var v15498 = TypeScript$$17.DualStringHashTable;
    var v20453 = TypeScript$$17.StringHashTable;
    var v15499 = JAMScript.new(v20453, []);
    var v20454 = TypeScript$$17.StringHashTable;
    var v15500 = JAMScript.new(v20454, []);
    var v7249 = JAMScript.new(v15498, [v15499, v15500]);
    var ambientMembers$$1 = JAMScript.new(v7248, [v7249]);
    var v7250 = TypeScript$$17.Type;
    withType = JAMScript.new(v7250, []);
    var v7251 = TypeScript$$17.WithSymbol;
    var v7252 = withStmt$$1.minChar;
    var v23660 = context$$32.typeFlow;
    var v20455 = v23660.checker;
    var v15501 = v20455.locationInfo;
    var v7253 = v15501.unitIndex;
    var withSymbol = JAMScript.new(v7251, [v7252, v7253, withType]);
    withType.members = members$$12;
    withType.ambientMembers = ambientMembers$$1;
    withType.symbol = withSymbol;
    JAMScript.call(withType.setHasImplementation, withType, []);
    withStmt$$1.type = withType;
    var v7254 = TypeScript$$17.SymbolScopeBuilder;
    var v7255 = withType.members;
    var v7256 = withType.ambientMembers;
    var v15502 = context$$32.scopeChain;
    var v7257 = v15502.scope;
    var v7258 = withType.symbol;
    var withScope = JAMScript.new(v7254, [v7255, v7256, null, null, v7257, v7258]);
    pushAssignScope(withScope, context$$32, null, null, null);
    withType.containedScope = withScope;
    return
  }
  function preAssignFuncDeclScopes(ast$$52, context$$33) {
    var funcDecl$$13 = ast$$52;
    var container$$1 = null;
    var localContainer = null;
    var v7260 = funcDecl$$13.type;
    if(v7260) {
      var v7259 = ast$$52.type;
      localContainer = v7259.symbol
    }
    var v7261 = funcDecl$$13.fncFlags;
    var v15503 = TypeScript$$17.FncFlags;
    var v7262 = v15503.Static;
    var isStatic$$5 = JAMScript.call(TypeScript$$17.hasFlag, TypeScript$$17, [v7261, v7262]);
    var v7263 = isStatic$$5;
    if(v7263) {
      var v20456 = context$$33.scopeChain;
      var v15504 = v20456.fnc;
      v7263 = v15504 != null
    }
    var isInnerStatic = v7263;
    var v7264;
    if(isInnerStatic) {
      var v23661 = context$$33.scopeChain;
      var v20457 = v23661.fnc;
      var v15505 = v20457.type;
      v7264 = v15505.memberScope
    }else {
      var v15506 = context$$33.scopeChain;
      v7264 = v15506.scope
    }
    var parentScope = v7264;
    var v20458 = context$$33.scopeChain;
    var v15507 = v20458.thisType;
    if(v15507) {
      var v23662 = funcDecl$$13.isConstructor;
      var v20459 = !v23662;
      var v23665 = !v20459;
      if(v23665) {
        var v23663 = funcDecl$$13.fncFlags;
        var v25297 = TypeScript$$17.FncFlags;
        var v23664 = v25297.ClassMethod;
        v20459 = JAMScript.call(TypeScript$$17.hasFlag, TypeScript$$17, [v23663, v23664])
      }
      v15507 = v20459
    }
    var v7273 = v15507;
    if(v7273) {
      var v7265 = context$$33.scopeChain;
      var instType = v7265.thisType;
      var v23666 = instType.typeFlags;
      var v25298 = TypeScript$$17.TypeFlags;
      var v23667 = v25298.IsClass;
      var v20460 = v23666 & v23667;
      var v15508 = !v20460;
      if(v15508) {
        var v23668 = funcDecl$$13.fncFlags;
        var v25299 = TypeScript$$17.FncFlags;
        var v23669 = v25299.ClassMethod;
        var v20461 = JAMScript.call(TypeScript$$17.hasFlag, TypeScript$$17, [v23668, v23669]);
        v15508 = !v20461
      }
      var v7270 = v15508;
      if(v7270) {
        var v20462 = JAMScript.call(funcDecl$$13.isMethod, funcDecl$$13, []);
        var v15509 = !v20462;
        var v20463 = !v15509;
        if(v20463) {
          v15509 = isStatic$$5
        }
        var v7266 = v15509;
        if(v7266) {
          parentScope = instType.constructorScope
        }else {
          parentScope = instType.containedScope
        }
      }else {
        var v25300 = context$$33.scopeChain;
        var v23670 = v25300.previous;
        var v20464 = v23670.scope;
        var v15510 = v20464.container;
        if(v15510) {
          var v26519 = context$$33.scopeChain;
          var v26096 = v26519.previous;
          var v25301 = v26096.scope;
          var v23671 = v25301.container;
          var v20465 = v23671.declAST;
          if(v20465) {
            var v26857 = context$$33.scopeChain;
            var v26795 = v26857.previous;
            var v26700 = v26795.scope;
            var v26520 = v26700.container;
            var v26097 = v26520.declAST;
            var v25302 = v26097.nodeType;
            var v26098 = TypeScript$$17.NodeType;
            var v25303 = v26098.FuncDecl;
            var v23672 = v25302 == v25303;
            if(v23672) {
              var v26796 = context$$33.scopeChain;
              var v26701 = v26796.previous;
              var v26521 = v26701.scope;
              var v26099 = v26521.container;
              var v25304 = v26099.declAST;
              v23672 = v25304.isConstructor
            }
            v20465 = v23672
          }
          v15510 = v20465
        }
        var v7269 = v15510;
        if(v7269) {
          parentScope = instType.constructorScope
        }else {
          var v15511 = isStatic$$5;
          if(v15511) {
            var v20466 = context$$33.scopeChain;
            v15511 = v20466.classType
          }
          var v7268 = v15511;
          if(v7268) {
            var v15512 = context$$33.scopeChain;
            var v7267 = v15512.classType;
            parentScope = v7267.containedScope
          }else {
            parentScope = instType.containedScope
          }
        }
      }
      container$$1 = instType.symbol
    }else {
      var v15513 = funcDecl$$13.isConstructor;
      if(v15513) {
        var v20467 = context$$33.scopeChain;
        v15513 = v20467.thisType
      }
      var v7272 = v15513;
      if(v7272) {
        var v15514 = context$$33.scopeChain;
        var v7271 = v15514.thisType;
        container$$1 = v7271.symbol
      }
    }
    var v20468 = funcDecl$$13.type;
    var v15515 = v20468 == null;
    var v20471 = !v15515;
    if(v20471) {
      var v25305 = funcDecl$$13.type;
      var v23673 = v25305.symbol;
      var v20469 = v23673.flags;
      var v23674 = TypeScript$$17.SymbolFlags;
      var v20470 = v23674.TypeSetDuringScopeAssignment;
      v15515 = JAMScript.call(TypeScript$$17.hasFlag, TypeScript$$17, [v20469, v20470])
    }
    var v7290 = v15515;
    if(v7290) {
      var v20472 = context$$33.scopeChain;
      var v15516 = v20472.fnc;
      if(v15516) {
        var v23675 = context$$33.scopeChain;
        var v20473 = v23675.fnc;
        v15516 = v20473.type
      }
      var v7275 = v15516;
      if(v7275) {
        var v20474 = context$$33.scopeChain;
        var v15517 = v20474.fnc;
        var v7274 = v15517.type;
        container$$1 = v7274.symbol
      }
      var funcScope = null;
      var v7276 = context$$33.scopeChain;
      var outerFnc$$1 = v7276.fnc;
      var v7277;
      var v15519 = funcDecl$$13.name;
      if(v15519) {
        var v15518 = funcDecl$$13.name;
        v7277 = v15518.actualText
      }else {
        v7277 = null
      }
      var nameText$$1 = v7277;
      var fgSym = null;
      if(isStatic$$5) {
        var v23676 = outerFnc$$1.type;
        var v20475 = v23676.members;
        var v15520 = v20475 == null;
        if(v15520) {
          var v20476 = JAMScript.call(container$$1.getType, container$$1, []);
          v15520 = v20476.memberScope
        }
        var v7279 = v15520;
        if(v7279) {
          var v7278 = outerFnc$$1.type;
          var v20477 = container$$1.type;
          var v15521 = v20477.memberScope;
          v7278.members = v15521.valueMembers
        }
        var v20478 = context$$33.scopeChain;
        var v15522 = v20478.fnc;
        var v7280 = v15522.type;
        funcScope = v7280.memberScope;
        var v7281 = outerFnc$$1.innerStaticFuncs;
        var v15523 = outerFnc$$1.innerStaticFuncs;
        var v7282 = v15523.length;
        JAMScript.set(v7281, v7282, funcDecl$$13)
      }else {
        var v7283 = context$$33.scopeChain;
        funcScope = v7283.scope
      }
      var v15524 = nameText$$1;
      if(v15524) {
        var v20479 = nameText$$1 != "__missing";
        if(v20479) {
          var v23677 = JAMScript.call(funcDecl$$13.isAccessor, funcDecl$$13, []);
          v20479 = !v23677
        }
        v15524 = v20479
      }
      var v7284 = v15524;
      if(v7284) {
        if(isStatic$$5) {
          fgSym = JAMScript.call(funcScope.findLocal, funcScope, [nameText$$1, false, false])
        }else {
          fgSym = JAMScript.call(funcScope.findLocal, funcScope, [nameText$$1, false, false])
        }
      }
      var v15525 = context$$33.typeFlow;
      var v7285 = v15525.checker;
      var v7286 = fgSym == null;
      JAMScript.call(v7285.createFunctionSignature, v7285, [funcDecl$$13, container$$1, funcScope, fgSym, v7286]);
      var v23678 = funcDecl$$13.accessorSymbol;
      var v20480 = !v23678;
      if(v20480) {
        var v25306 = funcDecl$$13.fncFlags;
        var v26100 = TypeScript$$17.FncFlags;
        var v25307 = v26100.ClassMethod;
        var v23679 = v25306 & v25307;
        if(v23679) {
          var v25308 = container$$1;
          if(v25308) {
            var v26522 = !fgSym;
            var v26704 = !v26522;
            if(v26704) {
              var v26797 = fgSym.declAST;
              var v26702 = v26797.nodeType;
              var v26798 = TypeScript$$17.NodeType;
              var v26703 = v26798.FuncDecl;
              v26522 = v26702 != v26703
            }
            var v26101 = v26522;
            if(v26101) {
              v26101 = JAMScript.call(funcDecl$$13.isAccessor, funcDecl$$13, [])
            }
            v25308 = v26101
          }
          v23679 = v25308
        }
        v20480 = v23679
      }
      var v15526 = v20480;
      var v20482 = !v15526;
      if(v20482) {
        var v20481 = fgSym;
        if(v20481) {
          v20481 = JAMScript.call(fgSym.isAccessor, fgSym, [])
        }
        v15526 = v20481
      }
      var v7288 = v15526;
      if(v7288) {
        var v7287 = funcDecl$$13;
        var v20483 = context$$33.typeFlow;
        var v15527 = v20483.checker;
        var v15528 = JAMScript.call(container$$1.getType, container$$1, []);
        var v20484 = JAMScript.call(funcDecl$$13.isMethod, funcDecl$$13, []);
        if(v20484) {
          v20484 = isStatic$$5
        }
        var v15529 = v20484;
        var v27164 = JAMScript.call(v15527.createAccessorSymbol, v15527, [funcDecl$$13, fgSym, v15528, v15529, true, funcScope, container$$1]);
        v7287.accessorSymbol = v27164
      }
      var v15530 = funcDecl$$13.type;
      var v7289 = v15530.symbol;
      var v20485 = v7289.flags;
      var v23680 = TypeScript$$17.SymbolFlags;
      var v20486 = v23680.TypeSetDuringScopeAssignment;
      v7289.flags = v20485 | v20486
    }
    var v15531 = funcDecl$$13.name;
    if(v15531) {
      v15531 = funcDecl$$13.type
    }
    var v7292 = v15531;
    if(v7292) {
      var v7291 = funcDecl$$13.name;
      var v15532 = funcDecl$$13.type;
      v7291.sym = v15532.symbol
    }
    var v7293 = funcDecl$$13;
    v7293.scopeType = funcDecl$$13.type;
    var v7294 = funcDecl$$13.isOverload;
    if(v7294) {
      return
    }
    var v7295 = TypeScript$$17.StringHashTable;
    var funcTable = JAMScript.new(v7295, []);
    var v7296 = TypeScript$$17.ScopedMembers;
    var v15533 = TypeScript$$17.DualStringHashTable;
    var v20487 = TypeScript$$17.StringHashTable;
    var v15534 = JAMScript.new(v20487, []);
    var v7297 = JAMScript.new(v15533, [funcTable, v15534]);
    var funcMembers = JAMScript.new(v7296, [v7297]);
    var v7298 = TypeScript$$17.StringHashTable;
    var ambientFuncTable = JAMScript.new(v7298, []);
    var v7299 = TypeScript$$17.ScopedMembers;
    var v15535 = TypeScript$$17.DualStringHashTable;
    var v20488 = TypeScript$$17.StringHashTable;
    var v15536 = JAMScript.new(v20488, []);
    var v7300 = JAMScript.new(v15535, [ambientFuncTable, v15536]);
    var ambientFuncMembers = JAMScript.new(v7299, [v7300]);
    var v7301 = TypeScript$$17.StringHashTable;
    var funcStaticTable = JAMScript.new(v7301, []);
    var v7302 = TypeScript$$17.ScopedMembers;
    var v15537 = TypeScript$$17.DualStringHashTable;
    var v20489 = TypeScript$$17.StringHashTable;
    var v15538 = JAMScript.new(v20489, []);
    var v7303 = JAMScript.new(v15537, [funcStaticTable, v15538]);
    var funcStaticMembers = JAMScript.new(v7302, [v7303]);
    var v7304 = TypeScript$$17.StringHashTable;
    var ambientFuncStaticTable = JAMScript.new(v7304, []);
    var v7305 = TypeScript$$17.ScopedMembers;
    var v15539 = TypeScript$$17.DualStringHashTable;
    var v20490 = TypeScript$$17.StringHashTable;
    var v15540 = JAMScript.new(v20490, []);
    var v7306 = JAMScript.new(v15539, [ambientFuncStaticTable, v15540]);
    var ambientFuncStaticMembers = JAMScript.new(v7305, [v7306]);
    var v20491 = context$$33.typeFlow;
    var v15541 = v20491.checker;
    var v7307 = v15541.locationInfo;
    funcDecl$$13.unitIndex = v7307.unitIndex;
    var v7308 = TypeScript$$17.SymbolScopeBuilder;
    var locals = JAMScript.new(v7308, [funcMembers, ambientFuncMembers, null, null, parentScope, localContainer]);
    var v7309 = TypeScript$$17.SymbolScopeBuilder;
    var statics$$1 = JAMScript.new(v7309, [funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null]);
    var v15542 = funcDecl$$13.isConstructor;
    if(v15542) {
      var v20492 = context$$33.scopeChain;
      v15542 = v20492.thisType
    }
    var v7311 = v15542;
    if(v7311) {
      var v15543 = context$$33.scopeChain;
      var v7310 = v15543.thisType;
      v7310.constructorScope = locals
    }
    funcDecl$$13.symbols = funcTable;
    var v15544 = JAMScript.call(funcDecl$$13.isSpecialFn, funcDecl$$13, []);
    var v7330 = !v15544;
    if(v7330) {
      var group = funcDecl$$13.type;
      var signature$$1 = funcDecl$$13.signature;
      var v15545 = funcDecl$$13.isConstructor;
      var v7312 = !v15545;
      if(v7312) {
        group.containedScope = locals;
        locals.container = group.symbol;
        group.memberScope = statics$$1;
        statics$$1.container = group.symbol
      }
      var v7313 = context$$33.scopeChain;
      funcDecl$$13.enclosingFnc = v7313.fnc;
      var v7314;
      if(isStatic$$5) {
        var v15546 = context$$33.scopeChain;
        v7314 = v15546.classType
      }else {
        var v15547 = context$$33.scopeChain;
        v7314 = v15547.thisType
      }
      group.enclosingType = v7314;
      var v7315 = ast$$52.type;
      fgSym = v7315.symbol;
      var v23681 = funcDecl$$13.fncFlags;
      var v25309 = TypeScript$$17.FncFlags;
      var v23682 = v25309.Signature;
      var v20493 = v23681 & v23682;
      var v23683 = TypeScript$$17.FncFlags;
      var v20494 = v23683.None;
      var v15548 = v20493 == v20494;
      if(v15548) {
        v15548 = funcDecl$$13.vars
      }
      var v7320 = v15548;
      if(v7320) {
        var v7316 = context$$33.typeFlow;
        var v7317 = funcDecl$$13.vars;
        JAMScript.call(v7316.addLocalsFromScope, v7316, [locals, fgSym, v7317, funcTable, false]);
        var v7318 = context$$33.typeFlow;
        var v7319 = funcDecl$$13.statics;
        JAMScript.call(v7318.addLocalsFromScope, v7318, [statics$$1, fgSym, v7319, funcStaticTable, false])
      }
      var v7326 = signature$$1.parameters;
      if(v7326) {
        var v7321 = signature$$1.parameters;
        var len$$17 = v7321.length;
        var i$$55 = 0;
        var v7325 = i$$55 < len$$17;
        for(;v7325;) {
          var v7322 = signature$$1.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var paramSym = v7322[i$$55]
          }
          var v15549 = context$$33.typeFlow;
          var v7323 = v15549.checker;
          var v15550 = paramSym.parameter;
          var v7324 = v15550.typeLink;
          JAMScript.call(v7323.resolveTypeLink, v7323, [locals, v7324, true]);
          i$$55 = i$$55 + 1;
          v7325 = i$$55 < len$$17
        }
      }
      var v15551 = context$$33.typeFlow;
      var v7327 = v15551.checker;
      var v7328 = signature$$1.returnType;
      var v7329 = JAMScript.call(funcDecl$$13.isSignature, funcDecl$$13, []);
      JAMScript.call(v7327.resolveTypeLink, v7327, [locals, v7328, v7329])
    }
    var v20495 = funcDecl$$13.isConstructor;
    var v15552 = !v20495;
    var v20498 = !v15552;
    if(v20498) {
      var v20496 = funcDecl$$13.fncFlags;
      var v23684 = TypeScript$$17.FncFlags;
      var v20497 = v23684.ClassMethod;
      v15552 = JAMScript.call(TypeScript$$17.hasFlag, TypeScript$$17, [v20496, v20497])
    }
    var v7332 = v15552;
    if(v7332) {
      var v7331;
      var v20499 = funcDecl$$13.isConstructor;
      if(v20499) {
        var v23685 = funcDecl$$13.fncFlags;
        var v25310 = TypeScript$$17.FncFlags;
        var v23686 = v25310.ClassMethod;
        v20499 = JAMScript.call(TypeScript$$17.hasFlag, TypeScript$$17, [v23685, v23686])
      }
      var v15554 = v20499;
      if(v15554) {
        var v15553 = context$$33.scopeChain;
        v7331 = v15553.thisType
      }else {
        v7331 = null
      }
      var thisType = v7331;
      pushAssignScope(locals, context$$33, thisType, null, funcDecl$$13)
    }
    var v15555 = funcDecl$$13.name;
    if(v15555) {
      var v20500 = funcDecl$$13.fncFlags;
      var v23687 = TypeScript$$17.FncFlags;
      var v20501 = v23687.IsFunctionExpression;
      v15555 = JAMScript.call(TypeScript$$17.hasFlag, TypeScript$$17, [v20500, v20501])
    }
    var v7336 = v15555;
    if(v7336) {
      var v15556 = funcDecl$$13.name;
      var v7335 = v15556.sym;
      if(v7335) {
        var v15557 = funcDecl$$13.name;
        var v7333 = v15557.actualText;
        var v15558 = funcDecl$$13.name;
        var v7334 = v15558.sym;
        JAMScript.call(funcTable.add, funcTable, [v7333, v7334])
      }
    }
    return
  }
  function preAssignCatchScopes(ast$$53, context$$34) {
    var catchBlock = ast$$53;
    var v7345 = catchBlock.param;
    if(v7345) {
      var v7337 = TypeScript$$17.ScopedMembers;
      var v15559 = TypeScript$$17.DualStringHashTable;
      var v20502 = TypeScript$$17.StringHashTable;
      var v15560 = JAMScript.new(v20502, []);
      var v20503 = TypeScript$$17.StringHashTable;
      var v15561 = JAMScript.new(v20503, []);
      var v7338 = JAMScript.new(v15559, [v15560, v15561]);
      var catchTable = JAMScript.new(v7337, [v7338]);
      var v7339 = TypeScript$$17.SymbolScopeBuilder;
      var v15562 = context$$34.scopeChain;
      var v7340 = v15562.scope;
      var v20504 = context$$34.scopeChain;
      var v15563 = v20504.scope;
      var v7341 = v15563.container;
      var catchLocals = JAMScript.new(v7339, [catchTable, null, null, null, v7340, v7341]);
      catchBlock.containedScope = catchLocals;
      var v15564 = context$$34.scopeChain;
      var v7342 = v15564.thisType;
      var v15565 = context$$34.scopeChain;
      var v7343 = v15565.classType;
      var v15566 = context$$34.scopeChain;
      var v7344 = v15566.fnc;
      pushAssignScope(catchLocals, context$$34, v7342, v7343, v7344)
    }
    return
  }
  function preAssignScopes(ast$$54, parent$$45, walker$$42) {
    var context$$35 = walker$$42.state;
    var go = true;
    if(ast$$54) {
      var v15567 = ast$$54.nodeType;
      var v20505 = TypeScript$$17.NodeType;
      var v15568 = v20505.List;
      var v7354 = v15567 == v15568;
      if(v7354) {
        var list$$2 = ast$$54;
        var v7346 = context$$35.scopeChain;
        list$$2.enclosingScope = v7346.scope
      }else {
        var v15569 = ast$$54.nodeType;
        var v20506 = TypeScript$$17.NodeType;
        var v15570 = v20506.ModuleDeclaration;
        var v7353 = v15569 == v15570;
        if(v7353) {
          preAssignModuleScopes(ast$$54, context$$35)
        }else {
          var v15571 = ast$$54.nodeType;
          var v20507 = TypeScript$$17.NodeType;
          var v15572 = v20507.ClassDeclaration;
          var v7352 = v15571 == v15572;
          if(v7352) {
            preAssignClassScopes(ast$$54, context$$35)
          }else {
            var v15573 = ast$$54.nodeType;
            var v20508 = TypeScript$$17.NodeType;
            var v15574 = v20508.InterfaceDeclaration;
            var v7351 = v15573 == v15574;
            if(v7351) {
              preAssignInterfaceScopes(ast$$54, context$$35)
            }else {
              var v15575 = ast$$54.nodeType;
              var v20509 = TypeScript$$17.NodeType;
              var v15576 = v20509.With;
              var v7350 = v15575 == v15576;
              if(v7350) {
                preAssignWithScopes(ast$$54, context$$35)
              }else {
                var v15577 = ast$$54.nodeType;
                var v20510 = TypeScript$$17.NodeType;
                var v15578 = v20510.FuncDecl;
                var v7349 = v15577 == v15578;
                if(v7349) {
                  preAssignFuncDeclScopes(ast$$54, context$$35)
                }else {
                  var v15579 = ast$$54.nodeType;
                  var v20511 = TypeScript$$17.NodeType;
                  var v15580 = v20511.Catch;
                  var v7348 = v15579 == v15580;
                  if(v7348) {
                    preAssignCatchScopes(ast$$54, context$$35)
                  }else {
                    var v15581 = ast$$54.nodeType;
                    var v20512 = TypeScript$$17.NodeType;
                    var v15582 = v20512.TypeRef;
                    var v7347 = v15581 == v15582;
                    if(v7347) {
                      go = false
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var v7355 = walker$$42.options;
    v7355.goChildren = go;
    return ast$$54
  }
  function postAssignScopes(ast$$55, parent$$46, walker$$43) {
    var context$$36 = walker$$43.state;
    var go$$1 = true;
    if(ast$$55) {
      var v15583 = ast$$55.nodeType;
      var v20513 = TypeScript$$17.NodeType;
      var v15584 = v20513.ModuleDeclaration;
      var v7366 = v15583 == v15584;
      if(v7366) {
        var prevModDecl = ast$$55;
        popAssignScope(context$$36);
        var v7356 = context$$36.modDeclChain;
        JAMScript.call(v7356.pop, v7356, []);
        var v20514 = context$$36.modDeclChain;
        var v15585 = v20514.length;
        var v7358 = v15585 >= 1;
        if(v7358) {
          var v15586 = context$$36.typeFlow;
          var v7357 = v15586.checker;
          var v15587 = context$$36.modDeclChain;
          var v23688 = context$$36.modDeclChain;
          var v20515 = v23688.length;
          var v15588 = v20515 - 1;
          v7357.currentModDecl = v15587[v15588]
        }
      }else {
        var v15589 = ast$$55.nodeType;
        var v20516 = TypeScript$$17.NodeType;
        var v15590 = v20516.ClassDeclaration;
        var v7365 = v15589 == v15590;
        if(v7365) {
          popAssignScope(context$$36)
        }else {
          var v15591 = ast$$55.nodeType;
          var v20517 = TypeScript$$17.NodeType;
          var v15592 = v20517.InterfaceDeclaration;
          var v7364 = v15591 == v15592;
          if(v7364) {
            popAssignScope(context$$36)
          }else {
            var v15593 = ast$$55.nodeType;
            var v20518 = TypeScript$$17.NodeType;
            var v15594 = v20518.With;
            var v7363 = v15593 == v15594;
            if(v7363) {
              popAssignScope(context$$36)
            }else {
              var v15595 = ast$$55.nodeType;
              var v20519 = TypeScript$$17.NodeType;
              var v15596 = v20519.FuncDecl;
              var v7362 = v15595 == v15596;
              if(v7362) {
                var funcDecl$$14 = ast$$55;
                var v23689 = funcDecl$$14.isConstructor;
                var v20520 = !v23689;
                var v23692 = !v20520;
                if(v23692) {
                  var v23690 = funcDecl$$14.fncFlags;
                  var v25311 = TypeScript$$17.FncFlags;
                  var v23691 = v25311.ClassMethod;
                  v20520 = JAMScript.call(TypeScript$$17.hasFlag, TypeScript$$17, [v23690, v23691])
                }
                var v15597 = v20520;
                if(v15597) {
                  var v20521 = funcDecl$$14.isOverload;
                  v15597 = !v20521
                }
                var v7359 = v15597;
                if(v7359) {
                  popAssignScope(context$$36)
                }
              }else {
                var v15598 = ast$$55.nodeType;
                var v20522 = TypeScript$$17.NodeType;
                var v15599 = v20522.Catch;
                var v7361 = v15598 == v15599;
                if(v7361) {
                  var catchBlock$$1 = ast$$55;
                  var v7360 = catchBlock$$1.param;
                  if(v7360) {
                    popAssignScope(context$$36)
                  }
                }else {
                  go$$1 = false
                }
              }
            }
          }
        }
      }
    }
    var v7367 = walker$$43.options;
    v7367.goChildren = go$$1;
    return ast$$55
  }
  var AssignScopeContext = v676();
  TypeScript$$17.AssignScopeContext = AssignScopeContext;
  TypeScript$$17.pushAssignScope = pushAssignScope;
  TypeScript$$17.popAssignScope = popAssignScope;
  TypeScript$$17.instanceCompare = instanceCompare;
  TypeScript$$17.instanceFilterStop = instanceFilterStop;
  var ScopeSearchFilter = v679();
  TypeScript$$17.ScopeSearchFilter = ScopeSearchFilter;
  var v27165 = JAMScript.new(ScopeSearchFilter, [instanceCompare, instanceFilterStop]);
  TypeScript$$17.instanceFilter = v27165;
  TypeScript$$17.preAssignModuleScopes = preAssignModuleScopes;
  TypeScript$$17.preAssignClassScopes = preAssignClassScopes;
  TypeScript$$17.preAssignInterfaceScopes = preAssignInterfaceScopes;
  TypeScript$$17.preAssignWithScopes = preAssignWithScopes;
  TypeScript$$17.preAssignFuncDeclScopes = preAssignFuncDeclScopes;
  TypeScript$$17.preAssignCatchScopes = preAssignCatchScopes;
  TypeScript$$17.preAssignScopes = preAssignScopes;
  TypeScript$$17.postAssignScopes = postAssignScopes;
  return
}
function v675(TypeScript$$16) {
  function v674() {
    function v673(message$$17) {
      var v7368 = this.reportError;
      if(v7368) {
        JAMScript.call(this.reportError, this, [message$$17])
      }
      return
    }
    function v672() {
      var rtok$$1;
      JAMScript.call(this.tokenStart, this, []);
      var v27166 = JAMScript.call(this.peekChar, this, []);
      this.ch = v27166;
      var v15600 = this.pos;
      var v15601 = this.len;
      var v7531 = v15600 < v15601;
      start:for(;v7531;) {
        var v20523 = this.ch;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v15602 = lexIdStartTable[v20523]
        }
        var v20525 = !v15602;
        if(v20525) {
          var v23693 = this.ch;
          var v23694 = TypeScript$$16.LexCodeBSL;
          var v20524 = v23693 == v23694;
          var v23696 = !v20524;
          if(v23696) {
            var v25312 = this.ch;
            var v25313 = TypeScript$$16.LexCodeASCIIChars;
            var v23695 = v25312 >= v25313;
            if(v23695) {
              var v25314 = this.ch;
              v23695 = LexIsUnicodeIdStart(v25314)
            }
            v20524 = v23695
          }
          v15602 = v20524
        }
        var v7530 = v15602;
        if(v7530) {
          return JAMScript.call(this.scanIdentifier, this, [])
        }else {
          var v15603 = this.ch;
          var v15604 = TypeScript$$16.LexCodeSpace;
          var v7529 = v15603 == v15604;
          if(v7529) {
            var v15605 = this.interveningWhitespace;
            var v7369 = !v15605;
            if(v7369) {
              this.interveningWhitespacePos = this.pos
            }
            var v15606 = this.ch;
            var v15607 = TypeScript$$16.LexCodeSpace;
            var v7370 = v15606 == v15607;
            do {
              JAMScript.call(this.nextChar, this, []);
              var v15608 = this.ch;
              var v15609 = TypeScript$$16.LexCodeSpace;
              v7370 = v15608 == v15609
            }while(v7370);
            var v15610 = this.mode;
            var v15611 = LexMode.Line;
            var v7376 = v15610 == v15611;
            if(v7376) {
              var v7371 = this.src;
              var v7372 = this.startPos;
              var v7373 = this.pos;
              var whitespaceText = JAMScript.call(v7371.substring, v7371, [v7372, v7373]);
              var v7374 = TypeScript$$16.WhitespaceToken;
              var v15612 = TypeScript$$16.TokenID;
              var v7375 = v15612.Whitespace;
              return JAMScript.new(v7374, [v7375, whitespaceText])
            }else {
              JAMScript.call(this.tokenStart, this, []);
              this.interveningWhitespace = true
            }
          }else {
            var v15613 = this.ch;
            var v15614 = TypeScript$$16.LexCodeSLH;
            var v7528 = v15613 == v15614;
            if(v7528) {
              JAMScript.call(this.nextChar, this, []);
              var commentText$$2;
              var v15615 = this.ch;
              var v15616 = TypeScript$$16.LexCodeSLH;
              var v7400 = v15615 == v15616;
              if(v7400) {
                var v15617 = this.interveningWhitespace;
                var v7378 = !v15617;
                if(v7378) {
                  var v7377 = this.pos;
                  this.interveningWhitespacePos = v7377 - 1
                }
                var v7379 = this.pos;
                var commentStartPos = v7379 - 1;
                var commentStartLine = this.line;
                JAMScript.call(this.finishSinglelineComment, this, []);
                var v7380 = this.src;
                var v7381 = this.pos;
                commentText$$2 = JAMScript.call(v7380.substring, v7380, [commentStartPos, v7381]);
                var v7382 = TypeScript$$16.CommentToken;
                var v15618 = TypeScript$$16.TokenID;
                var v7383 = v15618.Comment;
                var commentToken = JAMScript.new(v7382, [v7383, commentText$$2, false, commentStartPos, commentStartLine, false]);
                var v7384 = this.scanComments;
                if(v7384) {
                  this.startPos = commentStartPos;
                  return commentToken
                }else {
                  JAMScript.call(this.pushComment, this, [commentToken])
                }
                this.interveningWhitespace = true
              }else {
                var v15619 = this.ch;
                var v15620 = TypeScript$$16.LexCodeMUL;
                var v7399 = v15619 == v15620;
                if(v7399) {
                  var v15621 = this.interveningWhitespace;
                  var v7386 = !v15621;
                  if(v7386) {
                    var v7385 = this.pos;
                    this.interveningWhitespacePos = v7385 - 1
                  }
                  var v7387 = this.pos;
                  commentStartPos = v7387 - 1;
                  commentStartLine = this.line;
                  JAMScript.call(this.nextChar, this, []);
                  JAMScript.call(this.finishMultilineComment, this, []);
                  var v7388 = this.src;
                  var v7389 = this.pos;
                  commentText$$2 = JAMScript.call(v7388.substring, v7388, [commentStartPos, v7389]);
                  var v7390 = JAMScript.call(this.peekChar, this, []);
                  var endsLine$$1 = JAMScript.call(this.endsLine, this, [v7390]);
                  var v7391 = TypeScript$$16.CommentToken;
                  var v15622 = TypeScript$$16.TokenID;
                  var v7392 = v15622.Comment;
                  commentToken = JAMScript.new(v7391, [v7392, commentText$$2, true, commentStartPos, commentStartLine, endsLine$$1]);
                  var v7393 = this.scanComments;
                  if(v7393) {
                    this.startPos = commentStartPos;
                    return commentToken
                  }else {
                    JAMScript.call(this.pushComment, this, [commentToken])
                  }
                  this.interveningWhitespace = true
                }else {
                  var regexTok = JAMScript.call(this.speculateRegex, this, []);
                  if(regexTok) {
                    return regexTok
                  }else {
                    var v20526 = this.pos;
                    var v15623 = JAMScript.call(this.peekCharAt, this, [v20526]);
                    var v15624 = TypeScript$$16.LexCodeEQ;
                    var v7398 = v15623 == v15624;
                    if(v7398) {
                      JAMScript.call(this.nextChar, this, []);
                      var v7394 = TypeScript$$16.staticTokens;
                      var v15625 = TypeScript$$16.TokenID;
                      var v7395 = v15625.SlashEquals;
                      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                        return v7394[v7395]
                      }
                    }else {
                      var v7396 = TypeScript$$16.staticTokens;
                      var v15626 = TypeScript$$16.TokenID;
                      var v7397 = v15626.Slash;
                      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                        return v7396[v7397]
                      }
                    }
                  }
                }
              }
            }else {
              var v15627 = this.ch;
              var v15628 = TypeScript$$16.LexCodeSMC;
              var v7527 = v15627 == v15628;
              if(v7527) {
                JAMScript.call(this.nextChar, this, []);
                var v7401 = TypeScript$$16.staticTokens;
                var v15629 = TypeScript$$16.TokenID;
                var v7402 = v15629.Semicolon;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  return v7401[v7402]
                }
              }else {
                var v20527 = this.ch;
                var v20528 = TypeScript$$16.LexCodeAPO;
                var v15630 = v20527 == v20528;
                var v20531 = !v15630;
                if(v20531) {
                  var v20529 = this.ch;
                  var v20530 = TypeScript$$16.LexCodeQUO;
                  v15630 = v20529 == v20530
                }
                var v7526 = v15630;
                if(v7526) {
                  return JAMScript.call(this.scanStringConstant, this, [])
                }else {
                  var v15631 = this.ch;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v7525 = autoToken[v15631]
                  }
                  if(v7525) {
                    var v7403 = this.ch;
                    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                      var atok = autoToken[v7403]
                    }
                    var v15632 = atok.tokenId;
                    var v20532 = TypeScript$$16.TokenID;
                    var v15633 = v20532.OpenBrace;
                    var v7405 = v15632 == v15633;
                    if(v7405) {
                      var v15634 = this.leftCurlyCount;
                      this.leftCurlyCount = v15634 + 1
                    }else {
                      var v15635 = atok.tokenId;
                      var v20533 = TypeScript$$16.TokenID;
                      var v15636 = v20533.CloseBrace;
                      var v7404 = v15635 == v15636;
                      if(v7404) {
                        var v15637 = this.rightCurlyCount;
                        this.rightCurlyCount = v15637 + 1
                      }
                    }
                    JAMScript.call(this.nextChar, this, []);
                    return atok
                  }else {
                    var v20534 = this.ch;
                    var v20535 = TypeScript$$16.LexCode_0;
                    var v15638 = v20534 >= v20535;
                    if(v15638) {
                      var v20536 = this.ch;
                      var v20537 = TypeScript$$16.LexCode_9;
                      v15638 = v20536 <= v20537
                    }
                    var v7524 = v15638;
                    if(v7524) {
                      rtok$$1 = JAMScript.call(this.scanNumber, this, []);
                      if(rtok$$1) {
                        return rtok$$1
                      }else {
                        JAMScript.call(this.nextChar, this, []);
                        var v7406 = TypeScript$$16.staticTokens;
                        var v15639 = TypeScript$$16.TokenID;
                        var v7407 = v15639.Error;
                        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                          return v7406[v7407]
                        }
                      }
                    }else {
                      var v7523 = this.ch;
                      switch(v7523) {
                        case TypeScript$$16.LexCodeTAB:
                        ;
                        case TypeScript$$16.LexCodeVTAB:
                          var v15640 = this.interveningWhitespace;
                          var v7408 = !v15640;
                          if(v7408) {
                            this.interveningWhitespacePos = this.pos
                          }
                          var v15641 = this.mode;
                          var v15642 = LexMode.Line;
                          var v7415 = v15641 == v15642;
                          if(v7415) {
                            var v20538 = this.ch;
                            var v20539 = TypeScript$$16.LexCodeSpace;
                            var v15643 = v20538 == v20539;
                            var v20541 = !v15643;
                            if(v20541) {
                              var v20540 = this.ch;
                              v15643 = v20540 == 9
                            }
                            var v7409 = v15643;
                            do {
                              JAMScript.call(this.nextChar, this, []);
                              var v20542 = this.ch;
                              var v20543 = TypeScript$$16.LexCodeSpace;
                              var v15644 = v20542 == v20543;
                              var v20545 = !v15644;
                              if(v20545) {
                                var v20544 = this.ch;
                                v15644 = v20544 == 9
                              }
                              v7409 = v15644
                            }while(v7409);
                            var v7410 = this.src;
                            var v7411 = this.startPos;
                            var v7412 = this.pos;
                            var wsText = JAMScript.call(v7410.substring, v7410, [v7411, v7412]);
                            var v7413 = TypeScript$$16.WhitespaceToken;
                            var v15645 = TypeScript$$16.TokenID;
                            var v7414 = v15645.Whitespace;
                            return JAMScript.new(v7413, [v7414, wsText])
                          }else {
                            this.interveningWhitespace = true
                          }
                        ;
                        case 255:
                        ;
                        case 254:
                        ;
                        case 239:
                        ;
                        case 187:
                        ;
                        case 191:
                        ;
                        case TypeScript$$16.LexCodeLS:
                        ;
                        case TypeScript$$16.LexCodePS:
                        ;
                        case TypeScript$$16.LexCodeNWL:
                        ;
                        case TypeScript$$16.LexCodeRET:
                          var v15646 = this.ch;
                          var v15647 = TypeScript$$16.LexCodeNWL;
                          var v7419 = v15646 == v15647;
                          if(v7419) {
                            JAMScript.call(this.newLine, this, []);
                            var v15648 = this.mode;
                            var v15649 = LexMode.Line;
                            var v7418 = v15648 == v15649;
                            if(v7418) {
                              var v7416 = TypeScript$$16.staticTokens;
                              var v15650 = TypeScript$$16.TokenID;
                              var v7417 = v15650.EndOfFile;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7416[v7417]
                              }
                            }
                          }
                          var v15651 = this.interveningWhitespace;
                          var v7420 = !v15651;
                          if(v7420) {
                            this.interveningWhitespacePos = this.pos
                          }
                          JAMScript.call(this.nextChar, this, []);
                          JAMScript.call(this.tokenStart, this, []);
                          this.interveningWhitespace = true;
                          break;
                        case TypeScript$$16.LexCodeDOT:
                          var v23697 = this.pos;
                          var v20546 = v23697 + 1;
                          var v15652 = JAMScript.call(this.peekCharAt, this, [v20546]);
                          var v15653 = TypeScript$$16.LexCodeDOT;
                          var v7428 = v15652 == v15653;
                          if(v7428) {
                            var v23698 = this.pos;
                            var v20547 = v23698 + 2;
                            var v15654 = JAMScript.call(this.peekCharAt, this, [v20547]);
                            var v15655 = TypeScript$$16.LexCodeDOT;
                            var v7425 = v15654 == v15655;
                            if(v7425) {
                              JAMScript.call(this.advanceChar, this, [3]);
                              var v7421 = TypeScript$$16.staticTokens;
                              var v15656 = TypeScript$$16.TokenID;
                              var v7422 = v15656.DotDotDot;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7421[v7422]
                              }
                            }else {
                              JAMScript.call(this.nextChar, this, []);
                              var v7423 = TypeScript$$16.staticTokens;
                              var v15657 = TypeScript$$16.TokenID;
                              var v7424 = v15657.Dot;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7423[v7424]
                              }
                            }
                          }else {
                            JAMScript.call(this.nextChar, this, []);
                            rtok$$1 = JAMScript.call(this.scanFraction, this, []);
                            if(rtok$$1) {
                              return rtok$$1
                            }else {
                              var v7426 = TypeScript$$16.staticTokens;
                              var v15658 = TypeScript$$16.TokenID;
                              var v7427 = v15658.Dot;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7426[v7427]
                              }
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeEQ:
                          var v23699 = this.pos;
                          var v20548 = v23699 + 1;
                          var v15659 = JAMScript.call(this.peekCharAt, this, [v20548]);
                          var v15660 = TypeScript$$16.LexCodeEQ;
                          var v7439 = v15659 == v15660;
                          if(v7439) {
                            var v23700 = this.pos;
                            var v20549 = v23700 + 2;
                            var v15661 = JAMScript.call(this.peekCharAt, this, [v20549]);
                            var v15662 = TypeScript$$16.LexCodeEQ;
                            var v7433 = v15661 == v15662;
                            if(v7433) {
                              JAMScript.call(this.advanceChar, this, [3]);
                              var v7429 = TypeScript$$16.staticTokens;
                              var v15663 = TypeScript$$16.TokenID;
                              var v7430 = v15663.EqualsEqualsEquals;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7429[v7430]
                              }
                            }else {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7431 = TypeScript$$16.staticTokens;
                              var v15664 = TypeScript$$16.TokenID;
                              var v7432 = v15664.EqualsEquals;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7431[v7432]
                              }
                            }
                          }else {
                            var v23701 = this.pos;
                            var v20550 = v23701 + 1;
                            var v15665 = JAMScript.call(this.peekCharAt, this, [v20550]);
                            var v15666 = TypeScript$$16.LexCodeGT;
                            var v7438 = v15665 == v15666;
                            if(v7438) {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7434 = TypeScript$$16.staticTokens;
                              var v15667 = TypeScript$$16.TokenID;
                              var v7435 = v15667.EqualsGreaterThan;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7434[v7435]
                              }
                            }else {
                              JAMScript.call(this.nextChar, this, []);
                              var v7436 = TypeScript$$16.staticTokens;
                              var v15668 = TypeScript$$16.TokenID;
                              var v7437 = v15668.Equals;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7436[v7437]
                              }
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeBNG:
                          var v23702 = this.pos;
                          var v20551 = v23702 + 1;
                          var v15669 = JAMScript.call(this.peekCharAt, this, [v20551]);
                          var v15670 = TypeScript$$16.LexCodeEQ;
                          var v7447 = v15669 == v15670;
                          if(v7447) {
                            var v23703 = this.pos;
                            var v20552 = v23703 + 2;
                            var v15671 = JAMScript.call(this.peekCharAt, this, [v20552]);
                            var v15672 = TypeScript$$16.LexCodeEQ;
                            var v7444 = v15671 == v15672;
                            if(v7444) {
                              JAMScript.call(this.advanceChar, this, [3]);
                              var v7440 = TypeScript$$16.staticTokens;
                              var v15673 = TypeScript$$16.TokenID;
                              var v7441 = v15673.ExclamationEqualsEquals;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7440[v7441]
                              }
                            }else {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7442 = TypeScript$$16.staticTokens;
                              var v15674 = TypeScript$$16.TokenID;
                              var v7443 = v15674.ExclamationEquals;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7442[v7443]
                              }
                            }
                          }else {
                            JAMScript.call(this.nextChar, this, []);
                            var v7445 = TypeScript$$16.staticTokens;
                            var v15675 = TypeScript$$16.TokenID;
                            var v7446 = v15675.Exclamation;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7445[v7446]
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodePLS:
                          var v23704 = this.pos;
                          var v20553 = v23704 + 1;
                          var v15676 = JAMScript.call(this.peekCharAt, this, [v20553]);
                          var v15677 = TypeScript$$16.LexCodeEQ;
                          var v7455 = v15676 == v15677;
                          if(v7455) {
                            JAMScript.call(this.advanceChar, this, [2]);
                            var v7448 = TypeScript$$16.staticTokens;
                            var v15678 = TypeScript$$16.TokenID;
                            var v7449 = v15678.PlusEquals;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7448[v7449]
                            }
                          }else {
                            var v23705 = this.pos;
                            var v20554 = v23705 + 1;
                            var v15679 = JAMScript.call(this.peekCharAt, this, [v20554]);
                            var v15680 = TypeScript$$16.LexCodePLS;
                            var v7454 = v15679 == v15680;
                            if(v7454) {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7450 = TypeScript$$16.staticTokens;
                              var v15681 = TypeScript$$16.TokenID;
                              var v7451 = v15681.PlusPlus;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7450[v7451]
                              }
                            }else {
                              JAMScript.call(this.nextChar, this, []);
                              var v7452 = TypeScript$$16.staticTokens;
                              var v15682 = TypeScript$$16.TokenID;
                              var v7453 = v15682.Plus;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7452[v7453]
                              }
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeMIN:
                          var v23706 = this.pos;
                          var v20555 = v23706 + 1;
                          var v15683 = JAMScript.call(this.peekCharAt, this, [v20555]);
                          var v15684 = TypeScript$$16.LexCodeEQ;
                          var v7463 = v15683 == v15684;
                          if(v7463) {
                            JAMScript.call(this.advanceChar, this, [2]);
                            var v7456 = TypeScript$$16.staticTokens;
                            var v15685 = TypeScript$$16.TokenID;
                            var v7457 = v15685.MinusEquals;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7456[v7457]
                            }
                          }else {
                            var v23707 = this.pos;
                            var v20556 = v23707 + 1;
                            var v15686 = JAMScript.call(this.peekCharAt, this, [v20556]);
                            var v15687 = TypeScript$$16.LexCodeMIN;
                            var v7462 = v15686 == v15687;
                            if(v7462) {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7458 = TypeScript$$16.staticTokens;
                              var v15688 = TypeScript$$16.TokenID;
                              var v7459 = v15688.MinusMinus;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7458[v7459]
                              }
                            }else {
                              JAMScript.call(this.nextChar, this, []);
                              var v7460 = TypeScript$$16.staticTokens;
                              var v15689 = TypeScript$$16.TokenID;
                              var v7461 = v15689.Minus;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7460[v7461]
                              }
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeMUL:
                          var v23708 = this.pos;
                          var v20557 = v23708 + 1;
                          var v15690 = JAMScript.call(this.peekCharAt, this, [v20557]);
                          var v15691 = TypeScript$$16.LexCodeEQ;
                          var v7468 = v15690 == v15691;
                          if(v7468) {
                            JAMScript.call(this.advanceChar, this, [2]);
                            var v7464 = TypeScript$$16.staticTokens;
                            var v15692 = TypeScript$$16.TokenID;
                            var v7465 = v15692.AsteriskEquals;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7464[v7465]
                            }
                          }else {
                            JAMScript.call(this.nextChar, this, []);
                            var v7466 = TypeScript$$16.staticTokens;
                            var v15693 = TypeScript$$16.TokenID;
                            var v7467 = v15693.Asterisk;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7466[v7467]
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodePCT:
                          var v23709 = this.pos;
                          var v20558 = v23709 + 1;
                          var v15694 = JAMScript.call(this.peekCharAt, this, [v20558]);
                          var v15695 = TypeScript$$16.LexCodeEQ;
                          var v7473 = v15694 == v15695;
                          if(v7473) {
                            JAMScript.call(this.advanceChar, this, [2]);
                            var v7469 = TypeScript$$16.staticTokens;
                            var v15696 = TypeScript$$16.TokenID;
                            var v7470 = v15696.PercentEquals;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7469[v7470]
                            }
                          }else {
                            JAMScript.call(this.nextChar, this, []);
                            var v7471 = TypeScript$$16.staticTokens;
                            var v15697 = TypeScript$$16.TokenID;
                            var v7472 = v15697.Percent;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7471[v7472]
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeLT:
                          var v23710 = this.pos;
                          var v20559 = v23710 + 1;
                          var v15698 = JAMScript.call(this.peekCharAt, this, [v20559]);
                          var v15699 = TypeScript$$16.LexCodeLT;
                          var v7484 = v15698 == v15699;
                          if(v7484) {
                            var v23711 = this.pos;
                            var v20560 = v23711 + 2;
                            var v15700 = JAMScript.call(this.peekCharAt, this, [v20560]);
                            var v15701 = TypeScript$$16.LexCodeEQ;
                            var v7478 = v15700 == v15701;
                            if(v7478) {
                              JAMScript.call(this.advanceChar, this, [3]);
                              var v7474 = TypeScript$$16.staticTokens;
                              var v15702 = TypeScript$$16.TokenID;
                              var v7475 = v15702.LessThanLessThanEquals;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7474[v7475]
                              }
                            }else {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7476 = TypeScript$$16.staticTokens;
                              var v15703 = TypeScript$$16.TokenID;
                              var v7477 = v15703.LessThanLessThan;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7476[v7477]
                              }
                            }
                          }else {
                            var v23712 = this.pos;
                            var v20561 = v23712 + 1;
                            var v15704 = JAMScript.call(this.peekCharAt, this, [v20561]);
                            var v15705 = TypeScript$$16.LexCodeEQ;
                            var v7483 = v15704 == v15705;
                            if(v7483) {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7479 = TypeScript$$16.staticTokens;
                              var v15706 = TypeScript$$16.TokenID;
                              var v7480 = v15706.LessThanEquals;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7479[v7480]
                              }
                            }else {
                              JAMScript.call(this.nextChar, this, []);
                              var v7481 = TypeScript$$16.staticTokens;
                              var v15707 = TypeScript$$16.TokenID;
                              var v7482 = v15707.LessThan;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7481[v7482]
                              }
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeGT:
                          var v23713 = this.pos;
                          var v20562 = v23713 + 1;
                          var v15708 = JAMScript.call(this.peekCharAt, this, [v20562]);
                          var v15709 = TypeScript$$16.LexCodeGT;
                          var v7501 = v15708 == v15709;
                          if(v7501) {
                            var v23714 = this.pos;
                            var v20563 = v23714 + 2;
                            var v15710 = JAMScript.call(this.peekCharAt, this, [v20563]);
                            var v15711 = TypeScript$$16.LexCodeEQ;
                            var v7495 = v15710 == v15711;
                            if(v7495) {
                              JAMScript.call(this.advanceChar, this, [3]);
                              var v7485 = TypeScript$$16.staticTokens;
                              var v15712 = TypeScript$$16.TokenID;
                              var v7486 = v15712.GreaterThanGreaterThanEquals;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7485[v7486]
                              }
                            }else {
                              var v23715 = this.pos;
                              var v20564 = v23715 + 2;
                              var v15713 = JAMScript.call(this.peekCharAt, this, [v20564]);
                              var v15714 = TypeScript$$16.LexCodeGT;
                              var v7494 = v15713 == v15714;
                              if(v7494) {
                                var v23716 = this.pos;
                                var v20565 = v23716 + 3;
                                var v15715 = JAMScript.call(this.peekCharAt, this, [v20565]);
                                var v15716 = TypeScript$$16.LexCodeEQ;
                                var v7491 = v15715 == v15716;
                                if(v7491) {
                                  JAMScript.call(this.advanceChar, this, [4]);
                                  var v7487 = TypeScript$$16.staticTokens;
                                  var v15717 = TypeScript$$16.TokenID;
                                  var v7488 = v15717.GreaterThanGreaterThanGreaterThanEquals;
                                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                    return v7487[v7488]
                                  }
                                }else {
                                  JAMScript.call(this.advanceChar, this, [3]);
                                  var v7489 = TypeScript$$16.staticTokens;
                                  var v15718 = TypeScript$$16.TokenID;
                                  var v7490 = v15718.GreaterThanGreaterThanGreaterThan;
                                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                    return v7489[v7490]
                                  }
                                }
                              }else {
                                JAMScript.call(this.advanceChar, this, [2]);
                                var v7492 = TypeScript$$16.staticTokens;
                                var v15719 = TypeScript$$16.TokenID;
                                var v7493 = v15719.GreaterThanGreaterThan;
                                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                  return v7492[v7493]
                                }
                              }
                            }
                          }else {
                            var v23717 = this.pos;
                            var v20566 = v23717 + 1;
                            var v15720 = JAMScript.call(this.peekCharAt, this, [v20566]);
                            var v15721 = TypeScript$$16.LexCodeEQ;
                            var v7500 = v15720 == v15721;
                            if(v7500) {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7496 = TypeScript$$16.staticTokens;
                              var v15722 = TypeScript$$16.TokenID;
                              var v7497 = v15722.GreaterThanEquals;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7496[v7497]
                              }
                            }else {
                              JAMScript.call(this.nextChar, this, []);
                              var v7498 = TypeScript$$16.staticTokens;
                              var v15723 = TypeScript$$16.TokenID;
                              var v7499 = v15723.GreaterThan;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7498[v7499]
                              }
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeXOR:
                          var v23718 = this.pos;
                          var v20567 = v23718 + 1;
                          var v15724 = JAMScript.call(this.peekCharAt, this, [v20567]);
                          var v15725 = TypeScript$$16.LexCodeEQ;
                          var v7506 = v15724 == v15725;
                          if(v7506) {
                            JAMScript.call(this.advanceChar, this, [2]);
                            var v7502 = TypeScript$$16.staticTokens;
                            var v15726 = TypeScript$$16.TokenID;
                            var v7503 = v15726.CaretEquals;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7502[v7503]
                            }
                          }else {
                            JAMScript.call(this.nextChar, this, []);
                            var v7504 = TypeScript$$16.staticTokens;
                            var v15727 = TypeScript$$16.TokenID;
                            var v7505 = v15727.Caret;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7504[v7505]
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeBAR:
                          var v23719 = this.pos;
                          var v20568 = v23719 + 1;
                          var v15728 = JAMScript.call(this.peekCharAt, this, [v20568]);
                          var v15729 = TypeScript$$16.LexCodeEQ;
                          var v7514 = v15728 == v15729;
                          if(v7514) {
                            JAMScript.call(this.advanceChar, this, [2]);
                            var v7507 = TypeScript$$16.staticTokens;
                            var v15730 = TypeScript$$16.TokenID;
                            var v7508 = v15730.BarEquals;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7507[v7508]
                            }
                          }else {
                            var v23720 = this.pos;
                            var v20569 = v23720 + 1;
                            var v15731 = JAMScript.call(this.peekCharAt, this, [v20569]);
                            var v15732 = TypeScript$$16.LexCodeBAR;
                            var v7513 = v15731 == v15732;
                            if(v7513) {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7509 = TypeScript$$16.staticTokens;
                              var v15733 = TypeScript$$16.TokenID;
                              var v7510 = v15733.BarBar;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7509[v7510]
                              }
                            }else {
                              JAMScript.call(this.nextChar, this, []);
                              var v7511 = TypeScript$$16.staticTokens;
                              var v15734 = TypeScript$$16.TokenID;
                              var v7512 = v15734.Bar;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7511[v7512]
                              }
                            }
                          }
                        ;
                        case TypeScript$$16.LexCodeAMP:
                          var v23721 = this.pos;
                          var v20570 = v23721 + 1;
                          var v15735 = JAMScript.call(this.peekCharAt, this, [v20570]);
                          var v15736 = TypeScript$$16.LexCodeEQ;
                          var v7522 = v15735 == v15736;
                          if(v7522) {
                            JAMScript.call(this.advanceChar, this, [2]);
                            var v7515 = TypeScript$$16.staticTokens;
                            var v15737 = TypeScript$$16.TokenID;
                            var v7516 = v15737.AmpersandEquals;
                            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                              return v7515[v7516]
                            }
                          }else {
                            var v23722 = this.pos;
                            var v20571 = v23722 + 1;
                            var v15738 = JAMScript.call(this.peekCharAt, this, [v20571]);
                            var v15739 = TypeScript$$16.LexCodeAMP;
                            var v7521 = v15738 == v15739;
                            if(v7521) {
                              JAMScript.call(this.advanceChar, this, [2]);
                              var v7517 = TypeScript$$16.staticTokens;
                              var v15740 = TypeScript$$16.TokenID;
                              var v7518 = v15740.AmpersandAmpersand;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7517[v7518]
                              }
                            }else {
                              JAMScript.call(this.nextChar, this, []);
                              var v7519 = TypeScript$$16.staticTokens;
                              var v15741 = TypeScript$$16.TokenID;
                              var v7520 = v15741.And;
                              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                                return v7519[v7520]
                              }
                            }
                          }
                        ;
                        default:
                          JAMScript.call(this.reportScannerError, this, ["Invalid character"]);
                          JAMScript.call(this.nextChar, this, [])
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var v15742 = this.pos;
        var v15743 = this.len;
        v7531 = v15742 < v15743
      }
      var v7532 = TypeScript$$16.staticTokens;
      var v15744 = TypeScript$$16.TokenID;
      var v7533 = v15744.EndOfFile;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        return v7532[v7533]
      }
    }
    function v671() {
      var hasEscape = false;
      var v7534 = this.ch;
      var v7535 = TypeScript$$16.LexCodeBSL;
      var isFirstChar = v7534 == v7535;
      var hasUnicode = false;
      for(;;) {
        var v20572 = this.ch;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v15745 = lexIdStartTable[v20572]
        }
        var v20574 = !v15745;
        if(v20574) {
          var v23723 = this.ch;
          var v20573 = LexIsDigit(v23723);
          var v23725 = !v20573;
          if(v23725) {
            var v25315 = this.ch;
            var v25316 = TypeScript$$16.LexCodeASCIIChars;
            var v23724 = v25315 >= v25316;
            if(v23724) {
              v23724 = JAMScript.call(this.isValidUnicodeIdentifierChar, this, [])
            }
            v20573 = v23724
          }
          v15745 = v20573
        }
        var v7536 = v15745;
        for(;v7536;) {
          JAMScript.call(this.nextChar, this, []);
          var v20575 = this.ch;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v15746 = lexIdStartTable[v20575]
          }
          var v20577 = !v15746;
          if(v20577) {
            var v23726 = this.ch;
            var v20576 = LexIsDigit(v23726);
            var v23728 = !v20576;
            if(v23728) {
              var v25317 = this.ch;
              var v25318 = TypeScript$$16.LexCodeASCIIChars;
              var v23727 = v25317 >= v25318;
              if(v23727) {
                v23727 = JAMScript.call(this.isValidUnicodeIdentifierChar, this, [])
              }
              v20576 = v23727
            }
            v15746 = v20576
          }
          v7536 = v15746
        }
        var v15747 = this.ch;
        var v15748 = TypeScript$$16.LexCodeBSL;
        var v7548 = v15747 == v15748;
        if(v7548) {
          JAMScript.call(this.nextChar, this, []);
          var v15749 = this.ch;
          var v15750 = TypeScript$$16.LexCode_u;
          var v7545 = v15749 == v15750;
          if(v7545) {
            JAMScript.call(this.nextChar, this, []);
            var h$$4 = 0;
            var v7540 = h$$4 < 4;
            for(;v7540;) {
              var v15751 = this.ch;
              var v7539 = JAMScript.call(this.IsHexDigit, this, [v15751]);
              if(v7539) {
                JAMScript.call(this.nextChar, this, [])
              }else {
                JAMScript.call(this.reportScannerError, this, ["Invalid Unicode escape sequence"]);
                var v7537 = TypeScript$$16.staticTokens;
                var v15752 = TypeScript$$16.TokenID;
                var v7538 = v15752.Error;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  return v7537[v7538]
                }
              }
              h$$4 = h$$4 + 1;
              v7540 = h$$4 < 4
            }
            var v15753 = this.src;
            var v20578 = this.pos;
            var v15754 = v20578 - 4;
            var v15755 = this.pos;
            var v7541 = JAMScript.call(v15753.substring, v15753, [v15754, v15755]);
            var hexChar = parseInt(v7541, 16);
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v15756 = lexIdStartTable[hexChar]
            }
            var v20580 = !v15756;
            if(v20580) {
              var v23729 = !isFirstChar;
              if(v23729) {
                v23729 = LexIsDigit(hexChar)
              }
              var v20579 = v23729;
              var v23731 = !v20579;
              if(v23731) {
                var v25319 = TypeScript$$16.LexCodeASCIIChars;
                var v23730 = hexChar >= v25319;
                if(v23730) {
                  var v25320 = LexIsUnicodeIdStart(hexChar);
                  var v26103 = !v25320;
                  if(v26103) {
                    var v26102 = !isFirstChar;
                    if(v26102) {
                      v26102 = LexIsUnicodeDigit(hexChar)
                    }
                    v25320 = v26102
                  }
                  v23730 = v25320
                }
                v20579 = v23730
              }
              v15756 = v20579
            }
            var v7544 = v15756;
            if(v7544) {
            }else {
              JAMScript.call(this.reportScannerError, this, ["Invalid identifier character"]);
              var v7542 = TypeScript$$16.staticTokens;
              var v15757 = TypeScript$$16.TokenID;
              var v7543 = v15757.Error;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                return v7542[v7543]
              }
            }
            hasEscape = true;
            isFirstChar = false;
            continue
          }
          JAMScript.call(this.reportScannerError, this, ["Invalid Unicode escape sequence"]);
          var v7546 = TypeScript$$16.staticTokens;
          var v15758 = TypeScript$$16.TokenID;
          var v7547 = v15758.Error;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            return v7546[v7547]
          }
        }
        break
      }
      var id$$16;
      var v7549 = this.src;
      var v7550 = this.startPos;
      var v7551 = this.pos;
      var text$$18 = JAMScript.call(v7549.substring, v7549, [v7550, v7551]);
      var v15759 = !hasEscape;
      if(v15759) {
        var v23732 = TypeScript$$16.LexKeywordTable;
        var v20581 = id$$16 = JAMScript.call(v23732.lookup, v23732, [text$$18]);
        v15759 = v20581 != null
      }
      var v7554 = v15759;
      if(v7554) {
        var v7552 = TypeScript$$16.staticTokens;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          return v7552[id$$16]
        }
      }else {
        var v7553 = TypeScript$$16.IdentifierToken;
        return JAMScript.new(v7553, [text$$18, hasEscape])
      }
      return
    }
    function v670() {
      var endCode = this.ch;
      JAMScript.call(this.nextChar, this, []);
      scanStringConstantLoop:for(;;) {
        var v7563 = this.ch;
        switch(v7563) {
          case TypeScript$$16.LexEOF:
            JAMScript.call(this.reportScannerError, this, ["Unterminated string constant"]);
            break scanStringConstantLoop;
          case TypeScript$$16.LexCodeLS:
          ;
          case TypeScript$$16.LexCodePS:
            this.seenUnicodeChar = true;
          case TypeScript$$16.LexCodeRET:
          ;
          case TypeScript$$16.LexCodeNWL:
            JAMScript.call(this.reportScannerError, this, ["Unterminated string constant"]);
            break scanStringConstantLoop;
          case TypeScript$$16.LexCodeAPO:
          ;
          case TypeScript$$16.LexCodeQUO:
            var v15760 = this.ch;
            var v7555 = v15760 == endCode;
            if(v7555) {
              JAMScript.call(this.nextChar, this, []);
              break scanStringConstantLoop
            }
            break;
          case TypeScript$$16.LexCodeBSL:
            JAMScript.call(this.nextChar, this, []);
            var v7562 = this.ch;
            switch(v7562) {
              case TypeScript$$16.LexCodeAPO:
              ;
              case TypeScript$$16.LexCodeQUO:
              ;
              case TypeScript$$16.LexCodeBSL:
                JAMScript.call(this.nextChar, this, []);
                continue scanStringConstantLoop;
              case TypeScript$$16.LexCodeLS:
              ;
              case TypeScript$$16.LexCodePS:
                this.seenUnicodeChar = true;
              case TypeScript$$16.LexCodeRET:
              ;
              case TypeScript$$16.LexCodeNWL:
                var v20582 = this.ch;
                var v20583 = TypeScript$$16.LexCodeRET;
                var v15761 = v20582 == v20583;
                if(v15761) {
                  var v25321 = this.pos;
                  var v23733 = v25321 + 1;
                  var v20584 = JAMScript.call(this.peekCharAt, this, [v23733]);
                  var v20585 = TypeScript$$16.LexCodeNWL;
                  v15761 = v20584 == v20585
                }
                var v7556 = v15761;
                if(v7556) {
                  JAMScript.call(this.nextChar, this, [])
                }
                JAMScript.call(this.nextChar, this, []);
                JAMScript.call(this.newLine, this, []);
                var v15762 = this.mode;
                var v15763 = LexMode.Line;
                var v7558 = v15762 == v15763;
                if(v7558) {
                  var v7557;
                  var v20586 = TypeScript$$16.LexCodeAPO;
                  var v15764 = endCode == v20586;
                  if(v15764) {
                    v7557 = LexState.InMultilineSingleQuoteString
                  }else {
                    v7557 = LexState.InMultilineDoubleQuoteString
                  }
                  this.lexState = v7557;
                  break scanStringConstantLoop
                }
                break;
              case TypeScript$$16.LexCode_x:
              ;
              case TypeScript$$16.LexCode_u:
                var v7559;
                var v20587 = this.ch;
                var v20588 = TypeScript$$16.LexCode_x;
                var v15765 = v20587 == v20588;
                if(v15765) {
                  v7559 = 2
                }else {
                  v7559 = 4
                }
                var expectedHexDigits = v7559;
                JAMScript.call(this.nextChar, this, []);
                var i$$54 = 0;
                var v7561 = i$$54 < expectedHexDigits;
                for(;v7561;) {
                  var v15766 = this.ch;
                  var v7560 = JAMScript.call(this.IsHexDigit, this, [v15766]);
                  if(v7560) {
                    JAMScript.call(this.nextChar, this, [])
                  }else {
                    JAMScript.call(this.reportScannerError, this, ["Invalid Unicode escape sequence"]);
                    break
                  }
                  i$$54 = i$$54 + 1;
                  v7561 = i$$54 < expectedHexDigits
                }
                continue scanStringConstantLoop
            }
        }
        var v15767 = this.ch;
        var v15768 = TypeScript$$16.LexCodeASCIIChars;
        var v7564 = v15767 >= v15768;
        if(v7564) {
          this.seenUnicodeChar = true
        }
        JAMScript.call(this.nextChar, this, [])
      }
      var v7565 = TypeScript$$16.StringLiteralToken;
      var v15769 = this.src;
      var v15770 = this.startPos;
      var v15771 = this.pos;
      var v7566 = JAMScript.call(v15769.substring, v15769, [v15770, v15771]);
      return JAMScript.new(v7565, [v7566])
    }
    function v669() {
      var v15772 = this.ch;
      var v7567 = LexIsUnicodeIdStart(v15772);
      var v15774 = !v7567;
      if(v15774) {
        var v15773 = this.ch;
        v7567 = LexIsUnicodeDigit(v15773)
      }
      var valid = v7567;
      var v7568 = this.seenUnicodeChar;
      var v15775 = !v7568;
      if(v15775) {
        v7568 = valid
      }
      this.seenUnicodeChar = v7568;
      return valid
    }
    function v668() {
      this.prevLine = this.line;
      var v27167 = JAMScript.call(this.innerScan, this, []);
      this.prevTok = v27167;
      var v7571 = this.saveScan;
      if(v7571) {
        var v7569 = this.saveScan;
        var v7570 = this.prevTok;
        JAMScript.call(v7569.addToken, v7569, [v7570, this])
      }
      return this.prevTok
    }
    function v667() {
      var v20589 = this.lexState;
      var v20590 = LexState.InMultilineComment;
      var v15776 = v20589 == v20590;
      if(v15776) {
        v15776 = this.scanComments
      }
      var v7583 = v15776;
      if(v7583) {
        var v27168 = JAMScript.call(this.peekChar, this, []);
        this.ch = v27168;
        var commentLine = this.line;
        JAMScript.call(this.finishMultilineComment, this, []);
        var v15777 = this.startPos;
        var v15778 = this.pos;
        var v7580 = v15777 < v15778;
        if(v7580) {
          var v7572 = this.src;
          var v7573 = this.startPos;
          var v7574 = this.pos;
          var commentText$$1 = JAMScript.call(v7572.substring, v7572, [v7573, v7574]);
          JAMScript.call(this.tokenStart, this, []);
          var v7575 = TypeScript$$16.CommentToken;
          var v15779 = TypeScript$$16.TokenID;
          var v7576 = v15779.Comment;
          var v7577 = this.startPos;
          return JAMScript.new(v7575, [v7576, commentText$$1, true, v7577, commentLine, true])
        }else {
          var v7578 = TypeScript$$16.staticTokens;
          var v15780 = TypeScript$$16.TokenID;
          var v7579 = v15780.EndOfFile;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            return v7578[v7579]
          }
        }
      }else {
        var v20591 = this.lexState;
        var v20592 = LexState.InMultilineSingleQuoteString;
        var v15781 = v20591 == v20592;
        if(v15781) {
          var v20593 = this.pos;
          var v20594 = this.len;
          v15781 = v20593 < v20594
        }
        var v7582 = v15781;
        if(v7582) {
          this.ch = TypeScript$$16.LexCodeAPO;
          this.lexState = LexState.Start;
          return JAMScript.call(this.scanStringConstant, this, [])
        }else {
          var v20595 = this.lexState;
          var v20596 = LexState.InMultilineDoubleQuoteString;
          var v15782 = v20595 == v20596;
          if(v15782) {
            var v20597 = this.pos;
            var v20598 = this.len;
            v15782 = v20597 < v20598
          }
          var v7581 = v15782;
          if(v7581) {
            this.ch = TypeScript$$16.LexCodeQUO;
            this.lexState = LexState.Start;
            return JAMScript.call(this.scanStringConstant, this, [])
          }
        }
      }
      this.prevLine = this.line;
      var prevTok$$1 = JAMScript.call(this.innerScan, this, []);
      var v15783 = prevTok$$1.tokenId;
      var v20599 = TypeScript$$16.TokenID;
      var v15784 = v20599.Whitespace;
      var v7584 = v15783 != v15784;
      if(v7584) {
        this.prevTok = prevTok$$1
      }
      return prevTok$$1
    }
    function v666() {
      var prevLine$$1 = this.prevLine;
      var line$$9 = this.line;
      var col = this.col;
      var pos$$2 = this.pos;
      var startPos$$1 = this.startPos;
      var startCol = this.startCol;
      var startLine$$41 = this.startLine;
      var ch = this.ch;
      var prevTok = this.prevTok;
      var lexState = this.lexState;
      var interveningWhitespace = this.interveningWhitespace;
      var interveningWhitespacePos = this.interveningWhitespacePos;
      var leftCurlyCount$$6 = this.leftCurlyCount;
      var rightCurlyCount$$6 = this.rightCurlyCount;
      var seenUnicodeChar = this.seenUnicodeChar;
      var seenUnicodeCharInComment = this.seenUnicodeCharInComment;
      var v7585 = this.commentStack;
      var commentStackLength = v7585.length;
      var lookAheadToken = JAMScript.call(this.scan, this, []);
      this.prevLine = prevLine$$1;
      this.line = line$$9;
      this.col = col;
      this.pos = pos$$2;
      this.startPos = startPos$$1;
      this.startCol = startCol;
      this.startLine = startLine$$41;
      this.ch = ch;
      this.prevTok = prevTok;
      this.lexState = lexState;
      this.interveningWhitespace = interveningWhitespace;
      this.interveningWhitespacePos = interveningWhitespacePos;
      this.leftCurlyCount = leftCurlyCount$$6;
      this.rightCurlyCount = rightCurlyCount$$6;
      this.seenUnicodeChar = seenUnicodeChar;
      this.seenUnicodeCharInComment = seenUnicodeCharInComment;
      var v7586 = this.commentStack;
      v7586.length = commentStackLength;
      return lookAheadToken
    }
    function v665() {
      var v15785 = this.pos;
      this.pos = v15785 + 1;
      var v15786 = this.col;
      this.col = v15786 + 1;
      var v27169 = JAMScript.call(this.peekChar, this, []);
      this.ch = v27169;
      return
    }
    function v664(amt) {
      var v15787 = this.pos;
      this.pos = v15787 + amt;
      var v15788 = this.col;
      this.col = v15788 + amt;
      var v27170 = JAMScript.call(this.peekChar, this, []);
      this.ch = v27170;
      return
    }
    function v663() {
      var v7587;
      var v15789 = this.interveningWhitespace;
      if(v15789) {
        v7587 = this.interveningWhitespacePos
      }else {
        v7587 = this.startPos
      }
      return v7587
    }
    function v662() {
      var v7588 = this.prevLine;
      var v7589 = this.startLine;
      return v7588 != v7589
    }
    function v661() {
      var v20600 = TypeScript$$16.noRegexTable;
      var v23734 = this.prevTok;
      var v20601 = v23734.tokenId;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v15790 = v20600[v20601]
      }
      var v7590 = v15790 != undefined;
      if(v7590) {
        return null
      }
      var svPos$$2 = this.pos;
      var svCol$$1 = this.col;
      var index$$49 = JAMScript.call(this.findClosingSLH, this, []);
      var v7598 = index$$49 > 0;
      if(v7598) {
        var v7591 = this.src;
        var pattern$$1 = JAMScript.call(v7591.substring, v7591, [svPos$$2, index$$49]);
        var flags$$2 = "";
        this.pos = index$$49 + 1;
        var v27171 = JAMScript.call(this.peekChar, this, []);
        this.ch = v27171;
        var flagsStart = this.pos;
        var v20602 = this.ch;
        var v20603 = TypeScript$$16.LexCode_i;
        var v15791 = v20602 == v20603;
        var v20605 = !v15791;
        if(v20605) {
          var v23735 = this.ch;
          var v23736 = TypeScript$$16.LexCode_g;
          var v20604 = v23735 == v23736;
          var v23739 = !v20604;
          if(v23739) {
            var v23737 = this.ch;
            var v23738 = TypeScript$$16.LexCode_m;
            v20604 = v23737 == v23738
          }
          v15791 = v20604
        }
        var v7592 = v15791;
        for(;v7592;) {
          JAMScript.call(this.nextChar, this, []);
          var v20606 = this.ch;
          var v20607 = TypeScript$$16.LexCode_i;
          var v15792 = v20606 == v20607;
          var v20609 = !v15792;
          if(v20609) {
            var v23740 = this.ch;
            var v23741 = TypeScript$$16.LexCode_g;
            var v20608 = v23740 == v23741;
            var v23744 = !v20608;
            if(v23744) {
              var v23742 = this.ch;
              var v23743 = TypeScript$$16.LexCode_m;
              v20608 = v23742 == v23743
            }
            v15792 = v20608
          }
          v7592 = v15792
        }
        var v20610 = this.pos;
        var v15793 = v20610 - flagsStart;
        var v7595 = v15793 > 3;
        if(v7595) {
          return null
        }else {
          var v7593 = this.src;
          var v7594 = this.pos;
          flags$$2 = JAMScript.call(v7593.substring, v7593, [flagsStart, v7594])
        }
        var regex$$2 = undefined;
        try {
          regex$$2 = new RegExp(pattern$$1, flags$$2)
        }catch(regexException) {
        }
        if(regex$$2) {
          var v15794 = this.pos;
          var v15795 = this.startPos;
          var v7596 = v15794 - v15795;
          this.col = svCol$$1 + v7596;
          var v7597 = TypeScript$$16.RegularExpressionLiteralToken;
          return JAMScript.new(v7597, [regex$$2])
        }
      }
      this.pos = svPos$$2;
      this.col = svCol$$1;
      return null
    }
    function v660() {
      var index$$48 = this.pos;
      var v7599 = this.src;
      var ch2$$1 = JAMScript.call(v7599.charCodeAt, v7599, [index$$48]);
      var prevCh = 0;
      var liveEsc = false;
      var v20611 = JAMScript.call(this.endsLine, this, [ch2$$1]);
      var v15796 = !v20611;
      if(v15796) {
        var v20612 = this.len;
        v15796 = index$$48 < v20612
      }
      var v7603 = v15796;
      for(;v7603;) {
        var v20613 = TypeScript$$16.LexCodeSLH;
        var v15797 = ch2$$1 == v20613;
        if(v15797) {
          v15797 = !liveEsc
        }
        var v7600 = v15797;
        if(v7600) {
          return index$$48
        }
        prevCh = ch2$$1;
        index$$48 = index$$48 + 1;
        if(liveEsc) {
          liveEsc = false
        }else {
          var v7601 = TypeScript$$16.LexCodeBSL;
          liveEsc = prevCh == v7601
        }
        var v7602 = this.src;
        ch2$$1 = JAMScript.call(v7602.charCodeAt, v7602, [index$$48]);
        var v20614 = JAMScript.call(this.endsLine, this, [ch2$$1]);
        var v15798 = !v20614;
        if(v15798) {
          var v20615 = this.len;
          v15798 = index$$48 < v20615
        }
        v7603 = v15798
      }
      return-1
    }
    function v659() {
      var v7604 = this.src;
      var v7605 = this.startPos;
      var v7606 = this.pos;
      return JAMScript.call(v7604.substring, v7604, [v7605, v7606])
    }
    function v658() {
      var v15799 = this.pos;
      var v15800 = this.len;
      var v7609 = v15799 < v15800;
      for(;v7609;) {
        var v15801 = this.ch;
        var v7607 = JAMScript.call(this.endsLine, this, [v15801]);
        if(v7607) {
          break
        }
        var v15802 = this.ch;
        var v15803 = TypeScript$$16.LexCodeASCIIChars;
        var v7608 = v15802 >= v15803;
        if(v7608) {
          this.seenUnicodeCharInComment = true
        }
        JAMScript.call(this.nextChar, this, []);
        var v15804 = this.pos;
        var v15805 = this.len;
        v7609 = v15804 < v15805
      }
      var v15806 = this.mode;
      var v15807 = LexMode.File;
      var v7610 = v15806 == v15807;
      if(v7610) {
        JAMScript.call(this.tokenStart, this, [])
      }
      return
    }
    function v657(c$$10) {
      var v15808 = TypeScript$$16.LexCodeNWL;
      var v7611 = c$$10 == v15808;
      var v15810 = !v7611;
      if(v15810) {
        var v20616 = TypeScript$$16.LexCodeRET;
        var v15809 = c$$10 == v20616;
        var v20618 = !v15809;
        if(v20618) {
          var v23745 = TypeScript$$16.LexCodeLS;
          var v20617 = c$$10 == v23745;
          var v23747 = !v20617;
          if(v23747) {
            var v23746 = TypeScript$$16.LexCodePS;
            v20617 = c$$10 == v23746
          }
          v15809 = v20617
        }
        v7611 = v15809
      }
      return v7611
    }
    function v656() {
      this.commentStack = [];
      return
    }
    function v655(line$$8) {
      var comments$$9 = null;
      var v23748 = this.commentStack;
      var v20619 = v23748.length;
      var v15811 = v20619 > 0;
      if(v15811) {
        var v25322 = this.commentStack;
        var v23749 = v25322[0];
        var v20620 = v23749.line;
        v15811 = v20620 == line$$8
      }
      var v7615 = v15811;
      for(;v7615;) {
        var v7614 = comments$$9 == null;
        if(v7614) {
          var v15812 = this.commentStack;
          var v7612 = v15812.shift();
          comments$$9 = [v7612]
        }else {
          var v20621 = this.commentStack;
          var v15813 = v20621.shift();
          var v7613 = [v15813];
          comments$$9 = comments$$9.concat(v7613)
        }
        var v23750 = this.commentStack;
        var v20622 = v23750.length;
        var v15814 = v20622 > 0;
        if(v15814) {
          var v25323 = this.commentStack;
          var v23751 = v25323[0];
          var v20623 = v23751.line;
          v15814 = v20623 == line$$8
        }
        v7615 = v15814
      }
      return comments$$9
    }
    function v654() {
      var stack$$2 = this.commentStack;
      this.commentStack = [];
      return stack$$2
    }
    function v653(comment$$4) {
      var v7616 = this.commentStack;
      JAMScript.call(v7616.push, v7616, [comment$$4]);
      return
    }
    function v652() {
      var ch2;
      this.lexState = LexState.InMultilineComment;
      var v15815 = this.pos;
      var v15816 = this.len;
      var v7624 = v15815 < v15816;
      for(;v7624;) {
        var v15817 = this.ch;
        var v15818 = TypeScript$$16.LexCodeMUL;
        var v7623 = v15817 == v15818;
        if(v7623) {
          var v15819 = this.pos;
          var v7617 = v15819 + 1;
          ch2 = JAMScript.call(this.peekCharAt, this, [v7617]);
          var v15820 = TypeScript$$16.LexCodeSLH;
          var v7619 = ch2 == v15820;
          if(v7619) {
            JAMScript.call(this.advanceChar, this, [2]);
            var v15821 = this.mode;
            var v15822 = LexMode.File;
            var v7618 = v15821 == v15822;
            if(v7618) {
              JAMScript.call(this.tokenStart, this, [])
            }
            this.lexState = LexState.Start;
            return true
          }
        }else {
          var v15823 = this.ch;
          var v15824 = TypeScript$$16.LexCodeNWL;
          var v7622 = v15823 == v15824;
          if(v7622) {
            JAMScript.call(this.newLine, this, []);
            var v15825 = this.mode;
            var v15826 = LexMode.Line;
            var v7620 = v15825 == v15826;
            if(v7620) {
              JAMScript.call(this.nextChar, this, []);
              return false
            }
          }else {
            var v15827 = this.ch;
            var v15828 = TypeScript$$16.LexCodeASCIIChars;
            var v7621 = v15827 >= v15828;
            if(v7621) {
              this.seenUnicodeCharInComment = true
            }
          }
        }
        JAMScript.call(this.nextChar, this, []);
        var v15829 = this.pos;
        var v15830 = this.len;
        v7624 = v15829 < v15830
      }
      return false
    }
    function v651() {
      this.col = 0;
      var v15831 = this.mode;
      var v15832 = LexMode.File;
      var v7627 = v15831 == v15832;
      if(v7627) {
        var v15833 = this.line;
        this.line = v15833 + 1;
        var v7625 = this.lineMap;
        var v7626 = this.line;
        var v15834 = this.pos;
        JAMScript.set(v7625, v7626, v15834 + 1)
      }
      return
    }
    function v650() {
      var v7628 = NumberScanState.InFraction;
      return JAMScript.call(this.scanDecimalNumber, this, [v7628])
    }
    function v649() {
      var v15835 = JAMScript.call(this.peekChar, this, []);
      var v15836 = TypeScript$$16.LexCode_0;
      var v7632 = v15835 == v15836;
      if(v7632) {
        var v20624 = this.pos;
        var v15837 = v20624 + 1;
        var v7630 = JAMScript.call(this.peekCharAt, this, [v15837]);
        switch(v7630) {
          case TypeScript$$16.LexCode_x:
          ;
          case TypeScript$$16.LexCode_X:
            JAMScript.call(this.advanceChar, this, [2]);
            return JAMScript.call(this.scanHexDigits, this, []);
          case TypeScript$$16.LexCode_8:
          ;
          case TypeScript$$16.LexCode_9:
          ;
          case TypeScript$$16.LexCodeDOT:
            var v7629 = NumberScanState.Start;
            return JAMScript.call(this.scanDecimalNumber, this, [v7629]);
          default:
            return JAMScript.call(this.scanOctalDigits, this, [])
        }
      }else {
        var v7631 = NumberScanState.Start;
        return JAMScript.call(this.scanDecimalNumber, this, [v7631])
      }
      return
    }
    function v648(state$$4) {
      var atLeastOneDigit$$2 = false;
      var svPos$$1 = this.pos;
      var svCol = this.col;
      for(;;) {
        var v15838 = this.ch;
        var v7658 = LexIsDigit(v15838);
        if(v7658) {
          atLeastOneDigit$$2 = true;
          var v20625 = this.ch;
          var v20626 = TypeScript$$16.LexCode_0;
          var v15839 = v20625 != v20626;
          if(v15839) {
            var v20627 = NumberScanState.InEmptyFraction;
            v15839 = state$$4 == v20627
          }
          var v7633 = v15839;
          if(v7633) {
            state$$4 = NumberScanState.InFraction
          }
          JAMScript.call(this.nextChar, this, [])
        }else {
          var v15840 = this.ch;
          var v15841 = TypeScript$$16.LexCodeDOT;
          var v7657 = v15840 == v15841;
          if(v7657) {
            var v15842 = NumberScanState.Start;
            var v7637 = state$$4 == v15842;
            if(v7637) {
              JAMScript.call(this.nextChar, this, []);
              state$$4 = NumberScanState.InEmptyFraction
            }else {
              if(atLeastOneDigit$$2) {
                var v7634 = TypeScript$$16.NumberLiteralToken;
                var v20628 = this.src;
                var v20629 = this.startPos;
                var v20630 = this.pos;
                var v15843 = JAMScript.call(v20628.substring, v20628, [v20629, v20630]);
                var v7635 = parseFloat(v15843);
                var v15844 = NumberScanState.InEmptyFraction;
                var v7636 = state$$4 == v15844;
                return JAMScript.new(v7634, [v7635, v7636])
              }else {
                this.pos = svPos$$1;
                this.col = svCol;
                return null
              }
            }
          }else {
            var v20631 = this.ch;
            var v20632 = TypeScript$$16.LexCode_e;
            var v15845 = v20631 == v20632;
            var v20635 = !v15845;
            if(v20635) {
              var v20633 = this.ch;
              var v20634 = TypeScript$$16.LexCode_E;
              v15845 = v20633 == v20634
            }
            var v7656 = v15845;
            if(v7656) {
              var v15846 = NumberScanState.Start;
              var v7641 = state$$4 == v15846;
              if(v7641) {
                if(atLeastOneDigit$$2) {
                  atLeastOneDigit$$2 = false;
                  JAMScript.call(this.nextChar, this, []);
                  state$$4 = NumberScanState.InExponent
                }else {
                  this.pos = svPos$$1;
                  this.col = svCol;
                  return null
                }
              }else {
                var v20636 = NumberScanState.InFraction;
                var v15847 = state$$4 == v20636;
                var v20638 = !v15847;
                if(v20638) {
                  var v20637 = NumberScanState.InEmptyFraction;
                  v15847 = state$$4 == v20637
                }
                var v7640 = v15847;
                if(v7640) {
                  JAMScript.call(this.nextChar, this, []);
                  state$$4 = NumberScanState.InExponent;
                  atLeastOneDigit$$2 = false
                }else {
                  if(atLeastOneDigit$$2) {
                    var v7638 = TypeScript$$16.NumberLiteralToken;
                    var v20639 = this.src;
                    var v20640 = this.startPos;
                    var v20641 = this.pos;
                    var v15848 = JAMScript.call(v20639.substring, v20639, [v20640, v20641]);
                    var v7639 = parseFloat(v15848);
                    return JAMScript.new(v7638, [v7639])
                  }else {
                    this.pos = svPos$$1;
                    this.col = svCol;
                    return null
                  }
                }
              }
            }else {
              var v20642 = this.ch;
              var v20643 = TypeScript$$16.LexCodePLS;
              var v15849 = v20642 == v20643;
              var v20646 = !v15849;
              if(v20646) {
                var v20644 = this.ch;
                var v20645 = TypeScript$$16.LexCodeMIN;
                v15849 = v20644 == v20645
              }
              var v7655 = v15849;
              if(v7655) {
                var v15850 = NumberScanState.InExponent;
                var v7650 = state$$4 == v15850;
                if(v7650) {
                  var v7642 = !atLeastOneDigit$$2;
                  if(v7642) {
                    JAMScript.call(this.nextChar, this, [])
                  }else {
                    this.pos = svPos$$1;
                    this.col = svCol;
                    return null
                  }
                }else {
                  var v20647 = NumberScanState.InEmptyFraction;
                  var v15851 = state$$4 == v20647;
                  var v20649 = !v15851;
                  if(v20649) {
                    var v20648 = NumberScanState.InFraction;
                    v15851 = state$$4 == v20648
                  }
                  var v7649 = v15851;
                  if(v7649) {
                    var v7643 = TypeScript$$16.NumberLiteralToken;
                    var v20650 = this.src;
                    var v20651 = this.startPos;
                    var v20652 = this.pos;
                    var v15852 = JAMScript.call(v20650.substring, v20650, [v20651, v20652]);
                    var v7644 = parseFloat(v15852);
                    var v15853 = NumberScanState.InEmptyFraction;
                    var v7645 = state$$4 == v15853;
                    return JAMScript.new(v7643, [v7644, v7645])
                  }else {
                    var v7648 = !atLeastOneDigit$$2;
                    if(v7648) {
                      this.pos = svPos$$1;
                      this.col = svCol;
                      return null
                    }else {
                      var v7646 = TypeScript$$16.NumberLiteralToken;
                      var v20653 = this.src;
                      var v20654 = this.startPos;
                      var v20655 = this.pos;
                      var v15854 = JAMScript.call(v20653.substring, v20653, [v20654, v20655]);
                      var v7647 = parseFloat(v15854);
                      return JAMScript.new(v7646, [v7647])
                    }
                  }
                }
              }else {
                var v7654 = !atLeastOneDigit$$2;
                if(v7654) {
                  this.pos = svPos$$1;
                  this.col = svCol;
                  return null
                }else {
                  var v7651 = TypeScript$$16.NumberLiteralToken;
                  var v20656 = this.src;
                  var v20657 = this.startPos;
                  var v20658 = this.pos;
                  var v15855 = JAMScript.call(v20656.substring, v20656, [v20657, v20658]);
                  var v7652 = parseFloat(v15855);
                  var v15856 = NumberScanState.InEmptyFraction;
                  var v7653 = state$$4 == v15856;
                  return JAMScript.new(v7651, [v7652, v7653])
                }
              }
            }
          }
        }
      }
      return
    }
    function v647() {
      var atLeastOneDigit$$1 = false;
      for(;;) {
        var v15857 = this.ch;
        var v7661 = JAMScript.call(this.IsOctalDigit, this, [v15857]);
        if(v7661) {
          JAMScript.call(this.nextChar, this, []);
          atLeastOneDigit$$1 = true
        }else {
          if(atLeastOneDigit$$1) {
            var v7659 = TypeScript$$16.NumberLiteralToken;
            var v20659 = this.src;
            var v20660 = this.startPos;
            var v20661 = this.pos;
            var v15858 = JAMScript.call(v20659.substring, v20659, [v20660, v20661]);
            var v7660 = parseInt(v15858);
            return JAMScript.new(v7659, [v7660])
          }else {
            return null
          }
        }
      }
      return
    }
    function v646() {
      var atLeastOneDigit = false;
      for(;;) {
        var v15859 = this.ch;
        var v7664 = JAMScript.call(this.IsHexDigit, this, [v15859]);
        if(v7664) {
          JAMScript.call(this.nextChar, this, []);
          atLeastOneDigit = true
        }else {
          if(atLeastOneDigit) {
            var v7662 = TypeScript$$16.NumberLiteralToken;
            var v20662 = this.src;
            var v20663 = this.startPos;
            var v20664 = this.pos;
            var v15860 = JAMScript.call(v20662.substring, v20662, [v20663, v20664]);
            var v7663 = parseInt(v15860);
            return JAMScript.new(v7662, [v7663])
          }else {
            return null
          }
        }
      }
      return
    }
    function v645(c$$9) {
      var v20665 = TypeScript$$16.LexCode_0;
      var v15861 = c$$9 >= v20665;
      if(v15861) {
        var v20666 = TypeScript$$16.LexCode_7;
        v15861 = c$$9 <= v20666
      }
      var v7665 = v15861;
      var v15863 = !v7665;
      if(v15863) {
        var v20667 = TypeScript$$16.LexCode_a;
        var v15862 = c$$9 >= v20667;
        if(v15862) {
          var v20668 = TypeScript$$16.LexCode_f;
          v15862 = c$$9 <= v20668
        }
        v7665 = v15862
      }
      return v7665
    }
    function v644(c$$8) {
      var v20669 = TypeScript$$16.LexCode_0;
      var v15864 = c$$8 >= v20669;
      if(v15864) {
        var v20670 = TypeScript$$16.LexCode_9;
        v15864 = c$$8 <= v20670
      }
      var v7666 = v15864;
      var v15866 = !v7666;
      if(v15866) {
        var v23752 = TypeScript$$16.LexCode_A;
        var v20671 = c$$8 >= v23752;
        if(v20671) {
          var v23753 = TypeScript$$16.LexCode_F;
          v20671 = c$$8 <= v23753
        }
        var v15865 = v20671;
        var v20673 = !v15865;
        if(v20673) {
          var v23754 = TypeScript$$16.LexCode_a;
          var v20672 = c$$8 >= v23754;
          if(v20672) {
            var v23755 = TypeScript$$16.LexCode_f;
            v20672 = c$$8 <= v23755
          }
          v15865 = v20672
        }
        v7666 = v15865
      }
      return v7666
    }
    function v643(index$$47) {
      var v15867 = this.len;
      var v7668 = index$$47 < v15867;
      if(v7668) {
        var v7667 = this.src;
        return JAMScript.call(v7667.charCodeAt, v7667, [index$$47])
      }else {
        return TypeScript$$16.LexEOF
      }
      return
    }
    function v642() {
      var v15868 = this.pos;
      var v15869 = this.len;
      var v7671 = v15868 < v15869;
      if(v7671) {
        var v7669 = this.src;
        var v7670 = this.pos;
        return JAMScript.call(v7669.charCodeAt, v7669, [v7670])
      }else {
        return TypeScript$$16.LexEOF
      }
      return
    }
    function v641() {
      this.startPos = this.pos;
      this.startLine = this.line;
      this.startCol = this.col;
      this.interveningWhitespace = false;
      return
    }
    function v640() {
      return this.lexState
    }
    function v639(value$$36) {
      this.scanComments = value$$36;
      return
    }
    function v638(newSrc$$2, textMode$$2) {
      var v7672 = JAMScript.new(StringSourceText, [newSrc$$2]);
      JAMScript.call(this.setSourceText, this, [v7672, textMode$$2]);
      return
    }
    function v637(savedTokens) {
      this.saveScan = savedTokens;
      return
    }
    function v636(reportError$$1) {
      this.reportError = reportError$$1;
      return
    }
    function v635(newSrc$$1, textMode$$1) {
      this.mode = textMode$$1;
      var v7673 = this.mode;
      var v7674 = LexMode.Line;
      this.scanComments = v7673 === v7674;
      this.pos = 0;
      this.interveningWhitespacePos = 0;
      this.startPos = 0;
      this.line = 1;
      this.col = 0;
      this.startCol = this.col;
      this.startLine = this.line;
      this.len = 0;
      var v7675 = JAMScript.call(newSrc$$1.getLength, newSrc$$1, []);
      var v27172 = JAMScript.call(newSrc$$1.getText, newSrc$$1, [0, v7675]);
      this.src = v27172;
      var v7676 = this.src;
      this.len = v7676.length;
      this.lineMap = [];
      var v7677 = this.lineMap;
      v7677[1] = 0;
      this.commentStack = [];
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      return
    }
    function v634() {
      return this.prevTok
    }
    function Scanner$$1() {
      this.prevLine = 1;
      this.line = 1;
      this.col = 0;
      this.pos = 0;
      this.startPos = 0;
      this.len = 0;
      this.lineMap = [];
      this.ch = TypeScript$$16.LexEOF;
      this.lexState = LexState.Start;
      this.mode = LexMode.File;
      this.scanComments = true;
      this.interveningWhitespace = false;
      this.interveningWhitespacePos = 0;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      var v27173 = new Array;
      this.commentStack = v27173;
      this.saveScan = null;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      var v7678 = TypeScript$$16.staticTokens;
      var v15870 = TypeScript$$16.TokenID;
      var v7679 = v15870.EndOfFile;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        this.prevTok = v7678[v7679]
      }
      this.startCol = this.col;
      this.startLine = this.line;
      var v7680 = this.lineMap;
      v7680[1] = 0;
      var v15871 = TypeScript$$16.LexKeywordTable;
      var v7681 = !v15871;
      if(v7681) {
        LexInitialize()
      }
      return
    }
    var v7682 = Scanner$$1.prototype;
    v7682.previousToken = v634;
    var v7683 = Scanner$$1.prototype;
    v7683.setSourceText = v635;
    var v7684 = Scanner$$1.prototype;
    v7684.setErrorHandler = v636;
    var v7685 = Scanner$$1.prototype;
    v7685.setSaveScan = v637;
    var v7686 = Scanner$$1.prototype;
    v7686.setText = v638;
    var v7687 = Scanner$$1.prototype;
    v7687.setScanComments = v639;
    var v7688 = Scanner$$1.prototype;
    v7688.getLexState = v640;
    var v7689 = Scanner$$1.prototype;
    v7689.tokenStart = v641;
    var v7690 = Scanner$$1.prototype;
    v7690.peekChar = v642;
    var v7691 = Scanner$$1.prototype;
    v7691.peekCharAt = v643;
    var v7692 = Scanner$$1.prototype;
    v7692.IsHexDigit = v644;
    var v7693 = Scanner$$1.prototype;
    v7693.IsOctalDigit = v645;
    var v7694 = Scanner$$1.prototype;
    v7694.scanHexDigits = v646;
    var v7695 = Scanner$$1.prototype;
    v7695.scanOctalDigits = v647;
    var v7696 = Scanner$$1.prototype;
    v7696.scanDecimalNumber = v648;
    var v7697 = Scanner$$1.prototype;
    v7697.scanNumber = v649;
    var v7698 = Scanner$$1.prototype;
    v7698.scanFraction = v650;
    var v7699 = Scanner$$1.prototype;
    v7699.newLine = v651;
    var v7700 = Scanner$$1.prototype;
    v7700.finishMultilineComment = v652;
    var v7701 = Scanner$$1.prototype;
    v7701.pushComment = v653;
    var v7702 = Scanner$$1.prototype;
    v7702.getComments = v654;
    var v7703 = Scanner$$1.prototype;
    v7703.getCommentsForLine = v655;
    var v7704 = Scanner$$1.prototype;
    v7704.resetComments = v656;
    var v7705 = Scanner$$1.prototype;
    v7705.endsLine = v657;
    var v7706 = Scanner$$1.prototype;
    v7706.finishSinglelineComment = v658;
    var v7707 = Scanner$$1.prototype;
    v7707.tokenText = v659;
    var v7708 = Scanner$$1.prototype;
    v7708.findClosingSLH = v660;
    var v7709 = Scanner$$1.prototype;
    v7709.speculateRegex = v661;
    var v7710 = Scanner$$1.prototype;
    v7710.lastTokenHadNewline = v662;
    var v7711 = Scanner$$1.prototype;
    v7711.lastTokenLimChar = v663;
    var v7712 = Scanner$$1.prototype;
    v7712.advanceChar = v664;
    var v7713 = Scanner$$1.prototype;
    v7713.nextChar = v665;
    var v7714 = Scanner$$1.prototype;
    v7714.getLookAheadToken = v666;
    var v7715 = Scanner$$1.prototype;
    v7715.scanInLine = v667;
    var v7716 = Scanner$$1.prototype;
    v7716.scan = v668;
    var v7717 = Scanner$$1.prototype;
    v7717.isValidUnicodeIdentifierChar = v669;
    var v7718 = Scanner$$1.prototype;
    v7718.scanStringConstant = v670;
    var v7719 = Scanner$$1.prototype;
    v7719.scanIdentifier = v671;
    var v7720 = Scanner$$1.prototype;
    v7720.innerScan = v672;
    var v7721 = Scanner$$1.prototype;
    v7721.reportScannerError = v673;
    return Scanner$$1
  }
  function v633() {
    function v632() {
      throw new Error("Invalid operation.");
    }
    function v631(reportError) {
      return
    }
    function v630(newSrc, textMode) {
      return
    }
    function v629() {
      this.commentStack = [];
      return
    }
    function v628(line$$7) {
      var comments$$8 = null;
      var v23756 = this.commentStack;
      var v20674 = v23756.length;
      var v15872 = v20674 > 0;
      if(v15872) {
        var v25324 = this.commentStack;
        var v23757 = v25324[0];
        var v20675 = v23757.line;
        v15872 = v20675 == line$$7
      }
      var v7725 = v15872;
      for(;v7725;) {
        var v7724 = comments$$8 == null;
        if(v7724) {
          var v15873 = this.commentStack;
          var v7722 = v15873.shift();
          comments$$8 = [v7722]
        }else {
          var v20676 = this.commentStack;
          var v15874 = v20676.shift();
          var v7723 = [v15874];
          comments$$8 = comments$$8.concat(v7723)
        }
        var v23758 = this.commentStack;
        var v20677 = v23758.length;
        var v15875 = v20677 > 0;
        if(v15875) {
          var v25325 = this.commentStack;
          var v23759 = v25325[0];
          var v20678 = v23759.line;
          v15875 = v20678 == line$$7
        }
        v7725 = v15875
      }
      return comments$$8
    }
    function v627() {
      var stack$$1 = this.commentStack;
      this.commentStack = [];
      return stack$$1
    }
    function v626(comment$$3) {
      var v7726 = this.commentStack;
      JAMScript.call(v7726.push, v7726, [comment$$3]);
      return
    }
    function v625() {
      var v7727 = this.prevLine;
      var v7728 = this.startLine;
      return v7727 != v7728
    }
    function v624() {
      var v15876 = this.prevSavedToken;
      var v7730 = v15876 !== null;
      if(v7730) {
        var v7729 = this.prevSavedToken;
        return v7729.limChar
      }else {
        return 0
      }
      return
    }
    function v623(offset$$12) {
      var v7731 = this.lineMap;
      var v27174 = getLineNumberFromPosition(v7731, offset$$12);
      this.line = v27174;
      this.currentTokenIndex = 0;
      var v15877 = this.lineMap;
      var v15878 = this.line;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v7732 = v15877[v15878]
      }
      var tmpCol = offset$$12 - v7732;
      var v23760 = this.lexStateByLine;
      var v23761 = this.line;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v20679 = v23760[v23761]
      }
      var v20680 = LexState.InMultilineComment;
      var v15879 = v20679 == v20680;
      if(v15879) {
        var v20681 = this.line;
        v15879 = v20681 > 0
      }
      var v7733 = v15879;
      for(;v7733;) {
        var v15880 = this.line;
        this.line = v15880 - 1;
        tmpCol = 0;
        var v23762 = this.lexStateByLine;
        var v23763 = this.line;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v20682 = v23762[v23763]
        }
        var v20683 = LexState.InMultilineComment;
        var v15881 = v20682 == v20683;
        if(v15881) {
          var v20684 = this.line;
          v15881 = v20684 > 0
        }
        v7733 = v15881
      }
      var v15882 = this.lineMap;
      var v7734 = v15882.length;
      var lenMin1 = v7734 - 1;
      var v7735 = this.tokensByLine;
      var v7736 = this.line;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        this.currentTokens = v7735[v7736]
      }
      var v23764 = this.currentTokens;
      var v20685 = v23764.length;
      var v15883 = v20685 == 0;
      if(v15883) {
        var v20686 = this.line;
        v15883 = v20686 < lenMin1
      }
      var v7739 = v15883;
      for(;v7739;) {
        var v15884 = this.line;
        this.line = v15884 + 1;
        var v7737 = this.tokensByLine;
        var v7738 = this.line;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          this.currentTokens = v7737[v7738]
        }
        tmpCol = 0;
        var v23765 = this.currentTokens;
        var v20687 = v23765.length;
        var v15885 = v20687 == 0;
        if(v15885) {
          var v20688 = this.line;
          v15885 = v20688 < lenMin1
        }
        v7739 = v15885
      }
      var v15886 = this.line;
      var v7745 = v15886 <= lenMin1;
      if(v7745) {
        var v20689 = this.currentTokenIndex;
        var v23766 = this.currentTokens;
        var v20690 = v23766.length;
        var v15887 = v20689 < v20690;
        if(v15887) {
          var v25326 = this.currentTokens;
          var v25327 = this.currentTokenIndex;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v23767 = v25326[v25327]
          }
          var v20691 = v23767.limChar;
          v15887 = tmpCol > v20691
        }
        var v7740 = v15887;
        for(;v7740;) {
          var v15888 = this.currentTokenIndex;
          this.currentTokenIndex = v15888 + 1;
          var v20692 = this.currentTokenIndex;
          var v23768 = this.currentTokens;
          var v20693 = v23768.length;
          var v15889 = v20692 < v20693;
          if(v15889) {
            var v25328 = this.currentTokens;
            var v25329 = this.currentTokenIndex;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v23769 = v25328[v25329]
            }
            var v20694 = v23769.limChar;
            v15889 = tmpCol > v20694
          }
          v7740 = v15889
        }
        var v15890 = this.currentTokenIndex;
        var v20695 = this.currentTokens;
        var v15891 = v20695.length;
        var v7744 = v15890 < v15891;
        if(v7744) {
          var v15892 = this.currentTokens;
          var v15893 = this.currentTokenIndex;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v7741 = v15892[v15893]
          }
          this.col = v7741.minChar;
          var v7742 = this.col;
          var v15894 = this.lineMap;
          var v15895 = this.line;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v7743 = v15894[v15895]
          }
          return v7742 + v7743
        }
      }
      return-1
    }
    function v622() {
      this.startLine = this.line;
      this.startPos = this.col;
      var v15896 = this.currentTokenIndex;
      var v20696 = this.currentTokens;
      var v15897 = v20696.length;
      var v7751 = v15896 == v15897;
      if(v7751) {
        var v15898 = this.line;
        var v20697 = this.lineMap;
        var v15899 = v20697.length;
        var v7750 = v15898 < v15899;
        if(v7750) {
          var v15900 = this.line;
          this.line = v15900 + 1;
          this.col = 0;
          this.currentTokenIndex = 0;
          var v7746 = this.tokensByLine;
          var v7747 = this.line;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            this.currentTokens = v7746[v7747]
          }
        }else {
          var v7748 = TypeScript$$16.staticTokens;
          var v15901 = TypeScript$$16.TokenID;
          var v7749 = v15901.EndOfFile;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            return v7748[v7749]
          }
        }
      }
      var v15902 = this.currentTokenIndex;
      var v20698 = this.currentTokens;
      var v15903 = v20698.length;
      var v7760 = v15902 < v15903;
      if(v7760) {
        var v7752 = this.curSavedToken;
        this.prevToken = v7752.tok;
        this.prevSavedToken = this.curSavedToken;
        var v7753 = this.currentTokens;
        var v7754 = this.currentTokenIndex;
        var v20699 = this.currentTokenIndex;
        this.currentTokenIndex = v20699 + 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          this.curSavedToken = v7753[v7754]
        }
        var v7755 = this.curSavedToken;
        var curToken = v7755.tok;
        var v7756 = this.curSavedToken;
        this.pos = v7756.limChar;
        var v15904 = this.col;
        var v23770 = this.curSavedToken;
        var v20700 = v23770.limChar;
        var v23771 = this.curSavedToken;
        var v20701 = v23771.minChar;
        var v15905 = v20700 - v20701;
        this.col = v15904 + v15905;
        var v7757 = this.curSavedToken;
        this.startPos = v7757.minChar;
        this.prevLine = this.line;
        return curToken
      }else {
        var v7758 = TypeScript$$16.staticTokens;
        var v15906 = TypeScript$$16.TokenID;
        var v7759 = v15906.EndOfFile;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          return v7758[v7759]
        }
      }
      return
    }
    function v621(tok$$3, scanner) {
      var v7761 = this.tokens;
      var v7762 = this.currentToken;
      var v20702 = this.currentToken;
      this.currentToken = v20702 + 1;
      var v15907 = TypeScript$$16.SavedToken;
      var v15908 = scanner.startPos;
      var v15909 = scanner.pos;
      var v27175 = JAMScript.new(v15907, [tok$$3, v15908, v15909]);
      JAMScript.set(v7761, v7762, v27175);
      return
    }
    function v620() {
      this.currentToken = 0;
      return
    }
    function v619() {
      return this.prevToken
    }
    function SavedTokens$$1() {
      this.prevToken = null;
      this.curSavedToken = null;
      this.prevSavedToken = null;
      this.prevToken = null;
      this.currentToken = 0;
      var v27176 = new Array;
      this.tokens = v27176;
      this.seenUnicodeChar = false;
      this.seenUnicodeCharInComment = false;
      this.prevLine = 1;
      this.line = 1;
      this.col = 0;
      this.lexState = LexState.Start;
      var v27177 = new Array;
      this.commentStack = v27177;
      this.lineMap = [];
      return
    }
    var v7763 = SavedTokens$$1.prototype;
    v7763.previousToken = v619;
    var v7764 = SavedTokens$$1.prototype;
    v7764.close = v620;
    var v7765 = SavedTokens$$1.prototype;
    v7765.addToken = v621;
    var v7766 = SavedTokens$$1.prototype;
    v7766.scan = v622;
    var v7767 = SavedTokens$$1.prototype;
    v7767.syncToTok = v623;
    var v7768 = SavedTokens$$1.prototype;
    v7768.lastTokenLimChar = v624;
    var v7769 = SavedTokens$$1.prototype;
    v7769.lastTokenHadNewline = v625;
    var v7770 = SavedTokens$$1.prototype;
    v7770.pushComment = v626;
    var v7771 = SavedTokens$$1.prototype;
    v7771.getComments = v627;
    var v7772 = SavedTokens$$1.prototype;
    v7772.getCommentsForLine = v628;
    var v7773 = SavedTokens$$1.prototype;
    v7773.resetComments = v629;
    var v7774 = SavedTokens$$1.prototype;
    v7774.setSourceText = v630;
    var v7775 = SavedTokens$$1.prototype;
    v7775.setErrorHandler = v631;
    var v7776 = SavedTokens$$1.prototype;
    v7776.getLookAheadToken = v632;
    return SavedTokens$$1
  }
  function v618() {
    function v617(start$$11, end$$5) {
      var v7777 = JAMScript.call(this.fetchSegment, this, [start$$11, end$$5]);
      return JAMScript.call(v7777.substring, v7777, [start$$11, end$$5])
    }
    function v616(index$$46) {
      var v15910 = index$$46 + 1;
      var v7778 = JAMScript.call(this.fetchSegment, this, [index$$46, v15910]);
      return JAMScript.call(v7778.charCodeAt, v7778, [index$$46])
    }
    function v615(start$$10, end$$4) {
      var v25330 = this.agg;
      var v23772 = v25330.seg1;
      var v20703 = v23772.segmentStart;
      var v15911 = v20703 <= start$$10;
      if(v15911) {
        var v25331 = this.agg;
        var v23773 = v25331.seg1;
        var v20704 = v23773.segmentEnd;
        v15911 = end$$4 <= v20704
      }
      var v7780 = v15911;
      if(v7780) {
        var v7779 = this.agg;
        return v7779.seg1
      }
      var v25332 = this.agg;
      var v23774 = v25332.seg2;
      var v20705 = v23774.segmentStart;
      var v15912 = v20705 <= start$$10;
      if(v15912) {
        var v25333 = this.agg;
        var v23775 = v25333.seg1;
        var v20706 = v23775.segmentEnd;
        v15912 = end$$4 <= v20706
      }
      var v7781 = v15912;
      if(v7781) {
        return this.agg
      }
      var v7782 = this.agg;
      var prev = v7782.seg1;
      var s$$16 = prev.segmentEnd;
      var v7783 = s$$16 + 512;
      var e$$9 = JAMScript.call(TypeScript$$16.max, TypeScript$$16, [v7783, end$$4]);
      var v7784 = this.len;
      e$$9 = JAMScript.call(TypeScript$$16.min, TypeScript$$16, [e$$9, v7784]);
      var v7785 = this.sourceText;
      var src$$1 = JAMScript.call(v7785.getText, v7785, [s$$16, e$$9]);
      var newSeg = JAMScript.new(SourceTextSegment, [s$$16, e$$9, src$$1]);
      var v7786 = this.agg;
      v7786.seg2 = prev;
      var v7787 = this.agg;
      v7787.seg1 = newSeg;
      return this.agg
    }
    function v614(a$$5, b$$4) {
      var v7788;
      var v15913 = a$$5 <= b$$4;
      if(v15913) {
        v7788 = a$$5
      }else {
        v7788 = b$$4
      }
      return v7788
    }
    function v613(a$$4, b$$3) {
      var v7789;
      var v15914 = a$$4 >= b$$3;
      if(v15914) {
        v7789 = a$$4
      }else {
        v7789 = b$$3
      }
      return v7789
    }
    function ScannerTextStream$$1(sourceText$$3) {
      this.sourceText = sourceText$$3;
      var v7790 = ScannerTextStream$$1.emptySegment;
      var v7791 = ScannerTextStream$$1.emptySegment;
      var v27178 = JAMScript.new(AggerateSourceTextSegment, [v7790, v7791]);
      this.agg = v27178;
      var v7792 = this.sourceText;
      var v27179 = JAMScript.call(v7792.getLength, v7792, []);
      this.len = v27179;
      return
    }
    var v27180 = JAMScript.new(SourceTextSegment, [0, 0, ""]);
    ScannerTextStream$$1.emptySegment = v27180;
    var v7793 = ScannerTextStream$$1.prototype;
    v7793.max = v613;
    var v7794 = ScannerTextStream$$1.prototype;
    v7794.min = v614;
    var v7795 = ScannerTextStream$$1.prototype;
    v7795.fetchSegment = v615;
    var v7796 = ScannerTextStream$$1.prototype;
    v7796.charCodeAt = v616;
    var v7797 = ScannerTextStream$$1.prototype;
    v7797.substring = v617;
    return ScannerTextStream$$1
  }
  function v612() {
    function v611(start$$9, end$$3) {
      var v23776 = this.seg1;
      var v20707 = v23776.segmentStart;
      var v15915 = v20707 <= start$$9;
      if(v15915) {
        var v23777 = this.seg1;
        var v20708 = v23777.segmentEnd;
        v15915 = end$$3 <= v20708
      }
      var v7801 = v15915;
      if(v7801) {
        var v15916 = this.seg1;
        var v7798 = v15916.segment;
        var v20709 = this.seg1;
        var v15917 = v20709.segmentStart;
        var v7799 = start$$9 - v15917;
        var v20710 = this.seg1;
        var v15918 = v20710.segmentStart;
        var v7800 = end$$3 - v15918;
        return JAMScript.call(v7798.substring, v7798, [v7799, v7800])
      }
      var v20711 = this.seg2;
      var v15919 = v20711.segment;
      var v23778 = this.seg2;
      var v20712 = v23778.segmentStart;
      var v15920 = start$$9 - v20712;
      var v7802 = JAMScript.call(v15919.substring, v15919, [v15920]);
      var v20713 = this.seg1;
      var v15921 = v20713.segment;
      var v23779 = this.seg1;
      var v20714 = v23779.segmentStart;
      var v15922 = end$$3 - v20714;
      var v7803 = JAMScript.call(v15921.substring, v15921, [0, v15922]);
      return v7802 + v7803
    }
    function v610(index$$45) {
      var v23780 = this.seg1;
      var v20715 = v23780.segmentStart;
      var v15923 = v20715 <= index$$45;
      if(v15923) {
        var v23781 = this.seg1;
        var v20716 = v23781.segmentEnd;
        v15923 = index$$45 < v20716
      }
      var v7806 = v15923;
      if(v7806) {
        var v15924 = this.seg1;
        var v7804 = v15924.segment;
        var v20717 = this.seg1;
        var v15925 = v20717.segmentStart;
        var v7805 = index$$45 - v15925;
        return JAMScript.call(v7804.charCodeAt, v7804, [v7805])
      }
      var v15926 = this.seg2;
      var v7807 = v15926.segment;
      var v20718 = this.seg2;
      var v15927 = v20718.segmentStart;
      var v7808 = index$$45 - v15927;
      return JAMScript.call(v7807.charCodeAt, v7807, [v7808])
    }
    function AggerateSourceTextSegment$$1(seg1, seg2) {
      this.seg1 = seg1;
      this.seg2 = seg2;
      return
    }
    var v7809 = AggerateSourceTextSegment$$1.prototype;
    v7809.charCodeAt = v610;
    var v7810 = AggerateSourceTextSegment$$1.prototype;
    v7810.substring = v611;
    return AggerateSourceTextSegment$$1
  }
  function v609() {
    function v608(start$$8, end$$2) {
      var v7811 = this.segment;
      var v15928 = this.segmentStart;
      var v7812 = start$$8 - v15928;
      var v15929 = this.segmentStart;
      var v7813 = end$$2 - v15929;
      return JAMScript.call(v7811.substring, v7811, [v7812, v7813])
    }
    function v607(index$$44) {
      var v7814 = this.segment;
      var v15930 = this.segmentStart;
      var v7815 = index$$44 - v15930;
      return JAMScript.call(v7814.charCodeAt, v7814, [v7815])
    }
    function SourceTextSegment$$1(segmentStart, segmentEnd, segment) {
      this.segmentStart = segmentStart;
      this.segmentEnd = segmentEnd;
      this.segment = segment;
      return
    }
    var v7816 = SourceTextSegment$$1.prototype;
    v7816.charCodeAt = v607;
    var v7817 = SourceTextSegment$$1.prototype;
    v7817.substring = v608;
    return SourceTextSegment$$1
  }
  function v606() {
    function v605() {
      var v7818 = this.text;
      return v7818.length
    }
    function v604(start$$7, end$$1) {
      var v7819 = this.text;
      return JAMScript.call(v7819.substring, v7819, [start$$7, end$$1])
    }
    function StringSourceText$$1(text$$17) {
      this.text = text$$17;
      return
    }
    var v7820 = StringSourceText$$1.prototype;
    v7820.getText = v604;
    var v7821 = StringSourceText$$1.prototype;
    v7821.getLength = v605;
    return StringSourceText$$1
  }
  function v603(CommentStyle$$1) {
    CommentStyle$$1._map = [];
    var v7822 = CommentStyle$$1._map;
    v7822[0] = "Line";
    CommentStyle$$1.Line = 0;
    var v7823 = CommentStyle$$1._map;
    v7823[1] = "Block";
    CommentStyle$$1.Block = 1;
    return
  }
  function v602(LexMode$$1) {
    LexMode$$1._map = [];
    var v7824 = LexMode$$1._map;
    v7824[0] = "Line";
    LexMode$$1.Line = 0;
    var v7825 = LexMode$$1._map;
    v7825[1] = "File";
    LexMode$$1.File = 1;
    return
  }
  function v601(LexState$$1) {
    LexState$$1._map = [];
    var v7826 = LexState$$1._map;
    v7826[0] = "Start";
    LexState$$1.Start = 0;
    var v7827 = LexState$$1._map;
    v7827[1] = "InMultilineComment";
    LexState$$1.InMultilineComment = 1;
    var v7828 = LexState$$1._map;
    v7828[2] = "InMultilineSingleQuoteString";
    LexState$$1.InMultilineSingleQuoteString = 2;
    var v7829 = LexState$$1._map;
    v7829[3] = "InMultilineDoubleQuoteString";
    LexState$$1.InMultilineDoubleQuoteString = 3;
    return
  }
  function v600(NumberScanState$$1) {
    NumberScanState$$1._map = [];
    var v7830 = NumberScanState$$1._map;
    v7830[0] = "Start";
    NumberScanState$$1.Start = 0;
    var v7831 = NumberScanState$$1._map;
    v7831[1] = "InFraction";
    NumberScanState$$1.InFraction = 1;
    var v7832 = NumberScanState$$1._map;
    v7832[2] = "InEmptyFraction";
    NumberScanState$$1.InEmptyFraction = 2;
    var v7833 = NumberScanState$$1._map;
    v7833[3] = "InExponent";
    NumberScanState$$1.InExponent = 3;
    return
  }
  function LexLookUpUnicodeMap(code$$2, map$$1) {
    var lo = 0;
    var hi = map$$1.length;
    var mid;
    var v15931 = lo + 1;
    var v7837 = v15931 < hi;
    for(;v7837;) {
      var v15932 = hi - lo;
      var v7834 = v15932 / 2;
      mid = lo + v7834;
      var v15933 = mid % 2;
      mid = mid - v15933;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v20719 = map$$1[mid]
      }
      var v15934 = v20719 <= code$$2;
      if(v15934) {
        var v23782 = mid + 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v20720 = map$$1[v23782]
        }
        v15934 = code$$2 <= v20720
      }
      var v7835 = v15934;
      if(v7835) {
        return true
      }
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v15935 = map$$1[mid]
      }
      var v7836 = code$$2 < v15935;
      if(v7836) {
        hi = mid
      }else {
        lo = mid + 2
      }
      var v15936 = lo + 1;
      v7837 = v15936 < hi
    }
    return false
  }
  function LexIsUnicodeDigit(code$$3) {
    var v15937 = TypeScript$$16.codeGenTarget;
    var v20721 = TypeScript$$16.CodeGenTarget;
    var v15938 = v20721.ES3;
    var v7838 = v15937 == v15938;
    if(v7838) {
      return LexLookUpUnicodeMap(code$$3, unicodeES3IdCont)
    }else {
      return LexLookUpUnicodeMap(code$$3, unicodeES5IdCont)
    }
    return
  }
  function LexIsUnicodeIdStart(code$$4) {
    var v15939 = TypeScript$$16.codeGenTarget;
    var v20722 = TypeScript$$16.CodeGenTarget;
    var v15940 = v20722.ES3;
    var v7839 = v15939 == v15940;
    if(v7839) {
      return LexLookUpUnicodeMap(code$$4, unicodeES3IdStart)
    }else {
      return LexLookUpUnicodeMap(code$$4, unicodeES5IdStart)
    }
    return
  }
  function LexInitialize() {
    JAMScript.call(TypeScript$$16.initializeStaticTokens, TypeScript$$16, []);
    var v7840 = TypeScript$$16.LexCodeLPR;
    var v15941 = TypeScript$$16.staticTokens;
    var v20723 = TypeScript$$16.TokenID;
    var v15942 = v20723.OpenParen;
    JAMScript.set(autoToken, v7840, v15941[v15942], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7841 = TypeScript$$16.LexCodeRPR;
    var v15943 = TypeScript$$16.staticTokens;
    var v20724 = TypeScript$$16.TokenID;
    var v15944 = v20724.CloseParen;
    JAMScript.set(autoToken, v7841, v15943[v15944], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7842 = TypeScript$$16.LexCodeCMA;
    var v15945 = TypeScript$$16.staticTokens;
    var v20725 = TypeScript$$16.TokenID;
    var v15946 = v20725.Comma;
    JAMScript.set(autoToken, v7842, v15945[v15946], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7843 = TypeScript$$16.LexCodeSMC;
    var v15947 = TypeScript$$16.staticTokens;
    var v20726 = TypeScript$$16.TokenID;
    var v15948 = v20726.Semicolon;
    JAMScript.set(autoToken, v7843, v15947[v15948], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7844 = TypeScript$$16.LexCodeLBR;
    var v15949 = TypeScript$$16.staticTokens;
    var v20727 = TypeScript$$16.TokenID;
    var v15950 = v20727.OpenBracket;
    JAMScript.set(autoToken, v7844, v15949[v15950], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7845 = TypeScript$$16.LexCodeRBR;
    var v15951 = TypeScript$$16.staticTokens;
    var v20728 = TypeScript$$16.TokenID;
    var v15952 = v20728.CloseBracket;
    JAMScript.set(autoToken, v7845, v15951[v15952], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7846 = TypeScript$$16.LexCodeTIL;
    var v15953 = TypeScript$$16.staticTokens;
    var v20729 = TypeScript$$16.TokenID;
    var v15954 = v20729.Tilde;
    JAMScript.set(autoToken, v7846, v15953[v15954], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7847 = TypeScript$$16.LexCodeQUE;
    var v15955 = TypeScript$$16.staticTokens;
    var v20730 = TypeScript$$16.TokenID;
    var v15956 = v20730.Question;
    JAMScript.set(autoToken, v7847, v15955[v15956], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7848 = TypeScript$$16.LexCodeLC;
    var v15957 = TypeScript$$16.staticTokens;
    var v20731 = TypeScript$$16.TokenID;
    var v15958 = v20731.OpenBrace;
    JAMScript.set(autoToken, v7848, v15957[v15958], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7849 = TypeScript$$16.LexCodeRC;
    var v15959 = TypeScript$$16.staticTokens;
    var v20732 = TypeScript$$16.TokenID;
    var v15960 = v20732.CloseBrace;
    JAMScript.set(autoToken, v7849, v15959[v15960], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7850 = TypeScript$$16.LexCodeCOL;
    var v15961 = TypeScript$$16.staticTokens;
    var v20733 = TypeScript$$16.TokenID;
    var v15962 = v20733.Colon;
    JAMScript.set(autoToken, v7850, v15961[v15962], JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074);
    var v7851 = TypeScript$$16;
    var v15963 = TypeScript$$16.StringHashTable;
    var v27181 = JAMScript.new(v15963, []);
    v7851.LexKeywordTable = v27181;
    var i$$53;
    var v15964 = TypeScript$$16.TokenID;
    var v7855 = v15964._map;
    for(i$$53 in v7855) {
      var v20734 = TypeScript$$16.TokenID;
      var v15965 = v20734.LimKeyword;
      var v7854 = i$$53 <= v15965;
      if(v7854) {
        var v7852 = TypeScript$$16.LexKeywordTable;
        var v23783 = TypeScript$$16.TokenID;
        var v20735 = v23783._map;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v15966 = v20735[i$$53]
        }
        var v7853 = v15966.toLowerCase();
        JAMScript.call(v7852.add, v7852, [v7853, i$$53])
      }
    }
    var j$$6 = 0;
    var v15967 = TypeScript$$16.LexCodeASCIIChars;
    var v7857 = j$$6 < v15967;
    for(;v7857;) {
      var v7856 = LexIsIdentifierStartChar(j$$6);
      if(v7856) {
        lexIdStartTable[j$$6] = true
      }else {
        lexIdStartTable[j$$6] = false
      }
      j$$6 = j$$6 + 1;
      var v15968 = TypeScript$$16.LexCodeASCIIChars;
      v7857 = j$$6 < v15968
    }
    return
  }
  function LexAdjustIndent(code$$5, indentAmt) {
    var v20736 = TypeScript$$16.LexCodeLBR;
    var v15969 = code$$5 == v20736;
    var v20738 = !v15969;
    if(v20738) {
      var v23784 = TypeScript$$16.LexCodeLC;
      var v20737 = code$$5 == v23784;
      var v23786 = !v20737;
      if(v23786) {
        var v23785 = TypeScript$$16.LexCodeLPR;
        v20737 = code$$5 == v23785
      }
      v15969 = v20737
    }
    var v7859 = v15969;
    if(v7859) {
      return indentAmt + 1
    }else {
      var v20739 = TypeScript$$16.LexCodeRBR;
      var v15970 = code$$5 == v20739;
      var v20741 = !v15970;
      if(v20741) {
        var v23787 = TypeScript$$16.LexCodeRC;
        var v20740 = code$$5 == v23787;
        var v23789 = !v20740;
        if(v23789) {
          var v23788 = TypeScript$$16.LexCodeRPR;
          v20740 = code$$5 == v23788
        }
        v15970 = v20740
      }
      var v7858 = v15970;
      if(v7858) {
        return indentAmt - 1
      }else {
        return indentAmt
      }
    }
    return
  }
  function LexIsIdentifierStartChar(code$$6) {
    var v15971 = code$$6 >= 97;
    if(v15971) {
      v15971 = code$$6 <= 122
    }
    var v7860 = v15971;
    var v15973 = !v7860;
    if(v15973) {
      var v20742 = code$$6 >= 65;
      if(v20742) {
        v20742 = code$$6 <= 90
      }
      var v15972 = v20742;
      var v20744 = !v15972;
      if(v20744) {
        var v23790 = TypeScript$$16.LexCodeDollar;
        var v20743 = code$$6 == v23790;
        var v23792 = !v20743;
        if(v23792) {
          var v23791 = TypeScript$$16.LexCodeUnderscore;
          v20743 = code$$6 == v23791
        }
        v15972 = v20743
      }
      v7860 = v15972
    }
    return v7860
  }
  function LexIsDigit(code$$7) {
    var v7861 = code$$7 >= 48;
    if(v7861) {
      v7861 = code$$7 <= 57
    }
    return v7861
  }
  function LexIsIdentifierChar(code$$8) {
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      var v7862 = lexIdStartTable[code$$8]
    }
    var v15974 = !v7862;
    if(v15974) {
      v7862 = LexIsDigit(code$$8)
    }
    return v7862
  }
  function LexMatchingOpen(code$$9) {
    var v15975 = TypeScript$$16.LexCodeRBR;
    var v7865 = code$$9 == v15975;
    if(v7865) {
      return TypeScript$$16.LexCodeLBR
    }else {
      var v15976 = TypeScript$$16.LexCodeRC;
      var v7864 = code$$9 == v15976;
      if(v7864) {
        return TypeScript$$16.LexCodeLC
      }else {
        var v15977 = TypeScript$$16.LexCodeRPR;
        var v7863 = code$$9 == v15977;
        if(v7863) {
          return TypeScript$$16.LexCodeLPR
        }else {
          return 0
        }
      }
    }
    return
  }
  function convertTokToIDName(tok) {
    return convertTokToIDBase(tok, true, false)
  }
  function convertTokToID(tok$$1, strictMode) {
    return convertTokToIDBase(tok$$1, false, strictMode)
  }
  function convertTokToIDBase(tok$$2, identifierName, strictMode$$1) {
    var v15978 = tok$$2.tokenId;
    var v20745 = TypeScript$$16.TokenID;
    var v15979 = v20745.LimKeyword;
    var v7871 = v15978 <= v15979;
    if(v7871) {
      var v7866 = tok$$2.tokenId;
      var tokInfo = JAMScript.call(TypeScript$$16.lookupToken, TypeScript$$16, [v7866]);
      var v7870 = tokInfo != undefined;
      if(v7870) {
        var v15980 = TypeScript$$16.Reservation;
        var v7867 = v15980.Javascript;
        var v15981 = TypeScript$$16.Reservation;
        var v7868 = v15981.JavascriptFuture;
        var resFlags = v7867 | v7868;
        if(strictMode$$1) {
          var v20746 = TypeScript$$16.Reservation;
          var v15982 = v20746.JavascriptFutureStrict;
          resFlags = resFlags | v15982
        }
        var v15983 = identifierName;
        var v20748 = !v15983;
        if(v20748) {
          var v23793 = tokInfo.reservation;
          var v20747 = JAMScript.call(TypeScript$$16.hasFlag, TypeScript$$16, [v23793, resFlags]);
          v15983 = !v20747
        }
        var v7869 = v15983;
        if(v7869) {
          return true
        }
      }else {
        return false
      }
    }else {
      return false
    }
    return
  }
  function getLineNumberFromPosition(lineMap$$1, position$$2) {
    var v7872 = position$$2 === -1;
    if(v7872) {
      return 0
    }
    var min$$2 = 0;
    var v7873 = lineMap$$1.length;
    var max$$1 = v7873 - 1;
    var v7877 = min$$2 < max$$1;
    for(;v7877;) {
      var v7874 = min$$2 + max$$1;
      var med = v7874 >> 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v15984 = lineMap$$1[med]
      }
      var v7876 = position$$2 < v15984;
      if(v7876) {
        max$$1 = med - 1
      }else {
        var v20749 = med + 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v15985 = lineMap$$1[v20749]
        }
        var v7875 = position$$2 < v15985;
        if(v7875) {
          min$$2 = max$$1 = med
        }else {
          min$$2 = med + 1
        }
      }
      v7877 = min$$2 < max$$1
    }
    return min$$2
  }
  function getSourceLineColFromMap(lineCol$$5, minChar$$29, lineMap$$2) {
    var line$$5 = getLineNumberFromPosition(lineMap$$2, minChar$$29);
    var v7879 = line$$5 > 0;
    if(v7879) {
      lineCol$$5.line = line$$5;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v7878 = lineMap$$2[line$$5]
      }
      lineCol$$5.col = minChar$$29 - v7878
    }
    return
  }
  function getLineColumnFromPosition(script$$9, position$$3) {
    var result$$10 = {line:-1, col:-1};
    var v15986 = script$$9.locationInfo;
    var v7880 = v15986.lineMap;
    getSourceLineColFromMap(result$$10, position$$3, v7880);
    var v15987 = result$$10.col;
    var v7881 = v15987 >= 0;
    if(v7881) {
      var v15988 = result$$10;
      var v20750 = result$$10.col;
      v15988.col = v20750 + 1
    }
    return result$$10
  }
  function getPositionFromLineColumn(script$$10, line$$6, column) {
    var v20751 = script$$10.locationInfo;
    var v15989 = v20751.lineMap;
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      var v7882 = v15989[line$$6]
    }
    var v7883 = column - 1;
    return v7882 + v7883
  }
  function isPrimitiveTypeToken(token$$5) {
    var v7884 = token$$5.tokenId;
    switch(v7884) {
      case TypeScript$$16.TokenID.Any:
      ;
      case TypeScript$$16.TokenID.Bool:
      ;
      case TypeScript$$16.TokenID.Number:
      ;
      case TypeScript$$16.TokenID.String:
        return true
    }
    return false
  }
  function isModifier(token$$6) {
    var v7885 = token$$6.tokenId;
    switch(v7885) {
      case TypeScript$$16.TokenID.Public:
      ;
      case TypeScript$$16.TokenID.Private:
      ;
      case TypeScript$$16.TokenID.Static:
        return true
    }
    return false
  }
  TypeScript$$16.LexEOF = -1;
  TypeScript$$16.LexCodeNWL = 10;
  TypeScript$$16.LexCodeRET = 13;
  TypeScript$$16.LexCodeLS = 8232;
  TypeScript$$16.LexCodePS = 8233;
  TypeScript$$16.LexCodeTAB = 9;
  TypeScript$$16.LexCodeVTAB = 11;
  var v7886 = TypeScript$$16;
  var v27182 = JAMScript.call("e".charCodeAt, "e", [0]);
  v7886.LexCode_e = v27182;
  var v7887 = TypeScript$$16;
  var v27183 = JAMScript.call("E".charCodeAt, "E", [0]);
  v7887.LexCode_E = v27183;
  var v7888 = TypeScript$$16;
  var v27184 = JAMScript.call("x".charCodeAt, "x", [0]);
  v7888.LexCode_x = v27184;
  var v7889 = TypeScript$$16;
  var v27185 = JAMScript.call("X".charCodeAt, "X", [0]);
  v7889.LexCode_X = v27185;
  var v7890 = TypeScript$$16;
  var v27186 = JAMScript.call("a".charCodeAt, "a", [0]);
  v7890.LexCode_a = v27186;
  var v7891 = TypeScript$$16;
  var v27187 = JAMScript.call("A".charCodeAt, "A", [0]);
  v7891.LexCode_A = v27187;
  var v7892 = TypeScript$$16;
  var v27188 = JAMScript.call("f".charCodeAt, "f", [0]);
  v7892.LexCode_f = v27188;
  var v7893 = TypeScript$$16;
  var v27189 = JAMScript.call("F".charCodeAt, "F", [0]);
  v7893.LexCode_F = v27189;
  var v7894 = TypeScript$$16;
  var v27190 = JAMScript.call("g".charCodeAt, "g", [0]);
  v7894.LexCode_g = v27190;
  var v7895 = TypeScript$$16;
  var v27191 = JAMScript.call("m".charCodeAt, "m", [0]);
  v7895.LexCode_m = v27191;
  var v7896 = TypeScript$$16;
  var v27192 = JAMScript.call("i".charCodeAt, "i", [0]);
  v7896.LexCode_i = v27192;
  var v7897 = TypeScript$$16;
  var v27193 = JAMScript.call("u".charCodeAt, "u", [0]);
  v7897.LexCode_u = v27193;
  var v7898 = TypeScript$$16;
  var v27194 = JAMScript.call("0".charCodeAt, "0", [0]);
  v7898.LexCode_0 = v27194;
  var v7899 = TypeScript$$16;
  var v27195 = JAMScript.call("9".charCodeAt, "9", [0]);
  v7899.LexCode_9 = v27195;
  var v7900 = TypeScript$$16;
  var v27196 = JAMScript.call("8".charCodeAt, "8", [0]);
  v7900.LexCode_8 = v27196;
  var v7901 = TypeScript$$16;
  var v27197 = JAMScript.call("7".charCodeAt, "7", [0]);
  v7901.LexCode_7 = v27197;
  var v7902 = TypeScript$$16;
  var v27198 = JAMScript.call("\\".charCodeAt, "\\", [0]);
  v7902.LexCodeBSL = v27198;
  var v7903 = TypeScript$$16;
  var v27199 = JAMScript.call("#".charCodeAt, "#", [0]);
  v7903.LexCodeSHP = v27199;
  var v7904 = TypeScript$$16;
  var v27200 = JAMScript.call("!".charCodeAt, "!", [0]);
  v7904.LexCodeBNG = v27200;
  var v7905 = TypeScript$$16;
  var v27201 = JAMScript.call('"'.charCodeAt, '"', [0]);
  v7905.LexCodeQUO = v27201;
  var v7906 = TypeScript$$16;
  var v27202 = JAMScript.call("'".charCodeAt, "'", [0]);
  v7906.LexCodeAPO = v27202;
  var v7907 = TypeScript$$16;
  var v27203 = JAMScript.call("%".charCodeAt, "%", [0]);
  v7907.LexCodePCT = v27203;
  var v7908 = TypeScript$$16;
  var v27204 = JAMScript.call("&".charCodeAt, "&", [0]);
  v7908.LexCodeAMP = v27204;
  var v7909 = TypeScript$$16;
  var v27205 = JAMScript.call("(".charCodeAt, "(", [0]);
  v7909.LexCodeLPR = v27205;
  var v7910 = TypeScript$$16;
  var v27206 = JAMScript.call(")".charCodeAt, ")", [0]);
  v7910.LexCodeRPR = v27206;
  var v7911 = TypeScript$$16;
  var v27207 = JAMScript.call("+".charCodeAt, "+", [0]);
  v7911.LexCodePLS = v27207;
  var v7912 = TypeScript$$16;
  var v27208 = JAMScript.call("-".charCodeAt, "-", [0]);
  v7912.LexCodeMIN = v27208;
  var v7913 = TypeScript$$16;
  var v27209 = JAMScript.call("*".charCodeAt, "*", [0]);
  v7913.LexCodeMUL = v27209;
  var v7914 = TypeScript$$16;
  var v27210 = JAMScript.call("/".charCodeAt, "/", [0]);
  v7914.LexCodeSLH = v27210;
  var v7915 = TypeScript$$16;
  var v27211 = JAMScript.call("^".charCodeAt, "^", [0]);
  v7915.LexCodeXOR = v27211;
  var v7916 = TypeScript$$16;
  var v27212 = JAMScript.call(",".charCodeAt, ",", [0]);
  v7916.LexCodeCMA = v27212;
  var v7917 = TypeScript$$16;
  var v27213 = JAMScript.call(".".charCodeAt, ".", [0]);
  v7917.LexCodeDOT = v27213;
  var v7918 = TypeScript$$16;
  var v27214 = JAMScript.call("<".charCodeAt, "<", [0]);
  v7918.LexCodeLT = v27214;
  var v7919 = TypeScript$$16;
  var v27215 = JAMScript.call("=".charCodeAt, "=", [0]);
  v7919.LexCodeEQ = v27215;
  var v7920 = TypeScript$$16;
  var v27216 = JAMScript.call(">".charCodeAt, ">", [0]);
  v7920.LexCodeGT = v27216;
  var v7921 = TypeScript$$16;
  var v27217 = JAMScript.call("?".charCodeAt, "?", [0]);
  v7921.LexCodeQUE = v27217;
  var v7922 = TypeScript$$16;
  var v27218 = JAMScript.call("[".charCodeAt, "[", [0]);
  v7922.LexCodeLBR = v27218;
  var v7923 = TypeScript$$16;
  var v27219 = JAMScript.call("]".charCodeAt, "]", [0]);
  v7923.LexCodeRBR = v27219;
  var v7924 = TypeScript$$16;
  var v27220 = JAMScript.call("_".charCodeAt, "_", [0]);
  v7924.LexCodeUSC = v27220;
  var v7925 = TypeScript$$16;
  var v27221 = JAMScript.call("{".charCodeAt, "{", [0]);
  v7925.LexCodeLC = v27221;
  var v7926 = TypeScript$$16;
  var v27222 = JAMScript.call("}".charCodeAt, "}", [0]);
  v7926.LexCodeRC = v27222;
  var v7927 = TypeScript$$16;
  var v27223 = JAMScript.call("|".charCodeAt, "|", [0]);
  v7927.LexCodeBAR = v27223;
  var v7928 = TypeScript$$16;
  var v27224 = JAMScript.call("~".charCodeAt, "~", [0]);
  v7928.LexCodeTIL = v27224;
  var v7929 = TypeScript$$16;
  var v27225 = JAMScript.call(":".charCodeAt, ":", [0]);
  v7929.LexCodeCOL = v27225;
  var v7930 = TypeScript$$16;
  var v27226 = JAMScript.call(";".charCodeAt, ";", [0]);
  v7930.LexCodeSMC = v27226;
  var v7931 = TypeScript$$16;
  var v27227 = JAMScript.call("_".charCodeAt, "_", [0]);
  v7931.LexCodeUnderscore = v27227;
  var v7932 = TypeScript$$16;
  var v27228 = JAMScript.call("$".charCodeAt, "$", [0]);
  v7932.LexCodeDollar = v27228;
  TypeScript$$16.LexCodeSpace = 32;
  var v7933 = TypeScript$$16;
  var v27229 = JAMScript.call("@".charCodeAt, "@", [0]);
  v7933.LexCodeAtSign = v27229;
  TypeScript$$16.LexCodeASCIIChars = 128;
  TypeScript$$16.LexKeywordTable = undefined;
  var v7934 = TypeScript$$16.LexCodeASCIIChars;
  var autoToken = new Array(v7934);
  var v7935 = TypeScript$$16.LexCodeASCIIChars;
  var lexIdStartTable = new Array(v7935);
  var v27593 = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 
  2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 
  2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 
  3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 
  4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 
  8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 13312, 19893, 19893, 19968, 19968, 40869, 40869, 40960, 42124, 44032, 44032, 55203, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 
  65019, 65136, 65138];
  var v27594 = [65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
  var unicodeES3IdStart = v27593.concat(v27594);
  var unicodeES3IdCont = [768, 846, 864, 866, 1155, 1158, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1611, 1621, 1632, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 2305, 2307, 2364, 2364, 2366, 2381, 2385, 2388, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 2562, 2562, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2662, 2673, 
  2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2918, 2927, 2946, 2947, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3174, 3183, 3202, 3203, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3302, 3311, 3330, 3331, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 
  3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3984, 3991, 3993, 4028, 4038, 4038, 4140, 4146, 4150, 4153, 4160, 4169, 4182, 4185, 4969, 4977, 6068, 6099, 6112, 6121, 6160, 6169, 6313, 6313, 8255, 8256, 8400, 8412, 8417, 8417, 12330, 12335, 12441, 12442, 12539, 12539, 64286, 64286, 65056, 65059, 65075, 65076, 65101, 65103, 65296, 
  65305, 65343, 65343, 65381, 65381];
  var v27595 = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 
  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 
  2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 
  3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 
  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6E3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 
  6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455];
  var v27596 = [8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 
  12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 13312, 19893, 19893, 19968, 19968, 40908, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43E3, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 
  43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 44032, 55203, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 
  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
  var unicodeES5IdStart = v27595.concat(v27596);
  var unicodeES5IdCont = [768, 879, 1155, 1159, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1552, 1562, 1611, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 1984, 1993, 2027, 2035, 2070, 2073, 2075, 2083, 2085, 2087, 2089, 2093, 2137, 2139, 2276, 2302, 2304, 2307, 2362, 2364, 2366, 2383, 2385, 2391, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 
  2561, 2563, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2662, 2673, 2677, 2677, 2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2786, 2787, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2914, 2915, 2918, 2927, 2946, 2946, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3046, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3170, 3171, 3174, 3183, 3202, 3203, 3260, 3260, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 
  3298, 3299, 3302, 3311, 3330, 3331, 3390, 3396, 3398, 3400, 3402, 3405, 3415, 3415, 3426, 3427, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3981, 3991, 3993, 4028, 4038, 4038, 4139, 4158, 4160, 4169, 4182, 4185, 4190, 4192, 4194, 4196, 4199, 4205, 4209, 4212, 
  4226, 4237, 4239, 4253, 4957, 4959, 5906, 5908, 5938, 5940, 5970, 5971, 6002, 6003, 6068, 6099, 6109, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6313, 6313, 6432, 6443, 6448, 6459, 6470, 6479, 6576, 6592, 6600, 6601, 6608, 6617, 6679, 6683, 6741, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6912, 6916, 6964, 6980, 6992, 7001, 7019, 7027, 7040, 7042, 7073, 7085, 7088, 7097, 7142, 7155, 7204, 7223, 7232, 7241, 7248, 7257, 7376, 7378, 7380, 7400, 7405, 7405, 7410, 7412, 7616, 7654, 7676, 7679, 8204, 8205, 
  8255, 8256, 8276, 8276, 8400, 8412, 8417, 8417, 8421, 8432, 11503, 11505, 11647, 11647, 11744, 11775, 12330, 12335, 12441, 12442, 42528, 42537, 42607, 42607, 42612, 42621, 42655, 42655, 42736, 42737, 43010, 43010, 43014, 43014, 43019, 43019, 43043, 43047, 43136, 43137, 43188, 43204, 43216, 43225, 43232, 43249, 43264, 43273, 43302, 43309, 43335, 43347, 43392, 43395, 43443, 43456, 43472, 43481, 43561, 43574, 43587, 43587, 43596, 43597, 43600, 43609, 43643, 43643, 43696, 43696, 43698, 43700, 43703, 
  43704, 43710, 43711, 43713, 43713, 43755, 43759, 43765, 43766, 44003, 44010, 44012, 44013, 44016, 44025, 64286, 64286, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65296, 65305, 65343, 65343];
  TypeScript$$16.LexLookUpUnicodeMap = LexLookUpUnicodeMap;
  TypeScript$$16.LexIsUnicodeDigit = LexIsUnicodeDigit;
  TypeScript$$16.LexIsUnicodeIdStart = LexIsUnicodeIdStart;
  TypeScript$$16.LexInitialize = LexInitialize;
  TypeScript$$16.LexAdjustIndent = LexAdjustIndent;
  TypeScript$$16.LexIsIdentifierStartChar = LexIsIdentifierStartChar;
  TypeScript$$16.LexIsDigit = LexIsDigit;
  TypeScript$$16.LexIsIdentifierChar = LexIsIdentifierChar;
  TypeScript$$16.LexMatchingOpen = LexMatchingOpen;
  var v15990 = TypeScript$$16.NumberScanState;
  var v20752 = !v15990;
  if(v20752) {
    v15990 = TypeScript$$16.NumberScanState = {}
  }
  var v7936 = v15990;
  v600(v7936);
  var NumberScanState = TypeScript$$16.NumberScanState;
  var v15991 = TypeScript$$16.LexState;
  var v20753 = !v15991;
  if(v20753) {
    v15991 = TypeScript$$16.LexState = {}
  }
  var v7937 = v15991;
  v601(v7937);
  var LexState = TypeScript$$16.LexState;
  var v15992 = TypeScript$$16.LexMode;
  var v20754 = !v15992;
  if(v20754) {
    v15992 = TypeScript$$16.LexMode = {}
  }
  var v7938 = v15992;
  v602(v7938);
  var LexMode = TypeScript$$16.LexMode;
  var v15993 = TypeScript$$16.CommentStyle;
  var v20755 = !v15993;
  if(v20755) {
    v15993 = TypeScript$$16.CommentStyle = {}
  }
  var v7939 = v15993;
  v603(v7939);
  var CommentStyle = TypeScript$$16.CommentStyle;
  var StringSourceText = v606();
  TypeScript$$16.StringSourceText = StringSourceText;
  var SourceTextSegment = v609();
  TypeScript$$16.SourceTextSegment = SourceTextSegment;
  var AggerateSourceTextSegment = v612();
  TypeScript$$16.AggerateSourceTextSegment = AggerateSourceTextSegment;
  var ScannerTextStream = v618();
  TypeScript$$16.ScannerTextStream = ScannerTextStream;
  var SavedTokens = v633();
  TypeScript$$16.SavedTokens = SavedTokens;
  var Scanner = v674();
  TypeScript$$16.Scanner = Scanner;
  TypeScript$$16.convertTokToIDName = convertTokToIDName;
  TypeScript$$16.convertTokToID = convertTokToID;
  TypeScript$$16.getLineNumberFromPosition = getLineNumberFromPosition;
  TypeScript$$16.getSourceLineColFromMap = getSourceLineColFromMap;
  TypeScript$$16.getLineColumnFromPosition = getLineColumnFromPosition;
  TypeScript$$16.getPositionFromLineColumn = getPositionFromLineColumn;
  TypeScript$$16.isPrimitiveTypeToken = isPrimitiveTypeToken;
  TypeScript$$16.isModifier = isModifier;
  return
}
function v599(TypeScript$$15) {
  function v598() {
    function v597(s$$15) {
      var v15994 = this.builder;
      this.builder = v15994 + s$$15;
      var v7940 = this.outfile;
      var v7941 = this.builder;
      JAMScript.call(v7940.WriteLine, v7940, [v7941]);
      this.builder = "";
      return
    }
    function v596(s$$14) {
      var v15995 = this.builder;
      this.builder = v15995 + s$$14;
      return
    }
    function v595() {
      var v20756 = this.builder;
      var v15996 = v20756.length;
      var v7944 = v15996 > 0;
      if(v7944) {
        var v7942 = TypeScript$$15.CompilerDiagnostics;
        var v7943 = this.builder;
        JAMScript.call(v7942.Alert, v7942, [v7943])
      }
      var v7945 = this.indentStrings;
      var v7946 = this.indentAmt;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var indentString$$1 = v7945[v7946]
      }
      var v7950 = indentString$$1 === undefined;
      if(v7950) {
        indentString$$1 = "";
        var i$$52 = 0;
        var v15997 = this.indentAmt;
        var v7947 = i$$52 < v15997;
        for(;v7947;) {
          var v15998 = this.indent1;
          indentString$$1 = indentString$$1 + v15998;
          i$$52 = i$$52 + 1;
          var v15999 = this.indentAmt;
          v7947 = i$$52 < v15999
        }
        var v7948 = this.indentStrings;
        var v7949 = this.indentAmt;
        JAMScript.set(v7948, v7949, indentString$$1)
      }
      var v16000 = this.builder;
      this.builder = v16000 + indentString$$1;
      return
    }
    function v594() {
      var v16001 = this.indentAmt;
      this.indentAmt = v16001 - 1;
      return
    }
    function v593() {
      var v16002 = this.indentAmt;
      this.indentAmt = v16002 + 1;
      return
    }
    function PrintContext$$1(outfile$$4, parser$$1) {
      this.outfile = outfile$$4;
      this.parser = parser$$1;
      this.builder = "";
      this.indent1 = "  ";
      this.indentStrings = [];
      this.indentAmt = 0;
      return
    }
    var v7951 = PrintContext$$1.prototype;
    v7951.increaseIndent = v593;
    var v7952 = PrintContext$$1.prototype;
    v7952.decreaseIndent = v594;
    var v7953 = PrintContext$$1.prototype;
    v7953.startLine = v595;
    var v7954 = PrintContext$$1.prototype;
    v7954.write = v596;
    var v7955 = PrintContext$$1.prototype;
    v7955.writeLine = v597;
    return PrintContext$$1
  }
  function prePrintAST(ast$$46, parent$$43, walker$$40) {
    var pc = walker$$40.state;
    JAMScript.call(ast$$46.print, ast$$46, [pc]);
    JAMScript.call(pc.increaseIndent, pc, []);
    return ast$$46
  }
  function postPrintAST(ast$$47, parent$$44, walker$$41) {
    var pc$$1 = walker$$41.state;
    JAMScript.call(pc$$1.decreaseIndent, pc$$1, []);
    return ast$$47
  }
  var PrintContext = v598();
  TypeScript$$15.PrintContext = PrintContext;
  TypeScript$$15.prePrintAST = prePrintAST;
  TypeScript$$15.postPrintAST = postPrintAST;
  return
}
function v592(TypeScript$$14) {
  function v591() {
    function v590(sourceText$$2, filename$$2, unitIndex$$2, allowedElements$$4) {
      function v589(message$$16) {
        return JAMScript.call(_this$$2.reportParseError, _this$$2, [message$$16])
      }
      var v16003 = typeof allowedElements$$4;
      var v7957 = v16003 === "undefined";
      if(v7957) {
        var v7956 = TypeScript$$14.AllowedElements;
        allowedElements$$4 = v7956.Global
      }
      var _this$$2 = this;
      this.ambientModule = false;
      this.topLevel = true;
      this.hasTopLevelImportOrExport = false;
      this.requiresExtendsBlock = false;
      this.fname = filename$$2;
      this.currentUnitIndex = unitIndex$$2;
      this.amdDependencies = [];
      var v7958 = this.scanner;
      JAMScript.call(v7958.resetComments, v7958, []);
      var v7959 = this.scanner;
      JAMScript.call(v7959.setErrorHandler, v7959, [v589]);
      var v7960 = this.scanner;
      var v16004 = TypeScript$$14.LexMode;
      var v7961 = v16004.File;
      JAMScript.call(v7960.setSourceText, v7960, [sourceText$$2, v7961]);
      var v7962 = this.scanner;
      var leftCurlyCount$$5 = v7962.leftCurlyCount;
      var v7963 = this.scanner;
      var rightCurlyCount$$5 = v7963.rightCurlyCount;
      var v7964 = this.scanner;
      var minChar$$28 = v7964.pos;
      var v7965 = this.scanner;
      var v27230 = JAMScript.call(v7965.scan, v7965, []);
      this.currentToken = v27230;
      JAMScript.call(this.pushDeclLists, this, []);
      var v7966 = TypeScript$$14.ASTList;
      var bod$$3 = JAMScript.new(v7966, []);
      bod$$3.minChar = minChar$$28;
      this.state = ParseState.StartScript;
      var v7967 = JAMScript.call(TypeScript$$14.isDSTRFile, TypeScript$$14, [filename$$2]);
      var v16005 = !v7967;
      if(v16005) {
        v7967 = JAMScript.call(TypeScript$$14.isDTSFile, TypeScript$$14, [filename$$2])
      }
      this.parsingDeclareFile = v7967;
      for(;true;) {
        var v20757 = TypeScript$$14.ErrorRecoverySet;
        var v16006 = v20757.EOF;
        var v20758 = TypeScript$$14.ErrorRecoverySet;
        var v16007 = v20758.Func;
        var v7968 = v16006 | v16007;
        var v16008 = TypeScript$$14.Modifiers;
        var v7969 = v16008.None;
        JAMScript.call(this.parseStatementList, this, [v7968, bod$$3, true, false, allowedElements$$4, v7969]);
        var v20759 = this.currentToken;
        var v16009 = v20759.tokenId;
        var v20760 = TypeScript$$14.TokenID;
        var v16010 = v20760.EndOfFile;
        var v7970 = v16009 === v16010;
        if(v7970) {
          break
        }
        var v7971 = TypeScript$$14.tokenTable;
        var v16011 = this.currentToken;
        var v7972 = v16011.tokenId;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var badToken = v7971[v7972]
        }
        var v20761 = badToken.text;
        var v16012 = "Unexpected statement block terminator '" + v20761;
        var v7973 = v16012 + "'";
        JAMScript.call(this.reportParseError, this, [v7973]);
        var v7974 = this.scanner;
        var v27231 = JAMScript.call(v7974.scan, v7974, []);
        this.currentToken = v27231
      }
      this.state = ParseState.EndScript;
      var v7975 = this.scanner;
      bod$$3.limChar = v7975.pos;
      var topLevelMod = null;
      var v20762 = TypeScript$$14.moduleGenTarget;
      var v23794 = TypeScript$$14.ModuleGenTarget;
      var v20763 = v23794.Local;
      var v16013 = v20762 != v20763;
      if(v16013) {
        v16013 = this.hasTopLevelImportOrExport
      }
      var v7986 = v16013;
      if(v7986) {
        var correctedFileName = JAMScript.call(TypeScript$$14.switchToForwardSlashes, TypeScript$$14, [filename$$2]);
        var v7976 = TypeScript$$14.Identifier;
        var id$$15 = JAMScript.new(v7976, [correctedFileName]);
        var v7977 = TypeScript$$14.ModuleDeclaration;
        var v7978 = JAMScript.call(this.topVarList, this, []);
        var v7979 = JAMScript.call(this.topScopeList, this, []);
        topLevelMod = JAMScript.new(v7977, [id$$15, bod$$3, v7978, v7979, null]);
        var v16014 = topLevelMod;
        var v20764 = topLevelMod.modFlags;
        var v23795 = TypeScript$$14.ModuleFlags;
        var v20765 = v23795.IsDynamic;
        v16014.modFlags = v20764 | v20765;
        var v16015 = topLevelMod;
        var v20766 = topLevelMod.modFlags;
        var v23796 = TypeScript$$14.ModuleFlags;
        var v20767 = v23796.IsWholeFile;
        v16015.modFlags = v20766 | v20767;
        var v16016 = topLevelMod;
        var v20768 = topLevelMod.modFlags;
        var v23797 = TypeScript$$14.ModuleFlags;
        var v20769 = v23797.Exported;
        v16016.modFlags = v20768 | v20769;
        var v7980 = this.parsingDeclareFile;
        if(v7980) {
          var v16017 = topLevelMod;
          var v20770 = topLevelMod.modFlags;
          var v23798 = TypeScript$$14.ModuleFlags;
          var v20771 = v23798.Ambient;
          v16017.modFlags = v20770 | v20771
        }
        topLevelMod.minChar = minChar$$28;
        var v7981 = this.scanner;
        topLevelMod.limChar = v7981.pos;
        var v7982 = topLevelMod;
        var v27232 = JAMScript.call(TypeScript$$14.getPrettyName, TypeScript$$14, [correctedFileName]);
        v7982.prettyName = v27232;
        var v7983 = this.scanner;
        topLevelMod.containsUnicodeChar = v7983.seenUnicodeChar;
        var v7984 = this.scanner;
        topLevelMod.containsUnicodeCharInComment = v7984.seenUnicodeCharInComment;
        topLevelMod.amdDependencies = this.amdDependencies;
        var v7985 = TypeScript$$14.ASTList;
        bod$$3 = JAMScript.new(v7985, []);
        bod$$3.minChar = topLevelMod.minChar;
        bod$$3.limChar = topLevelMod.limChar;
        JAMScript.call(bod$$3.append, bod$$3, [topLevelMod])
      }
      var v7987 = TypeScript$$14.Script;
      var v7988 = JAMScript.call(this.topVarList, this, []);
      var v7989 = JAMScript.call(this.topScopeList, this, []);
      var script$$8 = JAMScript.new(v7987, [v7988, v7989]);
      script$$8.bod = bod$$3;
      JAMScript.call(this.popDeclLists, this, []);
      script$$8.minChar = minChar$$28;
      var v7990 = this.scanner;
      script$$8.limChar = v7990.pos;
      var v7991 = TypeScript$$14.LocationInfo;
      var v16018 = this.scanner;
      var v7992 = v16018.lineMap;
      var v27233 = JAMScript.new(v7991, [filename$$2, v7992, unitIndex$$2]);
      script$$8.locationInfo = v27233;
      var v16019 = this.scanner;
      var v7993 = v16019.leftCurlyCount;
      script$$8.leftCurlyCount = v7993 - leftCurlyCount$$5;
      var v16020 = this.scanner;
      var v7994 = v16020.rightCurlyCount;
      script$$8.rightCurlyCount = v7994 - rightCurlyCount$$5;
      script$$8.isDeclareFile = this.parsingDeclareFile;
      script$$8.topLevelMod = topLevelMod;
      var v7995 = this.scanner;
      script$$8.containsUnicodeChar = v7995.seenUnicodeChar;
      var v7996 = this.scanner;
      script$$8.containsUnicodeCharInComment = v7996.seenUnicodeCharInComment;
      script$$8.requiresExtendsBlock = this.requiresExtendsBlock;
      return script$$8
    }
    function v588(sourceText$$1, filename$$1, unitIndex$$1) {
      var svGenTarget = TypeScript$$14.moduleGenTarget;
      try {
        var v7997 = TypeScript$$14;
        var v16021 = TypeScript$$14.ModuleGenTarget;
        v7997.moduleGenTarget = v16021.Local;
        var v16022 = TypeScript$$14.AllowedElements;
        var v7998 = v16022.QuickParse;
        var script$$7 = JAMScript.call(this.parse, this, [sourceText$$1, filename$$1, unitIndex$$1, v7998]);
        var v16023 = this.scanner;
        var v7999 = v16023.lexState;
        return JAMScript.new(QuickParseResult, [script$$7, v7999])
      }finally {
        TypeScript$$14.moduleGenTarget = svGenTarget
      }
      return
    }
    function v587(errorRecoverySet$$38, statements$$1, sourceElms, noLeadingCase, allowedElements$$3, parentModifiers$$8) {
      var directivePrologue = sourceElms;
      var v8000 = this.scanner;
      statements$$1.minChar = v8000.startPos;
      var v8001 = this.scanner;
      var limChar$$8 = v8001.pos;
      var v20772 = TypeScript$$14.AllowedElements;
      var v16024 = v20772.ModuleDeclarations;
      var v8002 = allowedElements$$3 & v16024;
      var v16025 = TypeScript$$14.AllowedElements;
      var v8003 = v16025.None;
      var innerStmts = v8002 == v8003;
      var v20773 = TypeScript$$14.AllowedElements;
      var v16026 = v20773.ClassDeclarations;
      var v8004 = allowedElements$$3 & v16026;
      var v16027 = TypeScript$$14.AllowedElements;
      var v8005 = v16027.None;
      var classNope = v8004 == v8005;
      var v23799 = TypeScript$$14.ErrorRecoverySet;
      var v20774 = v23799.TypeScriptS;
      var v23800 = TypeScript$$14.ErrorRecoverySet;
      var v20775 = v23800.RCurly;
      var v16028 = v20774 | v20775;
      errorRecoverySet$$38 = errorRecoverySet$$38 | v16028;
      this.state = ParseState.StartStatementList;
      var oldStrictMode = this.strictMode;
      var v16029 = this.nestingLevel;
      this.nestingLevel = v16029 + 1;
      for(;;) {
        var v23801 = this.currentToken;
        var v20776 = v23801.tokenId;
        var v23802 = TypeScript$$14.TokenID;
        var v20777 = v23802.CloseBrace;
        var v16030 = v20776 == v20777;
        var v20779 = !v16030;
        if(v20779) {
          var v23803 = noLeadingCase;
          if(v23803) {
            var v26523 = this.currentToken;
            var v26104 = v26523.tokenId;
            var v26524 = TypeScript$$14.TokenID;
            var v26105 = v26524.Case;
            var v25334 = v26104 == v26105;
            var v26108 = !v25334;
            if(v26108) {
              var v26525 = this.currentToken;
              var v26106 = v26525.tokenId;
              var v26526 = TypeScript$$14.TokenID;
              var v26107 = v26526.Default;
              v25334 = v26106 == v26107
            }
            v23803 = v25334
          }
          var v20778 = v23803;
          var v23805 = !v20778;
          if(v23805) {
            var v25335 = innerStmts;
            if(v25335) {
              var v26527 = this.currentToken;
              var v26109 = v26527.tokenId;
              var v26528 = TypeScript$$14.TokenID;
              var v26110 = v26528.Export;
              v25335 = v26109 == v26110
            }
            var v23804 = v25335;
            var v25337 = !v23804;
            if(v25337) {
              var v26111 = classNope;
              if(v26111) {
                var v26705 = this.currentToken;
                var v26529 = v26705.tokenId;
                var v26706 = TypeScript$$14.TokenID;
                var v26530 = v26706.Class;
                v26111 = v26529 == v26530
              }
              var v25336 = v26111;
              var v26114 = !v25336;
              if(v26114) {
                var v26531 = this.currentToken;
                var v26112 = v26531.tokenId;
                var v26532 = TypeScript$$14.TokenID;
                var v26113 = v26532.EndOfFile;
                v25336 = v26112 == v26113
              }
              v23804 = v25336
            }
            v20778 = v23804
          }
          v16030 = v20778
        }
        var v8009 = v16030;
        if(v8009) {
          this.state = ParseState.EndStmtList;
          statements$$1.limChar = limChar$$8;
          var v20780 = statements$$1.members;
          var v16031 = v20780.length;
          var v8008 = v16031 == 0;
          if(v8008) {
            var v8006 = statements$$1;
            var v27234 = JAMScript.call(this.parseComments, this, []);
            v8006.preComments = v27234
          }else {
            var v8007 = statements$$1;
            var v27235 = JAMScript.call(this.parseComments, this, []);
            v8007.postComments = v27235
          }
          this.strictMode = oldStrictMode;
          var v16032 = this.nestingLevel;
          this.nestingLevel = v16032 - 1;
          return
        }
        var v26533 = TypeScript$$14.ErrorRecoverySet;
        var v26115 = v26533.Else;
        var v26534 = TypeScript$$14.ErrorRecoverySet;
        var v26116 = v26534.RParen;
        var v25338 = v26115 | v26116;
        var v26117 = TypeScript$$14.ErrorRecoverySet;
        var v25339 = v26117.Catch;
        var v23806 = v25338 | v25339;
        var v25340 = TypeScript$$14.ErrorRecoverySet;
        var v23807 = v25340.Colon;
        var v20781 = v23806 | v23807;
        var v16033 = ~v20781;
        var v8010 = errorRecoverySet$$38 & v16033;
        var stmt$$4 = JAMScript.call(this.parseStatement, this, [v8010, allowedElements$$3, parentModifiers$$8]);
        if(stmt$$4) {
          var v8011 = stmt$$4;
          var v16034 = stmt$$4.postComments;
          var v23808 = this.scanner;
          var v20782 = v23808.prevLine;
          var v16035 = JAMScript.call(this.parseCommentsForLine, this, [v20782]);
          var v27236 = JAMScript.call(this.combineComments, this, [v16034, v16035]);
          v8011.postComments = v27236;
          JAMScript.call(statements$$1.append, statements$$1, [stmt$$4]);
          limChar$$8 = stmt$$4.limChar;
          if(directivePrologue) {
            var v16036 = stmt$$4.nodeType;
            var v20783 = TypeScript$$14.NodeType;
            var v16037 = v20783.QString;
            var v8013 = v16036 == v16037;
            if(v8013) {
              var qstring = stmt$$4;
              var v16038 = qstring.text;
              var v8012 = v16038 == '"use strict"';
              if(v8012) {
                var v16039 = statements$$1;
                var v20784 = statements$$1.flags;
                var v23809 = TypeScript$$14.ASTFlags;
                var v20785 = v23809.StrictMode;
                v16039.flags = v20784 | v20785;
                this.strictMode = true
              }else {
                directivePrologue = false
              }
            }else {
              directivePrologue = false
            }
          }
        }
      }
      return
    }
    function v586(ast$$45) {
      var nt = ast$$45.nodeType;
      var v20786 = TypeScript$$14.NodeType;
      var v16040 = v20786.ClassDeclaration;
      var v8014 = nt == v16040;
      var v16042 = !v8014;
      if(v16042) {
        var v23810 = TypeScript$$14.NodeType;
        var v20787 = v23810.ImportDeclaration;
        var v16041 = nt == v20787;
        var v20789 = !v16041;
        if(v20789) {
          var v25341 = TypeScript$$14.NodeType;
          var v23811 = v25341.InterfaceDeclaration;
          var v20788 = nt == v23811;
          var v23813 = !v20788;
          if(v23813) {
            var v26118 = TypeScript$$14.NodeType;
            var v25342 = v26118.ModuleDeclaration;
            var v23812 = nt == v25342;
            var v25344 = !v23812;
            if(v25344) {
              var v26535 = TypeScript$$14.NodeType;
              var v26119 = v26535.Empty;
              var v25343 = nt == v26119;
              var v26121 = !v25343;
              if(v26121) {
                var v26707 = TypeScript$$14.NodeType;
                var v26536 = v26707.VarDecl;
                var v26120 = nt == v26536;
                var v26538 = !v26120;
                if(v26538) {
                  var v26858 = TypeScript$$14.NodeType;
                  var v26799 = v26858.Block;
                  var v26708 = nt == v26799;
                  if(v26708) {
                    var v26800 = ast$$45.isStatementBlock;
                    v26708 = !v26800
                  }
                  var v26537 = v26708;
                  var v26710 = !v26537;
                  if(v26710) {
                    var v26859 = TypeScript$$14.NodeType;
                    var v26801 = v26859.FuncDecl;
                    var v26709 = nt == v26801;
                    if(v26709) {
                      v26709 = JAMScript.call(ast$$45.isMethod, ast$$45, [])
                    }
                    v26537 = v26709
                  }
                  v26120 = v26537
                }
                v25343 = v26120
              }
              v23812 = v25343
            }
            v20788 = v23812
          }
          v16041 = v20788
        }
        v8014 = v16041
      }
      return v8014
    }
    function v585(errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7) {
      function isAmbient$$3() {
        var v20790 = TypeScript$$14.Modifiers;
        var v16043 = v20790.Ambient;
        var v8015 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v16043]);
        var v16045 = !v8015;
        if(v16045) {
          var v20791 = TypeScript$$14.Modifiers;
          var v16044 = v20791.Ambient;
          v8015 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [parentModifiers$$7, v16044])
        }
        return v8015
      }
      function mayNotBeExported() {
        var v20792 = TypeScript$$14.Modifiers;
        var v16046 = v20792.Exported;
        var v8016 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v16046]);
        if(v8016) {
          JAMScript.call(this.reportError, this, ["Statement may not be exported"])
        }
        return
      }
      var ast$$44 = null;
      var labelList$$1 = null;
      var astList = null;
      var temp$$15;
      var v8017 = TypeScript$$14.Modifiers;
      var modifiers$$12 = v8017.None;
      var v8018 = this.scanner;
      var minChar$$27 = v8018.startPos;
      var forInOk = false;
      var needTerminator = false;
      var fnOrVar = null;
      var preComments$$8 = JAMScript.call(this.parseComments, this, []);
      this.state = ParseState.StartStatement;
      for(;;) {
        var v16047 = this.currentToken;
        var v8334 = v16047.tokenId;
        switch(v8334) {
          case TypeScript$$14.TokenID.EndOfFile:
            var v8019 = TypeScript$$14.AST;
            var v16048 = TypeScript$$14.NodeType;
            var v8020 = v16048.Error;
            ast$$44 = JAMScript.new(v8019, [v8020]);
            ast$$44.minChar = minChar$$27;
            var v8021 = this.scanner;
            ast$$44.limChar = v8021.pos;
            break;
          case TypeScript$$14.TokenID.Function:
            var v16049 = this.parsingDeclareFile;
            var v20794 = !v16049;
            if(v20794) {
              var v20793 = isAmbient$$3();
              var v23814 = !v20793;
              if(v23814) {
                v20793 = this.ambientModule
              }
              v16049 = v20793
            }
            var v8031 = v16049;
            if(v8031) {
              var v8022 = this.scanner;
              var v27237 = JAMScript.call(v8022.scan, v8022, []);
              this.currentToken = v27237;
              var v20795 = TypeScript$$14.ErrorRecoverySet;
              var v16050 = v20795.SColon;
              var v8023 = errorRecoverySet$$37 | v16050;
              fnOrVar = JAMScript.call(this.parsePropertyDeclaration, this, [v8023, modifiers$$12, true, false]);
              var v16051 = fnOrVar.nodeType;
              var v20796 = TypeScript$$14.NodeType;
              var v16052 = v20796.VarDecl;
              var v8025 = v16051 == v16052;
              if(v8025) {
                JAMScript.call(this.reportParseError, this, ["function keyword can only introduce function declaration"])
              }else {
                var v20797 = fnOrVar.nodeType;
                var v23815 = TypeScript$$14.NodeType;
                var v20798 = v23815.FuncDecl;
                var v16053 = v20797 == v20798;
                if(v16053) {
                  fnOrVar.fncFlags;
                  var v23816 = TypeScript$$14.FncFlags;
                  v16053 = v23816.IsFatArrowFunction
                }
                var v8024 = v16053;
                if(v8024) {
                  needTerminator = true
                }
              }
              ast$$44 = fnOrVar;
              var v16054 = this.parsingDeclareFile;
              var v20800 = !v16054;
              if(v20800) {
                var v20799 = this.ambientModule;
                if(v20799) {
                  var v23817 = ast$$44.nodeType;
                  var v25345 = TypeScript$$14.NodeType;
                  var v23818 = v25345.FuncDecl;
                  v20799 = v23817 == v23818
                }
                v16054 = v20799
              }
              var v8026 = v16054;
              if(v8026) {
                var v16055 = ast$$44;
                var v20801 = ast$$44.fncFlags;
                var v23819 = TypeScript$$14.FncFlags;
                var v20802 = v23819.Exported;
                v16055.fncFlags = v20801 | v20802
              }
            }else {
              var v8027 = isAmbient$$3();
              ast$$44 = JAMScript.call(this.parseFncDecl, this, [errorRecoverySet$$37, true, false, false, null, false, false, v8027, modifiers$$12, null, true]);
              var v16056 = ast$$44.fncFlags;
              var v20803 = TypeScript$$14.FncFlags;
              var v16057 = v20803.IsFatArrowFunction;
              var v8028 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [v16056, v16057]);
              if(v8028) {
                needTerminator = true
              }
              var v8029 = this.ambientModule;
              if(v8029) {
                JAMScript.call(this.reportParseError, this, ["function declaration not permitted within ambient module"])
              }
              var v20804 = TypeScript$$14.Modifiers;
              var v16058 = v20804.Exported;
              var v8030 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v16058]);
              if(v8030) {
                var v16059 = ast$$44;
                var v20805 = ast$$44.fncFlags;
                var v23820 = TypeScript$$14.FncFlags;
                var v20806 = v23820.Exported;
                v16059.fncFlags = v20805 | v20806
              }
            }
            break;
          case TypeScript$$14.TokenID.Module:
            var v23821 = TypeScript$$14.AllowedElements;
            var v20807 = v23821.ModuleDeclarations;
            var v16060 = allowedElements$$2 & v20807;
            var v20808 = TypeScript$$14.AllowedElements;
            var v16061 = v20808.None;
            var v8036 = v16060 == v16061;
            if(v8036) {
              JAMScript.call(this.reportParseError, this, ["module not allowed in this context"]);
              var v8032 = this.scanner;
              var v27238 = JAMScript.call(v8032.scan, v8032, []);
              this.currentToken = v27238;
              var v8033 = TypeScript$$14.AST;
              var v16062 = TypeScript$$14.NodeType;
              var v8034 = v16062.Error;
              ast$$44 = JAMScript.new(v8033, [v8034]);
              ast$$44.minChar = minChar$$27;
              var v8035 = ast$$44;
              var v16063 = this.scanner;
              var v27239 = JAMScript.call(v16063.lastTokenLimChar, v16063, []);
              v8035.limChar = v27239
            }else {
              ast$$44 = JAMScript.call(this.parseModuleDecl, this, [errorRecoverySet$$37, modifiers$$12, preComments$$8]);
              preComments$$8 = null
            }
            break;
          case TypeScript$$14.TokenID.Import:
            var v23822 = TypeScript$$14.AllowedElements;
            var v20809 = v23822.ModuleDeclarations;
            var v16064 = allowedElements$$2 & v20809;
            var v20810 = TypeScript$$14.AllowedElements;
            var v16065 = v20810.None;
            var v8042 = v16064 == v16065;
            if(v8042) {
              JAMScript.call(this.reportParseError, this, ["module not allowed in this context"]);
              var v8037 = this.scanner;
              var v27240 = JAMScript.call(v8037.scan, v8037, []);
              this.currentToken = v27240;
              var v8038 = TypeScript$$14.AST;
              var v16066 = TypeScript$$14.NodeType;
              var v8039 = v16066.Error;
              ast$$44 = JAMScript.new(v8038, [v8039]);
              ast$$44.minChar = minChar$$27;
              var v8040 = ast$$44;
              var v16067 = this.scanner;
              var v27241 = JAMScript.call(v16067.lastTokenLimChar, v16067, []);
              v8040.limChar = v27241
            }else {
              var v20811 = TypeScript$$14.Modifiers;
              var v16068 = v20811.Exported;
              var v8041 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v16068]);
              if(v8041) {
                JAMScript.call(this.reportParseError, this, ["export keyword not permitted on import declaration"])
              }
              ast$$44 = JAMScript.call(this.parseImportDeclaration, this, [errorRecoverySet$$37, modifiers$$12]);
              needTerminator = true
            }
            break;
          case TypeScript$$14.TokenID.Export:
            var v23823 = TypeScript$$14.AllowedElements;
            var v20812 = v23823.ModuleDeclarations;
            var v16069 = allowedElements$$2 & v20812;
            var v20813 = TypeScript$$14.AllowedElements;
            var v16070 = v20813.None;
            var v8047 = v16069 == v16070;
            if(v8047) {
              JAMScript.call(this.reportParseError, this, ["'export' statements are only allowed at the global and module levels"]);
              var v8043 = this.scanner;
              var v27242 = JAMScript.call(v8043.scan, v8043, []);
              this.currentToken = v27242;
              var v8044 = TypeScript$$14.AST;
              var v16071 = TypeScript$$14.NodeType;
              var v8045 = v16071.Error;
              ast$$44 = JAMScript.new(v8044, [v8045]);
              ast$$44.minChar = minChar$$27;
              var v8046 = ast$$44;
              var v16072 = this.scanner;
              var v27243 = JAMScript.call(v16072.lastTokenLimChar, v16072, []);
              v8046.limChar = v27243
            }
            var v8048 = this.topLevel;
            if(v8048) {
              this.hasTopLevelImportOrExport = true
            }
            var v20814 = TypeScript$$14.Modifiers;
            var v16073 = v20814.Exported;
            modifiers$$12 = modifiers$$12 | v16073;
            var v8049 = this.scanner;
            var v27244 = JAMScript.call(v8049.scan, v8049, []);
            this.currentToken = v27244;
            break;
          case TypeScript$$14.TokenID.Private:
            var v20815 = TypeScript$$14.Modifiers;
            var v16074 = v20815.Private;
            modifiers$$12 = modifiers$$12 | v16074;
            var v8050 = this.scanner;
            var v27245 = JAMScript.call(v8050.scan, v8050, []);
            this.currentToken = v27245;
            var v8077 = this.parsingClassConstructorDefinition;
            if(v8077) {
              var v16075 = this.inferPropertiesFromThisAssignment;
              var v8051 = !v16075;
              if(v8051) {
                JAMScript.call(this.reportParseError, this, ["Property declarations are not permitted within constructor bodies"])
              }
              var v8052 = this.scanner;
              minChar$$27 = v8052.pos;
              var v16076 = this.inferPropertiesFromThisAssignment;
              if(v16076) {
                var v25346 = this.currentToken;
                var v23824 = v25346.tokenId;
                var v25347 = TypeScript$$14.TokenID;
                var v23825 = v25347.This;
                var v20816 = v23824 != v23825;
                var v23828 = !v20816;
                if(v23828) {
                  var v26122 = this.scanner;
                  var v27246 = JAMScript.call(v26122.scan, v26122, []);
                  var v25348 = this.currentToken = v27246;
                  var v23826 = v25348.tokenId;
                  var v25349 = TypeScript$$14.TokenID;
                  var v23827 = v25349.Dot;
                  v20816 = v23826 != v23827
                }
                v16076 = v20816
              }
              var v8064 = v16076;
              if(v8064) {
                JAMScript.call(this.reportParseError, this, ["Expected 'this.' for property declaration"]);
                var v8053 = this.scanner;
                var v27247 = JAMScript.call(v8053.scan, v8053, []);
                this.currentToken = v27247;
                var v8054 = TypeScript$$14.AST;
                var v16077 = TypeScript$$14.NodeType;
                var v8055 = v16077.Error;
                ast$$44 = JAMScript.new(v8054, [v8055]);
                ast$$44.minChar = minChar$$27;
                var v8056 = ast$$44;
                var v16078 = this.scanner;
                var v27248 = JAMScript.call(v16078.lastTokenLimChar, v16078, []);
                v8056.limChar = v27248
              }else {
                var v8057 = this.scanner;
                var v27249 = JAMScript.call(v8057.scan, v8057, []);
                this.currentToken = v27249;
                var v8058 = TypeScript$$14.Identifier;
                var v8059 = this.currentToken;
                var id$$14 = JAMScript.call(v8058.fromToken, v8058, [v8059]);
                var v8060 = this.scanner;
                id$$14.minChar = v8060.startPos;
                var v8061 = this.scanner;
                id$$14.limChar = v8061.pos;
                var v8062 = this.scanner;
                var v27250 = JAMScript.call(v8062.scan, v8062, []);
                this.currentToken = v27250;
                var v8063 = this.parsingClassConstructorDefinition;
                ast$$44 = JAMScript.call(this.parseClassMemberVariableDeclaration, this, [id$$14, minChar$$27, v8063, errorRecoverySet$$37, modifiers$$12])
              }
            }else {
              var v20817 = this.currentToken;
              var v16079 = v20817.tokenId;
              var v20818 = TypeScript$$14.TokenID;
              var v16080 = v20818.Interface;
              var v8076 = v16079 != v16080;
              if(v8076) {
                var v20819 = this.currentToken;
                var v16081 = v20819.tokenId;
                var v20820 = TypeScript$$14.TokenID;
                var v16082 = v20820.Get;
                var v8072 = v16081 == v16082;
                if(v8072) {
                  this.prevIDTok = this.currentToken;
                  var v8065 = this.scanner;
                  var v27251 = JAMScript.call(v8065.scan, v8065, []);
                  this.currentToken = v27251;
                  var v16083 = TypeScript$$14.codeGenTarget;
                  var v20821 = TypeScript$$14.CodeGenTarget;
                  var v16084 = v20821.ES5;
                  var v8066 = v16083 < v16084;
                  if(v8066) {
                    JAMScript.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"])
                  }
                  var v23829 = this.currentToken;
                  var v20822 = v23829.tokenId;
                  var v23830 = TypeScript$$14.TokenID;
                  var v20823 = v23830.Identifier;
                  var v16085 = v20822 == v20823;
                  var v20826 = !v16085;
                  if(v20826) {
                    var v20824 = this.currentToken;
                    var v20825 = this.strictMode;
                    v16085 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20824, v20825])
                  }
                  var v8067 = v16085;
                  if(v8067) {
                    var v20827 = TypeScript$$14.Modifiers;
                    var v16086 = v20827.Getter;
                    modifiers$$12 = modifiers$$12 | v16086;
                    this.prevIDTok = null
                  }
                }else {
                  var v20828 = this.currentToken;
                  var v16087 = v20828.tokenId;
                  var v20829 = TypeScript$$14.TokenID;
                  var v16088 = v20829.Set;
                  var v8071 = v16087 == v16088;
                  if(v8071) {
                    this.prevIDTok = this.currentToken;
                    var v8068 = this.scanner;
                    var v27252 = JAMScript.call(v8068.scan, v8068, []);
                    this.currentToken = v27252;
                    var v16089 = TypeScript$$14.codeGenTarget;
                    var v20830 = TypeScript$$14.CodeGenTarget;
                    var v16090 = v20830.ES5;
                    var v8069 = v16089 < v16090;
                    if(v8069) {
                      JAMScript.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"])
                    }
                    var v23831 = this.currentToken;
                    var v20831 = v23831.tokenId;
                    var v23832 = TypeScript$$14.TokenID;
                    var v20832 = v23832.Identifier;
                    var v16091 = v20831 == v20832;
                    var v20835 = !v16091;
                    if(v20835) {
                      var v20833 = this.currentToken;
                      var v20834 = this.strictMode;
                      v16091 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20833, v20834])
                    }
                    var v8070 = v16091;
                    if(v8070) {
                      var v20836 = TypeScript$$14.Modifiers;
                      var v16092 = v20836.Setter;
                      modifiers$$12 = modifiers$$12 | v16092;
                      this.prevIDTok = null
                    }
                  }
                }
                var v20837 = TypeScript$$14.ErrorRecoverySet;
                var v16093 = v20837.SColon;
                var v8073 = errorRecoverySet$$37 | v16093;
                var v8074 = isAmbient$$3();
                fnOrVar = JAMScript.call(this.parsePropertyDeclaration, this, [v8073, modifiers$$12, v8074, false]);
                var v20838 = fnOrVar.nodeType;
                var v23833 = TypeScript$$14.NodeType;
                var v20839 = v23833.VarDecl;
                var v16094 = v20838 == v20839;
                var v20841 = !v16094;
                if(v20841) {
                  var v23834 = fnOrVar.nodeType;
                  var v25350 = TypeScript$$14.NodeType;
                  var v23835 = v25350.FuncDecl;
                  var v20840 = v23834 == v23835;
                  if(v20840) {
                    var v23836 = fnOrVar.fncFlags;
                    var v25351 = TypeScript$$14.FncFlags;
                    var v23837 = v25351.IsFatArrowFunction;
                    v20840 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [v23836, v23837])
                  }
                  v16094 = v20840
                }
                var v8075 = v16094;
                if(v8075) {
                  needTerminator = true
                }
                ast$$44 = fnOrVar
              }
            }
            break;
          case TypeScript$$14.TokenID.Public:
            var v8110 = this.parsingClassConstructorDefinition;
            if(v8110) {
              var v16095 = this.inferPropertiesFromThisAssignment;
              var v8078 = !v16095;
              if(v8078) {
                JAMScript.call(this.reportParseError, this, ["Property declarations are not permitted within constructor bodies"])
              }
              var v8079 = this.scanner;
              var v27253 = JAMScript.call(v8079.scan, v8079, []);
              this.currentToken = v27253;
              var v8080 = this.scanner;
              minChar$$27 = v8080.pos;
              var v20842 = TypeScript$$14.Modifiers;
              var v16096 = v20842.Public;
              modifiers$$12 = modifiers$$12 | v16096;
              var v16097 = this.inferPropertiesFromThisAssignment;
              if(v16097) {
                var v25352 = this.currentToken;
                var v23838 = v25352.tokenId;
                var v25353 = TypeScript$$14.TokenID;
                var v23839 = v25353.This;
                var v20843 = v23838 != v23839;
                var v23842 = !v20843;
                if(v23842) {
                  var v26123 = this.scanner;
                  var v27254 = JAMScript.call(v26123.scan, v26123, []);
                  var v25354 = this.currentToken = v27254;
                  var v23840 = v25354.tokenId;
                  var v25355 = TypeScript$$14.TokenID;
                  var v23841 = v25355.Dot;
                  v20843 = v23840 != v23841
                }
                v16097 = v20843
              }
              var v8092 = v16097;
              if(v8092) {
                JAMScript.call(this.reportParseError, this, ["Expected 'this.' for property declaration"]);
                var v8081 = this.scanner;
                var v27255 = JAMScript.call(v8081.scan, v8081, []);
                this.currentToken = v27255;
                var v8082 = TypeScript$$14.AST;
                var v16098 = TypeScript$$14.NodeType;
                var v8083 = v16098.Error;
                ast$$44 = JAMScript.new(v8082, [v8083]);
                ast$$44.minChar = minChar$$27;
                var v8084 = ast$$44;
                var v16099 = this.scanner;
                var v27256 = JAMScript.call(v16099.lastTokenLimChar, v16099, []);
                v8084.limChar = v27256
              }else {
                var v8085 = this.scanner;
                var v27257 = JAMScript.call(v8085.scan, v8085, []);
                this.currentToken = v27257;
                var v8086 = TypeScript$$14.Identifier;
                var v8087 = this.currentToken;
                id$$14 = JAMScript.call(v8086.fromToken, v8086, [v8087]);
                var v8088 = this.scanner;
                id$$14.minChar = v8088.startPos;
                var v8089 = this.scanner;
                id$$14.limChar = v8089.pos;
                var v8090 = this.scanner;
                var v27258 = JAMScript.call(v8090.scan, v8090, []);
                this.currentToken = v27258;
                var v8091 = this.parsingClassConstructorDefinition;
                ast$$44 = JAMScript.call(this.parseClassMemberVariableDeclaration, this, [id$$14, minChar$$27, v8091, errorRecoverySet$$37, modifiers$$12])
              }
            }else {
              var v23843 = TypeScript$$14.AllowedElements;
              var v20844 = v23843.Properties;
              var v16100 = allowedElements$$2 & v20844;
              var v20845 = TypeScript$$14.AllowedElements;
              var v16101 = v20845.None;
              var v8109 = v16100 == v16101;
              if(v8109) {
                JAMScript.call(this.reportParseError, this, ["'property' statements are only allowed within classes"]);
                var v8093 = this.scanner;
                var v27259 = JAMScript.call(v8093.scan, v8093, []);
                this.currentToken = v27259;
                var v8094 = TypeScript$$14.AST;
                var v16102 = TypeScript$$14.NodeType;
                var v8095 = v16102.Error;
                ast$$44 = JAMScript.new(v8094, [v8095]);
                ast$$44.minChar = minChar$$27;
                var v8096 = ast$$44;
                var v16103 = this.scanner;
                var v27260 = JAMScript.call(v16103.lastTokenLimChar, v16103, []);
                v8096.limChar = v27260
              }else {
                var v20846 = TypeScript$$14.Modifiers;
                var v16104 = v20846.Public;
                modifiers$$12 = modifiers$$12 | v16104;
                var v8097 = this.scanner;
                var v27261 = JAMScript.call(v8097.scan, v8097, []);
                this.currentToken = v27261;
                var v20847 = this.currentToken;
                var v16105 = v20847.tokenId;
                var v20848 = TypeScript$$14.TokenID;
                var v16106 = v20848.Get;
                var v8105 = v16105 == v16106;
                if(v8105) {
                  this.prevIDTok = this.currentToken;
                  var v8098 = this.scanner;
                  var v27262 = JAMScript.call(v8098.scan, v8098, []);
                  this.currentToken = v27262;
                  var v16107 = TypeScript$$14.codeGenTarget;
                  var v20849 = TypeScript$$14.CodeGenTarget;
                  var v16108 = v20849.ES5;
                  var v8099 = v16107 < v16108;
                  if(v8099) {
                    JAMScript.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"])
                  }
                  var v23844 = this.currentToken;
                  var v20850 = v23844.tokenId;
                  var v23845 = TypeScript$$14.TokenID;
                  var v20851 = v23845.Identifier;
                  var v16109 = v20850 == v20851;
                  var v20854 = !v16109;
                  if(v20854) {
                    var v20852 = this.currentToken;
                    var v20853 = this.strictMode;
                    v16109 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20852, v20853])
                  }
                  var v8100 = v16109;
                  if(v8100) {
                    var v20855 = TypeScript$$14.Modifiers;
                    var v16110 = v20855.Getter;
                    modifiers$$12 = modifiers$$12 | v16110;
                    this.prevIDTok = null
                  }
                }else {
                  var v20856 = this.currentToken;
                  var v16111 = v20856.tokenId;
                  var v20857 = TypeScript$$14.TokenID;
                  var v16112 = v20857.Set;
                  var v8104 = v16111 == v16112;
                  if(v8104) {
                    this.prevIDTok = this.currentToken;
                    var v8101 = this.scanner;
                    var v27263 = JAMScript.call(v8101.scan, v8101, []);
                    this.currentToken = v27263;
                    var v16113 = TypeScript$$14.codeGenTarget;
                    var v20858 = TypeScript$$14.CodeGenTarget;
                    var v16114 = v20858.ES5;
                    var v8102 = v16113 < v16114;
                    if(v8102) {
                      JAMScript.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"])
                    }
                    var v23846 = this.currentToken;
                    var v20859 = v23846.tokenId;
                    var v23847 = TypeScript$$14.TokenID;
                    var v20860 = v23847.Identifier;
                    var v16115 = v20859 == v20860;
                    var v20863 = !v16115;
                    if(v20863) {
                      var v20861 = this.currentToken;
                      var v20862 = this.strictMode;
                      v16115 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20861, v20862])
                    }
                    var v8103 = v16115;
                    if(v8103) {
                      var v20864 = TypeScript$$14.Modifiers;
                      var v16116 = v20864.Setter;
                      modifiers$$12 = modifiers$$12 | v16116;
                      this.prevIDTok = null
                    }
                  }
                }
                var v20865 = TypeScript$$14.ErrorRecoverySet;
                var v16117 = v20865.SColon;
                var v8106 = errorRecoverySet$$37 | v16117;
                var v8107 = isAmbient$$3();
                fnOrVar = JAMScript.call(this.parsePropertyDeclaration, this, [v8106, modifiers$$12, v8107, false]);
                var v20866 = fnOrVar.nodeType;
                var v23848 = TypeScript$$14.NodeType;
                var v20867 = v23848.VarDecl;
                var v16118 = v20866 == v20867;
                var v20869 = !v16118;
                if(v20869) {
                  var v23849 = fnOrVar.nodeType;
                  var v25356 = TypeScript$$14.NodeType;
                  var v23850 = v25356.FuncDecl;
                  var v20868 = v23849 == v23850;
                  if(v20868) {
                    var v23851 = fnOrVar.fncFlags;
                    var v25357 = TypeScript$$14.FncFlags;
                    var v23852 = v25357.IsFatArrowFunction;
                    v20868 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [v23851, v23852])
                  }
                  v16118 = v20868
                }
                var v8108 = v16118;
                if(v8108) {
                  needTerminator = true
                }
                ast$$44 = fnOrVar
              }
            }
            break;
          case TypeScript$$14.TokenID.Declare:
            var v23853 = TypeScript$$14.AllowedElements;
            var v20870 = v23853.AmbientDeclarations;
            var v16119 = allowedElements$$2 & v20870;
            var v8111 = !v16119;
            if(v8111) {
              JAMScript.call(this.reportParseError, this, ["Ambient declarations are only allowed at the top-level or module scopes"])
            }
            var v20871 = this.parsingDeclareFile;
            var v16120 = !v20871;
            if(v16120) {
              var v23854 = TypeScript$$14.Modifiers;
              var v20872 = v23854.Ambient;
              v16120 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [parentModifiers$$7, v20872])
            }
            var v8112 = v16120;
            if(v8112) {
              JAMScript.call(this.reportParseError, this, ["Duplicate ambient declaration in this context. (Is the enclosing module or class already ambient?)"])
            }
            var v20873 = TypeScript$$14.Modifiers;
            var v16121 = v20873.Ambient;
            modifiers$$12 = modifiers$$12 | v16121;
            var v8113 = this.scanner;
            var v27264 = JAMScript.call(v8113.scan, v8113, []);
            this.currentToken = v27264;
            break;
          case TypeScript$$14.TokenID.Class:
            var v23855 = TypeScript$$14.AllowedElements;
            var v20874 = v23855.ClassDeclarations;
            var v16122 = allowedElements$$2 & v20874;
            var v20875 = TypeScript$$14.AllowedElements;
            var v16123 = v20875.None;
            var v8118 = v16122 == v16123;
            if(v8118) {
              JAMScript.call(this.reportParseError, this, ["class not allowed in this context"]);
              var v8114 = this.scanner;
              var v27265 = JAMScript.call(v8114.scan, v8114, []);
              this.currentToken = v27265;
              var v8115 = TypeScript$$14.AST;
              var v16124 = TypeScript$$14.NodeType;
              var v8116 = v16124.Error;
              ast$$44 = JAMScript.new(v8115, [v8116]);
              ast$$44.minChar = minChar$$27;
              var v8117 = ast$$44;
              var v16125 = this.scanner;
              var v27266 = JAMScript.call(v16125.lastTokenLimChar, v16125, []);
              v8117.limChar = v27266
            }else {
              ast$$44 = JAMScript.call(this.parseClassDecl, this, [errorRecoverySet$$37, minChar$$27, modifiers$$12])
            }
            break;
          case TypeScript$$14.TokenID.Interface:
            var v23856 = TypeScript$$14.AllowedElements;
            var v20876 = v23856.InterfaceDeclarations;
            var v16126 = allowedElements$$2 & v20876;
            var v20877 = TypeScript$$14.AllowedElements;
            var v16127 = v20877.None;
            var v8123 = v16126 == v16127;
            if(v8123) {
              JAMScript.call(this.reportParseError, this, ["interface not allowed in this context"]);
              var v8119 = this.scanner;
              var v27267 = JAMScript.call(v8119.scan, v8119, []);
              this.currentToken = v27267;
              var v8120 = TypeScript$$14.AST;
              var v16128 = TypeScript$$14.NodeType;
              var v8121 = v16128.Error;
              ast$$44 = JAMScript.new(v8120, [v8121]);
              ast$$44.minChar = minChar$$27;
              var v8122 = ast$$44;
              var v16129 = this.scanner;
              var v27268 = JAMScript.call(v16129.lastTokenLimChar, v16129, []);
              v8122.limChar = v27268
            }else {
              ast$$44 = JAMScript.call(this.parseInterfaceDecl, this, [errorRecoverySet$$37, modifiers$$12])
            }
            break;
          case TypeScript$$14.TokenID.Var:
            var v20878 = TypeScript$$14.ErrorRecoverySet;
            var v16130 = v20878.StmtStart;
            var v8124 = errorRecoverySet$$37 | v16130;
            var declAst = JAMScript.call(this.parseVariableDeclaration, this, [v8124, modifiers$$12, true, false]);
            var v16131 = declAst.nodeType;
            var v20879 = TypeScript$$14.NodeType;
            var v16132 = v20879.VarDecl;
            var v8126 = v16131 == v16132;
            if(v8126) {
              ast$$44 = declAst
            }else {
              var v8125 = TypeScript$$14.Block;
              ast$$44 = JAMScript.new(v8125, [declAst, false])
            }
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Static:
            var v16133 = this.currentClassDecl;
            var v8127 = v16133 == null;
            if(v8127) {
              JAMScript.call(this.reportParseError, this, ["Statics may only be class members"])
            }
            mayNotBeExported();
            var v20880 = TypeScript$$14.Modifiers;
            var v16134 = v20880.Public;
            modifiers$$12 = modifiers$$12 | v16134;
            var v8128 = this.scanner;
            var v27269 = JAMScript.call(v8128.scan, v8128, []);
            this.currentToken = v27269;
            var v20881 = this.currentToken;
            var v16135 = v20881.tokenId;
            var v20882 = TypeScript$$14.TokenID;
            var v16136 = v20882.Get;
            var v8136 = v16135 == v16136;
            if(v8136) {
              this.prevIDTok = this.currentToken;
              var v8129 = this.scanner;
              var v27270 = JAMScript.call(v8129.scan, v8129, []);
              this.currentToken = v27270;
              var v16137 = TypeScript$$14.codeGenTarget;
              var v20883 = TypeScript$$14.CodeGenTarget;
              var v16138 = v20883.ES5;
              var v8130 = v16137 < v16138;
              if(v8130) {
                JAMScript.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"])
              }
              var v23857 = this.currentToken;
              var v20884 = v23857.tokenId;
              var v23858 = TypeScript$$14.TokenID;
              var v20885 = v23858.Identifier;
              var v16139 = v20884 == v20885;
              var v20888 = !v16139;
              if(v20888) {
                var v20886 = this.currentToken;
                var v20887 = this.strictMode;
                v16139 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20886, v20887])
              }
              var v8131 = v16139;
              if(v8131) {
                var v20889 = TypeScript$$14.Modifiers;
                var v16140 = v20889.Getter;
                modifiers$$12 = modifiers$$12 | v16140;
                this.prevIDTok = null
              }
            }else {
              var v20890 = this.currentToken;
              var v16141 = v20890.tokenId;
              var v20891 = TypeScript$$14.TokenID;
              var v16142 = v20891.Set;
              var v8135 = v16141 == v16142;
              if(v8135) {
                var v8132 = this.scanner;
                var v27271 = JAMScript.call(v8132.scan, v8132, []);
                this.currentToken = v27271;
                var v16143 = TypeScript$$14.codeGenTarget;
                var v20892 = TypeScript$$14.CodeGenTarget;
                var v16144 = v20892.ES5;
                var v8133 = v16143 < v16144;
                if(v8133) {
                  JAMScript.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"])
                }
                var v23859 = this.currentToken;
                var v20893 = v23859.tokenId;
                var v23860 = TypeScript$$14.TokenID;
                var v20894 = v23860.Identifier;
                var v16145 = v20893 == v20894;
                var v20897 = !v16145;
                if(v20897) {
                  var v20895 = this.currentToken;
                  var v20896 = this.strictMode;
                  v16145 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v20895, v20896])
                }
                var v8134 = v16145;
                if(v8134) {
                  var v20898 = TypeScript$$14.Modifiers;
                  var v16146 = v20898.Setter;
                  modifiers$$12 = modifiers$$12 | v16146
                }
              }
            }
            var v8137 = isAmbient$$3();
            if(v8137) {
              var v20899 = TypeScript$$14.Modifiers;
              var v16147 = v20899.Ambient;
              modifiers$$12 = modifiers$$12 | v16147
            }
            var v20900 = TypeScript$$14.ErrorRecoverySet;
            var v16148 = v20900.SColon;
            var v8138 = errorRecoverySet$$37 | v16148;
            var v16149 = this.parsingDeclareFile;
            var v20903 = !v16149;
            if(v20903) {
              var v25358 = TypeScript$$14.Modifiers;
              var v23861 = v25358.Ambient;
              var v20901 = modifiers$$12 & v23861;
              var v23862 = TypeScript$$14.Modifiers;
              var v20902 = v23862.None;
              v16149 = v20901 != v20902
            }
            var v8139 = v16149;
            fnOrVar = JAMScript.call(this.parsePropertyDeclaration, this, [v8138, modifiers$$12, v8139, true]);
            var staticsList = JAMScript.call(this.topStaticsList, this, []);
            var v16150 = staticsList;
            if(v16150) {
              var v20904 = fnOrVar.nodeType;
              var v23863 = TypeScript$$14.NodeType;
              var v20905 = v23863.VarDecl;
              v16150 = v20904 == v20905
            }
            var v8140 = v16150;
            if(v8140) {
              JAMScript.call(staticsList.append, staticsList, [fnOrVar])
            }
            var v20906 = fnOrVar.nodeType;
            var v23864 = TypeScript$$14.NodeType;
            var v20907 = v23864.VarDecl;
            var v16151 = v20906 == v20907;
            var v20909 = !v16151;
            if(v20909) {
              var v23865 = fnOrVar.nodeType;
              var v25359 = TypeScript$$14.NodeType;
              var v23866 = v25359.FuncDecl;
              var v20908 = v23865 == v23866;
              if(v20908) {
                var v23867 = fnOrVar.fncFlags;
                var v25360 = TypeScript$$14.FncFlags;
                var v23868 = v25360.IsFatArrowFunction;
                v20908 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [v23867, v23868])
              }
              v16151 = v20908
            }
            var v8141 = v16151;
            if(v8141) {
              needTerminator = true
            }
            ast$$44 = fnOrVar;
            break;
          case TypeScript$$14.TokenID.For:
            mayNotBeExported();
            var v20910 = TypeScript$$14.Modifiers;
            var v16152 = v20910.None;
            var v8142 = modifiers$$12 != v16152;
            if(v8142) {
              JAMScript.call(this.reportParseError, this, ["syntax error: for statement does not take modifiers"])
            }
            var v8143 = this.scanner;
            minChar$$27 = v8143.startPos;
            var v16153 = TypeScript$$14.TokenID;
            var v8144 = v16153.OpenParen;
            var v23869 = TypeScript$$14.ErrorRecoverySet;
            var v20911 = v23869.ExprStart;
            var v16154 = errorRecoverySet$$37 | v20911;
            var v20912 = TypeScript$$14.ErrorRecoverySet;
            var v16155 = v20912.Var;
            var v8145 = v16154 | v16155;
            JAMScript.call(this.checkNextToken, this, [v8144, v8145]);
            this.state = ParseState.ForInit;
            forInOk = true;
            var v16156 = this.currentToken;
            var v8151 = v16156.tokenId;
            switch(v8151) {
              case TypeScript$$14.TokenID.Var:
                var v23870 = TypeScript$$14.ErrorRecoverySet;
                var v20913 = v23870.SColon;
                var v16157 = errorRecoverySet$$37 | v20913;
                var v20914 = TypeScript$$14.ErrorRecoverySet;
                var v16158 = v20914.In;
                var v8146 = v16157 | v16158;
                var v16159 = TypeScript$$14.Modifiers;
                var v8147 = v16159.None;
                temp$$15 = JAMScript.call(this.parseVariableDeclaration, this, [v8146, v8147, false, false]);
                break;
              case TypeScript$$14.TokenID.Semicolon:
                temp$$15 = null;
                this.state = ParseState.ForCondStart;
                break;
              default:
                var v23871 = TypeScript$$14.ErrorRecoverySet;
                var v20915 = v23871.SColon;
                var v16160 = errorRecoverySet$$37 | v20915;
                var v20916 = TypeScript$$14.ErrorRecoverySet;
                var v16161 = v20916.In;
                var v8148 = v16160 | v16161;
                var v16162 = TypeScript$$14.OperatorPrecedence;
                var v8149 = v16162.None;
                var v8150 = TypeContext.NoTypes;
                temp$$15 = JAMScript.call(this.parseExpr, this, [v8148, v8149, false, v8150])
            }
            this.state = ParseState.ForInitAfterVar;
            var v20917 = this.currentToken;
            var v16163 = v20917.tokenId;
            var v20918 = TypeScript$$14.TokenID;
            var v16164 = v20918.In;
            var v8179 = v16163 == v16164;
            if(v8179) {
              var v16165 = temp$$15 == null;
              var v20919 = !v16165;
              if(v20919) {
                v16165 = !forInOk
              }
              var v8165 = v16165;
              if(v8165) {
                JAMScript.call(this.reportParseError, this, ["malformed for statement"]);
                var v8155 = this.errorRecovery;
                if(v8155) {
                  var v20920 = TypeScript$$14.ErrorRecoverySet;
                  var v16166 = v20920.StmtStart;
                  var v8152 = errorRecoverySet$$37 | v16166;
                  JAMScript.call(this.skip, this, [v8152]);
                  var v8153 = TypeScript$$14.AST;
                  var v16167 = TypeScript$$14.NodeType;
                  var v8154 = v16167.Empty;
                  ast$$44 = JAMScript.new(v8153, [v8154]);
                  var v16168 = ast$$44;
                  var v20921 = ast$$44.flags;
                  var v23872 = TypeScript$$14.ASTFlags;
                  var v20922 = v23872.Error;
                  v16168.flags = v20921 | v20922
                }
              }else {
                var v8156 = this.scanner;
                var v27272 = JAMScript.call(v8156.scan, v8156, []);
                this.currentToken = v27272;
                var v8157 = TypeScript$$14.ForInStatement;
                var v23873 = TypeScript$$14.ErrorRecoverySet;
                var v20923 = v23873.RParen;
                var v16169 = v20923 | errorRecoverySet$$37;
                var v20924 = TypeScript$$14.OperatorPrecedence;
                var v16170 = v20924.Comma;
                var v16171 = TypeContext.NoTypes;
                var v8158 = JAMScript.call(this.parseExpr, this, [v16169, v16170, false, v16171]);
                var forInStmt = JAMScript.new(v8157, [temp$$15, v8158]);
                var v8159 = this.scanner;
                forInStmt.limChar = v8159.pos;
                var v8160 = forInStmt.statement;
                v8160.minChar = minChar$$27;
                var v8161 = forInStmt.statement;
                var v16172 = this.scanner;
                v8161.limChar = v16172.pos;
                var v16173 = TypeScript$$14.TokenID;
                var v8162 = v16173.CloseParen;
                var v20925 = TypeScript$$14.ErrorRecoverySet;
                var v16174 = v20925.StmtStart;
                var v8163 = v16174 | errorRecoverySet$$37;
                JAMScript.call(this.checkCurrentToken, this, [v8162, v8163]);
                JAMScript.call(this.pushStmt, this, [forInStmt, labelList$$1]);
                var v8164 = forInStmt;
                var v27273 = JAMScript.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7]);
                v8164.body = v27273;
                JAMScript.call(this.popStmt, this, []);
                forInStmt.minChar = minChar$$27;
                ast$$44 = forInStmt
              }
            }else {
              var v8166 = TypeScript$$14.ForStatement;
              var forStmt = JAMScript.new(v8166, [temp$$15]);
              forStmt.minChar = minChar$$27;
              var v16175 = TypeScript$$14.TokenID;
              var v8167 = v16175.Semicolon;
              JAMScript.call(this.checkCurrentToken, this, [v8167, errorRecoverySet$$37]);
              var v20926 = this.currentToken;
              var v16176 = v20926.tokenId;
              var v20927 = TypeScript$$14.TokenID;
              var v16177 = v20927.Semicolon;
              var v8171 = v16176 == v16177;
              if(v8171) {
                forStmt.cond = null
              }else {
                var v8168 = forStmt;
                var v25361 = TypeScript$$14.ErrorRecoverySet;
                var v23874 = v25361.SColon;
                var v20928 = errorRecoverySet$$37 | v23874;
                var v23875 = TypeScript$$14.ErrorRecoverySet;
                var v20929 = v23875.RParen;
                var v16178 = v20928 | v20929;
                var v20930 = TypeScript$$14.OperatorPrecedence;
                var v16179 = v20930.None;
                var v16180 = TypeContext.NoTypes;
                var v27274 = JAMScript.call(this.parseExpr, this, [v16178, v16179, true, v16180]);
                v8168.cond = v27274;
                var v20931 = this.currentToken;
                var v16181 = v20931.tokenId;
                var v20932 = TypeScript$$14.TokenID;
                var v16182 = v20932.Semicolon;
                var v8170 = v16181 != v16182;
                if(v8170) {
                  var v20933 = TypeScript$$14.ErrorRecoverySet;
                  var v16183 = v20933.StmtStart;
                  var v8169 = errorRecoverySet$$37 | v16183;
                  JAMScript.call(this.skip, this, [v8169]);
                  ast$$44 = forStmt;
                  var v16184 = ast$$44;
                  var v20934 = ast$$44.flags;
                  var v23876 = TypeScript$$14.ASTFlags;
                  var v20935 = v23876.Error;
                  v16184.flags = v20934 | v20935
                }
              }
              var v8172 = this.scanner;
              var v27275 = JAMScript.call(v8172.scan, v8172, []);
              this.currentToken = v27275;
              var v20936 = this.currentToken;
              var v16185 = v20936.tokenId;
              var v20937 = TypeScript$$14.TokenID;
              var v16186 = v20937.CloseParen;
              var v8174 = v16185 == v16186;
              if(v8174) {
                forStmt.incr = null
              }else {
                var v8173 = forStmt;
                var v25362 = TypeScript$$14.ErrorRecoverySet;
                var v23877 = v25362.SColon;
                var v20938 = errorRecoverySet$$37 | v23877;
                var v23878 = TypeScript$$14.ErrorRecoverySet;
                var v20939 = v23878.RParen;
                var v16187 = v20938 | v20939;
                var v20940 = TypeScript$$14.OperatorPrecedence;
                var v16188 = v20940.None;
                var v16189 = TypeContext.NoTypes;
                var v27276 = JAMScript.call(this.parseExpr, this, [v16187, v16188, true, v16189]);
                v8173.incr = v27276
              }
              var v16190 = TypeScript$$14.TokenID;
              var v8175 = v16190.CloseParen;
              var v20941 = TypeScript$$14.ErrorRecoverySet;
              var v16191 = v20941.LCurly;
              var v8176 = errorRecoverySet$$37 | v16191;
              JAMScript.call(this.checkCurrentToken, this, [v8175, v8176]);
              JAMScript.call(this.pushStmt, this, [forStmt, labelList$$1]);
              var v8177 = forStmt;
              var v27277 = JAMScript.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7]);
              v8177.body = v27277;
              JAMScript.call(this.popStmt, this, []);
              var v8178 = forStmt;
              var v16192 = forStmt.body;
              v8178.limChar = v16192.limChar;
              ast$$44 = forStmt
            }
            break;
          case TypeScript$$14.TokenID.With:
            var v16193 = TypeScript$$14.codeGenTarget;
            var v20942 = TypeScript$$14.CodeGenTarget;
            var v16194 = v20942.ES5;
            var v8180 = v16193 < v16194;
            if(v8180) {
              JAMScript.call(this.reportParseError, this, ["'with' statements are only available in ES5 codegen mode or better"])
            }
            var v8181 = this.strictMode;
            if(v8181) {
              JAMScript.call(this.reportParseError, this, ["'with' statements are not available in strict mode"])
            }
            mayNotBeExported();
            var v20943 = TypeScript$$14.Modifiers;
            var v16195 = v20943.None;
            var v8182 = modifiers$$12 != v16195;
            if(v8182) {
              JAMScript.call(this.reportParseError, this, ["'with' statement does not take modifiers"])
            }
            var v8183 = this.scanner;
            minChar$$27 = v8183.startPos;
            var v16196 = TypeScript$$14.TokenID;
            var v8184 = v16196.OpenParen;
            var v23879 = TypeScript$$14.ErrorRecoverySet;
            var v20944 = v23879.ExprStart;
            var v16197 = errorRecoverySet$$37 | v20944;
            var v20945 = TypeScript$$14.ErrorRecoverySet;
            var v16198 = v20945.Var;
            var v8185 = v16197 | v16198;
            JAMScript.call(this.checkNextToken, this, [v8184, v8185]);
            var v20946 = TypeScript$$14.ErrorRecoverySet;
            var v16199 = v20946.Colon;
            var v8186 = errorRecoverySet$$37 | v16199;
            var v16200 = TypeScript$$14.OperatorPrecedence;
            var v8187 = v16200.None;
            var v8188 = TypeContext.NoTypes;
            var expr$$5 = JAMScript.call(this.parseExpr, this, [v8186, v8187, true, v8188]);
            var v16201 = TypeScript$$14.TokenID;
            var v8189 = v16201.CloseParen;
            var v20947 = TypeScript$$14.ErrorRecoverySet;
            var v16202 = v20947.LCurly;
            var v8190 = errorRecoverySet$$37 | v16202;
            JAMScript.call(this.checkCurrentToken, this, [v8189, v8190]);
            var v8191 = TypeScript$$14.WithStatement;
            var withStmt = JAMScript.new(v8191, [expr$$5]);
            var v8192 = withStmt;
            var v27278 = JAMScript.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7]);
            v8192.body = v27278;
            withStmt.minChar = minChar$$27;
            var v8193 = withStmt;
            var v16203 = withStmt.body;
            v8193.limChar = v16203.limChar;
            ast$$44 = withStmt;
            break;
          case TypeScript$$14.TokenID.Switch:
            mayNotBeExported();
            var v20948 = TypeScript$$14.Modifiers;
            var v16204 = v20948.None;
            var v8194 = modifiers$$12 != v16204;
            if(v8194) {
              JAMScript.call(this.reportParseError, this, ["'switch' statement does not take modifiers"])
            }
            var v16205 = TypeScript$$14.TokenID;
            var v8195 = v16205.OpenParen;
            var v20949 = TypeScript$$14.ErrorRecoverySet;
            var v16206 = v20949.ExprStart;
            var v8196 = errorRecoverySet$$37 | v16206;
            JAMScript.call(this.checkNextToken, this, [v8195, v8196]);
            var v8197 = TypeScript$$14.SwitchStatement;
            var v23880 = TypeScript$$14.ErrorRecoverySet;
            var v20950 = v23880.RParen;
            var v16207 = errorRecoverySet$$37 | v20950;
            var v20951 = TypeScript$$14.OperatorPrecedence;
            var v16208 = v20951.None;
            var v16209 = TypeContext.NoTypes;
            var v8198 = JAMScript.call(this.parseExpr, this, [v16207, v16208, true, v16209]);
            var switchStmt = JAMScript.new(v8197, [v8198]);
            var v8199 = switchStmt.statement;
            v8199.minChar = minChar$$27;
            var v8200 = switchStmt.statement;
            var v16210 = this.scanner;
            v8200.limChar = v16210.pos;
            var v16211 = TypeScript$$14.TokenID;
            var v8201 = v16211.CloseParen;
            var v20952 = TypeScript$$14.ErrorRecoverySet;
            var v16212 = v20952.LCurly;
            var v8202 = errorRecoverySet$$37 | v16212;
            JAMScript.call(this.checkCurrentToken, this, [v8201, v8202]);
            var v8203 = this.scanner;
            var caseListMinChar = v8203.startPos;
            var v16213 = TypeScript$$14.TokenID;
            var v8204 = v16213.OpenBrace;
            var v20953 = TypeScript$$14.ErrorRecoverySet;
            var v16214 = v20953.SCase;
            var v8205 = errorRecoverySet$$37 | v16214;
            JAMScript.call(this.checkCurrentToken, this, [v8204, v8205]);
            switchStmt.defaultCase = null;
            var v8206 = TypeScript$$14.ASTList;
            var v27279 = JAMScript.new(v8206, []);
            switchStmt.caseList = v27279;
            var caseStmt = null;
            JAMScript.call(this.pushStmt, this, [switchStmt, labelList$$1]);
            for(;;) {
              var v23881 = this.currentToken;
              var v20954 = v23881.tokenId;
              var v23882 = TypeScript$$14.TokenID;
              var v20955 = v23882.Case;
              var v16215 = v20954 == v20955;
              var v20958 = !v16215;
              if(v20958) {
                var v23883 = this.currentToken;
                var v20956 = v23883.tokenId;
                var v23884 = TypeScript$$14.TokenID;
                var v20957 = v23884.Default;
                v16215 = v20956 == v20957
              }
              var v8220 = v16215;
              if(v8220) {
                var v16216 = this.currentToken;
                var v8207 = v16216.tokenId;
                var v16217 = TypeScript$$14.TokenID;
                var v8208 = v16217.Default;
                var isDefault = v8207 == v8208;
                var v8209 = TypeScript$$14.CaseStatement;
                caseStmt = JAMScript.new(v8209, []);
                var v8210 = this.scanner;
                caseStmt.minChar = v8210.startPos;
                var v8211 = this.scanner;
                var v27280 = JAMScript.call(v8211.scan, v8211, []);
                this.currentToken = v27280;
                if(isDefault) {
                  switchStmt.defaultCase = caseStmt
                }else {
                  var v8212 = caseStmt;
                  var v23885 = TypeScript$$14.ErrorRecoverySet;
                  var v20959 = v23885.Colon;
                  var v16218 = errorRecoverySet$$37 | v20959;
                  var v20960 = TypeScript$$14.OperatorPrecedence;
                  var v16219 = v20960.None;
                  var v16220 = TypeContext.NoTypes;
                  var v27281 = JAMScript.call(this.parseExpr, this, [v16218, v16219, true, v16220]);
                  v8212.expr = v27281
                }
                var v16221 = TypeScript$$14.TokenID;
                var v8213 = v16221.Colon;
                var v20961 = TypeScript$$14.ErrorRecoverySet;
                var v16222 = v20961.StmtStart;
                var v8214 = errorRecoverySet$$37 | v16222;
                JAMScript.call(this.checkCurrentToken, this, [v8213, v8214]);
                var v8215 = TypeScript$$14.ASTList;
                var v27282 = JAMScript.new(v8215, []);
                caseStmt.body = v27282;
                var v20962 = TypeScript$$14.ErrorRecoverySet;
                var v16223 = v20962.RCurly;
                var v8216 = errorRecoverySet$$37 | v16223;
                var v8217 = caseStmt.body;
                JAMScript.call(this.parseStatementList, this, [v8216, v8217, false, true, allowedElements$$2, modifiers$$12]);
                var v8218 = caseStmt;
                var v16224 = caseStmt.body;
                v8218.limChar = v16224.limChar;
                var v8219 = switchStmt.caseList;
                JAMScript.call(v8219.append, v8219, [caseStmt])
              }else {
                break
              }
            }
            var v8221 = switchStmt.caseList;
            v8221.minChar = caseListMinChar;
            var v8222 = switchStmt.caseList;
            var v16225 = this.scanner;
            v8222.limChar = v16225.pos;
            var v8223 = switchStmt;
            var v16226 = switchStmt.caseList;
            v8223.limChar = v16226.limChar;
            var v16227 = TypeScript$$14.TokenID;
            var v8224 = v16227.CloseBrace;
            JAMScript.call(this.checkCurrentToken, this, [v8224, errorRecoverySet$$37]);
            JAMScript.call(this.popStmt, this, []);
            ast$$44 = switchStmt;
            break;
          case TypeScript$$14.TokenID.While:
            mayNotBeExported();
            var v20963 = TypeScript$$14.Modifiers;
            var v16228 = v20963.None;
            var v8225 = modifiers$$12 != v16228;
            if(v8225) {
              JAMScript.call(this.reportParseError, this, ["'while' statement does not take modifiers"])
            }
            var v8226 = this.scanner;
            minChar$$27 = v8226.startPos;
            var v16229 = TypeScript$$14.TokenID;
            var v8227 = v16229.OpenParen;
            var v20964 = TypeScript$$14.ErrorRecoverySet;
            var v16230 = v20964.ExprStart;
            var v8228 = v16230 | errorRecoverySet$$37;
            JAMScript.call(this.checkNextToken, this, [v8227, v8228]);
            var v8229 = TypeScript$$14.WhileStatement;
            var v23886 = TypeScript$$14.ErrorRecoverySet;
            var v20965 = v23886.RParen;
            var v16231 = errorRecoverySet$$37 | v20965;
            var v20966 = TypeScript$$14.OperatorPrecedence;
            var v16232 = v20966.None;
            var v16233 = TypeContext.NoTypes;
            var v8230 = JAMScript.call(this.parseExpr, this, [v16231, v16232, true, v16233]);
            var whileStmt = JAMScript.new(v8229, [v8230]);
            whileStmt.minChar = minChar$$27;
            var v16234 = TypeScript$$14.TokenID;
            var v8231 = v16234.CloseParen;
            var v20967 = TypeScript$$14.ErrorRecoverySet;
            var v16235 = v20967.StmtStart;
            var v8232 = errorRecoverySet$$37 | v16235;
            JAMScript.call(this.checkCurrentToken, this, [v8231, v8232]);
            JAMScript.call(this.pushStmt, this, [whileStmt, labelList$$1]);
            var v8233 = whileStmt;
            var v27283 = JAMScript.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7]);
            v8233.body = v27283;
            var v8234 = whileStmt;
            var v16236 = whileStmt.body;
            v8234.limChar = v16236.limChar;
            JAMScript.call(this.popStmt, this, []);
            ast$$44 = whileStmt;
            break;
          case TypeScript$$14.TokenID.Do:
            mayNotBeExported();
            var v20968 = TypeScript$$14.Modifiers;
            var v16237 = v20968.None;
            var v8235 = modifiers$$12 != v16237;
            if(v8235) {
              JAMScript.call(this.reportParseError, this, ["'do' statement does not take modifiers"])
            }
            var v8236 = this.scanner;
            minChar$$27 = v8236.startPos;
            var v8237 = this.scanner;
            var v27284 = JAMScript.call(v8237.scan, v8237, []);
            this.currentToken = v27284;
            var v8238 = TypeScript$$14.DoWhileStatement;
            var doStmt = JAMScript.new(v8238, []);
            doStmt.minChar = minChar$$27;
            JAMScript.call(this.pushStmt, this, [doStmt, labelList$$1]);
            var v8239 = doStmt;
            var v23887 = TypeScript$$14.ErrorRecoverySet;
            var v20969 = v23887.While;
            var v16238 = errorRecoverySet$$37 | v20969;
            var v27285 = JAMScript.call(this.parseStatement, this, [v16238, allowedElements$$2, parentModifiers$$7]);
            v8239.body = v27285;
            JAMScript.call(this.popStmt, this, []);
            var v8240 = TypeScript$$14.Identifier;
            var v27286 = JAMScript.new(v8240, ["while"]);
            doStmt.whileAST = v27286;
            var v8241 = doStmt.whileAST;
            var v16239 = this.scanner;
            v8241.minChar = v16239.startPos;
            var v16240 = TypeScript$$14.TokenID;
            var v8242 = v16240.While;
            var v20970 = TypeScript$$14.ErrorRecoverySet;
            var v16241 = v20970.LParen;
            var v8243 = errorRecoverySet$$37 | v16241;
            JAMScript.call(this.checkCurrentToken, this, [v8242, v8243]);
            var v8244 = doStmt.whileAST;
            var v20971 = doStmt.whileAST;
            var v16242 = v20971.minChar;
            v8244.limChar = v16242 + 5;
            var v16243 = TypeScript$$14.TokenID;
            var v8245 = v16243.OpenParen;
            var v20972 = TypeScript$$14.ErrorRecoverySet;
            var v16244 = v20972.ExprStart;
            var v8246 = errorRecoverySet$$37 | v16244;
            JAMScript.call(this.checkCurrentToken, this, [v8245, v8246]);
            var v8247 = doStmt;
            var v23888 = TypeScript$$14.ErrorRecoverySet;
            var v20973 = v23888.RParen;
            var v16245 = errorRecoverySet$$37 | v20973;
            var v20974 = TypeScript$$14.OperatorPrecedence;
            var v16246 = v20974.None;
            var v16247 = TypeContext.NoTypes;
            var v27287 = JAMScript.call(this.parseExpr, this, [v16245, v16246, true, v16247]);
            v8247.cond = v27287;
            var v8248 = this.scanner;
            doStmt.limChar = v8248.pos;
            var v16248 = TypeScript$$14.TokenID;
            var v8249 = v16248.CloseParen;
            JAMScript.call(this.checkCurrentToken, this, [v8249, errorRecoverySet$$37]);
            ast$$44 = doStmt;
            var v20975 = this.currentToken;
            var v16249 = v20975.tokenId;
            var v20976 = TypeScript$$14.TokenID;
            var v16250 = v20976.Semicolon;
            var v8251 = v16249 == v16250;
            if(v8251) {
              var v8250 = this.scanner;
              var v27288 = JAMScript.call(v8250.scan, v8250, []);
              this.currentToken = v27288
            }
            break;
          case TypeScript$$14.TokenID.If:
            mayNotBeExported();
            var v20977 = TypeScript$$14.Modifiers;
            var v16251 = v20977.None;
            var v8252 = modifiers$$12 != v16251;
            if(v8252) {
              JAMScript.call(this.reportParseError, this, ["if statement does not take modifiers"])
            }
            var v8253 = this.scanner;
            minChar$$27 = v8253.startPos;
            var v16252 = TypeScript$$14.TokenID;
            var v8254 = v16252.OpenParen;
            var v20978 = TypeScript$$14.ErrorRecoverySet;
            var v16253 = v20978.ExprStart;
            var v8255 = errorRecoverySet$$37 | v16253;
            JAMScript.call(this.checkNextToken, this, [v8254, v8255]);
            var v8256 = TypeScript$$14.IfStatement;
            var v23889 = TypeScript$$14.ErrorRecoverySet;
            var v20979 = v23889.LParen;
            var v16254 = errorRecoverySet$$37 | v20979;
            var v20980 = TypeScript$$14.OperatorPrecedence;
            var v16255 = v20980.None;
            var v16256 = TypeContext.NoTypes;
            var v8257 = JAMScript.call(this.parseExpr, this, [v16254, v16255, true, v16256]);
            var ifStmt = JAMScript.new(v8256, [v8257]);
            ifStmt.minChar = minChar$$27;
            var v8258 = ifStmt.statement;
            v8258.minChar = minChar$$27;
            var v8259 = ifStmt.statement;
            var v16257 = this.scanner;
            v8259.limChar = v16257.pos;
            var v16258 = TypeScript$$14.TokenID;
            var v8260 = v16258.CloseParen;
            var v20981 = TypeScript$$14.ErrorRecoverySet;
            var v16259 = v20981.StmtStart;
            var v8261 = errorRecoverySet$$37 | v16259;
            JAMScript.call(this.checkCurrentToken, this, [v8260, v8261]);
            JAMScript.call(this.pushStmt, this, [ifStmt, labelList$$1]);
            var v8262 = ifStmt;
            var v23890 = TypeScript$$14.ErrorRecoverySet;
            var v20982 = v23890.Else;
            var v16260 = v20982 | errorRecoverySet$$37;
            var v27289 = JAMScript.call(this.parseStatement, this, [v16260, allowedElements$$2, parentModifiers$$7]);
            v8262.thenBod = v27289;
            var v8263 = ifStmt;
            var v16261 = ifStmt.thenBod;
            v8263.limChar = v16261.limChar;
            var v20983 = this.currentToken;
            var v16262 = v20983.tokenId;
            var v20984 = TypeScript$$14.TokenID;
            var v16263 = v20984.Else;
            var v8267 = v16262 == v16263;
            if(v8267) {
              var v8264 = this.scanner;
              var v27290 = JAMScript.call(v8264.scan, v8264, []);
              this.currentToken = v27290;
              var v8265 = ifStmt;
              var v27291 = JAMScript.call(this.parseStatement, this, [errorRecoverySet$$37, allowedElements$$2, parentModifiers$$7]);
              v8265.elseBod = v27291;
              var v8266 = ifStmt;
              var v16264 = ifStmt.elseBod;
              v8266.limChar = v16264.limChar
            }
            JAMScript.call(this.popStmt, this, []);
            ast$$44 = ifStmt;
            break;
          case TypeScript$$14.TokenID.Try:
            mayNotBeExported();
            var v20985 = TypeScript$$14.Modifiers;
            var v16265 = v20985.None;
            var v8268 = modifiers$$12 != v16265;
            if(v8268) {
              JAMScript.call(this.reportParseError, this, ["try statement does not take modifiers"])
            }
            var v8269 = this.scanner;
            minChar$$27 = v8269.startPos;
            ast$$44 = JAMScript.call(this.parseTryCatchFinally, this, [errorRecoverySet$$37, parentModifiers$$7, labelList$$1]);
            break;
          case TypeScript$$14.TokenID.OpenBrace:
            mayNotBeExported();
            var v20986 = TypeScript$$14.Modifiers;
            var v16266 = v20986.None;
            var v8270 = modifiers$$12 != v16266;
            if(v8270) {
              JAMScript.call(this.reportParseError, this, ["block does not take modifiers"])
            }
            var v8271 = this.scanner;
            minChar$$27 = v8271.startPos;
            var v8272 = this.scanner;
            var v27292 = JAMScript.call(v8272.scan, v8272, []);
            this.currentToken = v27292;
            var v8273 = TypeScript$$14.Block;
            var v16267 = TypeScript$$14.ASTList;
            var v8274 = JAMScript.new(v16267, []);
            var block$$1 = JAMScript.new(v8273, [v8274, true]);
            JAMScript.call(this.pushStmt, this, [block$$1, labelList$$1]);
            var v20987 = TypeScript$$14.ErrorRecoverySet;
            var v16268 = v20987.RCurly;
            var v8275 = errorRecoverySet$$37 | v16268;
            var v8276 = block$$1.statements;
            var v16269 = TypeScript$$14.AllowedElements;
            var v8277 = v16269.None;
            JAMScript.call(this.parseStatementList, this, [v8275, v8276, false, false, v8277, modifiers$$12]);
            JAMScript.call(this.popStmt, this, []);
            var v8278 = block$$1.statements;
            v8278.minChar = minChar$$27;
            var v8279 = block$$1.statements;
            var v16270 = this.scanner;
            v8279.limChar = v16270.pos;
            var v8280 = block$$1;
            var v16271 = block$$1.statements;
            v8280.minChar = v16271.minChar;
            var v8281 = block$$1;
            var v16272 = block$$1.statements;
            v8281.limChar = v16272.limChar;
            var v16273 = TypeScript$$14.TokenID;
            var v8282 = v16273.CloseBrace;
            JAMScript.call(this.checkCurrentToken, this, [v8282, errorRecoverySet$$37]);
            ast$$44 = block$$1;
            break;
          case TypeScript$$14.TokenID.Semicolon:
            mayNotBeExported();
            var v20988 = TypeScript$$14.Modifiers;
            var v16274 = v20988.None;
            var v8283 = modifiers$$12 != v16274;
            if(v8283) {
              JAMScript.call(this.reportParseError, this, ["modifier can not appear here"])
            }
            var v8284 = TypeScript$$14.AST;
            var v16275 = TypeScript$$14.NodeType;
            var v8285 = v16275.Empty;
            ast$$44 = JAMScript.new(v8284, [v8285]);
            var v8286 = this.scanner;
            var v27293 = JAMScript.call(v8286.scan, v8286, []);
            this.currentToken = v27293;
            break;
          case TypeScript$$14.TokenID.Break:
          ;
          case TypeScript$$14.TokenID.Continue:
            mayNotBeExported();
            var v20989 = TypeScript$$14.Modifiers;
            var v16276 = v20989.None;
            var v8287 = modifiers$$12 != v16276;
            if(v8287) {
              JAMScript.call(this.reportParseError, this, ["modifiers can not appear before jump statement"])
            }
            var v8288 = TypeScript$$14.Jump;
            var v16277;
            var v25363 = this.currentToken;
            var v23891 = v25363.tokenId;
            var v25364 = TypeScript$$14.TokenID;
            var v23892 = v25364.Break;
            var v20992 = v23891 == v23892;
            if(v20992) {
              var v20990 = TypeScript$$14.NodeType;
              v16277 = v20990.Break
            }else {
              var v20991 = TypeScript$$14.NodeType;
              v16277 = v20991.Continue
            }
            var v8289 = v16277;
            var jump$$1 = JAMScript.new(v8288, [v8289]);
            var v8290 = this.scanner;
            var v27294 = JAMScript.call(v8290.scan, v8290, []);
            this.currentToken = v27294;
            var v23893 = this.currentToken;
            var v20993 = v23893.tokenId;
            var v23894 = TypeScript$$14.TokenID;
            var v20994 = v23894.Identifier;
            var v16278 = v20993 == v20994;
            if(v16278) {
              var v23895 = this.scanner;
              var v20995 = JAMScript.call(v23895.lastTokenHadNewline, v23895, []);
              v16278 = !v20995
            }
            var v8293 = v16278;
            if(v8293) {
              var v8291 = jump$$1;
              var v16279 = this.currentToken;
              var v27295 = JAMScript.call(v16279.getText, v16279, []);
              v8291.target = v27295;
              var v8292 = this.scanner;
              var v27296 = JAMScript.call(v8292.scan, v8292, []);
              this.currentToken = v27296
            }
            JAMScript.call(this.resolveJumpTarget, this, [jump$$1]);
            ast$$44 = jump$$1;
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Return:
            mayNotBeExported();
            var v20996 = TypeScript$$14.Modifiers;
            var v16280 = v20996.None;
            var v8294 = modifiers$$12 != v16280;
            if(v8294) {
              JAMScript.call(this.reportParseError, this, ["modifiers can not appear before return statement"])
            }
            var v16281 = this.inFunction;
            var v8295 = !v16281;
            if(v8295) {
              JAMScript.call(this.reportParseError, this, ["return statement outside of function body"])
            }
            var v8296 = this.scanner;
            minChar$$27 = v8296.startPos;
            var v8297 = this.scanner;
            var v27297 = JAMScript.call(v8297.scan, v8297, []);
            this.currentToken = v27297;
            var v8298 = TypeScript$$14.ReturnStatement;
            var retStmt$$1 = JAMScript.new(v8298, []);
            retStmt$$1.minChar = minChar$$27;
            var v23896 = this.currentToken;
            var v20997 = v23896.tokenId;
            var v23897 = TypeScript$$14.TokenID;
            var v20998 = v23897.Semicolon;
            var v16282 = v20997 != v20998;
            if(v16282) {
              var v25365 = this.currentToken;
              var v23898 = v25365.tokenId;
              var v25366 = TypeScript$$14.TokenID;
              var v23899 = v25366.CloseBrace;
              var v20999 = v23898 != v23899;
              if(v20999) {
                var v25367 = this.scanner;
                var v23900 = JAMScript.call(v25367.lastTokenHadNewline, v25367, []);
                v20999 = !v23900
              }
              v16282 = v20999
            }
            var v8300 = v16282;
            if(v8300) {
              var v8299 = retStmt$$1;
              var v23901 = TypeScript$$14.ErrorRecoverySet;
              var v21000 = v23901.SColon;
              var v16283 = errorRecoverySet$$37 | v21000;
              var v21001 = TypeScript$$14.OperatorPrecedence;
              var v16284 = v21001.None;
              var v16285 = TypeContext.NoTypes;
              var v27298 = JAMScript.call(this.parseExpr, this, [v16283, v16284, true, v16285]);
              v8299.returnExpression = v27298
            }
            needTerminator = true;
            var v8301 = retStmt$$1;
            var v16286 = this.scanner;
            var v27299 = JAMScript.call(v16286.lastTokenLimChar, v16286, []);
            v8301.limChar = v27299;
            ast$$44 = retStmt$$1;
            break;
          case TypeScript$$14.TokenID.Throw:
            mayNotBeExported();
            var v21002 = TypeScript$$14.Modifiers;
            var v16287 = v21002.None;
            var v8302 = modifiers$$12 != v16287;
            if(v8302) {
              JAMScript.call(this.reportParseError, this, ["modifiers can not appear before a throw statement"])
            }
            var v8303 = this.scanner;
            minChar$$27 = v8303.startPos;
            var v8304 = this.scanner;
            var v27300 = JAMScript.call(v8304.scan, v8304, []);
            this.currentToken = v27300;
            var v23902 = this.currentToken;
            var v21003 = v23902.tokenId;
            var v23903 = TypeScript$$14.TokenID;
            var v21004 = v23903.Semicolon;
            var v16288 = v21003 != v21004;
            if(v16288) {
              var v25368 = this.currentToken;
              var v23904 = v25368.tokenId;
              var v25369 = TypeScript$$14.TokenID;
              var v23905 = v25369.CloseBrace;
              var v21005 = v23904 != v23905;
              if(v21005) {
                var v25370 = this.scanner;
                var v23906 = JAMScript.call(v25370.lastTokenHadNewline, v25370, []);
                v21005 = !v23906
              }
              v16288 = v21005
            }
            var v8308 = v16288;
            if(v8308) {
              var v21006 = TypeScript$$14.ErrorRecoverySet;
              var v16289 = v21006.SColon;
              var v8305 = errorRecoverySet$$37 | v16289;
              var v16290 = TypeScript$$14.OperatorPrecedence;
              var v8306 = v16290.None;
              var v8307 = TypeContext.NoTypes;
              temp$$15 = JAMScript.call(this.parseExpr, this, [v8305, v8306, true, v8307])
            }else {
              JAMScript.call(this.reportParseError, this, ["throw with no target"]);
              temp$$15 = null
            }
            var v8309 = TypeScript$$14.UnaryExpression;
            var v16291 = TypeScript$$14.NodeType;
            var v8310 = v16291.Throw;
            ast$$44 = JAMScript.new(v8309, [v8310, temp$$15]);
            var v8311 = ast$$44;
            var v16292 = this.scanner;
            var v27301 = JAMScript.call(v16292.lastTokenLimChar, v16292, []);
            v8311.limChar = v27301;
            needTerminator = true;
            break;
          case TypeScript$$14.TokenID.Enum:
            var v8312 = this.scanner;
            var v27302 = JAMScript.call(v8312.scan, v8312, []);
            this.currentToken = v27302;
            ast$$44 = JAMScript.call(this.parseEnumDecl, this, [errorRecoverySet$$37, modifiers$$12]);
            ast$$44.minChar = minChar$$27;
            var v8313 = ast$$44;
            var v16293 = this.scanner;
            var v27303 = JAMScript.call(v16293.lastTokenLimChar, v16293, []);
            v8313.limChar = v27303;
            var v16294 = this.parsingDeclareFile;
            var v21008 = !v16294;
            if(v21008) {
              var v21007 = this.ambientModule;
              var v23908 = !v21007;
              if(v23908) {
                var v25371 = TypeScript$$14.Modifiers;
                var v23907 = v25371.Ambient;
                v21007 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v23907])
              }
              v16294 = v21007
            }
            var v8314 = v16294;
            if(v8314) {
              var v16295 = ast$$44;
              var v21009 = ast$$44.modFlags;
              var v23909 = TypeScript$$14.ModuleFlags;
              var v21010 = v23909.Ambient;
              v16295.modFlags = v21009 | v21010
            }
            var v16296 = this.parsingDeclareFile;
            var v21012 = !v16296;
            if(v21012) {
              var v21011 = this.ambientModule;
              var v23911 = !v21011;
              if(v23911) {
                var v25372 = TypeScript$$14.Modifiers;
                var v23910 = v25372.Exported;
                v21011 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$12, v23910])
              }
              v16296 = v21011
            }
            var v8315 = v16296;
            if(v8315) {
              var v16297 = ast$$44;
              var v21013 = ast$$44.modFlags;
              var v23912 = TypeScript$$14.ModuleFlags;
              var v21014 = v23912.Exported;
              v16297.modFlags = v21013 | v21014
            }
            break;
          case TypeScript$$14.TokenID.Debugger:
            mayNotBeExported();
            var v21015 = TypeScript$$14.Modifiers;
            var v16298 = v21015.None;
            var v8316 = modifiers$$12 != v16298;
            if(v8316) {
              JAMScript.call(this.reportParseError, this, ["modifiers can not appear before debugger statement"])
            }
            var v8317 = this.scanner;
            minChar$$27 = v8317.startPos;
            var v8318 = this.scanner;
            var v27304 = JAMScript.call(v8318.scan, v8318, []);
            this.currentToken = v27304;
            var v8319 = TypeScript$$14.DebuggerStatement;
            var debuggerStmt = JAMScript.new(v8319, []);
            debuggerStmt.minChar = minChar$$27;
            needTerminator = true;
            var v8320 = debuggerStmt;
            var v16299 = this.scanner;
            var v27305 = JAMScript.call(v16299.lastTokenLimChar, v16299, []);
            v8320.limChar = v27305;
            ast$$44 = debuggerStmt;
            break;
          default:
            var v21016 = TypeScript$$14.Modifiers;
            var v16300 = v21016.None;
            var v8321 = modifiers$$12 != v16300;
            if(v8321) {
              JAMScript.call(this.reportParseError, this, ["modifiers can not appear before an expression statement or label"])
            }
            var v8322 = this.scanner;
            minChar$$27 = v8322.startPos;
            var v8323 = this.scanner;
            var svPos = v8323.pos;
            var v23913 = TypeScript$$14.ErrorRecoverySet;
            var v21017 = v23913.Colon;
            var v23914 = TypeScript$$14.ErrorRecoverySet;
            var v21018 = v23914.StmtStart;
            var v16301 = v21017 | v21018;
            var v8324 = v16301 | errorRecoverySet$$37;
            var v16302 = TypeScript$$14.OperatorPrecedence;
            var v8325 = v16302.None;
            var v8326 = TypeContext.NoTypes;
            temp$$15 = JAMScript.call(this.parseExpr, this, [v8324, v8325, true, v8326]);
            var v21019 = this.scanner;
            var v16303 = v21019.pos;
            var v8333 = v16303 == svPos;
            if(v8333) {
              var v8327 = this.scanner;
              var v27306 = JAMScript.call(v8327.scan, v8327, []);
              this.currentToken = v27306;
              ast$$44 = temp$$15
            }else {
              var v23915 = this.currentToken;
              var v21020 = v23915.tokenId;
              var v23916 = TypeScript$$14.TokenID;
              var v21021 = v23916.Colon;
              var v16304 = v21020 == v21021;
              if(v16304) {
                var v25373 = this.scanner;
                var v23917 = JAMScript.call(v25373.lastTokenHadNewline, v25373, []);
                var v21022 = !v23917;
                if(v21022) {
                  var v23918 = temp$$15;
                  if(v23918) {
                    var v25374 = temp$$15.nodeType;
                    var v26124 = TypeScript$$14.NodeType;
                    var v25375 = v26124.Name;
                    v23918 = v25374 == v25375
                  }
                  v21022 = v23918
                }
                v16304 = v21022
              }
              var v8332 = v16304;
              if(v8332) {
                var v8329 = labelList$$1 == null;
                if(v8329) {
                  var v8328 = TypeScript$$14.ASTList;
                  labelList$$1 = JAMScript.new(v8328, [])
                }
                var v16305 = TypeScript$$14.Label;
                var v8330 = JAMScript.new(v16305, [temp$$15]);
                JAMScript.call(labelList$$1.append, labelList$$1, [v8330]);
                var v8331 = this.scanner;
                var v27307 = JAMScript.call(v8331.scan, v8331, []);
                this.currentToken = v27307
              }else {
                ast$$44 = temp$$15;
                needTerminator = true
              }
            }
        }
        if(ast$$44) {
          break
        }
      }
      if(needTerminator) {
        var v16306 = this.currentToken;
        var v8340 = v16306.tokenId;
        switch(v8340) {
          case TypeScript$$14.TokenID.Semicolon:
            var v8335 = this.scanner;
            var v27308 = JAMScript.call(v8335.scan, v8335, []);
            this.currentToken = v27308;
            var v16307 = ast$$44;
            var v21023 = ast$$44.flags;
            var v23919 = TypeScript$$14.ASTFlags;
            var v21024 = v23919.ExplicitSemicolon;
            v16307.flags = v21023 | v21024;
            break;
          case TypeScript$$14.TokenID.EndOfFile:
            var v8336 = this.scanner;
            ast$$44.limChar = v8336.pos;
          case TypeScript$$14.TokenID.CloseBrace:
            var v16308 = ast$$44;
            var v21025 = ast$$44.flags;
            var v23920 = TypeScript$$14.ASTFlags;
            var v21026 = v23920.AutomaticSemicolon;
            v16308.flags = v21025 | v21026;
            var v8337 = this.style_requireSemi;
            if(v8337) {
              JAMScript.call(this.reportParseStyleError, this, ["no automatic semicolon"])
            }
            break;
          default:
            var v21027 = this.scanner;
            var v16309 = JAMScript.call(v21027.lastTokenHadNewline, v21027, []);
            var v8339 = !v16309;
            if(v8339) {
              JAMScript.call(this.reportParseError, this, ["Expected ';'"])
            }else {
              var v16310 = ast$$44;
              var v21028 = ast$$44.flags;
              var v23921 = TypeScript$$14.ASTFlags;
              var v21029 = v23921.AutomaticSemicolon;
              v16310.flags = v21028 | v21029;
              var v8338 = this.style_requireSemi;
              if(v8338) {
                JAMScript.call(this.reportParseStyleError, this, ["no automatic semicolon"])
              }
            }
        }
      }
      if(labelList$$1) {
        var v8341 = TypeScript$$14.LabeledStatement;
        ast$$44 = JAMScript.new(v8341, [labelList$$1, ast$$44])
      }
      ast$$44.minChar = minChar$$27;
      var v8342 = ast$$44;
      var v16311 = ast$$44.limChar;
      var v21030 = this.scanner;
      var v16312 = JAMScript.call(v21030.lastTokenLimChar, v21030, []);
      var v27309 = JAMScript.call(TypeScript$$14.max, TypeScript$$14, [v16311, v16312]);
      v8342.limChar = v27309;
      if(preComments$$8) {
        ast$$44.preComments = preComments$$8
      }
      var v16313 = this.ambientModule;
      if(v16313) {
        var v21031 = JAMScript.call(this.okAmbientModuleMember, this, [ast$$44]);
        v16313 = !v21031
      }
      var v8343 = v16313;
      if(v8343) {
        JAMScript.call(this.reportParseError, this, ["statement not permitted within ambient module"])
      }
      var v16314 = ast$$44;
      var v21032 = ast$$44.flags;
      var v23922 = TypeScript$$14.ASTFlags;
      var v21033 = v23922.IsStatement;
      v16314.flags = v21032 | v21033;
      return ast$$44
    }
    function v584(errorRecoverySet$$36, parentModifiers$$6, labelList) {
      var v8344 = TypeScript$$14.Try;
      var tryPart = JAMScript.new(v8344, [null]);
      var v8345 = this.scanner;
      var tryMinChar = v8345.startPos;
      JAMScript.call(this.pushStmt, this, [tryPart, labelList]);
      var v21034 = TypeScript$$14.ErrorRecoverySet;
      var v16315 = v21034.Catch;
      var v8346 = errorRecoverySet$$36 | v16315;
      JAMScript.call(this.parseTry, this, [tryPart, v8346, parentModifiers$$6]);
      JAMScript.call(this.popStmt, this, []);
      var tc$$1 = null;
      var tf = null;
      var v21035 = this.currentToken;
      var v16316 = v21035.tokenId;
      var v21036 = TypeScript$$14.TokenID;
      var v16317 = v21036.Catch;
      var v8349 = v16316 == v16317;
      if(v8349) {
        var v21037 = TypeScript$$14.ErrorRecoverySet;
        var v16318 = v21037.Catch;
        var v8347 = errorRecoverySet$$36 | v16318;
        var catchPart = JAMScript.call(this.parseCatch, this, [v8347, parentModifiers$$6]);
        var v8348 = TypeScript$$14.TryCatch;
        tc$$1 = JAMScript.new(v8348, [tryPart, catchPart]);
        tc$$1.minChar = tryPart.minChar;
        tc$$1.limChar = catchPart.limChar
      }
      var v21038 = this.currentToken;
      var v16319 = v21038.tokenId;
      var v21039 = TypeScript$$14.TokenID;
      var v16320 = v21039.Finally;
      var v8359 = v16319 != v16320;
      if(v8359) {
        var v8357 = tc$$1 == null;
        if(v8357) {
          JAMScript.call(this.reportParseError, this, ["try with neither catch nor finally"]);
          var v8354 = this.errorRecovery;
          if(v8354) {
            var v8350 = TypeScript$$14.TryFinally;
            var v16321 = TypeScript$$14.Finally;
            var v21040 = TypeScript$$14.AST;
            var v23923 = TypeScript$$14.NodeType;
            var v21041 = v23923.Empty;
            var v16322 = JAMScript.new(v21040, [v21041]);
            var v8351 = JAMScript.new(v16321, [v16322]);
            var etf = JAMScript.new(v8350, [tryPart, v8351]);
            var v16323 = etf;
            var v21042 = etf.flags;
            var v23924 = TypeScript$$14.ASTFlags;
            var v21043 = v23924.Error;
            v16323.flags = v21042 | v21043;
            var v8352 = this.scanner;
            etf.minChar = v8352.startPos;
            var v8353 = this.scanner;
            etf.limChar = v8353.pos;
            return etf
          }
          var v8355 = TypeScript$$14.TryFinally;
          var v16324 = TypeScript$$14.Finally;
          var v21044 = TypeScript$$14.AST;
          var v23925 = TypeScript$$14.NodeType;
          var v21045 = v23925.Empty;
          var v16325 = JAMScript.new(v21044, [v21045]);
          var v8356 = JAMScript.new(v16324, [v16325]);
          return JAMScript.new(v8355, [tryPart, v8356])
        }else {
          return tc$$1
        }
      }else {
        if(tc$$1) {
          tryPart = tc$$1
        }
        var finallyPart = JAMScript.call(this.parseFinally, this, [errorRecoverySet$$36, parentModifiers$$6]);
        var v8358 = TypeScript$$14.TryFinally;
        tf = JAMScript.new(v8358, [tryPart, finallyPart]);
        tf.minChar = tryMinChar;
        tf.limChar = finallyPart.limChar;
        return tf
      }
      return
    }
    function v583(errorRecoverySet$$35, parentModifiers$$5) {
      var v8360 = this.scanner;
      var finMinChar = v8360.startPos;
      var preComments$$7 = JAMScript.call(this.parseComments, this, []);
      var v8361 = this.scanner;
      var v27310 = JAMScript.call(v8361.scan, v8361, []);
      this.currentToken = v27310;
      var v21046 = this.currentToken;
      var v16326 = v21046.tokenId;
      var v21047 = TypeScript$$14.TokenID;
      var v16327 = v21047.OpenBrace;
      var v8367 = v16326 != v16327;
      if(v8367) {
        JAMScript.call(this.reportParseError, this, ["Expected '{' to start body of finally statement"]);
        var v8366 = this.errorRecovery;
        if(v8366) {
          JAMScript.call(this.skip, this, [errorRecoverySet$$35]);
          var v8362 = TypeScript$$14.Finally;
          var v16328 = TypeScript$$14.Statement;
          var v21048 = TypeScript$$14.NodeType;
          var v16329 = v21048.Empty;
          var v8363 = JAMScript.new(v16328, [v16329]);
          var efin = JAMScript.new(v8362, [v8363]);
          var v16330 = efin;
          var v21049 = efin.flags;
          var v23926 = TypeScript$$14.ASTFlags;
          var v21050 = v23926.Error;
          v16330.flags = v21049 | v21050;
          var v8364 = this.scanner;
          efin.minChar = v8364.startPos;
          var v8365 = this.scanner;
          efin.limChar = v8365.pos;
          return efin
        }
      }
      var v16331 = TypeScript$$14.AllowedElements;
      var v8368 = v16331.None;
      var finBody = JAMScript.call(this.parseStatement, this, [errorRecoverySet$$35, v8368, parentModifiers$$5]);
      var v8369 = TypeScript$$14.Finally;
      var fin = JAMScript.new(v8369, [finBody]);
      fin.minChar = finMinChar;
      var v8370 = fin;
      var v16332 = fin.body;
      v8370.limChar = v16332.limChar;
      fin.preComments = preComments$$7;
      var v8371 = fin;
      var v27311 = JAMScript.call(this.parseComments, this, []);
      v8371.postComments = v27311;
      return fin
    }
    function v582(errorRecoverySet$$34, parentModifiers$$4) {
      var v8372 = this.scanner;
      var catchMinChar = v8372.startPos;
      var preComments$$6 = JAMScript.call(this.parseComments, this, []);
      var v8373 = this.scanner;
      var v27312 = JAMScript.call(v8373.scan, v8373, []);
      this.currentToken = v27312;
      var v16333 = TypeScript$$14.TokenID;
      var v8374 = v16333.OpenParen;
      var v21051 = TypeScript$$14.ErrorRecoverySet;
      var v16334 = v21051.ExprStart;
      var v8375 = errorRecoverySet$$34 | v16334;
      JAMScript.call(this.checkCurrentToken, this, [v8374, v8375]);
      var v23927 = this.currentToken;
      var v21052 = v23927.tokenId;
      var v23928 = TypeScript$$14.TokenID;
      var v21053 = v23928.Identifier;
      var v16335 = v21052 != v21053;
      var v21056 = !v16335;
      if(v21056) {
        var v21054 = this.currentToken;
        var v21055 = this.strictMode;
        v16335 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21054, v21055])
      }
      var v8384 = v16335;
      if(v8384) {
        JAMScript.call(this.reportParseError, this, ["Expected identifier in catch header"]);
        var v8383 = this.errorRecovery;
        if(v8383) {
          JAMScript.call(this.skip, this, [errorRecoverySet$$34]);
          var v8376 = TypeScript$$14.Catch;
          var v16336 = TypeScript$$14.VarDecl;
          var v21057 = TypeScript$$14.MissingIdentifier;
          var v16337 = JAMScript.new(v21057, []);
          var v16338 = this.nestingLevel;
          var v8377 = JAMScript.new(v16336, [v16337, v16338]);
          var v16339 = TypeScript$$14.Statement;
          var v21058 = TypeScript$$14.NodeType;
          var v16340 = v21058.Empty;
          var v8378 = JAMScript.new(v16339, [v16340]);
          var ecatch = JAMScript.new(v8376, [v8377, v8378]);
          var v8379 = ecatch.statement;
          v8379.minChar = catchMinChar;
          var v8380 = ecatch.statement;
          var v16341 = this.scanner;
          v8380.limChar = v16341.pos;
          var v8381 = this.scanner;
          ecatch.minChar = v8381.startPos;
          var v8382 = this.scanner;
          ecatch.limChar = v8382.pos;
          var v16342 = ecatch;
          var v21059 = ecatch.flags;
          var v23929 = TypeScript$$14.ASTFlags;
          var v21060 = v23929.Error;
          v16342.flags = v21059 | v21060;
          return ecatch
        }
      }
      var v8385 = TypeScript$$14.VarDecl;
      var v16343 = TypeScript$$14.Identifier;
      var v16344 = this.currentToken;
      var v8386 = JAMScript.call(v16343.fromToken, v16343, [v16344]);
      var v8387 = this.nestingLevel;
      var param$$5 = JAMScript.new(v8385, [v8386, v8387]);
      var v8388 = param$$5.id;
      var v16345 = this.scanner;
      v8388.minChar = v16345.startPos;
      var v8389 = param$$5.id;
      var v16346 = this.scanner;
      v8389.limChar = v16346.pos;
      var v8390 = param$$5;
      var v16347 = param$$5.id;
      v8390.minChar = v16347.minChar;
      var v8391 = param$$5;
      var v16348 = param$$5.id;
      v8391.limChar = v16348.limChar;
      var v8392 = this.scanner;
      var v27313 = JAMScript.call(v8392.scan, v8392, []);
      this.currentToken = v27313;
      var v8393 = this.scanner;
      var statementPos = v8393.pos;
      var v16349 = TypeScript$$14.TokenID;
      var v8394 = v16349.CloseParen;
      var v21061 = TypeScript$$14.ErrorRecoverySet;
      var v16350 = v21061.StmtStart;
      var v8395 = errorRecoverySet$$34 | v16350;
      JAMScript.call(this.checkCurrentToken, this, [v8394, v8395]);
      var v21062 = this.currentToken;
      var v16351 = v21062.tokenId;
      var v21063 = TypeScript$$14.TokenID;
      var v16352 = v21063.OpenBrace;
      var v8404 = v16351 != v16352;
      if(v8404) {
        JAMScript.call(this.reportParseError, this, ["Expected '{' to start catch body"]);
        var v8403 = this.errorRecovery;
        if(v8403) {
          JAMScript.call(this.skip, this, [errorRecoverySet$$34]);
          var v8396 = TypeScript$$14.Catch;
          var v16353 = TypeScript$$14.VarDecl;
          var v21064 = TypeScript$$14.MissingIdentifier;
          var v16354 = JAMScript.new(v21064, []);
          var v16355 = this.nestingLevel;
          var v8397 = JAMScript.new(v16353, [v16354, v16355]);
          var v16356 = TypeScript$$14.Statement;
          var v21065 = TypeScript$$14.NodeType;
          var v16357 = v21065.Empty;
          var v8398 = JAMScript.new(v16356, [v16357]);
          ecatch = JAMScript.new(v8396, [v8397, v8398]);
          var v8399 = ecatch.statement;
          v8399.minChar = catchMinChar;
          var v8400 = ecatch.statement;
          v8400.limChar = statementPos;
          var v8401 = this.scanner;
          ecatch.minChar = v8401.startPos;
          var v8402 = this.scanner;
          ecatch.limChar = v8402.pos;
          var v16358 = ecatch;
          var v21066 = ecatch.flags;
          var v23930 = TypeScript$$14.ASTFlags;
          var v21067 = v23930.Error;
          v16358.flags = v21066 | v21067;
          return ecatch
        }
      }
      var v16359 = TypeScript$$14.AllowedElements;
      var v8405 = v16359.None;
      var catchStmt = JAMScript.call(this.parseStatement, this, [errorRecoverySet$$34, v8405, parentModifiers$$4]);
      var v8406 = TypeScript$$14.Catch;
      var catchNode$$1 = JAMScript.new(v8406, [param$$5, catchStmt]);
      var v8407 = catchNode$$1.statement;
      v8407.minChar = catchMinChar;
      var v8408 = catchNode$$1.statement;
      v8408.limChar = statementPos;
      catchNode$$1.minChar = catchMinChar;
      catchNode$$1.limChar = catchStmt.limChar;
      catchNode$$1.preComments = preComments$$6;
      var v8409 = catchNode$$1;
      var v27314 = JAMScript.call(this.parseComments, this, []);
      v8409.postComments = v27314;
      return catchNode$$1
    }
    function v581(tryNode$$2, errorRecoverySet$$33, parentModifiers$$3) {
      var v8410 = this.scanner;
      var minChar$$26 = v8410.startPos;
      var preComments$$5 = JAMScript.call(this.parseComments, this, []);
      var v8411 = this.scanner;
      var v27315 = JAMScript.call(v8411.scan, v8411, []);
      this.currentToken = v27315;
      var v21068 = this.currentToken;
      var v16360 = v21068.tokenId;
      var v21069 = TypeScript$$14.TokenID;
      var v16361 = v21069.OpenBrace;
      var v8414 = v16360 != v16361;
      if(v8414) {
        JAMScript.call(this.reportParseError, this, ["Expected '{'"]);
        var v8413 = this.errorRecovery;
        if(v8413) {
          var etryNode = tryNode$$2;
          etryNode.minChar = minChar$$26;
          var v8412 = etryNode;
          var v16362 = this.scanner;
          var v27316 = JAMScript.call(v16362.lastTokenLimChar, v16362, []);
          v8412.limChar = v27316;
          var v16363 = etryNode;
          var v21070 = etryNode.flags;
          var v23931 = TypeScript$$14.ASTFlags;
          var v21071 = v23931.Error;
          v16363.flags = v21070 | v21071;
          return etryNode
        }
      }
      var v8415 = tryNode$$2;
      var v21072 = TypeScript$$14.AllowedElements;
      var v16364 = v21072.None;
      var v27317 = JAMScript.call(this.parseStatement, this, [errorRecoverySet$$33, v16364, parentModifiers$$3]);
      v8415.body = v27317;
      tryNode$$2.minChar = minChar$$26;
      var v8416 = tryNode$$2;
      var v16365 = tryNode$$2.body;
      v8416.limChar = v16365.limChar;
      tryNode$$2.preComments = preComments$$5;
      var v8417 = tryNode$$2;
      var v27318 = JAMScript.call(this.parseComments, this, []);
      v8417.postComments = v27318;
      return tryNode$$2
    }
    function v580(errorRecoverySet$$32, ast$$43, allowCall$$1, inNew$$1, typeContext$$2, lhsMinChar, lhsLimChar) {
      var count$$7 = 0;
      var v8420 = !ast$$43;
      if(v8420) {
        var v8418 = TypeScript$$14.AST;
        var v16366 = TypeScript$$14.NodeType;
        var v8419 = v16366.EmptyExpr;
        ast$$43 = JAMScript.new(v8418, [v8419]);
        ast$$43.isParenthesized = true
      }
      ast$$43.minChar = lhsMinChar;
      ast$$43.limChar = lhsLimChar;
      for(;;) {
        var v16367 = this.currentToken;
        var v8459 = v16367.tokenId;
        switch(v8459) {
          case TypeScript$$14.TokenID.OpenParen:
            if(inNew$$1) {
              var callExpr = ast$$43;
              var v8421 = callExpr;
              var v27319 = JAMScript.call(this.parseArgList, this, [errorRecoverySet$$32]);
              v8421.arguments = v27319;
              inNew$$1 = false
            }else {
              var v8422 = !allowCall$$1;
              if(v8422) {
                return ast$$43
              }
              var v8423 = TypeScript$$14.CallExpression;
              var v16368 = TypeScript$$14.NodeType;
              var v8424 = v16368.Call;
              var v8425 = JAMScript.call(this.parseArgList, this, [errorRecoverySet$$32]);
              ast$$43 = JAMScript.new(v8423, [v8424, ast$$43, v8425]);
              ast$$43.minChar = lhsMinChar
            }
            var v8426 = this.scanner;
            ast$$43.limChar = v8426.pos;
            var v16369 = TypeScript$$14.TokenID;
            var v8427 = v16369.CloseParen;
            JAMScript.call(this.checkCurrentToken, this, [v8427, errorRecoverySet$$32]);
            break;
          case TypeScript$$14.TokenID.OpenBracket:
            var v8428 = this.scanner;
            var v27320 = JAMScript.call(v8428.scan, v8428, []);
            this.currentToken = v27320;
            var v21073 = this.currentToken;
            var v16370 = v21073.tokenId;
            var v21074 = TypeScript$$14.TokenID;
            var v16371 = v21074.CloseBracket;
            var v8435 = v16370 == v16371;
            if(v8435) {
              var v16372 = TypeContext.ArraySuffix;
              var v8434 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [typeContext$$2, v16372]);
              if(v8434) {
                var v8429 = this.scanner;
                var v27321 = JAMScript.call(v8429.scan, v8429, []);
                this.currentToken = v27321;
                var v16373 = ast$$43.nodeType;
                var v21075 = TypeScript$$14.NodeType;
                var v16374 = v21075.TypeRef;
                var v8432 = v16373 == v16374;
                if(v8432) {
                  var typeRef$$1 = ast$$43;
                  var v16375 = typeRef$$1;
                  var v21076 = typeRef$$1.arrayCount;
                  v16375.arrayCount = v21076 + 1
                }else {
                  var v8430 = TypeScript$$14.BinaryExpression;
                  var v16376 = TypeScript$$14.NodeType;
                  var v8431 = v16376.Index;
                  ast$$43 = JAMScript.new(v8430, [v8431, ast$$43, null])
                }
                var v8433 = this.scanner;
                ast$$43.limChar = v8433.pos;
                break
              }
            }
            var v8436 = TypeScript$$14.BinaryExpression;
            var v16377 = TypeScript$$14.NodeType;
            var v8437 = v16377.Index;
            var v23932 = TypeScript$$14.ErrorRecoverySet;
            var v21077 = v23932.RBrack;
            var v16378 = errorRecoverySet$$32 | v21077;
            var v21078 = TypeScript$$14.OperatorPrecedence;
            var v16379 = v21078.None;
            var v16380 = TypeContext.NoTypes;
            var v8438 = JAMScript.call(this.parseExpr, this, [v16378, v16379, true, v16380]);
            ast$$43 = JAMScript.new(v8436, [v8437, ast$$43, v8438]);
            ast$$43.minChar = lhsMinChar;
            var v8439 = this.scanner;
            ast$$43.limChar = v8439.pos;
            var v16381 = TypeScript$$14.TokenID;
            var v8440 = v16381.CloseBracket;
            JAMScript.call(this.checkCurrentToken, this, [v8440, errorRecoverySet$$32]);
            break;
          case TypeScript$$14.TokenID.Dot:
            var name$$52 = null;
            var v8441 = this.scanner;
            var curpos$$2 = v8441.pos;
            var v8442 = this.scanner;
            var v27322 = JAMScript.call(v8442.scan, v8442, []);
            this.currentToken = v27322;
            var v16382 = this.currentToken;
            var v8444 = v16382 === undefined;
            if(v8444) {
              var v8443 = this.scanner;
              var v27323 = JAMScript.call(v8443.scan, v8443, []);
              this.currentToken = v27323;
              continue
            }
            var v23933 = this.currentToken;
            var v21079 = v23933.tokenId;
            var v23934 = TypeScript$$14.TokenID;
            var v21080 = v23934.Identifier;
            var v16383 = v21079 == v21080;
            var v21082 = !v16383;
            if(v21082) {
              var v25376 = this.errorRecovery;
              var v23935 = !v25376;
              var v25378 = !v23935;
              if(v25378) {
                var v26125 = this.scanner;
                var v25377 = JAMScript.call(v26125.lastTokenHadNewline, v26125, []);
                v23935 = !v25377
              }
              var v21081 = v23935;
              if(v21081) {
                var v23936 = this.currentToken;
                v21081 = JAMScript.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v23936])
              }
              v16383 = v21081
            }
            var v8452 = v16383;
            if(v8452) {
              var v16384 = ast$$43;
              var v21083 = ast$$43.flags;
              var v23937 = TypeScript$$14.ASTFlags;
              var v21084 = v23937.DotLHS;
              v16384.flags = v21083 | v21084;
              var v16385 = this.currentToken;
              var v8445 = JAMScript.call(v16385.getText, v16385, []);
              var v16386 = this.currentToken;
              var v8446 = v16386.hasEscapeSequence;
              var v16387 = this.scanner;
              var v8447 = v16387.startPos;
              name$$52 = JAMScript.call(this.createRef, this, [v8445, v8446, v8447]);
              var v8448 = this.scanner;
              name$$52.limChar = v8448.pos;
              var v8449 = this.scanner;
              var v27324 = JAMScript.call(v8449.scan, v8449, []);
              this.currentToken = v27324
            }else {
              JAMScript.call(this.reportParseError, this, ["Expected identifier following dot"]);
              var v8451 = this.errorRecovery;
              if(v8451) {
                JAMScript.call(this.skip, this, [errorRecoverySet$$32]);
                var v16388 = ast$$43;
                var v21085 = ast$$43.flags;
                var v25379 = TypeScript$$14.ASTFlags;
                var v23938 = v25379.Error;
                var v25380 = TypeScript$$14.ASTFlags;
                var v23939 = v25380.DotLHS;
                var v21086 = v23938 | v23939;
                v16388.flags = v21085 | v21086;
                return ast$$43
              }else {
                var v8450 = TypeScript$$14.MissingIdentifier;
                name$$52 = JAMScript.new(v8450, [])
              }
            }
            var v8453 = TypeScript$$14.BinaryExpression;
            var v16389 = TypeScript$$14.NodeType;
            var v8454 = v16389.Dot;
            ast$$43 = JAMScript.new(v8453, [v8454, ast$$43, name$$52]);
            ast$$43.minChar = lhsMinChar;
            var v8455 = ast$$43;
            var v16390 = this.scanner;
            var v27325 = JAMScript.call(v16390.lastTokenLimChar, v16390, []);
            v8455.limChar = v27325;
            break;
          case TypeScript$$14.TokenID.EqualsGreaterThan:
            var v16391 = TypeScript$$14.Modifiers;
            var v8456 = v16391.None;
            var v8457 = {preProcessedLambdaArgs:ast$$43};
            ast$$43 = JAMScript.call(this.parseFncDecl, this, [errorRecoverySet$$32, false, false, false, null, false, false, false, v8456, v8457, false]);
            var v16392 = ast$$43;
            var v21087 = ast$$43.fncFlags;
            var v23940 = TypeScript$$14.FncFlags;
            var v21088 = v23940.IsFunctionExpression;
            v16392.fncFlags = v21087 | v21088;
            ast$$43.minChar = lhsMinChar;
            var v8458 = ast$$43;
            var v16393 = this.scanner;
            var v27326 = JAMScript.call(v16393.lastTokenLimChar, v16393, []);
            v8458.limChar = v27326;
            break;
          default:
            return ast$$43
        }
      }
      return
    }
    function v579(errorRecoverySet$$31, minPrecedence, allowIn$$1, typeContext$$1, possiblyInLambda) {
      var v16394 = typeof possiblyInLambda;
      var v8460 = v16394 === "undefined";
      if(v8460) {
        possiblyInLambda = false
      }
      var ast$$42 = null;
      var v16395 = this.currentToken;
      var v8461 = v16395.tokenId;
      var tokenInfo$$1 = JAMScript.call(TypeScript$$14.lookupToken, TypeScript$$14, [v8461]);
      var canAssign = true;
      var idHint$$1 = null;
      var v8462 = this.scanner;
      var minChar$$25 = v8462.startPos;
      var preComments$$4 = JAMScript.call(this.parseComments, this, []);
      var exprIsAnonLambda = false;
      var v16396 = tokenInfo$$1 != undefined;
      if(v16396) {
        var v21089 = tokenInfo$$1.unopNodeType;
        var v23941 = TypeScript$$14.NodeType;
        var v21090 = v23941.None;
        v16396 = v21089 != v21090
      }
      var v8489 = v16396;
      if(v8489) {
        canAssign = false;
        var v8463 = this.scanner;
        var v27327 = JAMScript.call(v8463.scan, v8463, []);
        this.currentToken = v27327;
        var v21091 = TypeScript$$14.ErrorRecoverySet;
        var v16397 = v21091.BinOp;
        var v8464 = v16397 | errorRecoverySet$$31;
        var v8465 = tokenInfo$$1.unopPrecedence;
        var v8466 = TypeContext.NoTypes;
        var tempExpr = JAMScript.call(this.parseExpr, this, [v8464, v8465, allowIn$$1, v8466]);
        var v21092 = tokenInfo$$1.unopNodeType;
        var v23942 = TypeScript$$14.NodeType;
        var v21093 = v23942.Pos;
        var v16398 = v21092 == v21093;
        if(v16398) {
          var v21094 = tempExpr.nodeType;
          var v23943 = TypeScript$$14.NodeType;
          var v21095 = v23943.NumberLit;
          v16398 = v21094 == v21095
        }
        var v8472 = v16398;
        if(v8472) {
          ast$$42 = tempExpr
        }else {
          var v21096 = tokenInfo$$1.unopNodeType;
          var v23944 = TypeScript$$14.NodeType;
          var v21097 = v23944.Neg;
          var v16399 = v21096 == v21097;
          if(v16399) {
            var v21098 = tempExpr.nodeType;
            var v23945 = TypeScript$$14.NodeType;
            var v21099 = v23945.NumberLit;
            v16399 = v21098 == v21099
          }
          var v8471 = v16399;
          if(v8471) {
            var numLit$$1 = tempExpr;
            var v8467 = numLit$$1;
            var v16400 = numLit$$1.value;
            v8467.value = -v16400;
            var v16401 = numLit$$1.value;
            var v8468 = v16401 == 0;
            if(v8468) {
              numLit$$1.isNegativeZero = true
            }
            ast$$42 = tempExpr
          }else {
            var v8469 = TypeScript$$14.UnaryExpression;
            var v8470 = tokenInfo$$1.unopNodeType;
            ast$$42 = JAMScript.new(v8469, [v8470, tempExpr]);
            ast$$42.limChar = tempExpr.limChar
          }
        }
        ast$$42.minChar = minChar$$25
      }else {
        var v23946 = TypeScript$$14.ErrorRecoverySet;
        var v21100 = v23946.BinOp;
        var v23947 = TypeScript$$14.ErrorRecoverySet;
        var v21101 = v23947.AddOp;
        var v16402 = v21100 | v21101;
        var v8473 = v16402 | errorRecoverySet$$31;
        ast$$42 = JAMScript.call(this.parseTerm, this, [v8473, true, typeContext$$1, false]);
        var id$$13;
        var temp$$14;
        var v16403 = ast$$42.nodeType;
        var v21102 = TypeScript$$14.NodeType;
        var v16404 = v21102.Name;
        var v8483 = v16403 == v16404;
        if(v8483) {
          id$$13 = ast$$42;
          idHint$$1 = id$$13.actualText
        }else {
          var v16405 = ast$$42.nodeType;
          var v21103 = TypeScript$$14.NodeType;
          var v16406 = v21103.Dot;
          var v8482 = v16405 == v16406;
          if(v8482) {
            var subsumedExpr = false;
            var v16407 = this.inferPropertiesFromThisAssignment;
            if(v16407) {
              var v26126 = this.currentToken;
              var v25381 = v26126.tokenId;
              var v26127 = TypeScript$$14.TokenID;
              var v25382 = v26127.Colon;
              var v23948 = v25381 == v25382;
              var v25385 = !v23948;
              if(v25385) {
                var v26128 = this.currentToken;
                var v25383 = v26128.tokenId;
                var v26129 = TypeScript$$14.TokenID;
                var v25384 = v26129.Equals;
                v23948 = v25383 == v25384
              }
              var v21104 = v23948;
              if(v21104) {
                var v23949 = this.parsingClassConstructorDefinition;
                if(v23949) {
                  var v26130 = this.nestingLevel;
                  var v26539 = this.currentClassDefinition;
                  var v26131 = v26539.constructorNestingLevel;
                  var v25386 = v26130 == v26131;
                  if(v25386) {
                    var v26540 = ast$$42.operand1;
                    var v26132 = v26540.nodeType;
                    var v26541 = TypeScript$$14.NodeType;
                    var v26133 = v26541.This;
                    v25386 = v26132 == v26133
                  }
                  v23949 = v25386
                }
                v21104 = v23949
              }
              v16407 = v21104
            }
            var v8478 = v16407;
            if(v8478) {
              var v21105 = ast$$42.operand2;
              var v16408 = v21105.nodeType;
              var v21106 = TypeScript$$14.NodeType;
              var v16409 = v21106.Name;
              var v8477 = v16408 == v16409;
              if(v8477) {
                var op2ID = ast$$42.operand2;
                var v23950 = this.currentClassDefinition;
                var v21107 = v23950.knownMemberNames;
                var v21108 = op2ID.actualText;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v16410 = v21107[v21108]
                }
                var v8476 = !v16410;
                if(v8476) {
                  var v8474 = ast$$42.minChar;
                  var v16411 = TypeScript$$14.Modifiers;
                  var v8475 = v16411.Public;
                  ast$$42 = JAMScript.call(this.parseClassMemberVariableDeclaration, this, [op2ID, v8474, true, errorRecoverySet$$31, v8475]);
                  subsumedExpr = true
                }
              }
            }
            var v8481 = !subsumedExpr;
            if(v8481) {
              temp$$14 = ast$$42;
              var v16412 = temp$$14.nodeType;
              var v21109 = TypeScript$$14.NodeType;
              var v16413 = v21109.Dot;
              var v8479 = v16412 == v16413;
              for(;v8479;) {
                var binExpr$$1 = temp$$14;
                temp$$14 = binExpr$$1.operand2;
                var v16414 = temp$$14.nodeType;
                var v21110 = TypeScript$$14.NodeType;
                var v16415 = v21110.Dot;
                v8479 = v16414 == v16415
              }
              var v16416 = temp$$14.nodeType;
              var v21111 = TypeScript$$14.NodeType;
              var v16417 = v21111.Name;
              var v8480 = v16416 == v16417;
              if(v8480) {
                id$$13 = temp$$14;
                idHint$$1 = id$$13.actualText
              }
            }
          }
        }
        var v23951 = this.scanner;
        var v21112 = JAMScript.call(v23951.lastTokenHadNewline, v23951, []);
        var v16418 = !v21112;
        if(v16418) {
          var v25387 = this.currentToken;
          var v23952 = v25387.tokenId;
          var v25388 = TypeScript$$14.TokenID;
          var v23953 = v25388.PlusPlus;
          var v21113 = v23952 == v23953;
          var v23956 = !v21113;
          if(v23956) {
            var v25389 = this.currentToken;
            var v23954 = v25389.tokenId;
            var v25390 = TypeScript$$14.TokenID;
            var v23955 = v25390.MinusMinus;
            v21113 = v23954 == v23955
          }
          v16418 = v21113
        }
        var v8488 = v16418;
        if(v8488) {
          canAssign = false;
          var operand$$2 = ast$$42;
          var v8484 = TypeScript$$14.UnaryExpression;
          var v16419;
          var v25391 = this.currentToken;
          var v23957 = v25391.tokenId;
          var v25392 = TypeScript$$14.TokenID;
          var v23958 = v25392.PlusPlus;
          var v21116 = v23957 == v23958;
          if(v21116) {
            var v21114 = TypeScript$$14.NodeType;
            v16419 = v21114.IncPost
          }else {
            var v21115 = TypeScript$$14.NodeType;
            v16419 = v21115.DecPost
          }
          var v8485 = v16419;
          ast$$42 = JAMScript.new(v8484, [v8485, operand$$2]);
          var v8486 = this.scanner;
          ast$$42.limChar = v8486.pos;
          ast$$42.minChar = operand$$2.minChar;
          var v8487 = this.scanner;
          var v27328 = JAMScript.call(v8487.scan, v8487, []);
          this.currentToken = v27328
        }
      }
      for(;;) {
        var v16420 = this.currentToken;
        var v8490 = v16420.tokenId;
        tokenInfo$$1 = JAMScript.call(TypeScript$$14.lookupToken, TypeScript$$14, [v8490]);
        var v16421 = tokenInfo$$1 == undefined;
        var v21119 = !v16421;
        if(v21119) {
          var v21117 = tokenInfo$$1.binopNodeType;
          var v23959 = TypeScript$$14.NodeType;
          var v21118 = v23959.None;
          v16421 = v21117 == v21118
        }
        var v8491 = v16421;
        if(v8491) {
          break
        }
        var v16422 = !allowIn$$1;
        if(v16422) {
          var v21120 = tokenInfo$$1.binopNodeType;
          var v23960 = TypeScript$$14.NodeType;
          var v21121 = v23960.In;
          v16422 = v21120 == v21121
        }
        var v8492 = v16422;
        if(v8492) {
          break
        }
        var v16423 = tokenInfo$$1.binopPrecedence;
        var v21122 = TypeScript$$14.OperatorPrecedence;
        var v16424 = v21122.Assignment;
        var v8496 = v16423 == v16424;
        if(v8496) {
          var v16425 = tokenInfo$$1.binopPrecedence;
          var v8493 = v16425 < minPrecedence;
          if(v8493) {
            break
          }
          var v8494 = !canAssign;
          if(v8494) {
            JAMScript.call(this.reportParseError, this, ["illegal assignment"])
          }
        }else {
          var v16426 = tokenInfo$$1.binopPrecedence;
          var v8495 = v16426 <= minPrecedence;
          if(v8495) {
            break
          }
        }
        var v16427 = possiblyInLambda;
        if(v16427) {
          var v25393 = this.currentToken;
          var v23961 = v25393.tokenId;
          var v25394 = TypeScript$$14.TokenID;
          var v23962 = v25394.Comma;
          var v21123 = v23961 == v23962;
          if(v21123) {
            var v26134 = this.scanner;
            var v25395 = JAMScript.call(v26134.getLookAheadToken, v26134, []);
            var v23963 = v25395.tokenId;
            var v25396 = TypeScript$$14.TokenID;
            var v23964 = v25396.DotDotDot;
            v21123 = v23963 == v23964
          }
          v16427 = v21123
        }
        var v8497 = v16427;
        if(v8497) {
          exprIsAnonLambda = true;
          canAssign = false;
          ast$$42 = JAMScript.call(this.parseLambdaExpr, this, [errorRecoverySet$$31, ast$$42, false, true]);
          break
        }
        var v8498 = this.scanner;
        var v27329 = JAMScript.call(v8498.scan, v8498, []);
        this.currentToken = v27329;
        canAssign = false;
        var v16428 = tokenInfo$$1.binopNodeType;
        var v21124 = TypeScript$$14.NodeType;
        var v16429 = v21124.ConditionalExpression;
        var v8514 = v16428 == v16429;
        if(v8514) {
          var v16430 = possiblyInLambda;
          if(v16430) {
            var v25397 = this.currentToken;
            var v23965 = v25397.tokenId;
            var v25398 = TypeScript$$14.TokenID;
            var v23966 = v25398.Equals;
            var v21125 = v23965 == v23966;
            var v23968 = !v21125;
            if(v23968) {
              var v26135 = this.currentToken;
              var v25399 = v26135.tokenId;
              var v26136 = TypeScript$$14.TokenID;
              var v25400 = v26136.Colon;
              var v23967 = v25399 == v25400;
              var v25402 = !v23967;
              if(v25402) {
                var v26542 = this.currentToken;
                var v26137 = v26542.tokenId;
                var v26543 = TypeScript$$14.TokenID;
                var v26138 = v26543.CloseParen;
                var v25401 = v26137 == v26138;
                var v26141 = !v25401;
                if(v26141) {
                  var v26544 = this.currentToken;
                  var v26139 = v26544.tokenId;
                  var v26545 = TypeScript$$14.TokenID;
                  var v26140 = v26545.Comma;
                  v25401 = v26139 == v26140
                }
                v23967 = v25401
              }
              v21125 = v23967
            }
            v16430 = v21125
          }
          var v8508 = v16430;
          if(v8508) {
            exprIsAnonLambda = true;
            canAssign = true
          }else {
            this.prevExpr = ast$$42;
            var v21126 = TypeScript$$14.ErrorRecoverySet;
            var v16431 = v21126.Colon;
            var v8499 = errorRecoverySet$$31 | v16431;
            var v16432 = TypeScript$$14.OperatorPrecedence;
            var v8500 = v16432.Assignment;
            var v8501 = TypeContext.NoTypes;
            var whenTrue = JAMScript.call(this.parseExpr, this, [v8499, v8500, allowIn$$1, v8501]);
            this.prevExpr = null;
            var v16433 = TypeScript$$14.TokenID;
            var v8502 = v16433.Colon;
            var v21127 = TypeScript$$14.ErrorRecoverySet;
            var v16434 = v21127.ExprStart;
            var v8503 = errorRecoverySet$$31 | v16434;
            JAMScript.call(this.checkCurrentToken, this, [v8502, v8503]);
            var v21128 = TypeScript$$14.ErrorRecoverySet;
            var v16435 = v21128.BinOp;
            var v8504 = errorRecoverySet$$31 | v16435;
            var v16436 = TypeScript$$14.OperatorPrecedence;
            var v8505 = v16436.Assignment;
            var v8506 = TypeContext.NoTypes;
            var whenFalse = JAMScript.call(this.parseExpr, this, [v8504, v8505, allowIn$$1, v8506]);
            var v8507 = TypeScript$$14.ConditionalExpression;
            ast$$42 = JAMScript.new(v8507, [ast$$42, whenTrue, whenFalse])
          }
        }else {
          var tc = TypeContext.NoTypes;
          var binExpr2;
          var v8509 = TypeScript$$14.BinaryExpression;
          var v8510 = tokenInfo$$1.binopNodeType;
          var v23969 = TypeScript$$14.ErrorRecoverySet;
          var v21129 = v23969.BinOp;
          var v16437 = errorRecoverySet$$31 | v21129;
          var v16438 = tokenInfo$$1.binopPrecedence;
          var v16439 = TypeContext.NoTypes;
          var v8511 = JAMScript.call(this.parseExpr, this, [v16437, v16438, allowIn$$1, v16439, possiblyInLambda]);
          binExpr2 = JAMScript.new(v8509, [v8510, ast$$42, v8511]);
          var v21130 = binExpr2.operand2;
          var v16440 = v21130.nodeType;
          var v21131 = TypeScript$$14.NodeType;
          var v16441 = v21131.FuncDecl;
          var v8512 = v16440 == v16441;
          if(v8512) {
            var funcDecl$$12 = binExpr2.operand2;
            funcDecl$$12.hint = idHint$$1
          }
          binExpr2.minChar = ast$$42.minChar;
          var v8513 = binExpr2;
          var v16442 = this.scanner;
          var v27330 = JAMScript.call(v16442.lastTokenLimChar, v16442, []);
          v8513.limChar = v27330;
          idHint$$1 = null;
          ast$$42 = binExpr2
        }
      }
      if(canAssign) {
        var v16443 = ast$$42;
        var v21132 = ast$$42.flags;
        var v23970 = TypeScript$$14.ASTFlags;
        var v21133 = v23970.Writeable;
        v16443.flags = v21132 | v21133
      }
      var v8517 = !exprIsAnonLambda;
      if(v8517) {
        ast$$42.minChar = minChar$$25;
        var v8515 = ast$$42;
        var v16444 = ast$$42.limChar;
        var v21134 = this.scanner;
        var v16445 = JAMScript.call(v21134.lastTokenLimChar, v21134, []);
        var v27331 = JAMScript.call(TypeScript$$14.max, TypeScript$$14, [v16444, v16445]);
        v8515.limChar = v27331;
        ast$$42.preComments = preComments$$4;
        var v8516 = ast$$42;
        var v21135 = this.scanner;
        var v16446 = v21135.line;
        var v27332 = JAMScript.call(this.parseCommentsForLine, this, [v16446]);
        v8516.postComments = v27332
      }
      return ast$$42
    }
    function v578(errorRecoverySet$$30, lambdaArgs, skipNextRParen, expectClosingRParen$$2) {
      var v16447 = TypeScript$$14.Modifiers;
      var v8518 = v16447.None;
      var v8519 = {preProcessedLambdaArgs:lambdaArgs};
      var ast$$41 = JAMScript.call(this.parseFncDecl, this, [errorRecoverySet$$30, false, false, false, null, false, false, false, v8518, v8519, expectClosingRParen$$2]);
      var v16448 = ast$$41;
      var v21136 = ast$$41.fncFlags;
      var v23971 = TypeScript$$14.FncFlags;
      var v21137 = v23971.IsFunctionExpression;
      v16448.fncFlags = v21136 | v21137;
      var v16449 = ast$$41;
      var v21138 = ast$$41.fncFlags;
      var v23972 = TypeScript$$14.FncFlags;
      var v21139 = v23972.IsFatArrowFunction;
      v16449.fncFlags = v21138 | v21139;
      var v8520 = !skipNextRParen;
      if(v8520) {
        var v16450 = ast$$41;
        var v21140 = ast$$41.flags;
        var v23973 = TypeScript$$14.ASTFlags;
        var v21141 = v23973.SkipNextRParen;
        v16450.flags = v21140 | v21141
      }
      var v8521 = ast$$41;
      var v16451 = this.scanner;
      var v27333 = JAMScript.call(v16451.lastTokenLimChar, v16451, []);
      v8521.limChar = v27333;
      return ast$$41
    }
    function v577(errorRecoverySet$$29, allowCall, typeContext, inCast) {
      var ast$$40 = null;
      var sawId = false;
      var inNew = false;
      var v8522 = this.scanner;
      var minChar$$24 = v8522.startPos;
      var v8523 = this.scanner;
      var limChar$$7 = v8523.pos;
      var parseAsLambda = false;
      var expectlambdaRParen = false;
      var v16452 = this.currentToken;
      var v8557 = v16452.tokenId;
      switch(v8557) {
        case TypeScript$$14.TokenID.Number:
        ;
        case TypeScript$$14.TokenID.Bool:
        ;
        case TypeScript$$14.TokenID.Any:
        ;
        case TypeScript$$14.TokenID.String:
          var v8524 = TypeScript$$14.Identifier;
          var v21142 = TypeScript$$14.tokenTable;
          var v23974 = this.currentToken;
          var v21143 = v23974.tokenId;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v16453 = v21142[v21143]
          }
          var v8525 = v16453.text;
          var tid = JAMScript.new(v8524, [v8525]);
          var v16454 = TypeContext.Primitive;
          var v8527 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [typeContext, v16454]);
          if(v8527) {
            var v8526 = TypeScript$$14.TypeReference;
            ast$$40 = JAMScript.new(v8526, [tid, 0]);
            sawId = true
          }else {
            ast$$40 = tid;
            sawId = true
          }
          ast$$40.minChar = minChar$$24;
          var v8528 = this.scanner;
          var v27334 = JAMScript.call(v8528.scan, v8528, []);
          this.currentToken = v27334;
          var v8529 = this.scanner;
          limChar$$7 = JAMScript.call(v8529.lastTokenLimChar, v8529, []);
          break;
        case TypeScript$$14.TokenID.This:
          var v8530 = TypeScript$$14.AST;
          var v16455 = TypeScript$$14.NodeType;
          var v8531 = v16455.This;
          ast$$40 = JAMScript.new(v8530, [v8531]);
          ast$$40.minChar = minChar$$24;
          var v8532 = this.scanner;
          var v27335 = JAMScript.call(v8532.scan, v8532, []);
          this.currentToken = v27335;
          var v8533 = this.scanner;
          limChar$$7 = JAMScript.call(v8533.lastTokenLimChar, v8533, []);
          break;
        case TypeScript$$14.TokenID.Super:
          var v8534 = TypeScript$$14.AST;
          var v16456 = TypeScript$$14.NodeType;
          var v8535 = v16456.Super;
          ast$$40 = JAMScript.new(v8534, [v8535]);
          ast$$40.minChar = minChar$$24;
          var v8536 = this.scanner;
          var v27336 = JAMScript.call(v8536.scan, v8536, []);
          this.currentToken = v27336;
          var v8537 = this.scanner;
          limChar$$7 = JAMScript.call(v8537.lastTokenLimChar, v8537, []);
          break;
        case TypeScript$$14.TokenID.True:
          var v8538 = TypeScript$$14.AST;
          var v16457 = TypeScript$$14.NodeType;
          var v8539 = v16457.True;
          ast$$40 = JAMScript.new(v8538, [v8539]);
          var v8540 = this.scanner;
          var v27337 = JAMScript.call(v8540.scan, v8540, []);
          this.currentToken = v27337;
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.False:
          var v8541 = TypeScript$$14.AST;
          var v16458 = TypeScript$$14.NodeType;
          var v8542 = v16458.False;
          ast$$40 = JAMScript.new(v8541, [v8542]);
          var v8543 = this.scanner;
          var v27338 = JAMScript.call(v8543.scan, v8543, []);
          this.currentToken = v27338;
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.Null:
          var v8544 = TypeScript$$14.AST;
          var v16459 = TypeScript$$14.NodeType;
          var v8545 = v16459.Null;
          ast$$40 = JAMScript.new(v8544, [v8545]);
          var v8546 = this.scanner;
          var v27339 = JAMScript.call(v8546.scan, v8546, []);
          this.currentToken = v27339;
          ast$$40.minChar = minChar$$24;
          break;
        case TypeScript$$14.TokenID.New:
          var v8547 = this.scanner;
          minChar$$24 = v8547.pos;
          var v8548 = this.scanner;
          var v27340 = JAMScript.call(v8548.scan, v8548, []);
          this.currentToken = v27340;
          var v8549 = TypeContext.AllSimpleTypes;
          var target$$41 = JAMScript.call(this.parseTerm, this, [errorRecoverySet$$29, false, v8549, inCast]);
          var v21144 = target$$41.nodeType;
          var v23975 = TypeScript$$14.NodeType;
          var v21145 = v23975.Error;
          var v16460 = v21144 == v21145;
          var v21147 = !v16460;
          if(v21147) {
            var v23976 = target$$41.nodeType;
            var v25403 = TypeScript$$14.NodeType;
            var v23977 = v25403.Index;
            var v21146 = v23976 == v23977;
            if(v21146) {
              var v25404 = target$$41.operand1;
              var v23978 = v25404.nodeType;
              var v25405 = TypeScript$$14.NodeType;
              var v23979 = v25405.TypeRef;
              v21146 = v23978 == v23979
            }
            v16460 = v21146
          }
          var v8553 = v16460;
          if(v8553) {
            JAMScript.call(this.reportParseError, this, ["Cannot invoke 'new' on this expression"])
          }else {
            var v8550 = TypeScript$$14.CallExpression;
            var v16461 = TypeScript$$14.NodeType;
            var v8551 = v16461.New;
            ast$$40 = JAMScript.new(v8550, [v8551, target$$41, null]);
            ast$$40.minChar = minChar$$24;
            var v8552 = this.scanner;
            limChar$$7 = JAMScript.call(v8552.lastTokenLimChar, v8552, []);
            inNew = true
          }
          break;
        case TypeScript$$14.TokenID.Function:
          var v8554 = this.scanner;
          minChar$$24 = v8554.pos;
          var v16462 = TypeScript$$14.Modifiers;
          var v8555 = v16462.None;
          ast$$40 = JAMScript.call(this.parseFncDecl, this, [errorRecoverySet$$29, false, false, false, null, false, false, false, v8555, null, true]);
          var v16463 = ast$$40;
          var v21148 = ast$$40.fncFlags;
          var v23980 = TypeScript$$14.FncFlags;
          var v21149 = v23980.IsFunctionExpression;
          v16463.fncFlags = v21148 | v21149;
          ast$$40.minChar = minChar$$24;
          var v8556 = this.scanner;
          limChar$$7 = JAMScript.call(v8556.lastTokenLimChar, v8556, []);
          ast$$40.limChar = limChar$$7
      }
      var v8564 = ast$$40 == null;
      if(v8564) {
        var v23981 = this.currentToken;
        var v21150 = v23981.tokenId;
        var v23982 = TypeScript$$14.TokenID;
        var v21151 = v23982.Identifier;
        var v16464 = v21150 == v21151;
        var v21154 = !v16464;
        if(v21154) {
          var v21152 = this.currentToken;
          var v21153 = this.strictMode;
          v16464 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21152, v21153])
        }
        var v8563 = v16464;
        if(v8563) {
          var v8558 = this.currentToken;
          var idText$$1 = JAMScript.call(v8558.getText, v8558, []);
          var v16465 = this.currentToken;
          var v8559 = v16465.hasEscapeSequence;
          ast$$40 = JAMScript.call(this.createRef, this, [idText$$1, v8559, minChar$$24]);
          sawId = true;
          ast$$40.minChar = minChar$$24;
          var v8560 = this.scanner;
          var v27341 = JAMScript.call(v8560.scan, v8560, []);
          this.currentToken = v27341;
          var v21155 = this.currentToken;
          var v16466 = v21155.tokenId;
          var v21156 = TypeScript$$14.TokenID;
          var v16467 = v21156.Question;
          var v8561 = v16466 == v16467;
          if(v8561) {
            var v16468 = ast$$40;
            var v21157 = ast$$40.flags;
            var v23983 = TypeScript$$14.ASTFlags;
            var v21158 = v23983.PossibleOptionalParameter;
            v16468.flags = v21157 | v21158
          }
          var v8562 = this.scanner;
          limChar$$7 = JAMScript.call(v8562.lastTokenLimChar, v8562, [])
        }
      }
      if(inCast) {
        var v16469 = TypeScript$$14.TokenID;
        var v8565 = v16469.GreaterThan;
        JAMScript.call(this.checkCurrentToken, this, [v8565, errorRecoverySet$$29])
      }
      var v8625 = ast$$40 == null;
      if(v8625) {
        var v16470 = this.currentToken;
        var v8624 = v16470.tokenId;
        switch(v8624) {
          case TypeScript$$14.TokenID.OpenParen:
            var v8566 = this.scanner;
            minChar$$24 = v8566.pos;
            var v16471 = this.scanner;
            var v8567 = JAMScript.call(v16471.previousToken, v16471, []);
            var prevTokId = v8567.tokenId;
            var v8568 = this.scanner;
            var v27342 = JAMScript.call(v8568.scan, v8568, []);
            this.currentToken = v27342;
            var v21159 = TypeScript$$14.TokenID;
            var v16472 = v21159.OpenParen;
            var v8569 = prevTokId == v16472;
            var v16474 = !v8569;
            if(v16474) {
              var v23984 = TypeScript$$14.TokenID;
              var v21160 = v23984.Comma;
              var v16473 = prevTokId == v21160;
              var v21162 = !v16473;
              if(v21162) {
                var v25406 = TypeScript$$14.TokenID;
                var v23985 = v25406.EqualsEquals;
                var v21161 = prevTokId == v23985;
                var v23987 = !v21161;
                if(v23987) {
                  var v25407 = TypeScript$$14.TokenID;
                  var v23986 = v25407.Colon;
                  v21161 = prevTokId == v23986
                }
                v16473 = v21161
              }
              v8569 = v16473
            }
            var couldBeLambda = v8569;
            var v16475 = couldBeLambda;
            if(v16475) {
              var v23988 = this.currentToken;
              var v21163 = v23988.tokenId;
              var v23989 = TypeScript$$14.TokenID;
              var v21164 = v23989.CloseParen;
              v16475 = v21163 == v21164
            }
            var v8577 = v16475;
            if(v8577) {
              parseAsLambda = true;
              expectlambdaRParen = false;
              var v8570 = this.scanner;
              var v27343 = JAMScript.call(v8570.scan, v8570, []);
              this.currentToken = v27343
            }else {
              var v16476 = couldBeLambda;
              if(v16476) {
                var v23990 = this.currentToken;
                var v21165 = v23990.tokenId;
                var v23991 = TypeScript$$14.TokenID;
                var v21166 = v23991.DotDotDot;
                v16476 = v21165 == v21166
              }
              var v8576 = v16476;
              if(v8576) {
                parseAsLambda = true;
                expectlambdaRParen = true
              }else {
                var v21167 = TypeScript$$14.ErrorRecoverySet;
                var v16477 = v21167.RParen;
                var v8571 = errorRecoverySet$$29 | v16477;
                var v16478 = TypeScript$$14.OperatorPrecedence;
                var v8572 = v16478.None;
                var v8573 = TypeContext.NoTypes;
                ast$$40 = JAMScript.call(this.parseExpr, this, [v8571, v8572, true, v8573, couldBeLambda]);
                var v8574 = this.scanner;
                limChar$$7 = JAMScript.call(v8574.lastTokenLimChar, v8574, []);
                var v8575 = couldBeLambda;
                if(v8575) {
                  var v23992 = ast$$40.nodeType;
                  var v25408 = TypeScript$$14.NodeType;
                  var v23993 = v25408.Name;
                  var v21168 = v23992 == v23993;
                  var v23996 = !v21168;
                  if(v23996) {
                    var v23994 = ast$$40.nodeType;
                    var v25409 = TypeScript$$14.NodeType;
                    var v23995 = v25409.Comma;
                    v21168 = v23994 == v23995
                  }
                  var v16479 = v21168;
                  if(v16479) {
                    var v25410 = this.currentToken;
                    var v23997 = v25410.tokenId;
                    var v25411 = TypeScript$$14.TokenID;
                    var v23998 = v25411.Colon;
                    var v21169 = v23997 == v23998;
                    var v24001 = !v21169;
                    if(v24001) {
                      var v25412 = this.currentToken;
                      var v23999 = v25412.tokenId;
                      var v25413 = TypeScript$$14.TokenID;
                      var v24000 = v25413.Question;
                      v21169 = v23999 == v24000
                    }
                    v16479 = v21169
                  }
                  v8575 = v16479
                }
                parseAsLambda = v8575;
                expectlambdaRParen = true
              }
            }
            var v16480 = ast$$40;
            if(v16480) {
              v16480 = !parseAsLambda
            }
            var v8581 = v16480;
            if(v8581) {
              var v16481 = ast$$40.flags;
              var v21170 = TypeScript$$14.ASTFlags;
              var v16482 = v21170.SkipNextRParen;
              var v8579 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [v16481, v16482]);
              if(v8579) {
                var v8578 = ast$$40;
                var v16483 = ast$$40.flags;
                var v24002 = TypeScript$$14.ASTFlags;
                var v21171 = v24002.SkipNextRParen;
                var v16484 = ~v21171;
                v8578.flags = v16483 & v16484;
                break
              }
              var v16485 = TypeScript$$14.TokenID;
              var v8580 = v16485.CloseParen;
              JAMScript.call(this.checkCurrentToken, this, [v8580, errorRecoverySet$$29]);
              ast$$40.isParenthesized = true
            }
            break;
          case TypeScript$$14.TokenID.NumberLiteral:
            var numTok = this.currentToken;
            var v8582 = this.scanner;
            var v27344 = JAMScript.call(v8582.scan, v8582, []);
            this.currentToken = v27344;
            var v8583 = TypeScript$$14.NumberLiteral;
            var v8584 = numTok.value;
            var v8585 = numTok.hasEmptyFraction;
            ast$$40 = JAMScript.new(v8583, [v8584, v8585]);
            ast$$40.minChar = minChar$$24;
            var v8586 = this.scanner;
            limChar$$7 = JAMScript.call(v8586.lastTokenLimChar, v8586, []);
            break;
          case TypeScript$$14.TokenID.StringLiteral:
            var v8587 = TypeScript$$14.StringLiteral;
            var v16486 = this.currentToken;
            var v8588 = JAMScript.call(v16486.getText, v16486, []);
            ast$$40 = JAMScript.new(v8587, [v8588]);
            var v8589 = this.scanner;
            var v27345 = JAMScript.call(v8589.scan, v8589, []);
            this.currentToken = v27345;
            ast$$40.minChar = minChar$$24;
            var v8590 = this.scanner;
            limChar$$7 = JAMScript.call(v8590.lastTokenLimChar, v8590, []);
            break;
          case TypeScript$$14.TokenID.RegularExpressionLiteral:
            var rtok = this.currentToken;
            var v8591 = TypeScript$$14.RegexLiteral;
            var v8592 = rtok.regex;
            ast$$40 = JAMScript.new(v8591, [v8592]);
            var v8593 = this.scanner;
            var v27346 = JAMScript.call(v8593.scan, v8593, []);
            this.currentToken = v27346;
            ast$$40.minChar = minChar$$24;
            var v8594 = this.scanner;
            limChar$$7 = JAMScript.call(v8594.lastTokenLimChar, v8594, []);
            break;
          case TypeScript$$14.TokenID.OpenBracket:
            var v8595 = this.scanner;
            minChar$$24 = v8595.startPos;
            var v8596 = this.scanner;
            var v27347 = JAMScript.call(v8596.scan, v8596, []);
            this.currentToken = v27347;
            var v21172 = TypeScript$$14.ErrorRecoverySet;
            var v16487 = v21172.RBrack;
            var v8597 = v16487 | errorRecoverySet$$29;
            ast$$40 = JAMScript.call(this.parseArrayLiteral, this, [v8597]);
            ast$$40.minChar = minChar$$24;
            var v8598 = this.scanner;
            limChar$$7 = v8598.pos;
            var v16488 = TypeScript$$14.TokenID;
            var v8599 = v16488.CloseBracket;
            JAMScript.call(this.checkCurrentToken, this, [v8599, errorRecoverySet$$29]);
            break;
          case TypeScript$$14.TokenID.OpenBrace:
            var v8600 = this.scanner;
            minChar$$24 = v8600.startPos;
            var v8601 = this.scanner;
            var v27348 = JAMScript.call(v8601.scan, v8601, []);
            this.currentToken = v27348;
            var v21173 = TypeScript$$14.ErrorRecoverySet;
            var v16489 = v21173.RCurly;
            var v8602 = v16489 | errorRecoverySet$$29;
            var members$$11 = JAMScript.call(this.parseMemberList, this, [v8602]);
            var v16490 = TypeScript$$14.TokenID;
            var v8603 = v16490.CloseBrace;
            JAMScript.call(this.checkCurrentToken, this, [v8603, errorRecoverySet$$29]);
            var v8604 = TypeScript$$14.UnaryExpression;
            var v16491 = TypeScript$$14.NodeType;
            var v8605 = v16491.ObjectLit;
            ast$$40 = JAMScript.new(v8604, [v8605, members$$11]);
            ast$$40.minChar = minChar$$24;
            var v8606 = this.scanner;
            limChar$$7 = JAMScript.call(v8606.lastTokenLimChar, v8606, []);
            members$$11.minChar = minChar$$24;
            members$$11.limChar = limChar$$7;
            break;
          case TypeScript$$14.TokenID.LessThan:
            var v8607 = this.scanner;
            minChar$$24 = v8607.startPos;
            var v8608 = this.scanner;
            var v27349 = JAMScript.call(v8608.scan, v8608, []);
            this.currentToken = v27349;
            var v16492 = TypeScript$$14.ErrorRecoverySet;
            var v8609 = v16492.BinOp;
            var term$$3 = JAMScript.call(this.parseTypeReference, this, [v8609, false]);
            var v16493 = TypeScript$$14.TokenID;
            var v8610 = v16493.GreaterThan;
            JAMScript.call(this.checkCurrentToken, this, [v8610, errorRecoverySet$$29]);
            var v8611 = TypeScript$$14.UnaryExpression;
            var v16494 = TypeScript$$14.NodeType;
            var v8612 = v16494.TypeAssertion;
            var v21174 = TypeScript$$14.OperatorPrecedence;
            var v16495 = v21174.Unary;
            var v16496 = TypeContext.NoTypes;
            var v8613 = JAMScript.call(this.parseExpr, this, [errorRecoverySet$$29, v16495, false, v16496]);
            ast$$40 = JAMScript.new(v8611, [v8612, v8613]);
            ast$$40.castTerm = term$$3;
            break;
          default:
            var v16497 = this.prevExpr;
            if(v16497) {
              var v24003 = this.prevExpr;
              var v21175 = v24003.flags;
              var v24004 = TypeScript$$14.ASTFlags;
              var v21176 = v24004.PossibleOptionalParameter;
              v16497 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [v21175, v21176])
            }
            var v8623 = v16497;
            if(v8623) {
              parseAsLambda = true;
              ast$$40 = this.prevExpr
            }else {
              JAMScript.call(this.reportParseError, this, ["Check format of expression term"]);
              var v8622 = this.errorRecovery;
              if(v8622) {
                var v8614 = TypeScript$$14.MissingIdentifier;
                var ident$$1 = JAMScript.new(v8614, []);
                ident$$1.minChar = minChar$$24;
                var v16498 = ident$$1;
                var v21177 = ident$$1.flags;
                var v24005 = TypeScript$$14.ASTFlags;
                var v21178 = v24005.Error;
                v16498.flags = v21177 | v21178;
                var v21179 = TypeScript$$14.ErrorRecoverySet;
                var v16499 = v21179.Postfix;
                var v8615 = errorRecoverySet$$29 | v16499;
                JAMScript.call(this.skip, this, [v8615]);
                var v24006 = this.currentToken;
                var v21180 = v24006.tokenId;
                var v24007 = TypeScript$$14.TokenID;
                var v21181 = v24007.Identifier;
                var v16500 = v21180 == v21181;
                var v21184 = !v16500;
                if(v21184) {
                  var v21182 = this.currentToken;
                  var v21183 = this.strictMode;
                  v16500 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21182, v21183])
                }
                var v8621 = v16500;
                if(v8621) {
                  var v16501 = this.currentToken;
                  var v8616 = JAMScript.call(v16501.getText, v16501, []);
                  var v16502 = this.currentToken;
                  var v8617 = v16502.hasEscapeSequence;
                  JAMScript.call(ident$$1.setText, ident$$1, [v8616, v8617]);
                  var v8618 = this.scanner;
                  var v27350 = JAMScript.call(v8618.scan, v8618, []);
                  this.currentToken = v27350;
                  var v8619 = this.scanner;
                  limChar$$7 = JAMScript.call(v8619.lastTokenLimChar, v8619, [])
                }else {
                  var v8620 = this.scanner;
                  limChar$$7 = JAMScript.call(v8620.lastTokenLimChar, v8620, [])
                }
                ast$$40 = ident$$1
              }
            }
        }
      }
      if(parseAsLambda) {
        var v24008 = this.currentToken;
        var v21185 = v24008.tokenId;
        var v24009 = TypeScript$$14.TokenID;
        var v21186 = v24009.Colon;
        var v16503 = v21185 == v21186;
        var v21188 = !v16503;
        if(v21188) {
          var v25414 = this.currentToken;
          var v24010 = v25414.tokenId;
          var v25415 = TypeScript$$14.TokenID;
          var v24011 = v25415.Comma;
          var v21187 = v24010 == v24011;
          var v24013 = !v21187;
          if(v24013) {
            var v26142 = this.currentToken;
            var v25416 = v26142.tokenId;
            var v26143 = TypeScript$$14.TokenID;
            var v25417 = v26143.CloseParen;
            var v24012 = v25416 == v25417;
            var v25420 = !v24012;
            if(v25420) {
              var v26144 = this.currentToken;
              var v25418 = v26144.tokenId;
              var v26145 = TypeScript$$14.TokenID;
              var v25419 = v26145.DotDotDot;
              v24012 = v25418 == v25419
            }
            v21187 = v24012
          }
          v16503 = v21187
        }
        var v8627 = v16503;
        if(v8627) {
          ast$$40 = JAMScript.call(this.parseLambdaExpr, this, [errorRecoverySet$$29, ast$$40, true, expectlambdaRParen]);
          ast$$40.minChar = minChar$$24;
          var v8626 = this.scanner;
          limChar$$7 = JAMScript.call(v8626.lastTokenLimChar, v8626, []);
          ast$$40.limChar = limChar$$7
        }else {
          if(ast$$40) {
            ast$$40.isParenthesized = true
          }
        }
      }
      var v16504 = sawId;
      if(v16504) {
        var v21189 = TypeContext.NoTypes;
        v16504 = typeContext != v21189
      }
      var v8628 = v16504;
      if(v8628) {
        var v16505 = TypeContext.ArraySuffix;
        typeContext = typeContext | v16505
      }
      var postFix = JAMScript.call(this.parsePostfixOperators, this, [errorRecoverySet$$29, ast$$40, allowCall, inNew, typeContext, minChar$$24, limChar$$7]);
      if(postFix) {
        var v16506 = sawId;
        if(v16506) {
          var v21190 = postFix.nodeType;
          var v24014 = TypeScript$$14.NodeType;
          var v21191 = v24014.Index;
          v16506 = v21190 == v21191
        }
        var v8630 = v16506;
        if(v8630) {
          var binExpr = postFix;
          var v16507 = binExpr.operand2;
          var v8629 = v16507 == null;
          if(v8629) {
            postFix = JAMScript.call(this.convertToTypeReference, this, [postFix])
          }
        }
        postFix.minChar = minChar$$24;
        var v8631 = postFix;
        var v16508 = postFix.limChar;
        var v21192 = this.scanner;
        var v16509 = JAMScript.call(v21192.lastTokenLimChar, v21192, []);
        var v27351 = JAMScript.call(TypeScript$$14.max, TypeScript$$14, [v16508, v16509]);
        v8631.limChar = v27351;
        return postFix
      }else {
        var v8632 = TypeScript$$14.AST;
        var v16510 = TypeScript$$14.NodeType;
        var v8633 = v16510.Error;
        return JAMScript.new(v8632, [v8633])
      }
      return
    }
    function v576(errorRecoverySet$$28) {
      var arrayLiteral = null;
      var v8634 = TypeScript$$14.UnaryExpression;
      var v16511 = TypeScript$$14.NodeType;
      var v8635 = v16511.ArrayLit;
      var v8636 = JAMScript.call(this.parseArrayList, this, [errorRecoverySet$$28]);
      arrayLiteral = JAMScript.new(v8634, [v8635, v8636]);
      return arrayLiteral
    }
    function v575(errorRecoverySet$$27) {
      var elements$$1 = null;
      var v21193 = this.currentToken;
      var v16512 = v21193.tokenId;
      var v21194 = TypeScript$$14.TokenID;
      var v16513 = v21194.CloseBracket;
      var v8639 = v16512 == v16513;
      if(v8639) {
        return elements$$1
      }else {
        var v8637 = TypeScript$$14.ASTList;
        elements$$1 = JAMScript.new(v8637, []);
        var v8638 = this.scanner;
        elements$$1.minChar = v8638.startPos
      }
      var arg$$12;
      for(;;) {
        var v24015 = this.currentToken;
        var v21195 = v24015.tokenId;
        var v24016 = TypeScript$$14.TokenID;
        var v21196 = v24016.Comma;
        var v16514 = v21195 == v21196;
        var v21199 = !v16514;
        if(v21199) {
          var v24017 = this.currentToken;
          var v21197 = v24017.tokenId;
          var v24018 = TypeScript$$14.TokenID;
          var v21198 = v24018.CloseBracket;
          v16514 = v21197 == v21198
        }
        var v8645 = v16514;
        if(v8645) {
          var v8640 = TypeScript$$14.AST;
          var v16515 = TypeScript$$14.NodeType;
          var v8641 = v16515.EmptyExpr;
          arg$$12 = JAMScript.new(v8640, [v8641])
        }else {
          var v21200 = TypeScript$$14.ErrorRecoverySet;
          var v16516 = v21200.Comma;
          var v8642 = v16516 | errorRecoverySet$$27;
          var v16517 = TypeScript$$14.OperatorPrecedence;
          var v8643 = v16517.Comma;
          var v8644 = TypeContext.NoTypes;
          arg$$12 = JAMScript.call(this.parseExpr, this, [v8642, v8643, true, v8644])
        }
        JAMScript.call(elements$$1.append, elements$$1, [arg$$12]);
        var v21201 = this.currentToken;
        var v16518 = v21201.tokenId;
        var v21202 = TypeScript$$14.TokenID;
        var v16519 = v21202.Comma;
        var v8646 = v16518 != v16519;
        if(v8646) {
          break
        }
        var v8647 = this.scanner;
        var v27352 = JAMScript.call(v8647.scan, v8647, []);
        this.currentToken = v27352
      }
      var v8648 = elements$$1;
      var v16520 = this.scanner;
      var v27353 = JAMScript.call(v16520.lastTokenLimChar, v16520, []);
      v8648.limChar = v27353;
      return elements$$1
    }
    function v574(errorRecoverySet$$26) {
      var v8649 = TypeScript$$14.ASTList;
      var elements = JAMScript.new(v8649, []);
      var v21203 = this.currentToken;
      var v16521 = v21203.tokenId;
      var v21204 = TypeScript$$14.TokenID;
      var v16522 = v21204.CloseBrace;
      var v8650 = v16521 == v16522;
      if(v8650) {
        return elements
      }
      var idHint = null;
      var memberName$$1 = null;
      var memberExpr = null;
      var member$$2 = null;
      var v8651 = this.scanner;
      var minChar$$23 = v8651.startPos;
      var isSet = false;
      var skippedTokenForGetSetId = false;
      var getSetTok = null;
      var getSetStartPos = 0;
      var getSetPos = 0;
      for(;;) {
        var accessorPattern = false;
        var v24019 = this.currentToken;
        var v21205 = v24019.tokenId;
        var v24020 = TypeScript$$14.TokenID;
        var v21206 = v24020.Get;
        var v16523 = v21205 == v21206;
        var v21209 = !v16523;
        if(v21209) {
          var v24021 = this.currentToken;
          var v21207 = v24021.tokenId;
          var v24022 = TypeScript$$14.TokenID;
          var v21208 = v24022.Set;
          v16523 = v21207 == v21208
        }
        var v8687 = v16523;
        if(v8687) {
          var v16524 = this.currentToken;
          var v8652 = v16524.tokenId;
          var v16525 = TypeScript$$14.TokenID;
          var v8653 = v16525.Set;
          isSet = v8652 == v8653;
          getSetTok = this.currentToken;
          var v8654 = this.scanner;
          getSetStartPos = v8654.startPos;
          var v8655 = this.scanner;
          getSetPos = v8655.pos;
          var v8656 = this.scanner;
          var v27354 = JAMScript.call(v8656.scan, v8656, []);
          this.currentToken = v27354;
          var v24023 = this.currentToken;
          var v21210 = v24023.tokenId;
          var v24024 = TypeScript$$14.TokenID;
          var v21211 = v24024.Identifier;
          var v16526 = v21210 == v21211;
          var v21213 = !v16526;
          if(v21213) {
            var v21212 = this.currentToken;
            v16526 = JAMScript.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v21212])
          }
          var v8665 = v16526;
          if(v8665) {
            var v8657;
            if(isSet) {
              v8657 = "set"
            }else {
              v8657 = "get"
            }
            idHint = v8657;
            var v16527 = this.currentToken;
            var v8658 = JAMScript.call(v16527.getText, v16527, []);
            idHint = idHint + v8658;
            var v8659 = TypeScript$$14.Identifier;
            var v8660 = this.currentToken;
            memberName$$1 = JAMScript.call(v8659.fromToken, v8659, [v8660]);
            var v8661 = this.scanner;
            memberName$$1.minChar = v8661.startPos;
            accessorPattern = true;
            var v16528 = TypeScript$$14.codeGenTarget;
            var v21214 = TypeScript$$14.CodeGenTarget;
            var v16529 = v21214.ES5;
            var v8662 = v16528 < v16529;
            if(v8662) {
              JAMScript.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"])
            }
          }else {
            var v21215 = this.currentToken;
            var v16530 = v21215.tokenId;
            var v21216 = TypeScript$$14.TokenID;
            var v16531 = v21216.Colon;
            var v8664 = v16530 != v16531;
            if(v8664) {
              JAMScript.call(this.reportParseError, this, ["Expected identifier, string or number as accessor name"])
            }else {
              skippedTokenForGetSetId = true;
              var v8663 = TypeScript$$14.Identifier;
              memberName$$1 = JAMScript.call(v8663.fromToken, v8663, [getSetTok]);
              memberName$$1.minChar = getSetStartPos;
              memberName$$1.limChar = getSetPos
            }
          }
        }else {
          var v24025 = this.currentToken;
          var v21217 = v24025.tokenId;
          var v24026 = TypeScript$$14.TokenID;
          var v21218 = v24026.Identifier;
          var v16532 = v21217 == v21218;
          var v21220 = !v16532;
          if(v21220) {
            var v21219 = this.currentToken;
            v16532 = JAMScript.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v21219])
          }
          var v8686 = v16532;
          if(v8686) {
            var v8666 = this.currentToken;
            idHint = JAMScript.call(v8666.getText, v8666, []);
            var v8667 = TypeScript$$14.Identifier;
            var v8668 = this.currentToken;
            memberName$$1 = JAMScript.call(v8667.fromToken, v8667, [v8668]);
            var v8669 = this.scanner;
            memberName$$1.minChar = v8669.startPos;
            var v8670 = this.scanner;
            memberName$$1.limChar = v8670.pos
          }else {
            var v21221 = this.currentToken;
            var v16533 = v21221.tokenId;
            var v21222 = TypeScript$$14.TokenID;
            var v16534 = v21222.StringLiteral;
            var v8685 = v16533 == v16534;
            if(v8685) {
              var v8671 = this.currentToken;
              idHint = JAMScript.call(v8671.getText, v8671, []);
              var v8672 = TypeScript$$14.StringLiteral;
              memberName$$1 = JAMScript.new(v8672, [idHint]);
              var v8673 = this.scanner;
              memberName$$1.minChar = v8673.startPos;
              var v8674 = this.scanner;
              memberName$$1.limChar = v8674.pos
            }else {
              var v21223 = this.currentToken;
              var v16535 = v21223.tokenId;
              var v21224 = TypeScript$$14.TokenID;
              var v16536 = v21224.NumberLiteral;
              var v8684 = v16535 == v16536;
              if(v8684) {
                var ntok = this.currentToken;
                var v8675 = ntok.value;
                idHint = JAMScript.call(v8675.toString, v8675, []);
                var v8676 = TypeScript$$14.StringLiteral;
                memberName$$1 = JAMScript.new(v8676, [idHint]);
                var v8677 = this.scanner;
                memberName$$1.minChar = v8677.startPos;
                var v8678 = this.scanner;
                memberName$$1.limChar = v8678.pos
              }else {
                JAMScript.call(this.reportParseError, this, ["Expected identifier, string or number as member name"]);
                var v8683 = this.errorRecovery;
                if(v8683) {
                  var v8679 = TypeScript$$14.MissingIdentifier;
                  memberName$$1 = JAMScript.new(v8679, []);
                  var v8680 = this.scanner;
                  memberName$$1.minChar = v8680.startPos;
                  var v16537 = memberName$$1;
                  var v21225 = memberName$$1.flags;
                  var v24027 = TypeScript$$14.ASTFlags;
                  var v21226 = v24027.Error;
                  v16537.flags = v21225 | v21226;
                  var v21227 = TypeScript$$14.ErrorRecoverySet;
                  var v16538 = v21227.Comma;
                  var v8681 = errorRecoverySet$$26 | v16538;
                  JAMScript.call(this.skip, this, [v8681]);
                  var v8682 = memberName$$1;
                  var v16539 = this.scanner;
                  var v27355 = JAMScript.call(v16539.lastTokenLimChar, v16539, []);
                  v8682.limChar = v27355
                }
              }
            }
          }
        }
        var v8689 = !skippedTokenForGetSetId;
        if(v8689) {
          var v8688 = this.scanner;
          var v27356 = JAMScript.call(v8688.scan, v8688, []);
          this.currentToken = v27356
        }else {
          skippedTokenForGetSetId = false
        }
        var v21228 = this.currentToken;
        var v16540 = v21228.tokenId;
        var v21229 = TypeScript$$14.TokenID;
        var v16541 = v21229.Question;
        var v8691 = v16540 == v16541;
        if(v8691) {
          var v16542 = memberName$$1;
          var v21230 = memberName$$1.flags;
          var v24028 = TypeScript$$14.ASTFlags;
          var v21231 = v24028.OptionalName;
          v16542.flags = v21230 | v21231;
          var v8690 = this.scanner;
          var v27357 = JAMScript.call(v8690.scan, v8690, []);
          this.currentToken = v27357
        }
        if(accessorPattern) {
          var v8692 = TypeScript$$14.ASTList;
          var args$$10 = JAMScript.new(v8692, []);
          var v21232 = TypeScript$$14.ErrorRecoverySet;
          var v16543 = v21232.RParen;
          var v8693 = errorRecoverySet$$26 | v16543;
          var v8694 = !isSet;
          JAMScript.call(this.parseFormalParameterList, this, [v8693, args$$10, false, true, false, v8694, isSet, false, null, true]);
          var v21233 = TypeScript$$14.ErrorRecoverySet;
          var v16544 = v21233.RCurly;
          var v8695 = errorRecoverySet$$26 | v16544;
          var v16545 = TypeScript$$14.AllowedElements;
          var v8696 = v16545.None;
          var v16546 = this.scanner;
          var v8697 = v16546.startPos;
          var v16547 = TypeScript$$14.Modifiers;
          var v8698 = v16547.None;
          var funcDecl$$11 = JAMScript.call(this.parseFunctionStatements, this, [v8695, memberName$$1, false, true, args$$10, v8696, v8697, false, v8698]);
          var v16548 = isSet;
          if(v16548) {
            v16548 = funcDecl$$11.returnTypeAnnotation
          }
          var v8699 = v16548;
          if(v8699) {
            JAMScript.call(this.reportParseError, this, ["Property setters may not declare a return type"])
          }
          var v16549 = funcDecl$$11;
          var v21234 = funcDecl$$11.fncFlags;
          var v24029;
          if(isSet) {
            var v25421 = TypeScript$$14.FncFlags;
            v24029 = v25421.SetAccessor
          }else {
            var v25422 = TypeScript$$14.FncFlags;
            v24029 = v25422.GetAccessor
          }
          var v21235 = v24029;
          v16549.fncFlags = v21234 | v21235;
          var v16550 = funcDecl$$11;
          var v21236 = funcDecl$$11.fncFlags;
          var v24030 = TypeScript$$14.FncFlags;
          var v21237 = v24030.IsFunctionExpression;
          v16550.fncFlags = v21236 | v21237;
          funcDecl$$11.hint = idHint;
          memberExpr = funcDecl$$11;
          var v8700 = TypeScript$$14.BinaryExpression;
          var v16551 = TypeScript$$14.NodeType;
          var v8701 = v16551.Member;
          member$$2 = JAMScript.new(v8700, [v8701, memberName$$1, memberExpr]);
          member$$2.minChar = memberName$$1.minChar;
          var v16552 = memberExpr.nodeType;
          var v21238 = TypeScript$$14.NodeType;
          var v16553 = v21238.FuncDecl;
          var v8702 = v16552 == v16553;
          if(v8702) {
            funcDecl$$11 = memberExpr;
            funcDecl$$11.hint = idHint
          }
        }else {
          var v21239 = this.currentToken;
          var v16554 = v21239.tokenId;
          var v21240 = TypeScript$$14.TokenID;
          var v16555 = v21240.Colon;
          var v8713 = v16554 == v16555;
          if(v8713) {
            var v8703 = this.scanner;
            var v27358 = JAMScript.call(v8703.scan, v8703, []);
            this.currentToken = v27358;
            var v21241 = TypeScript$$14.ErrorRecoverySet;
            var v16556 = v21241.Comma;
            var v8704 = v16556 | errorRecoverySet$$26;
            var v16557 = TypeScript$$14.OperatorPrecedence;
            var v8705 = v16557.Comma;
            var v8706 = TypeContext.NoTypes;
            memberExpr = JAMScript.call(this.parseExpr, this, [v8704, v8705, true, v8706]);
            var v16558 = memberExpr.nodeType;
            var v21242 = TypeScript$$14.NodeType;
            var v16559 = v21242.TypeRef;
            var v8707 = v16558 == v16559;
            if(v8707) {
              JAMScript.call(this.reportParseError, this, ["Expected 'new' on array declaration in member definition"])
            }
            var v8708 = TypeScript$$14.BinaryExpression;
            var v16560 = TypeScript$$14.NodeType;
            var v8709 = v16560.Member;
            member$$2 = JAMScript.new(v8708, [v8709, memberName$$1, memberExpr]);
            member$$2.minChar = memberName$$1.minChar;
            var v16561 = memberExpr.nodeType;
            var v21243 = TypeScript$$14.NodeType;
            var v16562 = v21243.FuncDecl;
            var v8710 = v16561 == v16562;
            if(v8710) {
              funcDecl$$11 = memberExpr;
              funcDecl$$11.hint = idHint
            }
          }else {
            JAMScript.call(this.reportParseError, this, ["Expected ':' in member definition"]);
            var v8712 = this.errorRecovery;
            if(v8712) {
              JAMScript.call(this.skip, this, [errorRecoverySet$$26]);
              var v16563 = elements;
              var v21244 = elements.flags;
              var v24031 = TypeScript$$14.ASTFlags;
              var v21245 = v24031.Error;
              v16563.flags = v21244 | v21245;
              elements.minChar = minChar$$23;
              var v8711 = elements;
              var v16564 = this.scanner;
              var v27359 = JAMScript.call(v16564.lastTokenLimChar, v16564, []);
              v8711.limChar = v27359;
              return elements
            }
          }
        }
        idHint = null;
        JAMScript.call(elements.append, elements, [member$$2]);
        var v8714 = member$$2;
        var v16565 = this.scanner;
        var v27360 = JAMScript.call(v16565.lastTokenLimChar, v16565, []);
        v8714.limChar = v27360;
        var v21246 = this.currentToken;
        var v16566 = v21246.tokenId;
        var v21247 = TypeScript$$14.TokenID;
        var v16567 = v21247.Comma;
        var v8716 = v16566 != v16567;
        if(v8716) {
          break
        }else {
          var v8715 = this.scanner;
          var v27361 = JAMScript.call(v8715.scan, v8715, []);
          this.currentToken = v27361
        }
        var v21248 = this.currentToken;
        var v16568 = v21248.tokenId;
        var v21249 = TypeScript$$14.TokenID;
        var v16569 = v21249.CloseBrace;
        var v8717 = v16568 == v16569;
        if(v8717) {
          break
        }
      }
      if(member$$2) {
        elements.limChar = member$$2.limChar
      }
      elements.minChar = minChar$$23;
      return elements
    }
    function v573(errorRecoverySet$$25, modifiers$$11, allowIn, isStatic$$4) {
      var v16570 = TypeScript$$14.Modifiers;
      var v8718 = v16570.Readonly;
      var isConst = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$11, v8718]);
      var v8719 = this.scanner;
      var minChar$$22 = v8719.startPos;
      var varDecl$$10 = null;
      var declList = null;
      var multivar = false;
      var v8720 = this.scanner;
      var v27362 = JAMScript.call(v8720.scan, v8720, []);
      this.currentToken = v27362;
      var varDeclPreComments = JAMScript.call(this.parseComments, this, []);
      for(;true;) {
        var v24032 = this.currentToken;
        var v21250 = v24032.tokenId;
        var v24033 = TypeScript$$14.TokenID;
        var v21251 = v24033.Identifier;
        var v16571 = v21250 != v21251;
        if(v16571) {
          var v24034 = this.currentToken;
          var v24035 = this.strictMode;
          var v21252 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24034, v24035]);
          v16571 = !v21252
        }
        var v8726 = v16571;
        if(v8726) {
          JAMScript.call(this.reportParseError, this, ["Expected identifier in variable declaration"]);
          var v8725 = this.errorRecovery;
          if(v8725) {
            var v8721 = TypeScript$$14.VarDecl;
            var v16572 = TypeScript$$14.MissingIdentifier;
            var v8722 = JAMScript.new(v16572, []);
            var v8723 = this.nestingLevel;
            varDecl$$10 = JAMScript.new(v8721, [v8722, v8723]);
            varDecl$$10.minChar = minChar$$22;
            JAMScript.call(this.skip, this, [errorRecoverySet$$25]);
            var v16573 = varDecl$$10;
            var v21253 = varDecl$$10.flags;
            var v24036 = TypeScript$$14.ASTFlags;
            var v21254 = v24036.Error;
            v16573.flags = v21253 | v21254;
            var v8724 = varDecl$$10;
            var v16574 = this.scanner;
            var v27363 = JAMScript.call(v16574.lastTokenLimChar, v16574, []);
            v8724.limChar = v27363;
            return varDecl$$10
          }
        }
        var v8727 = TypeScript$$14.Identifier;
        var v8728 = this.currentToken;
        var varDeclName = JAMScript.call(v8727.fromToken, v8727, [v8728]);
        var v16575 = this.strictMode;
        if(v16575) {
          var v21255 = varDeclName.text;
          v16575 = v21255 == "eval"
        }
        var v8729 = v16575;
        if(v8729) {
          JAMScript.call(this.reportParseError, this, ["'eval' may not name a variable in strict mode"])
        }
        var v8730 = this.nestingLevel;
        varDecl$$10 = JAMScript.call(this.makeVarDecl, this, [varDeclName, v8730]);
        var v8731 = varDecl$$10.id;
        var v16576 = this.scanner;
        v8731.minChar = v16576.startPos;
        var v8732 = varDecl$$10.id;
        var v16577 = this.scanner;
        v8732.limChar = v16577.pos;
        varDecl$$10.preComments = varDeclPreComments;
        if(isStatic$$4) {
          var v16578 = varDecl$$10;
          var v21256 = varDecl$$10.varFlags;
          var v24037 = TypeScript$$14.VarFlags;
          var v21257 = v24037.Static;
          v16578.varFlags = v21256 | v21257
        }
        var v21258 = TypeScript$$14.Modifiers;
        var v16579 = v21258.Readonly;
        var v8733 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$11, v16579]);
        if(v8733) {
          var v16580 = varDecl$$10;
          var v21259 = varDecl$$10.varFlags;
          var v24038 = TypeScript$$14.VarFlags;
          var v21260 = v24038.Readonly;
          v16580.varFlags = v21259 | v21260
        }
        var v16581 = this.parsingDeclareFile;
        var v21262 = !v16581;
        if(v21262) {
          var v21261 = this.ambientModule;
          var v24040 = !v21261;
          if(v24040) {
            var v25423 = TypeScript$$14.Modifiers;
            var v24039 = v25423.Ambient;
            v21261 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$11, v24039])
          }
          v16581 = v21261
        }
        var v8734 = v16581;
        if(v8734) {
          var v16582 = varDecl$$10;
          var v21263 = varDecl$$10.varFlags;
          var v24041 = TypeScript$$14.VarFlags;
          var v21264 = v24041.Ambient;
          v16582.varFlags = v21263 | v21264
        }
        var v16583 = this.parsingDeclareFile;
        var v21266 = !v16583;
        if(v21266) {
          var v21265 = this.ambientModule;
          var v24043 = !v21265;
          if(v24043) {
            var v25424 = TypeScript$$14.Modifiers;
            var v24042 = v25424.Exported;
            v21265 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$11, v24042])
          }
          v16583 = v21265
        }
        var v8735 = v16583;
        if(v8735) {
          var v16584 = varDecl$$10;
          var v21267 = varDecl$$10.varFlags;
          var v24044 = TypeScript$$14.VarFlags;
          var v21268 = v24044.Exported;
          v16584.varFlags = v21267 | v21268
        }
        varDecl$$10.minChar = minChar$$22;
        if(declList) {
          JAMScript.call(declList.append, declList, [varDecl$$10])
        }
        var v8736 = this.scanner;
        var v27364 = JAMScript.call(v8736.scan, v8736, []);
        this.currentToken = v27364;
        var v21269 = this.currentToken;
        var v16585 = v21269.tokenId;
        var v21270 = TypeScript$$14.TokenID;
        var v16586 = v21270.Colon;
        var v8739 = v16585 == v16586;
        if(v8739) {
          var v8737 = this.scanner;
          var v27365 = JAMScript.call(v8737.scan, v8737, []);
          this.currentToken = v27365;
          var prevInFncDecl = this.inFncDecl;
          this.inFncDecl = false;
          var v8738 = varDecl$$10;
          var v25425 = TypeScript$$14.ErrorRecoverySet;
          var v24045 = v25425.Asg;
          var v21271 = errorRecoverySet$$25 | v24045;
          var v24046 = TypeScript$$14.ErrorRecoverySet;
          var v21272 = v24046.Comma;
          var v16587 = v21271 | v21272;
          var v27366 = JAMScript.call(this.parseTypeReference, this, [v16587, false]);
          v8738.typeExpr = v27366;
          this.inFncDecl = prevInFncDecl
        }
        var v21273 = this.currentToken;
        var v16588 = v21273.tokenId;
        var v21274 = TypeScript$$14.TokenID;
        var v16589 = v21274.Equals;
        var v8747 = v16588 == v16589;
        if(v8747) {
          var v16590 = varDecl$$10.varFlags;
          var v21275 = TypeScript$$14.VarFlags;
          var v16591 = v21275.Ambient;
          var v8740 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [v16590, v16591]);
          if(v8740) {
            JAMScript.call(this.reportParseError, this, ["Ambient variable can not have an initializer"])
          }
          var v8741 = this.scanner;
          var v27367 = JAMScript.call(v8741.scan, v8741, []);
          this.currentToken = v27367;
          var v8742 = varDecl$$10;
          var v24047 = TypeScript$$14.ErrorRecoverySet;
          var v21276 = v24047.Comma;
          var v16592 = v21276 | errorRecoverySet$$25;
          var v21277 = TypeScript$$14.OperatorPrecedence;
          var v16593 = v21277.Comma;
          var v16594 = TypeContext.NoTypes;
          var v27368 = JAMScript.call(this.parseExpr, this, [v16592, v16593, allowIn, v16594]);
          v8742.init = v27368;
          var v8743 = varDecl$$10;
          var v16595 = varDecl$$10.init;
          v8743.limChar = v16595.limChar;
          var v21278 = varDecl$$10.init;
          var v16596 = v21278.nodeType;
          var v21279 = TypeScript$$14.NodeType;
          var v16597 = v21279.FuncDecl;
          var v8745 = v16596 == v16597;
          if(v8745) {
            var funcDecl$$10 = varDecl$$10.init;
            var v8744 = varDecl$$10.id;
            funcDecl$$10.hint = v8744.actualText
          }
        }else {
          if(isConst) {
            JAMScript.call(this.reportParseError, this, ["const declaration requires initializer"])
          }
          var v8746 = this.scanner;
          varDecl$$10.limChar = v8746.pos
        }
        var v8748 = varDecl$$10;
        var v21280 = this.scanner;
        var v16598 = v21280.line;
        var v27369 = JAMScript.call(this.parseCommentsForLine, this, [v16598]);
        v8748.postComments = v27369;
        var v21281 = this.currentToken;
        var v16599 = v21281.tokenId;
        var v21282 = TypeScript$$14.TokenID;
        var v16600 = v21282.Comma;
        var v8749 = v16599 != v16600;
        if(v8749) {
          if(declList) {
            declList.limChar = varDecl$$10.limChar;
            return declList
          }else {
            return varDecl$$10
          }
        }
        var v8751 = !multivar;
        if(v8751) {
          var v8750 = TypeScript$$14.ASTList;
          declList = JAMScript.new(v8750, []);
          declList.minChar = varDecl$$10.minChar;
          JAMScript.call(declList.append, declList, [varDecl$$10]);
          multivar = true
        }
        var v8752 = this.scanner;
        var v27370 = JAMScript.call(v8752.scan, v8752, []);
        this.currentToken = v27370;
        var v8753 = this.scanner;
        minChar$$22 = v8753.startPos
      }
      return
    }
    function v572(errorRecoverySet$$24, modifiers$$10, requireSignature, isStatic$$3) {
      var text$$16 = null;
      var v8754 = this.scanner;
      var minChar$$21 = v8754.startPos;
      var nameLimChar = minChar$$21;
      var isNew = false;
      var isIndexer$$1 = false;
      var v8755 = this.prevIDTok;
      var wasAccessorID$$1 = v8755 != null;
      var v21283 = TypeScript$$14.Modifiers;
      var v16601 = v21283.Getter;
      var v8756 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v16601]);
      var v16603 = !v8756;
      if(v16603) {
        var v21284 = TypeScript$$14.Modifiers;
        var v16602 = v21284.Setter;
        v8756 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v16602])
      }
      var isAccessor$$1 = v8756;
      var v16604 = this.parsingDeclareFile;
      var v21286 = !v16604;
      if(v21286) {
        var v21285 = this.ambientModule;
        var v24049 = !v21285;
        if(v24049) {
          var v25426 = TypeScript$$14.Modifiers;
          var v24048 = v25426.Ambient;
          v21285 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v24048])
        }
        v16604 = v21285
      }
      var v8757 = v16604;
      if(v8757) {
        requireSignature = true
      }
      var v24050 = this.currentToken;
      var v21287 = v24050.tokenId;
      var v24051 = TypeScript$$14.TokenID;
      var v21288 = v24051.OpenParen;
      var v16605 = v21287 == v21288;
      if(v16605) {
        v16605 = !wasAccessorID$$1
      }
      var v8797 = v16605;
      if(v8797) {
        var v16606 = !requireSignature;
        if(v16606) {
          v16606 = !isStatic$$3
        }
        var v8760 = v16606;
        if(v8760) {
          JAMScript.call(this.reportParseError, this, ["Expected identifier in property declaration"]);
          var v8759 = this.errorRecovery;
          if(v8759) {
            JAMScript.call(this.skip, this, [errorRecoverySet$$24]);
            var v8758 = TypeScript$$14.MissingIdentifier;
            text$$16 = JAMScript.new(v8758, [])
          }
        }
      }else {
        var v21289 = this.currentToken;
        var v16607 = v21289.tokenId;
        var v21290 = TypeScript$$14.TokenID;
        var v16608 = v21290.New;
        var v8796 = v16607 == v16608;
        if(v8796) {
          if(requireSignature) {
            var v8761 = this.scanner;
            var v27371 = JAMScript.call(v8761.scan, v8761, []);
            this.currentToken = v27371;
            var v21291 = this.currentToken;
            var v16609 = v21291.tokenId;
            var v21292 = TypeScript$$14.TokenID;
            var v16610 = v21292.OpenParen;
            var v8762 = v16609 == v16610;
            if(v8762) {
              isNew = true
            }
          }
          var v8769 = !isNew;
          if(v8769) {
            var v8764 = !requireSignature;
            if(v8764) {
              var v8763 = this.scanner;
              var v27372 = JAMScript.call(v8763.scan, v8763, []);
              this.currentToken = v27372
            }
            var v8765 = TypeScript$$14.Identifier;
            text$$16 = JAMScript.new(v8765, ["new"]);
            var v16611 = this.scanner;
            var v8766 = v16611.pos;
            text$$16.minChar = v8766 - 3;
            var v8767 = this.scanner;
            text$$16.limChar = v8767.pos;
            var v8768 = this.scanner;
            nameLimChar = v8768.pos
          }
        }else {
          var v24052 = this.currentToken;
          var v21293 = v24052.tokenId;
          var v24053 = TypeScript$$14.TokenID;
          var v21294 = v24053.OpenBracket;
          var v16612 = v21293 == v21294;
          if(v16612) {
            v16612 = requireSignature
          }
          var v8795 = v16612;
          if(v8795) {
            isIndexer$$1 = true;
            var v8770 = TypeScript$$14.Identifier;
            text$$16 = JAMScript.new(v8770, ["__item"])
          }else {
            var v24054 = this.currentToken;
            var v21295 = v24054.tokenId;
            var v24055 = TypeScript$$14.TokenID;
            var v21296 = v24055.Identifier;
            var v16613 = v21295 != v21296;
            if(v16613) {
              var v25427 = this.currentToken;
              var v24056 = JAMScript.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v25427]);
              var v21297 = !v24056;
              if(v21297) {
                v21297 = !wasAccessorID$$1
              }
              v16613 = v21297
            }
            var v8794 = v16613;
            if(v8794) {
              JAMScript.call(this.reportParseError, this, ["Expected identifier in property declaration"]);
              var v8780 = this.errorRecovery;
              if(v8780) {
                var v8771 = this.scanner;
                var eminChar = v8771.startPos;
                var v8772 = this.scanner;
                var curpos$$1 = v8772.pos;
                var v24057 = TypeScript$$14.ErrorRecoverySet;
                var v21298 = v24057.Comma;
                var v16614 = ~v21298;
                var v8773 = errorRecoverySet$$24 & v16614;
                JAMScript.call(this.skip, this, [v8773]);
                var v21299 = this.scanner;
                var v16615 = v21299.pos;
                var v8775 = v16615 == curpos$$1;
                if(v8775) {
                  var v8774 = this.scanner;
                  var v27373 = JAMScript.call(v8774.scan, v8774, []);
                  this.currentToken = v27373
                }
                var v8776 = TypeScript$$14.VarDecl;
                var v16616 = TypeScript$$14.MissingIdentifier;
                var v8777 = JAMScript.new(v16616, []);
                var v8778 = this.nestingLevel;
                var epd = JAMScript.new(v8776, [v8777, v8778]);
                var v16617 = epd;
                var v21300 = epd.flags;
                var v24058 = TypeScript$$14.ASTFlags;
                var v21301 = v24058.Error;
                v16617.flags = v21300 | v21301;
                epd.minChar = eminChar;
                var v8779 = epd;
                var v16618 = this.scanner;
                var v27374 = JAMScript.call(v16618.lastTokenLimChar, v16618, []);
                v8779.limChar = v27374;
                return epd
              }
            }else {
              if(wasAccessorID$$1) {
                var v8781 = TypeScript$$14.Identifier;
                var v8782 = this.prevIDTok;
                text$$16 = JAMScript.call(v8781.fromToken, v8781, [v8782]);
                var v8783 = text$$16;
                var v21302 = this.scanner;
                var v16619 = JAMScript.call(v21302.lastTokenLimChar, v21302, []);
                v8783.minChar = v16619 - 3;
                var v8784 = text$$16;
                var v16620 = this.scanner;
                var v27375 = JAMScript.call(v16620.lastTokenLimChar, v16620, []);
                v8784.limChar = v27375;
                nameLimChar = text$$16.limChar;
                var v16621 = TypeScript$$14.codeGenTarget;
                var v21303 = TypeScript$$14.CodeGenTarget;
                var v16622 = v21303.ES5;
                var v8785 = v16621 < v16622;
                if(v8785) {
                  JAMScript.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater"])
                }
                var v24059 = this.currentToken;
                var v21304 = JAMScript.call(v24059.getText, v24059, []);
                var v21305 = text$$16.actualText;
                var v16623 = v21304 == v21305;
                if(v16623) {
                  var v21306 = this.currentToken;
                  var v21307 = this.prevIDTok;
                  v16623 = v21306 != v21307
                }
                var v8787 = v16623;
                if(v8787) {
                  var v8786 = this.scanner;
                  var v27376 = JAMScript.call(v8786.scan, v8786, []);
                  this.currentToken = v27376
                }
                this.prevIDTok = null
              }else {
                var v8788 = TypeScript$$14.Identifier;
                var v8789 = this.currentToken;
                text$$16 = JAMScript.call(v8788.fromToken, v8788, [v8789]);
                var v8790 = this.scanner;
                text$$16.minChar = v8790.startPos;
                var v8791 = this.scanner;
                text$$16.limChar = v8791.pos;
                var v8792 = this.scanner;
                nameLimChar = v8792.pos;
                var v8793 = this.scanner;
                var v27377 = JAMScript.call(v8793.scan, v8793, []);
                this.currentToken = v27377
              }
            }
          }
        }
      }
      var v21308 = this.currentToken;
      var v16624 = v21308.tokenId;
      var v21309 = TypeScript$$14.TokenID;
      var v16625 = v21309.Question;
      var v8800 = v16624 == v16625;
      if(v8800) {
        var v16626 = this.inInterfaceDecl;
        if(v16626) {
          v16626 = text$$16
        }
        var v8798 = v16626;
        if(v8798) {
          var v16627 = text$$16;
          var v21310 = text$$16.flags;
          var v24060 = TypeScript$$14.ASTFlags;
          var v21311 = v24060.OptionalName;
          v16627.flags = v21310 | v21311
        }else {
          JAMScript.call(this.reportParseError, this, ["Optional properties may only be declared on interface or object types"])
        }
        var v8799 = this.scanner;
        var v27378 = JAMScript.call(v8799.scan, v8799, []);
        this.currentToken = v27378
      }
      var v24061 = this.currentToken;
      var v21312 = v24061.tokenId;
      var v24062 = TypeScript$$14.TokenID;
      var v21313 = v24062.OpenParen;
      var v16628 = v21312 == v21313;
      var v21315 = !v16628;
      if(v21315) {
        var v21314 = isIndexer$$1;
        if(v21314) {
          var v25428 = this.currentToken;
          var v24063 = v25428.tokenId;
          var v25429 = TypeScript$$14.TokenID;
          var v24064 = v25429.OpenBracket;
          v21314 = v24063 == v24064
        }
        v16628 = v21314
      }
      var v8838 = v16628;
      if(v8838) {
        var v16629 = TypeScript$$14.ErrorRecoverySet;
        var v8801 = v16629.RParen;
        var ers = errorRecoverySet$$24 | v8801;
        if(isIndexer$$1) {
          var v16630 = TypeScript$$14.ErrorRecoverySet;
          var v8802 = v16630.RBrack;
          ers = errorRecoverySet$$24 | v8802
        }
        var v16631 = this.inFncDecl;
        var v8803 = !v16631;
        var v16632 = this.parsingDeclareFile;
        var v21317 = !v16632;
        if(v21317) {
          var v24065 = TypeScript$$14.Modifiers;
          var v21316 = v24065.Ambient;
          v16632 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v21316])
        }
        var v8804 = v16632;
        var ast$$39 = JAMScript.call(this.parseFncDecl, this, [ers, true, requireSignature, v8803, text$$16, isIndexer$$1, isStatic$$3, v8804, modifiers$$10, null, true]);
        var funcDecl$$9;
        var v16633 = ast$$39.nodeType;
        var v21318 = TypeScript$$14.NodeType;
        var v16634 = v21318.Error;
        var v8805 = v16633 == v16634;
        if(v8805) {
          return ast$$39
        }else {
          funcDecl$$9 = ast$$39
        }
        var v8808 = funcDecl$$9.name;
        if(v8808) {
          var v8806 = funcDecl$$9.name;
          v8806.minChar = minChar$$21;
          var v8807 = funcDecl$$9.name;
          v8807.limChar = nameLimChar
        }
        var v24066 = TypeScript$$14.Modifiers;
        var v21319 = v24066.Public;
        var v16635 = modifiers$$10 & v21319;
        var v21320 = TypeScript$$14.Modifiers;
        var v16636 = v21320.None;
        var v8809 = v16635 != v16636;
        if(v8809) {
          var v16637 = funcDecl$$9;
          var v21321 = funcDecl$$9.fncFlags;
          var v24067 = TypeScript$$14.FncFlags;
          var v21322 = v24067.Public;
          v16637.fncFlags = v21321 | v21322
        }
        var v24068 = TypeScript$$14.Modifiers;
        var v21323 = v24068.Private;
        var v16638 = modifiers$$10 & v21323;
        var v21324 = TypeScript$$14.Modifiers;
        var v16639 = v21324.None;
        var v8810 = v16638 != v16639;
        if(v8810) {
          var v16640 = funcDecl$$9;
          var v21325 = funcDecl$$9.fncFlags;
          var v24069 = TypeScript$$14.FncFlags;
          var v21326 = v24069.Private;
          v16640.fncFlags = v21325 | v21326
        }
        if(isStatic$$3) {
          var v16641 = funcDecl$$9;
          var v21327 = funcDecl$$9.fncFlags;
          var v24070 = TypeScript$$14.FncFlags;
          var v21328 = v24070.Static;
          v16641.fncFlags = v21327 | v21328
        }
        var v16642 = this.parsingDeclareFile;
        var v21330 = !v16642;
        if(v21330) {
          var v24071 = TypeScript$$14.Modifiers;
          var v21329 = v24071.Ambient;
          v16642 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v21329])
        }
        var v8811 = v16642;
        if(v8811) {
          var v16643 = funcDecl$$9;
          var v21331 = funcDecl$$9.fncFlags;
          var v24072 = TypeScript$$14.FncFlags;
          var v21332 = v24072.Ambient;
          v16643.fncFlags = v21331 | v21332
        }
        if(isAccessor$$1) {
          var v21333 = TypeScript$$14.Modifiers;
          var v16644 = v21333.Getter;
          var v8814 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$10, v16644]);
          if(v8814) {
            var v16645 = funcDecl$$9;
            var v21334 = funcDecl$$9.fncFlags;
            var v24073 = TypeScript$$14.FncFlags;
            var v21335 = v24073.GetAccessor;
            v16645.fncFlags = v21334 | v21335;
            var v8812 = funcDecl$$9;
            var v21336 = funcDecl$$9.name;
            var v16646 = v21336.actualText;
            v8812.hint = "get" + v16646
          }else {
            var v16647 = funcDecl$$9;
            var v21337 = funcDecl$$9.fncFlags;
            var v24074 = TypeScript$$14.FncFlags;
            var v21338 = v24074.SetAccessor;
            v16647.fncFlags = v21337 | v21338;
            var v8813 = funcDecl$$9;
            var v21339 = funcDecl$$9.name;
            var v16648 = v21339.actualText;
            v8813.hint = "set" + v16648
          }
          var v16649 = funcDecl$$9;
          var v21340 = funcDecl$$9.fncFlags;
          var v24075 = TypeScript$$14.FncFlags;
          var v21341 = v24075.IsFunctionExpression;
          v16649.fncFlags = v21340 | v21341;
          var v21342 = TypeScript$$14.Modifiers;
          var v16650 = v21342.Ambient;
          var v8815 = modifiers$$10 & v16650;
          if(v8815) {
            JAMScript.call(this.reportParseError, this, ["Property accessors may not be declared in ambient types"])
          }
        }
        var v8816 = text$$16 == null;
        if(v8816) {
          if(isNew) {
            var v16651 = funcDecl$$9;
            var v21343 = funcDecl$$9.fncFlags;
            var v24076 = TypeScript$$14.FncFlags;
            var v21344 = v24076.ConstructMember;
            v16651.fncFlags = v21343 | v21344;
            funcDecl$$9.hint = "_construct";
            funcDecl$$9.classDecl = this.currentClassDecl
          }else {
            funcDecl$$9.hint = "_call";
            var v16652 = funcDecl$$9;
            var v21345 = funcDecl$$9.fncFlags;
            var v24077 = TypeScript$$14.FncFlags;
            var v21346 = v24077.CallMember;
            v16652.fncFlags = v21345 | v21346
          }
        }
        return funcDecl$$9
      }else {
        var v8817 = TypeScript$$14.VarDecl;
        var v8818 = this.nestingLevel;
        var varDecl$$9 = JAMScript.new(v8817, [text$$16, v8818]);
        var v8819 = varDecl$$9;
        var v27379 = JAMScript.call(this.parseComments, this, []);
        v8819.preComments = v27379;
        varDecl$$9.minChar = minChar$$21;
        var v21347 = this.currentToken;
        var v16653 = v21347.tokenId;
        var v21348 = TypeScript$$14.TokenID;
        var v16654 = v21348.Colon;
        var v8825 = v16653 == v16654;
        if(v8825) {
          var v8820 = this.scanner;
          var v27380 = JAMScript.call(v8820.scan, v8820, []);
          this.currentToken = v27380;
          var v8821 = varDecl$$9;
          var v25430 = TypeScript$$14.ErrorRecoverySet;
          var v24078 = v25430.Asg;
          var v21349 = errorRecoverySet$$24 | v24078;
          var v24079 = TypeScript$$14.ErrorRecoverySet;
          var v21350 = v24079.Comma;
          var v16655 = v21349 | v21350;
          var v27381 = JAMScript.call(this.parseTypeReference, this, [v16655, false]);
          v8821.typeExpr = v27381;
          var v16656 = varDecl$$9.typeExpr;
          if(v16656) {
            var v24080 = varDecl$$9.typeExpr;
            var v21351 = v24080.nodeType;
            var v24081 = TypeScript$$14.NodeType;
            var v21352 = v24081.TypeRef;
            v16656 = v21351 == v21352
          }
          var v8824 = v16656;
          if(v8824) {
            var typeExpr$$1 = varDecl$$9.typeExpr;
            var v16657 = typeExpr$$1.term;
            if(v16657) {
              var v24082 = typeExpr$$1.term;
              var v21353 = v24082.nodeType;
              var v24083 = TypeScript$$14.NodeType;
              var v21354 = v24083.FuncDecl;
              v16657 = v21353 == v21354
            }
            var v8823 = v16657;
            if(v8823) {
              var v8822 = typeExpr$$1.term;
              v8822.preComments = varDecl$$9.preComments
            }
          }
        }
        var v21355 = this.currentToken;
        var v16658 = v21355.tokenId;
        var v21356 = TypeScript$$14.TokenID;
        var v16659 = v21356.Equals;
        var v8834 = v16658 == v16659;
        if(v8834) {
          if(requireSignature) {
            JAMScript.call(this.reportParseError, this, ["context does not permit variable initializer"]);
            var v8827 = this.errorRecovery;
            if(v8827) {
              JAMScript.call(this.skip, this, [errorRecoverySet$$24]);
              var v16660 = varDecl$$9;
              var v21357 = varDecl$$9.flags;
              var v24084 = TypeScript$$14.ASTFlags;
              var v21358 = v24084.Error;
              v16660.flags = v21357 | v21358;
              var v8826 = varDecl$$9;
              var v16661 = this.scanner;
              var v27382 = JAMScript.call(v16661.lastTokenLimChar, v16661, []);
              v8826.limChar = v27382;
              return varDecl$$9
            }
          }
          var v8828 = this.scanner;
          var v27383 = JAMScript.call(v8828.scan, v8828, []);
          this.currentToken = v27383;
          var v8829 = varDecl$$9;
          var v24085 = TypeScript$$14.ErrorRecoverySet;
          var v21359 = v24085.Comma;
          var v16662 = v21359 | errorRecoverySet$$24;
          var v21360 = TypeScript$$14.OperatorPrecedence;
          var v16663 = v21360.Comma;
          var v16664 = TypeContext.NoTypes;
          var v27384 = JAMScript.call(this.parseExpr, this, [v16662, v16663, true, v16664]);
          v8829.init = v27384;
          var v8830 = varDecl$$9;
          var v16665 = varDecl$$9.init;
          v8830.limChar = v16665.limChar;
          var v21361 = varDecl$$9.init;
          var v16666 = v21361.nodeType;
          var v21362 = TypeScript$$14.NodeType;
          var v16667 = v21362.FuncDecl;
          var v8832 = v16666 == v16667;
          if(v8832) {
            funcDecl$$9 = varDecl$$9.init;
            var v8831 = varDecl$$9.id;
            funcDecl$$9.hint = v8831.text;
            funcDecl$$9.boundToProperty = varDecl$$9
          }else {
            if(isAccessor$$1) {
              JAMScript.call(this.reportParseError, this, ["Accessors may only be functions"])
            }
          }
        }else {
          var v8833 = this.scanner;
          varDecl$$9.limChar = v8833.pos
        }
        var v24086 = TypeScript$$14.Modifiers;
        var v21363 = v24086.Readonly;
        var v16668 = modifiers$$10 & v21363;
        var v21364 = TypeScript$$14.Modifiers;
        var v16669 = v21364.None;
        var v8835 = v16668 != v16669;
        if(v8835) {
          var v16670 = varDecl$$9;
          var v21365 = varDecl$$9.varFlags;
          var v24087 = TypeScript$$14.VarFlags;
          var v21366 = v24087.Readonly;
          v16670.varFlags = v21365 | v21366
        }
        if(isStatic$$3) {
          var v16671 = varDecl$$9;
          var v21367 = varDecl$$9.varFlags;
          var v24088 = TypeScript$$14.VarFlags;
          var v21368 = v24088.Static;
          v16671.varFlags = v21367 | v21368
        }
        var v24089 = TypeScript$$14.Modifiers;
        var v21369 = v24089.Public;
        var v16672 = modifiers$$10 & v21369;
        var v21370 = TypeScript$$14.Modifiers;
        var v16673 = v21370.None;
        var v8836 = v16672 != v16673;
        if(v8836) {
          var v16674 = varDecl$$9;
          var v21371 = varDecl$$9.varFlags;
          var v24090 = TypeScript$$14.VarFlags;
          var v21372 = v24090.Public;
          v16674.varFlags = v21371 | v21372
        }
        var v24091 = TypeScript$$14.Modifiers;
        var v21373 = v24091.Private;
        var v16675 = modifiers$$10 & v21373;
        var v21374 = TypeScript$$14.Modifiers;
        var v16676 = v21374.None;
        var v8837 = v16675 != v16676;
        if(v8837) {
          var v16677 = varDecl$$9;
          var v21375 = varDecl$$9.varFlags;
          var v24092 = TypeScript$$14.VarFlags;
          var v21376 = v24092.Private;
          v16677.varFlags = v21375 | v21376
        }
        var v16678 = varDecl$$9;
        var v21377 = varDecl$$9.varFlags;
        var v24093 = TypeScript$$14.VarFlags;
        var v21378 = v24093.Property;
        v16678.varFlags = v21377 | v21378;
        return varDecl$$9
      }
      return
    }
    function v571(id$$12, nest$$1) {
      var v8839 = TypeScript$$14.VarDecl;
      var varDecl$$8 = JAMScript.new(v8839, [id$$12, nest$$1]);
      var currentVarList = JAMScript.call(this.topVarList, this, []);
      if(currentVarList) {
        JAMScript.call(currentVarList.append, currentVarList, [varDecl$$8])
      }
      return varDecl$$8
    }
    function v570(errorRecoverySet$$23, modifiers$$9) {
      var v8840 = this.scanner;
      var leftCurlyCount$$4 = v8840.leftCurlyCount;
      var v8841 = this.scanner;
      var rightCurlyCount$$4 = v8841.rightCurlyCount;
      var v8842 = this.scanner;
      var v27385 = JAMScript.call(v8842.scan, v8842, []);
      this.currentToken = v27385;
      var v8843 = this.scanner;
      var minChar$$20 = v8843.pos;
      var name$$51 = null;
      var v24094 = this.currentToken;
      var v21379 = v24094.tokenId;
      var v24095 = TypeScript$$14.TokenID;
      var v21380 = v24095.Identifier;
      var v16679 = v21379 == v21380;
      var v21382 = !v16679;
      if(v21382) {
        var v25431 = this.currentToken;
        var v24096 = JAMScript.call(TypeScript$$14.isPrimitiveTypeToken, TypeScript$$14, [v25431]);
        var v21381 = !v24096;
        if(v21381) {
          var v24097 = this.currentToken;
          var v24098 = this.strictMode;
          v21381 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24097, v24098])
        }
        v16679 = v21381
      }
      var v8853 = v16679;
      if(v8853) {
        var v8844 = TypeScript$$14.Identifier;
        var v8845 = this.currentToken;
        name$$51 = JAMScript.call(v8844.fromToken, v8844, [v8845]);
        var v8846 = this.scanner;
        name$$51.minChar = v8846.startPos;
        var v8847 = this.scanner;
        name$$51.limChar = v8847.pos;
        var v8848 = this.scanner;
        var v27386 = JAMScript.call(v8848.scan, v8848, []);
        this.currentToken = v27386
      }else {
        JAMScript.call(this.reportParseError, this, ["interface missing name"]);
        var v8852 = this.errorRecovery;
        if(v8852) {
          var v8849 = TypeScript$$14.MissingIdentifier;
          name$$51 = JAMScript.new(v8849, []);
          var v8850 = this.scanner;
          name$$51.minChar = v8850.pos;
          var v8851 = this.scanner;
          name$$51.limChar = v8851.pos;
          var v16680 = name$$51;
          var v21383 = name$$51.flags;
          var v24099 = TypeScript$$14.ASTFlags;
          var v21384 = v24099.Error;
          v16680.flags = v21383 | v21384
        }
      }
      var extendsList$$6 = null;
      var implementsList$$5 = null;
      var v24100 = this.currentToken;
      var v21385 = v24100.tokenId;
      var v24101 = TypeScript$$14.TokenID;
      var v21386 = v24101.Extends;
      var v16681 = v21385 === v21386;
      var v21389 = !v16681;
      if(v21389) {
        var v24102 = this.currentToken;
        var v21387 = v24102.tokenId;
        var v24103 = TypeScript$$14.TokenID;
        var v21388 = v24103.Implements;
        v16681 = v21387 === v21388
      }
      var v8858 = v16681;
      if(v8858) {
        var v21390 = this.currentToken;
        var v16682 = v21390.tokenId;
        var v21391 = TypeScript$$14.TokenID;
        var v16683 = v21391.Implements;
        var v8854 = v16682 === v16683;
        if(v8854) {
          JAMScript.call(this.reportParseError, this, ["Expected 'extends'"])
        }
        var v8855 = TypeScript$$14.ASTList;
        extendsList$$6 = JAMScript.new(v8855, []);
        var v8856 = TypeScript$$14.ASTList;
        implementsList$$5 = JAMScript.new(v8856, []);
        var v8857 = this.scanner;
        extendsList$$6.minChar = v8857.startPos;
        JAMScript.call(this.parseBaseList, this, [extendsList$$6, implementsList$$5, errorRecoverySet$$23, false])
      }
      var v8859 = this.scanner;
      var membersMinChar$$2 = v8859.startPos;
      var v16684 = TypeScript$$14.TokenID;
      var v8860 = v16684.OpenBrace;
      var v21392 = TypeScript$$14.ErrorRecoverySet;
      var v16685 = v21392.TypeScriptS;
      var v8861 = errorRecoverySet$$23 | v16685;
      JAMScript.call(this.checkCurrentToken, this, [v8860, v8861]);
      var v8862 = TypeScript$$14.ASTList;
      var members$$10 = JAMScript.new(v8862, []);
      members$$10.minChar = membersMinChar$$2;
      var prevInInterfaceDecl$$1 = this.inInterfaceDecl;
      this.inInterfaceDecl = true;
      var v21393 = TypeScript$$14.ErrorRecoverySet;
      var v16686 = v21393.RCurly;
      var v8863 = errorRecoverySet$$23 | v16686;
      JAMScript.call(this.parseTypeMemberList, this, [v8863, members$$10]);
      this.inInterfaceDecl = prevInInterfaceDecl$$1;
      var v16687 = TypeScript$$14.TokenID;
      var v8864 = v16687.CloseBrace;
      JAMScript.call(this.checkCurrentToken, this, [v8864, errorRecoverySet$$23]);
      var v8865 = TypeScript$$14.InterfaceDeclaration;
      var interfaceDecl$$1 = JAMScript.new(v8865, [name$$51, members$$10, extendsList$$6, null]);
      var v21394 = TypeScript$$14.Modifiers;
      var v16688 = v21394.Private;
      var v8866 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$9, v16688]);
      if(v8866) {
        var v16689 = interfaceDecl$$1;
        var v21395 = interfaceDecl$$1.varFlags;
        var v24104 = TypeScript$$14.VarFlags;
        var v21396 = v24104.Private;
        v16689.varFlags = v21395 | v21396
      }
      var v21397 = TypeScript$$14.Modifiers;
      var v16690 = v21397.Public;
      var v8867 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$9, v16690]);
      if(v8867) {
        var v16691 = interfaceDecl$$1;
        var v21398 = interfaceDecl$$1.varFlags;
        var v24105 = TypeScript$$14.VarFlags;
        var v21399 = v24105.Public;
        v16691.varFlags = v21398 | v21399
      }
      var v16692 = this.parsingDeclareFile;
      var v21401 = !v16692;
      if(v21401) {
        var v21400 = this.ambientModule;
        var v24107 = !v21400;
        if(v24107) {
          var v25432 = TypeScript$$14.Modifiers;
          var v24106 = v25432.Exported;
          v21400 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$9, v24106])
        }
        v16692 = v21400
      }
      var v8868 = v16692;
      if(v8868) {
        var v16693 = interfaceDecl$$1;
        var v21402 = interfaceDecl$$1.varFlags;
        var v24108 = TypeScript$$14.VarFlags;
        var v21403 = v24108.Exported;
        v16693.varFlags = v21402 | v21403
      }
      interfaceDecl$$1.limChar = members$$10.limChar;
      var v16694 = this.scanner;
      var v8869 = v16694.leftCurlyCount;
      interfaceDecl$$1.leftCurlyCount = v8869 - leftCurlyCount$$4;
      var v16695 = this.scanner;
      var v8870 = v16695.rightCurlyCount;
      interfaceDecl$$1.rightCurlyCount = v8870 - rightCurlyCount$$4;
      return interfaceDecl$$1
    }
    function v569(errorRecoverySet$$22, members$$9) {
      var v21404 = TypeScript$$14.ErrorRecoverySet;
      var v16696 = v21404.TypeScriptS;
      errorRecoverySet$$22 = errorRecoverySet$$22 | v16696;
      for(;true;) {
        var v16697 = this.currentToken;
        var v8872 = v16697.tokenId;
        switch(v8872) {
          case TypeScript$$14.TokenID.CloseBrace:
          ;
          case TypeScript$$14.TokenID.EndOfFile:
            var v8871 = this.scanner;
            members$$9.limChar = v8871.pos;
            return
        }
        var element$$3 = JAMScript.call(this.parseTypeMember, this, [errorRecoverySet$$22]);
        if(element$$3) {
          JAMScript.call(members$$9.append, members$$9, [element$$3])
        }
      }
      return
    }
    function v568(errorRecoverySet$$21) {
      var v8873 = this.scanner;
      var minChar$$19 = v8873.startPos;
      var v16698 = TypeScript$$14.Modifiers;
      var v8874 = v16698.Public;
      var propertyDecl = JAMScript.call(this.parsePropertyDeclaration, this, [errorRecoverySet$$21, v8874, true, false]);
      if(propertyDecl) {
        propertyDecl.minChar = minChar$$19;
        var v16699 = propertyDecl.nodeType;
        var v21405 = TypeScript$$14.NodeType;
        var v16700 = v21405.VarDecl;
        var v8876 = v16699 == v16700;
        if(v8876) {
          var v16701 = TypeScript$$14.TokenID;
          var v8875 = v16701.Semicolon;
          JAMScript.call(this.checkCurrentToken, this, [v8875, errorRecoverySet$$21])
        }
      }
      return propertyDecl
    }
    function v567(methodName$$1, minChar$$18, errorRecoverySet$$20, modifiers$$8) {
      var v8877 = this.prevIDTok;
      var wasAccessorID = v8877 != null;
      var v21406 = TypeScript$$14.Modifiers;
      var v16702 = v21406.Getter;
      var v8878 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v16702]);
      var v16704 = !v8878;
      if(v16704) {
        var v21407 = TypeScript$$14.Modifiers;
        var v16703 = v21407.Setter;
        v8878 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v16703])
      }
      var isAccessor = v8878;
      var v16705 = TypeScript$$14.Modifiers;
      var v8879 = v16705.Static;
      var isStatic$$2 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v8879]);
      var v8880 = this.ambientModule;
      var v16707 = !v8880;
      if(v16707) {
        var v21408 = TypeScript$$14.Modifiers;
        var v16706 = v21408.Ambient;
        v8880 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v16706])
      }
      var isAmbient$$2 = v8880;
      var v21409 = TypeScript$$14.ErrorRecoverySet;
      var v16708 = v21409.RParen;
      errorRecoverySet$$20 = errorRecoverySet$$20 | v16708;
      var v16709 = isAccessor;
      if(v16709) {
        var v24109 = TypeScript$$14.Modifiers;
        var v21410 = v24109.Ambient;
        v16709 = modifiers$$8 & v21410
      }
      var v8881 = v16709;
      if(v8881) {
        JAMScript.call(this.reportParseError, this, ["Property accessors may not be declared in ambient classes"])
      }
      var ast$$38 = JAMScript.call(this.parseFncDecl, this, [errorRecoverySet$$20, true, isAmbient$$2, true, methodName$$1, false, isStatic$$2, isAmbient$$2, modifiers$$8, null, true]);
      var v16710 = ast$$38.nodeType;
      var v21411 = TypeScript$$14.NodeType;
      var v16711 = v21411.Error;
      var v8882 = v16710 == v16711;
      if(v8882) {
        return ast$$38
      }
      var funcDecl$$8 = ast$$38;
      funcDecl$$8.minChar = minChar$$18;
      var v16712 = funcDecl$$8.bod;
      var v8884 = v16712 !== null;
      if(v8884) {
        var v8883 = funcDecl$$8;
        var v16713 = funcDecl$$8.bod;
        v8883.limChar = v16713.limChar
      }
      var v21412 = TypeScript$$14.Modifiers;
      var v16714 = v21412.Private;
      var v8885 = modifiers$$8 & v16714;
      if(v8885) {
        var v16715 = funcDecl$$8;
        var v21413 = funcDecl$$8.fncFlags;
        var v24110 = TypeScript$$14.FncFlags;
        var v21414 = v24110.Private;
        v16715.fncFlags = v21413 | v21414
      }else {
        var v16716 = funcDecl$$8;
        var v21415 = funcDecl$$8.fncFlags;
        var v24111 = TypeScript$$14.FncFlags;
        var v21416 = v24111.Public;
        v16716.fncFlags = v21415 | v21416
      }
      if(isStatic$$2) {
        var v16717 = funcDecl$$8;
        var v21417 = funcDecl$$8.fncFlags;
        var v24112 = TypeScript$$14.FncFlags;
        var v21418 = v24112.Static;
        v16717.fncFlags = v21417 | v21418
      }
      if(isAccessor) {
        var v21419 = TypeScript$$14.Modifiers;
        var v16718 = v21419.Getter;
        var v8888 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$8, v16718]);
        if(v8888) {
          var v16719 = funcDecl$$8;
          var v21420 = funcDecl$$8.fncFlags;
          var v24113 = TypeScript$$14.FncFlags;
          var v21421 = v24113.GetAccessor;
          v16719.fncFlags = v21420 | v21421;
          var v8886 = funcDecl$$8;
          var v21422 = funcDecl$$8.name;
          var v16720 = v21422.actualText;
          v8886.hint = "get" + v16720
        }else {
          var v16721 = funcDecl$$8;
          var v21423 = funcDecl$$8.fncFlags;
          var v24114 = TypeScript$$14.FncFlags;
          var v21424 = v24114.SetAccessor;
          v16721.fncFlags = v21423 | v21424;
          var v8887 = funcDecl$$8;
          var v21425 = funcDecl$$8.name;
          var v16722 = v21425.actualText;
          v8887.hint = "set" + v16722
        }
        var v16723 = funcDecl$$8;
        var v21426 = funcDecl$$8.fncFlags;
        var v24115 = TypeScript$$14.FncFlags;
        var v21427 = v24115.IsFunctionExpression;
        v16723.fncFlags = v21426 | v21427;
        var v16724 = TypeScript$$14.codeGenTarget;
        var v21428 = TypeScript$$14.CodeGenTarget;
        var v16725 = v21428.ES5;
        var v8891 = v16724 < v16725;
        if(v8891) {
          var v8889 = funcDecl$$8.minChar;
          var v8890 = funcDecl$$8.limChar;
          JAMScript.call(this.reportParseError, this, ["Property accessors are only available when targeting ES5 or greater", v8889, v8890])
        }
      }
      var v16726 = funcDecl$$8;
      var v21429 = funcDecl$$8.fncFlags;
      var v24116 = TypeScript$$14.FncFlags;
      var v21430 = v24116.ClassMethod;
      v16726.fncFlags = v21429 | v21430;
      var v16727 = this.currentClassDefinition;
      var v8892 = v16727.knownMemberNames;
      var v8893 = methodName$$1.actualText;
      JAMScript.set(v8892, v8893, true);
      var v21431 = this.currentClassDefinition;
      var v16728 = v21431.members;
      var v8894 = v16728.members;
      var v24117 = this.currentClassDefinition;
      var v21432 = v24117.members;
      var v16729 = v21432.members;
      var v8895 = v16729.length;
      JAMScript.set(v8894, v8895, funcDecl$$8);
      return funcDecl$$8
    }
    function v566(text$$15, minChar$$17, isDeclaredInConstructor, errorRecoverySet$$19, modifiers$$7) {
      var v8896 = TypeScript$$14.VarDecl;
      var v8897 = this.nestingLevel;
      var varDecl$$7 = JAMScript.new(v8896, [text$$15, v8897]);
      varDecl$$7.minChar = minChar$$17;
      var isStatic$$1 = false;
      var v8898 = varDecl$$7;
      var v27387 = JAMScript.call(this.parseComments, this, []);
      v8898.preComments = v27387;
      var v21433 = this.currentToken;
      var v16730 = v21433.tokenId;
      var v21434 = TypeScript$$14.TokenID;
      var v16731 = v21434.Colon;
      var v8904 = v16730 == v16731;
      if(v8904) {
        var v8899 = this.scanner;
        var v27388 = JAMScript.call(v8899.scan, v8899, []);
        this.currentToken = v27388;
        var v8900 = varDecl$$7;
        var v25433 = TypeScript$$14.ErrorRecoverySet;
        var v24118 = v25433.Asg;
        var v21435 = errorRecoverySet$$19 | v24118;
        var v24119 = TypeScript$$14.ErrorRecoverySet;
        var v21436 = v24119.Comma;
        var v16732 = v21435 | v21436;
        var v27389 = JAMScript.call(this.parseTypeReference, this, [v16732, false]);
        v8900.typeExpr = v27389;
        var v16733 = varDecl$$7.typeExpr;
        if(v16733) {
          var v24120 = varDecl$$7.typeExpr;
          var v21437 = v24120.nodeType;
          var v24121 = TypeScript$$14.NodeType;
          var v21438 = v24121.TypeRef;
          v16733 = v21437 == v21438
        }
        var v8903 = v16733;
        if(v8903) {
          var typeExpr = varDecl$$7.typeExpr;
          var v16734 = typeExpr.term;
          if(v16734) {
            var v24122 = typeExpr.term;
            var v21439 = v24122.nodeType;
            var v24123 = TypeScript$$14.NodeType;
            var v21440 = v24123.FuncDecl;
            v16734 = v21439 == v21440
          }
          var v8902 = v16734;
          if(v8902) {
            var v8901 = typeExpr.term;
            v8901.preComments = varDecl$$7.preComments
          }
        }
      }
      var v21441 = this.currentToken;
      var v16735 = v21441.tokenId;
      var v21442 = TypeScript$$14.TokenID;
      var v16736 = v21442.Equals;
      var v8914 = v16735 == v16736;
      if(v8914) {
        var v16737 = this.parsingDeclareFile;
        var v21444 = !v16737;
        if(v21444) {
          var v24124 = TypeScript$$14.Modifiers;
          var v21443 = v24124.Ambient;
          v16737 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$7, v21443])
        }
        var v8907 = v16737;
        if(v8907) {
          JAMScript.call(this.reportParseError, this, ["context does not permit variable initializer"]);
          var v8906 = this.errorRecovery;
          if(v8906) {
            JAMScript.call(this.skip, this, [errorRecoverySet$$19]);
            var v16738 = varDecl$$7;
            var v21445 = varDecl$$7.flags;
            var v24125 = TypeScript$$14.ASTFlags;
            var v21446 = v24125.Error;
            v16738.flags = v21445 | v21446;
            var v8905 = varDecl$$7;
            var v16739 = this.scanner;
            var v27390 = JAMScript.call(v16739.lastTokenLimChar, v16739, []);
            v8905.limChar = v27390;
            return varDecl$$7
          }
        }
        var v8908 = this.scanner;
        var v27391 = JAMScript.call(v8908.scan, v8908, []);
        this.currentToken = v27391;
        var v8909 = varDecl$$7;
        var v24126 = TypeScript$$14.ErrorRecoverySet;
        var v21447 = v24126.Comma;
        var v16740 = v21447 | errorRecoverySet$$19;
        var v21448 = TypeScript$$14.OperatorPrecedence;
        var v16741 = v21448.Comma;
        var v16742 = TypeContext.NoTypes;
        var v27392 = JAMScript.call(this.parseExpr, this, [v16740, v16741, true, v16742]);
        v8909.init = v27392;
        var v8910 = varDecl$$7;
        var v16743 = varDecl$$7.init;
        v8910.limChar = v16743.limChar;
        var v24127 = TypeScript$$14.Modifiers;
        var v21449 = v24127.Static;
        var v16744 = modifiers$$7 & v21449;
        var v8912 = !v16744;
        if(v8912) {
          var v8911 = this.currentClassDefinition;
          var v21450 = v8911.varFlags;
          var v24128 = TypeScript$$14.VarFlags;
          var v21451 = v24128.ClassSuperMustBeFirstCallInConstructor;
          v8911.varFlags = v21450 | v21451
        }
      }else {
        var v8913 = this.scanner;
        varDecl$$7.limChar = v8913.pos
      }
      var v21452 = TypeScript$$14.Modifiers;
      var v16745 = v21452.Static;
      var v8915 = modifiers$$7 & v16745;
      if(v8915) {
        var v16746 = varDecl$$7;
        var v21453 = varDecl$$7.varFlags;
        var v24129 = TypeScript$$14.VarFlags;
        var v21454 = v24129.Static;
        v16746.varFlags = v21453 | v21454;
        isStatic$$1 = true
      }
      var v24130 = TypeScript$$14.Modifiers;
      var v21455 = v24130.Private;
      var v16747 = modifiers$$7 & v21455;
      var v21456 = TypeScript$$14.Modifiers;
      var v16748 = v21456.None;
      var v8916 = v16747 != v16748;
      if(v8916) {
        var v16749 = varDecl$$7;
        var v21457 = varDecl$$7.varFlags;
        var v24131 = TypeScript$$14.VarFlags;
        var v21458 = v24131.Private;
        v16749.varFlags = v21457 | v21458
      }else {
        var v16750 = varDecl$$7;
        var v21459 = varDecl$$7.varFlags;
        var v24132 = TypeScript$$14.VarFlags;
        var v21460 = v24132.Public;
        v16750.varFlags = v21459 | v21460
      }
      var v16751 = varDecl$$7;
      var v21461 = varDecl$$7.varFlags;
      var v24133 = TypeScript$$14.VarFlags;
      var v21462 = v24133.Property;
      v16751.varFlags = v21461 | v21462;
      if(isDeclaredInConstructor) {
        var v16752 = varDecl$$7;
        var v21463 = varDecl$$7.varFlags;
        var v24134 = TypeScript$$14.VarFlags;
        var v21464 = v24134.ClassConstructorProperty;
        v16752.varFlags = v21463 | v21464
      }
      var v16753 = !isDeclaredInConstructor;
      if(v16753) {
        v16753 = !isStatic$$1
      }
      var v8917 = v16753;
      if(v8917) {
        var v16754 = varDecl$$7;
        var v21465 = varDecl$$7.varFlags;
        var v24135 = TypeScript$$14.VarFlags;
        var v21466 = v24135.ClassBodyProperty;
        v16754.varFlags = v21465 | v21466
      }
      var v16755 = this.currentClassDefinition;
      var v8918 = v16755.knownMemberNames;
      var v8919 = text$$15.actualText;
      JAMScript.set(v8918, v8919, true);
      var v8922 = !isDeclaredInConstructor;
      if(v8922) {
        var v21467 = this.currentClassDefinition;
        var v16756 = v21467.members;
        var v8920 = v16756.members;
        var v24136 = this.currentClassDefinition;
        var v21468 = v24136.members;
        var v16757 = v21468.members;
        var v8921 = v16757.length;
        JAMScript.set(v8920, v8921, varDecl$$7)
      }
      var v8923 = varDecl$$7;
      var v27393 = JAMScript.call(this.parseComments, this, []);
      v8923.postComments = v27393;
      return varDecl$$7
    }
    function v565(minChar$$16, errorRecoverySet$$18, modifiers$$6) {
      this.parsingClassConstructorDefinition = true;
      var v8924 = this.parsingDeclareFile;
      var v16759 = !v8924;
      if(v16759) {
        var v21469 = TypeScript$$14.Modifiers;
        var v16758 = v21469.Ambient;
        v8924 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$6, v16758])
      }
      var isAmbient$$1 = v8924;
      var v8925 = TypeScript$$14.ASTList;
      var args$$9 = JAMScript.new(v8925, []);
      var variableArgList$$2 = false;
      var preComments$$3 = JAMScript.call(this.parseComments, this, []);
      var v8926 = this.scanner;
      var v27394 = JAMScript.call(v8926.scan, v8926, []);
      this.currentToken = v27394;
      var v21470 = this.currentToken;
      var v16760 = v21470.tokenId;
      var v21471 = TypeScript$$14.TokenID;
      var v16761 = v21471.OpenParen;
      var v8930 = v16760 == v16761;
      if(v8930) {
        variableArgList$$2 = JAMScript.call(this.parseFormalParameterList, this, [errorRecoverySet$$18, args$$9, true, isAmbient$$1, false, false, false, false, null, true]);
        var v21472 = args$$9.members;
        var v16762 = v21472.length;
        var v8929 = v16762 > 0;
        if(v8929) {
          var v8927 = args$$9.members;
          var v21473 = args$$9.members;
          var v16763 = v21473.length;
          var v8928 = v16763 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var lastArg$$1 = v8927[v8928]
          }
        }
      }
      var v8931 = isAmbient$$1;
      var v16766 = !v8931;
      if(v16766) {
        var v21474 = this.currentToken;
        var v16764 = v21474.tokenId;
        var v21475 = TypeScript$$14.TokenID;
        var v16765 = v21475.Semicolon;
        v8931 = v16764 == v16765
      }
      var requiresSignature$$3 = v8931;
      if(requiresSignature$$3) {
        var i$$51 = 0;
        var v21476 = args$$9.members;
        var v16767 = v21476.length;
        var v8936 = i$$51 < v16767;
        for(;v8936;) {
          var v8932 = args$$9.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var arg$$11 = v8932[i$$51]
          }
          var v16768 = arg$$11.varFlags;
          var v21477 = TypeScript$$14.VarFlags;
          var v16769 = v21477.Property;
          var v8935 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [v16768, v16769]);
          if(v8935) {
            var v8933 = arg$$11.minChar;
            var v8934 = arg$$11.limChar;
            JAMScript.call(this.reportParseError, this, ["Overload or ambient signatures may not specify parameter properties", v8933, v8934])
          }
          i$$51 = i$$51 + 1;
          var v21478 = args$$9.members;
          var v16770 = v21478.length;
          v8936 = i$$51 < v16770
        }
      }
      var v8938 = !requiresSignature$$3;
      if(v8938) {
        var v8937 = this.currentClassDefinition;
        var v16771 = this.nestingLevel;
        v8937.constructorNestingLevel = v16771 + 1
      }
      var v21479 = TypeScript$$14.ErrorRecoverySet;
      var v16772 = v21479.RCurly;
      var v8939 = errorRecoverySet$$18 | v16772;
      var v16773 = this.currentClassDefinition;
      var v8940 = v16773.name;
      var v16774 = TypeScript$$14.AllowedElements;
      var v8941 = v16774.Properties;
      var constructorFuncDecl = JAMScript.call(this.parseFunctionStatements, this, [v8939, v8940, true, false, args$$9, v8941, minChar$$16, requiresSignature$$3, modifiers$$6]);
      constructorFuncDecl.preComments = preComments$$3;
      var v16775 = requiresSignature$$3;
      if(v16775) {
        v16775 = !isAmbient$$1
      }
      var v8942 = v16775;
      if(v8942) {
        constructorFuncDecl.isOverload = true
      }
      constructorFuncDecl.variableArgList = variableArgList$$2;
      this.currentClassDecl = null;
      var v8943 = constructorFuncDecl;
      var v21480 = this.currentClassDefinition;
      var v16776 = v21480.name;
      var v27395 = JAMScript.call(this.convertToTypeReference, this, [v16776]);
      v8943.returnTypeAnnotation = v27395;
      constructorFuncDecl.classDecl = this.currentClassDefinition;
      if(isAmbient$$1) {
        var v16777 = constructorFuncDecl;
        var v21481 = constructorFuncDecl.fncFlags;
        var v24137 = TypeScript$$14.FncFlags;
        var v21482 = v24137.Ambient;
        v16777.fncFlags = v21481 | v21482
      }
      if(requiresSignature$$3) {
        var v16778 = constructorFuncDecl;
        var v21483 = constructorFuncDecl.fncFlags;
        var v24138 = TypeScript$$14.FncFlags;
        var v21484 = v24138.Signature;
        v16778.fncFlags = v21483 | v21484
      }
      var v16779 = this.ambientModule;
      var v21486 = !v16779;
      if(v21486) {
        var v24139 = TypeScript$$14.Modifiers;
        var v21485 = v24139.Exported;
        v16779 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$6, v21485])
      }
      var v8944 = v16779;
      if(v8944) {
        var v16780 = constructorFuncDecl;
        var v21487 = constructorFuncDecl.fncFlags;
        var v24140 = TypeScript$$14.FncFlags;
        var v21488 = v24140.Exported;
        v16780.fncFlags = v21487 | v21488
      }
      var v16781 = this.currentClassDefinition;
      var v8946 = v16781.constructorDecl;
      if(v8946) {
        var v16782 = !isAmbient$$1;
        if(v16782) {
          var v26146 = this.currentClassDefinition;
          var v25434 = v26146.constructorDecl;
          var v24141 = JAMScript.call(v25434.isSignature, v25434, []);
          var v21489 = !v24141;
          if(v21489) {
            var v24142 = JAMScript.call(constructorFuncDecl.isSignature, constructorFuncDecl, []);
            v21489 = !v24142
          }
          v16782 = v21489
        }
        var v8945 = v16782;
        if(v8945) {
          JAMScript.call(this.reportParseError, this, ["Duplicate constructor definition"])
        }
      }
      var v16783 = isAmbient$$1;
      var v21491 = !v16783;
      if(v21491) {
        var v21490 = JAMScript.call(constructorFuncDecl.isSignature, constructorFuncDecl, []);
        v16783 = !v21490
      }
      var v8948 = v16783;
      if(v8948) {
        var v8947 = this.currentClassDefinition;
        v8947.constructorDecl = constructorFuncDecl
      }
      var v16784 = constructorFuncDecl;
      var v21492 = constructorFuncDecl.fncFlags;
      var v24143 = TypeScript$$14.FncFlags;
      var v21493 = v24143.ClassMethod;
      v16784.fncFlags = v21492 | v21493;
      var v21494 = this.currentClassDefinition;
      var v16785 = v21494.members;
      var v8949 = v16785.members;
      var v24144 = this.currentClassDefinition;
      var v21495 = v24144.members;
      var v16786 = v21495.members;
      var v8950 = v16786.length;
      JAMScript.set(v8949, v8950, constructorFuncDecl);
      this.parsingClassConstructorDefinition = false;
      return constructorFuncDecl
    }
    function v564(classDecl$$5, errorRecoverySet$$17, parentModifiers$$2) {
      var modifiers$$5 = parentModifiers$$2;
      var resetModifiers = false;
      var v8951 = this.scanner;
      var membersMinChar$$1 = v8951.startPos;
      var v16787 = TypeScript$$14.TokenID;
      var v8952 = v16787.OpenBrace;
      JAMScript.call(this.checkCurrentToken, this, [v8952, errorRecoverySet$$17]);
      var v16788 = this.nestingLevel;
      this.nestingLevel = v16788 + 1;
      var v8953 = this.scanner;
      var currentMemberMinChar = v8953.startPos;
      var wasGetOrSetId = false;
      var v25435 = this.currentToken;
      var v24145 = v25435.tokenId;
      var v25436 = TypeScript$$14.TokenID;
      var v24146 = v25436.CloseBrace;
      var v21496 = v24145 == v24146;
      var v24149 = !v21496;
      if(v24149) {
        var v25437 = this.currentToken;
        var v24147 = v25437.tokenId;
        var v25438 = TypeScript$$14.TokenID;
        var v24148 = v25438.EndOfFile;
        v21496 = v24147 == v24148
      }
      var v16789 = v21496;
      var v8992 = !v16789;
      for(;v8992;) {
        var scanNext = true;
        var v16790 = TypeScript$$14.Modifiers;
        var v8954 = v16790.Public;
        var v16791 = TypeScript$$14.Modifiers;
        var v8955 = v16791.Private;
        var publicOrPrivateFlags = v8954 | v8955;
        var v21497 = this.currentToken;
        var v16792 = v21497.tokenId;
        var v21498 = TypeScript$$14.TokenID;
        var v16793 = v21498.Get;
        var v8987 = v16792 == v16793;
        if(v8987) {
          var v21499 = TypeScript$$14.Modifiers;
          var v16794 = v21499.Getter;
          var v8956 = modifiers$$5 & v16794;
          if(v8956) {
            JAMScript.call(this.reportParseError, this, ["Duplicate 'get' declaration in class body"])
          }
          var v21500 = TypeScript$$14.Modifiers;
          var v16795 = v21500.Setter;
          var v8957 = modifiers$$5 & v16795;
          if(v8957) {
            JAMScript.call(this.reportParseError, this, ["Getter already marked as a setter"])
          }
          var v21501 = TypeScript$$14.Modifiers;
          var v16796 = v21501.Getter;
          modifiers$$5 = modifiers$$5 | v16796
        }else {
          var v21502 = this.currentToken;
          var v16797 = v21502.tokenId;
          var v21503 = TypeScript$$14.TokenID;
          var v16798 = v21503.Set;
          var v8986 = v16797 == v16798;
          if(v8986) {
            var v21504 = TypeScript$$14.Modifiers;
            var v16799 = v21504.Setter;
            var v8958 = modifiers$$5 & v16799;
            if(v8958) {
              JAMScript.call(this.reportParseError, this, ["Duplicate 'set' declaration in class body"])
            }
            var v21505 = TypeScript$$14.Modifiers;
            var v16800 = v21505.Getter;
            var v8959 = modifiers$$5 & v16800;
            if(v8959) {
              JAMScript.call(this.reportParseError, this, ["Setter already marked as a getter"])
            }
            var v21506 = TypeScript$$14.Modifiers;
            var v16801 = v21506.Setter;
            modifiers$$5 = modifiers$$5 | v16801
          }else {
            var v21507 = this.currentToken;
            var v16802 = v21507.tokenId;
            var v21508 = TypeScript$$14.TokenID;
            var v16803 = v21508.Private;
            var v8985 = v16802 == v16803;
            if(v8985) {
              var v8960 = modifiers$$5 & publicOrPrivateFlags;
              if(v8960) {
                JAMScript.call(this.reportParseError, this, ["Multiple modifiers may not be applied to class members"])
              }
              var v21509 = TypeScript$$14.Modifiers;
              var v16804 = v21509.Private;
              modifiers$$5 = modifiers$$5 | v16804
            }else {
              var v21510 = this.currentToken;
              var v16805 = v21510.tokenId;
              var v21511 = TypeScript$$14.TokenID;
              var v16806 = v21511.Public;
              var v8984 = v16805 == v16806;
              if(v8984) {
                var v8961 = modifiers$$5 & publicOrPrivateFlags;
                if(v8961) {
                  JAMScript.call(this.reportParseError, this, ["Multiple modifiers may not be applied to class members"])
                }
                var v21512 = TypeScript$$14.Modifiers;
                var v16807 = v21512.Public;
                modifiers$$5 = modifiers$$5 | v16807
              }else {
                var v21513 = this.currentToken;
                var v16808 = v21513.tokenId;
                var v21514 = TypeScript$$14.TokenID;
                var v16809 = v21514.Static;
                var v8983 = v16808 == v16809;
                if(v8983) {
                  var v21515 = TypeScript$$14.Modifiers;
                  var v16810 = v21515.Static;
                  var v8962 = modifiers$$5 & v16810;
                  if(v8962) {
                    JAMScript.call(this.reportParseError, this, ["Multiple modifiers may not be applied to class members"])
                  }
                  var v21516 = TypeScript$$14.Modifiers;
                  var v16811 = v21516.Static;
                  modifiers$$5 = modifiers$$5 | v16811
                }else {
                  var v21517 = this.currentToken;
                  var v16812 = v21517.tokenId;
                  var v21518 = TypeScript$$14.TokenID;
                  var v16813 = v21518.Constructor;
                  var v8982 = v16812 == v16813;
                  if(v8982) {
                    var v8963 = modifiers$$5 != parentModifiers$$2;
                    if(v8963) {
                      JAMScript.call(this.reportParseError, this, ["Constructors may not have modifiers"])
                    }
                    JAMScript.call(this.parseClassConstructorDeclaration, this, [currentMemberMinChar, errorRecoverySet$$17, modifiers$$5]);
                    scanNext = false;
                    resetModifiers = true
                  }else {
                    var v16814 = wasGetOrSetId;
                    var v21520 = !v16814;
                    if(v21520) {
                      var v25439 = this.currentToken;
                      var v24150 = v25439.tokenId;
                      var v25440 = TypeScript$$14.TokenID;
                      var v24151 = v25440.Identifier;
                      var v21519 = v24150 == v24151;
                      var v24153 = !v21519;
                      if(v24153) {
                        var v24152 = this.currentToken;
                        v21519 = JAMScript.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v24152])
                      }
                      v16814 = v21519
                    }
                    var v8981 = v16814;
                    if(v8981) {
                      var v8964;
                      if(wasGetOrSetId) {
                        var v16815;
                        var v25441 = TypeScript$$14.Modifiers;
                        var v24154 = v25441.Getter;
                        var v21521 = modifiers$$5 & v24154;
                        if(v21521) {
                          v16815 = "get"
                        }else {
                          v16815 = "set"
                        }
                        v8964 = v16815
                      }else {
                        var v16816 = this.currentToken;
                        v8964 = JAMScript.call(v16816.getText, v16816, [])
                      }
                      var idText = v8964;
                      var v8965;
                      if(wasGetOrSetId) {
                        var v16817 = TypeScript$$14.Identifier;
                        v8965 = JAMScript.new(v16817, [idText])
                      }else {
                        var v16818 = TypeScript$$14.Identifier;
                        var v16819 = this.currentToken;
                        v8965 = JAMScript.call(v16818.fromToken, v16818, [v16819])
                      }
                      var id$$11 = v8965;
                      var v8966 = this.scanner;
                      id$$11.minChar = v8966.startPos;
                      var v8967 = this.scanner;
                      id$$11.limChar = v8967.pos;
                      if(wasGetOrSetId) {
                        var v16820;
                        var v25442 = TypeScript$$14.Modifiers;
                        var v24155 = v25442.Getter;
                        var v21524 = modifiers$$5 & v24155;
                        if(v21524) {
                          var v21522 = TypeScript$$14.Modifiers;
                          v16820 = v21522.Getter
                        }else {
                          var v21523 = TypeScript$$14.Modifiers;
                          v16820 = v21523.Setter
                        }
                        var v8968 = v16820;
                        modifiers$$5 = modifiers$$5 ^ v8968;
                        wasGetOrSetId = false
                      }else {
                        var v8969 = this.scanner;
                        var v27396 = JAMScript.call(v8969.scan, v8969, []);
                        this.currentToken = v27396
                      }
                      var v21525 = this.currentToken;
                      var v16821 = v21525.tokenId;
                      var v21526 = TypeScript$$14.TokenID;
                      var v16822 = v21526.OpenParen;
                      var v8976 = v16821 == v16822;
                      if(v8976) {
                        JAMScript.call(this.parseClassMemberFunctionDeclaration, this, [id$$11, currentMemberMinChar, errorRecoverySet$$17, modifiers$$5]);
                        scanNext = false
                      }else {
                        var v24156 = TypeScript$$14.Modifiers;
                        var v21527 = v24156.Getter;
                        var v16823 = modifiers$$5 & v21527;
                        var v21529 = !v16823;
                        if(v21529) {
                          var v24157 = TypeScript$$14.Modifiers;
                          var v21528 = v24157.Setter;
                          v16823 = modifiers$$5 & v21528
                        }
                        var v8970 = v16823;
                        if(v8970) {
                          JAMScript.call(this.reportParseError, this, ["Property accessors must be functions"])
                        }
                        var varDecl$$6 = JAMScript.call(this.parseClassMemberVariableDeclaration, this, [id$$11, currentMemberMinChar, false, errorRecoverySet$$17, modifiers$$5]);
                        var v16824 = varDecl$$6.init;
                        if(v16824) {
                          var v24158 = varDecl$$6.init;
                          var v21530 = v24158.nodeType;
                          var v24159 = TypeScript$$14.NodeType;
                          var v21531 = v24159.FuncDecl;
                          v16824 = v21530 == v21531
                        }
                        var v8975 = v16824;
                        if(v8975) {
                          var v21532 = this.currentToken;
                          var v16825 = v21532.tokenId;
                          var v21533 = TypeScript$$14.TokenID;
                          var v16826 = v21533.CloseBrace;
                          var v8971 = v16825 == v16826;
                          if(v8971) {
                            scanNext = false
                          }
                        }else {
                          var v16827 = varDecl$$6.init;
                          if(v16827) {
                            var v25443 = varDecl$$6.init;
                            var v24160 = v25443.nodeType;
                            var v25444 = TypeScript$$14.NodeType;
                            var v24161 = v25444.ObjectLit;
                            var v21534 = v24160 == v24161;
                            if(v21534) {
                              var v25445 = this.currentToken;
                              var v24162 = v25445.tokenId;
                              var v25446 = TypeScript$$14.TokenID;
                              var v24163 = v25446.Semicolon;
                              v21534 = v24162 != v24163
                            }
                            v16827 = v21534
                          }
                          var v8974 = v16827;
                          if(v8974) {
                            scanNext = false;
                            var v8972 = varDecl$$6.init;
                            var v21535 = v8972.flags;
                            var v24164 = TypeScript$$14.ASTFlags;
                            var v21536 = v24164.AutomaticSemicolon;
                            v8972.flags = v21535 | v21536
                          }else {
                            var v21537 = this.currentToken;
                            var v16828 = v21537.tokenId;
                            var v21538 = TypeScript$$14.TokenID;
                            var v16829 = v21538.Semicolon;
                            var v8973 = v16828 != v16829;
                            if(v8973) {
                              JAMScript.call(this.reportParseError, this, ["Expected ';'"]);
                              scanNext = false
                            }
                          }
                        }
                      }
                      resetModifiers = true
                    }else {
                      var v21539 = this.currentToken;
                      var v16830 = v21539.tokenId;
                      var v21540 = TypeScript$$14.TokenID;
                      var v16831 = v21540.Super;
                      var v8980 = v16830 == v16831;
                      if(v8980) {
                        JAMScript.call(this.reportParseError, this, ["Base class initializers must be the first statement in a class definition"])
                      }else {
                        var v16832 = !wasGetOrSetId;
                        if(v16832) {
                          var v26147 = TypeScript$$14.Modifiers;
                          var v25447 = v26147.Getter;
                          var v24165 = modifiers$$5 & v25447;
                          var v25449 = !v24165;
                          if(v25449) {
                            var v26148 = TypeScript$$14.Modifiers;
                            var v25448 = v26148.Setter;
                            v24165 = modifiers$$5 & v25448
                          }
                          var v21541 = v24165;
                          if(v21541) {
                            var v26149 = this.currentToken;
                            var v25450 = v26149.tokenId;
                            var v26150 = TypeScript$$14.TokenID;
                            var v25451 = v26150.OpenParen;
                            var v24166 = v25450 == v25451;
                            var v25453 = !v24166;
                            if(v25453) {
                              var v26546 = this.currentToken;
                              var v26151 = v26546.tokenId;
                              var v26547 = TypeScript$$14.TokenID;
                              var v26152 = v26547.Equals;
                              var v25452 = v26151 == v26152;
                              var v26154 = !v25452;
                              if(v26154) {
                                var v26711 = this.currentToken;
                                var v26548 = v26711.tokenId;
                                var v26712 = TypeScript$$14.TokenID;
                                var v26549 = v26712.Colon;
                                var v26153 = v26548 == v26549;
                                var v26552 = !v26153;
                                if(v26552) {
                                  var v26713 = this.currentToken;
                                  var v26550 = v26713.tokenId;
                                  var v26714 = TypeScript$$14.TokenID;
                                  var v26551 = v26714.Semicolon;
                                  v26153 = v26550 == v26551
                                }
                                v25452 = v26153
                              }
                              v24166 = v25452
                            }
                            v21541 = v24166
                          }
                          v16832 = v21541
                        }
                        var v8979 = v16832;
                        if(v8979) {
                          wasGetOrSetId = true;
                          scanNext = false
                        }else {
                          var v21542 = this.currentToken;
                          var v16833 = v21542.tokenId;
                          var v21543 = TypeScript$$14.TokenID;
                          var v16834 = v21543.Semicolon;
                          var v8978 = v16833 != v16834;
                          if(v8978) {
                            var v24167 = this.currentToken;
                            var v21544 = JAMScript.call(v24167.getText, v24167, []);
                            var v16835 = "Unexpected '" + v21544;
                            var v8977 = v16835 + "' in class definition";
                            JAMScript.call(this.reportParseError, this, [v8977]);
                            resetModifiers = true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if(scanNext) {
          var v8988 = this.scanner;
          var v27397 = JAMScript.call(v8988.scan, v8988, []);
          this.currentToken = v27397;
          var v16836 = this.currentToken;
          var v8990 = v16836 === undefined;
          if(v8990) {
            var v8989 = this.scanner;
            var v27398 = JAMScript.call(v8989.scan, v8989, []);
            this.currentToken = v27398
          }
        }
        if(resetModifiers) {
          modifiers$$5 = parentModifiers$$2;
          var v8991 = this.scanner;
          currentMemberMinChar = v8991.startPos;
          resetModifiers = false
        }
        var v25454 = this.currentToken;
        var v24168 = v25454.tokenId;
        var v25455 = TypeScript$$14.TokenID;
        var v24169 = v25455.CloseBrace;
        var v21545 = v24168 == v24169;
        var v24172 = !v21545;
        if(v24172) {
          var v25456 = this.currentToken;
          var v24170 = v25456.tokenId;
          var v25457 = TypeScript$$14.TokenID;
          var v24171 = v25457.EndOfFile;
          v21545 = v24170 == v24171
        }
        var v16837 = v21545;
        v8992 = !v16837
      }
      var v8993 = this.scanner;
      var membersLimChar = v8993.pos;
      var v21546 = this.currentToken;
      var v16838 = v21546.tokenId;
      var v21547 = TypeScript$$14.TokenID;
      var v16839 = v21547.CloseBrace;
      var v9000 = v16838 == v16839;
      if(v9000) {
        var v8994 = TypeScript$$14.ASTSpan;
        var v27399 = JAMScript.new(v8994, []);
        classDecl$$5.endingToken = v27399;
        var v8995 = classDecl$$5.endingToken;
        var v16840 = this.scanner;
        v8995.minChar = v16840.startPos;
        var v8996 = classDecl$$5.endingToken;
        var v16841 = this.scanner;
        v8996.limChar = v16841.pos;
        var v25458 = this.currentClassDefinition;
        var v24173 = v25458.members;
        var v21548 = v24173.members;
        var v16842 = v21548.length;
        var v8998 = !v16842;
        if(v8998) {
          var v8997 = this.currentClassDefinition;
          var v27400 = JAMScript.call(this.parseComments, this, []);
          v8997.preComments = v27400
        }
        var v8999 = this.scanner;
        var v27401 = JAMScript.call(v8999.scan, v8999, []);
        this.currentToken = v27401
      }
      var v16843 = this.nestingLevel;
      this.nestingLevel = v16843 - 1;
      var v16844 = this.currentClassDefinition;
      var v9001 = v16844.members;
      v9001.minChar = membersMinChar$$1;
      var v16845 = this.currentClassDefinition;
      var v9002 = v16845.members;
      v9002.limChar = membersLimChar;
      var v9003 = this.currentClassDefinition;
      v9003.limChar = membersLimChar;
      this.currentClassDefinition = null;
      return
    }
    function v563(errorRecoverySet$$16, minChar$$15, modifiers$$4) {
      var v9004 = this.scanner;
      var leftCurlyCount$$3 = v9004.leftCurlyCount;
      var v9005 = this.scanner;
      var rightCurlyCount$$3 = v9005.rightCurlyCount;
      var v24174 = TypeScript$$14.Modifiers;
      var v21549 = v24174.Readonly;
      var v16846 = modifiers$$4 & v21549;
      var v21550 = TypeScript$$14.Modifiers;
      var v16847 = v21550.None;
      var v9006 = v16846 != v16847;
      if(v9006) {
        JAMScript.call(this.reportParseError, this, ["const modifier is implicit for class"])
      }
      var v16848 = this.parsingDeclareFile;
      var v21551 = !v16848;
      if(v21551) {
        v16848 = this.ambientModule
      }
      var v9007 = v16848;
      if(v9007) {
        var v21552 = TypeScript$$14.Modifiers;
        var v16849 = v21552.Ambient;
        modifiers$$4 = modifiers$$4 | v16849;
        var v21553 = TypeScript$$14.Modifiers;
        var v16850 = v21553.Exported;
        modifiers$$4 = modifiers$$4 | v16850
      }
      var v9008 = this.parsingDeclareFile;
      var v16853 = !v9008;
      if(v16853) {
        var v24175 = TypeScript$$14.Modifiers;
        var v21554 = v24175.Ambient;
        var v16851 = modifiers$$4 & v21554;
        var v21555 = TypeScript$$14.Modifiers;
        var v16852 = v21555.None;
        v9008 = v16851 != v16852
      }
      var classIsMarkedAsAmbient = v9008;
      var svAmbientClass = this.ambientClass;
      this.ambientClass = classIsMarkedAsAmbient;
      var v9009 = this.scanner;
      var v27402 = JAMScript.call(v9009.scan, v9009, []);
      this.currentToken = v27402;
      var name$$50 = null;
      var v24176 = this.currentToken;
      var v21556 = v24176.tokenId;
      var v24177 = TypeScript$$14.TokenID;
      var v21557 = v24177.Identifier;
      var v16854 = v21556 == v21557;
      var v21559 = !v16854;
      if(v21559) {
        var v25459 = this.currentToken;
        var v24178 = JAMScript.call(TypeScript$$14.isPrimitiveTypeToken, TypeScript$$14, [v25459]);
        var v21558 = !v24178;
        if(v21558) {
          var v24179 = this.currentToken;
          var v24180 = this.strictMode;
          v21558 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24179, v24180])
        }
        v16854 = v21558
      }
      var v9019 = v16854;
      if(v9019) {
        var v9010 = TypeScript$$14.Identifier;
        var v9011 = this.currentToken;
        name$$50 = JAMScript.call(v9010.fromToken, v9010, [v9011]);
        var v9012 = this.scanner;
        name$$50.minChar = v9012.startPos;
        var v9013 = this.scanner;
        name$$50.limChar = v9013.pos;
        var v9014 = this.scanner;
        var v27403 = JAMScript.call(v9014.scan, v9014, []);
        this.currentToken = v27403
      }else {
        JAMScript.call(this.reportParseError, this, ["class missing name"]);
        var v9018 = this.errorRecovery;
        if(v9018) {
          var v9015 = TypeScript$$14.MissingIdentifier;
          name$$50 = JAMScript.new(v9015, []);
          var v9016 = this.scanner;
          name$$50.minChar = v9016.pos;
          var v9017 = this.scanner;
          name$$50.limChar = v9017.pos;
          var v16855 = name$$50;
          var v21560 = name$$50.flags;
          var v24181 = TypeScript$$14.ASTFlags;
          var v21561 = v24181.Error;
          v16855.flags = v21560 | v21561
        }
      }
      var extendsList$$5 = null;
      var implementsList$$4 = null;
      var requiresSignature$$2 = false;
      var v24182 = this.currentToken;
      var v21562 = v24182.tokenId;
      var v24183 = TypeScript$$14.TokenID;
      var v21563 = v24183.Extends;
      var v16856 = v21562 == v21563;
      var v21566 = !v16856;
      if(v21566) {
        var v24184 = this.currentToken;
        var v21564 = v24184.tokenId;
        var v24185 = TypeScript$$14.TokenID;
        var v21565 = v24185.Implements;
        v16856 = v21564 == v21565
      }
      var v9022 = v16856;
      if(v9022) {
        var v9020 = TypeScript$$14.ASTList;
        extendsList$$5 = JAMScript.new(v9020, []);
        var v9021 = TypeScript$$14.ASTList;
        implementsList$$4 = JAMScript.new(v9021, []);
        JAMScript.call(this.parseBaseList, this, [extendsList$$5, implementsList$$4, errorRecoverySet$$16, true])
      }
      var v9023 = TypeScript$$14.ClassDeclaration;
      var v16857 = TypeScript$$14.ASTList;
      var v9024 = JAMScript.new(v16857, []);
      var classDecl$$4 = JAMScript.new(v9023, [name$$50, v9024, extendsList$$5, implementsList$$4]);
      this.currentClassDefinition = classDecl$$4;
      JAMScript.call(this.parseClassElements, this, [classDecl$$4, errorRecoverySet$$16, modifiers$$4]);
      var v16858 = this.ambientModule;
      var v21568 = !v16858;
      if(v21568) {
        var v21567 = this.parsingDeclareFile;
        var v24187 = !v21567;
        if(v24187) {
          var v25460 = TypeScript$$14.Modifiers;
          var v24186 = v25460.Exported;
          v21567 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$4, v24186])
        }
        v16858 = v21567
      }
      var v9025 = v16858;
      if(v9025) {
        var v16859 = classDecl$$4;
        var v21569 = classDecl$$4.varFlags;
        var v24188 = TypeScript$$14.VarFlags;
        var v21570 = v24188.Exported;
        v16859.varFlags = v21569 | v21570
      }
      var v16860 = this.ambientModule;
      var v21572 = !v16860;
      if(v21572) {
        var v24189 = TypeScript$$14.Modifiers;
        var v21571 = v24189.Ambient;
        v16860 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$4, v21571])
      }
      var v9026 = v16860;
      if(v9026) {
        var v16861 = classDecl$$4;
        var v21573 = classDecl$$4.varFlags;
        var v24190 = TypeScript$$14.VarFlags;
        var v21574 = v24190.Ambient;
        v16861.varFlags = v21573 | v21574
      }
      var v16862 = classDecl$$4;
      var v21575 = classDecl$$4.varFlags;
      var v24191 = TypeScript$$14.VarFlags;
      var v21576 = v24191.Class;
      v16862.varFlags = v21575 | v21576;
      this.ambientClass = svAmbientClass;
      var v16863 = this.scanner;
      var v9027 = v16863.leftCurlyCount;
      classDecl$$4.leftCurlyCount = v9027 - leftCurlyCount$$3;
      var v16864 = this.scanner;
      var v9028 = v16864.rightCurlyCount;
      classDecl$$4.rightCurlyCount = v9028 - rightCurlyCount$$3;
      return classDecl$$4
    }
    function v562(extendsList$$4, implementsList$$3, errorRecoverySet$$15, isClass) {
      var keyword = true;
      var currentList = extendsList$$4;
      for(;;) {
        if(keyword) {
          var v21577 = this.currentToken;
          var v16865 = v21577.tokenId;
          var v21578 = TypeScript$$14.TokenID;
          var v16866 = v21578.Implements;
          var v9030 = v16865 === v16866;
          if(v9030) {
            currentList = implementsList$$3
          }else {
            var v24192 = this.currentToken;
            var v21579 = v24192.tokenId;
            var v24193 = TypeScript$$14.TokenID;
            var v21580 = v24193.Extends;
            var v16867 = v21579 == v21580;
            if(v16867) {
              var v21581 = this.requiresExtendsBlock;
              v16867 = !v21581
            }
            var v9029 = v16867;
            if(v9029) {
              this.requiresExtendsBlock = isClass
            }
          }
          var v9031 = this.scanner;
          var v27404 = JAMScript.call(v9031.scan, v9031, []);
          this.currentToken = v27404;
          keyword = false
        }
        var baseName$$3 = null;
        var v24194 = this.currentToken;
        var v21582 = v24194.tokenId;
        var v24195 = TypeScript$$14.TokenID;
        var v21583 = v24195.Identifier;
        var v16868 = v21582 == v21583;
        var v21586 = !v16868;
        if(v21586) {
          var v21584 = this.currentToken;
          var v21585 = this.strictMode;
          v16868 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21584, v21585])
        }
        var v9041 = v16868;
        if(v9041) {
          var v9032 = this.scanner;
          var minChar$$14 = v9032.startPos;
          var v9033 = TypeScript$$14.Identifier;
          var v9034 = this.currentToken;
          baseName$$3 = JAMScript.call(v9033.fromToken, v9033, [v9034]);
          baseName$$3.minChar = minChar$$14;
          var v9035 = this.scanner;
          baseName$$3.limChar = v9035.pos;
          var v21587 = TypeScript$$14.ErrorRecoverySet;
          var v16869 = v21587.LCurly;
          var v9036 = errorRecoverySet$$15 | v16869;
          baseName$$3 = JAMScript.call(this.parseNamedType, this, [v9036, minChar$$14, baseName$$3, false])
        }else {
          JAMScript.call(this.reportParseError, this, ["Expected base name"]);
          var v9040 = this.errorRecovery;
          if(v9040) {
            var v9037 = TypeScript$$14.MissingIdentifier;
            baseName$$3 = JAMScript.new(v9037, []);
            var v9038 = this.scanner;
            baseName$$3.minChar = v9038.pos;
            var v9039 = this.scanner;
            baseName$$3.limChar = v9039.pos;
            var v16870 = baseName$$3;
            var v21588 = baseName$$3.flags;
            var v24196 = TypeScript$$14.ASTFlags;
            var v21589 = v24196.Error;
            v16870.flags = v21588 | v21589
          }
        }
        var v21590 = this.currentToken;
        var v16871 = v21590.tokenId;
        var v21591 = TypeScript$$14.TokenID;
        var v16872 = v21591.OpenParen;
        var v9042 = v16871 == v16872;
        if(v9042) {
          if(isClass) {
            JAMScript.call(this.reportParseError, this, ["Base classes may only be initialized via a 'super' call within the constructor body"])
          }else {
            JAMScript.call(this.reportParseError, this, ["Interfaces may not be extended with a call expression"])
          }
        }else {
          JAMScript.call(currentList.append, currentList, [baseName$$3])
        }
        var v16873 = isClass;
        if(v16873) {
          var v21592 = currentList == extendsList$$4;
          if(v21592) {
            var v25461 = extendsList$$4.members;
            var v24197 = v25461.length;
            v21592 = v24197 > 1
          }
          v16873 = v21592
        }
        var v9043 = v16873;
        if(v9043) {
          JAMScript.call(this.reportParseError, this, ["A class may only extend one other class"])
        }
        var v21593 = this.currentToken;
        var v16874 = v21593.tokenId;
        var v21594 = TypeScript$$14.TokenID;
        var v16875 = v21594.Comma;
        var v9047 = v16874 == v16875;
        if(v9047) {
          var v9044 = this.scanner;
          var v27405 = JAMScript.call(v9044.scan, v9044, []);
          this.currentToken = v27405;
          continue
        }else {
          var v24198 = this.currentToken;
          var v21595 = v24198.tokenId;
          var v24199 = TypeScript$$14.TokenID;
          var v21596 = v24199.Extends;
          var v16876 = v21595 == v21596;
          var v21599 = !v16876;
          if(v21599) {
            var v24200 = this.currentToken;
            var v21597 = v24200.tokenId;
            var v24201 = TypeScript$$14.TokenID;
            var v21598 = v24201.Implements;
            v16876 = v21597 == v21598
          }
          var v9046 = v16876;
          if(v9046) {
            var v24202 = this.currentToken;
            var v21600 = v24202.tokenId;
            var v24203 = TypeScript$$14.TokenID;
            var v21601 = v24203.Extends;
            var v16877 = v21600 == v21601;
            if(v16877) {
              var v21602 = this.requiresExtendsBlock;
              v16877 = !v21602
            }
            var v9045 = v16877;
            if(v9045) {
              this.requiresExtendsBlock = isClass
            }
            currentList = extendsList$$4;
            keyword = true;
            continue
          }
        }
        break
      }
      return
    }
    function v561(errorRecoverySet$$14) {
      var v9048 = TypeScript$$14.ASTList;
      var args$$8 = JAMScript.new(v9048, []);
      var v9049 = this.scanner;
      args$$8.minChar = v9049.startPos;
      var v9050 = this.scanner;
      var v27406 = JAMScript.call(v9050.scan, v9050, []);
      this.currentToken = v27406;
      var v21603 = this.currentToken;
      var v16878 = v21603.tokenId;
      var v21604 = TypeScript$$14.TokenID;
      var v16879 = v21604.CloseParen;
      var v9057 = v16878 !== v16879;
      if(v9057) {
        for(;true;) {
          var v21605 = args$$8.members;
          var v16880 = v21605.length;
          var v9051 = v16880 > 65535;
          if(v9051) {
            JAMScript.call(this.reportParseError, this, ["max number of args exceeded"]);
            break
          }
          var v21606 = TypeScript$$14.ErrorRecoverySet;
          var v16881 = v21606.Comma;
          var v9052 = v16881 | errorRecoverySet$$14;
          var v16882 = TypeScript$$14.OperatorPrecedence;
          var v9053 = v16882.Comma;
          var v9054 = TypeContext.NoTypes;
          var arg$$10 = JAMScript.call(this.parseExpr, this, [v9052, v9053, true, v9054]);
          JAMScript.call(args$$8.append, args$$8, [arg$$10]);
          var v21607 = this.currentToken;
          var v16883 = v21607.tokenId;
          var v21608 = TypeScript$$14.TokenID;
          var v16884 = v21608.Comma;
          var v9055 = v16883 != v16884;
          if(v9055) {
            break
          }
          var v9056 = this.scanner;
          var v27407 = JAMScript.call(v9056.scan, v9056, []);
          this.currentToken = v27407
        }
      }
      var v9058 = this.scanner;
      args$$8.limChar = v9058.pos;
      return args$$8
    }
    function v560(ast$$37) {
      var result$$9;
      var v9063 = ast$$37.nodeType;
      switch(v9063) {
        case TypeScript$$14.NodeType.TypeRef:
          return ast$$37;
        case TypeScript$$14.NodeType.Name:
          var v9059 = TypeScript$$14.TypeReference;
          result$$9 = JAMScript.new(v9059, [ast$$37, 0]);
          result$$9.minChar = ast$$37.minChar;
          result$$9.limChar = ast$$37.limChar;
          return result$$9;
        case TypeScript$$14.NodeType.Index:
          var expr$$4 = ast$$37;
          var v9060 = expr$$4.operand1;
          result$$9 = JAMScript.call(this.convertToTypeReference, this, [v9060]);
          if(result$$9) {
            var v16885 = result$$9;
            var v21609 = result$$9.arrayCount;
            v16885.arrayCount = v21609 + 1;
            result$$9.minChar = expr$$4.minChar;
            result$$9.limChar = expr$$4.limChar;
            return result$$9
          }else {
            var v9061 = TypeScript$$14.AST;
            var v16886 = TypeScript$$14.NodeType;
            var v9062 = v16886.Error;
            var etr$$1 = JAMScript.new(v9061, [v9062]);
            return etr$$1
          }
      }
      return null
    }
    function v559(errorRecoverySet$$13, isDecl, requiresSignature$$1, isMethod$$1, methodName, indexer, isStatic, markedAsAmbient, modifiers$$3, lambdaArgContext, expectClosingRParen$$1) {
      var v9064 = this.scanner;
      var leftCurlyCount$$2 = v9064.leftCurlyCount;
      var v9065 = this.scanner;
      var rightCurlyCount$$2 = v9065.rightCurlyCount;
      var prevInConstr = this.parsingClassConstructorDefinition;
      this.parsingClassConstructorDefinition = false;
      var name$$49 = null;
      var v9066 = this.scanner;
      var fnMin = v9066.startPos;
      var v9067 = this.scanner;
      var minChar$$13 = v9067.pos;
      var prevNestingLevel = this.nestingLevel;
      var preComments$$2 = JAMScript.call(this.parseComments, this, []);
      var v9068 = !lambdaArgContext;
      var isLambda$$1 = !v9068;
      this.nestingLevel = 0;
      var v21610 = this.style_funcInLoop;
      var v16887 = !v21610;
      if(v16887) {
        v16887 = JAMScript.call(this.inLoop, this, [])
      }
      var v9069 = v16887;
      if(v9069) {
        JAMScript.call(this.reportParseStyleError, this, ["function declaration in loop"])
      }
      var v16888 = !isMethod$$1;
      if(v16888) {
        var v21611 = !isStatic;
        if(v21611) {
          var v24204 = !indexer;
          if(v24204) {
            v24204 = !lambdaArgContext
          }
          v21611 = v24204
        }
        v16888 = v21611
      }
      var v9079 = v16888;
      if(v9079) {
        var v9070 = this.scanner;
        var v27408 = JAMScript.call(v9070.scan, v9070, []);
        this.currentToken = v27408;
        this.state = ParseState.StartFncDecl;
        var v24205 = this.currentToken;
        var v21612 = v24205.tokenId;
        var v24206 = TypeScript$$14.TokenID;
        var v21613 = v24206.Identifier;
        var v16889 = v21612 != v21613;
        if(v16889) {
          var v24207 = this.currentToken;
          var v24208 = this.strictMode;
          var v21614 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24207, v24208]);
          v16889 = !v21614
        }
        var v9078 = v16889;
        if(v9078) {
          if(isDecl) {
            JAMScript.call(this.reportParseError, this, ["Function declaration must include identifier"]);
            this.nestingLevel = prevNestingLevel;
            var v9071 = TypeScript$$14.IncompleteAST;
            var v16890 = this.scanner;
            var v9072 = v16890.pos;
            return JAMScript.new(v9071, [fnMin, v9072])
          }
        }else {
          var v9073 = TypeScript$$14.Identifier;
          var v9074 = this.currentToken;
          name$$49 = JAMScript.call(v9073.fromToken, v9073, [v9074]);
          var v9075 = this.scanner;
          name$$49.minChar = v9075.startPos;
          var v9076 = this.scanner;
          name$$49.limChar = v9076.pos;
          var v9077 = this.scanner;
          var v27409 = JAMScript.call(v9077.scan, v9077, []);
          this.currentToken = v27409
        }
      }else {
        if(methodName) {
          name$$49 = methodName
        }
      }
      this.state = ParseState.FncDeclName;
      var v9080 = TypeScript$$14.ASTList;
      var args$$7 = JAMScript.new(v9080, []);
      var variableArgList$$1 = false;
      var isOverload = false;
      var v16891 = TypeScript$$14.Modifiers;
      var v9081 = v16891.Getter;
      var isGetter$$1 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$3, v9081]);
      var v16892 = TypeScript$$14.Modifiers;
      var v9082 = v16892.Setter;
      var isSetter$$1 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$3, v9082]);
      var v24209 = this.currentToken;
      var v21615 = v24209.tokenId;
      var v24210 = TypeScript$$14.TokenID;
      var v21616 = v24210.OpenParen;
      var v16893 = v21615 == v21616;
      var v21618 = !v16893;
      if(v21618) {
        var v24211 = indexer;
        if(v24211) {
          var v26155 = this.currentToken;
          var v25462 = v26155.tokenId;
          var v26156 = TypeScript$$14.TokenID;
          var v25463 = v26156.OpenBracket;
          v24211 = v25462 == v25463
        }
        var v21617 = v24211;
        var v24213 = !v21617;
        if(v24213) {
          var v24212 = lambdaArgContext;
          if(v24212) {
            var v25464 = lambdaArgContext.preProcessedLambdaArgs;
            var v26159 = !v25464;
            if(v26159) {
              var v26553 = this.currentToken;
              var v26157 = v26553.tokenId;
              var v26554 = TypeScript$$14.TokenID;
              var v26158 = v26554.DotDotDot;
              v25464 = v26157 == v26158
            }
            v24212 = v25464
          }
          v21617 = v24212
        }
        v16893 = v21617
      }
      var v9084 = v16893;
      if(v9084) {
        var v16894;
        if(lambdaArgContext) {
          v16894 = lambdaArgContext.preProcessedLambdaArgs
        }else {
          v16894 = null
        }
        var v9083 = v16894;
        variableArgList$$1 = JAMScript.call(this.parseFormalParameterList, this, [errorRecoverySet$$13, args$$7, false, requiresSignature$$1, indexer, isGetter$$1, isSetter$$1, isLambda$$1, v9083, expectClosingRParen$$1])
      }
      this.state = ParseState.FncDeclArgs;
      var returnType$$1 = null;
      var v21619 = this.currentToken;
      var v16895 = v21619.tokenId;
      var v21620 = TypeScript$$14.TokenID;
      var v16896 = v21620.Colon;
      var v9087 = v16895 == v16896;
      if(v9087) {
        var v9085 = this.scanner;
        var v27410 = JAMScript.call(v9085.scan, v9085, []);
        this.currentToken = v27410;
        var v21621 = TypeScript$$14.Modifiers;
        var v16897 = v21621.Setter;
        var v9086 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$3, v16897]);
        if(v9086) {
          JAMScript.call(this.reportParseError, this, ["Property setters may not declare a return type"])
        }
        returnType$$1 = JAMScript.call(this.parseTypeReference, this, [errorRecoverySet$$13, true])
      }
      var v16898 = indexer;
      if(v16898) {
        var v24214 = args$$7.members;
        var v21622 = v24214.length;
        v16898 = v21622 == 0
      }
      var v9088 = v16898;
      if(v9088) {
        JAMScript.call(this.reportParseError, this, ["Index signatures require a parameter type to be specified"])
      }
      this.state = ParseState.FncDeclReturnType;
      var v16899 = isLambda$$1;
      if(v16899) {
        var v24215 = this.currentToken;
        var v21623 = v24215.tokenId;
        var v24216 = TypeScript$$14.TokenID;
        var v21624 = v24216.EqualsGreaterThan;
        v16899 = v21623 != v21624
      }
      var v9089 = v16899;
      if(v9089) {
        JAMScript.call(this.reportParseError, this, ["Expected '=>'"])
      }
      var v16900 = isDecl;
      if(v16900) {
        var v25465 = this.parsingDeclareFile;
        var v26160 = !v25465;
        if(v26160) {
          v25465 = markedAsAmbient
        }
        var v24217 = v25465;
        var v21625 = !v24217;
        if(v21625) {
          var v25466 = !isMethod$$1;
          var v26162 = !v25466;
          if(v26162) {
            var v26555 = this.ambientModule;
            var v26716 = !v26555;
            if(v26716) {
              var v26715 = this.ambientClass;
              var v26802 = !v26715;
              if(v26802) {
                v26715 = this.inInterfaceDecl
              }
              v26555 = v26715
            }
            var v26161 = v26555;
            v25466 = !v26161
          }
          var v24218 = v25466;
          if(v24218) {
            var v26163 = this.currentToken;
            var v25467 = v26163.tokenId;
            var v26164 = TypeScript$$14.TokenID;
            var v25468 = v26164.Semicolon;
            v24218 = v25467 == v25468
          }
          v21625 = v24218
        }
        v16900 = v21625
      }
      var v9090 = v16900;
      if(v9090) {
        isOverload = true;
        isDecl = false;
        requiresSignature$$1 = true
      }
      var svInFncDecl = this.inFncDecl;
      this.inFncDecl = true;
      var v21626 = TypeScript$$14.ErrorRecoverySet;
      var v16901 = v21626.RCurly;
      var v9091 = errorRecoverySet$$13 | v16901;
      var v16902 = TypeScript$$14.AllowedElements;
      var v9092 = v16902.None;
      var v16903 = TypeScript$$14.Modifiers;
      var v9093 = v16903.None;
      var funcDecl$$7 = JAMScript.call(this.parseFunctionStatements, this, [v9091, name$$49, false, isMethod$$1, args$$7, v9092, minChar$$13, requiresSignature$$1, v9093]);
      this.inFncDecl = svInFncDecl;
      funcDecl$$7.variableArgList = variableArgList$$1;
      funcDecl$$7.isOverload = isOverload;
      var v9094 = !requiresSignature$$1;
      if(v9094) {
        var v16904 = funcDecl$$7;
        var v21627 = funcDecl$$7.fncFlags;
        var v24219 = TypeScript$$14.FncFlags;
        var v21628 = v24219.Definition;
        v16904.fncFlags = v21627 | v21628
      }
      if(isStatic) {
        var v16905 = funcDecl$$7;
        var v21629 = funcDecl$$7.fncFlags;
        var v24220 = TypeScript$$14.FncFlags;
        var v21630 = v24220.Static;
        v16905.fncFlags = v21629 | v21630
      }
      if(requiresSignature$$1) {
        var v16906 = funcDecl$$7;
        var v21631 = funcDecl$$7.fncFlags;
        var v24221 = TypeScript$$14.FncFlags;
        var v21632 = v24221.Signature;
        v16906.fncFlags = v21631 | v21632
      }
      if(indexer) {
        var v16907 = funcDecl$$7;
        var v21633 = funcDecl$$7.fncFlags;
        var v24222 = TypeScript$$14.FncFlags;
        var v21634 = v24222.IndexerMember;
        v16907.fncFlags = v21633 | v21634
      }
      funcDecl$$7.returnTypeAnnotation = returnType$$1;
      if(isMethod$$1) {
        var v16908 = funcDecl$$7;
        var v21635 = funcDecl$$7.fncFlags;
        var v24223 = TypeScript$$14.FncFlags;
        var v21636 = v24223.Method;
        v16908.fncFlags = v21635 | v21636;
        var v16909 = funcDecl$$7;
        var v21637 = funcDecl$$7.fncFlags;
        var v24224 = TypeScript$$14.FncFlags;
        var v21638 = v24224.ClassPropertyMethodExported;
        v16909.fncFlags = v21637 | v21638
      }
      var v16910 = this.scanner;
      var v9095 = v16910.leftCurlyCount;
      funcDecl$$7.leftCurlyCount = v9095 - leftCurlyCount$$2;
      var v16911 = this.scanner;
      var v9096 = v16911.rightCurlyCount;
      funcDecl$$7.rightCurlyCount = v9096 - rightCurlyCount$$2;
      this.nestingLevel = prevNestingLevel;
      this.parsingClassConstructorDefinition = prevInConstr;
      funcDecl$$7.preComments = preComments$$2;
      return funcDecl$$7
    }
    function v558(errorRecoverySet$$12, formals$$2, isClassConstr, isSig, isIndexer, isGetter, isSetter, isLambda, preProcessedLambdaArgs, expectClosingRParen) {
      var v9097 = this.scanner;
      formals$$2.minChar = v9097.startPos;
      if(isIndexer) {
        var v9098 = this.scanner;
        var v27411 = JAMScript.call(v9098.scan, v9098, []);
        this.currentToken = v27411
      }else {
        var v9101 = !isLambda;
        if(v9101) {
          var v16912 = TypeScript$$14.TokenID;
          var v9099 = v16912.OpenParen;
          var v21639 = TypeScript$$14.ErrorRecoverySet;
          var v16913 = v21639.RParen;
          var v9100 = errorRecoverySet$$12 | v16913;
          JAMScript.call(this.checkCurrentToken, this, [v9099, v9100])
        }
      }
      var sawEllipsis = false;
      var firstArg = true;
      var hasOptional = false;
      var haveFirstArgID = false;
      var v16914 = isLambda;
      if(v16914) {
        var v21640 = preProcessedLambdaArgs;
        if(v21640) {
          var v24225 = preProcessedLambdaArgs.nodeType;
          var v25469 = TypeScript$$14.NodeType;
          var v24226 = v25469.EmptyExpr;
          v21640 = v24225 != v24226
        }
        v16914 = v21640
      }
      var v9102 = v16914;
      if(v9102) {
        hasOptional = JAMScript.call(this.transformAnonymousArgsIntoFormals, this, [formals$$2, preProcessedLambdaArgs]);
        haveFirstArgID = true
      }
      for(;true;) {
        var munchedArg = false;
        var v9103 = TypeScript$$14.VarFlags;
        var argFlags = v9103.None;
        var v9104 = this.scanner;
        var argMinChar = v9104.startPos;
        var v16915 = this.inferPropertiesFromThisAssignment;
        if(v16915) {
          var v24227 = this.currentToken;
          var v21641 = v24227.tokenId;
          var v24228 = TypeScript$$14.TokenID;
          var v21642 = v24228.This;
          v16915 = v21641 == v21642
        }
        var v9109 = v16915;
        if(v9109) {
          var v9105 = !isClassConstr;
          if(v9105) {
            JAMScript.call(this.reportParseError, this, ["Instance property declarations using 'this' may only be used in class constructors"])
          }
          var v9106 = this.scanner;
          var v27412 = JAMScript.call(v9106.scan, v9106, []);
          this.currentToken = v27412;
          var v24229 = TypeScript$$14.VarFlags;
          var v21643 = v24229.Public;
          var v24230 = TypeScript$$14.VarFlags;
          var v21644 = v24230.Property;
          var v16916 = v21643 | v21644;
          argFlags = argFlags | v16916;
          var v9108 = this.currentClassDefinition;
          if(v9108) {
            var v9107 = this.currentClassDefinition;
            var v21645 = v9107.varFlags;
            var v24231 = TypeScript$$14.VarFlags;
            var v21646 = v24231.ClassSuperMustBeFirstCallInConstructor;
            v9107.varFlags = v21645 | v21646
          }
        }
        var v21647 = this.currentToken;
        var v16917 = v21647.tokenId;
        var v21648 = TypeScript$$14.TokenID;
        var v16918 = v21648.Public;
        var v9117 = v16917 == v16918;
        if(v9117) {
          var v24232 = TypeScript$$14.VarFlags;
          var v21649 = v24232.Public;
          var v24233 = TypeScript$$14.VarFlags;
          var v21650 = v24233.Property;
          var v16919 = v21649 | v21650;
          argFlags = argFlags | v16919;
          var v9111 = this.currentClassDefinition;
          if(v9111) {
            var v9110 = this.currentClassDefinition;
            var v21651 = v9110.varFlags;
            var v24234 = TypeScript$$14.VarFlags;
            var v21652 = v24234.ClassSuperMustBeFirstCallInConstructor;
            v9110.varFlags = v21651 | v21652
          }
        }else {
          var v21653 = this.currentToken;
          var v16920 = v21653.tokenId;
          var v21654 = TypeScript$$14.TokenID;
          var v16921 = v21654.Private;
          var v9116 = v16920 == v16921;
          if(v9116) {
            var v24235 = TypeScript$$14.VarFlags;
            var v21655 = v24235.Private;
            var v24236 = TypeScript$$14.VarFlags;
            var v21656 = v24236.Property;
            var v16922 = v21655 | v21656;
            argFlags = argFlags | v16922;
            var v9113 = this.currentClassDefinition;
            if(v9113) {
              var v9112 = this.currentClassDefinition;
              var v21657 = v9112.varFlags;
              var v24237 = TypeScript$$14.VarFlags;
              var v21658 = v24237.ClassSuperMustBeFirstCallInConstructor;
              v9112.varFlags = v21657 | v21658
            }
          }else {
            var v24238 = this.currentToken;
            var v21659 = v24238.tokenId;
            var v24239 = TypeScript$$14.TokenID;
            var v21660 = v24239.Static;
            var v16923 = v21659 == v21660;
            if(v16923) {
              v16923 = isClassConstr
            }
            var v9115 = v16923;
            if(v9115) {
              JAMScript.call(this.reportParseError, this, ["Static properties can not be declared as parameter properties"]);
              var v9114 = this.scanner;
              var v27413 = JAMScript.call(v9114.scan, v9114, []);
              this.currentToken = v27413
            }
          }
        }
        var v21661 = TypeScript$$14.VarFlags;
        var v16924 = v21661.None;
        var v9129 = argFlags != v16924;
        if(v9129) {
          var v9118 = !isClassConstr;
          if(v9118) {
            JAMScript.call(this.reportParseError, this, ["only constructor parameters can be properties"])
          }
          var v9119 = this.scanner;
          var v27414 = JAMScript.call(v9119.scan, v9119, []);
          this.currentToken = v27414;
          var v16925 = this.currentToken;
          var v9121 = JAMScript.call(TypeScript$$14.isModifier, TypeScript$$14, [v16925]);
          if(v9121) {
            JAMScript.call(this.reportParseError, this, ["Multiple modifiers may not be applied to parameters"]);
            var v9120 = this.scanner;
            var v27415 = JAMScript.call(v9120.scan, v9120, []);
            this.currentToken = v27415
          }
          var v16926 = this.inferPropertiesFromThisAssignment;
          if(v16926) {
            var v24240 = this.currentToken;
            var v21662 = v24240.tokenId;
            var v24241 = TypeScript$$14.TokenID;
            var v21663 = v24241.This;
            v16926 = v21662 == v21663
          }
          var v9125 = v16926;
          if(v9125) {
            var v9122 = !isClassConstr;
            if(v9122) {
              JAMScript.call(this.reportParseError, this, ["Instance property declarations using 'this' may only be used in class constructors"])
            }
            var v9123 = this.scanner;
            var v27416 = JAMScript.call(v9123.scan, v9123, []);
            this.currentToken = v27416;
            var v9124 = this.scanner;
            var v27417 = JAMScript.call(v9124.scan, v9124, []);
            this.currentToken = v27417
          }
        }else {
          var v21664 = this.currentToken;
          var v16927 = v21664.tokenId;
          var v21665 = TypeScript$$14.TokenID;
          var v16928 = v21665.DotDotDot;
          var v9128 = v16927 == v16928;
          if(v9128) {
            sawEllipsis = true;
            var v9126 = this.scanner;
            var v27418 = JAMScript.call(v9126.scan, v9126, []);
            this.currentToken = v27418;
            var v25470 = this.currentToken;
            var v24242 = v25470.tokenId;
            var v25471 = TypeScript$$14.TokenID;
            var v24243 = v25471.Identifier;
            var v21666 = v24242 == v24243;
            var v16929 = !v21666;
            var v21669 = !v16929;
            if(v21669) {
              var v21667 = this.currentToken;
              var v21668 = this.strictMode;
              v16929 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21667, v21668])
            }
            var v9127 = v16929;
            if(v9127) {
              JAMScript.call(this.reportParseError, this, ["'...' parameters require both a parameter name and an array type annotation to be specified"]);
              sawEllipsis = false
            }
          }
        }
        var argId = null;
        var v21670 = !haveFirstArgID;
        if(v21670) {
          var v25472 = this.currentToken;
          var v24244 = v25472.tokenId;
          var v25473 = TypeScript$$14.TokenID;
          var v24245 = v25473.Identifier;
          v21670 = v24244 == v24245
        }
        var v16930 = v21670;
        var v21673 = !v16930;
        if(v21673) {
          var v21671 = this.currentToken;
          var v21672 = this.strictMode;
          v16930 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21671, v21672])
        }
        var v9134 = v16930;
        if(v9134) {
          var v9130 = TypeScript$$14.Identifier;
          var v9131 = this.currentToken;
          argId = JAMScript.call(v9130.fromToken, v9130, [v9131]);
          var v9132 = this.scanner;
          argId.minChar = v9132.startPos;
          var v9133 = this.scanner;
          argId.limChar = v9133.pos
        }
        var v9156 = haveFirstArgID || argId;
        if(v9156) {
          munchedArg = true;
          var type$$30 = null;
          var arg$$9 = null;
          var v16931 = haveFirstArgID;
          if(v16931) {
            var v21674 = formals$$2.members;
            v16931 = v21674.length
          }
          var v9142 = v16931;
          if(v9142) {
            var v9135 = formals$$2.members;
            var v21675 = formals$$2.members;
            var v16932 = v21675.length;
            var v9136 = v16932 - 1;
            arg$$9 = v9135[v9136];
            var v9137 = arg$$9.isOptional;
            if(v9137) {
              hasOptional = true
            }
          }else {
            var v9138 = TypeScript$$14.ArgDecl;
            arg$$9 = JAMScript.new(v9138, [argId]);
            if(isGetter) {
              JAMScript.call(this.reportParseError, this, ["Property getters may not take any arguments"])
            }
            var v16933 = isSetter;
            if(v16933) {
              v16933 = !firstArg
            }
            var v9139 = v16933;
            if(v9139) {
              JAMScript.call(this.reportParseError, this, ["Property setters may only take one argument"])
            }
            arg$$9.minChar = argMinChar;
            var v9140 = arg$$9;
            var v27419 = JAMScript.call(this.parseComments, this, []);
            v9140.preComments = v27419;
            var v9141 = this.scanner;
            var v27420 = JAMScript.call(v9141.scan, v9141, []);
            this.currentToken = v27420
          }
          var v21676 = this.currentToken;
          var v16934 = v21676.tokenId;
          var v21677 = TypeScript$$14.TokenID;
          var v16935 = v21677.Question;
          var v9144 = v16934 == v16935;
          if(v9144) {
            arg$$9.isOptional = true;
            hasOptional = true;
            var v9143 = this.scanner;
            var v27421 = JAMScript.call(v9143.scan, v9143, []);
            this.currentToken = v27421
          }
          var v21678 = this.currentToken;
          var v16936 = v21678.tokenId;
          var v21679 = TypeScript$$14.TokenID;
          var v16937 = v21679.Colon;
          var v9146 = v16936 == v16937;
          if(v9146) {
            var v9145 = this.scanner;
            var v27422 = JAMScript.call(v9145.scan, v9145, []);
            this.currentToken = v27422;
            type$$30 = JAMScript.call(this.parseTypeReference, this, [errorRecoverySet$$12, false])
          }
          var v21680 = this.currentToken;
          var v16938 = v21680.tokenId;
          var v21681 = TypeScript$$14.TokenID;
          var v16939 = v21681.Equals;
          var v9149 = v16938 == v16939;
          if(v9149) {
            if(isSig) {
              JAMScript.call(this.reportParseError, this, ["Arguments in signatures may not have default values"])
            }
            hasOptional = true;
            var v9147 = this.scanner;
            var v27423 = JAMScript.call(v9147.scan, v9147, []);
            this.currentToken = v27423;
            var v9148 = arg$$9;
            var v24246 = TypeScript$$14.ErrorRecoverySet;
            var v21682 = v24246.Comma;
            var v16940 = v21682 | errorRecoverySet$$12;
            var v21683 = TypeScript$$14.OperatorPrecedence;
            var v16941 = v21683.Comma;
            var v16942 = TypeContext.NoTypes;
            var v27424 = JAMScript.call(this.parseExpr, this, [v16940, v16941, false, v16942]);
            v9148.init = v27424
          }
          var v16943 = hasOptional;
          if(v16943) {
            var v24247 = JAMScript.call(arg$$9.isOptionalArg, arg$$9, []);
            var v21684 = !v24247;
            if(v21684) {
              v21684 = !sawEllipsis
            }
            v16943 = v21684
          }
          var v9150 = v16943;
          if(v9150) {
            JAMScript.call(this.reportParseError, this, ["Optional parameters may only be followed by other optional parameters"])
          }
          var v16944 = sawEllipsis;
          if(v16944) {
            v16944 = JAMScript.call(arg$$9.isOptionalArg, arg$$9, [])
          }
          var v9151 = v16944;
          if(v9151) {
            JAMScript.call(this.reportParseError, this, ["Varargs may not be optional or have default parameters"])
          }
          var v16945 = sawEllipsis;
          if(v16945) {
            v16945 = !type$$30
          }
          var v9152 = v16945;
          if(v9152) {
            JAMScript.call(this.reportParseError, this, ["'...' parameters require both a parameter name and an array type annotation to be specified"])
          }
          var v9153 = arg$$9;
          var v27425 = JAMScript.call(this.parseComments, this, []);
          v9153.postComments = v27425;
          arg$$9.typeExpr = type$$30;
          var v9154 = arg$$9;
          var v16946 = this.scanner;
          var v27426 = JAMScript.call(v16946.lastTokenLimChar, v16946, []);
          v9154.limChar = v27426;
          var v16947 = arg$$9;
          var v21685 = arg$$9.varFlags;
          v16947.varFlags = v21685 | argFlags;
          var v9155 = !haveFirstArgID;
          if(v9155) {
            JAMScript.call(formals$$2.append, formals$$2, [arg$$9])
          }else {
            haveFirstArgID = false
          }
        }
        firstArg = false;
        var v21686 = this.currentToken;
        var v16948 = v21686.tokenId;
        var v21687 = TypeScript$$14.TokenID;
        var v16949 = v21687.Comma;
        var v9161 = v16948 == v16949;
        if(v9161) {
          var v16950 = munchedArg;
          if(v16950) {
            v16950 = !sawEllipsis
          }
          var v9160 = v16950;
          if(v9160) {
            var v9157 = this.scanner;
            var v27427 = JAMScript.call(v9157.scan, v9157, []);
            this.currentToken = v27427
          }else {
            JAMScript.call(this.reportParseError, this, ["Unexpected ',' in argument list"]);
            var v9159 = this.errorRecovery;
            if(v9159) {
              var v9158 = this.scanner;
              var v27428 = JAMScript.call(v9158.scan, v9158, []);
              this.currentToken = v27428
            }
          }
        }else {
          break
        }
      }
      if(isIndexer) {
        var v16951 = TypeScript$$14.TokenID;
        var v9162 = v16951.CloseBracket;
        var v24248 = TypeScript$$14.ErrorRecoverySet;
        var v21688 = v24248.LCurly;
        var v16952 = errorRecoverySet$$12 | v21688;
        var v21689 = TypeScript$$14.ErrorRecoverySet;
        var v16953 = v21689.SColon;
        var v9163 = v16952 | v16953;
        JAMScript.call(this.checkCurrentToken, this, [v9162, v9163])
      }else {
        if(expectClosingRParen) {
          var v16954 = TypeScript$$14.TokenID;
          var v9164 = v16954.CloseParen;
          var v24249 = TypeScript$$14.ErrorRecoverySet;
          var v21690 = v24249.LCurly;
          var v16955 = errorRecoverySet$$12 | v21690;
          var v21691 = TypeScript$$14.ErrorRecoverySet;
          var v16956 = v21691.SColon;
          var v9165 = v16955 | v16956;
          JAMScript.call(this.checkCurrentToken, this, [v9164, v9165])
        }
      }
      var v9166 = formals$$2;
      var v16957 = this.scanner;
      var v27429 = JAMScript.call(v16957.lastTokenLimChar, v16957, []);
      v9166.limChar = v27429;
      return sawEllipsis
    }
    function v557(formals$$1, argList) {
      function translateBinExOperand(operand$$1) {
        var v16958 = operand$$1.nodeType;
        var v21692 = TypeScript$$14.NodeType;
        var v16959 = v21692.Comma;
        var v9173 = v16958 == v16959;
        if(v9173) {
          return JAMScript.call(_this$$1.transformAnonymousArgsIntoFormals, _this$$1, [formals$$1, operand$$1])
        }else {
          var v21693 = operand$$1.nodeType;
          var v24250 = TypeScript$$14.NodeType;
          var v21694 = v24250.Name;
          var v16960 = v21693 == v21694;
          var v21697 = !v16960;
          if(v21697) {
            var v21695 = operand$$1.nodeType;
            var v24251 = TypeScript$$14.NodeType;
            var v21696 = v24251.Asg;
            v16960 = v21695 == v21696
          }
          var v9172 = v16960;
          if(v9172) {
            var v9167;
            var v21698 = operand$$1.nodeType;
            var v24252 = TypeScript$$14.NodeType;
            var v21699 = v24252.Asg;
            var v16961 = v21698 == v21699;
            if(v16961) {
              v9167 = operand$$1.operand1
            }else {
              v9167 = operand$$1
            }
            var opArg = v9167;
            var v9168 = TypeScript$$14.ArgDecl;
            var arg$$8 = JAMScript.new(v9168, [opArg]);
            arg$$8.preComments = opArg.preComments;
            arg$$8.postComments = opArg.postComments;
            arg$$8.minChar = operand$$1.minChar;
            arg$$8.limChar = operand$$1.limChar;
            var v16962 = opArg.flags;
            var v21700 = TypeScript$$14.ASTFlags;
            var v16963 = v21700.PossibleOptionalParameter;
            var v9169 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [v16962, v16963]);
            if(v9169) {
              arg$$8.isOptional = true
            }
            var v16964 = operand$$1.nodeType;
            var v21701 = TypeScript$$14.NodeType;
            var v16965 = v21701.Asg;
            var v9170 = v16964 == v16965;
            if(v9170) {
              arg$$8.init = operand$$1.operand2
            }
            JAMScript.call(formals$$1.append, formals$$1, [arg$$8]);
            var v9171 = arg$$8.isOptional;
            var v16966 = !v9171;
            if(v16966) {
              v9171 = arg$$8.init
            }
            return v9171
          }else {
            JAMScript.call(_this$$1.reportParseError, _this$$1, ["Invalid lambda argument"])
          }
        }
        return false
      }
      var _this$$1 = this;
      if(argList) {
        var v16967 = argList.nodeType;
        var v21702 = TypeScript$$14.NodeType;
        var v16968 = v21702.Comma;
        var v9182 = v16967 == v16968;
        if(v9182) {
          var commaList = argList;
          var v16969 = commaList.operand1;
          var v9176 = v16969.isParenthesized;
          if(v9176) {
            var v16970 = commaList.operand1;
            var v9174 = v16970.minChar;
            var v16971 = commaList.operand1;
            var v9175 = v16971.limChar;
            JAMScript.call(this.reportParseError, this, ["Invalid lambda argument", v9174, v9175])
          }
          var v16972 = commaList.operand2;
          var v9179 = v16972.isParenthesized;
          if(v9179) {
            var v16973 = commaList.operand2;
            var v9177 = v16973.minChar;
            var v16974 = commaList.operand2;
            var v9178 = v16974.limChar;
            JAMScript.call(this.reportParseError, this, ["Invalid lambda argument", v9177, v9178])
          }
          var v9180 = commaList.operand1;
          var isOptional = translateBinExOperand(v9180);
          var v16975 = commaList.operand2;
          var v9181 = translateBinExOperand(v16975);
          var v16976 = !v9181;
          if(v16976) {
            v9181 = isOptional
          }
          isOptional = v9181;
          return isOptional
        }else {
          return translateBinExOperand(argList)
        }
      }
      return
    }
    function v556(errorRecoverySet$$11, name$$48, isConstructor$$1, isMethod, args$$6, allowedElements$$1, minChar$$12, requiresSignature, parentModifiers$$1) {
      JAMScript.call(this.pushDeclLists, this, []);
      var svStmtStack = this.statementInfoStack;
      JAMScript.call(this.resetStmtStack, this, []);
      var bod$$2 = null;
      var wasShorthand = false;
      var isAnonLambda = false;
      var limChar$$6;
      if(requiresSignature) {
        var v9183 = this.scanner;
        limChar$$6 = v9183.pos;
        var v21703 = this.currentToken;
        var v16977 = v21703.tokenId;
        var v21704 = TypeScript$$14.TokenID;
        var v16978 = v21704.OpenBrace;
        var v9190 = v16977 === v16978;
        if(v9190) {
          JAMScript.call(this.reportParseError, this, ["Function declarations are not permitted within interfaces, ambient modules or classes"]);
          var v9184 = TypeScript$$14.ASTList;
          bod$$2 = JAMScript.new(v9184, []);
          var v9185 = this.scanner;
          var bodMinChar$$1 = v9185.startPos;
          JAMScript.call(this.parseFunctionBlock, this, [errorRecoverySet$$11, allowedElements$$1, parentModifiers$$1, bod$$2, bodMinChar$$1]);
          var v16979 = TypeScript$$14.TokenID;
          var v9186 = v16979.CloseBrace;
          JAMScript.call(this.checkCurrentToken, this, [v9186, errorRecoverySet$$11]);
          var v21705 = this.currentToken;
          var v16980 = v21705.tokenId;
          var v21706 = TypeScript$$14.TokenID;
          var v16981 = v21706.Semicolon;
          var v9188 = v16980 === v16981;
          if(v9188) {
            var v9187 = this.scanner;
            var v27430 = JAMScript.call(v9187.scan, v9187, []);
            this.currentToken = v27430
          }
        }else {
          var v16982 = TypeScript$$14.TokenID;
          var v9189 = v16982.Semicolon;
          JAMScript.call(this.checkCurrentToken, this, [v9189, errorRecoverySet$$11, "Expected ';'"])
        }
      }else {
        var v9191 = TypeScript$$14.ASTList;
        bod$$2 = JAMScript.new(v9191, []);
        var v9192 = this.scanner;
        bodMinChar$$1 = v9192.startPos;
        var v21707 = this.currentToken;
        var v16983 = v21707.tokenId;
        var v21708 = TypeScript$$14.TokenID;
        var v16984 = v21708.EqualsGreaterThan;
        var v9194 = v16983 == v16984;
        if(v9194) {
          if(isMethod) {
            JAMScript.call(this.reportParseError, this, ["'=>' may not be used for class methods"])
          }
          wasShorthand = true;
          var v9193 = this.scanner;
          var v27431 = JAMScript.call(v9193.scan, v9193, []);
          this.currentToken = v27431
        }
        var v16985 = wasShorthand;
        if(v16985) {
          var v24253 = this.currentToken;
          var v21709 = v24253.tokenId;
          var v24254 = TypeScript$$14.TokenID;
          var v21710 = v24254.OpenBrace;
          v16985 = v21709 != v21710
        }
        var v9199 = v16985;
        if(v9199) {
          var v21711 = TypeScript$$14.ErrorRecoverySet;
          var v16986 = v21711.SColon;
          var v9195 = errorRecoverySet$$11 | v16986;
          var v16987 = TypeScript$$14.OperatorPrecedence;
          var v9196 = v16987.Assignment;
          var v9197 = TypeContext.NoTypes;
          var retExpr = JAMScript.call(this.parseExpr, this, [v9195, v9196, true, v9197]);
          var v9198 = TypeScript$$14.ReturnStatement;
          var retStmt = JAMScript.new(v9198, []);
          retStmt.returnExpression = retExpr;
          retStmt.minChar = retExpr.minChar;
          retStmt.limChar = retExpr.limChar;
          bod$$2.minChar = bodMinChar$$1;
          JAMScript.call(bod$$2.append, bod$$2, [retStmt])
        }else {
          isAnonLambda = wasShorthand;
          JAMScript.call(this.parseFunctionBlock, this, [errorRecoverySet$$11, allowedElements$$1, parentModifiers$$1, bod$$2, bodMinChar$$1])
        }
        var v9200 = this.scanner;
        limChar$$6 = v9200.pos
      }
      var v9201 = TypeScript$$14.FuncDecl;
      var v9202 = JAMScript.call(this.topVarList, this, []);
      var v9203 = JAMScript.call(this.topScopeList, this, []);
      var v9204 = JAMScript.call(this.topStaticsList, this, []);
      var v16988 = TypeScript$$14.NodeType;
      var v9205 = v16988.FuncDecl;
      var funcDecl$$6 = JAMScript.new(v9201, [name$$48, bod$$2, isConstructor$$1, args$$6, v9202, v9203, v9204, v9205]);
      JAMScript.call(this.popDeclLists, this, []);
      var scopeList = JAMScript.call(this.topScopeList, this, []);
      JAMScript.call(scopeList.append, scopeList, [funcDecl$$6]);
      var staticFuncDecl = false;
      var v9214 = !requiresSignature;
      if(v9214) {
        var v16989 = !wasShorthand;
        var v21712 = !v16989;
        if(v21712) {
          v16989 = isAnonLambda
        }
        var v9213 = v16989;
        if(v9213) {
          var v9206 = TypeScript$$14.ASTSpan;
          var v27432 = JAMScript.new(v9206, []);
          funcDecl$$6.endingToken = v27432;
          var v9207 = funcDecl$$6.endingToken;
          var v16990 = this.scanner;
          v9207.minChar = v16990.startPos;
          var v9208 = funcDecl$$6.endingToken;
          var v16991 = this.scanner;
          v9208.limChar = v16991.pos;
          var v16992 = TypeScript$$14.TokenID;
          var v9209 = v16992.CloseBrace;
          JAMScript.call(this.checkCurrentToken, this, [v9209, errorRecoverySet$$11]);
          if(isAnonLambda) {
            var v16993 = funcDecl$$6;
            var v21713 = funcDecl$$6.fncFlags;
            var v24255 = TypeScript$$14.FncFlags;
            var v21714 = v24255.IsFatArrowFunction;
            v16993.fncFlags = v21713 | v21714
          }
        }else {
          var v16994 = funcDecl$$6;
          var v21715 = funcDecl$$6.fncFlags;
          var v24256 = TypeScript$$14.FncFlags;
          var v21716 = v24256.IsFatArrowFunction;
          v16994.fncFlags = v21715 | v21716;
          var v9210 = TypeScript$$14.ASTSpan;
          var v27433 = JAMScript.new(v9210, []);
          funcDecl$$6.endingToken = v27433;
          var v9211 = funcDecl$$6.endingToken;
          var v21717 = bod$$2.members;
          var v16995 = v21717[0];
          v9211.minChar = v16995.minChar;
          var v9212 = funcDecl$$6.endingToken;
          var v21718 = bod$$2.members;
          var v16996 = v21718[0];
          v9212.limChar = v16996.limChar
        }
      }
      funcDecl$$6.minChar = minChar$$12;
      funcDecl$$6.limChar = limChar$$6;
      var v9215 = !requiresSignature;
      if(v9215) {
        var v16997 = funcDecl$$6;
        var v21719 = funcDecl$$6.fncFlags;
        var v24257 = TypeScript$$14.FncFlags;
        var v21720 = v24257.Definition;
        v16997.fncFlags = v21719 | v21720
      }
      this.statementInfoStack = svStmtStack;
      return funcDecl$$6
    }
    function v555(errorRecoverySet$$10, allowedElements, parentModifiers, bod$$1, bodMinChar) {
      this.state = ParseState.StartStatementList;
      var v16998 = TypeScript$$14.TokenID;
      var v9216 = v16998.OpenBrace;
      var v21721 = TypeScript$$14.ErrorRecoverySet;
      var v16999 = v21721.StmtStart;
      var v9217 = errorRecoverySet$$10 | v16999;
      JAMScript.call(this.checkCurrentToken, this, [v9216, v9217]);
      var savedInFunction = this.inFunction;
      this.inFunction = true;
      var v24258 = TypeScript$$14.ErrorRecoverySet;
      var v21722 = v24258.RCurly;
      var v17000 = errorRecoverySet$$10 | v21722;
      var v21723 = TypeScript$$14.ErrorRecoverySet;
      var v17001 = v21723.StmtStart;
      var v9218 = v17000 | v17001;
      JAMScript.call(this.parseStatementList, this, [v9218, bod$$1, true, false, allowedElements, parentModifiers]);
      bod$$1.minChar = bodMinChar;
      var v9219 = this.scanner;
      bod$$1.limChar = v9219.pos;
      this.inFunction = savedInFunction;
      var v9220 = TypeScript$$14.EndCode;
      var ec = JAMScript.new(v9220, []);
      ec.minChar = bod$$1.limChar;
      var v9221 = ec;
      v9221.limChar = ec.minChar;
      JAMScript.call(bod$$1.append, bod$$1, [ec]);
      return
    }
    function v554(minChar$$11, errorRecoverySet$$9) {
      var v9222 = this.scanner;
      var v27434 = JAMScript.call(v9222.scan, v9222, []);
      this.currentToken = v27434;
      var v9223 = TypeScript$$14.ASTList;
      var members$$8 = JAMScript.new(v9223, []);
      members$$8.minChar = minChar$$11;
      var prevInInterfaceDecl = this.inInterfaceDecl;
      this.inInterfaceDecl = true;
      var v21724 = TypeScript$$14.ErrorRecoverySet;
      var v17002 = v21724.RCurly;
      var v9224 = errorRecoverySet$$9 | v17002;
      JAMScript.call(this.parseTypeMemberList, this, [v9224, members$$8]);
      this.inInterfaceDecl = prevInInterfaceDecl;
      var v17003 = TypeScript$$14.TokenID;
      var v9225 = v17003.CloseBrace;
      JAMScript.call(this.checkCurrentToken, this, [v9225, errorRecoverySet$$9]);
      var v9226 = TypeScript$$14.InterfaceDeclaration;
      var v9227 = this.anonId;
      var interfaceDecl = JAMScript.new(v9226, [v9227, members$$8, null, null]);
      interfaceDecl.minChar = minChar$$11;
      interfaceDecl.limChar = members$$8.limChar;
      return JAMScript.call(this.parseTypeReferenceTail, this, [errorRecoverySet$$9, minChar$$11, interfaceDecl])
    }
    function v553(errorRecoverySet$$8, allowVoid) {
      var v9228 = this.scanner;
      var minChar$$10 = v9228.startPos;
      var isConstructorMember = false;
      var v17004 = this.currentToken;
      var v9247 = v17004.tokenId;
      switch(v9247) {
        case TypeScript$$14.TokenID.Void:
          var v9229 = !allowVoid;
          if(v9229) {
            JAMScript.call(this.reportParseError, this, ["void not a valid type in this context"])
          }
        ;
        case TypeScript$$14.TokenID.Any:
        ;
        case TypeScript$$14.TokenID.Number:
        ;
        case TypeScript$$14.TokenID.Bool:
        ;
        case TypeScript$$14.TokenID.String:
          var v17005 = TypeScript$$14.tokenTable;
          var v21725 = this.currentToken;
          var v17006 = v21725.tokenId;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v9230 = v17005[v17006]
          }
          var text$$14 = v9230.text;
          var v9231 = TypeScript$$14.Identifier;
          var predefinedIdentifier = JAMScript.new(v9231, [text$$14]);
          predefinedIdentifier.minChar = minChar$$10;
          var v9232 = this.scanner;
          predefinedIdentifier.limChar = v9232.pos;
          var v9233 = this.scanner;
          var v27435 = JAMScript.call(v9233.scan, v9233, []);
          this.currentToken = v27435;
          return JAMScript.call(this.parseTypeReferenceTail, this, [errorRecoverySet$$8, minChar$$10, predefinedIdentifier]);
        case TypeScript$$14.TokenID.Identifier:
          var v17007 = this.currentToken;
          var v9234 = JAMScript.call(v17007.getText, v17007, []);
          var v17008 = this.currentToken;
          var v9235 = v17008.hasEscapeSequence;
          var ident = JAMScript.call(this.createRef, this, [v9234, v9235, minChar$$10]);
          var v9236 = this.scanner;
          ident.limChar = v9236.pos;
          return JAMScript.call(this.parseNamedType, this, [errorRecoverySet$$8, minChar$$10, ident, true]);
        case TypeScript$$14.TokenID.OpenBrace:
          return JAMScript.call(this.parseObjectType, this, [minChar$$10, errorRecoverySet$$8]);
        case TypeScript$$14.TokenID.New:
          var v9237 = this.scanner;
          var v27436 = JAMScript.call(v9237.scan, v9237, []);
          this.currentToken = v27436;
          var v21726 = this.currentToken;
          var v17009 = v21726.tokenId;
          var v21727 = TypeScript$$14.TokenID;
          var v17010 = v21727.OpenParen;
          var v9238 = v17009 != v17010;
          if(v9238) {
            JAMScript.call(this.reportParseError, this, ["Expected '('"])
          }else {
            isConstructorMember = true
          }
        ;
        case TypeScript$$14.TokenID.OpenParen:
          var v9239 = TypeScript$$14.ASTList;
          var formals = JAMScript.new(v9239, []);
          var v21728 = TypeScript$$14.ErrorRecoverySet;
          var v17011 = v21728.RParen;
          var v9240 = errorRecoverySet$$8 | v17011;
          var variableArgList = JAMScript.call(this.parseFormalParameterList, this, [v9240, formals, false, true, false, false, false, false, null, true]);
          var v17012 = TypeScript$$14.TokenID;
          var v9241 = v17012.EqualsGreaterThan;
          JAMScript.call(this.checkCurrentToken, this, [v9241, errorRecoverySet$$8]);
          var returnType = JAMScript.call(this.parseTypeReference, this, [errorRecoverySet$$8, true]);
          var v9242 = TypeScript$$14.FuncDecl;
          var v17013 = TypeScript$$14.NodeType;
          var v9243 = v17013.FuncDecl;
          var funcDecl$$5 = JAMScript.new(v9242, [null, null, false, formals, null, null, null, v9243]);
          funcDecl$$5.returnTypeAnnotation = returnType;
          funcDecl$$5.variableArgList = variableArgList;
          var v17014 = funcDecl$$5;
          var v21729 = funcDecl$$5.fncFlags;
          var v24259 = TypeScript$$14.FncFlags;
          var v21730 = v24259.Signature;
          v17014.fncFlags = v21729 | v21730;
          if(isConstructorMember) {
            var v17015 = funcDecl$$5;
            var v21731 = funcDecl$$5.fncFlags;
            var v24260 = TypeScript$$14.FncFlags;
            var v21732 = v24260.ConstructMember;
            v17015.fncFlags = v21731 | v21732;
            funcDecl$$5.hint = "_construct";
            funcDecl$$5.classDecl = null
          }
          funcDecl$$5.minChar = minChar$$10;
          return JAMScript.call(this.parseTypeReferenceTail, this, [errorRecoverySet$$8, minChar$$10, funcDecl$$5]);
        default:
          JAMScript.call(this.reportParseError, this, ["Expected type name"]);
          var v9244 = TypeScript$$14.TypeReference;
          var etr = JAMScript.new(v9244, [null, 0]);
          var v17016 = etr;
          var v21733 = etr.flags;
          var v24261 = TypeScript$$14.ASTFlags;
          var v21734 = v24261.Error;
          v17016.flags = v21733 | v21734;
          var v9245 = this.scanner;
          etr.minChar = v9245.pos;
          var v9246 = this.scanner;
          etr.limChar = v9246.pos;
          return etr
      }
      return
    }
    function v552(errorRecoverySet$$7, minChar$$9, term$$2, tail) {
      var v9248 = this.scanner;
      var v27437 = JAMScript.call(v9248.scan, v9248, []);
      this.currentToken = v27437;
      var v21735 = this.currentToken;
      var v17017 = v21735.tokenId;
      var v21736 = TypeScript$$14.TokenID;
      var v17018 = v21736.Dot;
      var v9265 = v17017 == v17018;
      if(v9265) {
        var v9249 = this.scanner;
        var curpos = v9249.pos;
        var v9250 = this.scanner;
        var v27438 = JAMScript.call(v9250.scan, v9250, []);
        this.currentToken = v27438;
        var v24262 = this.currentToken;
        var v21737 = v24262.tokenId;
        var v24263 = TypeScript$$14.TokenID;
        var v21738 = v24263.Identifier;
        var v17019 = v21737 == v21738;
        var v21740 = !v17019;
        if(v21740) {
          var v25474 = this.errorRecovery;
          var v24264 = !v25474;
          var v25476 = !v24264;
          if(v25476) {
            var v26165 = this.scanner;
            var v25475 = JAMScript.call(v26165.lastTokenHadNewline, v26165, []);
            v24264 = !v25475
          }
          var v21739 = v24264;
          if(v21739) {
            var v24265 = this.currentToken;
            var v24266 = this.strictMode;
            v21739 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24265, v24266])
          }
          v17019 = v21739
        }
        var v9264 = v17019;
        if(v9264) {
          var v9251 = TypeScript$$14.Identifier;
          var v9252 = this.currentToken;
          var op2 = JAMScript.call(v9251.fromToken, v9251, [v9252]);
          var v9253 = this.scanner;
          op2.minChar = v9253.startPos;
          var v9254 = this.scanner;
          op2.limChar = v9254.pos;
          var v9255 = TypeScript$$14.BinaryExpression;
          var v17020 = TypeScript$$14.NodeType;
          var v9256 = v17020.Dot;
          var dotNode$$1 = JAMScript.new(v9255, [v9256, term$$2, op2]);
          dotNode$$1.minChar = term$$2.minChar;
          dotNode$$1.limChar = op2.limChar;
          return JAMScript.call(this.parseNamedType, this, [errorRecoverySet$$7, minChar$$9, dotNode$$1, tail])
        }else {
          JAMScript.call(this.reportParseError, this, ["need identifier after '.'"]);
          var v9263 = this.errorRecovery;
          if(v9263) {
            var v17021 = term$$2;
            var v21741 = term$$2.flags;
            var v24267 = TypeScript$$14.ASTFlags;
            var v21742 = v24267.DotLHS;
            v17021.flags = v21741 | v21742;
            var v9257 = term$$2;
            var v17022 = this.scanner;
            var v27439 = JAMScript.call(v17022.lastTokenLimChar, v17022, []);
            v9257.limChar = v27439;
            return term$$2
          }else {
            var v9258 = TypeScript$$14.MissingIdentifier;
            var eop2 = JAMScript.new(v9258, []);
            var v9259 = this.scanner;
            eop2.minChar = v9259.pos;
            var v9260 = this.scanner;
            eop2.limChar = v9260.pos;
            var v9261 = TypeScript$$14.BinaryExpression;
            var v17023 = TypeScript$$14.NodeType;
            var v9262 = v17023.Dot;
            var edotNode = JAMScript.new(v9261, [v9262, term$$2, eop2]);
            var v17024 = edotNode;
            var v21743 = edotNode.flags;
            var v24268 = TypeScript$$14.ASTFlags;
            var v21744 = v24268.Error;
            v17024.flags = v21743 | v21744;
            edotNode.minChar = term$$2.minChar;
            edotNode.limChar = eop2.limChar;
            return JAMScript.call(this.parseNamedType, this, [errorRecoverySet$$7, minChar$$9, edotNode, tail])
          }
        }
      }else {
        if(tail) {
          return JAMScript.call(this.parseTypeReferenceTail, this, [errorRecoverySet$$7, minChar$$9, term$$2])
        }else {
          return term$$2
        }
      }
      return
    }
    function v551(errorRecoverySet$$6, minChar$$8, term$$1) {
      var v9266 = TypeScript$$14.TypeReference;
      var result$$8 = JAMScript.new(v9266, [term$$1, 0]);
      result$$8.minChar = minChar$$8;
      var v21745 = this.currentToken;
      var v17025 = v21745.tokenId;
      var v21746 = TypeScript$$14.TokenID;
      var v17026 = v21746.OpenBracket;
      var v9270 = v17025 == v17026;
      for(;v9270;) {
        var v9267 = this.scanner;
        var v27440 = JAMScript.call(v9267.scan, v9267, []);
        this.currentToken = v27440;
        var v17027 = result$$8;
        var v21747 = result$$8.arrayCount;
        v17027.arrayCount = v21747 + 1;
        var v17028 = TypeScript$$14.TokenID;
        var v9268 = v17028.CloseBracket;
        var v21748 = TypeScript$$14.ErrorRecoverySet;
        var v17029 = v21748.LBrack;
        var v9269 = errorRecoverySet$$6 | v17029;
        JAMScript.call(this.checkCurrentToken, this, [v9268, v9269]);
        var v21749 = this.currentToken;
        var v17030 = v21749.tokenId;
        var v21750 = TypeScript$$14.TokenID;
        var v17031 = v21750.OpenBracket;
        v9270 = v17030 == v17031
      }
      var v9271 = result$$8;
      var v17032 = this.scanner;
      var v27441 = JAMScript.call(v17032.lastTokenLimChar, v17032, []);
      v9271.limChar = v27441;
      return result$$8
    }
    function v550(errorRecoverySet$$5, modifiers$$2, preComments$$1) {
      var v9272 = this.scanner;
      var leftCurlyCount$$1 = v9272.leftCurlyCount;
      var v9273 = this.scanner;
      var rightCurlyCount$$1 = v9273.rightCurlyCount;
      var svAmbient = this.ambientModule;
      var svTopLevel = this.topLevel;
      this.topLevel = false;
      var v17033 = this.parsingDeclareFile;
      var v21752 = !v17033;
      if(v21752) {
        var v21751 = svAmbient;
        var v24270 = !v21751;
        if(v24270) {
          var v25477 = TypeScript$$14.Modifiers;
          var v24269 = v25477.Ambient;
          v21751 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v24269])
        }
        v17033 = v21751
      }
      var v9274 = v17033;
      if(v9274) {
        this.ambientModule = true
      }
      var v9275 = this.scanner;
      var v27442 = JAMScript.call(v9275.scan, v9275, []);
      this.currentToken = v27442;
      var name$$47 = null;
      var enclosedList$$1 = null;
      JAMScript.call(this.pushDeclLists, this, []);
      var v9276 = this.scanner;
      var minChar$$7 = v9276.startPos;
      var isDynamicMod$$1 = false;
      var v24271 = this.currentToken;
      var v21753 = v24271.tokenId;
      var v24272 = TypeScript$$14.TokenID;
      var v21754 = v24272.Identifier;
      var v17034 = v21753 == v21754;
      var v21756 = !v17034;
      if(v21756) {
        var v25478 = this.currentToken;
        var v24273 = v25478.tokenId;
        var v25479 = TypeScript$$14.TokenID;
        var v24274 = v25479.StringLiteral;
        var v21755 = v24273 == v24274;
        var v24276 = !v21755;
        if(v24276) {
          var v26166 = this.currentToken;
          var v25480 = JAMScript.call(TypeScript$$14.isPrimitiveTypeToken, TypeScript$$14, [v26166]);
          var v24275 = !v25480;
          if(v24275) {
            var v25481 = this.currentToken;
            var v25482 = this.strictMode;
            v24275 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v25481, v25482])
          }
          v21755 = v24275
        }
        v17034 = v21755
      }
      var v9288 = v17034;
      if(v9288) {
        var v9277 = this.currentToken;
        var nameText = JAMScript.call(v9277.getText, v9277, []);
        var v21757 = this.currentToken;
        var v17035 = v21757.tokenId;
        var v21758 = TypeScript$$14.TokenID;
        var v17036 = v21758.StringLiteral;
        var v9280 = v17035 == v17036;
        if(v9280) {
          isDynamicMod$$1 = true;
          var v17037 = this.ambientModule;
          var v9278 = !v17037;
          if(v9278) {
            JAMScript.call(this.reportParseError, this, ["Only ambient dynamic modules may have string literal names"])
          }
          var v9279 = !svTopLevel;
          if(v9279) {
            JAMScript.call(this.reportParseError, this, ["Dynamic modules may not be nested within other modules"])
          }
        }
        var v9281 = TypeScript$$14.Identifier;
        var v9282 = this.currentToken;
        name$$47 = JAMScript.call(v9281.fromToken, v9281, [v9282]);
        var v9283 = this.scanner;
        name$$47.minChar = v9283.startPos;
        var v9284 = this.scanner;
        name$$47.limChar = v9284.pos;
        var v9285 = this.scanner;
        var v27443 = JAMScript.call(v9285.scan, v9285, []);
        this.currentToken = v27443
      }else {
        var v21759 = this.currentToken;
        var v17038 = v21759.tokenId;
        var v21760 = TypeScript$$14.TokenID;
        var v17039 = v21760.OpenBrace;
        var v9287 = v17038 == v17039;
        if(v9287) {
          JAMScript.call(this.reportParseError, this, ["Module name missing"]);
          var v9286 = TypeScript$$14.Identifier;
          name$$47 = JAMScript.new(v9286, [""]);
          name$$47.minChar = minChar$$7;
          name$$47.limChar = minChar$$7
        }
      }
      var v21761 = this.currentToken;
      var v17040 = v21761.tokenId;
      var v21762 = TypeScript$$14.TokenID;
      var v17041 = v21762.Dot;
      var v9289 = v17040 == v17041;
      if(v9289) {
        enclosedList$$1 = new Array;
        JAMScript.call(this.parseDottedName, this, [enclosedList$$1])
      }
      var v9291 = name$$47 == null;
      if(v9291) {
        var v9290 = TypeScript$$14.MissingIdentifier;
        name$$47 = JAMScript.new(v9290, [])
      }
      var v9292 = TypeScript$$14.ASTList;
      var moduleBody = JAMScript.new(v9292, []);
      var v9293 = this.scanner;
      var bodyMinChar = v9293.startPos;
      var v17042 = TypeScript$$14.TokenID;
      var v9294 = v17042.OpenBrace;
      var v21763 = TypeScript$$14.ErrorRecoverySet;
      var v17043 = v21763.ID;
      var v9295 = errorRecoverySet$$5 | v17043;
      JAMScript.call(this.checkCurrentToken, this, [v9294, v9295]);
      var v9296 = svTopLevel && isDynamicMod$$1;
      if(v9296) {
        this.allowImportDeclaration = true
      }else {
        this.allowImportDeclaration = false
      }
      var v21764 = TypeScript$$14.ErrorRecoverySet;
      var v17044 = v21764.RCurly;
      var v9297 = errorRecoverySet$$5 | v17044;
      var v17045 = TypeScript$$14.AllowedElements;
      var v9298 = v17045.Global;
      JAMScript.call(this.parseStatementList, this, [v9297, moduleBody, true, true, v9298, modifiers$$2]);
      moduleBody.minChar = bodyMinChar;
      var v9299 = this.scanner;
      moduleBody.limChar = v9299.pos;
      var v9300 = TypeScript$$14.ASTSpan;
      var endingToken$$2 = JAMScript.new(v9300, []);
      var v9301 = this.scanner;
      endingToken$$2.minChar = v9301.startPos;
      var v9302 = this.scanner;
      endingToken$$2.limChar = v9302.pos;
      var v17046 = TypeScript$$14.TokenID;
      var v9303 = v17046.CloseBrace;
      JAMScript.call(this.checkCurrentToken, this, [v9303, errorRecoverySet$$5]);
      var v9304 = this.scanner;
      var limChar$$5 = JAMScript.call(v9304.lastTokenLimChar, v9304, []);
      var moduleDecl$$3;
      this.allowImportDeclaration = svTopLevel;
      var v17047 = enclosedList$$1;
      if(v17047) {
        var v21765 = enclosedList$$1.length;
        v17047 = v21765 > 0
      }
      var v9323 = v17047;
      if(v9323) {
        var len$$16 = enclosedList$$1.length;
        var v9305 = len$$16 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var innerName = enclosedList$$1[v9305]
        }
        var v9306 = TypeScript$$14.ModuleDeclaration;
        var v9307 = JAMScript.call(this.topVarList, this, []);
        var v9308 = JAMScript.call(this.topScopeList, this, []);
        var innerDecl = JAMScript.new(v9306, [innerName, moduleBody, v9307, v9308, endingToken$$2]);
        innerDecl.preComments = preComments$$1;
        var v17048 = this.parsingDeclareFile;
        var v21767 = !v17048;
        if(v21767) {
          var v24277 = TypeScript$$14.Modifiers;
          var v21766 = v24277.Ambient;
          v17048 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v21766])
        }
        var v9309 = v17048;
        if(v9309) {
          var v17049 = innerDecl;
          var v21768 = innerDecl.modFlags;
          var v24278 = TypeScript$$14.ModuleFlags;
          var v21769 = v24278.Ambient;
          v17049.modFlags = v21768 | v21769
        }
        var v17050 = innerDecl;
        var v21770 = innerDecl.modFlags;
        var v24279 = TypeScript$$14.ModuleFlags;
        var v21771 = v24279.Exported;
        v17050.modFlags = v21770 | v21771;
        innerDecl.minChar = minChar$$7;
        innerDecl.limChar = limChar$$5;
        JAMScript.call(this.popDeclLists, this, []);
        var outerModBod;
        var i$$50 = len$$16 - 2;
        var v9315 = i$$50 >= 0;
        for(;v9315;) {
          var v9310 = TypeScript$$14.ASTList;
          outerModBod = JAMScript.new(v9310, []);
          JAMScript.call(outerModBod.append, outerModBod, [innerDecl]);
          innerName = enclosedList$$1[i$$50];
          var v9311 = TypeScript$$14.ModuleDeclaration;
          var v17051 = TypeScript$$14.ASTList;
          var v9312 = JAMScript.new(v17051, []);
          var v17052 = TypeScript$$14.ASTList;
          var v9313 = JAMScript.new(v17052, []);
          innerDecl = JAMScript.new(v9311, [innerName, outerModBod, v9312, v9313, endingToken$$2]);
          outerModBod.minChar = innerDecl.minChar = minChar$$7;
          outerModBod.limChar = innerDecl.limChar = limChar$$5;
          var v17053 = this.parsingDeclareFile;
          var v21773 = !v17053;
          if(v21773) {
            var v24280 = TypeScript$$14.Modifiers;
            var v21772 = v24280.Ambient;
            v17053 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v21772])
          }
          var v9314 = v17053;
          if(v9314) {
            var v17054 = innerDecl;
            var v21774 = innerDecl.modFlags;
            var v24281 = TypeScript$$14.ModuleFlags;
            var v21775 = v24281.Ambient;
            v17054.modFlags = v21774 | v21775
          }
          var v17055 = innerDecl;
          var v21776 = innerDecl.modFlags;
          var v24282 = TypeScript$$14.ModuleFlags;
          var v21777 = v24282.Exported;
          v17055.modFlags = v21776 | v21777;
          i$$50 = i$$50 - 1;
          v9315 = i$$50 >= 0
        }
        var v9316 = TypeScript$$14.ASTList;
        outerModBod = JAMScript.new(v9316, []);
        JAMScript.call(outerModBod.append, outerModBod, [innerDecl]);
        outerModBod.minChar = minChar$$7;
        outerModBod.limChar = limChar$$5;
        var v9317 = TypeScript$$14.ModuleDeclaration;
        var v17056 = TypeScript$$14.ASTList;
        var v9318 = JAMScript.new(v17056, []);
        var v17057 = TypeScript$$14.ASTList;
        var v9319 = JAMScript.new(v17057, []);
        moduleDecl$$3 = JAMScript.new(v9317, [name$$47, outerModBod, v9318, v9319, endingToken$$2])
      }else {
        var v9320 = TypeScript$$14.ModuleDeclaration;
        var v9321 = JAMScript.call(this.topVarList, this, []);
        var v9322 = JAMScript.call(this.topScopeList, this, []);
        moduleDecl$$3 = JAMScript.new(v9320, [name$$47, moduleBody, v9321, v9322, endingToken$$2]);
        moduleDecl$$3.preComments = preComments$$1;
        JAMScript.call(this.popDeclLists, this, [])
      }
      var v17058 = this.parsingDeclareFile;
      var v21779 = !v17058;
      if(v21779) {
        var v21778 = svAmbient;
        var v24284 = !v21778;
        if(v24284) {
          var v25483 = TypeScript$$14.Modifiers;
          var v24283 = v25483.Ambient;
          v21778 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v24283])
        }
        v17058 = v21778
      }
      var v9324 = v17058;
      if(v9324) {
        var v17059 = moduleDecl$$3;
        var v21780 = moduleDecl$$3.modFlags;
        var v24285 = TypeScript$$14.ModuleFlags;
        var v21781 = v24285.Ambient;
        v17059.modFlags = v21780 | v21781
      }
      var v17060 = svAmbient;
      var v21783 = !v17060;
      if(v21783) {
        var v24286 = TypeScript$$14.Modifiers;
        var v21782 = v24286.Exported;
        v17060 = JAMScript.call(TypeScript$$14.hasFlag, TypeScript$$14, [modifiers$$2, v21782])
      }
      var v9325 = v17060;
      if(v9325) {
        var v17061 = moduleDecl$$3;
        var v21784 = moduleDecl$$3.modFlags;
        var v24287 = TypeScript$$14.ModuleFlags;
        var v21785 = v24287.Exported;
        v17061.modFlags = v21784 | v21785
      }
      if(isDynamicMod$$1) {
        var v17062 = moduleDecl$$3;
        var v21786 = moduleDecl$$3.modFlags;
        var v24288 = TypeScript$$14.ModuleFlags;
        var v21787 = v24288.IsDynamic;
        v17062.modFlags = v21786 | v21787
      }
      this.ambientModule = svAmbient;
      this.topLevel = svTopLevel;
      var v17063 = this.scanner;
      var v9326 = v17063.leftCurlyCount;
      moduleDecl$$3.leftCurlyCount = v9326 - leftCurlyCount$$1;
      var v17064 = this.scanner;
      var v9327 = v17064.rightCurlyCount;
      moduleDecl$$3.rightCurlyCount = v9327 - rightCurlyCount$$1;
      moduleDecl$$3.limChar = moduleBody.limChar;
      return moduleDecl$$3
    }
    function v549(errorRecoverySet$$4, modifiers$$1) {
      var name$$46 = null;
      var alias$$1 = null;
      var importDecl = null;
      var v9328 = this.scanner;
      var minChar$$6 = v9328.startPos;
      var isDynamicImport = false;
      var v9329 = this.scanner;
      var v27444 = JAMScript.call(v9329.scan, v9329, []);
      this.currentToken = v27444;
      var v24289 = this.currentToken;
      var v21788 = v24289.tokenId;
      var v24290 = TypeScript$$14.TokenID;
      var v21789 = v24290.Identifier;
      var v17065 = v21788 == v21789;
      var v21792 = !v17065;
      if(v21792) {
        var v21790 = this.currentToken;
        var v21791 = this.strictMode;
        v17065 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21790, v21791])
      }
      var v9333 = v17065;
      if(v9333) {
        var v9330 = TypeScript$$14.Identifier;
        var v9331 = this.currentToken;
        name$$46 = JAMScript.call(v9330.fromToken, v9330, [v9331])
      }else {
        JAMScript.call(this.reportParseError, this, ["Expected identifer after 'import'"]);
        var v9332 = TypeScript$$14.MissingIdentifier;
        name$$46 = JAMScript.new(v9332, [])
      }
      var v9334 = this.scanner;
      name$$46.minChar = v9334.startPos;
      var v9335 = this.scanner;
      name$$46.limChar = v9335.pos;
      var v9336 = this.scanner;
      var v27445 = JAMScript.call(v9336.scan, v9336, []);
      this.currentToken = v27445;
      var v17066 = TypeScript$$14.TokenID;
      var v9337 = v17066.Equals;
      var v21793 = TypeScript$$14.ErrorRecoverySet;
      var v17067 = v21793.ID;
      var v9338 = errorRecoverySet$$4 | v17067;
      JAMScript.call(this.checkCurrentToken, this, [v9337, v9338]);
      var aliasPreComments = JAMScript.call(this.parseComments, this, []);
      var limChar$$4;
      var v24291 = this.currentToken;
      var v21794 = v24291.tokenId;
      var v24292 = TypeScript$$14.TokenID;
      var v21795 = v24292.Identifier;
      var v17068 = v21794 == v21795;
      var v21798 = !v17068;
      if(v21798) {
        var v21796 = this.currentToken;
        var v21797 = this.strictMode;
        v17068 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21796, v21797])
      }
      var v9372 = v17068;
      if(v9372) {
        var v21799 = this.currentToken;
        var v17069 = v21799.tokenId;
        var v21800 = TypeScript$$14.TokenID;
        var v17070 = v21800.Module;
        var v9365 = v17069 == v17070;
        if(v9365) {
          var v9339 = this.scanner;
          limChar$$4 = v9339.pos;
          var v9340 = this.scanner;
          var v27446 = JAMScript.call(v9340.scan, v9340, []);
          this.currentToken = v27446;
          var v21801 = this.currentToken;
          var v17071 = v21801.tokenId;
          var v21802 = TypeScript$$14.TokenID;
          var v17072 = v21802.OpenParen;
          var v9360 = v17071 == v17072;
          if(v9360) {
            var v9341 = this.scanner;
            var v27447 = JAMScript.call(v9341.scan, v9341, []);
            this.currentToken = v27447;
            var v24293 = this.currentToken;
            var v21803 = v24293.tokenId;
            var v24294 = TypeScript$$14.TokenID;
            var v21804 = v24294.StringLiteral;
            var v17073 = v21803 == v21804;
            var v21806 = !v17073;
            if(v21806) {
              var v25484 = this.currentToken;
              var v24295 = v25484.tokenId;
              var v25485 = TypeScript$$14.TokenID;
              var v24296 = v25485.Identifier;
              var v21805 = v24295 == v24296;
              var v24299 = !v21805;
              if(v24299) {
                var v24297 = this.currentToken;
                var v24298 = this.strictMode;
                v21805 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v24297, v24298])
              }
              v17073 = v21805
            }
            var v9355 = v17073;
            if(v9355) {
              var v21807 = this.currentToken;
              var v17074 = v21807.tokenId;
              var v21808 = TypeScript$$14.TokenID;
              var v17075 = v21808.StringLiteral;
              var v9354 = v17074 == v17075;
              if(v9354) {
                var v9343 = this.topLevel;
                if(v9343) {
                  this.hasTopLevelImportOrExport = true
                }else {
                  var v17076 = this.allowImportDeclaration;
                  var v9342 = !v17076;
                  if(v9342) {
                    JAMScript.call(this.reportParseError, this, ["Import declaration of external module is permitted only in global or top level dynamic modules"])
                  }
                }
                var v9344 = this.currentToken;
                var aliasText = JAMScript.call(v9344.getText, v9344, []);
                var v9345 = TypeScript$$14.Identifier;
                var v9346 = this.currentToken;
                alias$$1 = JAMScript.call(v9345.fromToken, v9345, [v9346]);
                var v9347 = this.scanner;
                alias$$1.minChar = v9347.startPos;
                var v9348 = this.scanner;
                alias$$1.limChar = v9348.pos;
                var v21809 = alias$$1.text;
                var v17077 = JAMScript.call(this.isValidImportPath, this, [v21809]);
                var v9349 = !v17077;
                if(v9349) {
                  JAMScript.call(this.reportParseError, this, ["Invalid import path"])
                }
                isDynamicImport = true;
                var v9350 = this.scanner;
                var v27448 = JAMScript.call(v9350.scan, v9350, []);
                this.currentToken = v27448;
                alias$$1.preComments = aliasPreComments
              }else {
                var v21810 = TypeScript$$14.ErrorRecoverySet;
                var v17078 = v21810.SColon;
                var v9351 = errorRecoverySet$$4 | v17078;
                var v17079 = TypeScript$$14.OperatorPrecedence;
                var v9352 = v17079.Assignment;
                var v9353 = TypeContext.NoTypes;
                alias$$1 = JAMScript.call(this.parseExpr, this, [v9351, v9352, true, v9353]);
                alias$$1.preComments = aliasPreComments
              }
            }
            var v9356 = this.scanner;
            limChar$$4 = v9356.pos;
            var v17080 = TypeScript$$14.TokenID;
            var v9357 = v17080.CloseParen;
            var v21811 = TypeScript$$14.ErrorRecoverySet;
            var v17081 = v21811.ID;
            var v9358 = errorRecoverySet$$4 | v17081;
            JAMScript.call(this.checkCurrentToken, this, [v9357, v9358]);
            if(alias$$1) {
              var v9359 = alias$$1;
              var v27449 = JAMScript.call(this.parseComments, this, []);
              v9359.postComments = v27449
            }
          }
        }else {
          var v21812 = TypeScript$$14.ErrorRecoverySet;
          var v17082 = v21812.SColon;
          var v9361 = errorRecoverySet$$4 | v17082;
          var v17083 = TypeScript$$14.OperatorPrecedence;
          var v9362 = v17083.Assignment;
          var v9363 = TypeContext.NoTypes;
          alias$$1 = JAMScript.call(this.parseExpr, this, [v9361, v9362, true, v9363]);
          var v9364 = this.scanner;
          limChar$$4 = v9364.pos
        }
      }else {
        JAMScript.call(this.reportParseError, this, ["Expected module name"]);
        var v9366 = TypeScript$$14.MissingIdentifier;
        alias$$1 = JAMScript.new(v9366, []);
        var v9367 = this.scanner;
        alias$$1.minChar = v9367.startPos;
        var v21813 = this.currentToken;
        var v17084 = v21813.tokenId;
        var v21814 = TypeScript$$14.TokenID;
        var v17085 = v21814.Semicolon;
        var v9371 = v17084 == v17085;
        if(v9371) {
          var v9368 = this.scanner;
          alias$$1.limChar = v9368.startPos
        }else {
          var v9369 = this.scanner;
          alias$$1.limChar = v9369.pos;
          var v9370 = this.scanner;
          var v27450 = JAMScript.call(v9370.scan, v9370, []);
          this.currentToken = v27450
        }
        var v17086 = alias$$1;
        var v21815 = alias$$1.flags;
        var v24300 = TypeScript$$14.ASTFlags;
        var v21816 = v24300.Error;
        v17086.flags = v21815 | v21816;
        limChar$$4 = alias$$1.limChar
      }
      var v9373 = TypeScript$$14.ImportDeclaration;
      importDecl = JAMScript.new(v9373, [name$$46, alias$$1]);
      importDecl.isDynamicImport = isDynamicImport;
      importDecl.minChar = minChar$$6;
      importDecl.limChar = limChar$$4;
      return importDecl
    }
    function v548(importPath) {
      importPath = JAMScript.call(TypeScript$$14.stripQuotes, TypeScript$$14, [importPath]);
      var v17087 = !importPath;
      var v21818 = !v17087;
      if(v21818) {
        var v24301 = importPath.indexOf(":");
        var v21817 = v24301 != -1;
        var v24303 = !v21817;
        if(v24303) {
          var v25486 = importPath.indexOf("\\");
          var v24302 = v25486 != -1;
          var v25488 = !v24302;
          if(v25488) {
            var v25487 = importPath.charAt(0);
            v24302 = v25487 == "/"
          }
          v21817 = v24302
        }
        v17087 = v21817
      }
      var v9374 = v17087;
      if(v9374) {
        return false
      }
      return true
    }
    function v547(enclosedList) {
      var v9375 = this.scanner;
      var v27451 = JAMScript.call(v9375.scan, v9375, []);
      this.currentToken = v27451;
      var v24304 = this.currentToken;
      var v21819 = v24304.tokenId;
      var v24305 = TypeScript$$14.TokenID;
      var v21820 = v24305.Identifier;
      var v17088 = v21819 == v21820;
      var v21823 = !v17088;
      if(v21823) {
        var v21821 = this.currentToken;
        var v21822 = this.strictMode;
        v17088 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21821, v21822])
      }
      var v9384 = v17088;
      if(v9384) {
        var v9376 = TypeScript$$14.Identifier;
        var v9377 = this.currentToken;
        var id$$10 = JAMScript.call(v9376.fromToken, v9376, [v9377]);
        var v9378 = id$$10;
        var v27452 = JAMScript.call(this.parseComments, this, []);
        v9378.preComments = v27452;
        var v9379 = enclosedList.length;
        JAMScript.set(enclosedList, v9379, id$$10);
        var v9380 = this.scanner;
        id$$10.minChar = v9380.startPos;
        var v9381 = this.scanner;
        id$$10.limChar = v9381.pos;
        var v9382 = this.scanner;
        var v27453 = JAMScript.call(v9382.scan, v9382, []);
        this.currentToken = v27453;
        var v21824 = this.currentToken;
        var v17089 = v21824.tokenId;
        var v21825 = TypeScript$$14.TokenID;
        var v17090 = v21825.Dot;
        var v9383 = v17089 == v17090;
        if(v9383) {
          JAMScript.call(this.parseDottedName, this, [enclosedList])
        }
      }else {
        JAMScript.call(this.reportParseError, this, ["need identifier after '.'"])
      }
      return
    }
    function v546(errorRecoverySet$$3, modifiers) {
      var v9385 = this.scanner;
      var leftCurlyCount = v9385.leftCurlyCount;
      var v9386 = this.scanner;
      var rightCurlyCount = v9386.rightCurlyCount;
      var name$$45 = null;
      var v24306 = this.currentToken;
      var v21826 = v24306.tokenId;
      var v24307 = TypeScript$$14.TokenID;
      var v21827 = v24307.Identifier;
      var v17091 = v21826 == v21827;
      var v21830 = !v17091;
      if(v21830) {
        var v21828 = this.currentToken;
        var v21829 = this.strictMode;
        v17091 = JAMScript.call(TypeScript$$14.convertTokToID, TypeScript$$14, [v21828, v21829])
      }
      var v9396 = v17091;
      if(v9396) {
        var v9387 = TypeScript$$14.Identifier;
        var v9388 = this.currentToken;
        name$$45 = JAMScript.call(v9387.fromToken, v9387, [v9388]);
        var v9389 = this.scanner;
        name$$45.minChar = v9389.startPos;
        var v9390 = this.scanner;
        name$$45.limChar = v9390.pos;
        var v9391 = this.scanner;
        var v27454 = JAMScript.call(v9391.scan, v9391, []);
        this.currentToken = v27454
      }else {
        JAMScript.call(this.reportParseError, this, ["Enum declaration requires identifier"]);
        var v9395 = this.errorRecovery;
        if(v9395) {
          var v9392 = TypeScript$$14.MissingIdentifier;
          name$$45 = JAMScript.new(v9392, []);
          var v9393 = this.scanner;
          name$$45.minChar = v9393.startPos;
          var v9394 = this.scanner;
          name$$45.limChar = v9394.startPos;
          var v17092 = name$$45;
          var v21831 = name$$45.flags;
          var v24308 = TypeScript$$14.ASTFlags;
          var v21832 = v24308.Error;
          v17092.flags = v21831 | v21832
        }
      }
      var v9397 = this.scanner;
      var membersMinChar = v9397.startPos;
      var v17093 = TypeScript$$14.TokenID;
      var v9398 = v17093.OpenBrace;
      var v21833 = TypeScript$$14.ErrorRecoverySet;
      var v17094 = v21833.ID;
      var v9399 = errorRecoverySet$$3 | v17094;
      JAMScript.call(this.checkCurrentToken, this, [v9398, v9399]);
      JAMScript.call(this.pushDeclLists, this, []);
      var v9400 = TypeScript$$14.ASTList;
      var members$$7 = JAMScript.new(v9400, []);
      members$$7.minChar = membersMinChar;
      var v9401 = TypeScript$$14.VarDecl;
      var v17095 = TypeScript$$14.Identifier;
      var v9402 = JAMScript.new(v17095, ["_map"]);
      var mapDecl = JAMScript.new(v9401, [v9402, 0]);
      var v17096 = mapDecl;
      var v21834 = mapDecl.varFlags;
      var v24309 = TypeScript$$14.VarFlags;
      var v21835 = v24309.Exported;
      v17096.varFlags = v21834 | v21835;
      var v17097 = mapDecl;
      var v21836 = mapDecl.varFlags;
      var v24310 = TypeScript$$14.VarFlags;
      var v21837 = v24310.Private;
      v17097.varFlags = v21836 | v21837;
      var v17098 = mapDecl;
      var v21838 = mapDecl.varFlags;
      var v25489 = TypeScript$$14.VarFlags;
      var v24311 = v25489.Property;
      var v25490 = TypeScript$$14.VarFlags;
      var v24312 = v25490.Public;
      var v21839 = v24311 | v24312;
      v17098.varFlags = v21838 | v21839;
      var v9403 = TypeScript$$14.UnaryExpression;
      var v17099 = TypeScript$$14.NodeType;
      var v9404 = v17099.ArrayLit;
      var v27455 = JAMScript.new(v9403, [v9404, null]);
      mapDecl.init = v27455;
      JAMScript.call(members$$7.append, members$$7, [mapDecl]);
      var lastValue = null;
      for(;;) {
        var v9405 = this.scanner;
        var minChar$$5 = v9405.startPos;
        var limChar$$3;
        var memberName = null;
        var memberValue = null;
        var preComments = null;
        var postComments = null;
        var v24313 = this.currentToken;
        var v21840 = v24313.tokenId;
        var v24314 = TypeScript$$14.TokenID;
        var v21841 = v24314.Identifier;
        var v17100 = v21840 == v21841;
        var v21843 = !v17100;
        if(v21843) {
          var v21842 = this.currentToken;
          v17100 = JAMScript.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v21842])
        }
        var v9415 = v17100;
        if(v9415) {
          var v9406 = TypeScript$$14.Identifier;
          var v9407 = this.currentToken;
          memberName = JAMScript.call(v9406.fromToken, v9406, [v9407]);
          var v9408 = this.scanner;
          memberName.minChar = v9408.startPos;
          var v9409 = this.scanner;
          memberName.limChar = v9409.pos
        }else {
          var v21844 = this.currentToken;
          var v17101 = v21844.tokenId;
          var v21845 = TypeScript$$14.TokenID;
          var v17102 = v21845.CloseBrace;
          var v9414 = v17101 == v17102;
          if(v9414) {
            break
          }else {
            JAMScript.call(this.reportParseError, this, ["Expected identifer of enum member"]);
            var v9413 = this.errorRecovery;
            if(v9413) {
              var v9410 = TypeScript$$14.MissingIdentifier;
              memberName = JAMScript.new(v9410, []);
              var v9411 = this.scanner;
              memberName.minChar = v9411.startPos;
              var v9412 = this.scanner;
              memberName.limChar = v9412.startPos;
              var v17103 = memberName;
              var v21846 = memberName.flags;
              var v24315 = TypeScript$$14.ASTFlags;
              var v21847 = v24315.Error;
              v17103.flags = v21846 | v21847
            }
          }
        }
        var v9416 = this.scanner;
        limChar$$3 = v9416.pos;
        preComments = JAMScript.call(this.parseComments, this, []);
        var v9417 = this.scanner;
        var v27456 = JAMScript.call(v9417.scan, v9417, []);
        this.currentToken = v27456;
        postComments = JAMScript.call(this.parseComments, this, []);
        var v21848 = this.currentToken;
        var v17104 = v21848.tokenId;
        var v21849 = TypeScript$$14.TokenID;
        var v17105 = v21849.Equals;
        var v9429 = v17104 == v17105;
        if(v9429) {
          var v9418 = this.scanner;
          var v27457 = JAMScript.call(v9418.scan, v9418, []);
          this.currentToken = v27457;
          var v17106 = TypeScript$$14.OperatorPrecedence;
          var v9419 = v17106.Comma;
          var v9420 = TypeContext.NoTypes;
          memberValue = JAMScript.call(this.parseExpr, this, [errorRecoverySet$$3, v9419, true, v9420]);
          lastValue = memberValue;
          limChar$$3 = memberValue.limChar
        }else {
          var v9424 = lastValue == null;
          if(v9424) {
            var v9421 = TypeScript$$14.NumberLiteral;
            memberValue = JAMScript.new(v9421, [0]);
            lastValue = memberValue
          }else {
            var v9422 = TypeScript$$14.NumberLiteral;
            var v17107 = lastValue.value;
            var v9423 = v17107 + 1;
            memberValue = JAMScript.new(v9422, [v9423]);
            lastValue = memberValue
          }
          var v9425 = TypeScript$$14.BinaryExpression;
          var v17108 = TypeScript$$14.NodeType;
          var v9426 = v17108.Asg;
          var v17109 = TypeScript$$14.BinaryExpression;
          var v21850 = TypeScript$$14.NodeType;
          var v17110 = v21850.Index;
          var v21851 = TypeScript$$14.Identifier;
          var v17111 = JAMScript.new(v21851, ["_map"]);
          var v9427 = JAMScript.new(v17109, [v17110, v17111, memberValue]);
          var v17112 = TypeScript$$14.StringLiteral;
          var v24316 = memberName.actualText;
          var v21852 = '"' + v24316;
          var v17113 = v21852 + '"';
          var v9428 = JAMScript.new(v17112, [v17113]);
          var map = JAMScript.new(v9425, [v9426, v9427, v9428]);
          JAMScript.call(members$$7.append, members$$7, [map])
        }
        var v9430 = TypeScript$$14.VarDecl;
        var v9431 = this.nestingLevel;
        var member$$1 = JAMScript.new(v9430, [memberName, v9431]);
        member$$1.minChar = minChar$$5;
        member$$1.limChar = limChar$$3;
        member$$1.init = memberValue;
        var v9432 = member$$1;
        var v17114 = TypeScript$$14.TypeReference;
        var v21853 = name$$45.actualText;
        var v21854 = name$$45.hasEscapeSequence;
        var v17115 = JAMScript.call(this.createRef, this, [v21853, v21854, -1]);
        var v27458 = JAMScript.new(v17114, [v17115, 0]);
        v9432.typeExpr = v27458;
        var v17116 = member$$1;
        var v21855 = member$$1.varFlags;
        var v25491 = TypeScript$$14.VarFlags;
        var v24317 = v25491.Readonly;
        var v25492 = TypeScript$$14.VarFlags;
        var v24318 = v25492.Property;
        var v21856 = v24317 | v24318;
        v17116.varFlags = v21855 | v21856;
        var v17117 = memberValue.nodeType;
        var v21857 = TypeScript$$14.NodeType;
        var v17118 = v21857.NumberLit;
        var v9433 = v17117 == v17118;
        if(v9433) {
          var v17119 = member$$1;
          var v21858 = member$$1.varFlags;
          var v24319 = TypeScript$$14.VarFlags;
          var v21859 = v24319.Constant;
          v17119.varFlags = v21858 | v21859
        }
        member$$1.preComments = preComments;
        JAMScript.call(members$$7.append, members$$7, [member$$1]);
        member$$1.postComments = postComments;
        var v17120 = member$$1;
        var v21860 = member$$1.varFlags;
        var v24320 = TypeScript$$14.VarFlags;
        var v21861 = v24320.Exported;
        v17120.varFlags = v21860 | v21861;
        var v21862 = this.currentToken;
        var v17121 = v21862.tokenId;
        var v21863 = TypeScript$$14.TokenID;
        var v17122 = v21863.Comma;
        var v9437 = v17121 == v17122;
        if(v9437) {
          var v9434 = this.scanner;
          var v27459 = JAMScript.call(v9434.scan, v9434, []);
          this.currentToken = v27459;
          var v9435 = member$$1;
          var v17123 = member$$1.postComments;
          var v24321 = this.scanner;
          var v21864 = v24321.prevLine;
          var v17124 = JAMScript.call(this.parseCommentsForLine, this, [v21864]);
          var v27460 = JAMScript.call(this.combineComments, this, [v17123, v17124]);
          v9435.postComments = v27460;
          var v24322 = this.currentToken;
          var v21865 = v24322.tokenId;
          var v24323 = TypeScript$$14.TokenID;
          var v21866 = v24323.Identifier;
          var v17125 = v21865 == v21866;
          var v21868 = !v17125;
          if(v21868) {
            var v21867 = this.currentToken;
            v17125 = JAMScript.call(TypeScript$$14.convertTokToIDName, TypeScript$$14, [v21867])
          }
          var v9436 = v17125;
          if(v9436) {
            continue
          }
        }
        break
      }
      var v9438 = TypeScript$$14.ASTSpan;
      var endingToken$$1 = JAMScript.new(v9438, []);
      var v9439 = this.scanner;
      endingToken$$1.minChar = v9439.startPos;
      var v9440 = this.scanner;
      endingToken$$1.limChar = v9440.pos;
      var v17126 = TypeScript$$14.TokenID;
      var v9441 = v17126.CloseBrace;
      JAMScript.call(this.checkCurrentToken, this, [v9441, errorRecoverySet$$3]);
      var v9442 = members$$7;
      var v17127 = this.scanner;
      var v27461 = JAMScript.call(v17127.lastTokenLimChar, v17127, []);
      v9442.limChar = v27461;
      var v9443 = TypeScript$$14.ModuleDeclaration;
      var v9444 = JAMScript.call(this.topVarList, this, []);
      var v9445 = JAMScript.call(this.topScopeList, this, []);
      var modDecl = JAMScript.new(v9443, [name$$45, members$$7, v9444, v9445, endingToken$$1]);
      var v17128 = modDecl;
      var v21869 = modDecl.modFlags;
      var v24324 = TypeScript$$14.ModuleFlags;
      var v21870 = v24324.IsEnum;
      v17128.modFlags = v21869 | v21870;
      JAMScript.call(this.popDeclLists, this, []);
      var v17129 = this.scanner;
      var v9446 = v17129.leftCurlyCount;
      modDecl.leftCurlyCount = v9446 - leftCurlyCount;
      var v17130 = this.scanner;
      var v9447 = v17130.rightCurlyCount;
      modDecl.rightCurlyCount = v9447 - rightCurlyCount;
      return modDecl
    }
    function v545(comment1, comment2) {
      var v9449 = comment1 == null;
      if(v9449) {
        return comment2
      }else {
        var v9448 = comment2 == null;
        if(v9448) {
          return comment1
        }else {
          return comment1.concat(comment2)
        }
      }
      return
    }
    function v544(line$$4) {
      var v9450 = this.scanner;
      var comments$$7 = JAMScript.call(v9450.getCommentsForLine, v9450, [line$$4]);
      return JAMScript.call(this.parseCommentsInner, this, [comments$$7])
    }
    function v543() {
      var v9451 = this.scanner;
      var comments$$6 = JAMScript.call(v9451.getComments, v9451, []);
      return JAMScript.call(this.parseCommentsInner, this, [comments$$6])
    }
    function v542(comments$$5) {
      if(comments$$5) {
        var commentASTs = new Array;
        var i$$49 = 0;
        var v17131 = comments$$5.length;
        var v9453 = i$$49 < v17131;
        for(;v9453;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v17132 = comments$$5[i$$49]
          }
          var v9452 = JAMScript.call(this.parseComment, this, [v17132]);
          JAMScript.call(commentASTs.push, commentASTs, [v9452]);
          i$$49 = i$$49 + 1;
          var v17133 = comments$$5.length;
          v9453 = i$$49 < v17133
        }
        return commentASTs
      }else {
        return null
      }
      return
    }
    function v541(comment$$2) {
      if(comment$$2) {
        var v9454 = TypeScript$$14.Comment;
        var v9455 = comment$$2.value;
        var v9456 = comment$$2.isBlock;
        var v9457 = comment$$2.endsLine;
        var c$$7 = JAMScript.new(v9454, [v9455, v9456, v9457]);
        c$$7.minChar = comment$$2.startPos;
        var v9458 = comment$$2.startPos;
        var v17134 = comment$$2.value;
        var v9459 = v17134.length;
        c$$7.limChar = v9458 + v9459;
        var lineCol$$4 = {line:-1, col:-1};
        var v9460 = c$$7.minChar;
        JAMScript.call(this.getSourceLineCol, this, [lineCol$$4, v9460]);
        c$$7.minLine = lineCol$$4.line;
        var v9461 = c$$7.limChar;
        JAMScript.call(this.getSourceLineCol, this, [lineCol$$4, v9461]);
        c$$7.limLine = lineCol$$4.line;
        var v21871 = comment$$2.isBlock;
        var v17135 = !v21871;
        if(v17135) {
          var v25493 = comment$$2.value;
          var v24325 = v25493.length;
          var v21872 = v24325 > 3;
          if(v21872) {
            var v25494 = comment$$2.value;
            var v24326 = JAMScript.call(v25494.substring, v25494, [0, 3]);
            v21872 = v24326 == "///"
          }
          v17135 = v21872
        }
        var v9465 = v17135;
        if(v9465) {
          var v9462 = comment$$2.value;
          var dependencyPath = JAMScript.call(TypeScript$$14.getAdditionalDependencyPath, TypeScript$$14, [v9462]);
          if(dependencyPath) {
            var v9463 = this.amdDependencies;
            JAMScript.call(v9463.push, v9463, [dependencyPath])
          }
          var v17136 = comment$$2.value;
          var v9464 = JAMScript.call(TypeScript$$14.getImplicitImport, TypeScript$$14, [v17136]);
          if(v9464) {
            this.hasTopLevelImportOrExport = true
          }
        }
        return c$$7
      }else {
        return null
      }
      return
    }
    function v540() {
      var v9466 = this.staticsLists;
      var v21873 = this.staticsLists;
      var v17137 = v21873.length;
      var v9467 = v17137 - 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        return v9466[v9467]
      }
    }
    function v539() {
      var v9468 = this.scopeLists;
      var v21874 = this.scopeLists;
      var v17138 = v21874.length;
      var v9469 = v17138 - 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        return v9468[v9469]
      }
    }
    function v538() {
      var v9470 = this.varLists;
      var v21875 = this.varLists;
      var v17139 = v21875.length;
      var v9471 = v17139 - 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        return v9470[v9471]
      }
    }
    function v537() {
      var v9472 = this.staticsLists;
      JAMScript.call(v9472.pop, v9472, []);
      var v9473 = this.varLists;
      JAMScript.call(v9473.pop, v9473, []);
      var v9474 = this.scopeLists;
      JAMScript.call(v9474.pop, v9474, []);
      return
    }
    function v536() {
      var v9475 = this.staticsLists;
      var v17140 = TypeScript$$14.ASTList;
      var v9476 = JAMScript.new(v17140, []);
      JAMScript.call(v9475.push, v9475, [v9476]);
      var v9477 = this.varLists;
      var v17141 = TypeScript$$14.ASTList;
      var v9478 = JAMScript.new(v17141, []);
      JAMScript.call(v9477.push, v9477, [v9478]);
      var v9479 = this.scopeLists;
      var v17142 = TypeScript$$14.ASTList;
      var v9480 = JAMScript.new(v17142, []);
      JAMScript.call(v9479.push, v9479, [v9480]);
      return
    }
    function v535(tokenId$$43, errorRecoverySet$$2, errorText$$1) {
      var v17143 = typeof errorText$$1;
      var v9481 = v17143 === "undefined";
      if(v9481) {
        errorText$$1 = null
      }
      var v21876 = this.currentToken;
      var v17144 = v21876.tokenId;
      var v9485 = v17144 != tokenId$$43;
      if(v9485) {
        var v9482;
        var v17146 = errorText$$1 == null;
        if(v17146) {
          var v25495 = TypeScript$$14.tokenTable;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24327 = v25495[tokenId$$43]
          }
          var v21877 = v24327.text;
          var v17145 = "Expected '" + v21877;
          v9482 = v17145 + "'"
        }else {
          v9482 = errorText$$1
        }
        errorText$$1 = v9482;
        JAMScript.call(this.reportParseError, this, [errorText$$1]);
        var v9483 = this.errorRecovery;
        if(v9483) {
          JAMScript.call(this.skip, this, [errorRecoverySet$$2])
        }
      }else {
        var v9484 = this.scanner;
        var v27462 = JAMScript.call(v9484.scan, v9484, []);
        this.currentToken = v27462
      }
      return
    }
    function v534(errorRecoverySet$$1) {
      var v21878 = TypeScript$$14.ErrorRecoverySet;
      var v17147 = v21878.EOF;
      errorRecoverySet$$1 = errorRecoverySet$$1 | v17147;
      var v9486 = TypeScript$$14.ErrorRecoverySet;
      var ersTok = v9486.None;
      var v17148 = this.currentToken;
      var v9487 = v17148.tokenId;
      var tokenInfo = JAMScript.call(TypeScript$$14.lookupToken, TypeScript$$14, [v9487]);
      var v9488 = tokenInfo != undefined;
      if(v9488) {
        ersTok = tokenInfo.ers
      }
      var pendingRightCurlies = 0;
      var v21879 = ersTok & errorRecoverySet$$1;
      var v24328 = TypeScript$$14.ErrorRecoverySet;
      var v21880 = v24328.None;
      var v17149 = v21879 == v21880;
      var v21882 = !v17149;
      if(v21882) {
        var v25496 = this.currentToken;
        var v24329 = v25496.tokenId;
        var v25497 = TypeScript$$14.TokenID;
        var v24330 = v25497.CloseBrace;
        var v21881 = v24329 == v24330;
        if(v21881) {
          v21881 = pendingRightCurlies > 0
        }
        v17149 = v21881
      }
      var v9495 = v17149;
      for(;v9495;) {
        var v21883 = this.currentToken;
        var v17150 = v21883.tokenId;
        var v21884 = TypeScript$$14.TokenID;
        var v17151 = v21884.OpenBrace;
        var v9490 = v17150 == v17151;
        if(v9490) {
          pendingRightCurlies = pendingRightCurlies + 1
        }else {
          var v21885 = this.currentToken;
          var v17152 = v21885.tokenId;
          var v21886 = TypeScript$$14.TokenID;
          var v17153 = v21886.CloseBrace;
          var v9489 = v17152 == v17153;
          if(v9489) {
            pendingRightCurlies = pendingRightCurlies - 1
          }
        }
        var v9491 = this.scanner;
        var v27463 = JAMScript.call(v9491.scan, v9491, []);
        this.currentToken = v27463;
        var v9492 = TypeScript$$14.ErrorRecoverySet;
        ersTok = v9492.None;
        var v17154 = this.currentToken;
        var v9493 = v17154.tokenId;
        tokenInfo = JAMScript.call(TypeScript$$14.lookupToken, TypeScript$$14, [v9493]);
        var v9494 = tokenInfo != undefined;
        if(v9494) {
          ersTok = tokenInfo.ers
        }
        var v21887 = ersTok & errorRecoverySet$$1;
        var v24331 = TypeScript$$14.ErrorRecoverySet;
        var v21888 = v24331.None;
        var v17155 = v21887 == v21888;
        var v21890 = !v17155;
        if(v21890) {
          var v25498 = this.currentToken;
          var v24332 = v25498.tokenId;
          var v25499 = TypeScript$$14.TokenID;
          var v24333 = v25499.CloseBrace;
          var v21889 = v24332 == v24333;
          if(v21889) {
            v21889 = pendingRightCurlies > 0
          }
          v17155 = v21889
        }
        v9495 = v17155
      }
      return
    }
    function v533(tokenId$$42, errorRecoverySet, errorText) {
      var v17156 = typeof errorText;
      var v9496 = v17156 === "undefined";
      if(v9496) {
        errorText = null
      }
      var v9497 = this.scanner;
      var v27464 = JAMScript.call(v9497.scan, v9497, []);
      this.currentToken = v27464;
      JAMScript.call(this.checkCurrentToken, this, [tokenId$$42, errorRecoverySet, errorText]);
      return
    }
    function v532(message$$15, startPos, pos$$1) {
      var v17157 = typeof startPos;
      var v9499 = v17157 === "undefined";
      if(v9499) {
        var v9498 = this.scanner;
        startPos = v9498.startPos
      }
      var v17158 = typeof pos$$1;
      var v9501 = v17158 === "undefined";
      if(v9501) {
        var v9500 = this.scanner;
        pos$$1 = v9500.pos
      }
      var v9502 = pos$$1 - startPos;
      var len$$15 = JAMScript.call(Math.max, Math, [1, v9502]);
      var v9509 = this.errorCallback;
      if(v9509) {
        var v9503 = this.currentUnitIndex;
        JAMScript.call(this.errorCallback, this, [startPos, len$$15, message$$15, v9503])
      }else {
        var v9508 = this.errorRecovery;
        if(v9508) {
          var lineCol$$3 = {line:-1, col:-1};
          JAMScript.call(this.getSourceLineCol, this, [lineCol$$3, startPos]);
          var v9506 = this.outfile;
          if(v9506) {
            var v9504 = this.outfile;
            var v26717 = this.fname;
            var v26556 = "// " + v26717;
            var v26167 = v26556 + " (";
            var v26168 = lineCol$$3.line;
            var v25500 = v26167 + v26168;
            var v24334 = v25500 + ",";
            var v24335 = lineCol$$3.col;
            var v21891 = v24334 + v24335;
            var v17159 = v21891 + "): ";
            var v9505 = v17159 + message$$15;
            JAMScript.call(v9504.WriteLine, v9504, [v9505])
          }
        }else {
          var v26557 = this.fname;
          var v26169 = v26557 + " (";
          var v26558 = this.scanner;
          var v26170 = v26558.line;
          var v25501 = v26169 + v26170;
          var v24336 = v25501 + ",";
          var v25502 = this.scanner;
          var v24337 = v25502.col;
          var v21892 = v24336 + v24337;
          var v17160 = v21892 + "): ";
          var v9507 = v17160 + message$$15;
          throw new SyntaxError(v9507);
        }
      }
      return
    }
    function v531(message$$14) {
      var v9510 = "STYLE: " + message$$14;
      JAMScript.call(this.reportParseError, this, [v9510]);
      return
    }
    function v530(text$$13, hasEscapeSequence$$2, minChar$$4) {
      var v9511 = TypeScript$$14.Identifier;
      var id$$9 = JAMScript.new(v9511, [text$$13, hasEscapeSequence$$2]);
      id$$9.minChar = minChar$$4;
      return id$$9
    }
    function v529(lineCol$$2, minChar$$3) {
      var v17161 = this.scanner;
      var v9512 = v17161.lineMap;
      JAMScript.call(TypeScript$$14.getSourceLineColFromMap, TypeScript$$14, [lineCol$$2, minChar$$3, v9512]);
      return
    }
    function v528(outfile$$3) {
      this.outfile = outfile$$3;
      this.errorRecovery = true;
      return
    }
    function v527(jump) {
      var v9513 = TypeScript$$14.AST;
      var v9514 = jump.target;
      var resolvedTarget = JAMScript.call(v9513.getResolvedIdentifierName, v9513, [v9514]);
      var v9515 = this.statementInfoStack;
      var len$$14 = v9515.length;
      var i$$48 = len$$14 - 1;
      var v9528 = i$$48 >= 0;
      for(;v9528;) {
        var v9516 = this.statementInfoStack;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var info$$1 = v9516[i$$48]
        }
        var v9527 = jump.target;
        if(v9527) {
          var v17162 = info$$1.labels;
          if(v17162) {
            var v25503 = info$$1.labels;
            var v24338 = v25503.members;
            var v21893 = v24338.length;
            v17162 = v21893 > 0
          }
          var v9522 = v17162;
          if(v9522) {
            var j$$5 = 0;
            var v17163 = info$$1.labels;
            var v9517 = v17163.members;
            var labLen = v9517.length;
            var v9521 = j$$5 < labLen;
            for(;v9521;) {
              var v17164 = info$$1.labels;
              var v9518 = v17164.members;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var label$$2 = v9518[j$$5]
              }
              var v21894 = label$$2.id;
              var v17165 = v21894.text;
              var v9520 = v17165 == resolvedTarget;
              if(v9520) {
                var v9519 = info$$1.stmt;
                JAMScript.call(jump.setResolvedTarget, jump, [this, v9519]);
                return
              }
              j$$5 = j$$5 + 1;
              v9521 = j$$5 < labLen
            }
          }
        }else {
          var v17166 = info$$1.stmt;
          var v9526 = JAMScript.call(v17166.isLoop, v17166, []);
          if(v9526) {
            var v9523 = info$$1.stmt;
            JAMScript.call(jump.setResolvedTarget, jump, [this, v9523]);
            return
          }else {
            var v24339 = info$$1.stmt;
            var v21895 = v24339.nodeType;
            var v24340 = TypeScript$$14.NodeType;
            var v21896 = v24340.Switch;
            var v17167 = v21895 == v21896;
            if(v17167) {
              var v21897 = jump.nodeType;
              var v24341 = TypeScript$$14.NodeType;
              var v21898 = v24341.Break;
              v17167 = v21897 == v21898
            }
            var v9525 = v17167;
            if(v9525) {
              var v9524 = info$$1.stmt;
              JAMScript.call(jump.setResolvedTarget, jump, [this, v9524]);
              return
            }
          }
        }
        i$$48 = i$$48 - 1;
        v9528 = i$$48 >= 0
      }
      var v9531 = jump.target;
      if(v9531) {
        var v17168 = jump.target;
        var v9529 = "could not find enclosing statement with label " + v17168;
        JAMScript.call(this.reportParseError, this, [v9529])
      }else {
        var v17169 = jump.nodeType;
        var v21899 = TypeScript$$14.NodeType;
        var v17170 = v21899.Break;
        var v9530 = v17169 == v17170;
        if(v9530) {
          JAMScript.call(this.reportParseError, this, ["break statement requires enclosing loop or switch"])
        }else {
          JAMScript.call(this.reportParseError, this, ["continue statement requires enclosing loop"])
        }
      }
      return
    }
    function v526() {
      var v9532 = this.statementInfoStack;
      return JAMScript.call(v9532.pop, v9532, [])
    }
    function v525(stmt$$3, labels$$1) {
      var info = {stmt:stmt$$3, labels:labels$$1};
      var v9533 = this.statementInfoStack;
      JAMScript.call(v9533.push, v9533, [info]);
      return
    }
    function v524() {
      var v17171 = this.statementInfoStack;
      var v9534 = v17171.length;
      var j$$4 = v9534 - 1;
      var v9536 = j$$4 >= 0;
      for(;v9536;) {
        var v24342 = this.statementInfoStack;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v21900 = v24342[j$$4]
        }
        var v17172 = v21900.stmt;
        var v9535 = JAMScript.call(v17172.isLoop, v17172, []);
        if(v9535) {
          return true
        }
        j$$4 = j$$4 - 1;
        v9536 = j$$4 >= 0
      }
      return false
    }
    function v523() {
      var v27465 = new Array;
      this.statementInfoStack = v27465;
      return
    }
    function Parser$$1() {
      this.varLists = [];
      this.scopeLists = [];
      this.staticsLists = [];
      var v9537 = TypeScript$$14.Scanner;
      var v27466 = JAMScript.new(v9537, []);
      this.scanner = v27466;
      this.currentToken = null;
      this.needTerminator = false;
      this.inFunction = false;
      this.inInterfaceDecl = false;
      this.currentClassDecl = null;
      this.inFncDecl = false;
      var v9538 = TypeScript$$14.Identifier;
      var v27467 = JAMScript.new(v9538, ["_anonymous"]);
      this.anonId = v27467;
      this.style_requireSemi = false;
      this.style_funcInLoop = true;
      this.incremental = false;
      this.errorRecovery = false;
      this.outfile = undefined;
      this.errorCallback = null;
      this.state = ParseState.StartStatementList;
      this.ambientModule = false;
      this.ambientClass = false;
      this.topLevel = true;
      this.allowImportDeclaration = true;
      this.currentUnitIndex = -1;
      this.prevIDTok = null;
      var v27468 = new Array;
      this.statementInfoStack = v27468;
      this.hasTopLevelImportOrExport = false;
      this.strictMode = false;
      this.nestingLevel = 0;
      this.prevExpr = null;
      this.currentClassDefinition = null;
      this.parsingClassConstructorDefinition = false;
      this.parsingDeclareFile = false;
      this.amdDependencies = [];
      this.inferPropertiesFromThisAssignment = false;
      this.requiresExtendsBlock = false;
      this.fname = "";
      return
    }
    var v9539 = Parser$$1.prototype;
    v9539.resetStmtStack = v523;
    var v9540 = Parser$$1.prototype;
    v9540.inLoop = v524;
    var v9541 = Parser$$1.prototype;
    v9541.pushStmt = v525;
    var v9542 = Parser$$1.prototype;
    v9542.popStmt = v526;
    var v9543 = Parser$$1.prototype;
    v9543.resolveJumpTarget = v527;
    var v9544 = Parser$$1.prototype;
    v9544.setErrorRecovery = v528;
    var v9545 = Parser$$1.prototype;
    v9545.getSourceLineCol = v529;
    var v9546 = Parser$$1.prototype;
    v9546.createRef = v530;
    var v9547 = Parser$$1.prototype;
    v9547.reportParseStyleError = v531;
    var v9548 = Parser$$1.prototype;
    v9548.reportParseError = v532;
    var v9549 = Parser$$1.prototype;
    v9549.checkNextToken = v533;
    var v9550 = Parser$$1.prototype;
    v9550.skip = v534;
    var v9551 = Parser$$1.prototype;
    v9551.checkCurrentToken = v535;
    var v9552 = Parser$$1.prototype;
    v9552.pushDeclLists = v536;
    var v9553 = Parser$$1.prototype;
    v9553.popDeclLists = v537;
    var v9554 = Parser$$1.prototype;
    v9554.topVarList = v538;
    var v9555 = Parser$$1.prototype;
    v9555.topScopeList = v539;
    var v9556 = Parser$$1.prototype;
    v9556.topStaticsList = v540;
    var v9557 = Parser$$1.prototype;
    v9557.parseComment = v541;
    var v9558 = Parser$$1.prototype;
    v9558.parseCommentsInner = v542;
    var v9559 = Parser$$1.prototype;
    v9559.parseComments = v543;
    var v9560 = Parser$$1.prototype;
    v9560.parseCommentsForLine = v544;
    var v9561 = Parser$$1.prototype;
    v9561.combineComments = v545;
    var v9562 = Parser$$1.prototype;
    v9562.parseEnumDecl = v546;
    var v9563 = Parser$$1.prototype;
    v9563.parseDottedName = v547;
    var v9564 = Parser$$1.prototype;
    v9564.isValidImportPath = v548;
    var v9565 = Parser$$1.prototype;
    v9565.parseImportDeclaration = v549;
    var v9566 = Parser$$1.prototype;
    v9566.parseModuleDecl = v550;
    var v9567 = Parser$$1.prototype;
    v9567.parseTypeReferenceTail = v551;
    var v9568 = Parser$$1.prototype;
    v9568.parseNamedType = v552;
    var v9569 = Parser$$1.prototype;
    v9569.parseTypeReference = v553;
    var v9570 = Parser$$1.prototype;
    v9570.parseObjectType = v554;
    var v9571 = Parser$$1.prototype;
    v9571.parseFunctionBlock = v555;
    var v9572 = Parser$$1.prototype;
    v9572.parseFunctionStatements = v556;
    var v9573 = Parser$$1.prototype;
    v9573.transformAnonymousArgsIntoFormals = v557;
    var v9574 = Parser$$1.prototype;
    v9574.parseFormalParameterList = v558;
    var v9575 = Parser$$1.prototype;
    v9575.parseFncDecl = v559;
    var v9576 = Parser$$1.prototype;
    v9576.convertToTypeReference = v560;
    var v9577 = Parser$$1.prototype;
    v9577.parseArgList = v561;
    var v9578 = Parser$$1.prototype;
    v9578.parseBaseList = v562;
    var v9579 = Parser$$1.prototype;
    v9579.parseClassDecl = v563;
    var v9580 = Parser$$1.prototype;
    v9580.parseClassElements = v564;
    var v9581 = Parser$$1.prototype;
    v9581.parseClassConstructorDeclaration = v565;
    var v9582 = Parser$$1.prototype;
    v9582.parseClassMemberVariableDeclaration = v566;
    var v9583 = Parser$$1.prototype;
    v9583.parseClassMemberFunctionDeclaration = v567;
    var v9584 = Parser$$1.prototype;
    v9584.parseTypeMember = v568;
    var v9585 = Parser$$1.prototype;
    v9585.parseTypeMemberList = v569;
    var v9586 = Parser$$1.prototype;
    v9586.parseInterfaceDecl = v570;
    var v9587 = Parser$$1.prototype;
    v9587.makeVarDecl = v571;
    var v9588 = Parser$$1.prototype;
    v9588.parsePropertyDeclaration = v572;
    var v9589 = Parser$$1.prototype;
    v9589.parseVariableDeclaration = v573;
    var v9590 = Parser$$1.prototype;
    v9590.parseMemberList = v574;
    var v9591 = Parser$$1.prototype;
    v9591.parseArrayList = v575;
    var v9592 = Parser$$1.prototype;
    v9592.parseArrayLiteral = v576;
    var v9593 = Parser$$1.prototype;
    v9593.parseTerm = v577;
    var v9594 = Parser$$1.prototype;
    v9594.parseLambdaExpr = v578;
    var v9595 = Parser$$1.prototype;
    v9595.parseExpr = v579;
    var v9596 = Parser$$1.prototype;
    v9596.parsePostfixOperators = v580;
    var v9597 = Parser$$1.prototype;
    v9597.parseTry = v581;
    var v9598 = Parser$$1.prototype;
    v9598.parseCatch = v582;
    var v9599 = Parser$$1.prototype;
    v9599.parseFinally = v583;
    var v9600 = Parser$$1.prototype;
    v9600.parseTryCatchFinally = v584;
    var v9601 = Parser$$1.prototype;
    v9601.parseStatement = v585;
    var v9602 = Parser$$1.prototype;
    v9602.okAmbientModuleMember = v586;
    var v9603 = Parser$$1.prototype;
    v9603.parseStatementList = v587;
    var v9604 = Parser$$1.prototype;
    v9604.quickParse = v588;
    var v9605 = Parser$$1.prototype;
    v9605.parse = v590;
    return Parser$$1
  }
  function v522() {
    function QuickParseResult$$1(Script$$2, endLexState) {
      this.Script = Script$$2;
      this.endLexState = endLexState;
      return
    }
    return QuickParseResult$$1
  }
  function v521(ParseState$$1) {
    ParseState$$1._map = [];
    var v9606 = ParseState$$1._map;
    v9606[0] = "None";
    ParseState$$1.None = 0;
    var v9607 = ParseState$$1._map;
    v9607[1] = "StartScript";
    ParseState$$1.StartScript = 1;
    var v9608 = ParseState$$1._map;
    v9608[2] = "StartStatementList";
    ParseState$$1.StartStatementList = 2;
    var v9609 = ParseState$$1._map;
    v9609[3] = "StartStatement";
    ParseState$$1.StartStatement = 3;
    var v9610 = ParseState$$1._map;
    v9610[4] = "StartFncDecl";
    ParseState$$1.StartFncDecl = 4;
    var v9611 = ParseState$$1._map;
    v9611[5] = "FncDeclName";
    ParseState$$1.FncDeclName = 5;
    var v9612 = ParseState$$1._map;
    v9612[6] = "FncDeclArgs";
    ParseState$$1.FncDeclArgs = 6;
    var v9613 = ParseState$$1._map;
    v9613[7] = "FncDeclReturnType";
    ParseState$$1.FncDeclReturnType = 7;
    var v9614 = ParseState$$1._map;
    v9614[8] = "ForInit";
    ParseState$$1.ForInit = 8;
    var v9615 = ParseState$$1._map;
    v9615[9] = "ForInitAfterVar";
    ParseState$$1.ForInitAfterVar = 9;
    var v9616 = ParseState$$1._map;
    v9616[10] = "ForCondStart";
    ParseState$$1.ForCondStart = 10;
    var v9617 = ParseState$$1._map;
    v9617[11] = "EndStmtList";
    ParseState$$1.EndStmtList = 11;
    var v9618 = ParseState$$1._map;
    v9618[12] = "EndScript";
    ParseState$$1.EndScript = 12;
    return
  }
  function v520(TypeContext$$1) {
    TypeContext$$1._map = [];
    TypeContext$$1.NoTypes = 0;
    TypeContext$$1.ArraySuffix = 1;
    TypeContext$$1.Primitive = 2;
    TypeContext$$1.Named = 4;
    var v9619 = TypeContext$$1;
    var v17173 = TypeContext$$1.Primitive;
    var v17174 = TypeContext$$1.Named;
    v9619.AllSimpleTypes = v17173 | v17174;
    var v9620 = TypeContext$$1;
    var v21901 = TypeContext$$1.Primitive;
    var v21902 = TypeContext$$1.Named;
    var v17175 = v21901 | v21902;
    var v17176 = TypeContext$$1.ArraySuffix;
    v9620.AllTypes = v17175 | v17176;
    return
  }
  function quickParse(logger$$1, scopeStartAST, sourceText, minChar$$2, limChar$$2, errorCapture) {
    var fragment = JAMScript.call(sourceText.getText, sourceText, [minChar$$2, limChar$$2]);
    var v26171 = "Quick parse range (" + minChar$$2;
    var v25504 = v26171 + ",";
    var v24343 = v25504 + limChar$$2;
    var v21903 = v24343 + '): "';
    var v21904 = JAMScript.call(TypeScript$$14.stringToLiteral, TypeScript$$14, [fragment, 100]);
    var v17177 = v21903 + v21904;
    var v9621 = v17177 + '"';
    JAMScript.call(logger$$1.log, logger$$1, [v9621]);
    var quickParser = JAMScript.new(Parser, []);
    JAMScript.call(quickParser.setErrorRecovery, quickParser, [null]);
    quickParser.errorCallback = errorCapture;
    var v9622 = TypeScript$$14.ClassDeclaration;
    var quickClassDecl = JAMScript.new(v9622, [null, null, null, null]);
    quickParser.currentClassDecl = quickClassDecl;
    var v17178 = TypeScript$$14.StringSourceText;
    var v9623 = JAMScript.new(v17178, [fragment]);
    var result$$7 = JAMScript.call(quickParser.quickParse, quickParser, [v9623, "", 0]);
    return result$$7
  }
  var v17179 = TypeScript$$14.TypeContext;
  var v21905 = !v17179;
  if(v21905) {
    v17179 = TypeScript$$14.TypeContext = {}
  }
  var v9624 = v17179;
  v520(v9624);
  var TypeContext = TypeScript$$14.TypeContext;
  var v17180 = TypeScript$$14.ParseState;
  var v21906 = !v17180;
  if(v21906) {
    v17180 = TypeScript$$14.ParseState = {}
  }
  var v9625 = v17180;
  v521(v9625);
  var ParseState = TypeScript$$14.ParseState;
  var QuickParseResult = v522();
  TypeScript$$14.QuickParseResult = QuickParseResult;
  var Parser = v591();
  TypeScript$$14.Parser = Parser;
  TypeScript$$14.quickParse = quickParse;
  return
}
function v519(TypeScript$$13) {
  function v518() {
    function v517(ast$$36, op$$1, type$$29) {
      var v24344 = "Operator '" + op$$1;
      var v21907 = v24344 + "' cannot be applied to type '";
      var v21908 = JAMScript.call(type$$29.getTypeName, type$$29, []);
      var v17181 = v21907 + v21908;
      var v9626 = v17181 + "'";
      JAMScript.call(this.reportError, this, [ast$$36, v9626]);
      return
    }
    function v516(ast$$35) {
      JAMScript.call(this.simpleError, this, [ast$$35, "Expected var, class, interface, or module"]);
      return
    }
    function v515(ast$$34, t1, t2, op, scope$$8, comparisonInfo) {
      var v9628 = !t1;
      if(v9628) {
        var v9627 = this.checker;
        t1 = v9627.anyType
      }
      var v9630 = !t2;
      if(v9630) {
        var v9629 = this.checker;
        t2 = v9629.anyType
      }
      var v9631;
      if(comparisonInfo) {
        v9631 = comparisonInfo.message
      }else {
        v9631 = ""
      }
      var reason = v9631;
      if(op) {
        var v26559 = "Operator '" + op;
        var v26172 = v26559 + "' cannot be applied to types '";
        var v26173 = JAMScript.call(t1.getScopedTypeName, t1, [scope$$8]);
        var v25505 = v26172 + v26173;
        var v24345 = v25505 + "' and '";
        var v24346 = JAMScript.call(t2.getScopedTypeName, t2, [scope$$8]);
        var v21909 = v24345 + v24346;
        var v17182 = v21909 + "'";
        var v21910;
        if(reason) {
          v21910 = ": " + reason
        }else {
          v21910 = ""
        }
        var v17183 = v21910;
        var v9632 = v17182 + v17183;
        JAMScript.call(this.reportError, this, [ast$$34, v9632])
      }else {
        var v26174 = JAMScript.call(t1.getScopedTypeName, t1, [scope$$8]);
        var v25506 = "Cannot convert '" + v26174;
        var v24347 = v25506 + "' to '";
        var v24348 = JAMScript.call(t2.getScopedTypeName, t2, [scope$$8]);
        var v21911 = v24347 + v24348;
        var v17184 = v21911 + "'";
        var v21912;
        if(reason) {
          v21912 = ": " + reason
        }else {
          v21912 = ""
        }
        var v17185 = v21912;
        var v9633 = v17184 + v17185;
        JAMScript.call(this.reportError, this, [ast$$34, v9633])
      }
      return
    }
    function v514(ast$$33, scope$$7) {
      var v17186 = ast$$33.operand1;
      var v9634 = v17186.type;
      var targetType$$2 = JAMScript.call(v9634.getScopedTypeName, v9634, [scope$$7]);
      var v17187 = ast$$33.operand2;
      var v9635 = v17187.type;
      var indexType = JAMScript.call(v9635.getScopedTypeName, v9635, [scope$$7]);
      var v24349 = "Value of type '" + targetType$$2;
      var v21913 = v24349 + "' is not indexable by type '";
      var v17188 = v21913 + indexType;
      var v9636 = v17188 + "'";
      JAMScript.call(this.simpleError, this, [ast$$33, v9636]);
      return
    }
    function v513(ast$$32, nodeType$$13, scope$$6) {
      var v9637 = ast$$32.target;
      var targetType$$1 = v9637.type;
      var typeName = JAMScript.call(targetType$$1.getScopedTypeName, targetType$$1, [scope$$6]);
      var v17189 = targetType$$1.construct;
      if(v17189) {
        var v24350 = TypeScript$$13.NodeType;
        var v21914 = v24350.Call;
        v17189 = nodeType$$13 == v21914
      }
      var v9641 = v17189;
      if(v9641) {
        var v17190 = "Value of type '" + typeName;
        var v9638 = v17190 + "' is not callable.  Did you mean to include 'new'?";
        JAMScript.call(this.reportError, this, [ast$$32, v9638])
      }else {
        var v9639;
        var v24351 = TypeScript$$13.NodeType;
        var v21915 = v24351.Call;
        var v17191 = nodeType$$13 == v21915;
        if(v17191) {
          v9639 = "callable"
        }else {
          v9639 = "newable"
        }
        var catString = v9639;
        var v21916 = "Value of type '" + typeName;
        var v17192 = v21916 + "' is not ";
        var v9640 = v17192 + catString;
        JAMScript.call(this.reportError, this, [ast$$32, v9640])
      }
      return
    }
    function v512(ast$$31) {
      JAMScript.call(this.simpleError, this, [ast$$31, "The left-hand side of an assignment expression must be a variable, property or indexer"]);
      return
    }
    function v511(ast$$30) {
      JAMScript.call(this.simpleError, this, [ast$$30, "Keyword 'super' can only be used inside a class instance method"]);
      return
    }
    function v510(sym$$6, msg$$3) {
      JAMScript.call(this.reportErrorFromSym, this, [sym$$6, msg$$3]);
      return
    }
    function v509(ast$$29, msg$$2) {
      JAMScript.call(this.reportError, this, [ast$$29, msg$$2]);
      return
    }
    function v508(ast$$28, msg$$1) {
      var bkThrow = this.pushToErrorSink;
      this.pushToErrorSink = false;
      var v9642 = "STYLE: " + msg$$1;
      JAMScript.call(this.reportError, this, [ast$$28, v9642]);
      this.pushToErrorSink = bkThrow;
      return
    }
    function v507(ast$$27, name$$44) {
      var v17193 = "The name '" + name$$44;
      var v9643 = v17193 + "' does not refer to a value";
      JAMScript.call(this.reportError, this, [ast$$27, v9643]);
      return
    }
    function v506(ast$$26, name$$43) {
      var v17194 = "The name '" + name$$43;
      var v9644 = v17194 + "' does not exist in the current scope";
      JAMScript.call(this.reportError, this, [ast$$26, v9644]);
      return
    }
    function v505(ast$$25, text$$12, symbol$$5) {
      var defLineCol = {line:-1, col:-1};
      var v9645 = this.parser;
      var v9646 = symbol$$5.location;
      JAMScript.call(v9645.getSourceLineCol, v9645, [defLineCol, v9646]);
      var v26175 = "symbol " + text$$12;
      var v25507 = v26175 + " defined at (";
      var v25508 = defLineCol.line;
      var v24352 = v25507 + v25508;
      var v21917 = v24352 + ",";
      var v21918 = defLineCol.col;
      var v17195 = v21917 + v21918;
      var v9647 = v17195 + ")";
      JAMScript.call(this.reportError, this, [ast$$25, v9647]);
      return
    }
    function v504(ast$$24, name$$42) {
      var v17196 = "Duplicate identifier '" + name$$42;
      var v9648 = v17196 + "'";
      JAMScript.call(this.reportError, this, [ast$$24, v9648]);
      return
    }
    function v503(ast$$23, message$$13) {
      JAMScript.call(this.reportError, this, [ast$$23, message$$13]);
      throw Error("EmitError");
    }
    function v502(symbol$$4, message$$12) {
      var v9649 = this.pushToErrorSink;
      if(v9649) {
        JAMScript.call(this.captureError, this, [message$$12]);
        return
      }
      this.hasErrors = true;
      var v21919 = this.parser;
      var v17197 = v21919.errorRecovery;
      if(v17197) {
        var v21920 = this.parser;
        v17197 = v21920.errorCallback
      }
      var v9655 = v17197;
      if(v9655) {
        var v9650 = this.parser;
        var v9651 = symbol$$4.location;
        var v9652 = symbol$$4.length;
        var v21921 = this.checker;
        var v17198 = v21921.locationInfo;
        var v9653 = v17198.unitIndex;
        JAMScript.call(v9650.errorCallback, v9650, [v9651, v9652, message$$12, v9653])
      }else {
        JAMScript.call(this.writePrefixFromSym, this, [symbol$$4]);
        var v9654 = this.outfile;
        JAMScript.call(v9654.WriteLine, v9654, [message$$12])
      }
      return
    }
    function v501(ast$$22, message$$11) {
      var v9656 = this.pushToErrorSink;
      if(v9656) {
        JAMScript.call(this.captureError, this, [message$$11]);
        return
      }
      this.hasErrors = true;
      var v17199 = ast$$22;
      if(v17199) {
        var v24353 = this.parser;
        var v21922 = v24353.errorRecovery;
        if(v21922) {
          var v24354 = this.parser;
          v21922 = v24354.errorCallback
        }
        v17199 = v21922
      }
      var v9663 = v17199;
      if(v9663) {
        var v9657 = ast$$22.limChar;
        var v9658 = ast$$22.minChar;
        var len$$13 = v9657 - v9658;
        var v9659 = this.parser;
        var v9660 = ast$$22.minChar;
        var v21923 = this.checker;
        var v17200 = v21923.locationInfo;
        var v9661 = v17200.unitIndex;
        JAMScript.call(v9659.errorCallback, v9659, [v9660, len$$13, message$$11, v9661])
      }else {
        JAMScript.call(this.writePrefix, this, [ast$$22]);
        var v9662 = this.outfile;
        JAMScript.call(v9662.WriteLine, v9662, [message$$11])
      }
      return
    }
    function v500(ast$$21) {
      if(ast$$21) {
        var v17201 = ast$$21;
        var v21924 = ast$$21.flags;
        var v24355 = TypeScript$$13.ASTFlags;
        var v21925 = v24355.Error;
        v17201.flags = v21924 | v21925;
        var v21926 = this.checker;
        var v17202 = v21926.locationInfo;
        var v9667 = v17202.lineMap;
        if(v9667) {
          var v9664 = this.lineCol;
          var v9665 = ast$$21.minChar;
          var v21927 = this.checker;
          var v17203 = v21927.locationInfo;
          var v9666 = v17203.lineMap;
          JAMScript.call(TypeScript$$13.getSourceLineColFromMap, TypeScript$$13, [v9664, v9665, v9666])
        }
      }
      return
    }
    function v499(symbol$$3) {
      var v17204 = symbol$$3;
      if(v17204) {
        var v24356 = this.checker;
        var v21928 = v24356.locationInfo;
        v17204 = v21928.lineMap
      }
      var v9673 = v17204;
      if(v9673) {
        var v9668 = this.lineCol;
        var v9669 = symbol$$3.location;
        var v21929 = this.checker;
        var v17205 = v21929.locationInfo;
        var v9670 = v17205.lineMap;
        JAMScript.call(TypeScript$$13.getSourceLineColFromMap, TypeScript$$13, [v9668, v9669, v9670])
      }else {
        var v9671 = this.lineCol;
        v9671.line = -1;
        var v9672 = this.lineCol;
        v9672.col = -1
      }
      JAMScript.call(this.emitPrefix, this, []);
      return
    }
    function v498(ast$$20) {
      if(ast$$20) {
        JAMScript.call(this.setError, this, [ast$$20])
      }else {
        var v9674 = this.lineCol;
        v9674.line = 0;
        var v9675 = this.lineCol;
        v9675.col = 0
      }
      JAMScript.call(this.emitPrefix, this, []);
      return
    }
    function v497() {
      var v9677 = this.emitAsComments;
      if(v9677) {
        var v9676 = this.outfile;
        JAMScript.call(v9676.Write, v9676, ["// "])
      }
      var v9678 = this.outfile;
      var v26718 = this.checker;
      var v26560 = v26718.locationInfo;
      var v26176 = v26560.filename;
      var v25509 = v26176 + "(";
      var v26177 = this.lineCol;
      var v25510 = v26177.line;
      var v24357 = v25509 + v25510;
      var v21930 = v24357 + ",";
      var v24358 = this.lineCol;
      var v21931 = v24358.col;
      var v17206 = v21930 + v21931;
      var v9679 = v17206 + "): ";
      JAMScript.call(v9678.Write, v9678, [v9679]);
      return
    }
    function v496(outerr$$1) {
      this.outfile = outerr$$1;
      this.emitAsComments = false;
      return
    }
    function v495(emsg) {
      var v9680 = this.errorSink;
      var v17207 = this.errorSink;
      var v9681 = v17207.length;
      JAMScript.set(v9680, v9681, emsg);
      return
    }
    function v494() {
      this.errorSink = [];
      return
    }
    function v493() {
      return this.errorSink
    }
    function ErrorReporter$$1(outfile$$2) {
      this.outfile = outfile$$2;
      this.parser = null;
      this.checker = null;
      this.lineCol = {line:0, col:0};
      this.emitAsComments = true;
      this.hasErrors = false;
      this.pushToErrorSink = false;
      this.errorSink = [];
      return
    }
    var v9682 = ErrorReporter$$1.prototype;
    v9682.getCapturedErrors = v493;
    var v9683 = ErrorReporter$$1.prototype;
    v9683.freeCapturedErrors = v494;
    var v9684 = ErrorReporter$$1.prototype;
    v9684.captureError = v495;
    var v9685 = ErrorReporter$$1.prototype;
    v9685.setErrOut = v496;
    var v9686 = ErrorReporter$$1.prototype;
    v9686.emitPrefix = v497;
    var v9687 = ErrorReporter$$1.prototype;
    v9687.writePrefix = v498;
    var v9688 = ErrorReporter$$1.prototype;
    v9688.writePrefixFromSym = v499;
    var v9689 = ErrorReporter$$1.prototype;
    v9689.setError = v500;
    var v9690 = ErrorReporter$$1.prototype;
    v9690.reportError = v501;
    var v9691 = ErrorReporter$$1.prototype;
    v9691.reportErrorFromSym = v502;
    var v9692 = ErrorReporter$$1.prototype;
    v9692.emitterError = v503;
    var v9693 = ErrorReporter$$1.prototype;
    v9693.duplicateIdentifier = v504;
    var v9694 = ErrorReporter$$1.prototype;
    v9694.showRef = v505;
    var v9695 = ErrorReporter$$1.prototype;
    v9695.unresolvedSymbol = v506;
    var v9696 = ErrorReporter$$1.prototype;
    v9696.symbolDoesNotReferToAValue = v507;
    var v9697 = ErrorReporter$$1.prototype;
    v9697.styleError = v508;
    var v9698 = ErrorReporter$$1.prototype;
    v9698.simpleError = v509;
    var v9699 = ErrorReporter$$1.prototype;
    v9699.simpleErrorFromSym = v510;
    var v9700 = ErrorReporter$$1.prototype;
    v9700.invalidSuperReference = v511;
    var v9701 = ErrorReporter$$1.prototype;
    v9701.valueCannotBeModified = v512;
    var v9702 = ErrorReporter$$1.prototype;
    v9702.invalidCall = v513;
    var v9703 = ErrorReporter$$1.prototype;
    v9703.indexLHS = v514;
    var v9704 = ErrorReporter$$1.prototype;
    v9704.incompatibleTypes = v515;
    var v9705 = ErrorReporter$$1.prototype;
    v9705.expectedClassOrInterface = v516;
    var v9706 = ErrorReporter$$1.prototype;
    v9706.unaryOperatorTypeError = v517;
    return ErrorReporter$$1
  }
  var ErrorReporter = v518();
  TypeScript$$13.ErrorReporter = ErrorReporter;
  return
}
function v492(TypeScript$$12) {
  function v491() {
    function v490(fileName$$2, useUTF8) {
      try {
        var v17208 = this.emitOptions;
        var v9707 = v17208.ioHost;
        return JAMScript.call(v9707.createFile, v9707, [fileName$$2, useUTF8])
      }catch(ex$$2) {
        var v9708 = this.errorReporter;
        var v9709 = ex$$2.message;
        JAMScript.call(v9708.emitterError, v9708, [null, v9709])
      }
      return
    }
    function shouldCaptureThis(func$$3) {
      var v9710 = JAMScript.call(func$$3.hasSelfReference, func$$3, []);
      var v17209 = !v9710;
      if(v17209) {
        v9710 = JAMScript.call(func$$3.hasSuperReferenceInFatArrowFunction, func$$3, [])
      }
      return v9710
    }
    function v489() {
      var v17210 = this.thisFnc;
      if(v17210) {
        var v25511 = this.thisFnc;
        var v24359 = JAMScript.call(v25511.isMethod, v25511, []);
        var v21932 = !v24359;
        if(v21932) {
          var v25512 = this.thisFnc;
          var v24360 = v25512.isConstructor;
          v21932 = !v24360
        }
        v17210 = v21932
      }
      var v9711 = v17210;
      if(v9711) {
        JAMScript.call(this.writeToOutput, this, ["_this"])
      }else {
        JAMScript.call(this.writeToOutput, this, ["this"])
      }
      return
    }
    function v488(callEx) {
      var v21933 = callEx.target;
      var v17211 = v21933.nodeType;
      var v21934 = TypeScript$$12.NodeType;
      var v17212 = v21934.Dot;
      var v9717 = v17211 == v17212;
      if(v9717) {
        var dotNode = callEx.target;
        var v21935 = dotNode.operand1;
        var v17213 = v21935.nodeType;
        var v21936 = TypeScript$$12.NodeType;
        var v17214 = v21936.Super;
        var v9716 = v17213 == v17214;
        if(v9716) {
          var v17215 = TypeScript$$12.TokenID;
          var v9712 = v17215.OpenParen;
          JAMScript.call(this.emitJavascript, this, [dotNode, v9712, false]);
          JAMScript.call(this.writeToOutput, this, [".call("]);
          JAMScript.call(this.emitThis, this, []);
          var v17216 = callEx.arguments;
          if(v17216) {
            var v25513 = callEx.arguments;
            var v24361 = v25513.members;
            var v21937 = v24361.length;
            v17216 = v21937 > 0
          }
          var v9715 = v17216;
          if(v9715) {
            JAMScript.call(this.writeToOutput, this, [", "]);
            var v9713 = callEx.arguments;
            var v17217 = TypeScript$$12.TokenID;
            var v9714 = v17217.Comma;
            JAMScript.call(this.emitJavascriptList, this, [v9713, ", ", v9714, false, false, false])
          }
          JAMScript.call(this.writeToOutput, this, [")"]);
          return true
        }
      }
      return false
    }
    function v487() {
      JAMScript.call(this.writeToOutput, this, ["_super.prototype"]);
      return
    }
    function v486(reqInherits) {
      var v17218 = this.prologueEmitted;
      var v9720 = !v17218;
      if(v9720) {
        if(reqInherits) {
          this.prologueEmitted = true;
          JAMScript.call(this.writeLineToOutput, this, ["var __extends = this.__extends || function (d, b) {"]);
          JAMScript.call(this.writeLineToOutput, this, ["    function __() { this.constructor = d; }"]);
          JAMScript.call(this.writeLineToOutput, this, ["    __.prototype = b.prototype;"]);
          JAMScript.call(this.writeLineToOutput, this, ["    d.prototype = new __();"]);
          JAMScript.call(this.writeLineToOutput, this, ["};"])
        }
        var v17219 = this.checker;
        var v9719 = v17219.mustCaptureGlobalThis;
        if(v9719) {
          this.prologueEmitted = true;
          var v9718 = this.captureThisStmtString;
          JAMScript.call(this.writeLineToOutput, this, [v9718])
        }
      }
      return
    }
    function v485(classDecl$$3) {
      var v21938 = classDecl$$3.varFlags;
      var v24362 = TypeScript$$12.VarFlags;
      var v21939 = v24362.Ambient;
      var v17220 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21938, v21939]);
      var v9770 = !v17220;
      if(v9770) {
        var svClassNode = this.thisClassNode;
        var i$$47 = 0;
        this.thisClassNode = classDecl$$3;
        var v9721 = classDecl$$3.name;
        var className$$3 = v9721.actualText;
        JAMScript.call(this.emitParensAndCommentsInPlace, this, [classDecl$$3, true]);
        var v9722 = EmitContainer.Class;
        var temp$$13 = JAMScript.call(this.setContainer, this, [v9722]);
        JAMScript.call(this.recordSourceMappingStart, this, [classDecl$$3]);
        var v21940 = classDecl$$3.varFlags;
        var v24363 = TypeScript$$12.VarFlags;
        var v21941 = v24363.Exported;
        var v17221 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21940, v21941]);
        if(v17221) {
          var v25514 = classDecl$$3.type;
          var v24364 = v25514.symbol;
          var v21942 = v24364.container;
          var v24365 = this.checker;
          var v21943 = v24365.gloMod;
          v17221 = v21942 == v21943
        }
        var v9725 = v17221;
        if(v9725) {
          var v9723 = "this." + className$$3;
          JAMScript.call(this.writeToOutput, this, [v9723])
        }else {
          var v9724 = "var " + className$$3;
          JAMScript.call(this.writeToOutput, this, [v9724])
        }
        var v9726 = classDecl$$3.extendsList;
        if(v9726) {
          var v21944 = classDecl$$3.extendsList;
          var v17222 = v21944.members;
          v9726 = v17222.length
        }
        var hasBaseClass = v9726;
        var baseNameDecl = null;
        var baseName$$2 = null;
        if(hasBaseClass) {
          JAMScript.call(this.writeLineToOutput, this, [" = (function (_super) {"])
        }else {
          JAMScript.call(this.writeLineToOutput, this, [" = (function () {"])
        }
        JAMScript.call(this.recordSourceMappingNameStart, this, [className$$3]);
        var v9727 = this.indenter;
        JAMScript.call(v9727.increaseIndent, v9727, []);
        if(hasBaseClass) {
          var v17223 = classDecl$$3.extendsList;
          var v9728 = v17223.members;
          baseNameDecl = v9728[0];
          var v9729;
          var v21945 = baseNameDecl.nodeType;
          var v24366 = TypeScript$$12.NodeType;
          var v21946 = v24366.Call;
          var v17224 = v21945 == v21946;
          if(v17224) {
            v9729 = baseNameDecl.target
          }else {
            v9729 = baseNameDecl
          }
          baseName$$2 = v9729;
          JAMScript.call(this.emitIndent, this, []);
          var v17225 = "__extends(" + className$$3;
          var v9730 = v17225 + ", _super);";
          JAMScript.call(this.writeLineToOutput, this, [v9730])
        }
        JAMScript.call(this.emitIndent, this, []);
        var constrDecl = classDecl$$3.constructorDecl;
        if(constrDecl) {
          var v9731 = classDecl$$3.constructorDecl;
          var v17226 = TypeScript$$12.TokenID;
          var v9732 = v17226.OpenParen;
          JAMScript.call(this.emitJavascript, this, [v9731, v9732, false])
        }else {
          var wroteProps = 0;
          JAMScript.call(this.recordSourceMappingStart, this, [classDecl$$3]);
          var v9733 = this.indenter;
          JAMScript.call(v9733.increaseIndent, v9733, []);
          var v24367 = classDecl$$3.name;
          var v21947 = v24367.actualText;
          var v17227 = "function " + v21947;
          var v9734 = v17227 + "() {";
          JAMScript.call(this.writeToOutput, this, [v9734]);
          JAMScript.call(this.recordSourceMappingNameStart, this, ["constructor"]);
          if(hasBaseClass) {
            JAMScript.call(this.writeLineToOutput, this, [""]);
            JAMScript.call(this.emitIndent, this, []);
            JAMScript.call(this.writeLineToOutput, this, ["_super.apply(this, arguments);"]);
            wroteProps = wroteProps + 1
          }
          var v17228 = classDecl$$3.varFlags;
          var v21948 = TypeScript$$12.VarFlags;
          var v17229 = v21948.MustCaptureThis;
          var v9735 = v17228 & v17229;
          if(v9735) {
            JAMScript.call(this.writeCaptureThisStatement, this, [classDecl$$3])
          }
          var v17230 = this.thisClassNode;
          var v9736 = v17230.members;
          var members$$6 = v9736.members;
          i$$47 = 0;
          var v17231 = members$$6.length;
          var v9740 = i$$47 < v17231;
          for(;v9740;) {
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v21949 = members$$6[i$$47]
            }
            var v17232 = v21949.nodeType;
            var v21950 = TypeScript$$12.NodeType;
            var v17233 = v21950.VarDecl;
            var v9739 = v17232 == v17233;
            if(v9739) {
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var varDecl$$5 = members$$6[i$$47]
              }
              var v24368 = varDecl$$5.varFlags;
              var v25515 = TypeScript$$12.VarFlags;
              var v24369 = v25515.Static;
              var v21951 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24368, v24369]);
              var v17234 = !v21951;
              if(v17234) {
                v17234 = varDecl$$5.init
              }
              var v9738 = v17234;
              if(v9738) {
                JAMScript.call(this.writeLineToOutput, this, [""]);
                JAMScript.call(this.emitIndent, this, []);
                var v17235 = TypeScript$$12.TokenID;
                var v9737 = v17235.Tilde;
                JAMScript.call(this.emitJavascriptVarDecl, this, [varDecl$$5, v9737]);
                wroteProps = wroteProps + 1
              }
            }
            i$$47 = i$$47 + 1;
            var v17236 = members$$6.length;
            v9740 = i$$47 < v17236
          }
          if(wroteProps) {
            JAMScript.call(this.writeLineToOutput, this, [""]);
            var v9741 = this.indenter;
            JAMScript.call(v9741.decreaseIndent, v9741, []);
            JAMScript.call(this.emitIndent, this, []);
            JAMScript.call(this.writeLineToOutput, this, ["}"])
          }else {
            JAMScript.call(this.writeLineToOutput, this, [" }"]);
            var v9742 = this.indenter;
            JAMScript.call(v9742.decreaseIndent, v9742, [])
          }
          JAMScript.call(this.recordSourceMappingNameEnd, this, []);
          JAMScript.call(this.recordSourceMappingEnd, this, [classDecl$$3])
        }
        var v17237 = classDecl$$3.members;
        var v9743 = v17237.members;
        var membersLen = v9743.length;
        var j$$3 = 0;
        var v9759 = j$$3 < membersLen;
        for(;v9759;) {
          var v17238 = classDecl$$3.members;
          var v9744 = v17238.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var memberDecl = v9744[j$$3]
          }
          var v17239 = memberDecl.nodeType;
          var v21952 = TypeScript$$12.NodeType;
          var v17240 = v21952.FuncDecl;
          var v9758 = v17239 == v17240;
          if(v9758) {
            var fn$$6 = memberDecl;
            var v21953 = fn$$6.fncFlags;
            var v24370 = TypeScript$$12.FncFlags;
            var v21954 = v24370.Method;
            var v17241 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21953, v21954]);
            if(v17241) {
              var v21955 = JAMScript.call(fn$$6.isSignature, fn$$6, []);
              v17241 = !v21955
            }
            var v9751 = v17241;
            if(v9751) {
              var v21956 = fn$$6.fncFlags;
              var v24371 = TypeScript$$12.FncFlags;
              var v21957 = v24371.Static;
              var v17242 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21956, v21957]);
              var v9750 = !v17242;
              if(v9750) {
                JAMScript.call(this.emitPrototypeMember, this, [fn$$6, className$$3])
              }else {
                var v9749 = JAMScript.call(fn$$6.isAccessor, fn$$6, []);
                if(v9749) {
                  var v21958 = this.thisClassNode;
                  var v17243 = v21958.name;
                  var v9745 = v17243.actualText;
                  JAMScript.call(this.emitPropertyAccessor, this, [fn$$6, v9745, false])
                }else {
                  JAMScript.call(this.emitIndent, this, []);
                  JAMScript.call(this.recordSourceMappingStart, this, [fn$$6]);
                  var v25516 = classDecl$$3.name;
                  var v24372 = v25516.actualText;
                  var v21959 = v24372 + ".";
                  var v24373 = fn$$6.name;
                  var v21960 = v24373.actualText;
                  var v17244 = v21959 + v21960;
                  var v9746 = v17244 + " = ";
                  JAMScript.call(this.writeToOutput, this, [v9746]);
                  var v17245 = fn$$6.name;
                  if(v17245) {
                    var v24374 = fn$$6.name;
                    var v21961 = JAMScript.call(v24374.isMissing, v24374, []);
                    v17245 = !v21961
                  }
                  var v9747 = v17245;
                  var v9748 = JAMScript.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [fn$$6]);
                  JAMScript.call(this.emitInnerFunction, this, [fn$$6, v9747, true, null, v9748, null]);
                  JAMScript.call(this.writeLineToOutput, this, [";"])
                }
              }
            }
          }else {
            var v17246 = memberDecl.nodeType;
            var v21962 = TypeScript$$12.NodeType;
            var v17247 = v21962.VarDecl;
            var v9757 = v17246 == v17247;
            if(v9757) {
              varDecl$$5 = memberDecl;
              var v17248 = varDecl$$5.varFlags;
              var v21963 = TypeScript$$12.VarFlags;
              var v17249 = v21963.Static;
              var v9756 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17248, v17249]);
              if(v9756) {
                var v9755 = varDecl$$5.init;
                if(v9755) {
                  JAMScript.call(this.emitIndent, this, []);
                  JAMScript.call(this.recordSourceMappingStart, this, [varDecl$$5]);
                  var v25517 = classDecl$$3.name;
                  var v24375 = v25517.actualText;
                  var v21964 = v24375 + ".";
                  var v24376 = varDecl$$5.id;
                  var v21965 = v24376.actualText;
                  var v17250 = v21964 + v21965;
                  var v9752 = v17250 + " = ";
                  JAMScript.call(this.writeToOutput, this, [v9752]);
                  var v9753 = varDecl$$5.init;
                  var v17251 = TypeScript$$12.TokenID;
                  var v9754 = v17251.Equals;
                  JAMScript.call(this.emitJavascript, this, [v9753, v9754, false]);
                  JAMScript.call(this.writeLineToOutput, this, [";"]);
                  JAMScript.call(this.recordSourceMappingEnd, this, [varDecl$$5])
                }
              }
            }else {
              throw Error("We want to catch this");
            }
          }
          j$$3 = j$$3 + 1;
          v9759 = j$$3 < membersLen
        }
        JAMScript.call(this.emitIndent, this, []);
        var v9760 = classDecl$$3.endingToken;
        JAMScript.call(this.recordSourceMappingStart, this, [v9760]);
        var v17252 = "return " + className$$3;
        var v9761 = v17252 + ";";
        JAMScript.call(this.writeLineToOutput, this, [v9761]);
        var v9762 = classDecl$$3.endingToken;
        JAMScript.call(this.recordSourceMappingEnd, this, [v9762]);
        var v9763 = this.indenter;
        JAMScript.call(v9763.decreaseIndent, v9763, []);
        JAMScript.call(this.emitIndent, this, []);
        var v9764 = classDecl$$3.endingToken;
        JAMScript.call(this.recordSourceMappingStart, this, [v9764]);
        JAMScript.call(this.writeToOutput, this, ["}"]);
        JAMScript.call(this.recordSourceMappingNameEnd, this, []);
        var v9765 = classDecl$$3.endingToken;
        JAMScript.call(this.recordSourceMappingEnd, this, [v9765]);
        JAMScript.call(this.recordSourceMappingStart, this, [classDecl$$3]);
        JAMScript.call(this.writeToOutput, this, [")("]);
        if(hasBaseClass) {
          var v17253 = TypeScript$$12.TokenID;
          var v9766 = v17253.Tilde;
          JAMScript.call(this.emitJavascript, this, [baseName$$2, v9766, false])
        }
        JAMScript.call(this.writeToOutput, this, [");"]);
        JAMScript.call(this.recordSourceMappingEnd, this, [classDecl$$3]);
        var v24377 = EmitContainer.Module;
        var v21966 = temp$$13 == v24377;
        var v24379 = !v21966;
        if(v24379) {
          var v24378 = EmitContainer.DynamicModule;
          v21966 = temp$$13 == v24378
        }
        var v17254 = v21966;
        if(v17254) {
          var v21967 = classDecl$$3.varFlags;
          var v24380 = TypeScript$$12.VarFlags;
          var v21968 = v24380.Exported;
          v17254 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v21967, v21968])
        }
        var v9769 = v17254;
        if(v9769) {
          JAMScript.call(this.writeLineToOutput, this, [""]);
          JAMScript.call(this.emitIndent, this, []);
          var v9767;
          var v21969 = EmitContainer.Module;
          var v17255 = temp$$13 == v21969;
          if(v17255) {
            v9767 = this.moduleName
          }else {
            v9767 = "exports"
          }
          var modName$$2 = v9767;
          JAMScript.call(this.recordSourceMappingStart, this, [classDecl$$3]);
          var v25518 = modName$$2 + ".";
          var v24381 = v25518 + className$$3;
          var v21970 = v24381 + " = ";
          var v17256 = v21970 + className$$3;
          var v9768 = v17256 + ";";
          JAMScript.call(this.writeToOutput, this, [v9768]);
          JAMScript.call(this.recordSourceMappingEnd, this, [classDecl$$3])
        }
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.recordSourceMappingEnd, this, [classDecl$$3]);
        JAMScript.call(this.emitParensAndCommentsInPlace, this, [classDecl$$3, false]);
        JAMScript.call(this.setContainer, this, [temp$$13]);
        this.thisClassNode = svClassNode
      }
      return
    }
    function v484(className$$2, base$$1, classDecl$$2) {
      function v483(key$$32, s$$13, c$$6) {
        var sym$$5 = s$$13;
        var v21971 = JAMScript.call(sym$$5.kind, sym$$5, []);
        var v24382 = TypeScript$$12.SymbolKind;
        var v21972 = v24382.Type;
        var v17257 = v21971 == v21972;
        if(v17257) {
          var v21973 = sym$$5.type;
          v17257 = v21973.call
        }
        var v9774 = v17257;
        if(v9774) {
          var v9771 = sym$$5.declAST;
          JAMScript.call(this.recordSourceMappingStart, this, [v9771]);
          var v26561 = className$$2 + ".prototype.";
          var v26562 = sym$$5.name;
          var v26178 = v26561 + v26562;
          var v25519 = v26178 + " = ";
          var v24383 = v25519 + baseName$$1;
          var v21974 = v24383 + ".prototype.";
          var v21975 = sym$$5.name;
          var v17258 = v21974 + v21975;
          var v9772 = v17258 + ";";
          JAMScript.call(this.writeLineToOutput, this, [v9772]);
          var v9773 = sym$$5.declAST;
          JAMScript.call(this.recordSourceMappingEnd, this, [v9773])
        }
        return
      }
      var v9777 = base$$1.members;
      if(v9777) {
        var baseSymbol$$1 = base$$1.symbol;
        var baseName$$1 = baseSymbol$$1.name;
        var v17259 = baseSymbol$$1.declModule;
        var v24384 = classDecl$$2.type;
        var v21976 = v24384.symbol;
        var v17260 = v21976.declModule;
        var v9775 = v17259 != v17260;
        if(v9775) {
          baseName$$1 = JAMScript.call(baseSymbol$$1.fullName, baseSymbol$$1, [])
        }
        var v17261 = base$$1.members;
        var v9776 = v17261.allMembers;
        JAMScript.call(v9776.map, v9776, [v483, null])
      }
      var v9781 = base$$1.extendsList;
      if(v9781) {
        var i$$46 = 0;
        var v9778 = base$$1.extendsList;
        var len$$12 = v9778.length;
        var v9780 = i$$46 < len$$12;
        for(;v9780;) {
          var v17262 = base$$1.extendsList;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v9779 = v17262[i$$46]
          }
          JAMScript.call(this.emitAddBaseMethods, this, [className$$2, v9779, classDecl$$2]);
          i$$46 = i$$46 + 1;
          v9780 = i$$46 < len$$12
        }
      }
      return
    }
    function v482(member, className$$1) {
      var v17263 = member.nodeType;
      var v21977 = TypeScript$$12.NodeType;
      var v17264 = v21977.FuncDecl;
      var v9792 = v17263 == v17264;
      if(v9792) {
        var funcDecl$$4 = member;
        var v9784 = JAMScript.call(funcDecl$$4.isAccessor, funcDecl$$4, []);
        if(v9784) {
          JAMScript.call(this.emitPropertyAccessor, this, [funcDecl$$4, className$$1, true])
        }else {
          JAMScript.call(this.emitIndent, this, []);
          JAMScript.call(this.recordSourceMappingStart, this, [funcDecl$$4]);
          var v21978 = className$$1 + ".prototype.";
          var v21979 = JAMScript.call(funcDecl$$4.getNameText, funcDecl$$4, []);
          var v17265 = v21978 + v21979;
          var v9782 = v17265 + " = ";
          JAMScript.call(this.writeToOutput, this, [v9782]);
          var v9783 = JAMScript.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [funcDecl$$4]);
          JAMScript.call(this.emitInnerFunction, this, [funcDecl$$4, false, true, null, v9783, null]);
          JAMScript.call(this.writeLineToOutput, this, [";"])
        }
      }else {
        var v17266 = member.nodeType;
        var v21980 = TypeScript$$12.NodeType;
        var v17267 = v21980.VarDecl;
        var v9791 = v17266 == v17267;
        if(v9791) {
          var varDecl$$4 = member;
          var v9790 = varDecl$$4.init;
          if(v9790) {
            JAMScript.call(this.emitIndent, this, []);
            JAMScript.call(this.recordSourceMappingStart, this, [varDecl$$4]);
            var v9785 = varDecl$$4.id;
            JAMScript.call(this.recordSourceMappingStart, this, [v9785]);
            var v17268 = className$$1 + ".prototype.";
            var v21981 = varDecl$$4.id;
            var v17269 = v21981.actualText;
            var v9786 = v17268 + v17269;
            JAMScript.call(this.writeToOutput, this, [v9786]);
            var v9787 = varDecl$$4.id;
            JAMScript.call(this.recordSourceMappingEnd, this, [v9787]);
            JAMScript.call(this.writeToOutput, this, [" = "]);
            var v9788 = varDecl$$4.init;
            var v17270 = TypeScript$$12.TokenID;
            var v9789 = v17270.Equals;
            JAMScript.call(this.emitJavascript, this, [v9788, v9789, false]);
            JAMScript.call(this.recordSourceMappingEnd, this, [varDecl$$4]);
            JAMScript.call(this.writeLineToOutput, this, [";"])
          }
        }
      }
      return
    }
    function v481(funcDecl$$3, className, isProto) {
      var v21982 = funcDecl$$3.accessorSymbol;
      var v17271 = v21982.hasBeenEmitted;
      var v9802 = !v17271;
      if(v9802) {
        var accessorSymbol = funcDecl$$3.accessorSymbol;
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.recordSourceMappingStart, this, [funcDecl$$3]);
        var v25520 = "Object.defineProperty(" + className;
        var v26179;
        if(isProto) {
          v26179 = '.prototype, "'
        }else {
          v26179 = ', "'
        }
        var v25521 = v26179;
        var v24385 = v25520 + v25521;
        var v25522 = funcDecl$$3.name;
        var v24386 = v25522.actualText;
        var v21983 = v24385 + v24386;
        var v17272 = v21983 + '"';
        var v9793 = v17272 + ", {";
        JAMScript.call(this.writeLineToOutput, this, [v9793]);
        var v9794 = this.indenter;
        JAMScript.call(v9794.increaseIndent, v9794, []);
        var v9797 = accessorSymbol.getter;
        if(v9797) {
          var v9795 = accessorSymbol.getter;
          var getter = v9795.declAST;
          JAMScript.call(this.emitIndent, this, []);
          JAMScript.call(this.recordSourceMappingStart, this, [getter]);
          JAMScript.call(this.writeToOutput, this, ["get: "]);
          var v9796 = JAMScript.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [getter]);
          JAMScript.call(this.emitInnerFunction, this, [getter, false, isProto, null, v9796, null]);
          JAMScript.call(this.writeLineToOutput, this, [","])
        }
        var v9800 = accessorSymbol.setter;
        if(v9800) {
          var v9798 = accessorSymbol.setter;
          var setter = v9798.declAST;
          JAMScript.call(this.emitIndent, this, []);
          JAMScript.call(this.recordSourceMappingStart, this, [setter]);
          JAMScript.call(this.writeToOutput, this, ["set: "]);
          var v9799 = JAMScript.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [setter]);
          JAMScript.call(this.emitInnerFunction, this, [setter, false, isProto, null, v9799, null]);
          JAMScript.call(this.writeLineToOutput, this, [","])
        }
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.writeLineToOutput, this, ["enumerable: true,"]);
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.writeLineToOutput, this, ["configurable: true"]);
        var v9801 = this.indenter;
        JAMScript.call(v9801.decreaseIndent, v9801, []);
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.writeLineToOutput, this, ["});"]);
        JAMScript.call(this.recordSourceMappingEnd, this, [funcDecl$$3]);
        accessorSymbol.hasBeenEmitted = true
      }
      return
    }
    function v480(ast$$19, tokenId$$41, startLine$$40) {
      var v9803 = ast$$19 == null;
      if(v9803) {
        return
      }
      var v17273 = startLine$$40;
      if(v17273) {
        var v25523 = this.indenter;
        var v24387 = v25523.indentAmt;
        var v21984 = v24387 > 0;
        if(v21984) {
          var v25524 = ast$$19.nodeType;
          var v26180 = TypeScript$$12.NodeType;
          var v25525 = v26180.List;
          var v24388 = v25524 != v25525;
          if(v24388) {
            var v25526 = ast$$19.nodeType;
            var v26181 = TypeScript$$12.NodeType;
            var v25527 = v26181.Block;
            v24388 = v25526 != v25527
          }
          v21984 = v24388
        }
        v17273 = v21984
      }
      var v9805 = v17273;
      if(v9805) {
        var v21985 = ast$$19.nodeType;
        var v24389 = TypeScript$$12.NodeType;
        var v21986 = v24389.InterfaceDeclaration;
        var v17274 = v21985 != v21986;
        if(v17274) {
          var v26563 = ast$$19.nodeType;
          var v26719 = TypeScript$$12.NodeType;
          var v26564 = v26719.VarDecl;
          var v26182 = v26563 == v26564;
          if(v26182) {
            var v26803 = ast$$19.varFlags;
            var v26860 = TypeScript$$12.VarFlags;
            var v26804 = v26860.Ambient;
            var v26720 = v26803 & v26804;
            var v26805 = TypeScript$$12.VarFlags;
            var v26721 = v26805.Ambient;
            var v26565 = v26720 == v26721;
            if(v26565) {
              var v26722 = ast$$19.init;
              v26565 = v26722 == null
            }
            v26182 = v26565
          }
          var v25528 = v26182;
          var v24390 = !v25528;
          if(v24390) {
            var v25529 = JAMScript.call(this.varListCount, this, []);
            v24390 = v25529 >= 0
          }
          var v21987 = v24390;
          if(v21987) {
            var v25530 = ast$$19.nodeType;
            var v26183 = TypeScript$$12.NodeType;
            var v25531 = v26183.EndCode;
            var v24391 = v25530 != v25531;
            if(v24391) {
              var v26184 = ast$$19.nodeType;
              var v26566 = TypeScript$$12.NodeType;
              var v26185 = v26566.FuncDecl;
              var v25532 = v26184 != v26185;
              var v26188 = !v25532;
              if(v26188) {
                var v26567 = this.emitState;
                var v26186 = v26567.container;
                var v26187 = EmitContainer.Constructor;
                v25532 = v26186 != v26187
              }
              v24391 = v25532
            }
            v21987 = v24391
          }
          v17274 = v21987
        }
        var v9804 = v17274;
        if(v9804) {
          JAMScript.call(this.emitIndent, this, [])
        }
      }
      JAMScript.call(ast$$19.emit, ast$$19, [this, tokenId$$41, startLine$$40]);
      var v24392 = TypeScript$$12.TokenID;
      var v21988 = v24392.Semicolon;
      var v17275 = tokenId$$41 == v21988;
      if(v17275) {
        var v21989 = ast$$19.nodeType;
        var v24393 = TypeScript$$12.NodeType;
        var v21990 = v24393.GeneralNode;
        v17275 = v21989 < v21990
      }
      var v9806 = v17275;
      if(v9806) {
        JAMScript.call(this.writeToOutput, this, [";"])
      }
      return
    }
    function v479(ast$$18, delimiter, tokenId$$40, startLine$$39, onlyStatics, emitClassPropertiesAfterSuperCall$$1, emitPrologue, requiresExtendsBlock) {
      var v17276 = typeof emitClassPropertiesAfterSuperCall$$1;
      var v9807 = v17276 === "undefined";
      if(v9807) {
        emitClassPropertiesAfterSuperCall$$1 = false
      }
      var v17277 = typeof emitPrologue;
      var v9808 = v17277 === "undefined";
      if(v9808) {
        emitPrologue = false
      }
      var v9838 = ast$$18 == null;
      if(v9838) {
      }else {
        var v17278 = ast$$18.nodeType;
        var v21991 = TypeScript$$12.NodeType;
        var v17279 = v21991.List;
        var v9837 = v17278 != v17279;
        if(v9837) {
          JAMScript.call(this.emitPrologue, this, [emitPrologue]);
          JAMScript.call(this.emitJavascript, this, [ast$$18, tokenId$$40, startLine$$39])
        }else {
          var list$$1 = ast$$18;
          var v21992 = list$$1.members;
          var v17280 = v21992.length;
          var v9809 = v17280 == 0;
          if(v9809) {
            return
          }
          JAMScript.call(this.emitParensAndCommentsInPlace, this, [ast$$18, true]);
          var v9810 = list$$1.members;
          var len$$11 = v9810.length;
          var i$$45 = 0;
          var v9836 = i$$45 < len$$11;
          for(;v9836;) {
            if(emitPrologue) {
              var v17281 = i$$45 == 1;
              var v21994 = !v17281;
              if(v21994) {
                var v24394 = list$$1.flags;
                var v25533 = TypeScript$$12.ASTFlags;
                var v24395 = v25533.StrictMode;
                var v21993 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24394, v24395]);
                v17281 = !v21993
              }
              var v9811 = v17281;
              if(v9811) {
                JAMScript.call(this.emitPrologue, this, [requiresExtendsBlock]);
                emitPrologue = false
              }
            }
            var v17282 = i$$45 == 1;
            if(v17282) {
              v17282 = emitClassPropertiesAfterSuperCall$$1
            }
            var v9830 = v17282;
            if(v9830) {
              var v9812 = this.thisClassNode;
              var constructorDecl = v9812.constructorDecl;
              var v17283 = constructorDecl;
              if(v17283) {
                v17283 = constructorDecl.arguments
              }
              var v9823 = v17283;
              if(v9823) {
                var v17284 = constructorDecl.arguments;
                var v9813 = v17284.members;
                var argsLen$$1 = v9813.length;
                var iArg = 0;
                var v9822 = iArg < argsLen$$1;
                for(;v9822;) {
                  var v17285 = constructorDecl.arguments;
                  var v9814 = v17285.members;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var arg$$7 = v9814[iArg]
                  }
                  var v21995 = arg$$7.varFlags;
                  var v24396 = TypeScript$$12.VarFlags;
                  var v21996 = v24396.Property;
                  var v17286 = v21995 & v21996;
                  var v21997 = TypeScript$$12.VarFlags;
                  var v17287 = v21997.None;
                  var v9821 = v17286 != v17287;
                  if(v9821) {
                    JAMScript.call(this.emitIndent, this, []);
                    JAMScript.call(this.recordSourceMappingStart, this, [arg$$7]);
                    var v9815 = arg$$7.id;
                    JAMScript.call(this.recordSourceMappingStart, this, [v9815]);
                    var v21998 = arg$$7.id;
                    var v17288 = v21998.actualText;
                    var v9816 = "this." + v17288;
                    JAMScript.call(this.writeToOutput, this, [v9816]);
                    var v9817 = arg$$7.id;
                    JAMScript.call(this.recordSourceMappingEnd, this, [v9817]);
                    JAMScript.call(this.writeToOutput, this, [" = "]);
                    var v9818 = arg$$7.id;
                    JAMScript.call(this.recordSourceMappingStart, this, [v9818]);
                    var v17289 = arg$$7.id;
                    var v9819 = v17289.actualText;
                    JAMScript.call(this.writeToOutput, this, [v9819]);
                    var v9820 = arg$$7.id;
                    JAMScript.call(this.recordSourceMappingEnd, this, [v9820]);
                    JAMScript.call(this.writeLineToOutput, this, [";"]);
                    JAMScript.call(this.recordSourceMappingEnd, this, [arg$$7])
                  }
                  iArg = iArg + 1;
                  v9822 = iArg < argsLen$$1
                }
              }
              var v21999 = this.thisClassNode;
              var v17290 = v21999.members;
              var v9824 = v17290.members;
              var nProps$$1 = v9824.length;
              var iMember = 0;
              var v9829 = iMember < nProps$$1;
              for(;v9829;) {
                var v26189 = this.thisClassNode;
                var v25534 = v26189.members;
                var v24397 = v25534.members;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v22000 = v24397[iMember]
                }
                var v17291 = v22000.nodeType;
                var v22001 = TypeScript$$12.NodeType;
                var v17292 = v22001.VarDecl;
                var v9828 = v17291 == v17292;
                if(v9828) {
                  var v22002 = this.thisClassNode;
                  var v17293 = v22002.members;
                  var v9825 = v17293.members;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var varDecl$$3 = v9825[iMember]
                  }
                  var v24398 = varDecl$$3.varFlags;
                  var v25535 = TypeScript$$12.VarFlags;
                  var v24399 = v25535.Static;
                  var v22003 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24398, v24399]);
                  var v17294 = !v22003;
                  if(v17294) {
                    v17294 = varDecl$$3.init
                  }
                  var v9827 = v17294;
                  if(v9827) {
                    JAMScript.call(this.emitIndent, this, []);
                    var v17295 = TypeScript$$12.TokenID;
                    var v9826 = v17295.Tilde;
                    JAMScript.call(this.emitJavascriptVarDecl, this, [varDecl$$3, v9826]);
                    JAMScript.call(this.writeLineToOutput, this, [""])
                  }
                }
                iMember = iMember + 1;
                v9829 = iMember < nProps$$1
              }
            }
            var v9831 = list$$1.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var emitNode = v9831[i$$45]
            }
            var v22004 = emitNode.nodeType;
            var v24400 = TypeScript$$12.NodeType;
            var v22005 = v24400.FuncDecl;
            var v17296 = v22004 == v22005;
            if(v17296) {
              var v22006 = emitNode.fncFlags;
              var v24401 = TypeScript$$12.FncFlags;
              var v22007 = v24401.Static;
              v17296 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22006, v22007])
            }
            var v9832 = v17296;
            var v17298 = !v9832;
            if(v17298) {
              var v22008 = emitNode.nodeType;
              var v24402 = TypeScript$$12.NodeType;
              var v22009 = v24402.VarDecl;
              var v17297 = v22008 == v22009;
              if(v17297) {
                var v22010 = emitNode.varFlags;
                var v24403 = TypeScript$$12.VarFlags;
                var v22011 = v24403.Static;
                v17297 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22010, v22011])
              }
              v9832 = v17297
            }
            var isStaticDecl = v9832;
            var v17299;
            if(onlyStatics) {
              v17299 = !isStaticDecl
            }else {
              v17299 = isStaticDecl
            }
            var v9833 = v17299;
            if(v9833) {
              i$$45 = i$$45 + 1;
              v9836 = i$$45 < len$$11;
              continue
            }
            JAMScript.call(this.emitJavascript, this, [emitNode, tokenId$$40, startLine$$39]);
            var v17300 = delimiter;
            if(v17300) {
              var v22012 = len$$11 - 1;
              v17300 = i$$45 < v22012
            }
            var v9835 = v17300;
            if(v9835) {
              if(startLine$$39) {
                JAMScript.call(this.writeLineToOutput, this, [delimiter])
              }else {
                JAMScript.call(this.writeToOutput, this, [delimiter])
              }
            }else {
              var v17301 = startLine$$39;
              if(v17301) {
                var v24404 = emitNode.nodeType;
                var v25536 = TypeScript$$12.NodeType;
                var v24405 = v25536.ModuleDeclaration;
                var v22013 = v24404 != v24405;
                if(v22013) {
                  var v25537 = emitNode.nodeType;
                  var v26190 = TypeScript$$12.NodeType;
                  var v25538 = v26190.InterfaceDeclaration;
                  var v24406 = v25537 != v25538;
                  if(v24406) {
                    var v26806 = emitNode.nodeType;
                    var v26861 = TypeScript$$12.NodeType;
                    var v26807 = v26861.VarDecl;
                    var v26723 = v26806 == v26807;
                    if(v26723) {
                      var v26887 = emitNode.varFlags;
                      var v26904 = TypeScript$$12.VarFlags;
                      var v26888 = v26904.Ambient;
                      var v26862 = v26887 & v26888;
                      var v26889 = TypeScript$$12.VarFlags;
                      var v26863 = v26889.Ambient;
                      var v26808 = v26862 == v26863;
                      if(v26808) {
                        var v26864 = emitNode.init;
                        v26808 = v26864 == null
                      }
                      v26723 = v26808
                    }
                    var v26568 = v26723;
                    var v26191 = !v26568;
                    if(v26191) {
                      var v26569 = JAMScript.call(this.varListCount, this, []);
                      v26191 = v26569 >= 0
                    }
                    var v25539 = v26191;
                    if(v25539) {
                      var v26724 = emitNode.nodeType;
                      var v26809 = TypeScript$$12.NodeType;
                      var v26725 = v26809.Block;
                      var v26570 = v26724 != v26725;
                      var v26726 = !v26570;
                      if(v26726) {
                        v26570 = emitNode.isStatementBlock
                      }
                      var v26192 = v26570;
                      if(v26192) {
                        var v26727 = emitNode.nodeType;
                        var v26810 = TypeScript$$12.NodeType;
                        var v26728 = v26810.EndCode;
                        var v26571 = v26727 != v26728;
                        if(v26571) {
                          var v26729 = emitNode.nodeType;
                          var v26811 = TypeScript$$12.NodeType;
                          var v26730 = v26811.FuncDecl;
                          v26571 = v26729 != v26730
                        }
                        v26192 = v26571
                      }
                      v25539 = v26192
                    }
                    v24406 = v25539
                  }
                  v22013 = v24406
                }
                v17301 = v22013
              }
              var v9834 = v17301;
              if(v9834) {
                JAMScript.call(this.writeLineToOutput, this, [""])
              }
            }
            i$$45 = i$$45 + 1;
            v9836 = i$$45 < len$$11
          }
          JAMScript.call(this.emitParensAndCommentsInPlace, this, [ast$$18, false])
        }
      }
      return
    }
    function v478() {
      var v17302 = this.sourceMapper;
      var v9841 = v17302 != null;
      if(v9841) {
        var v9839 = TypeScript$$12.SourceMapper;
        var v9840 = this.allSourceMappers;
        JAMScript.call(v9839.EmitSourceMapping, v9839, [v9840])
      }
      try {
        var v9842 = this.outfile;
        JAMScript.call(v9842.Close, v9842, [])
      }catch(ex$$1) {
        var v9843 = this.errorReporter;
        var v9844 = ex$$1.message;
        JAMScript.call(v9843.emitterError, v9843, [null, v9844])
      }
      return
    }
    function v477(ast$$17) {
      var v17303 = this.sourceMapper;
      if(v17303) {
        v17303 = JAMScript.call(TypeScript$$12.isValidAstNode, TypeScript$$12, [ast$$17])
      }
      var v9851 = v17303;
      if(v9851) {
        var v17304 = this.sourceMapper;
        var v9845 = v17304.currentMappings;
        JAMScript.call(v9845.pop, v9845, []);
        var v17305 = this.sourceMapper;
        var v9846 = v17305.currentMappings;
        var v24407 = this.sourceMapper;
        var v22014 = v24407.currentMappings;
        var v17306 = v22014.length;
        var v9847 = v17306 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var siblings$$1 = v9846[v9847]
        }
        var v17307 = siblings$$1.length;
        var v9848 = v17307 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var sourceMapping$$2 = siblings$$1[v9848]
        }
        var v9849 = sourceMapping$$2.end;
        var v17308 = this.emitState;
        v9849.emittedColumn = v17308.column;
        var v9850 = sourceMapping$$2.end;
        var v17309 = this.emitState;
        v9850.emittedLine = v17309.line
      }
      return
    }
    function v476(ast$$16) {
      var v17310 = this.sourceMapper;
      if(v17310) {
        v17310 = JAMScript.call(TypeScript$$12.isValidAstNode, TypeScript$$12, [ast$$16])
      }
      var v9870 = v17310;
      if(v9870) {
        var lineCol$$1 = {line:-1, col:-1};
        var v9852 = TypeScript$$12.SourceMapping;
        var sourceMapping$$1 = JAMScript.new(v9852, []);
        var v9853 = sourceMapping$$1.start;
        var v17311 = this.emitState;
        v9853.emittedColumn = v17311.column;
        var v9854 = sourceMapping$$1.start;
        var v17312 = this.emitState;
        v9854.emittedLine = v17312.line;
        var v9855 = ast$$16.minChar;
        var v22015 = this.checker;
        var v17313 = v22015.locationInfo;
        var v9856 = v17313.lineMap;
        JAMScript.call(TypeScript$$12.getSourceLineColFromMap, TypeScript$$12, [lineCol$$1, v9855, v9856]);
        var v9857 = sourceMapping$$1.start;
        v9857.sourceColumn = lineCol$$1.col;
        var v9858 = sourceMapping$$1.start;
        v9858.sourceLine = lineCol$$1.line;
        var v9859 = ast$$16.limChar;
        var v22016 = this.checker;
        var v17314 = v22016.locationInfo;
        var v9860 = v17314.lineMap;
        JAMScript.call(TypeScript$$12.getSourceLineColFromMap, TypeScript$$12, [lineCol$$1, v9859, v9860]);
        var v9861 = sourceMapping$$1.end;
        v9861.sourceColumn = lineCol$$1.col;
        var v9862 = sourceMapping$$1.end;
        v9862.sourceLine = lineCol$$1.line;
        var v24408 = this.sourceMapper;
        var v22017 = v24408.currentNameIndex;
        var v17315 = v22017.length;
        var v9865 = v17315 > 0;
        if(v9865) {
          var v17316 = this.sourceMapper;
          var v9863 = v17316.currentNameIndex;
          var v24409 = this.sourceMapper;
          var v22018 = v24409.currentNameIndex;
          var v17317 = v22018.length;
          var v9864 = v17317 - 1;
          sourceMapping$$1.nameIndex = v9863[v9864]
        }
        var v17318 = this.sourceMapper;
        var v9866 = v17318.currentMappings;
        var v24410 = this.sourceMapper;
        var v22019 = v24410.currentMappings;
        var v17319 = v22019.length;
        var v9867 = v17319 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var siblings = v9866[v9867]
        }
        JAMScript.call(siblings.push, siblings, [sourceMapping$$1]);
        var v17320 = this.sourceMapper;
        var v9868 = v17320.currentMappings;
        var v9869 = sourceMapping$$1.childMappings;
        JAMScript.call(v9868.push, v9868, [v9869])
      }
      return
    }
    function v475() {
      var v9872 = this.sourceMapper;
      if(v9872) {
        var v17321 = this.sourceMapper;
        var v9871 = v17321.currentNameIndex;
        JAMScript.call(v9871.pop, v9871, [])
      }
      return
    }
    function v474(name$$41) {
      var v9879 = this.sourceMapper;
      if(v9879) {
        var finalName = name$$41;
        var v9875 = !name$$41;
        if(v9875) {
          finalName = ""
        }else {
          var v24411 = this.sourceMapper;
          var v22020 = v24411.currentNameIndex;
          var v17322 = v22020.length;
          var v9874 = v17322 > 0;
          if(v9874) {
            var v24412 = this.sourceMapper;
            var v22021 = v24412.names;
            var v26193 = this.sourceMapper;
            var v25540 = v26193.currentNameIndex;
            var v24413 = v25540.length;
            var v22022 = v24413 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v17323 = v22021[v22022]
            }
            var v9873 = v17323 + ".";
            finalName = v9873 + name$$41
          }
        }
        var v17324 = this.sourceMapper;
        var v9876 = v17324.names;
        JAMScript.call(v9876.push, v9876, [finalName]);
        var v17325 = this.sourceMapper;
        var v9877 = v17325.currentNameIndex;
        var v24414 = this.sourceMapper;
        var v22023 = v24414.names;
        var v17326 = v22023.length;
        var v9878 = v17326 - 1;
        JAMScript.call(v9877.push, v9877, [v9878])
      }
      return
    }
    function v473(stmts$$2, emitClassPropertiesAfterSuperCall) {
      var v17327 = typeof emitClassPropertiesAfterSuperCall;
      var v9880 = v17327 === "undefined";
      if(v9880) {
        emitClassPropertiesAfterSuperCall = false
      }
      var v17328 = stmts$$2.nodeType;
      var v22024 = TypeScript$$12.NodeType;
      var v17329 = v22024.Block;
      var v9888 = v17328 != v17329;
      if(v9888) {
        var v17330 = stmts$$2.nodeType;
        var v22025 = TypeScript$$12.NodeType;
        var v17331 = v22025.List;
        var v9886 = v17330 == v17331;
        if(v9886) {
          var stmtList = stmts$$2;
          var v24415 = stmtList.members;
          var v22026 = v24415.length;
          var v17332 = v22026 == 2;
          if(v17332) {
            var v26194 = stmtList.members;
            var v25541 = v26194[0];
            var v24416 = v25541.nodeType;
            var v25542 = TypeScript$$12.NodeType;
            var v24417 = v25542.Block;
            var v22027 = v24416 == v24417;
            if(v22027) {
              var v26195 = stmtList.members;
              var v25543 = v26195[1];
              var v24418 = v25543.nodeType;
              var v25544 = TypeScript$$12.NodeType;
              var v24419 = v25544.EndCode;
              v22027 = v24418 == v24419
            }
            v17332 = v22027
          }
          var v9884 = v17332;
          if(v9884) {
            var v17333 = stmtList.members;
            var v9881 = v17333[0];
            var v17334 = TypeScript$$12.TokenID;
            var v9882 = v17334.Semicolon;
            JAMScript.call(this.emitJavascript, this, [v9881, v9882, true]);
            JAMScript.call(this.writeLineToOutput, this, [""])
          }else {
            var v17335 = TypeScript$$12.TokenID;
            var v9883 = v17335.Semicolon;
            JAMScript.call(this.emitJavascriptList, this, [stmts$$2, null, v9883, true, false, emitClassPropertiesAfterSuperCall])
          }
        }else {
          var v17336 = TypeScript$$12.TokenID;
          var v9885 = v17336.Semicolon;
          JAMScript.call(this.emitJavascript, this, [stmts$$2, v9885, true])
        }
      }else {
        var v17337 = TypeScript$$12.TokenID;
        var v9887 = v17337.Semicolon;
        JAMScript.call(this.emitJavascript, this, [stmts$$2, v9887, true])
      }
      return
    }
    function v472(stmts$$1, emitEmptyBod) {
      if(stmts$$1) {
        var v17338 = stmts$$1.nodeType;
        var v22028 = TypeScript$$12.NodeType;
        var v17339 = v22028.Block;
        var v9898 = v17338 != v17339;
        if(v9898) {
          var v9889 = stmts$$1;
          if(v9889) {
            var v22029 = stmts$$1.nodeType;
            var v24420 = TypeScript$$12.NodeType;
            var v22030 = v24420.List;
            var v17340 = v22029 != v22030;
            var v22032 = !v17340;
            if(v22032) {
              var v24421 = stmts$$1.members;
              var v22031 = v24421.length;
              v17340 = v22031 > 0
            }
            v9889 = v17340
          }
          var hasContents = v9889;
          var v9896 = emitEmptyBod || hasContents;
          if(v9896) {
            var v17341 = stmts$$1.nodeType;
            var v22033 = TypeScript$$12.NodeType;
            var v17342 = v22033.Block;
            var v9890 = v17341 == v17342;
            var v17344 = !v9890;
            if(v17344) {
              var v22034 = stmts$$1.nodeType;
              var v24422 = TypeScript$$12.NodeType;
              var v22035 = v24422.List;
              var v17343 = v22034 == v22035;
              if(v17343) {
                var v25545 = stmts$$1.members;
                var v24423 = v25545.length;
                var v22036 = v24423 == 1;
                if(v22036) {
                  var v26196 = stmts$$1.members;
                  var v25546 = v26196[0];
                  var v24424 = v25546.nodeType;
                  var v25547 = TypeScript$$12.NodeType;
                  var v24425 = v25547.Block;
                  v22036 = v24424 == v24425
                }
                v17343 = v22036
              }
              v9890 = v17343
            }
            var hasOnlyBlockStatement = v9890;
            JAMScript.call(this.recordSourceMappingStart, this, [stmts$$1]);
            var v9892 = !hasOnlyBlockStatement;
            if(v9892) {
              JAMScript.call(this.writeLineToOutput, this, [" {"]);
              var v9891 = this.indenter;
              JAMScript.call(v9891.increaseIndent, v9891, [])
            }
            var v17345 = TypeScript$$12.TokenID;
            var v9893 = v17345.Semicolon;
            JAMScript.call(this.emitJavascriptList, this, [stmts$$1, null, v9893, true, false, false]);
            var v9895 = !hasOnlyBlockStatement;
            if(v9895) {
              JAMScript.call(this.writeLineToOutput, this, [""]);
              var v9894 = this.indenter;
              JAMScript.call(v9894.decreaseIndent, v9894, []);
              JAMScript.call(this.emitIndent, this, []);
              JAMScript.call(this.writeToOutput, this, ["}"])
            }
            JAMScript.call(this.recordSourceMappingEnd, this, [stmts$$1])
          }
        }else {
          var v17346 = TypeScript$$12.TokenID;
          var v9897 = v17346.Semicolon;
          JAMScript.call(this.emitJavascript, this, [stmts$$1, v9897, true])
        }
      }else {
        if(emitEmptyBod) {
          JAMScript.call(this.writeToOutput, this, ["{ }"])
        }
      }
      return
    }
    function v471(name$$40, addThis) {
      var sym$$4 = name$$40.sym;
      JAMScript.call(this.emitParensAndCommentsInPlace, this, [name$$40, true]);
      JAMScript.call(this.recordSourceMappingStart, this, [name$$40]);
      var v17347 = JAMScript.call(name$$40.isMissing, name$$40, []);
      var v9924 = !v17347;
      if(v9924) {
        var v17348 = addThis;
        if(v17348) {
          var v25548 = this.emitState;
          var v24426 = v25548.container;
          var v24427 = EmitContainer.Args;
          var v22037 = v24426 != v24427;
          if(v22037) {
            v22037 = sym$$4
          }
          v17348 = v22037
        }
        var v9915 = v17348;
        if(v9915) {
          var v17349 = sym$$4.container;
          if(v17349) {
            var v24428 = sym$$4.container;
            var v22038 = v24428.name;
            var v22039 = TypeScript$$12.globalId;
            v17349 = v22038 != v22039
          }
          var v9914 = v17349;
          if(v9914) {
            var v22040 = sym$$4.flags;
            var v24429 = TypeScript$$12.SymbolFlags;
            var v22041 = v24429.Static;
            var v17350 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22040, v22041]);
            if(v17350) {
              var v22042 = sym$$4.flags;
              var v24430 = TypeScript$$12.SymbolFlags;
              var v22043 = v24430.Property;
              v17350 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22042, v22043])
            }
            var v9912 = v17350;
            if(v9912) {
              var v17351 = sym$$4.declModule;
              if(v17351) {
                var v24431 = sym$$4.declModule;
                var v22044 = v24431.modFlags;
                var v24432 = TypeScript$$12.ModuleFlags;
                var v22045 = v24432.IsDynamic;
                v17351 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22044, v22045])
              }
              var v9900 = v17351;
              if(v9900) {
                JAMScript.call(this.writeToOutput, this, ["exports."])
              }else {
                var v22046 = sym$$4.container;
                var v17352 = v22046.name;
                var v9899 = v17352 + ".";
                JAMScript.call(this.writeToOutput, this, [v9899])
              }
            }else {
              var v17353 = JAMScript.call(sym$$4.kind, sym$$4, []);
              var v22047 = TypeScript$$12.SymbolKind;
              var v17354 = v22047.Field;
              var v9911 = v17353 == v17354;
              if(v9911) {
                var fieldSym = sym$$4;
                var v17355 = fieldSym.flags;
                var v22048 = TypeScript$$12.SymbolFlags;
                var v17356 = v22048.ModuleMember;
                var v9905 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17355, v17356]);
                if(v9905) {
                  var v22049 = sym$$4.container;
                  var v24433 = this.checker;
                  var v22050 = v24433.gloMod;
                  var v17357 = v22049 != v22050;
                  if(v17357) {
                    var v24434 = sym$$4.flags;
                    var v25549 = TypeScript$$12.SymbolFlags;
                    var v24435 = v25549.Property;
                    var v22051 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24434, v24435]);
                    var v24438 = !v22051;
                    if(v24438) {
                      var v24436 = sym$$4.flags;
                      var v25550 = TypeScript$$12.SymbolFlags;
                      var v24437 = v25550.Exported;
                      v22051 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24436, v24437])
                    }
                    v17357 = v22051
                  }
                  var v9903 = v17357;
                  if(v9903) {
                    var v22052 = sym$$4.declModule;
                    var v17358 = v22052.modFlags;
                    var v22053 = TypeScript$$12.ModuleFlags;
                    var v17359 = v22053.IsDynamic;
                    var v9902 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17358, v17359]);
                    if(v9902) {
                      JAMScript.call(this.writeToOutput, this, ["exports."])
                    }else {
                      var v22054 = sym$$4.container;
                      var v17360 = v22054.name;
                      var v9901 = v17360 + ".";
                      JAMScript.call(this.writeToOutput, this, [v9901])
                    }
                  }
                }else {
                  var v9904 = JAMScript.call(sym$$4.isInstanceProperty, sym$$4, []);
                  if(v9904) {
                    JAMScript.call(this.emitThis, this, []);
                    JAMScript.call(this.writeToOutput, this, ["."])
                  }
                }
              }else {
                var v17361 = JAMScript.call(sym$$4.kind, sym$$4, []);
                var v22055 = TypeScript$$12.SymbolKind;
                var v17362 = v22055.Type;
                var v9910 = v17361 == v17362;
                if(v9910) {
                  var v9909 = JAMScript.call(sym$$4.isInstanceProperty, sym$$4, []);
                  if(v9909) {
                    var typeSym = sym$$4;
                    var type$$28 = typeSym.type;
                    var v17363 = type$$28.call;
                    if(v17363) {
                      var v24439 = sym$$4.flags;
                      var v25551 = TypeScript$$12.SymbolFlags;
                      var v24440 = v25551.ModuleMember;
                      var v22056 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24439, v24440]);
                      v17363 = !v22056
                    }
                    var v9906 = v17363;
                    if(v9906) {
                      JAMScript.call(this.emitThis, this, []);
                      JAMScript.call(this.writeToOutput, this, ["."])
                    }
                  }else {
                    var v22057 = sym$$4.unitIndex;
                    var v25552 = this.checker;
                    var v24441 = v25552.locationInfo;
                    var v22058 = v24441.unitIndex;
                    var v17364 = v22057 != v22058;
                    var v22060 = !v17364;
                    if(v22060) {
                      var v24442 = sym$$4.declModule;
                      var v22059 = JAMScript.call(this.declEnclosed, this, [v24442]);
                      v17364 = !v22059
                    }
                    var v9908 = v17364;
                    if(v9908) {
                      var v22061 = sym$$4.container;
                      var v17365 = v22061.name;
                      var v9907 = v17365 + ".";
                      JAMScript.call(this.writeToOutput, this, [v9907])
                    }
                  }
                }
              }
            }
          }else {
            var v22062 = sym$$4.container;
            var v24443 = this.checker;
            var v22063 = v24443.gloMod;
            var v17366 = v22062 == v22063;
            if(v17366) {
              var v24444 = sym$$4.flags;
              var v25553 = TypeScript$$12.SymbolFlags;
              var v24445 = v25553.Exported;
              var v22064 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24444, v24445]);
              if(v22064) {
                var v26197 = sym$$4.flags;
                var v26572 = TypeScript$$12.SymbolFlags;
                var v26198 = v26572.Ambient;
                var v25554 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v26197, v26198]);
                var v24446 = !v25554;
                if(v24446) {
                  var v26731 = JAMScript.call(sym$$4.isType, sym$$4, []);
                  var v26812 = !v26731;
                  if(v26812) {
                    v26731 = JAMScript.call(sym$$4.isMember, sym$$4, [])
                  }
                  var v26573 = v26731;
                  if(v26573) {
                    var v26732 = sym$$4.declModule;
                    if(v26732) {
                      var v26865 = sym$$4.declModule;
                      var v26813 = v26865.modFlags;
                      var v26866 = TypeScript$$12.ModuleFlags;
                      var v26814 = v26866.Ambient;
                      v26732 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v26813, v26814])
                    }
                    v26573 = v26732
                  }
                  var v26199 = v26573;
                  var v25555 = !v26199;
                  if(v25555) {
                    var v26733 = this.emitState;
                    var v26574 = v26733.container;
                    var v26575 = EmitContainer.Prog;
                    var v26200 = v26574 == v26575;
                    if(v26200) {
                      var v26734 = sym$$4.declAST;
                      var v26576 = v26734.nodeType;
                      var v26735 = TypeScript$$12.NodeType;
                      var v26577 = v26735.FuncDecl;
                      v26200 = v26576 != v26577
                    }
                    v25555 = v26200
                  }
                  v24446 = v25555
                }
                v22064 = v24446
              }
              v17366 = v22064
            }
            var v9913 = v17366;
            if(v9913) {
              JAMScript.call(this.writeToOutput, this, ["this."])
            }
          }
        }
        var v17367 = sym$$4;
        if(v17367) {
          var v22065 = sym$$4.declAST;
          if(v22065) {
            var v26201 = sym$$4.declAST;
            var v25556 = v26201.nodeType;
            var v26202 = TypeScript$$12.NodeType;
            var v25557 = v26202.ModuleDeclaration;
            var v24447 = v25556 == v25557;
            if(v24447) {
              var v26203 = sym$$4.declAST;
              var v25558 = v26203.modFlags;
              var v26204 = TypeScript$$12.ModuleFlags;
              var v25559 = v26204.IsDynamic;
              v24447 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v25558, v25559])
            }
            v22065 = v24447
          }
          v17367 = v22065
        }
        var v9923 = v17367;
        if(v9923) {
          var moduleDecl$$2 = sym$$4.declAST;
          var v17368 = TypeScript$$12.moduleGenTarget;
          var v22066 = TypeScript$$12.ModuleGenTarget;
          var v17369 = v22066.Asynchronous;
          var v9921 = v17368 == v17369;
          if(v9921) {
            var v22067 = this.modAliasId;
            var v17370 = "__" + v22067;
            var v9916 = v17370 + "__;";
            JAMScript.call(this.writeLineToOutput, this, [v9916])
          }else {
            var modPath$$1 = name$$40.actualText;
            var v22068 = moduleDecl$$2.mod;
            var v17371 = v22068.symbol;
            var v9917 = v17371.declAST;
            if(v9917) {
              var v25560 = moduleDecl$$2.mod;
              var v24448 = v25560.symbol;
              var v22069 = v24448.declAST;
              var v17372 = v22069.modFlags;
              var v22070 = TypeScript$$12.ModuleFlags;
              var v17373 = v22070.Ambient;
              v9917 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17372, v17373])
            }
            var isAmbient = v9917;
            var v9918;
            if(isAmbient) {
              v9918 = modPath$$1
            }else {
              var v17374;
              var v22071 = this.firstModAlias;
              if(v22071) {
                v17374 = this.firstModAlias
              }else {
                v17374 = JAMScript.call(TypeScript$$12.quoteBaseName, TypeScript$$12, [modPath$$1])
              }
              v9918 = v17374
            }
            modPath$$1 = v9918;
            var v9919;
            if(isAmbient) {
              v9919 = modPath$$1
            }else {
              var v17375;
              var v25561 = JAMScript.call(TypeScript$$12.stripQuotes, TypeScript$$12, [modPath$$1]);
              var v24449 = JAMScript.call(TypeScript$$12.isRelative, TypeScript$$12, [v25561]);
              var v22073 = !v24449;
              if(v22073) {
                var v24450 = JAMScript.call(TypeScript$$12.stripQuotes, TypeScript$$12, [modPath$$1]);
                var v22072 = "./" + v24450;
                v17375 = JAMScript.call(TypeScript$$12.quoteStr, TypeScript$$12, [v22072])
              }else {
                v17375 = modPath$$1
              }
              v9919 = v17375
            }
            modPath$$1 = v9919;
            var v17376 = "require(" + modPath$$1;
            var v9920 = v17376 + ")";
            JAMScript.call(this.writeToOutput, this, [v9920])
          }
        }else {
          var v9922 = name$$40.actualText;
          JAMScript.call(this.writeToOutput, this, [v9922])
        }
      }
      JAMScript.call(this.recordSourceMappingEnd, this, [name$$40]);
      JAMScript.call(this.emitParensAndCommentsInPlace, this, [name$$40, false]);
      return
    }
    function v470(moduleDecl$$1) {
      var v9925 = moduleDecl$$1 == null;
      if(v9925) {
        return true
      }
      var i$$44 = 0;
      var v9926 = this.moduleDeclList;
      var len$$10 = v9926.length;
      var v9928 = i$$44 < len$$10;
      for(;v9928;) {
        var v22074 = this.moduleDeclList;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v17377 = v22074[i$$44]
        }
        var v9927 = v17377 == moduleDecl$$1;
        if(v9927) {
          return true
        }
        i$$44 = i$$44 + 1;
        v9928 = i$$44 < len$$10
      }
      return false
    }
    function v469(varDecl$$2, tokenId$$39) {
      var v22075 = varDecl$$2.varFlags;
      var v24451 = TypeScript$$12.VarFlags;
      var v22076 = v24451.Ambient;
      var v17378 = v22075 & v22076;
      var v22077 = TypeScript$$12.VarFlags;
      var v17379 = v22077.Ambient;
      var v9954 = v17378 == v17379;
      if(v9954) {
        JAMScript.call(this.emitAmbientVarDecl, this, [varDecl$$2]);
        JAMScript.call(this.onEmitVar, this, [])
      }else {
        var sym$$3 = varDecl$$2.sym;
        var v9929 = varDecl$$2.init;
        var hasInitializer = v9929 != null;
        JAMScript.call(this.emitParensAndCommentsInPlace, this, [varDecl$$2, true]);
        JAMScript.call(this.recordSourceMappingStart, this, [varDecl$$2]);
        var v17380 = sym$$3;
        if(v17380) {
          var v22078 = JAMScript.call(sym$$3.isMember, sym$$3, []);
          if(v22078) {
            var v24452 = sym$$3.container;
            if(v24452) {
              var v26205 = sym$$3.container;
              var v25562 = JAMScript.call(v26205.kind, v26205, []);
              var v26206 = TypeScript$$12.SymbolKind;
              var v25563 = v26206.Type;
              v24452 = v25562 == v25563
            }
            v22078 = v24452
          }
          v17380 = v22078
        }
        var v9943 = v17380;
        if(v9943) {
          var v9930 = sym$$3.container;
          var type$$27 = v9930.type;
          var v17381 = JAMScript.call(type$$27.isClass, type$$27, []);
          if(v17381) {
            var v24453 = sym$$3.flags;
            var v25564 = TypeScript$$12.SymbolFlags;
            var v24454 = v25564.ModuleMember;
            var v22079 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24453, v24454]);
            v17381 = !v22079
          }
          var v9941 = v17381;
          if(v9941) {
            var v22080 = this.emitState;
            var v17382 = v22080.container;
            var v17383 = EmitContainer.Args;
            var v9933 = v17382 != v17383;
            if(v9933) {
              var v17384 = sym$$3.flags;
              var v22081 = TypeScript$$12.SymbolFlags;
              var v17385 = v22081.Static;
              var v9932 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17384, v17385]);
              if(v9932) {
                var v22082 = sym$$3.container;
                var v17386 = v22082.name;
                var v9931 = v17386 + ".";
                JAMScript.call(this.writeToOutput, this, [v9931])
              }else {
                JAMScript.call(this.writeToOutput, this, ["this."])
              }
            }
          }else {
            var v9940 = JAMScript.call(type$$27.hasImplementation, type$$27, []);
            if(v9940) {
              var v24455 = sym$$3.flags;
              var v25565 = TypeScript$$12.SymbolFlags;
              var v24456 = v25565.Exported;
              var v22083 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24455, v24456]);
              var v17387 = !v22083;
              if(v17387) {
                var v24457 = sym$$3.container;
                var v25566 = this.checker;
                var v24458 = v25566.gloMod;
                var v22084 = v24457 == v24458;
                var v24460 = !v22084;
                if(v24460) {
                  var v25567 = sym$$3.flags;
                  var v26207 = TypeScript$$12.SymbolFlags;
                  var v25568 = v26207.Property;
                  var v24459 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v25567, v25568]);
                  v22084 = !v24459
                }
                v17387 = v22084
              }
              var v9937 = v17387;
              if(v9937) {
                JAMScript.call(this.emitVarDeclVar, this, [])
              }else {
                var v17388 = varDecl$$2.varFlags;
                var v22085 = TypeScript$$12.VarFlags;
                var v17389 = v22085.LocalStatic;
                var v9936 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17388, v17389]);
                if(v9936) {
                  JAMScript.call(this.writeToOutput, this, ["."])
                }else {
                  var v22086 = this.emitState;
                  var v17390 = v22086.container;
                  var v17391 = EmitContainer.DynamicModule;
                  var v9935 = v17390 == v17391;
                  if(v9935) {
                    JAMScript.call(this.writeToOutput, this, ["exports."])
                  }else {
                    var v17392 = this.moduleName;
                    var v9934 = v17392 + ".";
                    JAMScript.call(this.writeToOutput, this, [v9934])
                  }
                }
              }
            }else {
              var v22087 = TypeScript$$12.TokenID;
              var v17393 = v22087.OpenParen;
              var v9939 = tokenId$$39 != v17393;
              if(v9939) {
                var v22088 = sym$$3.flags;
                var v24461 = TypeScript$$12.SymbolFlags;
                var v22089 = v24461.Exported;
                var v17394 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22088, v22089]);
                if(v17394) {
                  var v22090 = sym$$3.container;
                  var v24462 = this.checker;
                  var v22091 = v24462.gloMod;
                  v17394 = v22090 == v22091
                }
                var v9938 = v17394;
                if(v9938) {
                  JAMScript.call(this.writeToOutput, this, ["this."])
                }else {
                  JAMScript.call(this.emitVarDeclVar, this, [])
                }
              }
            }
          }
        }else {
          var v22092 = TypeScript$$12.TokenID;
          var v17395 = v22092.OpenParen;
          var v9942 = tokenId$$39 != v17395;
          if(v9942) {
            JAMScript.call(this.emitVarDeclVar, this, [])
          }
        }
        var v9944 = varDecl$$2.id;
        JAMScript.call(this.recordSourceMappingStart, this, [v9944]);
        var v17396 = varDecl$$2.id;
        var v9945 = v17396.actualText;
        JAMScript.call(this.writeToOutput, this, [v9945]);
        var v9946 = varDecl$$2.id;
        JAMScript.call(this.recordSourceMappingEnd, this, [v9946]);
        if(hasInitializer) {
          JAMScript.call(this.writeToOutputTrimmable, this, [" = "]);
          var v9947 = this.varListCountStack;
          JAMScript.call(v9947.push, v9947, [0]);
          var v9948 = varDecl$$2.init;
          var v17397 = TypeScript$$12.TokenID;
          var v9949 = v17397.Comma;
          JAMScript.call(this.emitJavascript, this, [v9948, v9949, false]);
          var v9950 = this.varListCountStack;
          JAMScript.call(v9950.pop, v9950, [])
        }
        JAMScript.call(this.onEmitVar, this, []);
        var v22093 = TypeScript$$12.TokenID;
        var v17398 = v22093.OpenParen;
        var v9953 = tokenId$$39 != v17398;
        if(v9953) {
          var v17399 = JAMScript.call(this.varListCount, this, []);
          var v9952 = v17399 < 0;
          if(v9952) {
            JAMScript.call(this.writeToOutput, this, [", "])
          }else {
            var v22094 = TypeScript$$12.TokenID;
            var v17400 = v22094.For;
            var v9951 = tokenId$$39 != v17400;
            if(v9951) {
              JAMScript.call(this.writeToOutputTrimmable, this, [";"])
            }
          }
        }
        JAMScript.call(this.recordSourceMappingEnd, this, [varDecl$$2]);
        JAMScript.call(this.emitParensAndCommentsInPlace, this, [varDecl$$2, false])
      }
      return
    }
    function v468() {
      var v17401 = JAMScript.call(this.varListCount, this, []);
      var v9958 = v17401 > 0;
      if(v9958) {
        var v17402 = JAMScript.call(this.varListCount, this, []);
        var v9955 = v17402 - 1;
        JAMScript.call(this.setInVarBlock, this, [v9955])
      }else {
        var v17403 = JAMScript.call(this.varListCount, this, []);
        var v9957 = v17403 < 0;
        if(v9957) {
          var v17404 = JAMScript.call(this.varListCount, this, []);
          var v9956 = v17404 + 1;
          JAMScript.call(this.setInVarBlock, this, [v9956])
        }
      }
      return
    }
    function v467() {
      var v17405 = JAMScript.call(this.varListCount, this, []);
      var v9960 = v17405 >= 0;
      if(v9960) {
        JAMScript.call(this.writeToOutput, this, ["var "]);
        var v17406 = JAMScript.call(this.varListCount, this, []);
        var v9959 = -v17406;
        JAMScript.call(this.setInVarBlock, this, [v9959])
      }
      return true
    }
    function v466() {
      var v9961 = this.varListCountStack;
      var v22095 = this.varListCountStack;
      var v17407 = v22095.length;
      var v9962 = v17407 - 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        return v9961[v9962]
      }
    }
    function v465(varDecl$$1) {
      var v9968 = varDecl$$1.init;
      if(v9968) {
        JAMScript.call(this.emitParensAndCommentsInPlace, this, [varDecl$$1, true]);
        JAMScript.call(this.recordSourceMappingStart, this, [varDecl$$1]);
        var v9963 = varDecl$$1.id;
        JAMScript.call(this.recordSourceMappingStart, this, [v9963]);
        var v17408 = varDecl$$1.id;
        var v9964 = v17408.actualText;
        JAMScript.call(this.writeToOutput, this, [v9964]);
        var v9965 = varDecl$$1.id;
        JAMScript.call(this.recordSourceMappingEnd, this, [v9965]);
        JAMScript.call(this.writeToOutput, this, [" = "]);
        var v9966 = varDecl$$1.init;
        var v17409 = TypeScript$$12.TokenID;
        var v9967 = v17409.Comma;
        JAMScript.call(this.emitJavascript, this, [v9966, v9967, false]);
        JAMScript.call(this.recordSourceMappingEnd, this, [varDecl$$1]);
        JAMScript.call(this.writeToOutput, this, [";"]);
        JAMScript.call(this.emitParensAndCommentsInPlace, this, [varDecl$$1, false])
      }
      return
    }
    function v464(funcDecl$$2) {
      var v22096 = funcDecl$$2.fncFlags;
      var v24463 = TypeScript$$12.FncFlags;
      var v22097 = v24463.Signature;
      var v17410 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22096, v22097]);
      var v22098 = !v17410;
      if(v22098) {
        v17410 = funcDecl$$2.isOverload
      }
      var v9969 = v17410;
      if(v9969) {
        return
      }
      var temp$$12;
      var tempFnc = this.thisFnc;
      this.thisFnc = funcDecl$$2;
      var v9972 = funcDecl$$2.isConstructor;
      if(v9972) {
        var v9970 = EmitContainer.Constructor;
        temp$$12 = JAMScript.call(this.setContainer, this, [v9970])
      }else {
        var v9971 = EmitContainer.Function;
        temp$$12 = JAMScript.call(this.setContainer, this, [v9971])
      }
      var bases$$2 = null;
      var hasSelfRef$$1 = false;
      var funcName = JAMScript.call(funcDecl$$2.getNameText, funcDecl$$2, []);
      var v24464 = this.emitState;
      var v22099 = v24464.inObjectLiteral;
      var v24466 = !v22099;
      if(v24466) {
        var v24465 = JAMScript.call(funcDecl$$2.isAccessor, funcDecl$$2, []);
        v22099 = !v24465
      }
      var v17411 = v22099;
      if(v17411) {
        var v24467 = EmitContainer.Constructor;
        var v22100 = temp$$12 != v24467;
        var v24470 = !v22100;
        if(v24470) {
          var v25569 = funcDecl$$2.fncFlags;
          var v26208 = TypeScript$$12.FncFlags;
          var v25570 = v26208.Method;
          var v24468 = v25569 & v25570;
          var v25571 = TypeScript$$12.FncFlags;
          var v24469 = v25571.None;
          v22100 = v24468 == v24469
        }
        v17411 = v22100
      }
      var v9980 = v17411;
      if(v9980) {
        var tempLit = JAMScript.call(this.setInObjectLiteral, this, [false]);
        var v9974 = this.thisClassNode;
        if(v9974) {
          var v9973 = this.thisClassNode;
          bases$$2 = v9973.extendsList
        }
        hasSelfRef$$1 = JAMScript.call(Emitter$$1.shouldCaptureThis, Emitter$$1, [funcDecl$$2]);
        JAMScript.call(this.recordSourceMappingStart, this, [funcDecl$$2]);
        var v22101 = funcDecl$$2.fncFlags;
        var v25572 = TypeScript$$12.FncFlags;
        var v24471 = v25572.Exported;
        var v25573 = TypeScript$$12.FncFlags;
        var v24472 = v25573.ClassPropertyMethodExported;
        var v22102 = v24471 | v24472;
        var v17412 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22101, v22102]);
        if(v17412) {
          var v26209 = funcDecl$$2.type;
          var v25574 = v26209.symbol;
          var v24473 = v25574.container;
          var v25575 = this.checker;
          var v24474 = v25575.gloMod;
          var v22103 = v24473 == v24474;
          if(v22103) {
            var v24475 = funcDecl$$2.isConstructor;
            v22103 = !v24475
          }
          v17412 = v22103
        }
        var v9979 = v17412;
        if(v9979) {
          var v17413 = "this." + funcName;
          var v9975 = v17413 + " = ";
          JAMScript.call(this.writeToOutput, this, [v9975]);
          var v9976 = this.thisClassNode;
          JAMScript.call(this.emitInnerFunction, this, [funcDecl$$2, false, false, bases$$2, hasSelfRef$$1, v9976])
        }else {
          var v17414 = funcDecl$$2.name;
          if(v17414) {
            var v24476 = funcDecl$$2.name;
            var v22104 = JAMScript.call(v24476.isMissing, v24476, []);
            v17414 = !v22104
          }
          var v9977 = v17414;
          var v9978 = this.thisClassNode;
          JAMScript.call(this.emitInnerFunction, this, [funcDecl$$2, v9977, false, bases$$2, hasSelfRef$$1, v9978])
        }
        JAMScript.call(this.setInObjectLiteral, this, [tempLit])
      }
      JAMScript.call(this.setContainer, this, [temp$$12]);
      this.thisFnc = tempFnc;
      var v17415 = funcDecl$$2.fncFlags;
      var v22105 = TypeScript$$12.FncFlags;
      var v17416 = v22105.Definition;
      var v9989 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17415, v17416]);
      if(v9989) {
        var v17417 = funcDecl$$2.fncFlags;
        var v22106 = TypeScript$$12.FncFlags;
        var v17418 = v22106.Static;
        var v9988 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17417, v17418]);
        if(v9988) {
          var v9984 = this.thisClassNode;
          if(v9984) {
            var v9983 = JAMScript.call(funcDecl$$2.isAccessor, funcDecl$$2, []);
            if(v9983) {
              var v22107 = this.thisClassNode;
              var v17419 = v22107.name;
              var v9981 = v17419.actualText;
              JAMScript.call(this.emitPropertyAccessor, this, [funcDecl$$2, v9981, false])
            }else {
              JAMScript.call(this.emitIndent, this, []);
              JAMScript.call(this.recordSourceMappingStart, this, [funcDecl$$2]);
              var v26736 = this.thisClassNode;
              var v26578 = v26736.name;
              var v26210 = v26578.actualText;
              var v25576 = v26210 + ".";
              var v24477 = v25576 + funcName;
              var v22108 = v24477 + " = ";
              var v17420 = v22108 + funcName;
              var v9982 = v17420 + ";";
              JAMScript.call(this.writeLineToOutput, this, [v9982]);
              JAMScript.call(this.recordSourceMappingEnd, this, [funcDecl$$2])
            }
          }
        }else {
          var v25577 = this.emitState;
          var v24478 = v25577.container;
          var v24479 = EmitContainer.Module;
          var v22109 = v24478 == v24479;
          var v24482 = !v22109;
          if(v24482) {
            var v25578 = this.emitState;
            var v24480 = v25578.container;
            var v24481 = EmitContainer.DynamicModule;
            v22109 = v24480 == v24481
          }
          var v17421 = v22109;
          if(v17421) {
            var v22110 = funcDecl$$2.fncFlags;
            var v25579 = TypeScript$$12.FncFlags;
            var v24483 = v25579.Exported;
            var v25580 = TypeScript$$12.FncFlags;
            var v24484 = v25580.ClassPropertyMethodExported;
            var v22111 = v24483 | v24484;
            v17421 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22110, v22111])
          }
          var v9987 = v17421;
          if(v9987) {
            JAMScript.call(this.emitIndent, this, []);
            var v9985;
            var v24485 = this.emitState;
            var v22112 = v24485.container;
            var v22113 = EmitContainer.Module;
            var v17422 = v22112 == v22113;
            if(v17422) {
              v9985 = this.moduleName
            }else {
              v9985 = "exports"
            }
            var modName$$1 = v9985;
            JAMScript.call(this.recordSourceMappingStart, this, [funcDecl$$2]);
            var v25581 = modName$$1 + ".";
            var v24486 = v25581 + funcName;
            var v22114 = v24486 + " = ";
            var v17423 = v22114 + funcName;
            var v9986 = v17423 + ";";
            JAMScript.call(this.writeLineToOutput, this, [v9986]);
            JAMScript.call(this.recordSourceMappingEnd, this, [funcDecl$$2])
          }
        }
      }
      return
    }
    function v463(text$$11) {
      JAMScript.call(this.writeToOutput, this, [text$$11]);
      return
    }
    function v462(operand1$$2, operand2$$2) {
      var temp$$11 = JAMScript.call(this.setInObjectLiteral, this, [false]);
      var v17424 = TypeScript$$12.TokenID;
      var v9990 = v17424.Tilde;
      JAMScript.call(this.emitJavascript, this, [operand1$$2, v9990, false]);
      JAMScript.call(this.writeToOutput, this, ["["]);
      var v17425 = TypeScript$$12.TokenID;
      var v9991 = v17425.Comma;
      JAMScript.call(this.emitJavascriptList, this, [operand2$$2, ", ", v9991, false, false, false]);
      JAMScript.call(this.writeToOutput, this, ["]"]);
      JAMScript.call(this.setInObjectLiteral, this, [temp$$11]);
      return
    }
    function v461(moduleDecl) {
      var v9992 = moduleDecl.name;
      var modName = v9992.actualText;
      var v9998 = JAMScript.call(TypeScript$$12.isTSFile, TypeScript$$12, [modName]);
      if(v9998) {
        var v9993 = moduleDecl.name;
        var v22115 = modName.length;
        var v17426 = v22115 - 3;
        var v9994 = JAMScript.call(modName.substring, modName, [0, v17426]);
        JAMScript.call(v9993.setText, v9993, [v9994])
      }else {
        var v9997 = JAMScript.call(TypeScript$$12.isSTRFile, TypeScript$$12, [modName]);
        if(v9997) {
          var v9995 = moduleDecl.name;
          var v22116 = modName.length;
          var v17427 = v22116 - 4;
          var v9996 = JAMScript.call(modName.substring, modName, [0, v17427]);
          JAMScript.call(v9995.setText, v9995, [v9996])
        }
      }
      var v22117 = moduleDecl.modFlags;
      var v24487 = TypeScript$$12.ModuleFlags;
      var v22118 = v24487.Ambient;
      var v17428 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22117, v22118]);
      var v10078 = !v17428;
      if(v10078) {
        var v9999 = moduleDecl.modFlags;
        var v17429 = TypeScript$$12.ModuleFlags;
        var v10000 = v17429.IsDynamic;
        var isDynamicMod = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v9999, v10000]);
        var prevOutFile = this.outfile;
        var prevOutFileName = this.emittingFileName;
        var prevAllSourceMappers = this.allSourceMappers;
        var prevSourceMapper = this.sourceMapper;
        var v10001 = this.emitState;
        var prevColumn = v10001.column;
        var v10002 = this.emitState;
        var prevLine = v10002.line;
        var v10003 = EmitContainer.Module;
        var temp$$10 = JAMScript.call(this.setContainer, this, [v10003]);
        var svModuleName = this.moduleName;
        var v10004 = moduleDecl.modFlags;
        var v17430 = TypeScript$$12.ModuleFlags;
        var v10005 = v17430.Exported;
        var isExported = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v10004, v10005]);
        var v10006 = this.moduleDeclList;
        var v17431 = this.moduleDeclList;
        var v10007 = v17431.length;
        JAMScript.set(v10006, v10007, moduleDecl);
        var v10008 = moduleDecl.modFlags;
        var v17432 = TypeScript$$12.ModuleFlags;
        var v10009 = v17432.IsWholeFile;
        var isWholeFile = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v10008, v10009]);
        var v10010 = moduleDecl.name;
        this.moduleName = v10010.actualText;
        if(isDynamicMod) {
          var v17433 = moduleDecl.name;
          var v10011 = v17433.actualText;
          var tsModFileName = JAMScript.call(TypeScript$$12.stripQuotes, TypeScript$$12, [v10011]);
          var v10012 = JAMScript.call(TypeScript$$12.trimModName, TypeScript$$12, [tsModFileName]);
          var modFilePath = v10012 + ".js";
          var v10013 = this.emitOptions;
          var v17434 = TypeScript$$12.TypeScriptCompiler;
          var v10014 = v17434.mapToJSFileName;
          modFilePath = JAMScript.call(v10013.mapOutputFileName, v10013, [modFilePath, v10014]);
          var v17435 = this.emitOptions;
          var v10025 = v17435.ioHost;
          if(v10025) {
            var v17436 = JAMScript.call(TypeScript$$12.switchToForwardSlashes, TypeScript$$12, [modFilePath]);
            var v22119 = this.emittingFileName;
            var v17437 = JAMScript.call(TypeScript$$12.switchToForwardSlashes, TypeScript$$12, [v22119]);
            var v10024 = v17436 != v17437;
            if(v10024) {
              this.emittingFileName = modFilePath;
              var v10015 = moduleDecl.containsUnicodeChar;
              var v17439 = !v10015;
              if(v17439) {
                var v22120 = this.emitOptions;
                var v17438 = v22120.emitComments;
                if(v17438) {
                  v17438 = moduleDecl.containsUnicodeCharInComment
                }
                v10015 = v17438
              }
              var useUTF8InOutputfile = v10015;
              var v10016 = this.emittingFileName;
              var v27469 = JAMScript.call(this.createFile, this, [v10016, useUTF8InOutputfile]);
              this.outfile = v27469;
              var v10021 = prevSourceMapper != null;
              if(v10021) {
                this.allSourceMappers = [];
                var v17440 = this.emittingFileName;
                var v22121 = TypeScript$$12.SourceMapper;
                var v17441 = v22121.MapFileExtension;
                var v10017 = v17440 + v17441;
                var sourceMappingFile = JAMScript.call(this.createFile, this, [v10017, false]);
                var v17442 = TypeScript$$12.SourceMapper;
                var v17443 = this.emittingFileName;
                var v17444 = this.outfile;
                var v17445 = this.errorReporter;
                var v10018 = JAMScript.new(v17442, [tsModFileName, v17443, v17444, sourceMappingFile, v17445]);
                JAMScript.call(this.setSourceMappings, this, [v10018]);
                var v10019 = this.emitState;
                v10019.column = 0;
                var v10020 = this.emitState;
                v10020.line = 0
              }
            }else {
              var v10022 = TypeScript$$12.CompilerDiagnostics;
              var v17446 = this.emitOptions;
              var v10023 = v17446.outputMany;
              JAMScript.call(v10022.assert, v10022, [v10023, "Cannot have dynamic modules compiling into single file"])
            }
          }
          var v10026 = EmitContainer.DynamicModule;
          JAMScript.call(this.setContainer, this, [v10026]);
          JAMScript.call(this.recordSourceMappingStart, this, [moduleDecl]);
          var v17447 = TypeScript$$12.moduleGenTarget;
          var v22122 = TypeScript$$12.ModuleGenTarget;
          var v17448 = v22122.Asynchronous;
          var v10033 = v17447 == v17448;
          if(v10033) {
            var dependencyList = '["require", "exports"';
            var importList = "require, exports";
            var importStatement = null;
            var i$$43 = 0;
            var v24488 = moduleDecl.mod;
            var v22123 = v24488.importedModules;
            var v17449 = v22123.length;
            var v10030 = i$$43 < v17449;
            for(;v10030;) {
              var v17450 = moduleDecl.mod;
              var v10027 = v17450.importedModules;
              importStatement = v10027[i$$43];
              var v22124 = importStatement.id;
              var v17451 = v22124.sym;
              if(v17451) {
                var v25582 = importStatement.id;
                var v24489 = v25582.sym;
                var v22125 = v24489.onlyReferencedAsTypeRef;
                v17451 = !v22125
              }
              var v10029 = v17451;
              if(v10029) {
                var v25583 = moduleDecl.mod;
                var v24490 = v25583.importedModules;
                var v22126 = v24490.length;
                var v17452 = v22126 - 1;
                var v10028 = i$$43 <= v17452;
                if(v10028) {
                  dependencyList = dependencyList + ", ";
                  importList = importList + ", "
                }
                var v25584 = importStatement.id;
                var v24491 = v25584.actualText;
                var v22127 = "__" + v24491;
                var v17453 = v22127 + "__";
                importList = importList + v17453;
                var v17454 = JAMScript.call(importStatement.firstAliasedModToString, importStatement, []);
                dependencyList = dependencyList + v17454
              }
              i$$43 = i$$43 + 1;
              var v24492 = moduleDecl.mod;
              var v22128 = v24492.importedModules;
              var v17455 = v22128.length;
              v10030 = i$$43 < v17455
            }
            i$$43 = 0;
            var v22129 = moduleDecl.amdDependencies;
            var v17456 = v22129.length;
            var v10031 = i$$43 < v17456;
            for(;v10031;) {
              var v25585 = moduleDecl.amdDependencies;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v24493 = v25585[i$$43]
              }
              var v22130 = ', "' + v24493;
              var v17457 = v22130 + '"';
              dependencyList = dependencyList + v17457;
              i$$43 = i$$43 + 1;
              var v22131 = moduleDecl.amdDependencies;
              var v17458 = v22131.length;
              v10031 = i$$43 < v17458
            }
            dependencyList = dependencyList + "]";
            var v25586 = "define(" + dependencyList;
            var v24494 = v25586 + ",";
            var v22132 = v24494 + " function(";
            var v17459 = v22132 + importList;
            var v10032 = v17459 + ") {";
            JAMScript.call(this.writeLineToOutput, this, [v10032])
          }else {
          }
        }else {
          var v10037 = !isExported;
          if(v10037) {
            JAMScript.call(this.recordSourceMappingStart, this, [moduleDecl]);
            JAMScript.call(this.writeToOutput, this, ["var "]);
            var v10034 = moduleDecl.name;
            JAMScript.call(this.recordSourceMappingStart, this, [v10034]);
            var v10035 = this.moduleName;
            JAMScript.call(this.writeToOutput, this, [v10035]);
            var v10036 = moduleDecl.name;
            JAMScript.call(this.recordSourceMappingEnd, this, [v10036]);
            JAMScript.call(this.writeLineToOutput, this, [";"]);
            JAMScript.call(this.recordSourceMappingEnd, this, [moduleDecl]);
            JAMScript.call(this.emitIndent, this, [])
          }
          JAMScript.call(this.writeToOutput, this, ["("]);
          JAMScript.call(this.recordSourceMappingStart, this, [moduleDecl]);
          JAMScript.call(this.writeToOutput, this, ["function ("]);
          var v10038 = moduleDecl.name;
          JAMScript.call(this.recordSourceMappingStart, this, [v10038]);
          var v10039 = this.moduleName;
          JAMScript.call(this.writeToOutput, this, [v10039]);
          var v10040 = moduleDecl.name;
          JAMScript.call(this.recordSourceMappingEnd, this, [v10040]);
          JAMScript.call(this.writeLineToOutput, this, [") {"])
        }
        var v10042 = !isWholeFile;
        if(v10042) {
          var v10041 = this.moduleName;
          JAMScript.call(this.recordSourceMappingNameStart, this, [v10041])
        }
        var v17460 = !isDynamicMod;
        var v22135 = !v17460;
        if(v22135) {
          var v22133 = TypeScript$$12.moduleGenTarget;
          var v24495 = TypeScript$$12.ModuleGenTarget;
          var v22134 = v24495.Asynchronous;
          v17460 = v22133 == v22134
        }
        var v10044 = v17460;
        if(v10044) {
          var v10043 = this.indenter;
          JAMScript.call(v10043.increaseIndent, v10043, [])
        }
        var v17461 = moduleDecl.modFlags;
        var v22136 = TypeScript$$12.ModuleFlags;
        var v17462 = v22136.MustCaptureThis;
        var v10045 = v17461 & v17462;
        if(v10045) {
          JAMScript.call(this.writeCaptureThisStatement, this, [moduleDecl])
        }
        var v10046 = moduleDecl.members;
        var v17463 = TypeScript$$12.TokenID;
        var v10047 = v17463.Semicolon;
        JAMScript.call(this.emitJavascriptList, this, [v10046, null, v10047, true, false, false]);
        var v17464 = !isDynamicMod;
        var v22139 = !v17464;
        if(v22139) {
          var v22137 = TypeScript$$12.moduleGenTarget;
          var v24496 = TypeScript$$12.ModuleGenTarget;
          var v22138 = v24496.Asynchronous;
          v17464 = v22137 == v22138
        }
        var v10049 = v17464;
        if(v10049) {
          var v10048 = this.indenter;
          JAMScript.call(v10048.decreaseIndent, v10048, [])
        }
        JAMScript.call(this.emitIndent, this, []);
        if(isDynamicMod) {
          var v17465 = TypeScript$$12.moduleGenTarget;
          var v22140 = TypeScript$$12.ModuleGenTarget;
          var v17466 = v22140.Asynchronous;
          var v10050 = v17465 == v17466;
          if(v10050) {
            JAMScript.call(this.writeLineToOutput, this, ["})"])
          }else {
          }
          var v10051 = !isWholeFile;
          if(v10051) {
            JAMScript.call(this.recordSourceMappingNameEnd, this, [])
          }
          JAMScript.call(this.recordSourceMappingEnd, this, [moduleDecl]);
          var v17467 = this.outfile;
          var v10055 = v17467 != prevOutFile;
          if(v10055) {
            JAMScript.call(this.Close, this, []);
            var v10054 = prevSourceMapper != null;
            if(v10054) {
              this.allSourceMappers = prevAllSourceMappers;
              this.sourceMapper = prevSourceMapper;
              var v10052 = this.emitState;
              v10052.column = prevColumn;
              var v10053 = this.emitState;
              v10053.line = prevLine
            }
            this.outfile = prevOutFile;
            this.emittingFileName = prevOutFileName
          }
        }else {
          var containingMod = null;
          var v17468 = moduleDecl.type;
          if(v17468) {
            var v25587 = moduleDecl.type;
            var v24497 = v25587.symbol;
            var v22141 = v24497.container;
            if(v22141) {
              var v26211 = moduleDecl.type;
              var v25588 = v26211.symbol;
              var v24498 = v25588.container;
              v22141 = v24498.declAST
            }
            v17468 = v22141
          }
          var v10057 = v17468;
          if(v10057) {
            var v22142 = moduleDecl.type;
            var v17469 = v22142.symbol;
            var v10056 = v17469.container;
            containingMod = v10056.declAST
          }
          var v10058 = containingMod;
          if(v10058) {
            var v17470 = containingMod.modFlags;
            var v22143 = TypeScript$$12.ModuleFlags;
            var v17471 = v22143.IsDynamic;
            v10058 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17470, v17471])
          }
          var parentIsDynamic = v10058;
          var v10059 = moduleDecl.endingToken;
          JAMScript.call(this.recordSourceMappingStart, this, [v10059]);
          var v22144 = EmitContainer.Prog;
          var v17472 = temp$$10 == v22144;
          if(v17472) {
            v17472 = isExported
          }
          var v10074 = v17472;
          if(v10074) {
            JAMScript.call(this.writeToOutput, this, ["}"]);
            var v10060 = !isWholeFile;
            if(v10060) {
              JAMScript.call(this.recordSourceMappingNameEnd, this, [])
            }
            var v10061 = moduleDecl.endingToken;
            JAMScript.call(this.recordSourceMappingEnd, this, [v10061]);
            var v25589 = this.moduleName;
            var v24499 = ")(this." + v25589;
            var v22145 = v24499 + " || (this.";
            var v22146 = this.moduleName;
            var v17473 = v22145 + v22146;
            var v10062 = v17473 + " = {}));";
            JAMScript.call(this.writeLineToOutput, this, [v10062])
          }else {
            var v17474 = isExported;
            var v22148 = !v17474;
            if(v22148) {
              var v22147 = EmitContainer.Prog;
              v17474 = temp$$10 == v22147
            }
            var v10073 = v17474;
            if(v10073) {
              var v10063;
              var v17476 = svModuleName != "";
              if(v17476) {
                var v22149;
                if(parentIsDynamic) {
                  v22149 = "exports"
                }else {
                  v22149 = svModuleName
                }
                var v17475 = v22149;
                v10063 = v17475 + "."
              }else {
                v10063 = svModuleName
              }
              var dotMod = v10063;
              JAMScript.call(this.writeToOutput, this, ["}"]);
              var v10064 = !isWholeFile;
              if(v10064) {
                JAMScript.call(this.recordSourceMappingNameEnd, this, [])
              }
              var v10065 = moduleDecl.endingToken;
              JAMScript.call(this.recordSourceMappingEnd, this, [v10065]);
              var v26212 = ")(" + dotMod;
              var v26213 = this.moduleName;
              var v25590 = v26212 + v26213;
              var v24500 = v25590 + " || (";
              var v22150 = v24500 + dotMod;
              var v22151 = this.moduleName;
              var v17477 = v22150 + v22151;
              var v10066 = v17477 + " = {}));";
              JAMScript.call(this.writeLineToOutput, this, [v10066])
            }else {
              var v17478 = !isExported;
              if(v17478) {
                var v22152 = EmitContainer.Prog;
                v17478 = temp$$10 != v22152
              }
              var v10072 = v17478;
              if(v10072) {
                JAMScript.call(this.writeToOutput, this, ["}"]);
                var v10067 = !isWholeFile;
                if(v10067) {
                  JAMScript.call(this.recordSourceMappingNameEnd, this, [])
                }
                var v10068 = moduleDecl.endingToken;
                JAMScript.call(this.recordSourceMappingEnd, this, [v10068]);
                var v25591 = this.moduleName;
                var v24501 = ")(" + v25591;
                var v22153 = v24501 + " || (";
                var v22154 = this.moduleName;
                var v17479 = v22153 + v22154;
                var v10069 = v17479 + " = {}));";
                JAMScript.call(this.writeLineToOutput, this, [v10069])
              }else {
                JAMScript.call(this.writeToOutput, this, ["}"]);
                var v10070 = !isWholeFile;
                if(v10070) {
                  JAMScript.call(this.recordSourceMappingNameEnd, this, [])
                }
                var v10071 = moduleDecl.endingToken;
                JAMScript.call(this.recordSourceMappingEnd, this, [v10071]);
                JAMScript.call(this.writeLineToOutput, this, [")();"])
              }
            }
          }
          JAMScript.call(this.recordSourceMappingEnd, this, [moduleDecl]);
          var v22155 = EmitContainer.Prog;
          var v17480 = temp$$10 != v22155;
          if(v17480) {
            v17480 = isExported
          }
          var v10077 = v17480;
          if(v10077) {
            JAMScript.call(this.emitIndent, this, []);
            JAMScript.call(this.recordSourceMappingStart, this, [moduleDecl]);
            if(parentIsDynamic) {
              var v25592 = this.moduleName;
              var v24502 = "var " + v25592;
              var v22156 = v24502 + " = exports.";
              var v22157 = this.moduleName;
              var v17481 = v22156 + v22157;
              var v10075 = v17481 + ";";
              JAMScript.call(this.writeLineToOutput, this, [v10075])
            }else {
              var v26579 = this.moduleName;
              var v26214 = "var " + v26579;
              var v25593 = v26214 + " = ";
              var v24503 = v25593 + svModuleName;
              var v22158 = v24503 + ".";
              var v22159 = this.moduleName;
              var v17482 = v22158 + v22159;
              var v10076 = v17482 + ";";
              JAMScript.call(this.writeLineToOutput, this, [v10076])
            }
            JAMScript.call(this.recordSourceMappingEnd, this, [moduleDecl])
          }
        }
        JAMScript.call(this.setContainer, this, [temp$$10]);
        this.moduleName = svModuleName;
        var v17483 = this.moduleDeclList;
        var v24504 = this.moduleDeclList;
        var v22160 = v24504.length;
        v17483.length = v22160 - 1
      }
      return
    }
    function v460(funcDecl$$1, printName, isMember, bases$$1, hasSelfRef, classDecl$$1) {
      var v10079 = funcDecl$$1.isConstructor;
      if(v10079) {
        var v17484 = funcDecl$$1.fncFlags;
        var v22161 = TypeScript$$12.FncFlags;
        var v17485 = v22161.ClassMethod;
        v10079 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17484, v17485])
      }
      var isClassConstructor = v10079;
      var v10080 = isClassConstructor;
      if(v10080) {
        var v26215 = this.thisClassNode;
        var v25594 = v26215.type;
        var v24505 = v25594.instanceType;
        var v22162 = v24505.typeFlags;
        var v24506 = TypeScript$$12.TypeFlags;
        var v22163 = v24506.HasBaseType;
        var v17486 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22162, v22163]);
        if(v17486) {
          var v26580 = this.thisClassNode;
          var v26216 = v26580.type;
          var v25595 = v26216.instanceType;
          var v24507 = v25595.typeFlags;
          var v25596 = TypeScript$$12.TypeFlags;
          var v24508 = v25596.HasBaseTypeOfObject;
          var v22164 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24507, v24508]);
          v17486 = !v22164
        }
        v10080 = v17486
      }
      var hasNonObjectBaseType = v10080;
      var v10081 = hasNonObjectBaseType;
      if(v10081) {
        var v22165 = this.thisClassNode;
        var v17487 = v22165.varFlags;
        var v22166 = TypeScript$$12.VarFlags;
        var v17488 = v22166.ClassSuperMustBeFirstCallInConstructor;
        v10081 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17487, v17488])
      }
      var classPropertiesMustComeAfterSuperCall = v10081;
      var v17489 = funcDecl$$1.fncFlags;
      var v22167 = TypeScript$$12.FncFlags;
      var v17490 = v22167.IsFunctionExpression;
      var v10082 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17489, v17490]);
      if(v10082) {
        var v22168 = funcDecl$$1.isParenthesized;
        var v17491 = !v22168;
        if(v17491) {
          var v24509 = JAMScript.call(funcDecl$$1.isAccessor, funcDecl$$1, []);
          var v22169 = !v24509;
          if(v22169) {
            var v25597 = funcDecl$$1.flags;
            var v26217 = TypeScript$$12.ASTFlags;
            var v25598 = v26217.ExplicitSemicolon;
            var v24510 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v25597, v25598]);
            var v25601 = !v24510;
            if(v25601) {
              var v25599 = funcDecl$$1.flags;
              var v26218 = TypeScript$$12.ASTFlags;
              var v25600 = v26218.AutomaticSemicolon;
              v24510 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v25599, v25600])
            }
            v22169 = v24510
          }
          v17491 = v22169
        }
        v10082 = v17491
      }
      var shouldParenthesize = v10082;
      JAMScript.call(this.emitParensAndCommentsInPlace, this, [funcDecl$$1, true]);
      if(shouldParenthesize) {
        JAMScript.call(this.writeToOutput, this, ["("])
      }
      JAMScript.call(this.recordSourceMappingStart, this, [funcDecl$$1]);
      var v22170 = JAMScript.call(funcDecl$$1.isAccessor, funcDecl$$1, []);
      if(v22170) {
        var v24511 = funcDecl$$1.accessorSymbol;
        v22170 = v24511.isObjectLitField
      }
      var v17492 = v22170;
      var v10083 = !v17492;
      if(v10083) {
        JAMScript.call(this.writeToOutput, this, ["function "])
      }
      if(printName) {
        var id$$8 = JAMScript.call(funcDecl$$1.getNameText, funcDecl$$1, []);
        var v17493 = id$$8;
        if(v17493) {
          var v22171 = JAMScript.call(funcDecl$$1.isAccessor, funcDecl$$1, []);
          v17493 = !v22171
        }
        var v10088 = v17493;
        if(v10088) {
          var v10085 = funcDecl$$1.name;
          if(v10085) {
            var v10084 = funcDecl$$1.name;
            JAMScript.call(this.recordSourceMappingStart, this, [v10084])
          }
          JAMScript.call(this.writeToOutput, this, [id$$8]);
          var v10087 = funcDecl$$1.name;
          if(v10087) {
            var v10086 = funcDecl$$1.name;
            JAMScript.call(this.recordSourceMappingEnd, this, [v10086])
          }
        }
      }
      JAMScript.call(this.writeToOutput, this, ["("]);
      var argsLen = 0;
      var i$$42 = 0;
      var arg$$6;
      var defaultArgs = [];
      var v10097 = funcDecl$$1.arguments;
      if(v10097) {
        var v10089 = EmitContainer.Args;
        var tempContainer = JAMScript.call(this.setContainer, this, [v10089]);
        var v17494 = funcDecl$$1.arguments;
        var v10090 = v17494.members;
        argsLen = v10090.length;
        var printLen = argsLen;
        var v10091 = funcDecl$$1.variableArgList;
        if(v10091) {
          printLen = printLen - 1
        }
        i$$42 = 0;
        var v10096 = i$$42 < printLen;
        for(;v10096;) {
          var v17495 = funcDecl$$1.arguments;
          var v10092 = v17495.members;
          arg$$6 = v10092[i$$42];
          var v10093 = arg$$6.init;
          if(v10093) {
            JAMScript.call(defaultArgs.push, defaultArgs, [arg$$6])
          }
          var v17496 = TypeScript$$12.TokenID;
          var v10094 = v17496.OpenParen;
          JAMScript.call(this.emitJavascript, this, [arg$$6, v10094, false]);
          var v17497 = printLen - 1;
          var v10095 = i$$42 < v17497;
          if(v10095) {
            JAMScript.call(this.writeToOutput, this, [", "])
          }
          i$$42 = i$$42 + 1;
          v10096 = i$$42 < printLen
        }
        JAMScript.call(this.setContainer, this, [tempContainer])
      }
      JAMScript.call(this.writeLineToOutput, this, [") {"]);
      var v10103 = funcDecl$$1.isConstructor;
      if(v10103) {
        JAMScript.call(this.recordSourceMappingNameStart, this, ["constructor"])
      }else {
        var v10102 = JAMScript.call(funcDecl$$1.isGetAccessor, funcDecl$$1, []);
        if(v10102) {
          var v17498 = JAMScript.call(funcDecl$$1.getNameText, funcDecl$$1, []);
          var v10098 = "get_" + v17498;
          JAMScript.call(this.recordSourceMappingNameStart, this, [v10098])
        }else {
          var v10101 = JAMScript.call(funcDecl$$1.isSetAccessor, funcDecl$$1, []);
          if(v10101) {
            var v17499 = JAMScript.call(funcDecl$$1.getNameText, funcDecl$$1, []);
            var v10099 = "set_" + v17499;
            JAMScript.call(this.recordSourceMappingNameStart, this, [v10099])
          }else {
            var v10100 = JAMScript.call(funcDecl$$1.getNameText, funcDecl$$1, []);
            JAMScript.call(this.recordSourceMappingNameStart, this, [v10100])
          }
        }
      }
      var v10104 = this.indenter;
      JAMScript.call(v10104.increaseIndent, v10104, []);
      i$$42 = 0;
      var v17500 = defaultArgs.length;
      var v10111 = i$$42 < v17500;
      for(;v10111;) {
        arg$$6 = defaultArgs[i$$42];
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.recordSourceMappingStart, this, [arg$$6]);
        var v24512 = arg$$6.id;
        var v22172 = v24512.actualText;
        var v17501 = "if (typeof " + v22172;
        var v10105 = v17501 + ' === "undefined") { ';
        JAMScript.call(this.writeToOutput, this, [v10105]);
        var v10106 = arg$$6.id;
        JAMScript.call(this.recordSourceMappingStart, this, [v10106]);
        var v17502 = arg$$6.id;
        var v10107 = v17502.actualText;
        JAMScript.call(this.writeToOutput, this, [v10107]);
        var v10108 = arg$$6.id;
        JAMScript.call(this.recordSourceMappingEnd, this, [v10108]);
        JAMScript.call(this.writeToOutput, this, [" = "]);
        var v10109 = arg$$6.init;
        var v17503 = TypeScript$$12.TokenID;
        var v10110 = v17503.OpenParen;
        JAMScript.call(this.emitJavascript, this, [v10109, v10110, false]);
        JAMScript.call(this.writeLineToOutput, this, ["; }"]);
        JAMScript.call(this.recordSourceMappingEnd, this, [arg$$6]);
        i$$42 = i$$42 + 1;
        var v17504 = defaultArgs.length;
        v10111 = i$$42 < v17504
      }
      var v17505 = funcDecl$$1.isConstructor;
      if(v17505) {
        var v24513 = funcDecl$$1.classDecl;
        var v22173 = v24513.varFlags;
        var v24514 = TypeScript$$12.VarFlags;
        var v22174 = v24514.MustCaptureThis;
        v17505 = v22173 & v22174
      }
      var v10112 = v17505;
      if(v10112) {
        JAMScript.call(this.writeCaptureThisStatement, this, [funcDecl$$1])
      }
      var v17506 = funcDecl$$1.isConstructor;
      if(v17506) {
        v17506 = !classPropertiesMustComeAfterSuperCall
      }
      var v10125 = v17506;
      if(v10125) {
        var v10123 = funcDecl$$1.arguments;
        if(v10123) {
          var v17507 = funcDecl$$1.arguments;
          var v10113 = v17507.members;
          argsLen = v10113.length;
          i$$42 = 0;
          var v10122 = i$$42 < argsLen;
          for(;v10122;) {
            var v17508 = funcDecl$$1.arguments;
            var v10114 = v17508.members;
            arg$$6 = v10114[i$$42];
            var v22175 = arg$$6.varFlags;
            var v24515 = TypeScript$$12.VarFlags;
            var v22176 = v24515.Property;
            var v17509 = v22175 & v22176;
            var v22177 = TypeScript$$12.VarFlags;
            var v17510 = v22177.None;
            var v10121 = v17509 != v17510;
            if(v10121) {
              JAMScript.call(this.emitIndent, this, []);
              JAMScript.call(this.recordSourceMappingStart, this, [arg$$6]);
              var v10115 = arg$$6.id;
              JAMScript.call(this.recordSourceMappingStart, this, [v10115]);
              var v22178 = arg$$6.id;
              var v17511 = v22178.actualText;
              var v10116 = "this." + v17511;
              JAMScript.call(this.writeToOutput, this, [v10116]);
              var v10117 = arg$$6.id;
              JAMScript.call(this.recordSourceMappingEnd, this, [v10117]);
              JAMScript.call(this.writeToOutput, this, [" = "]);
              var v10118 = arg$$6.id;
              JAMScript.call(this.recordSourceMappingStart, this, [v10118]);
              var v17512 = arg$$6.id;
              var v10119 = v17512.actualText;
              JAMScript.call(this.writeToOutput, this, [v10119]);
              var v10120 = arg$$6.id;
              JAMScript.call(this.recordSourceMappingEnd, this, [v10120]);
              JAMScript.call(this.writeLineToOutput, this, [";"]);
              JAMScript.call(this.recordSourceMappingEnd, this, [arg$$6])
            }
            i$$42 = i$$42 + 1;
            v10122 = i$$42 < argsLen
          }
        }
        var v22179 = funcDecl$$1.fncFlags;
        var v24516 = TypeScript$$12.FncFlags;
        var v22180 = v24516.ClassMethod;
        var v17513 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22179, v22180]);
        var v10124 = !v17513;
        if(v10124) {
          JAMScript.call(this.emitConstructorCalls, this, [bases$$1, classDecl$$1])
        }
      }
      if(hasSelfRef) {
        JAMScript.call(this.writeCaptureThisStatement, this, [funcDecl$$1])
      }
      var v10136 = funcDecl$$1.variableArgList;
      if(v10136) {
        var v17514 = funcDecl$$1.arguments;
        var v10126 = v17514.members;
        argsLen = v10126.length;
        var v17515 = funcDecl$$1.arguments;
        var v10127 = v17515.members;
        var v10128 = argsLen - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var lastArg = v10127[v10128]
        }
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.recordSourceMappingStart, this, [lastArg]);
        JAMScript.call(this.writeToOutput, this, ["var "]);
        var v10129 = lastArg.id;
        JAMScript.call(this.recordSourceMappingStart, this, [v10129]);
        var v17516 = lastArg.id;
        var v10130 = v17516.actualText;
        JAMScript.call(this.writeToOutput, this, [v10130]);
        var v10131 = lastArg.id;
        JAMScript.call(this.recordSourceMappingEnd, this, [v10131]);
        JAMScript.call(this.writeLineToOutput, this, [" = [];"]);
        JAMScript.call(this.recordSourceMappingEnd, this, [lastArg]);
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.writeToOutput, this, ["for ("]);
        JAMScript.call(this.recordSourceMappingStart, this, [lastArg]);
        JAMScript.call(this.writeToOutput, this, ["var _i = 0;"]);
        JAMScript.call(this.recordSourceMappingEnd, this, [lastArg]);
        JAMScript.call(this.writeToOutput, this, [" "]);
        JAMScript.call(this.recordSourceMappingStart, this, [lastArg]);
        var v22181 = argsLen - 1;
        var v17517 = "_i < (arguments.length - " + v22181;
        var v10132 = v17517 + ")";
        JAMScript.call(this.writeToOutput, this, [v10132]);
        JAMScript.call(this.recordSourceMappingEnd, this, [lastArg]);
        JAMScript.call(this.writeToOutput, this, ["; "]);
        JAMScript.call(this.recordSourceMappingStart, this, [lastArg]);
        JAMScript.call(this.writeToOutput, this, ["_i++"]);
        JAMScript.call(this.recordSourceMappingEnd, this, [lastArg]);
        JAMScript.call(this.writeLineToOutput, this, [") {"]);
        var v10133 = this.indenter;
        JAMScript.call(v10133.increaseIndent, v10133, []);
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.recordSourceMappingStart, this, [lastArg]);
        var v25602 = lastArg.id;
        var v24517 = v25602.actualText;
        var v22182 = v24517 + "[_i] = arguments[_i + ";
        var v22183 = argsLen - 1;
        var v17518 = v22182 + v22183;
        var v10134 = v17518 + "];";
        JAMScript.call(this.writeToOutput, this, [v10134]);
        JAMScript.call(this.recordSourceMappingEnd, this, [lastArg]);
        JAMScript.call(this.writeLineToOutput, this, [""]);
        var v10135 = this.indenter;
        JAMScript.call(v10135.decreaseIndent, v10135, []);
        JAMScript.call(this.emitIndent, this, []);
        JAMScript.call(this.writeLineToOutput, this, ["}"])
      }
      var v17519 = funcDecl$$1.isConstructor;
      if(v17519) {
        var v24518 = funcDecl$$1.fncFlags;
        var v25603 = TypeScript$$12.FncFlags;
        var v24519 = v25603.ClassMethod;
        var v22184 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24518, v24519]);
        if(v22184) {
          v22184 = !classPropertiesMustComeAfterSuperCall
        }
        v17519 = v22184
      }
      var v10143 = v17519;
      if(v10143) {
        var v22185 = this.thisClassNode;
        var v17520 = v22185.members;
        var v10137 = v17520.members;
        var nProps = v10137.length;
        i$$42 = 0;
        var v10142 = i$$42 < nProps;
        for(;v10142;) {
          var v26219 = this.thisClassNode;
          var v25604 = v26219.members;
          var v24520 = v25604.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22186 = v24520[i$$42]
          }
          var v17521 = v22186.nodeType;
          var v22187 = TypeScript$$12.NodeType;
          var v17522 = v22187.VarDecl;
          var v10141 = v17521 == v17522;
          if(v10141) {
            var v22188 = this.thisClassNode;
            var v17523 = v22188.members;
            var v10138 = v17523.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var varDecl = v10138[i$$42]
            }
            var v24521 = varDecl.varFlags;
            var v25605 = TypeScript$$12.VarFlags;
            var v24522 = v25605.Static;
            var v22189 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v24521, v24522]);
            var v17524 = !v22189;
            if(v17524) {
              v17524 = varDecl.init
            }
            var v10140 = v17524;
            if(v10140) {
              JAMScript.call(this.emitIndent, this, []);
              var v17525 = TypeScript$$12.TokenID;
              var v10139 = v17525.Tilde;
              JAMScript.call(this.emitJavascriptVarDecl, this, [varDecl, v10139]);
              JAMScript.call(this.writeLineToOutput, this, [""])
            }
          }
          i$$42 = i$$42 + 1;
          v10142 = i$$42 < nProps
        }
      }
      var v10144 = funcDecl$$1.bod;
      JAMScript.call(this.emitBareJavascriptStatements, this, [v10144, classPropertiesMustComeAfterSuperCall]);
      var v10145 = this.indenter;
      JAMScript.call(v10145.decreaseIndent, v10145, []);
      JAMScript.call(this.emitIndent, this, []);
      var v10146 = funcDecl$$1.endingToken;
      JAMScript.call(this.recordSourceMappingStart, this, [v10146]);
      JAMScript.call(this.writeToOutput, this, ["}"]);
      JAMScript.call(this.recordSourceMappingNameEnd, this, []);
      var v10147 = funcDecl$$1.endingToken;
      JAMScript.call(this.recordSourceMappingEnd, this, [v10147]);
      JAMScript.call(this.recordSourceMappingEnd, this, [funcDecl$$1]);
      if(shouldParenthesize) {
        JAMScript.call(this.writeToOutput, this, [")"])
      }
      JAMScript.call(this.recordSourceMappingEnd, this, [funcDecl$$1]);
      JAMScript.call(this.emitParensAndCommentsInPlace, this, [funcDecl$$1, false]);
      var v17526 = !isMember;
      if(v17526) {
        var v25606 = funcDecl$$1.fncFlags;
        var v26220 = TypeScript$$12.FncFlags;
        var v25607 = v26220.IsFunctionExpression;
        var v24523 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v25606, v25607]);
        var v22190 = !v24523;
        if(v22190) {
          var v25608 = funcDecl$$1.fncFlags;
          var v26221 = TypeScript$$12.FncFlags;
          var v25609 = v26221.Definition;
          var v24524 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v25608, v25609]);
          var v25610 = !v24524;
          if(v25610) {
            v24524 = funcDecl$$1.isConstructor
          }
          v22190 = v24524
        }
        v17526 = v22190
      }
      var v10150 = v17526;
      if(v10150) {
        JAMScript.call(this.writeLineToOutput, this, [""])
      }else {
        var v17527 = funcDecl$$1.fncFlags;
        var v22191 = TypeScript$$12.FncFlags;
        var v17528 = v22191.IsFunctionExpression;
        var v10149 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17527, v17528]);
        if(v10149) {
          var v22192 = funcDecl$$1.flags;
          var v24525 = TypeScript$$12.ASTFlags;
          var v22193 = v24525.ExplicitSemicolon;
          var v17529 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22192, v22193]);
          var v22196 = !v17529;
          if(v22196) {
            var v22194 = funcDecl$$1.flags;
            var v24526 = TypeScript$$12.ASTFlags;
            var v22195 = v24526.AutomaticSemicolon;
            v17529 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22194, v22195])
          }
          var v10148 = v17529;
          if(v10148) {
            JAMScript.call(this.writeLineToOutput, this, [";"])
          }
        }
      }
      return
    }
    function v459(bases, classDecl) {
      var v10151 = bases == null;
      if(v10151) {
        return
      }
      var v10152 = bases.members;
      var basesLen = v10152.length;
      JAMScript.call(this.recordSourceMappingStart, this, [classDecl]);
      var i$$41 = 0;
      var v10163 = i$$41 < basesLen;
      for(;v10163;) {
        var v10153 = bases.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var baseExpr = v10153[i$$41]
        }
        var baseSymbol = null;
        var v17530 = baseExpr.nodeType;
        var v22197 = TypeScript$$12.NodeType;
        var v17531 = v22197.Call;
        var v10156 = v17530 == v17531;
        if(v10156) {
          var v17532 = baseExpr.target;
          var v10154 = v17532.type;
          baseSymbol = v10154.symbol
        }else {
          var v10155 = baseExpr.type;
          baseSymbol = v10155.symbol
        }
        var baseName = baseSymbol.name;
        var v17533 = baseSymbol.declModule;
        var v24527 = classDecl.type;
        var v22198 = v24527.symbol;
        var v17534 = v22198.declModule;
        var v10157 = v17533 != v17534;
        if(v10157) {
          baseName = JAMScript.call(baseSymbol.fullName, baseSymbol, [])
        }
        var v17535 = baseExpr.nodeType;
        var v22199 = TypeScript$$12.NodeType;
        var v17536 = v22199.Call;
        var v10162 = v17535 == v17536;
        if(v10162) {
          JAMScript.call(this.emitIndent, this, []);
          JAMScript.call(this.writeToOutput, this, ["_super.call(this"]);
          var args$$5 = baseExpr.arguments;
          var v17537 = args$$5;
          if(v17537) {
            var v24528 = args$$5.members;
            var v22200 = v24528.length;
            v17537 = v22200 > 0
          }
          var v10159 = v17537;
          if(v10159) {
            JAMScript.call(this.writeToOutput, this, [", "]);
            var v17538 = TypeScript$$12.TokenID;
            var v10158 = v17538.Comma;
            JAMScript.call(this.emitJavascriptList, this, [args$$5, ", ", v10158, false, false, false])
          }
          JAMScript.call(this.writeToOutput, this, [")"])
        }else {
          var v17539 = baseExpr.type;
          if(v17539) {
            var v22201 = baseExpr.type;
            v17539 = JAMScript.call(v22201.isClassInstance, v22201, [])
          }
          var v10161 = v17539;
          if(v10161) {
            JAMScript.call(this.emitIndent, this, []);
            var v22202 = classDecl.name;
            var v17540 = v22202.actualText;
            var v10160 = v17540 + "._super.constructor";
            JAMScript.call(this.writeToOutput, this, [v10160]);
            JAMScript.call(this.writeToOutput, this, [".call(this)"])
          }
        }
        i$$41 = i$$41 + 1;
        v10163 = i$$41 < basesLen
      }
      JAMScript.call(this.recordSourceMappingEnd, this, [classDecl]);
      return
    }
    function v458(callNode, target$$40, args$$4) {
      var v17541 = JAMScript.call(this.emitSuperCall, this, [callNode]);
      var v10179 = !v17541;
      if(v10179) {
        var v22203 = callNode.flags;
        var v24529 = TypeScript$$12.ASTFlags;
        var v22204 = v24529.ClassBaseConstructorCall;
        var v17542 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v22203, v22204]);
        var v10178 = !v17542;
        if(v10178) {
          var v22205 = target$$40.nodeType;
          var v24530 = TypeScript$$12.NodeType;
          var v22206 = v24530.FuncDecl;
          var v17543 = v22205 == v22206;
          if(v17543) {
            var v22207 = target$$40.isParenthesized;
            v17543 = !v22207
          }
          var v10164 = v17543;
          if(v10164) {
            JAMScript.call(this.writeToOutput, this, ["("])
          }
          var v24531 = callNode.target;
          var v22208 = v24531.nodeType;
          var v24532 = TypeScript$$12.NodeType;
          var v22209 = v24532.Super;
          var v17544 = v22208 == v22209;
          if(v17544) {
            var v24533 = this.emitState;
            var v22210 = v24533.container;
            var v22211 = EmitContainer.Constructor;
            v17544 = v22210 == v22211
          }
          var v10166 = v17544;
          if(v10166) {
            JAMScript.call(this.writeToOutput, this, ["_super.call"])
          }else {
            var v17545 = TypeScript$$12.TokenID;
            var v10165 = v17545.OpenParen;
            JAMScript.call(this.emitJavascript, this, [target$$40, v10165, false])
          }
          var v22212 = target$$40.nodeType;
          var v24534 = TypeScript$$12.NodeType;
          var v22213 = v24534.FuncDecl;
          var v17546 = v22212 == v22213;
          if(v17546) {
            var v22214 = target$$40.isParenthesized;
            v17546 = !v22214
          }
          var v10167 = v17546;
          if(v10167) {
            JAMScript.call(this.writeToOutput, this, [")"])
          }
          JAMScript.call(this.recordSourceMappingStart, this, [args$$4]);
          JAMScript.call(this.writeToOutput, this, ["("]);
          var v24535 = callNode.target;
          var v22215 = v24535.nodeType;
          var v24536 = TypeScript$$12.NodeType;
          var v22216 = v24536.Super;
          var v17547 = v22215 == v22216;
          if(v17547) {
            var v24537 = this.emitState;
            var v22217 = v24537.container;
            var v22218 = EmitContainer.Constructor;
            v17547 = v22217 == v22218
          }
          var v10169 = v17547;
          if(v10169) {
            JAMScript.call(this.writeToOutput, this, ["this"]);
            var v17548 = args$$4;
            if(v17548) {
              var v22219 = args$$4.members;
              v17548 = v22219.length
            }
            var v10168 = v17548;
            if(v10168) {
              JAMScript.call(this.writeToOutput, this, [", "])
            }
          }
          var v17549 = TypeScript$$12.TokenID;
          var v10170 = v17549.Comma;
          JAMScript.call(this.emitJavascriptList, this, [args$$4, ", ", v10170, false, false, false]);
          JAMScript.call(this.writeToOutput, this, [")"]);
          JAMScript.call(this.recordSourceMappingEnd, this, [args$$4])
        }else {
          var v10171 = this.indenter;
          JAMScript.call(v10171.decreaseIndent, v10171, []);
          var v10172 = this.indenter;
          JAMScript.call(v10172.decreaseIndent, v10172, []);
          var v10173 = TypeScript$$12.ASTList;
          var constructorCall = JAMScript.new(v10173, []);
          var v10174 = constructorCall.members;
          v10174[0] = callNode;
          var v10175 = this.thisClassNode;
          JAMScript.call(this.emitConstructorCalls, this, [constructorCall, v10175]);
          var v10176 = this.indenter;
          JAMScript.call(v10176.increaseIndent, v10176, []);
          var v10177 = this.indenter;
          JAMScript.call(v10177.increaseIndent, v10177, [])
        }
      }
      return
    }
    function v457(dotExpr$$2) {
      var v22220 = this.emitOptions;
      var v17550 = v22220.propagateConstants;
      var v10180 = !v17550;
      if(v10180) {
        return false
      }
      var propertyName$$7 = dotExpr$$2.operand2;
      var v17551 = propertyName$$7;
      if(v17551) {
        var v22221 = propertyName$$7.sym;
        if(v22221) {
          var v24538 = propertyName$$7.sym;
          v22221 = JAMScript.call(v24538.isVariable, v24538, [])
        }
        v17551 = v22221
      }
      var v10186 = v17551;
      if(v10186) {
        var v22222 = propertyName$$7.sym;
        var v17552 = v22222.flags;
        var v22223 = TypeScript$$12.SymbolFlags;
        var v17553 = v22223.Constant;
        var v10185 = JAMScript.call(TypeScript$$12.hasFlag, TypeScript$$12, [v17552, v17553]);
        if(v10185) {
          var v17554 = propertyName$$7.sym;
          var v10184 = v17554.declAST;
          if(v10184) {
            var v10181 = propertyName$$7.sym;
            var boundDecl = v10181.declAST;
            var v17555 = boundDecl.init;
            if(v17555) {
              var v24539 = boundDecl.init;
              var v22224 = v24539.nodeType;
              var v24540 = TypeScript$$12.NodeType;
              var v22225 = v24540.NumberLit;
              v17555 = v22224 == v22225
            }
            var v10183 = v17555;
            if(v10183) {
              var numLit = boundDecl.init;
              var v17556 = numLit.value;
              var v10182 = JAMScript.call(v17556.toString, v17556, []);
              JAMScript.call(this.writeToOutput, this, [v10182]);
              var comment$$1 = " /* ";
              var v17557 = propertyName$$7.actualText;
              comment$$1 = comment$$1 + v17557;
              comment$$1 = comment$$1 + " */ ";
              JAMScript.call(this.writeToOutput, this, [comment$$1]);
              return true
            }
          }
        }
      }
      return false
    }
    function v456(target$$39, args$$3) {
      JAMScript.call(this.writeToOutput, this, ["new "]);
      var v17558 = target$$39.nodeType;
      var v22226 = TypeScript$$12.NodeType;
      var v17559 = v22226.TypeRef;
      var v10192 = v17558 == v17559;
      if(v10192) {
        var typeRef = target$$39;
        var v10189 = typeRef.arrayCount;
        if(v10189) {
          JAMScript.call(this.writeToOutput, this, ["Array()"])
        }else {
          var v10187 = typeRef.term;
          var v17560 = TypeScript$$12.TokenID;
          var v10188 = v17560.Tilde;
          JAMScript.call(this.emitJavascript, this, [v10187, v10188, false]);
          JAMScript.call(this.writeToOutput, this, ["()"])
        }
      }else {
        var v17561 = TypeScript$$12.TokenID;
        var v10190 = v17561.Tilde;
        JAMScript.call(this.emitJavascript, this, [target$$39, v10190, false]);
        JAMScript.call(this.recordSourceMappingStart, this, [args$$3]);
        JAMScript.call(this.writeToOutput, this, ["("]);
        var v17562 = TypeScript$$12.TokenID;
        var v10191 = v17562.Comma;
        JAMScript.call(this.emitJavascriptList, this, [args$$3, ", ", v10191, false, false, false]);
        JAMScript.call(this.writeToOutput, this, [")"]);
        JAMScript.call(this.recordSourceMappingEnd, this, [args$$3])
      }
      return
    }
    function v455(content$$3) {
      JAMScript.call(this.writeToOutput, this, ["["]);
      if(content$$3) {
        JAMScript.call(this.writeLineToOutput, this, [""]);
        var v10193 = this.indenter;
        JAMScript.call(v10193.increaseIndent, v10193, []);
        var v17563 = TypeScript$$12.TokenID;
        var v10194 = v17563.Comma;
        JAMScript.call(this.emitJavascriptList, this, [content$$3, ", ", v10194, true, false, false]);
        var v10195 = this.indenter;
        JAMScript.call(v10195.decreaseIndent, v10195, []);
        JAMScript.call(this.emitIndent, this, [])
      }
      JAMScript.call(this.writeToOutput, this, ["]"]);
      return
    }
    function v454(content$$2) {
      JAMScript.call(this.writeLineToOutput, this, ["{"]);
      var v10196 = this.indenter;
      JAMScript.call(v10196.increaseIndent, v10196, []);
      var inObjectLiteral = JAMScript.call(this.setInObjectLiteral, this, [true]);
      var v17564 = TypeScript$$12.TokenID;
      var v10197 = v17564.Comma;
      JAMScript.call(this.emitJavascriptList, this, [content$$2, ",", v10197, true, false, false]);
      JAMScript.call(this.setInObjectLiteral, this, [inObjectLiteral]);
      var v10198 = this.indenter;
      JAMScript.call(v10198.decreaseIndent, v10198, []);
      JAMScript.call(this.emitIndent, this, []);
      JAMScript.call(this.writeToOutput, this, ["}"]);
      return
    }
    function v453(ast$$15, pre$$10) {
      var v10199;
      if(pre$$10) {
        v10199 = ast$$15.preComments
      }else {
        v10199 = ast$$15.postComments
      }
      var comments$$4 = v10199;
      var v17565 = ast$$15.isParenthesized;
      if(v17565) {
        v17565 = !pre$$10
      }
      var v10200 = v17565;
      if(v10200) {
        JAMScript.call(this.writeToOutput, this, [")"])
      }
      var v22227 = this.emitOptions;
      var v17566 = v22227.emitComments;
      if(v17566) {
        var v22228 = comments$$4;
        if(v22228) {
          var v24541 = comments$$4.length;
          v22228 = v24541 != 0
        }
        v17566 = v22228
      }
      var v10203 = v17566;
      if(v10203) {
        var i$$40 = 0;
        var v17567 = comments$$4.length;
        var v10202 = i$$40 < v17567;
        for(;v10202;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v10201 = comments$$4[i$$40]
          }
          JAMScript.call(this.emitCommentInPlace, this, [v10201]);
          i$$40 = i$$40 + 1;
          var v17568 = comments$$4.length;
          v10202 = i$$40 < v17568
        }
      }
      var v17569 = ast$$15.isParenthesized;
      if(v17569) {
        v17569 = pre$$10
      }
      var v10204 = v17569;
      if(v10204) {
        JAMScript.call(this.writeToOutput, this, ["("])
      }
      return
    }
    function v452(comment) {
      JAMScript.call(this.recordSourceMappingStart, this, [comment]);
      var text$$10 = JAMScript.call(comment.getText, comment, []);
      var hadNewLine = false;
      var v10212 = comment.isBlockComment;
      if(v10212) {
        var v22229 = this.emitState;
        var v17570 = v22229.column;
        var v10205 = v17570 == 0;
        if(v10205) {
          JAMScript.call(this.emitIndent, this, [])
        }
        var v10206 = text$$10[0];
        JAMScript.call(this.writeToOutput, this, [v10206]);
        var v22230 = text$$10.length;
        var v17571 = v22230 > 1;
        var v22231 = !v17571;
        if(v22231) {
          v17571 = comment.endsLine
        }
        var v10209 = v17571;
        if(v10209) {
          JAMScript.call(this.writeLineToOutput, this, [""]);
          var i$$39 = 1;
          var v17572 = text$$10.length;
          var v10208 = i$$39 < v17572;
          for(;v10208;) {
            JAMScript.call(this.emitIndent, this, []);
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v10207 = text$$10[i$$39]
            }
            JAMScript.call(this.writeLineToOutput, this, [v10207]);
            i$$39 = i$$39 + 1;
            var v17573 = text$$10.length;
            v10208 = i$$39 < v17573
          }
          hadNewLine = true
        }
      }else {
        var v22232 = this.emitState;
        var v17574 = v22232.column;
        var v10210 = v17574 == 0;
        if(v10210) {
          JAMScript.call(this.emitIndent, this, [])
        }
        var v10211 = text$$10[0];
        JAMScript.call(this.writeLineToOutput, this, [v10211]);
        hadNewLine = true
      }
      if(hadNewLine) {
        JAMScript.call(this.emitIndent, this, [])
      }else {
        JAMScript.call(this.writeToOutput, this, [" "])
      }
      JAMScript.call(this.recordSourceMappingEnd, this, [comment]);
      return
    }
    function v451() {
      var v10213 = JAMScript.call(this.getIndentString, this, []);
      JAMScript.call(this.writeToOutput, this, [v10213]);
      return
    }
    function v450() {
      var v17575 = this.emitOptions;
      var v10215 = v17575.minWhitespace;
      if(v10215) {
        return""
      }else {
        var v10214 = this.indenter;
        return JAMScript.call(v10214.getIndent, v10214, [])
      }
      return
    }
    function v449(c$$5) {
      var v10216 = this.emitState;
      var temp$$9 = v10216.container;
      var v10217 = this.emitState;
      v10217.container = c$$5;
      return temp$$9
    }
    function v448(val$$5) {
      var v10218 = this.emitState;
      var temp$$8 = v10218.inObjectLiteral;
      var v10219 = this.emitState;
      v10219.inObjectLiteral = val$$5;
      return temp$$8
    }
    function v447(count$$6) {
      var v10220 = this.varListCountStack;
      var v22233 = this.varListCountStack;
      var v17576 = v22233.length;
      var v10221 = v17576 - 1;
      v10220[v10221] = count$$6;
      return
    }
    function v446(ast$$14) {
      JAMScript.call(this.emitIndent, this, []);
      JAMScript.call(this.recordSourceMappingStart, this, [ast$$14]);
      var v10222 = this.captureThisStmtString;
      JAMScript.call(this.writeToOutput, this, [v10222]);
      JAMScript.call(this.recordSourceMappingEnd, this, [ast$$14]);
      JAMScript.call(this.writeLineToOutput, this, [""]);
      return
    }
    function v445(s$$12) {
      var v17577 = this.emitOptions;
      var v10227 = v17577.minWhitespace;
      if(v10227) {
        JAMScript.call(this.writeToOutput, this, [s$$12]);
        var v17578 = s$$12.length;
        var v10223 = v17578 - 1;
        var c$$4 = JAMScript.call(s$$12.charCodeAt, s$$12, [v10223]);
        var v24542 = TypeScript$$12.LexCodeSpace;
        var v22234 = c$$4 == v24542;
        var v24544 = !v22234;
        if(v24544) {
          var v25611 = TypeScript$$12.LexCodeSMC;
          var v24543 = c$$4 == v25611;
          var v25613 = !v24543;
          if(v25613) {
            var v25612 = TypeScript$$12.LexCodeLBR;
            v24543 = c$$4 == v25612
          }
          v22234 = v24543
        }
        var v17579 = v22234;
        var v10224 = !v17579;
        if(v10224) {
          JAMScript.call(this.writeToOutput, this, [" "])
        }
      }else {
        var v10225 = this.outfile;
        JAMScript.call(v10225.WriteLine, v10225, [s$$12]);
        var v10226 = this.emitState;
        v10226.column = 0;
        var v17580 = this.emitState;
        var v24545 = this.emitState;
        var v22235 = v24545.line;
        v17580.line = v22235 + 1
      }
      return
    }
    function v444(s$$11) {
      var v17581 = this.emitOptions;
      var v10228 = v17581.minWhitespace;
      if(v10228) {
        s$$11 = s$$11.replace(/[\s]*/g, "")
      }
      JAMScript.call(this.writeToOutput, this, [s$$11]);
      return
    }
    function v443(s$$10) {
      var v10229 = this.outfile;
      JAMScript.call(v10229.Write, v10229, [s$$10]);
      var v10230 = this.emitState;
      var v22236 = v10230.column;
      var v22237 = s$$10.length;
      v10230.column = v22236 + v22237;
      return
    }
    function v442(mapper) {
      var v10231 = this.allSourceMappers;
      JAMScript.call(v10231.push, v10231, [mapper]);
      this.sourceMapper = mapper;
      return
    }
    function Emitter$$1(checker$$2, emittingFileName, outfile$$1, emitOptions$$1, errorReporter$$1) {
      this.checker = checker$$2;
      this.emittingFileName = emittingFileName;
      this.outfile = outfile$$1;
      this.emitOptions = emitOptions$$1;
      this.errorReporter = errorReporter$$1;
      this.prologueEmitted = false;
      this.thisClassNode = null;
      this.thisFnc = null;
      this.moduleDeclList = [];
      this.moduleName = "";
      var v27470 = JAMScript.new(EmitState, []);
      this.emitState = v27470;
      var v27471 = JAMScript.new(Indenter, []);
      this.indenter = v27471;
      this.ambientModule = false;
      this.modAliasId = null;
      this.firstModAlias = null;
      this.allSourceMappers = [];
      this.sourceMapper = null;
      this.captureThisStmtString = "var _this = this;";
      this.varListCountStack = [0];
      return
    }
    var v10232 = Emitter$$1.prototype;
    v10232.setSourceMappings = v442;
    var v10233 = Emitter$$1.prototype;
    v10233.writeToOutput = v443;
    var v10234 = Emitter$$1.prototype;
    v10234.writeToOutputTrimmable = v444;
    var v10235 = Emitter$$1.prototype;
    v10235.writeLineToOutput = v445;
    var v10236 = Emitter$$1.prototype;
    v10236.writeCaptureThisStatement = v446;
    var v10237 = Emitter$$1.prototype;
    v10237.setInVarBlock = v447;
    var v10238 = Emitter$$1.prototype;
    v10238.setInObjectLiteral = v448;
    var v10239 = Emitter$$1.prototype;
    v10239.setContainer = v449;
    var v10240 = Emitter$$1.prototype;
    v10240.getIndentString = v450;
    var v10241 = Emitter$$1.prototype;
    v10241.emitIndent = v451;
    var v10242 = Emitter$$1.prototype;
    v10242.emitCommentInPlace = v452;
    var v10243 = Emitter$$1.prototype;
    v10243.emitParensAndCommentsInPlace = v453;
    var v10244 = Emitter$$1.prototype;
    v10244.emitObjectLiteral = v454;
    var v10245 = Emitter$$1.prototype;
    v10245.emitArrayLiteral = v455;
    var v10246 = Emitter$$1.prototype;
    v10246.emitNew = v456;
    var v10247 = Emitter$$1.prototype;
    v10247.tryEmitConstant = v457;
    var v10248 = Emitter$$1.prototype;
    v10248.emitCall = v458;
    var v10249 = Emitter$$1.prototype;
    v10249.emitConstructorCalls = v459;
    var v10250 = Emitter$$1.prototype;
    v10250.emitInnerFunction = v460;
    var v10251 = Emitter$$1.prototype;
    v10251.emitJavascriptModule = v461;
    var v10252 = Emitter$$1.prototype;
    v10252.emitIndex = v462;
    var v10253 = Emitter$$1.prototype;
    v10253.emitStringLiteral = v463;
    var v10254 = Emitter$$1.prototype;
    v10254.emitJavascriptFunction = v464;
    var v10255 = Emitter$$1.prototype;
    v10255.emitAmbientVarDecl = v465;
    var v10256 = Emitter$$1.prototype;
    v10256.varListCount = v466;
    var v10257 = Emitter$$1.prototype;
    v10257.emitVarDeclVar = v467;
    var v10258 = Emitter$$1.prototype;
    v10258.onEmitVar = v468;
    var v10259 = Emitter$$1.prototype;
    v10259.emitJavascriptVarDecl = v469;
    var v10260 = Emitter$$1.prototype;
    v10260.declEnclosed = v470;
    var v10261 = Emitter$$1.prototype;
    v10261.emitJavascriptName = v471;
    var v10262 = Emitter$$1.prototype;
    v10262.emitJavascriptStatements = v472;
    var v10263 = Emitter$$1.prototype;
    v10263.emitBareJavascriptStatements = v473;
    var v10264 = Emitter$$1.prototype;
    v10264.recordSourceMappingNameStart = v474;
    var v10265 = Emitter$$1.prototype;
    v10265.recordSourceMappingNameEnd = v475;
    var v10266 = Emitter$$1.prototype;
    v10266.recordSourceMappingStart = v476;
    var v10267 = Emitter$$1.prototype;
    v10267.recordSourceMappingEnd = v477;
    var v10268 = Emitter$$1.prototype;
    v10268.Close = v478;
    var v10269 = Emitter$$1.prototype;
    v10269.emitJavascriptList = v479;
    var v10270 = Emitter$$1.prototype;
    v10270.emitJavascript = v480;
    var v10271 = Emitter$$1.prototype;
    v10271.emitPropertyAccessor = v481;
    var v10272 = Emitter$$1.prototype;
    v10272.emitPrototypeMember = v482;
    var v10273 = Emitter$$1.prototype;
    v10273.emitAddBaseMethods = v484;
    var v10274 = Emitter$$1.prototype;
    v10274.emitJavascriptClass = v485;
    var v10275 = Emitter$$1.prototype;
    v10275.emitPrologue = v486;
    var v10276 = Emitter$$1.prototype;
    v10276.emitSuperReference = v487;
    var v10277 = Emitter$$1.prototype;
    v10277.emitSuperCall = v488;
    var v10278 = Emitter$$1.prototype;
    v10278.emitThis = v489;
    Emitter$$1.shouldCaptureThis = shouldCaptureThis;
    var v10279 = Emitter$$1.prototype;
    v10279.createFile = v490;
    return Emitter$$1
  }
  function v441() {
    function v440() {
      var v10280 = Indenter$$1.indentStrings;
      var v10281 = this.indentAmt;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var indentString = v10280[v10281]
      }
      var v10285 = indentString === undefined;
      if(v10285) {
        indentString = "";
        var i$$38 = 0;
        var v17582 = this.indentAmt;
        var v10282 = i$$38 < v17582;
        for(;v10282;) {
          var v17583 = Indenter$$1.indentStepString;
          indentString = indentString + v17583;
          var v17584 = Indenter$$1.indentStep;
          i$$38 = i$$38 + v17584;
          var v17585 = this.indentAmt;
          v10282 = i$$38 < v17585
        }
        var v10283 = Indenter$$1.indentStrings;
        var v10284 = this.indentAmt;
        JAMScript.set(v10283, v10284, indentString)
      }
      return indentString
    }
    function v439() {
      var v17586 = this.indentAmt;
      var v17587 = Indenter$$1.indentStep;
      this.indentAmt = v17586 - v17587;
      return
    }
    function v438() {
      var v17588 = this.indentAmt;
      var v17589 = Indenter$$1.indentStep;
      this.indentAmt = v17588 + v17589;
      return
    }
    function Indenter$$1() {
      this.indentAmt = 0;
      return
    }
    Indenter$$1.indentStep = 4;
    Indenter$$1.indentStepString = "    ";
    Indenter$$1.indentStrings = [];
    var v10286 = Indenter$$1.prototype;
    v10286.increaseIndent = v438;
    var v10287 = Indenter$$1.prototype;
    v10287.decreaseIndent = v439;
    var v10288 = Indenter$$1.prototype;
    v10288.getIndent = v440;
    return Indenter$$1
  }
  function v437() {
    function v436(fileName$$1, extensionChanger) {
      var v10293 = this.outputMany;
      if(v10293) {
        var updatedFileName = fileName$$1;
        var v17590 = this.outputOption;
        var v10291 = v17590 != "";
        if(v10291) {
          var v10289 = this.commonDirectoryPath;
          updatedFileName = fileName$$1.replace(v10289, "");
          var v10290 = this.outputOption;
          updatedFileName = v10290 + updatedFileName
        }
        return JAMScript.call(extensionChanger, null, [updatedFileName, false])
      }else {
        var v10292 = this.outputOption;
        return JAMScript.call(extensionChanger, null, [v10292, true])
      }
      return
    }
    function EmitOptions$$1(settings$$1) {
      this.ioHost = null;
      this.outputMany = true;
      this.commonDirectoryPath = "";
      this.minWhitespace = settings$$1.minWhitespace;
      this.propagateConstants = settings$$1.propagateConstants;
      this.emitComments = settings$$1.emitComments;
      this.outputOption = settings$$1.outputOption;
      return
    }
    var v10294 = EmitOptions$$1.prototype;
    v10294.mapOutputFileName = v436;
    return EmitOptions$$1
  }
  function v435() {
    function EmitState$$1() {
      this.column = 0;
      this.line = 0;
      this.pretty = false;
      this.inObjectLiteral = false;
      this.container = EmitContainer.Prog;
      return
    }
    return EmitState$$1
  }
  function v434(EmitContainer$$1) {
    EmitContainer$$1._map = [];
    var v10295 = EmitContainer$$1._map;
    v10295[0] = "Prog";
    EmitContainer$$1.Prog = 0;
    var v10296 = EmitContainer$$1._map;
    v10296[1] = "Module";
    EmitContainer$$1.Module = 1;
    var v10297 = EmitContainer$$1._map;
    v10297[2] = "DynamicModule";
    EmitContainer$$1.DynamicModule = 2;
    var v10298 = EmitContainer$$1._map;
    v10298[3] = "Class";
    EmitContainer$$1.Class = 3;
    var v10299 = EmitContainer$$1._map;
    v10299[4] = "Constructor";
    EmitContainer$$1.Constructor = 4;
    var v10300 = EmitContainer$$1._map;
    v10300[5] = "Function";
    EmitContainer$$1.Function = 5;
    var v10301 = EmitContainer$$1._map;
    v10301[6] = "Args";
    EmitContainer$$1.Args = 6;
    var v10302 = EmitContainer$$1._map;
    v10302[7] = "Interface";
    EmitContainer$$1.Interface = 7;
    return
  }
  var v17591 = TypeScript$$12.EmitContainer;
  var v22238 = !v17591;
  if(v22238) {
    v17591 = TypeScript$$12.EmitContainer = {}
  }
  var v10303 = v17591;
  v434(v10303);
  var EmitContainer = TypeScript$$12.EmitContainer;
  var EmitState = v435();
  TypeScript$$12.EmitState = EmitState;
  var EmitOptions = v437();
  TypeScript$$12.EmitOptions = EmitOptions;
  var Indenter = v441();
  TypeScript$$12.Indenter = Indenter;
  var Emitter = v491();
  TypeScript$$12.Emitter = Emitter;
  return
}
function v433(TypeScript$$11) {
  function v432() {
    function EmitSourceMapping(allSourceMappers) {
      function v431(sourceMappings) {
        var i$$37 = 0;
        var v17592 = sourceMappings.length;
        var v10309 = i$$37 < v17592;
        for(;v10309;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var sourceMapping = sourceMappings[i$$37]
          }
          var v10304 = sourceMapping.start;
          var v10305 = sourceMapping.nameIndex;
          JAMScript.call(recordSourceMapping, null, [v10304, v10305]);
          var v10306 = sourceMapping.childMappings;
          JAMScript.call(recordSourceMappingSiblings, null, [v10306]);
          var v10307 = sourceMapping.end;
          var v10308 = sourceMapping.nameIndex;
          JAMScript.call(recordSourceMapping, null, [v10307, v10308]);
          i$$37 = i$$37 + 1;
          var v17593 = sourceMappings.length;
          v10309 = i$$37 < v17593
        }
        return
      }
      function v430(mappedPosition, nameIndex) {
        var v17594 = recordedPosition != null;
        if(v17594) {
          var v24546 = recordedPosition.emittedColumn;
          var v24547 = mappedPosition.emittedColumn;
          var v22239 = v24546 == v24547;
          if(v22239) {
            var v24548 = recordedPosition.emittedLine;
            var v24549 = mappedPosition.emittedLine;
            v22239 = v24548 == v24549
          }
          v17594 = v22239
        }
        var v10310 = v17594;
        if(v10310) {
          return
        }
        var v17595 = mappedPosition.emittedLine;
        var v10312 = prevEmittedLine !== v17595;
        if(v10312) {
          var v17596 = mappedPosition.emittedLine;
          var v10311 = prevEmittedLine < v17596;
          for(;v10311;) {
            prevEmittedColumn = 0;
            mappingsString = mappingsString + ";";
            prevEmittedLine = prevEmittedLine + 1;
            var v17597 = mappedPosition.emittedLine;
            v10311 = prevEmittedLine < v17597
          }
          emitComma = false
        }else {
          if(emitComma) {
            mappingsString = mappingsString + ","
          }
        }
        var v17598 = TypeScript$$11.Base64VLQFormat;
        var v22240 = mappedPosition.emittedColumn;
        var v17599 = v22240 - prevEmittedColumn;
        var v10313 = JAMScript.call(v17598.encode, v17598, [v17599]);
        mappingsString = mappingsString + v10313;
        prevEmittedColumn = mappedPosition.emittedColumn;
        var v17600 = TypeScript$$11.Base64VLQFormat;
        var v17601 = currentSourceIndex - prevSourceIndex;
        var v10314 = JAMScript.call(v17600.encode, v17600, [v17601]);
        mappingsString = mappingsString + v10314;
        prevSourceIndex = currentSourceIndex;
        var v17602 = TypeScript$$11.Base64VLQFormat;
        var v24550 = mappedPosition.sourceLine;
        var v22241 = v24550 - 1;
        var v17603 = v22241 - prevSourceLine;
        var v10315 = JAMScript.call(v17602.encode, v17602, [v17603]);
        mappingsString = mappingsString + v10315;
        var v10316 = mappedPosition.sourceLine;
        prevSourceLine = v10316 - 1;
        var v17604 = TypeScript$$11.Base64VLQFormat;
        var v22242 = mappedPosition.sourceColumn;
        var v17605 = v22242 - prevSourceColumn;
        var v10317 = JAMScript.call(v17604.encode, v17604, [v17605]);
        mappingsString = mappingsString + v10317;
        prevSourceColumn = mappedPosition.sourceColumn;
        var v10319 = nameIndex >= 0;
        if(v10319) {
          var v17606 = TypeScript$$11.Base64VLQFormat;
          var v22243 = namesCount + nameIndex;
          var v17607 = v22243 - prevNameIndex;
          var v10318 = JAMScript.call(v17606.encode, v17606, [v17607]);
          mappingsString = mappingsString + v10318;
          prevNameIndex = namesCount + nameIndex
        }
        emitComma = true;
        recordedPosition = mappedPosition;
        return
      }
      var sourceMapper = allSourceMappers[0];
      var v10320 = sourceMapper.jsFile;
      var v22244 = sourceMapper.jsFileName;
      var v17608 = "//@ sourceMappingURL=" + v22244;
      var v17609 = SourceMapper$$1.MapFileExtension;
      var v10321 = v17608 + v17609;
      JAMScript.call(v10320.WriteLine, v10320, [v10321]);
      var sourceMapOut$$1 = sourceMapper.sourceMapOut;
      var mappingsString = "";
      var tsFiles = [];
      var prevEmittedColumn = 0;
      var prevEmittedLine = 0;
      var prevSourceColumn = 0;
      var prevSourceLine = 0;
      var prevSourceIndex = 0;
      var prevNameIndex = 0;
      var namesList = [];
      var namesCount = 0;
      var emitComma = false;
      var recordedPosition = null;
      var sourceMapperIndex = 0;
      var v17610 = allSourceMappers.length;
      var v10328 = sourceMapperIndex < v17610;
      for(;v10328;) {
        sourceMapper = allSourceMappers[sourceMapperIndex];
        var currentSourceIndex = tsFiles.length;
        var v10322 = sourceMapper.tsFileName;
        JAMScript.call(tsFiles.push, tsFiles, [v10322]);
        var v22245 = sourceMapper.names;
        var v17611 = v22245.length;
        var v10325 = v17611 > 0;
        if(v10325) {
          var v10323 = namesList.push;
          var v10324 = sourceMapper.names;
          JAMScript.call(v10323.apply, v10323, [namesList, v10324])
        }
        var recordSourceMapping = v430;
        var recordSourceMappingSiblings = v431;
        var v10326 = sourceMapper.sourceMappings;
        JAMScript.call(recordSourceMappingSiblings, null, [v10326, -1]);
        var v17612 = sourceMapper.names;
        var v10327 = v17612.length;
        namesCount = namesCount + v10327;
        sourceMapperIndex = sourceMapperIndex + 1;
        var v17613 = allSourceMappers.length;
        v10328 = sourceMapperIndex < v17613
      }
      var v10330 = mappingsString != "";
      if(v10330) {
        var v22246 = sourceMapper.jsFileName;
        var v17614 = {version:3, file:v22246, sources:tsFiles, names:namesList, mappings:mappingsString};
        var v10329 = JAMScript.call(JSON2.stringify, JSON2, [v17614]);
        JAMScript.call(sourceMapOut$$1.Write, sourceMapOut$$1, [v10329])
      }
      try {
        JAMScript.call(sourceMapOut$$1.Close, sourceMapOut$$1, [])
      }catch(ex) {
        var v10331 = sourceMapper.errorReporter;
        var v10332 = ex.message;
        JAMScript.call(v10331.emitterError, v10331, [null, v10332])
      }
      return
    }
    function SourceMapper$$1(tsFileName, jsFileName, jsFile, sourceMapOut, errorReporter) {
      this.jsFile = jsFile;
      this.sourceMapOut = sourceMapOut;
      this.errorReporter = errorReporter;
      this.sourceMappings = [];
      this.currentMappings = [];
      this.names = [];
      this.currentNameIndex = [];
      var v10333 = this.currentMappings;
      var v10334 = this.sourceMappings;
      JAMScript.call(v10333.push, v10333, [v10334]);
      jsFileName = JAMScript.call(TypeScript$$11.switchToForwardSlashes, TypeScript$$11, [jsFileName]);
      var v27472 = JAMScript.call(TypeScript$$11.getPrettyName, TypeScript$$11, [jsFileName, false, true]);
      this.jsFileName = v27472;
      var v10335 = this.jsFileName;
      var removalIndex = jsFileName.lastIndexOf(v10335);
      var fixedPath = JAMScript.call(jsFileName.substring, jsFileName, [0, removalIndex]);
      var v27473 = JAMScript.call(TypeScript$$11.getRelativePathToFixedPath, TypeScript$$11, [fixedPath, tsFileName]);
      this.tsFileName = v27473;
      return
    }
    SourceMapper$$1.MapFileExtension = ".map";
    SourceMapper$$1.EmitSourceMapping = EmitSourceMapping;
    return SourceMapper$$1
  }
  function v429() {
    function SourceMapping$$1() {
      var v27474 = JAMScript.new(SourceMapPosition, []);
      this.start = v27474;
      var v27475 = JAMScript.new(SourceMapPosition, []);
      this.end = v27475;
      this.nameIndex = -1;
      this.childMappings = [];
      return
    }
    return SourceMapping$$1
  }
  function v428() {
    function SourceMapPosition$$1() {
      return
    }
    return SourceMapPosition$$1
  }
  var SourceMapPosition = v428();
  TypeScript$$11.SourceMapPosition = SourceMapPosition;
  var SourceMapping = v429();
  TypeScript$$11.SourceMapping = SourceMapping;
  var SourceMapper = v432();
  TypeScript$$11.SourceMapper = SourceMapper;
  return
}
function v427() {
  function v426(text$$9, reviver) {
    function v425(a$$3) {
      var v24551 = JAMScript.call(a$$3.charCodeAt, a$$3, [0]);
      var v22247 = JAMScript.call(v24551.toString, v24551, [16]);
      var v17615 = "0000" + v22247;
      var v10336 = v17615.slice(-4);
      return"\\u" + v10336
    }
    function walk$$1(holder$$1, key$$31) {
      var k$$6 = null;
      var v$$1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var value$$35 = holder$$1[key$$31]
      }
      var v17616 = value$$35;
      if(v17616) {
        var v22248 = typeof value$$35;
        v17616 = v22248 === "object"
      }
      var v10339 = v17616;
      if(v10339) {
        for(k$$6 in value$$35) {
          var v22249 = Object.prototype;
          var v17617 = v22249.hasOwnProperty;
          var v10338 = JAMScript.call(v17617.call, v17617, [value$$35, k$$6]);
          if(v10338) {
            v$$1 = walk$$1(value$$35, k$$6);
            var v10337 = v$$1 !== undefined;
            if(v10337) {
              JAMScript.set(value$$35, k$$6, v$$1)
            }else {
              delete value$$35[k$$6]
            }
          }
        }
      }
      return JAMScript.call(reviver.call, reviver, [holder$$1, key$$31, value$$35])
    }
    var j$$2;
    text$$9 = String(text$$9);
    cx.lastIndex = 0;
    var v10340 = cx.test(text$$9);
    if(v10340) {
      text$$9 = text$$9.replace(cx, v425)
    }
    var v24552 = text$$9.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@");
    var v22250 = v24552.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]");
    var v17618 = v22250.replace(/(?:^|:|,)(?:\s*\[)+/g, "");
    var v10343 = /^[\],:{}\s]*$/.test(v17618);
    if(v10343) {
      var v17619 = "(" + text$$9;
      var v10341 = v17619 + ")";
      if(JAMScript.isEval(eval)) {
        j$$2 = eval("introspect(JAMScript.introspectors.processAll) { " + v10341 + " }")
      }else {
        j$$2 = JAMScript.call(eval, null, [v10341])
      }
      var v10342;
      var v22251 = typeof reviver;
      var v17621 = v22251 === "function";
      if(v17621) {
        var v17620 = {"":j$$2};
        v10342 = walk$$1(v17620, "")
      }else {
        v10342 = j$$2
      }
      return v10342
    }
    throw new SyntaxError("JSON.parse");
  }
  function v424(value$$34, replacer, space) {
    var i$$36;
    gap = "";
    indent$$3 = "";
    var v17622 = typeof space;
    var v10346 = v17622 === "number";
    if(v10346) {
      i$$36 = 0;
      var v10344 = i$$36 < space;
      for(;v10344;) {
        indent$$3 = indent$$3 + " ";
        i$$36 = i$$36 + 1;
        v10344 = i$$36 < space
      }
    }else {
      var v17623 = typeof space;
      var v10345 = v17623 === "string";
      if(v10345) {
        indent$$3 = space
      }
    }
    rep = replacer;
    var v17624 = replacer;
    if(v17624) {
      var v24553 = typeof replacer;
      var v22252 = v24553 !== "function";
      if(v22252) {
        var v25614 = typeof replacer;
        var v24554 = v25614 !== "object";
        var v25616 = !v24554;
        if(v25616) {
          var v26222 = replacer.length;
          var v25615 = typeof v26222;
          v24554 = v25615 !== "number"
        }
        v22252 = v24554
      }
      v17624 = v22252
    }
    var v10347 = v17624;
    if(v10347) {
      throw new Error("JSON.stringify");
    }
    var v10348 = {"":value$$34};
    return str$$6("", v10348)
  }
  function v423(key$$30) {
    return JAMScript.call(this.valueOf, this, [])
  }
  function v422(key$$29) {
    var v10349;
    var v22253 = JAMScript.call(this.valueOf, this, []);
    var v17626 = isFinite(v22253);
    if(v17626) {
      var v26905 = this.getUTCFullYear();
      var v26890 = v26905 + "-";
      var v26914 = this.getUTCMonth();
      var v26906 = v26914 + 1;
      var v26891 = f(v26906);
      var v26867 = v26890 + v26891;
      var v26815 = v26867 + "-";
      var v26868 = this.getUTCDate();
      var v26816 = f(v26868);
      var v26737 = v26815 + v26816;
      var v26581 = v26737 + "T";
      var v26738 = this.getUTCHours();
      var v26582 = f(v26738);
      var v26223 = v26581 + v26582;
      var v25617 = v26223 + ":";
      var v26224 = this.getUTCMinutes();
      var v25618 = f(v26224);
      var v24555 = v25617 + v25618;
      var v22254 = v24555 + ":";
      var v24556 = this.getUTCSeconds();
      var v22255 = f(v24556);
      var v17625 = v22254 + v22255;
      v10349 = v17625 + "Z"
    }else {
      v10349 = null
    }
    return v10349
  }
  function f(n$$1) {
    var v10350;
    var v17627 = n$$1 < 10;
    if(v17627) {
      v10350 = "0" + n$$1
    }else {
      v10350 = n$$1
    }
    return v10350
  }
  function quote(string) {
    function v421(a$$2) {
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var c$$3 = meta[a$$2]
      }
      var v10351;
      var v22256 = typeof c$$3;
      var v17629 = v22256 === "string";
      if(v17629) {
        v10351 = c$$3
      }else {
        var v25619 = JAMScript.call(a$$2.charCodeAt, a$$2, [0]);
        var v24557 = JAMScript.call(v25619.toString, v25619, [16]);
        var v22257 = "0000" + v24557;
        var v17628 = v22257.slice(-4);
        v10351 = "\\u" + v17628
      }
      return v10351
    }
    escapable.lastIndex = 0;
    var v10352;
    var v17632 = escapable.test(string);
    if(v17632) {
      var v22258 = string.replace(escapable, v421);
      var v17630 = '"' + v22258;
      v10352 = v17630 + '"'
    }else {
      var v17631 = '"' + string;
      v10352 = v17631 + '"'
    }
    return v10352
  }
  function str$$6(key$$28, holder) {
    var i$$35;
    var k$$5 = null;
    var v;
    var length$$14;
    var mind = gap;
    var partial;
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      var value$$33 = holder[key$$28]
    }
    var v17633 = value$$33;
    if(v17633) {
      var v24558 = typeof value$$33;
      var v22259 = v24558 === "object";
      if(v22259) {
        var v25620 = value$$33.toJSON;
        var v24559 = typeof v25620;
        v22259 = v24559 === "function"
      }
      v17633 = v22259
    }
    var v10353 = v17633;
    if(v10353) {
      value$$33 = JAMScript.call(value$$33.toJSON, value$$33, [key$$28])
    }
    var v17634 = typeof rep;
    var v10354 = v17634 === "function";
    if(v10354) {
      value$$33 = JAMScript.call(rep.call, rep, [holder, key$$28, value$$33])
    }
    var v10369 = typeof value$$33;
    switch(v10369) {
      case "string":
        return quote(value$$33);
      case "number":
        var v10355;
        var v17635 = isFinite(value$$33);
        if(v17635) {
          v10355 = String(value$$33)
        }else {
          v10355 = "null"
        }
        return v10355;
      case "boolean":
      ;
      case "null":
        return String(value$$33);
      case "object":
        var v10356 = !value$$33;
        if(v10356) {
          return"null"
        }
        gap = gap + indent$$3;
        partial = [];
        var v24560 = Object.prototype;
        var v22260 = v24560.toString;
        var v17636 = JAMScript.call(v22260.apply, v22260, [value$$33, []]);
        var v10361 = v17636 === "[object Array]";
        if(v10361) {
          length$$14 = value$$33.length;
          i$$35 = 0;
          var v10359 = i$$35 < length$$14;
          for(;v10359;) {
            var v10357 = partial;
            var v10358 = i$$35;
            var v17637 = str$$6(i$$35, value$$33);
            var v22261 = !v17637;
            if(v22261) {
              v17637 = "null"
            }
            v10357[v10358] = v17637;
            i$$35 = i$$35 + 1;
            v10359 = i$$35 < length$$14
          }
          var v10360;
          var v22262 = partial.length;
          var v17639 = v22262 === 0;
          if(v17639) {
            v10360 = "[]"
          }else {
            var v17638;
            if(gap) {
              var v26225 = "[\n" + gap;
              var v26583 = ",\n" + gap;
              var v26226 = partial.join(v26583);
              var v25621 = v26225 + v26226;
              var v24561 = v25621 + "\n";
              var v22263 = v24561 + mind;
              v17638 = v22263 + "]"
            }else {
              var v24562 = partial.join(",");
              var v22264 = "[" + v24562;
              v17638 = v22264 + "]"
            }
            v10360 = v17638
          }
          v = v10360;
          gap = mind;
          return v
        }
        var v17640 = rep;
        if(v17640) {
          var v22265 = typeof rep;
          v17640 = v22265 === "object"
        }
        var v10367 = v17640;
        if(v10367) {
          length$$14 = rep.length;
          i$$35 = 0;
          var v10364 = i$$35 < length$$14;
          for(;v10364;) {
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v22266 = rep[i$$35]
            }
            var v17641 = typeof v22266;
            var v10363 = v17641 === "string";
            if(v10363) {
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                k$$5 = rep[i$$35]
              }
              v = str$$6(k$$5, value$$33);
              if(v) {
                var v22267 = quote(k$$5);
                var v24563;
                if(gap) {
                  v24563 = ": "
                }else {
                  v24563 = ":"
                }
                var v22268 = v24563;
                var v17642 = v22267 + v22268;
                var v10362 = v17642 + v;
                JAMScript.call(partial.push, partial, [v10362])
              }
            }
            i$$35 = i$$35 + 1;
            v10364 = i$$35 < length$$14
          }
        }else {
          for(k$$5 in value$$33) {
            var v22269 = Object.prototype;
            var v17643 = v22269.hasOwnProperty;
            var v10366 = JAMScript.call(v17643.call, v17643, [value$$33, k$$5]);
            if(v10366) {
              v = str$$6(k$$5, value$$33);
              if(v) {
                var v22270 = quote(k$$5);
                var v24564;
                if(gap) {
                  v24564 = ": "
                }else {
                  v24564 = ":"
                }
                var v22271 = v24564;
                var v17644 = v22270 + v22271;
                var v10365 = v17644 + v;
                JAMScript.call(partial.push, partial, [v10365])
              }
            }
          }
        }
        var v10368;
        var v22272 = partial.length;
        var v17646 = v22272 === 0;
        if(v17646) {
          v10368 = "{}"
        }else {
          var v17645;
          if(gap) {
            var v26227 = "{\n" + gap;
            var v26584 = ",\n" + gap;
            var v26228 = partial.join(v26584);
            var v25622 = v26227 + v26228;
            var v24565 = v25622 + "\n";
            var v22273 = v24565 + mind;
            v17645 = v22273 + "}"
          }else {
            var v24566 = partial.join(",");
            var v22274 = "{" + v24566;
            v17645 = v22274 + "}"
          }
          v10368 = v17645
        }
        v = v10368;
        gap = mind;
        return v
    }
    return
  }
  var v24567 = Date.prototype;
  var v22275 = v24567.toJSON;
  var v17647 = typeof v22275;
  var v10372 = v17647 !== "function";
  if(v10372) {
    var v10370 = Date.prototype;
    v10370.toJSON = v422;
    var strProto = String.prototype;
    var numProto = Number.prototype;
    var v10371 = Boolean.prototype;
    numProto.JSON = strProto.JSON = v10371.toJSON = v423
  }
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var gap;
  var indent$$3;
  var meta = {"\b":"\\b", "\t":"\\t", "\n":"\\n", "\f":"\\f", "\r":"\\r", '"':'\\"', "\\":"\\\\"};
  var rep;
  var v22276 = JSON2.stringify;
  var v17648 = typeof v22276;
  var v10373 = v17648 !== "function";
  if(v10373) {
    JSON2.stringify = v424
  }
  var v22277 = JSON2.parse;
  var v17649 = typeof v22277;
  var v10374 = v17649 !== "function";
  if(v10374) {
    JSON2.parse = v426
  }
  return
}
function v420(TypeScript$$10) {
  function v419() {
    function decode(inString) {
      var result$$6 = 0;
      var negative = false;
      var shift = 0;
      var i$$34 = 0;
      var v17650 = inString.length;
      var v10383 = i$$34 < v17650;
      for(;v10383;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v10375 = inString[i$$34]
        }
        var byte = JAMScript.call(Base64Format.decodeChar, Base64Format, [v10375]);
        var v10379 = i$$34 === 0;
        if(v10379) {
          var v17651 = byte & 1;
          var v10376 = v17651 === 1;
          if(v10376) {
            negative = true
          }
          var v10377 = byte >> 1;
          result$$6 = v10377 & 15
        }else {
          var v17652 = byte & 31;
          var v10378 = v17652 << shift;
          result$$6 = result$$6 | v10378
        }
        var v22278;
        var v24568 = i$$34 == 0;
        if(v24568) {
          v22278 = 4
        }else {
          v22278 = 5
        }
        var v17653 = v22278;
        shift = shift + v17653;
        var v17654 = byte & 32;
        var v10382 = v17654 === 32;
        if(v10382) {
        }else {
          var v17655;
          if(negative) {
            v17655 = -result$$6
          }else {
            v17655 = result$$6
          }
          var v10380 = v17655;
          var v17656 = i$$34 + 1;
          var v10381 = inString.substr(v17656);
          return{value:v10380, rest:v10381}
        }
        i$$34 = i$$34 + 1;
        var v17657 = inString.length;
        v10383 = i$$34 < v17657
      }
      var v17658 = 'Base64 value "' + inString;
      var v10384 = v17658 + '" finished with a continuation bit';
      throw new Error(v10384);
    }
    function encode$$1(inValue$$1) {
      var v10386 = inValue$$1 < 0;
      if(v10386) {
        var v17659 = -inValue$$1;
        var v10385 = v17659 << 1;
        inValue$$1 = v10385 + 1
      }else {
        inValue$$1 = inValue$$1 << 1
      }
      var encodedStr = "";
      var v10389 = inValue$$1 > 0;
      do {
        var currentDigit = inValue$$1 & 31;
        inValue$$1 = inValue$$1 >> 5;
        var v10387 = inValue$$1 > 0;
        if(v10387) {
          currentDigit = currentDigit | 32
        }
        var v10388 = JAMScript.call(Base64Format.encode, Base64Format, [currentDigit]);
        encodedStr = encodedStr + v10388;
        v10389 = inValue$$1 > 0
      }while(v10389);
      return encodedStr
    }
    function Base64VLQFormat$$1() {
      return
    }
    Base64VLQFormat$$1.encode = encode$$1;
    Base64VLQFormat$$1.decode = decode;
    return Base64VLQFormat$$1
  }
  function v418() {
    function decodeChar(inChar) {
      var v17660 = inChar.length;
      var v10392 = v17660 === 1;
      if(v10392) {
        var v10390 = Base64Format$$1.encodedValues;
        return v10390.indexOf(inChar)
      }else {
        var v17661 = '"' + inChar;
        var v10391 = v17661 + '" must have length 1';
        throw TypeError(v10391);
      }
      return
    }
    function encode(inValue) {
      var v10394 = inValue < 64;
      if(v10394) {
        var v10393 = Base64Format$$1.encodedValues;
        return v10393.charAt(inValue)
      }
      var v10395 = inValue + ": not a 64 based value";
      throw TypeError(v10395);
    }
    function Base64Format$$1() {
      return
    }
    Base64Format$$1.encodedValues = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    Base64Format$$1.encode = encode;
    Base64Format$$1.decodeChar = decodeChar;
    return Base64Format$$1
  }
  var Base64Format = v418();
  var Base64VLQFormat = v419();
  TypeScript$$10.Base64VLQFormat = Base64VLQFormat;
  return
}
function v417(TypeScript$$9) {
  function v416() {
    function v415(scope$$5, table$$1) {
      function v414(key$$27, sym$$2, binder) {
        JAMScript.call(binder.bindSymbol, binder, [scope$$5, sym$$2]);
        return
      }
      JAMScript.call(table$$1.map, table$$1, [v414, this]);
      return
    }
    function v413(scope$$4, symbol$$2) {
      function v412(id$$7) {
        return JAMScript.call(scope$$4.find, scope$$4, [id$$7, false, true])
      }
      var v17662 = symbol$$2.bound;
      var v10418 = !v17662;
      if(v10418) {
        var v10396 = this.checker;
        var prevLocationInfo = v10396.locationInfo;
        var v22279 = this.checker;
        var v17663 = v22279.units;
        if(v17663) {
          var v24569 = symbol$$2.unitIndex;
          var v22280 = v24569 >= 0;
          if(v22280) {
            var v24570 = symbol$$2.unitIndex;
            var v26229 = this.checker;
            var v25623 = v26229.units;
            var v24571 = v25623.length;
            v22280 = v24570 < v24571
          }
          v17663 = v22280
        }
        var v10398 = v17663;
        if(v10398) {
          var v10397 = this.checker;
          var v22281 = this.checker;
          var v17664 = v22281.units;
          var v17665 = symbol$$2.unitIndex;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            v10397.locationInfo = v17664[v17665]
          }
        }
        var v10416 = JAMScript.call(symbol$$2.kind, symbol$$2, []);
        switch(v10416) {
          case TypeScript$$9.SymbolKind.Type:
            var v17666 = symbol$$2.flags;
            var v22282 = TypeScript$$9.SymbolFlags;
            var v17667 = v22282.Bound;
            var v10399 = v17666 & v17667;
            if(v10399) {
              break
            }
            var typeSymbol = symbol$$2;
            var v17668 = typeSymbol;
            var v22283 = typeSymbol.flags;
            var v24572 = TypeScript$$9.SymbolFlags;
            var v22284 = v24572.Bound;
            v17668.flags = v22283 | v22284;
            var v17669 = typeSymbol.aliasLink;
            if(v17669) {
              var v24573 = typeSymbol.type;
              var v22285 = !v24573;
              if(v22285) {
                var v26230 = typeSymbol.aliasLink;
                var v25624 = v26230.alias;
                var v24574 = v25624.nodeType;
                var v25625 = TypeScript$$9.NodeType;
                var v24575 = v25625.Name;
                v22285 = v24574 == v24575
              }
              v17669 = v22285
            }
            var v10404 = v17669;
            if(v10404) {
              var v17670 = typeSymbol.aliasLink;
              var v10400 = v17670.alias;
              var modPath = v10400.text;
              var v10401 = this.checker;
              var v22286 = this.checker;
              var v17671 = v22286.locationInfo;
              var v10402 = v17671.filename;
              var modSym = JAMScript.call(v10401.findSymbolForDynamicModule, v10401, [modPath, v10402, v412]);
              if(modSym) {
                var v10403 = typeSymbol;
                var v27476 = JAMScript.call(modSym.getType, modSym, []);
                v10403.type = v27476
              }
            }
            var v17672 = typeSymbol.type;
            if(v17672) {
              var v22287 = typeSymbol.type;
              var v24576 = this.checker;
              var v22288 = v24576.gloModType;
              v17672 = v22287 != v22288
            }
            var v10411 = v17672;
            if(v10411) {
              var v10405 = typeSymbol.type;
              var v10406 = typeSymbol.instanceType;
              JAMScript.call(this.bindType, this, [scope$$4, v10405, v10406]);
              var v17673 = typeSymbol.type;
              var v10410 = JAMScript.call(v17673.isModuleType, v17673, []);
              if(v10410) {
                var i$$33 = 0;
                var v22289 = typeSymbol.expansions;
                var v17674 = v22289.length;
                var v10409 = i$$33 < v17674;
                for(;v10409;) {
                  var v17675 = typeSymbol.expansions;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v10407 = v17675[i$$33]
                  }
                  var v10408 = typeSymbol.instanceType;
                  JAMScript.call(this.bindType, this, [scope$$4, v10407, v10408]);
                  i$$33 = i$$33 + 1;
                  var v22290 = typeSymbol.expansions;
                  var v17676 = v22290.length;
                  v10409 = i$$33 < v17676
                }
              }
            }
            break;
          case TypeScript$$9.SymbolKind.Field:
            var v10412 = this.checker;
            var v17677 = symbol$$2.field;
            var v10413 = v17677.typeLink;
            JAMScript.call(v10412.resolveTypeLink, v10412, [scope$$4, v10413, false]);
            break;
          case TypeScript$$9.SymbolKind.Parameter:
            var v10414 = this.checker;
            var v17678 = symbol$$2.parameter;
            var v10415 = v17678.typeLink;
            JAMScript.call(v10414.resolveTypeLink, v10414, [scope$$4, v10415, true])
        }
        var v10417 = this.checker;
        v10417.locationInfo = prevLocationInfo
      }
      symbol$$2.bound = true;
      return
    }
    function v411(scope$$3, type$$26, instanceType$$1) {
      if(instanceType$$1) {
        JAMScript.call(this.bindType, this, [scope$$3, instanceType$$1, null])
      }
      var v10434 = JAMScript.call(type$$26.hasMembers, type$$26, []);
      if(v10434) {
        var members$$5 = type$$26.members;
        var ambientMembers = type$$26.ambientMembers;
        var typeMembers = JAMScript.call(type$$26.getAllEnclosedTypes, type$$26, []);
        var ambientTypeMembers = JAMScript.call(type$$26.getAllAmbientEnclosedTypes, type$$26, []);
        var v10419 = TypeScript$$9.SymbolTableScope;
        var v10420 = type$$26.symbol;
        var memberScope = JAMScript.new(v10419, [members$$5, ambientMembers, typeMembers, ambientTypeMembers, v10420]);
        var v10421 = TypeScript$$9.SymbolAggregateScope;
        var v10422 = type$$26.symbol;
        var agg = JAMScript.new(v10421, [v10422]);
        var v10423 = this.checker;
        var prevCurrentModDecl = v10423.currentModDecl;
        var v10424 = this.checker;
        var prevBindStatus = v10424.inBind;
        JAMScript.call(agg.addParentScope, agg, [memberScope]);
        JAMScript.call(agg.addParentScope, agg, [scope$$3]);
        var v10427 = JAMScript.call(type$$26.isModuleType, type$$26, []);
        if(v10427) {
          var v10425 = this.checker;
          var v17679 = type$$26.symbol;
          v10425.currentModDecl = v17679.declAST;
          var v10426 = this.checker;
          v10426.inBind = true
        }
        if(members$$5) {
          var v17680 = type$$26.members;
          var v10428 = v17680.allMembers;
          JAMScript.call(this.bind, this, [agg, v10428])
        }
        if(typeMembers) {
          var v10429 = typeMembers.allMembers;
          JAMScript.call(this.bind, this, [agg, v10429])
        }
        if(ambientMembers) {
          var v10430 = ambientMembers.allMembers;
          JAMScript.call(this.bind, this, [agg, v10430])
        }
        if(ambientTypeMembers) {
          var v10431 = ambientTypeMembers.allMembers;
          JAMScript.call(this.bind, this, [agg, v10431])
        }
        var v10432 = this.checker;
        v10432.currentModDecl = prevCurrentModDecl;
        var v10433 = this.checker;
        v10433.inBind = prevBindStatus
      }
      var v10435 = type$$26.extendsTypeLinks;
      if(v10435) {
        JAMScript.call(this.resolveBases, this, [scope$$3, type$$26])
      }
      var v10437 = type$$26.construct;
      if(v10437) {
        var v10436 = type$$26.construct;
        JAMScript.call(this.resolveSignatureGroup, this, [v10436, scope$$3, instanceType$$1])
      }
      var v10439 = type$$26.call;
      if(v10439) {
        var v10438 = type$$26.call;
        JAMScript.call(this.resolveSignatureGroup, this, [v10438, scope$$3, null])
      }
      var v10441 = type$$26.index;
      if(v10441) {
        var v10440 = type$$26.index;
        JAMScript.call(this.resolveSignatureGroup, this, [v10440, scope$$3, null])
      }
      var v10443 = type$$26.elementType;
      if(v10443) {
        var v10442 = type$$26.elementType;
        JAMScript.call(this.bindType, this, [scope$$3, v10442, null])
      }
      return
    }
    function v410(signatureGroup, scope$$2, instanceType) {
      var v10444 = signatureGroup.hasImplementation;
      var supplyVar = !v10444;
      var i$$32 = 0;
      var v10445 = signatureGroup.signatures;
      var len$$9 = v10445.length;
      var v10459 = i$$32 < len$$9;
      for(;v10459;) {
        var v10446 = signatureGroup.signatures;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var signature = v10446[i$$32]
        }
        if(instanceType) {
          var v10447 = signature.returnType;
          v10447.type = instanceType
        }else {
          var v10448 = this.checker;
          var v10449 = signature.returnType;
          JAMScript.call(v10448.resolveTypeLink, v10448, [scope$$2, v10449, supplyVar])
        }
        var v10450 = signature.parameters;
        var paramLen = v10450.length;
        var j$$1 = 0;
        var v10452 = j$$1 < paramLen;
        for(;v10452;) {
          var v17681 = signature.parameters;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v10451 = v17681[j$$1]
          }
          JAMScript.call(this.bindSymbol, this, [scope$$2, v10451]);
          j$$1 = j$$1 + 1;
          v10452 = j$$1 < paramLen
        }
        var v10458 = signature.hasVariableArgList;
        if(v10458) {
          var v10453 = signature.parameters;
          var v10454 = paramLen - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var lastParam = v10453[v10454]
          }
          lastParam.argsOffset = paramLen - 1;
          var v22291 = JAMScript.call(lastParam.getType, lastParam, []);
          var v17682 = JAMScript.call(v22291.isArray, v22291, []);
          var v10457 = !v17682;
          if(v10457) {
            var v17683 = this.checker;
            var v10455 = v17683.errorReporter;
            JAMScript.call(v10455.simpleErrorFromSym, v10455, [lastParam, "... parameter must have array type"]);
            var v17684 = lastParam.parameter;
            var v10456 = v17684.typeLink;
            var v17685 = this.checker;
            var v24577 = lastParam.parameter;
            var v22292 = v24577.typeLink;
            var v17686 = v22292.type;
            var v27477 = JAMScript.call(v17685.makeArrayType, v17685, [v17686]);
            v10456.type = v27477
          }
        }
        i$$32 = i$$32 + 1;
        v10459 = i$$32 < len$$9
      }
      return
    }
    function v409(scope$$1, type$$25) {
      var v10460 = type$$25;
      var v17687 = type$$25.extendsTypeLinks;
      var v27478 = JAMScript.call(this.resolveBaseTypeLinks, this, [v17687, scope$$1]);
      v10460.extendsList = v27478;
      var i$$31 = 0;
      var v10461 = type$$25.extendsList;
      var len$$8 = v10461.length;
      var derivedIsClass = JAMScript.call(type$$25.isClassInstance, type$$25, []);
      var v10470 = i$$31 < len$$8;
      for(;v10470;) {
        var v17688 = type$$25.extendsList;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v10462 = v17688[i$$31]
        }
        var baseIsClass = JAMScript.call(v10462.isClassInstance, v10462, []);
        var v22293 = type$$25.extendsList;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v17689 = v22293[i$$31]
        }
        var v22294 = this.checker;
        var v17690 = v22294.anyType;
        var v10469 = v17689 != v17690;
        if(v10469) {
          var v17691 = type$$25.extendsTypeLinks;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v10463 = v17691[i$$31]
          }
          var baseRef = v10463.ast;
          if(derivedIsClass) {
            var v10466 = !baseIsClass;
            if(v10466) {
              var v17692 = this.checker;
              var v10464 = v17692.errorReporter;
              var v26231 = type$$25.extendsList;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25626 = v26231[i$$31]
              }
              var v24578 = v25626.symbol;
              var v22295 = JAMScript.call(v24578.fullName, v24578, []);
              var v17693 = "A class may only extend other classes, " + v22295;
              var v10465 = v17693 + " is not a class.";
              JAMScript.call(v10464.simpleError, v10464, [baseRef, v10465])
            }
          }else {
            if(baseIsClass) {
              var v17694 = this.checker;
              var v10467 = v17694.errorReporter;
              var v26232 = type$$25.extendsList;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25627 = v26232[i$$31]
              }
              var v24579 = v25627.symbol;
              var v22296 = JAMScript.call(v24579.fullName, v24579, []);
              var v17695 = "An interface may only extend other interfaces, " + v22296;
              var v10468 = v17695 + " is a class.";
              JAMScript.call(v10467.simpleError, v10467, [baseRef, v10468])
            }
          }
        }
        i$$31 = i$$31 + 1;
        v10470 = i$$31 < len$$8
      }
      var v10471 = type$$25;
      var v17696 = type$$25.implementsTypeLinks;
      var v27479 = JAMScript.call(this.resolveBaseTypeLinks, this, [v17696, scope$$1]);
      v10471.implementsList = v27479;
      var v10478 = type$$25.implementsList;
      if(v10478) {
        i$$31 = 0;
        var v17697 = type$$25.implementsList;
        len$$8 = v17697.length;
        var v10477 = i$$31 < len$$8;
        for(;v10477;) {
          var v10472 = type$$25.implementsList;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var iface = v10472[i$$31]
          }
          var v17698 = type$$25.implementsTypeLinks;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v10473 = v17698[i$$31]
          }
          baseRef = v10473.ast;
          var v10476 = JAMScript.call(iface.isClassInstance, iface, []);
          if(v10476) {
            if(derivedIsClass) {
              var v17699 = this.checker;
              var v10474 = v17699.errorReporter;
              var v24580 = iface.symbol;
              var v22297 = JAMScript.call(v24580.fullName, v24580, []);
              var v17700 = "A class may only implement an interface; " + v22297;
              var v10475 = v17700 + " is a class.";
              JAMScript.call(v10474.simpleError, v10474, [baseRef, v10475])
            }
          }
          i$$31 = i$$31 + 1;
          v10477 = i$$31 < len$$8
        }
      }
      return
    }
    function v408(typeLinks, scope) {
      var extendsList$$3 = null;
      if(typeLinks) {
        extendsList$$3 = new Array;
        var i$$30 = 0;
        var len$$7 = typeLinks.length;
        var v10481 = i$$30 < len$$7;
        for(;v10481;) {
          var v10479 = extendsList$$3;
          var v10480 = i$$30;
          var v17701 = this.checker;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v17702 = typeLinks[i$$30]
          }
          var v27480 = JAMScript.call(v17701.resolveBaseTypeLink, v17701, [v17702, scope]);
          v10479[v10480] = v27480;
          i$$30 = i$$30 + 1;
          v10481 = i$$30 < len$$7
        }
      }
      return extendsList$$3
    }
    function Binder$$1(checker$$1) {
      this.checker = checker$$1;
      return
    }
    var v10482 = Binder$$1.prototype;
    v10482.resolveBaseTypeLinks = v408;
    var v10483 = Binder$$1.prototype;
    v10483.resolveBases = v409;
    var v10484 = Binder$$1.prototype;
    v10484.resolveSignatureGroup = v410;
    var v10485 = Binder$$1.prototype;
    v10485.bindType = v411;
    var v10486 = Binder$$1.prototype;
    v10486.bindSymbol = v413;
    var v10487 = Binder$$1.prototype;
    v10487.bind = v415;
    return Binder$$1
  }
  var Binder = v416();
  TypeScript$$9.Binder = Binder;
  return
}
function v407(TypeScript$$8) {
  function v406() {
    function v405(script$$6, position$$1) {
      var lineInfo = {line:-1, col:-1};
      var v17703 = script$$6.locationInfo;
      var v10488 = v17703.lineMap;
      JAMScript.call(TypeScript$$8.getSourceLineColFromMap, TypeScript$$8, [lineInfo, position$$1, v10488]);
      var v17704 = lineInfo.col;
      var v10489 = v17704 !== -1;
      if(v10489) {
        var v17705 = lineInfo;
        var v22298 = lineInfo.col;
        v17705.col = v22298 + 1
      }
      var v24581 = lineInfo.line;
      var v22299 = "(" + v24581;
      var v17706 = v22299 + ", ";
      var v17707 = lineInfo.col;
      var v10490 = v17706 + v17707;
      return v10490 + ")"
    }
    function v404(s$$9, targetLength, paddingString, leftPadding) {
      var v10491;
      if(leftPadding) {
        v10491 = ""
      }else {
        v10491 = s$$9
      }
      var result$$5 = v10491;
      var i$$29 = s$$9.length;
      var v10492 = i$$29 < targetLength;
      for(;v10492;) {
        result$$5 = result$$5 + paddingString;
        i$$29 = i$$29 + 1;
        v10492 = i$$29 < targetLength
      }
      var v17708;
      if(leftPadding) {
        v17708 = s$$9
      }else {
        v17708 = ""
      }
      var v10493 = v17708;
      result$$5 = result$$5 + v10493;
      return result$$5
    }
    function v403(linemap) {
      var result$$4 = "[";
      var i$$28 = 0;
      var v17709 = linemap.length;
      var v10495 = i$$28 < v17709;
      for(;v10495;) {
        var v10494 = i$$28 > 0;
        if(v10494) {
          result$$4 = result$$4 + ","
        }
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v17710 = linemap[i$$28]
        }
        result$$4 = result$$4 + v17710;
        i$$28 = i$$28 + 1;
        var v17711 = linemap.length;
        v10495 = i$$28 < v17711
      }
      result$$4 = result$$4 + "]";
      var v10496 = this.logger;
      var v10497 = "linemap: " + result$$4;
      JAMScript.call(v10496.log, v10496, [v10497]);
      return
    }
    function v402(script$$5, comments$$3, indent$$2) {
      var v10498 = comments$$3 == null;
      if(v10498) {
        return
      }
      var i$$27 = 0;
      var v17712 = comments$$3.length;
      var v10500 = i$$27 < v17712;
      for(;v10500;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v10499 = comments$$3[i$$27]
        }
        JAMScript.call(this.logNode, this, [script$$5, v10499, indent$$2]);
        i$$27 = i$$27 + 1;
        var v17713 = comments$$3.length;
        v10500 = i$$27 < v17713
      }
      return
    }
    function v401(script$$4, cur$$8, indent$$1) {
      var msg = JAMScript.call(this.addPadding, this, ["", indent$$1, "| ", true]);
      var v17714 = JAMScript.call(cur$$8.treeViewLabel, cur$$8, []);
      var v10501 = "+ " + v17714;
      msg = msg.concat(v10501);
      msg = JAMScript.call(this.addPadding, this, [msg, 70, " ", false]);
      var v17715 = cur$$8.minChar;
      var v10502 = JAMScript.call(this.addLineColumn, this, [script$$4, v17715]);
      msg = msg + v10502;
      msg = JAMScript.call(this.addPadding, this, [msg, 80, " ", false]);
      msg = msg + "=> ";
      var v17716 = cur$$8.limChar;
      var v10503 = JAMScript.call(this.addLineColumn, this, [script$$4, v17716]);
      msg = msg + v10503;
      msg = JAMScript.call(this.addPadding, this, [msg, 102, " ", false]);
      var v26585 = cur$$8.minChar;
      var v26233 = JAMScript.call(v26585.toString, v26585, []);
      var v25628 = JAMScript.call(this.addPadding, this, [v26233, 1, " ", true]);
      var v24582 = "[" + v25628;
      var v22300 = v24582 + ", ";
      var v25629 = cur$$8.limChar;
      var v24583 = JAMScript.call(v25629.toString, v25629, []);
      var v22301 = JAMScript.call(this.addPadding, this, [v24583, 1, " ", true]);
      var v17717 = v22300 + v22301;
      var v10504 = v17717 + "]";
      msg = msg.concat(v10504);
      msg = JAMScript.call(this.addPadding, this, [msg, 115, " ", false]);
      var v17718 = cur$$8.sym;
      var v10505 = "sym=" + v17718;
      msg = msg.concat(v10505);
      msg = JAMScript.call(this.addPadding, this, [msg, 135, " ", false]);
      var v22302;
      var v25630 = cur$$8.type;
      var v24585 = v25630 === null;
      if(v24585) {
        v22302 = "null"
      }else {
        var v24584 = cur$$8.type;
        v22302 = JAMScript.call(v24584.getTypeName, v24584, [])
      }
      var v17719 = v22302;
      var v10506 = "type=" + v17719;
      msg = msg.concat(v10506);
      var v10507 = this.logger;
      JAMScript.call(v10507.log, v10507, [msg]);
      return
    }
    function v400(script$$3) {
      function post$$6(cur$$7, parent$$42) {
        JAMScript.call(stack.pop, stack, []);
        return cur$$7
      }
      function pre$$9(cur$$6, parent$$41) {
        JAMScript.call(stack.push, stack, [cur$$6]);
        var v17720 = stack.length;
        var v10508 = v17720 - 1;
        var indent = v10508 * 2;
        var v10509 = cur$$6.preComments;
        JAMScript.call(_this.logComments, _this, [script$$3, v10509, indent]);
        JAMScript.call(_this.logNode, _this, [script$$3, cur$$6, indent]);
        var v10510 = cur$$6.postComments;
        JAMScript.call(_this.logComments, _this, [script$$3, v10510, indent]);
        return cur$$6
      }
      var _this = this;
      var v17721 = script$$3.locationInfo;
      var v10511 = v17721.lineMap;
      JAMScript.call(this.logLinemap, this, [v10511]);
      var stack = [];
      var v10512 = JAMScript.call(TypeScript$$8.getAstWalkerFactory, TypeScript$$8, []);
      JAMScript.call(v10512.walk, v10512, [script$$3, pre$$9, post$$6]);
      return
    }
    function AstLogger$$1(logger) {
      this.logger = logger;
      return
    }
    var v10513 = AstLogger$$1.prototype;
    v10513.logScript = v400;
    var v10514 = AstLogger$$1.prototype;
    v10514.logNode = v401;
    var v10515 = AstLogger$$1.prototype;
    v10515.logComments = v402;
    var v10516 = AstLogger$$1.prototype;
    v10516.logLinemap = v403;
    var v10517 = AstLogger$$1.prototype;
    v10517.addPadding = v404;
    var v10518 = AstLogger$$1.prototype;
    v10518.addLineColumn = v405;
    return AstLogger$$1
  }
  var AstLogger = v406();
  TypeScript$$8.AstLogger = AstLogger;
  return
}
function v399(TypeScript$$7) {
  function v398(GetAstPathOptions$$1) {
    GetAstPathOptions$$1._map = [];
    GetAstPathOptions$$1.Default = 0;
    GetAstPathOptions$$1.EdgeInclusive = 1;
    GetAstPathOptions$$1.DontPruneSearchBasedOnPosition = 1 << 1;
    return
  }
  function v397() {
    function AstPathContext$$1() {
      var v10519 = TypeScript$$7.AstPath;
      var v27481 = JAMScript.new(v10519, []);
      this.path = v27481;
      return
    }
    return AstPathContext$$1
  }
  function v396() {
    function v395() {
      var v17722 = JAMScript.call(this.count, this, []);
      var v10520 = v17722 >= 1;
      if(v10520) {
        var v25631 = this.asts;
        var v26234 = this.top;
        var v25632 = v26234 - 0;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24586 = v25631[v25632]
        }
        var v22303 = v24586.nodeType;
        var v24587 = TypeScript$$7.NodeType;
        var v22304 = v24587.Block;
        var v17723 = v22303 === v22304;
        if(v17723) {
          var v25633 = this.asts;
          var v26235 = this.top;
          var v25634 = v26235 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24588 = v25633[v25634]
          }
          var v22305 = v24588.isStatementBlock;
          v17723 = v22305 === false
        }
        v10520 = v17723
      }
      return v10520
    }
    function v394() {
      var v17724 = JAMScript.call(this.count, this, []);
      var v10521 = v17724 >= 2;
      if(v10521) {
        var v25635 = this.asts;
        var v26236 = this.top;
        var v25636 = v26236 - 0;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24589 = v25635[v25636]
        }
        var v22306 = v24589.nodeType;
        var v24590 = TypeScript$$7.NodeType;
        var v22307 = v24590.List;
        var v17725 = v22306 === v22307;
        if(v17725) {
          var v26237 = this.asts;
          var v26586 = this.top;
          var v26238 = v26586 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25637 = v26237[v26238]
          }
          var v24591 = v25637.nodeType;
          var v25638 = TypeScript$$7.NodeType;
          var v24592 = v25638.New;
          var v22308 = v24591 === v24592;
          if(v22308) {
            var v26239 = this.asts;
            var v26587 = this.top;
            var v26240 = v26587 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25639 = v26239[v26240]
            }
            var v24593 = v25639.arguments;
            var v25640 = this.asts;
            var v26241 = this.top;
            var v25641 = v26241 - 0;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v24594 = v25640[v25641]
            }
            v22308 = v24593 === v24594
          }
          v17725 = v22308
        }
        v10521 = v17725
      }
      return v10521
    }
    function v393() {
      var v17726 = JAMScript.call(this.count, this, []);
      var v10522 = v17726 >= 2;
      if(v10522) {
        var v25642 = this.asts;
        var v26242 = this.top;
        var v25643 = v26242 - 0;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24595 = v25642[v25643]
        }
        var v22309 = v24595.nodeType;
        var v24596 = TypeScript$$7.NodeType;
        var v22310 = v24596.List;
        var v17727 = v22309 === v22310;
        if(v17727) {
          var v26243 = this.asts;
          var v26588 = this.top;
          var v26244 = v26588 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25644 = v26243[v26244]
          }
          var v24597 = v25644.nodeType;
          var v25645 = TypeScript$$7.NodeType;
          var v24598 = v25645.Call;
          var v22311 = v24597 === v24598;
          if(v22311) {
            var v26245 = this.asts;
            var v26589 = this.top;
            var v26246 = v26589 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25646 = v26245[v26246]
            }
            var v24599 = v25646.arguments;
            var v25647 = this.asts;
            var v26247 = this.top;
            var v25648 = v26247 - 0;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v24600 = v25647[v25648]
            }
            v22311 = v24599 === v24600
          }
          v17727 = v22311
        }
        v10522 = v17727
      }
      return v10522
    }
    function v392() {
      var v17728 = JAMScript.call(this.count, this, []);
      var v10523 = v17728 >= 3;
      if(v10523) {
        var v25649 = this.asts;
        var v26248 = this.top;
        var v25650 = v26248 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24601 = v25649[v25650]
        }
        var v22312 = v24601.nodeType;
        var v24602 = TypeScript$$7.NodeType;
        var v22313 = v24602.List;
        var v17729 = v22312 === v22313;
        if(v17729) {
          var v26249 = this.asts;
          var v26590 = this.top;
          var v26250 = v26590 - 2;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25651 = v26249[v26250]
          }
          var v24603 = v25651.nodeType;
          var v25652 = TypeScript$$7.NodeType;
          var v24604 = v25652.FuncDecl;
          var v22314 = v24603 === v24604;
          if(v22314) {
            var v26251 = this.asts;
            var v26591 = this.top;
            var v26252 = v26591 - 2;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25653 = v26251[v26252]
            }
            var v24605 = v25653.arguments;
            var v25654 = this.asts;
            var v26253 = this.top;
            var v25655 = v26253 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v24606 = v25654[v25655]
            }
            v22314 = v24605 === v24606
          }
          v17729 = v22314
        }
        v10523 = v17729
      }
      return v10523
    }
    function v391() {
      var v17730 = JAMScript.call(this.count, this, []);
      var v10524 = v17730 >= 2;
      if(v10524) {
        var v25656 = this.asts;
        var v26254 = this.top;
        var v25657 = v26254 - 0;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24607 = v25656[v25657]
        }
        var v22315 = v24607.nodeType;
        var v24608 = TypeScript$$7.NodeType;
        var v22316 = v24608.List;
        var v17731 = v22315 === v22316;
        if(v17731) {
          var v26255 = this.asts;
          var v26592 = this.top;
          var v26256 = v26592 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25658 = v26255[v26256]
          }
          var v24609 = v25658.nodeType;
          var v25659 = TypeScript$$7.NodeType;
          var v24610 = v25659.FuncDecl;
          var v22317 = v24609 === v24610;
          if(v22317) {
            var v26257 = this.asts;
            var v26593 = this.top;
            var v26258 = v26593 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25660 = v26257[v26258]
            }
            var v24611 = v25660.arguments;
            var v25661 = this.asts;
            var v26259 = this.top;
            var v25662 = v26259 - 0;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v24612 = v25661[v25662]
            }
            v22317 = v24611 === v24612
          }
          v17731 = v22317
        }
        v10524 = v17731
      }
      return v10524
    }
    function v390() {
      var v17732 = JAMScript.call(this.count, this, []);
      var v10525 = v17732 >= 1;
      if(v10525) {
        var v25663 = this.asts;
        var v25664 = this.top;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24613 = v25663[v25664]
        }
        var v22318 = v24613.nodeType;
        var v24614 = TypeScript$$7.NodeType;
        var v22319 = v24614.List;
        var v17733 = v22318 === v22319;
        if(v17733) {
          var v26260 = this.asts;
          var v26261 = this.top;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25665 = v26260[v26261]
          }
          var v24615 = v25665.members;
          var v22320 = v24615.length;
          v17733 = v22320 === 1
        }
        v10525 = v17733
      }
      return v10525
    }
    function v389() {
      return JAMScript.call(this.isBodyOfCase, this, [])
    }
    function v388() {
      var v17734 = JAMScript.call(this.count, this, []);
      var v10526 = v17734 >= 2;
      if(v10526) {
        var v25666 = this.asts;
        var v26262 = this.top;
        var v25667 = v26262 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24616 = v25666[v25667]
        }
        var v22321 = v24616.nodeType;
        var v24617 = TypeScript$$7.NodeType;
        var v22322 = v24617.If;
        var v17735 = v22321 === v22322;
        if(v17735) {
          var v25668 = this.asts;
          var v26263 = this.top;
          var v25669 = v26263 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24618 = v25668[v25669]
          }
          var v22323 = v24618.elseBod;
          var v24619 = this.asts;
          var v25670 = this.top;
          var v24620 = v25670 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22324 = v24619[v24620]
          }
          v17735 = v22323 == v22324
        }
        v10526 = v17735
      }
      return v10526
    }
    function v387() {
      var v17736 = JAMScript.call(this.count, this, []);
      var v10527 = v17736 >= 2;
      if(v10527) {
        var v25671 = this.asts;
        var v26264 = this.top;
        var v25672 = v26264 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24621 = v25671[v25672]
        }
        var v22325 = v24621.nodeType;
        var v24622 = TypeScript$$7.NodeType;
        var v22326 = v24622.If;
        var v17737 = v22325 === v22326;
        if(v17737) {
          var v25673 = this.asts;
          var v26265 = this.top;
          var v25674 = v26265 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24623 = v25673[v25674]
          }
          var v22327 = v24623.thenBod;
          var v24624 = this.asts;
          var v25675 = this.top;
          var v24625 = v25675 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22328 = v24624[v24625]
          }
          v17737 = v22327 == v22328
        }
        v10527 = v17737
      }
      return v10527
    }
    function v386() {
      var v17738 = JAMScript.call(this.count, this, []);
      var v10528 = v17738 >= 2;
      if(v10528) {
        var v24626 = this.asts;
        var v25676 = this.top;
        var v24627 = v25676 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22329 = v24626[v24627]
        }
        var v17739 = v22329.nodeType;
        var v22330 = TypeScript$$7.NodeType;
        var v17740 = v22330.List;
        v10528 = v17739 === v17740
      }
      return v10528
    }
    function v385() {
      var v17741 = JAMScript.call(this.count, this, []);
      var v10529 = v17741 >= 2;
      if(v10529) {
        var v25677 = this.asts;
        var v26266 = this.top;
        var v25678 = v26266 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24628 = v25677[v25678]
        }
        var v22331 = v24628.nodeType;
        var v24629 = TypeScript$$7.NodeType;
        var v22332 = v24629.Member;
        var v17742 = v22331 === v22332;
        if(v17742) {
          var v25679 = this.asts;
          var v26267 = this.top;
          var v25680 = v26267 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24630 = v25679[v25680]
          }
          var v22333 = v24630.operand2;
          var v24631 = this.asts;
          var v25681 = this.top;
          var v24632 = v25681 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22334 = v24631[v24632]
          }
          v17742 = v22333 === v22334
        }
        v10529 = v17742
      }
      return v10529
    }
    function v384() {
      var v17743 = JAMScript.call(this.count, this, []);
      var v10530 = v17743 >= 2;
      if(v10530) {
        var v25682 = this.asts;
        var v26268 = this.top;
        var v25683 = v26268 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24633 = v25682[v25683]
        }
        var v22335 = v24633.nodeType;
        var v24634 = TypeScript$$7.NodeType;
        var v22336 = v24634.Member;
        var v17744 = v22335 === v22336;
        if(v17744) {
          var v25684 = this.asts;
          var v26269 = this.top;
          var v25685 = v26269 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24635 = v25684[v25685]
          }
          var v22337 = v24635.operand1;
          var v24636 = this.asts;
          var v25686 = this.top;
          var v24637 = v25686 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22338 = v24636[v24637]
          }
          v17744 = v22337 === v22338
        }
        v10530 = v17744
      }
      return v10530
    }
    function v383() {
      var v17745 = JAMScript.call(this.count, this, []);
      var v10531 = v17745 >= 2;
      if(v10531) {
        var v25687 = this.asts;
        var v26270 = this.top;
        var v25688 = v26270 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24638 = v25687[v25688]
        }
        var v22339 = v24638.nodeType;
        var v24639 = TypeScript$$7.NodeType;
        var v22340 = v24639.ArrayLit;
        var v17746 = v22339 === v22340;
        if(v17746) {
          var v26271 = this.asts;
          var v26594 = this.top;
          var v26272 = v26594 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25689 = v26271[v26272]
          }
          var v24640 = v25689.nodeType;
          var v25690 = TypeScript$$7.NodeType;
          var v24641 = v25690.List;
          var v22341 = v24640 === v24641;
          if(v22341) {
            var v26273 = this.asts;
            var v26595 = this.top;
            var v26274 = v26595 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25691 = v26273[v26274]
            }
            var v24642 = v25691.operand;
            var v25692 = this.asts;
            var v26275 = this.top;
            var v25693 = v26275 - 0;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v24643 = v25692[v25693]
            }
            v22341 = v24642 == v24643
          }
          v17746 = v22341
        }
        v10531 = v17746
      }
      return v10531
    }
    function v382() {
      var v17747 = JAMScript.call(this.count, this, []);
      var v10532 = v17747 >= 4;
      if(v10532) {
        var v25694 = this.asts;
        var v26276 = this.top;
        var v25695 = v26276 - 3;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24644 = v25694[v25695]
        }
        var v22342 = v24644.nodeType;
        var v24645 = TypeScript$$7.NodeType;
        var v22343 = v24645.ObjectLit;
        var v17748 = v22342 === v22343;
        if(v17748) {
          var v26277 = this.asts;
          var v26596 = this.top;
          var v26278 = v26596 - 2;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25696 = v26277[v26278]
          }
          var v24646 = v25696.nodeType;
          var v25697 = TypeScript$$7.NodeType;
          var v24647 = v25697.List;
          var v22344 = v24646 === v24647;
          if(v22344) {
            var v26597 = this.asts;
            var v26739 = this.top;
            var v26598 = v26739 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v26279 = v26597[v26598]
            }
            var v25698 = v26279.nodeType;
            var v26280 = TypeScript$$7.NodeType;
            var v25699 = v26280.Member;
            var v24648 = v25698 === v25699;
            if(v24648) {
              var v26740 = this.asts;
              var v26817 = this.top;
              var v26741 = v26817 - 0;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v26599 = v26740[v26741]
              }
              var v26281 = v26599.nodeType;
              var v26600 = TypeScript$$7.NodeType;
              var v26282 = v26600.Name;
              var v25700 = v26281 === v26282;
              if(v25700) {
                var v26742 = this.asts;
                var v26818 = this.top;
                var v26743 = v26818 - 3;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v26601 = v26742[v26743]
                }
                var v26283 = v26601.operand;
                var v26602 = this.asts;
                var v26744 = this.top;
                var v26603 = v26744 - 2;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v26284 = v26602[v26603]
                }
                v25700 = v26283 == v26284
              }
              v24648 = v25700
            }
            v22344 = v24648
          }
          v17748 = v22344
        }
        v10532 = v17748
      }
      return v10532
    }
    function v381() {
      var v17749 = JAMScript.call(this.count, this, []);
      var v10533 = v17749 >= 3;
      if(v10533) {
        var v25701 = this.asts;
        var v26285 = this.top;
        var v25702 = v26285 - 2;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24649 = v25701[v25702]
        }
        var v22345 = v24649.nodeType;
        var v24650 = TypeScript$$7.NodeType;
        var v22346 = v24650.ObjectLit;
        var v17750 = v22345 === v22346;
        if(v17750) {
          var v26286 = this.asts;
          var v26604 = this.top;
          var v26287 = v26604 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25703 = v26286[v26287]
          }
          var v24651 = v25703.nodeType;
          var v25704 = TypeScript$$7.NodeType;
          var v24652 = v25704.List;
          var v22347 = v24651 === v24652;
          if(v22347) {
            var v26605 = this.asts;
            var v26745 = this.top;
            var v26606 = v26745 - 0;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v26288 = v26605[v26606]
            }
            var v25705 = v26288.nodeType;
            var v26289 = TypeScript$$7.NodeType;
            var v25706 = v26289.Member;
            var v24653 = v25705 === v25706;
            if(v24653) {
              var v26607 = this.asts;
              var v26746 = this.top;
              var v26608 = v26746 - 2;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v26290 = v26607[v26608]
              }
              var v25707 = v26290.operand;
              var v26291 = this.asts;
              var v26609 = this.top;
              var v26292 = v26609 - 1;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25708 = v26291[v26292]
              }
              v24653 = v25707 == v25708
            }
            v22347 = v24653
          }
          v17750 = v22347
        }
        v10533 = v17750
      }
      return v10533
    }
    function v380() {
      var v17751 = JAMScript.call(this.count, this, []);
      var v10534 = v17751 >= 2;
      if(v10534) {
        var v25709 = this.asts;
        var v26293 = this.top;
        var v25710 = v26293 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24654 = v25709[v25710]
        }
        var v22348 = v24654.nodeType;
        var v24655 = TypeScript$$7.NodeType;
        var v22349 = v24655.ObjectLit;
        var v17752 = v22348 === v22349;
        if(v17752) {
          var v26294 = this.asts;
          var v26610 = this.top;
          var v26295 = v26610 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25711 = v26294[v26295]
          }
          var v24656 = v25711.nodeType;
          var v25712 = TypeScript$$7.NodeType;
          var v24657 = v25712.List;
          var v22350 = v24656 === v24657;
          if(v22350) {
            var v26611 = this.asts;
            var v26747 = this.top;
            var v26612 = v26747 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v26296 = v26611[v26612]
            }
            var v25713 = v26296.operand;
            var v26297 = this.asts;
            var v26613 = this.top;
            var v26298 = v26613 - 0;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25714 = v26297[v26298]
            }
            var v24658 = v25713 == v25714;
            if(v24658) {
              var v26748 = this.asts;
              var v26819 = this.top;
              var v26749 = v26819 - 0;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v26614 = v26748[v26749]
              }
              var v26299 = v26614.members;
              var v25715 = v26299.length;
              v24658 = v25715 == 0
            }
            v22350 = v24658
          }
          v17752 = v22350
        }
        v10534 = v17752
      }
      return v10534
    }
    function v379() {
      return JAMScript.call(this.isListOfObjectLit, this, [])
    }
    function v378() {
      var v17753 = JAMScript.call(this.count, this, []);
      var v10535 = v17753 >= 2;
      if(v10535) {
        var v25716 = this.asts;
        var v26300 = this.top;
        var v25717 = v26300 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24659 = v25716[v25717]
        }
        var v22351 = v24659.nodeType;
        var v24660 = TypeScript$$7.NodeType;
        var v22352 = v24660.ObjectLit;
        var v17754 = v22351 === v22352;
        if(v17754) {
          var v26301 = this.asts;
          var v26615 = this.top;
          var v26302 = v26615 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25718 = v26301[v26302]
          }
          var v24661 = v25718.nodeType;
          var v25719 = TypeScript$$7.NodeType;
          var v24662 = v25719.List;
          var v22353 = v24661 === v24662;
          if(v22353) {
            var v26303 = this.asts;
            var v26616 = this.top;
            var v26304 = v26616 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25720 = v26303[v26304]
            }
            var v24663 = v25720.operand;
            var v25721 = this.asts;
            var v26305 = this.top;
            var v25722 = v26305 - 0;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v24664 = v25721[v25722]
            }
            v22353 = v24663 == v24664
          }
          v17754 = v22353
        }
        v10535 = v17754
      }
      return v10535
    }
    function v377() {
      var v17755 = JAMScript.call(this.count, this, []);
      var v10536 = v17755 >= 3;
      if(v10536) {
        var v25723 = this.asts;
        var v26306 = this.top;
        var v25724 = v26306 - 2;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24665 = v25723[v25724]
        }
        var v22354 = v24665.nodeType;
        var v24666 = TypeScript$$7.NodeType;
        var v22355 = v24666.Switch;
        var v17756 = v22354 === v22355;
        if(v17756) {
          var v26307 = this.asts;
          var v26617 = this.top;
          var v26308 = v26617 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25725 = v26307[v26308]
          }
          var v24667 = v25725.nodeType;
          var v25726 = TypeScript$$7.NodeType;
          var v24668 = v25726.List;
          var v22356 = v24667 === v24668;
          if(v22356) {
            var v26618 = this.asts;
            var v26750 = this.top;
            var v26619 = v26750 - 2;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v26309 = v26618[v26619]
            }
            var v25727 = v26309.caseList;
            var v26310 = this.asts;
            var v26620 = this.top;
            var v26311 = v26620 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25728 = v26310[v26311]
            }
            var v24669 = v25727 == v25728;
            if(v24669) {
              var v26621 = this.asts;
              var v26751 = this.top;
              var v26622 = v26751 - 2;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v26312 = v26621[v26622]
              }
              var v25729 = v26312.defaultCase;
              var v26313 = this.asts;
              var v26623 = this.top;
              var v26314 = v26623 - 0;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25730 = v26313[v26314]
              }
              v24669 = v25729 == v25730
            }
            v22356 = v24669
          }
          v17756 = v22356
        }
        v10536 = v17756
      }
      return v10536
    }
    function v376() {
      var v17757 = JAMScript.call(this.count, this, []);
      var v10537 = v17757 >= 3;
      if(v10537) {
        var v25731 = this.asts;
        var v26315 = this.top;
        var v25732 = v26315 - 2;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24670 = v25731[v25732]
        }
        var v22357 = v24670.nodeType;
        var v24671 = TypeScript$$7.NodeType;
        var v22358 = v24671.Switch;
        var v17758 = v22357 === v22358;
        if(v17758) {
          var v26316 = this.asts;
          var v26624 = this.top;
          var v26317 = v26624 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25733 = v26316[v26317]
          }
          var v24672 = v25733.nodeType;
          var v25734 = TypeScript$$7.NodeType;
          var v24673 = v25734.List;
          var v22359 = v24672 === v24673;
          if(v22359) {
            var v26318 = this.asts;
            var v26625 = this.top;
            var v26319 = v26625 - 2;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25735 = v26318[v26319]
            }
            var v24674 = v25735.caseList;
            var v25736 = this.asts;
            var v26320 = this.top;
            var v25737 = v26320 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v24675 = v25736[v25737]
            }
            v22359 = v24674 == v24675
          }
          v17758 = v22359
        }
        v10537 = v17758
      }
      return v10537
    }
    function v375() {
      var v17759 = JAMScript.call(this.count, this, []);
      var v10538 = v17759 >= 2;
      if(v10538) {
        var v25738 = this.asts;
        var v26321 = this.top;
        var v25739 = v26321 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24676 = v25738[v25739]
        }
        var v22360 = v24676.nodeType;
        var v24677 = TypeScript$$7.NodeType;
        var v22361 = v24677.Finally;
        var v17760 = v22360 === v22361;
        if(v17760) {
          var v25740 = this.asts;
          var v26322 = this.top;
          var v25741 = v26322 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24678 = v25740[v25741]
          }
          var v22362 = v24678.body;
          var v24679 = this.asts;
          var v25742 = this.top;
          var v24680 = v25742 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22363 = v24679[v24680]
          }
          v17760 = v22362 == v22363
        }
        v10538 = v17760
      }
      return v10538
    }
    function v374() {
      var v17761 = JAMScript.call(this.count, this, []);
      var v10539 = v17761 >= 2;
      if(v10539) {
        var v25743 = this.asts;
        var v26323 = this.top;
        var v25744 = v26323 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24681 = v25743[v25744]
        }
        var v22364 = v24681.nodeType;
        var v24682 = TypeScript$$7.NodeType;
        var v22365 = v24682.With;
        var v17762 = v22364 === v22365;
        if(v17762) {
          var v25745 = this.asts;
          var v26324 = this.top;
          var v25746 = v26324 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24683 = v25745[v25746]
          }
          var v22366 = v24683.body;
          var v24684 = this.asts;
          var v25747 = this.top;
          var v24685 = v25747 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22367 = v24684[v24685]
          }
          v17762 = v22366 == v22367
        }
        v10539 = v17762
      }
      return v10539
    }
    function v373() {
      var v17763 = JAMScript.call(this.count, this, []);
      var v10540 = v17763 >= 2;
      if(v10540) {
        var v25748 = this.asts;
        var v26325 = this.top;
        var v25749 = v26325 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24686 = v25748[v25749]
        }
        var v22368 = v24686.nodeType;
        var v24687 = TypeScript$$7.NodeType;
        var v22369 = v24687.ForIn;
        var v17764 = v22368 === v22369;
        if(v17764) {
          var v25750 = this.asts;
          var v26326 = this.top;
          var v25751 = v26326 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24688 = v25750[v25751]
          }
          var v22370 = v24688.body;
          var v24689 = this.asts;
          var v25752 = this.top;
          var v24690 = v25752 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22371 = v24689[v24690]
          }
          v17764 = v22370 == v22371
        }
        v10540 = v17764
      }
      return v10540
    }
    function v372() {
      var v17765 = JAMScript.call(this.count, this, []);
      var v10541 = v17765 >= 2;
      if(v10541) {
        var v25753 = this.asts;
        var v26327 = this.top;
        var v25754 = v26327 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24691 = v25753[v25754]
        }
        var v22372 = v24691.nodeType;
        var v24692 = TypeScript$$7.NodeType;
        var v22373 = v24692.While;
        var v17766 = v22372 === v22373;
        if(v17766) {
          var v25755 = this.asts;
          var v26328 = this.top;
          var v25756 = v26328 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24693 = v25755[v25756]
          }
          var v22374 = v24693.body;
          var v24694 = this.asts;
          var v25757 = this.top;
          var v24695 = v25757 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22375 = v24694[v24695]
          }
          v17766 = v22374 == v22375
        }
        v10541 = v17766
      }
      return v10541
    }
    function v371() {
      var v17767 = JAMScript.call(this.count, this, []);
      var v10542 = v17767 >= 2;
      if(v10542) {
        var v25758 = this.asts;
        var v26329 = this.top;
        var v25759 = v26329 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24696 = v25758[v25759]
        }
        var v22376 = v24696.nodeType;
        var v24697 = TypeScript$$7.NodeType;
        var v22377 = v24697.DoWhile;
        var v17768 = v22376 === v22377;
        if(v17768) {
          var v25760 = this.asts;
          var v26330 = this.top;
          var v25761 = v26330 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24698 = v25760[v25761]
          }
          var v22378 = v24698.body;
          var v24699 = this.asts;
          var v25762 = this.top;
          var v24700 = v25762 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22379 = v24699[v24700]
          }
          v17768 = v22378 == v22379
        }
        v10542 = v17768
      }
      return v10542
    }
    function v370() {
      var v17769 = JAMScript.call(this.count, this, []);
      var v10543 = v17769 >= 2;
      if(v10543) {
        var v25763 = this.asts;
        var v26331 = this.top;
        var v25764 = v26331 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24701 = v25763[v25764]
        }
        var v22380 = v24701.nodeType;
        var v24702 = TypeScript$$7.NodeType;
        var v22381 = v24702.Catch;
        var v17770 = v22380 === v22381;
        if(v17770) {
          var v25765 = this.asts;
          var v26332 = this.top;
          var v25766 = v26332 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24703 = v25765[v25766]
          }
          var v22382 = v24703.body;
          var v24704 = this.asts;
          var v25767 = this.top;
          var v24705 = v25767 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22383 = v24704[v24705]
          }
          v17770 = v22382 == v22383
        }
        v10543 = v17770
      }
      return v10543
    }
    function v369() {
      var v17771 = JAMScript.call(this.count, this, []);
      var v10544 = v17771 >= 2;
      if(v10544) {
        var v25768 = this.asts;
        var v26333 = this.top;
        var v25769 = v26333 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24706 = v25768[v25769]
        }
        var v22384 = v24706.nodeType;
        var v24707 = TypeScript$$7.NodeType;
        var v22385 = v24707.Try;
        var v17772 = v22384 === v22385;
        if(v17772) {
          var v25770 = this.asts;
          var v26334 = this.top;
          var v25771 = v26334 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24708 = v25770[v25771]
          }
          var v22386 = v24708.body;
          var v24709 = this.asts;
          var v25772 = this.top;
          var v24710 = v25772 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22387 = v24709[v24710]
          }
          v17772 = v22386 == v22387
        }
        v10544 = v17772
      }
      return v10544
    }
    function v368() {
      var v17773 = JAMScript.call(this.count, this, []);
      var v10545 = v17773 >= 2;
      if(v10545) {
        var v25773 = this.asts;
        var v26335 = this.top;
        var v25774 = v26335 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24711 = v25773[v25774]
        }
        var v22388 = v24711.nodeType;
        var v24712 = TypeScript$$7.NodeType;
        var v22389 = v24712.Case;
        var v17774 = v22388 === v22389;
        if(v17774) {
          var v25775 = this.asts;
          var v26336 = this.top;
          var v25776 = v26336 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24713 = v25775[v25776]
          }
          var v22390 = v24713.body;
          var v24714 = this.asts;
          var v25777 = this.top;
          var v24715 = v25777 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22391 = v24714[v24715]
          }
          v17774 = v22390 == v22391
        }
        v10545 = v17774
      }
      return v10545
    }
    function v367() {
      var v17775 = JAMScript.call(this.count, this, []);
      var v10546 = v17775 >= 2;
      if(v10546) {
        var v25778 = this.asts;
        var v26337 = this.top;
        var v25779 = v26337 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24716 = v25778[v25779]
        }
        var v22392 = v24716.nodeType;
        var v24717 = TypeScript$$7.NodeType;
        var v22393 = v24717.For;
        var v17776 = v22392 === v22393;
        if(v17776) {
          var v25780 = this.asts;
          var v26338 = this.top;
          var v25781 = v26338 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24718 = v25780[v25781]
          }
          var v22394 = v24718.body;
          var v24719 = this.asts;
          var v25782 = this.top;
          var v24720 = v25782 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22395 = v24719[v24720]
          }
          v17776 = v22394 == v22395
        }
        v10546 = v17776
      }
      return v10546
    }
    function v366() {
      var v17777 = JAMScript.call(this.count, this, []);
      var v10547 = v17777 >= 2;
      if(v10547) {
        var v25783 = this.asts;
        var v26339 = this.top;
        var v25784 = v26339 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24721 = v25783[v25784]
        }
        var v22396 = v24721.nodeType;
        var v24722 = TypeScript$$7.NodeType;
        var v22397 = v24722.Block;
        var v17778 = v22396 === v22397;
        if(v17778) {
          var v25785 = this.asts;
          var v26340 = this.top;
          var v25786 = v26340 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24723 = v25785[v25786]
          }
          var v22398 = v24723.statements;
          var v24724 = this.asts;
          var v25787 = this.top;
          var v24725 = v25787 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22399 = v24724[v24725]
          }
          v17778 = v22398 == v22399
        }
        v10547 = v17778
      }
      return v10547
    }
    function v365() {
      var v17779 = JAMScript.call(this.count, this, []);
      var v10548 = v17779 >= 2;
      if(v10548) {
        var v25788 = this.asts;
        var v26341 = this.top;
        var v25789 = v26341 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24726 = v25788[v25789]
        }
        var v22400 = v24726.nodeType;
        var v24727 = TypeScript$$7.NodeType;
        var v22401 = v24727.InterfaceDeclaration;
        var v17780 = v22400 === v22401;
        if(v17780) {
          var v25790 = this.asts;
          var v26342 = this.top;
          var v25791 = v26342 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24728 = v25790[v25791]
          }
          var v22402 = v24728.members;
          var v24729 = this.asts;
          var v25792 = this.top;
          var v24730 = v25792 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22403 = v24729[v24730]
          }
          v17780 = v22402 == v22403
        }
        v10548 = v17780
      }
      return v10548
    }
    function v364() {
      var v17781 = JAMScript.call(this.count, this, []);
      var v10549 = v17781 >= 2;
      if(v10549) {
        var v25793 = this.asts;
        var v26343 = this.top;
        var v25794 = v26343 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24731 = v25793[v25794]
        }
        var v22404 = v24731.nodeType;
        var v24732 = TypeScript$$7.NodeType;
        var v22405 = v24732.FuncDecl;
        var v17782 = v22404 === v22405;
        if(v17782) {
          var v25795 = this.asts;
          var v26344 = this.top;
          var v25796 = v26344 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24733 = v25795[v25796]
          }
          var v22406 = v24733.bod;
          var v24734 = this.asts;
          var v25797 = this.top;
          var v24735 = v25797 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22407 = v24734[v24735]
          }
          v17782 = v22406 == v22407
        }
        v10549 = v17782
      }
      return v10549
    }
    function v363() {
      var v17783 = JAMScript.call(this.count, this, []);
      var v10550 = v17783 >= 2;
      if(v10550) {
        var v25798 = this.asts;
        var v26345 = this.top;
        var v25799 = v26345 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24736 = v25798[v25799]
        }
        var v22408 = v24736.nodeType;
        var v24737 = TypeScript$$7.NodeType;
        var v22409 = v24737.ClassDeclaration;
        var v17784 = v22408 === v22409;
        if(v17784) {
          var v25800 = this.asts;
          var v26346 = this.top;
          var v25801 = v26346 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24738 = v25800[v25801]
          }
          var v22410 = v24738.members;
          var v24739 = this.asts;
          var v25802 = this.top;
          var v24740 = v25802 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22411 = v24739[v24740]
          }
          v17784 = v22410 == v22411
        }
        v10550 = v17784
      }
      return v10550
    }
    function v362() {
      var v17785 = JAMScript.call(this.count, this, []);
      var v10551 = v17785 >= 2;
      if(v10551) {
        var v25803 = this.asts;
        var v26347 = this.top;
        var v25804 = v26347 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24741 = v25803[v25804]
        }
        var v22412 = v24741.nodeType;
        var v24742 = TypeScript$$7.NodeType;
        var v22413 = v24742.ModuleDeclaration;
        var v17786 = v22412 === v22413;
        if(v17786) {
          var v25805 = this.asts;
          var v26348 = this.top;
          var v25806 = v26348 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24743 = v25805[v25806]
          }
          var v22414 = v24743.members;
          var v24744 = this.asts;
          var v25807 = this.top;
          var v24745 = v25807 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22415 = v24744[v24745]
          }
          v17786 = v22414 == v22415
        }
        v10551 = v17786
      }
      return v10551
    }
    function v361() {
      var v17787 = JAMScript.call(this.count, this, []);
      var v10552 = v17787 >= 2;
      if(v10552) {
        var v25808 = this.asts;
        var v26349 = this.top;
        var v25809 = v26349 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24746 = v25808[v25809]
        }
        var v22416 = v24746.nodeType;
        var v24747 = TypeScript$$7.NodeType;
        var v22417 = v24747.Switch;
        var v17788 = v22416 === v22417;
        if(v17788) {
          var v25810 = this.asts;
          var v26350 = this.top;
          var v25811 = v26350 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24748 = v25810[v25811]
          }
          var v22418 = v24748.caseList;
          var v24749 = this.asts;
          var v25812 = this.top;
          var v24750 = v25812 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22419 = v24749[v24750]
          }
          v17788 = v22418 == v22419
        }
        v10552 = v17788
      }
      return v10552
    }
    function v360() {
      var v17789 = JAMScript.call(this.count, this, []);
      var v10553 = v17789 >= 2;
      if(v10553) {
        var v25813 = this.asts;
        var v26351 = this.top;
        var v25814 = v26351 - 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24751 = v25813[v25814]
        }
        var v22420 = v24751.nodeType;
        var v24752 = TypeScript$$7.NodeType;
        var v22421 = v24752.Script;
        var v17790 = v22420 === v22421;
        if(v17790) {
          var v25815 = this.asts;
          var v26352 = this.top;
          var v25816 = v26352 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24753 = v25815[v25816]
          }
          var v22422 = v24753.bod;
          var v24754 = this.asts;
          var v25817 = this.top;
          var v24755 = v25817 - 0;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22423 = v24754[v24755]
          }
          v17790 = v22422 == v22423
        }
        v10553 = v17790
      }
      return v10553
    }
    function v359() {
      var v17791 = JAMScript.call(this.count, this, []);
      var v10554 = v17791 >= 2;
      if(v10554) {
        var v25818 = this.asts;
        var v26353 = this.top;
        var v25819 = v26353 - 0;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24756 = v25818[v25819]
        }
        var v22424 = v24756.nodeType;
        var v24757 = TypeScript$$7.NodeType;
        var v22425 = v24757.List;
        var v17792 = v22424 === v22425;
        if(v17792) {
          var v26354 = this.asts;
          var v26626 = this.top;
          var v26355 = v26626 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25820 = v26354[v26355]
          }
          var v24758 = v25820.nodeType;
          var v25821 = TypeScript$$7.NodeType;
          var v24759 = v25821.ModuleDeclaration;
          var v22426 = v24758 === v24759;
          if(v22426) {
            var v26627 = this.asts;
            var v26752 = this.top;
            var v26628 = v26752 - 1;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v26356 = v26627[v26628]
            }
            var v25822 = v26356.members;
            var v26357 = this.asts;
            var v26629 = this.top;
            var v26358 = v26629 - 0;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25823 = v26357[v26358]
            }
            var v24760 = v25822 == v25823;
            if(v24760) {
              var v26630 = this.asts;
              var v26753 = this.top;
              var v26631 = v26753 - 1;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v26359 = v26630[v26631]
              }
              var v25824 = v26359.modFlags;
              var v26360 = TypeScript$$7.ModuleFlags;
              var v25825 = v26360.IsWholeFile;
              v24760 = JAMScript.call(TypeScript$$7.hasFlag, TypeScript$$7, [v25824, v25825])
            }
            v22426 = v24760
          }
          v17792 = v22426
        }
        v10554 = v17792
      }
      return v10554
    }
    function v358() {
      var v17793 = JAMScript.call(this.count, this, []);
      var v10555 = v17793 >= 1;
      if(v10555) {
        var v25826 = this.asts;
        var v25827 = this.top;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v24761 = v25826[v25827]
        }
        var v22427 = v24761.nodeType;
        var v24762 = TypeScript$$7.NodeType;
        var v22428 = v24762.ModuleDeclaration;
        var v17794 = v22427 === v22428;
        if(v17794) {
          var v25828 = this.asts;
          var v25829 = this.top;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v24763 = v25828[v25829]
          }
          var v22429 = v24763.modFlags;
          var v24764 = TypeScript$$7.ModuleFlags;
          var v22430 = v24764.IsWholeFile;
          v17794 = JAMScript.call(TypeScript$$7.hasFlag, TypeScript$$7, [v22429, v22430])
        }
        v10555 = v17794
      }
      return v10555
    }
    function v357() {
      var v10556 = this.asts;
      var ast$$13 = lastOf(v10556);
      var v17795 = JAMScript.call(this.count, this, []);
      var v10557 = v17795 >= 3;
      if(v10557) {
        var v24765 = this.asts;
        var v24766 = this.top;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22431 = v24765[v24766]
        }
        var v17796 = v22431 === ast$$13;
        if(v17796) {
          var v26361 = this.asts;
          var v26632 = this.top;
          var v26362 = v26632 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25830 = v26361[v26362]
          }
          var v24767 = v25830.nodeType;
          var v25831 = TypeScript$$7.NodeType;
          var v24768 = v25831.List;
          var v22432 = v24767 === v24768;
          if(v22432) {
            var v26363 = this.asts;
            var v26633 = this.top;
            var v26364 = v26633 - 2;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25832 = v26363[v26364]
            }
            var v24769 = v25832.nodeType;
            var v25833 = TypeScript$$7.NodeType;
            var v24770 = v25833.InterfaceDeclaration;
            v22432 = v24769 === v24770
          }
          v17796 = v22432
        }
        v10557 = v17796
      }
      return v10557
    }
    function v356() {
      var v10558 = this.asts;
      var ast$$12 = lastOf(v10558);
      var v17797 = JAMScript.call(this.count, this, []);
      var v10559 = v17797 >= 5;
      if(v10559) {
        var v24771 = this.asts;
        var v24772 = this.top;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22433 = v24771[v24772]
        }
        var v17798 = v22433 === ast$$12;
        if(v17798) {
          var v26365 = this.asts;
          var v26634 = this.top;
          var v26366 = v26634 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25834 = v26365[v26366]
          }
          var v24773 = v25834.nodeType;
          var v25835 = TypeScript$$7.NodeType;
          var v24774 = v25835.List;
          var v22434 = v24773 === v24774;
          if(v22434) {
            var v26635 = this.asts;
            var v26754 = this.top;
            var v26636 = v26754 - 2;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v26367 = v26635[v26636]
            }
            var v25836 = v26367.nodeType;
            var v26368 = TypeScript$$7.NodeType;
            var v25837 = v26368.FuncDecl;
            var v24775 = v25836 === v25837;
            if(v24775) {
              var v26755 = this.asts;
              var v26820 = this.top;
              var v26756 = v26820 - 3;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v26637 = v26755[v26756]
              }
              var v26369 = v26637.nodeType;
              var v26638 = TypeScript$$7.NodeType;
              var v26370 = v26638.List;
              var v25838 = v26369 === v26370;
              if(v25838) {
                var v26821 = this.asts;
                var v26869 = this.top;
                var v26822 = v26869 - 4;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v26757 = v26821[v26822]
                }
                var v26639 = v26757.nodeType;
                var v26758 = TypeScript$$7.NodeType;
                var v26640 = v26758.ClassDeclaration;
                var v26371 = v26639 === v26640;
                if(v26371) {
                  var v26823 = this.asts;
                  var v26870 = this.top;
                  var v26824 = v26870 - 2;
                  introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                    var v26759 = v26823[v26824]
                  }
                  var v26641 = v26759.isConstructor;
                  if(v26641) {
                    var v26892 = this.asts;
                    var v26907 = this.top;
                    var v26893 = v26907 - 2;
                    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                      var v26871 = v26892[v26893]
                    }
                    var v26825 = v26871.arguments;
                    var v26872 = this.asts;
                    var v26894 = this.top;
                    var v26873 = v26894 - 1;
                    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                      var v26826 = v26872[v26873]
                    }
                    var v26760 = v26825 === v26826;
                    if(v26760) {
                      var v26895 = this.asts;
                      var v26908 = this.top;
                      var v26896 = v26908 - 4;
                      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                        var v26874 = v26895[v26896]
                      }
                      var v26827 = v26874.constructorDecl;
                      var v26875 = this.asts;
                      var v26897 = this.top;
                      var v26876 = v26897 - 2;
                      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                        var v26828 = v26875[v26876]
                      }
                      v26760 = v26827 === v26828
                    }
                    v26641 = v26760
                  }
                  v26371 = v26641
                }
                v25838 = v26371
              }
              v24775 = v25838
            }
            v22434 = v24775
          }
          v17798 = v22434
        }
        v10559 = v17798
      }
      return v10559
    }
    function v355() {
      var v10560 = this.asts;
      var ast$$11 = lastOf(v10560);
      var v17799 = JAMScript.call(this.count, this, []);
      var v10561 = v17799 >= 3;
      if(v10561) {
        var v24776 = this.asts;
        var v24777 = this.top;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22435 = v24776[v24777]
        }
        var v17800 = v22435 === ast$$11;
        if(v17800) {
          var v26372 = this.asts;
          var v26642 = this.top;
          var v26373 = v26642 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25839 = v26372[v26373]
          }
          var v24778 = v25839.nodeType;
          var v25840 = TypeScript$$7.NodeType;
          var v24779 = v25840.List;
          var v22436 = v24778 === v24779;
          if(v22436) {
            var v26374 = this.asts;
            var v26643 = this.top;
            var v26375 = v26643 - 2;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25841 = v26374[v26375]
            }
            var v24780 = v25841.nodeType;
            var v25842 = TypeScript$$7.NodeType;
            var v24781 = v25842.ClassDeclaration;
            v22436 = v24780 === v24781
          }
          v17800 = v22436
        }
        v10561 = v17800
      }
      return v10561
    }
    function v354() {
      var v10562 = this.asts;
      var ast$$10 = lastOf(v10562);
      var v17801 = JAMScript.call(this.count, this, []);
      var v10563 = v17801 >= 3;
      if(v10563) {
        var v24782 = this.asts;
        var v24783 = this.top;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22437 = v24782[v24783]
        }
        var v17802 = v22437 === ast$$10;
        if(v17802) {
          var v26376 = this.asts;
          var v26644 = this.top;
          var v26377 = v26644 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25843 = v26376[v26377]
          }
          var v24784 = v25843.nodeType;
          var v25844 = TypeScript$$7.NodeType;
          var v24785 = v25844.List;
          var v22438 = v24784 === v24785;
          if(v22438) {
            var v26378 = this.asts;
            var v26645 = this.top;
            var v26379 = v26645 - 2;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25845 = v26378[v26379]
            }
            var v24786 = v25845.nodeType;
            var v25846 = TypeScript$$7.NodeType;
            var v24787 = v25846.ModuleDeclaration;
            v22438 = v24786 === v24787
          }
          v17802 = v22438
        }
        v10563 = v17802
      }
      return v10563
    }
    function v353() {
      var v10564 = this.asts;
      var ast$$9 = lastOf(v10564);
      var v17803 = JAMScript.call(this.count, this, []);
      var v10565 = v17803 >= 3;
      if(v10565) {
        var v24788 = this.asts;
        var v24789 = this.top;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22439 = v24788[v24789]
        }
        var v17804 = v22439 === ast$$9;
        if(v17804) {
          var v26380 = this.asts;
          var v26646 = this.top;
          var v26381 = v26646 - 1;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v25847 = v26380[v26381]
          }
          var v24790 = v25847.nodeType;
          var v25848 = TypeScript$$7.NodeType;
          var v24791 = v25848.List;
          var v22440 = v24790 === v24791;
          if(v22440) {
            var v26382 = this.asts;
            var v26647 = this.top;
            var v26383 = v26647 - 2;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v25849 = v26382[v26383]
            }
            var v24792 = v25849.nodeType;
            var v25850 = TypeScript$$7.NodeType;
            var v24793 = v25850.Script;
            v22440 = v24792 === v24793
          }
          v17804 = v22440
        }
        v10565 = v17804
      }
      return v10565
    }
    function v352() {
      var v22441 = JAMScript.call(this.ast, this, []);
      var v17805 = v22441 === null;
      var v22443 = !v17805;
      if(v22443) {
        var v22442 = JAMScript.call(this.parent, this, []);
        v17805 = v22442 === null
      }
      var v10566 = v17805;
      if(v10566) {
        return false
      }
      var v22444 = JAMScript.call(this.ast, this, []);
      var v17806 = v22444.nodeType;
      var v22445 = TypeScript$$7.NodeType;
      var v17807 = v22445.Name;
      var v10567 = v17806 === v17807;
      if(v10567) {
        var v24794 = JAMScript.call(this.parent, this, []);
        var v22446 = v24794.nodeType;
        var v24795 = TypeScript$$7.NodeType;
        var v22447 = v24795.FuncDecl;
        var v17808 = v22446 === v22447;
        if(v17808) {
          var v24796 = JAMScript.call(this.parent, this, []);
          var v22448 = v24796.name;
          var v22449 = JAMScript.call(this.ast, this, []);
          v17808 = v22448 === v22449
        }
        v10567 = v17808
      }
      return v10567
    }
    function v351() {
      var v22450 = JAMScript.call(this.ast, this, []);
      var v17809 = v22450 === null;
      var v22452 = !v17809;
      if(v22452) {
        var v22451 = JAMScript.call(this.parent, this, []);
        v17809 = v22451 === null
      }
      var v10568 = v17809;
      if(v10568) {
        return false
      }
      var v22453 = JAMScript.call(this.ast, this, []);
      var v17810 = v22453.nodeType;
      var v22454 = TypeScript$$7.NodeType;
      var v17811 = v22454.Name;
      var v10569 = v17810 === v17811;
      if(v10569) {
        var v24797 = JAMScript.call(this.parent, this, []);
        var v22455 = v24797.nodeType;
        var v24798 = TypeScript$$7.NodeType;
        var v22456 = v24798.ModuleDeclaration;
        var v17812 = v22455 === v22456;
        if(v17812) {
          var v24799 = JAMScript.call(this.parent, this, []);
          var v22457 = v24799.name;
          var v22458 = JAMScript.call(this.ast, this, []);
          v17812 = v22457 === v22458
        }
        v10569 = v17812
      }
      return v10569
    }
    function v350() {
      var v22459 = JAMScript.call(this.ast, this, []);
      var v17813 = v22459 === null;
      var v22461 = !v17813;
      if(v22461) {
        var v22460 = JAMScript.call(this.parent, this, []);
        v17813 = v22460 === null
      }
      var v10570 = v17813;
      if(v10570) {
        return false
      }
      var v22462 = JAMScript.call(this.ast, this, []);
      var v17814 = v22462.nodeType;
      var v22463 = TypeScript$$7.NodeType;
      var v17815 = v22463.Name;
      var v10571 = v17814 === v17815;
      if(v10571) {
        var v24800 = JAMScript.call(this.parent, this, []);
        var v22464 = v24800.nodeType;
        var v24801 = TypeScript$$7.NodeType;
        var v22465 = v24801.VarDecl;
        var v17816 = v22464 === v22465;
        if(v17816) {
          var v24802 = JAMScript.call(this.parent, this, []);
          var v22466 = v24802.id;
          var v22467 = JAMScript.call(this.ast, this, []);
          v17816 = v22466 === v22467
        }
        v10571 = v17816
      }
      return v10571
    }
    function v349() {
      var v22468 = JAMScript.call(this.ast, this, []);
      var v17817 = v22468 === null;
      var v22470 = !v17817;
      if(v22470) {
        var v22469 = JAMScript.call(this.parent, this, []);
        v17817 = v22469 === null
      }
      var v10572 = v17817;
      if(v10572) {
        return false
      }
      var v22471 = JAMScript.call(this.ast, this, []);
      var v17818 = v22471.nodeType;
      var v22472 = TypeScript$$7.NodeType;
      var v17819 = v22472.Name;
      var v10573 = v17818 === v17819;
      if(v10573) {
        var v24803 = JAMScript.call(this.parent, this, []);
        var v22473 = v24803.nodeType;
        var v24804 = TypeScript$$7.NodeType;
        var v22474 = v24804.ArgDecl;
        var v17820 = v22473 === v22474;
        if(v17820) {
          var v24805 = JAMScript.call(this.parent, this, []);
          var v22475 = v24805.id;
          var v22476 = JAMScript.call(this.ast, this, []);
          v17820 = v22475 === v22476
        }
        v10573 = v17820
      }
      return v10573
    }
    function v348() {
      var v22477 = JAMScript.call(this.ast, this, []);
      var v17821 = v22477 === null;
      var v22479 = !v17821;
      if(v22479) {
        var v22478 = JAMScript.call(this.parent, this, []);
        v17821 = v22478 === null
      }
      var v10574 = v17821;
      if(v10574) {
        return false
      }
      var v22480 = JAMScript.call(this.ast, this, []);
      var v17822 = v22480.nodeType;
      var v22481 = TypeScript$$7.NodeType;
      var v17823 = v22481.Name;
      var v10575 = v17822 === v17823;
      if(v10575) {
        var v24806 = JAMScript.call(this.parent, this, []);
        var v22482 = v24806.nodeType;
        var v24807 = TypeScript$$7.NodeType;
        var v22483 = v24807.InterfaceDeclaration;
        var v17824 = v22482 === v22483;
        if(v17824) {
          var v24808 = JAMScript.call(this.parent, this, []);
          var v22484 = v24808.name;
          var v22485 = JAMScript.call(this.ast, this, []);
          v17824 = v22484 === v22485
        }
        v10575 = v17824
      }
      return v10575
    }
    function v347() {
      var v22486 = JAMScript.call(this.ast, this, []);
      var v17825 = v22486 === null;
      var v22488 = !v17825;
      if(v22488) {
        var v22487 = JAMScript.call(this.parent, this, []);
        v17825 = v22487 === null
      }
      var v10576 = v17825;
      if(v10576) {
        return false
      }
      var v22489 = JAMScript.call(this.ast, this, []);
      var v17826 = v22489.nodeType;
      var v22490 = TypeScript$$7.NodeType;
      var v17827 = v22490.Name;
      var v10577 = v17826 === v17827;
      if(v10577) {
        var v24809 = JAMScript.call(this.parent, this, []);
        var v22491 = v24809.nodeType;
        var v24810 = TypeScript$$7.NodeType;
        var v22492 = v24810.ClassDeclaration;
        var v17828 = v22491 === v22492;
        if(v17828) {
          var v24811 = JAMScript.call(this.parent, this, []);
          var v22493 = v24811.name;
          var v22494 = JAMScript.call(this.ast, this, []);
          v17828 = v22493 === v22494
        }
        v10577 = v17828
      }
      return v10577
    }
    function v346(index$$43) {
      var v10578 = this.asts;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        return v10578[index$$43]
      }
    }
    function v345() {
      var v10579 = this.top;
      return v10579 + 1
    }
    function v344() {
      var v10580 = this.asts;
      var v22495 = this.asts;
      var v17829 = v22495.length;
      var v17830 = this.top;
      var v10581 = v17829 - v17830;
      return JAMScript.call(AstPath$$1.reverseIndexOf, AstPath$$1, [v10580, v10581])
    }
    function v343() {
      var v10582 = this.asts;
      var v22496 = this.asts;
      var v17831 = v22496.length;
      var v22497 = this.top;
      var v17832 = v22497 + 1;
      var v10583 = v17831 - v17832;
      return JAMScript.call(AstPath$$1.reverseIndexOf, AstPath$$1, [v10582, v10583])
    }
    function v342() {
      var v17833 = JAMScript.call(this.ast, this, []);
      var v10585 = v17833 == null;
      if(v10585) {
        var v10584 = TypeScript$$7.NodeType;
        return v10584.None
      }
      var v10586 = JAMScript.call(this.ast, this, []);
      return v10586.nodeType
    }
    function v341() {
      var v17834 = this.top;
      var v24812 = this.ast;
      var v22498 = v24812.length;
      var v17835 = v22498 - 1;
      var v10587 = v17834 == v17835;
      if(v10587) {
        throw new Error("Invalid call to 'down'");
      }
      var v17836 = this.top;
      this.top = v17836 + 1;
      return
    }
    function v340() {
      var v17837 = this.top;
      var v10588 = v17837 <= -1;
      if(v10588) {
        throw new Error("Invalid call to 'up'");
      }
      var v17838 = this.top;
      this.top = v17838 - 1;
      return
    }
    function v339(ast$$8) {
      var v22499 = this.asts;
      var v17839 = v22499.length;
      var v17840 = JAMScript.call(this.count, this, []);
      var v10590 = v17839 > v17840;
      for(;v10590;) {
        var v10589 = this.asts;
        JAMScript.call(v10589.pop, v10589, []);
        var v22500 = this.asts;
        var v17841 = v22500.length;
        var v17842 = JAMScript.call(this.count, this, []);
        v10590 = v17841 > v17842
      }
      var v10591 = this.asts;
      this.top = v10591.length;
      var v10592 = this.asts;
      JAMScript.call(v10592.push, v10592, [ast$$8]);
      return
    }
    function v338() {
      var head = JAMScript.call(this.ast, this, []);
      JAMScript.call(this.up, this, []);
      var v22501 = this.asts;
      var v17843 = v22501.length;
      var v17844 = JAMScript.call(this.count, this, []);
      var v10594 = v17843 > v17844;
      for(;v10594;) {
        var v10593 = this.asts;
        JAMScript.call(v10593.pop, v10593, []);
        var v22502 = this.asts;
        var v17845 = v22502.length;
        var v17846 = JAMScript.call(this.count, this, []);
        v10594 = v17845 > v17846
      }
      return head
    }
    function v337() {
      function v336(value$$32) {
        return value$$32
      }
      var clone = new AstPath$$1;
      var v10595 = clone;
      var v17847 = this.asts;
      var v27482 = JAMScript.call(v17847.map, v17847, [v336]);
      v10595.asts = v27482;
      clone.top = this.top;
      return clone
    }
    function reverseIndexOf(items$$1, index$$42) {
      var v10596;
      var v22503 = items$$1 === null;
      var v24814 = !v22503;
      if(v24814) {
        var v24813 = items$$1.length;
        v22503 = v24813 <= index$$42
      }
      var v17849 = v22503;
      if(v17849) {
        v10596 = null
      }else {
        var v24815 = items$$1.length;
        var v22504 = v24815 - index$$42;
        var v17848 = v22504 - 1;
        v10596 = items$$1[v17848]
      }
      return v10596
    }
    function AstPath$$1() {
      this.asts = [];
      this.top = -1;
      return
    }
    AstPath$$1.reverseIndexOf = reverseIndexOf;
    var v10597 = AstPath$$1.prototype;
    v10597.clone = v337;
    var v10598 = AstPath$$1.prototype;
    v10598.pop = v338;
    var v10599 = AstPath$$1.prototype;
    v10599.push = v339;
    var v10600 = AstPath$$1.prototype;
    v10600.up = v340;
    var v10601 = AstPath$$1.prototype;
    v10601.down = v341;
    var v10602 = AstPath$$1.prototype;
    v10602.nodeType = v342;
    var v10603 = AstPath$$1.prototype;
    v10603.ast = v343;
    var v10604 = AstPath$$1.prototype;
    v10604.parent = v344;
    var v10605 = AstPath$$1.prototype;
    v10605.count = v345;
    var v10606 = AstPath$$1.prototype;
    v10606.get = v346;
    var v10607 = AstPath$$1.prototype;
    v10607.isNameOfClass = v347;
    var v10608 = AstPath$$1.prototype;
    v10608.isNameOfInterface = v348;
    var v10609 = AstPath$$1.prototype;
    v10609.isNameOfArgument = v349;
    var v10610 = AstPath$$1.prototype;
    v10610.isNameOfVariable = v350;
    var v10611 = AstPath$$1.prototype;
    v10611.isNameOfModule = v351;
    var v10612 = AstPath$$1.prototype;
    v10612.isNameOfFunction = v352;
    var v10613 = AstPath$$1.prototype;
    v10613.isChildOfScript = v353;
    var v10614 = AstPath$$1.prototype;
    v10614.isChildOfModule = v354;
    var v10615 = AstPath$$1.prototype;
    v10615.isChildOfClass = v355;
    var v10616 = AstPath$$1.prototype;
    v10616.isArgumentOfClassConstructor = v356;
    var v10617 = AstPath$$1.prototype;
    v10617.isChildOfInterface = v357;
    var v10618 = AstPath$$1.prototype;
    v10618.isTopLevelImplicitModule = v358;
    var v10619 = AstPath$$1.prototype;
    v10619.isBodyOfTopLevelImplicitModule = v359;
    var v10620 = AstPath$$1.prototype;
    v10620.isBodyOfScript = v360;
    var v10621 = AstPath$$1.prototype;
    v10621.isBodyOfSwitch = v361;
    var v10622 = AstPath$$1.prototype;
    v10622.isBodyOfModule = v362;
    var v10623 = AstPath$$1.prototype;
    v10623.isBodyOfClass = v363;
    var v10624 = AstPath$$1.prototype;
    v10624.isBodyOfFunction = v364;
    var v10625 = AstPath$$1.prototype;
    v10625.isBodyOfInterface = v365;
    var v10626 = AstPath$$1.prototype;
    v10626.isBodyOfBlock = v366;
    var v10627 = AstPath$$1.prototype;
    v10627.isBodyOfFor = v367;
    var v10628 = AstPath$$1.prototype;
    v10628.isBodyOfCase = v368;
    var v10629 = AstPath$$1.prototype;
    v10629.isBodyOfTry = v369;
    var v10630 = AstPath$$1.prototype;
    v10630.isBodyOfCatch = v370;
    var v10631 = AstPath$$1.prototype;
    v10631.isBodyOfDoWhile = v371;
    var v10632 = AstPath$$1.prototype;
    v10632.isBodyOfWhile = v372;
    var v10633 = AstPath$$1.prototype;
    v10633.isBodyOfForIn = v373;
    var v10634 = AstPath$$1.prototype;
    v10634.isBodyOfWith = v374;
    var v10635 = AstPath$$1.prototype;
    v10635.isBodyOfFinally = v375;
    var v10636 = AstPath$$1.prototype;
    v10636.isCaseOfSwitch = v376;
    var v10637 = AstPath$$1.prototype;
    v10637.isDefaultCaseOfSwitch = v377;
    var v10638 = AstPath$$1.prototype;
    v10638.isListOfObjectLit = v378;
    var v10639 = AstPath$$1.prototype;
    v10639.isBodyOfObjectLit = v379;
    var v10640 = AstPath$$1.prototype;
    v10640.isEmptyListOfObjectLit = v380;
    var v10641 = AstPath$$1.prototype;
    v10641.isMemberOfObjectLit = v381;
    var v10642 = AstPath$$1.prototype;
    v10642.isNameOfMemberOfObjectLit = v382;
    var v10643 = AstPath$$1.prototype;
    v10643.isListOfArrayLit = v383;
    var v10644 = AstPath$$1.prototype;
    v10644.isTargetOfMember = v384;
    var v10645 = AstPath$$1.prototype;
    v10645.isMemberOfMember = v385;
    var v10646 = AstPath$$1.prototype;
    v10646.isItemOfList = v386;
    var v10647 = AstPath$$1.prototype;
    v10647.isThenOfIf = v387;
    var v10648 = AstPath$$1.prototype;
    v10648.isElseOfIf = v388;
    var v10649 = AstPath$$1.prototype;
    v10649.isBodyOfDefaultCase = v389;
    var v10650 = AstPath$$1.prototype;
    v10650.isSingleStatementList = v390;
    var v10651 = AstPath$$1.prototype;
    v10651.isArgumentListOfFunction = v391;
    var v10652 = AstPath$$1.prototype;
    v10652.isArgumentOfFunction = v392;
    var v10653 = AstPath$$1.prototype;
    v10653.isArgumentListOfCall = v393;
    var v10654 = AstPath$$1.prototype;
    v10654.isArgumentListOfNew = v394;
    var v10655 = AstPath$$1.prototype;
    v10655.isSynthesizedBlock = v395;
    return AstPath$$1
  }
  function lastOf(items) {
    var v10656;
    var v22505 = items === null;
    var v24817 = !v22505;
    if(v24817) {
      var v24816 = items.length;
      v22505 = v24816 === 0
    }
    var v17851 = v22505;
    if(v17851) {
      v10656 = null
    }else {
      var v22506 = items.length;
      var v17850 = v22506 - 1;
      v10656 = items[v17850]
    }
    return v10656
  }
  function max(a, b$$1) {
    var v10657;
    var v17852 = a >= b$$1;
    if(v17852) {
      v10657 = a
    }else {
      v10657 = b$$1
    }
    return v10657
  }
  function min$$1(a$$1, b$$2) {
    var v10658;
    var v17853 = a$$1 <= b$$2;
    if(v17853) {
      v10658 = a$$1
    }else {
      v10658 = b$$2
    }
    return v10658
  }
  function isValidAstNode(ast$$6) {
    var v10659 = ast$$6 === null;
    if(v10659) {
      return false
    }
    var v22507 = ast$$6.minChar;
    var v17854 = v22507 === -1;
    var v22509 = !v17854;
    if(v22509) {
      var v22508 = ast$$6.limChar;
      v17854 = v22508 === -1
    }
    var v10660 = v17854;
    if(v10660) {
      return false
    }
    return true
  }
  function getAstPathToPosition(script$$1, pos, options$$5) {
    function pre$$6(cur$$2, parent$$37, walker$$36) {
      var v10674 = isValidAstNode(cur$$2);
      if(v10674) {
        var v17855 = GetAstPathOptions.EdgeInclusive;
        var v10661 = JAMScript.call(TypeScript$$7.hasFlag, TypeScript$$7, [options$$5, v17855]);
        var v17857 = !v10661;
        if(v17857) {
          var v22510 = cur$$2.nodeType;
          var v24818 = TypeScript$$7.NodeType;
          var v22511 = v24818.Name;
          var v17856 = v22510 === v22511;
          var v22513 = !v17856;
          if(v22513) {
            var v22512 = script$$1.limChar;
            v17856 = pos === v22512
          }
          v10661 = v17856
        }
        var inclusive = v10661;
        var minChar$$1 = cur$$2.minChar;
        var v10662 = cur$$2.limChar;
        var v17858;
        if(inclusive) {
          v17858 = 1
        }else {
          v17858 = 0
        }
        var v10663 = v17858;
        var limChar$$1 = v10662 + v10663;
        var v17859 = pos >= minChar$$1;
        if(v17859) {
          v17859 = pos < limChar$$1
        }
        var v10667 = v17859;
        if(v10667) {
          var v10664 = ctx.path;
          var previous = JAMScript.call(v10664.ast, v10664, []);
          var v17860 = previous == null;
          var v22515 = !v17860;
          if(v22515) {
            var v24819 = cur$$2.minChar;
            var v24820 = previous.minChar;
            var v22514 = v24819 >= v24820;
            if(v22514) {
              var v24821 = cur$$2.limChar;
              var v24822 = previous.limChar;
              v22514 = v24821 <= v24822
            }
            v17860 = v22514
          }
          var v10666 = v17860;
          if(v10666) {
            var v10665 = ctx.path;
            JAMScript.call(v10665.push, v10665, [cur$$2])
          }else {
          }
        }
        var v10669 = pos < limChar$$1;
        if(v10669) {
          var v10668 = cur$$2.preComments;
          lookInComments(v10668)
        }
        var v10671 = pos >= minChar$$1;
        if(v10671) {
          var v10670 = cur$$2.postComments;
          lookInComments(v10670)
        }
        var v22516 = GetAstPathOptions.DontPruneSearchBasedOnPosition;
        var v17861 = JAMScript.call(TypeScript$$7.hasFlag, TypeScript$$7, [options$$5, v22516]);
        var v10673 = !v17861;
        if(v10673) {
          var v10672 = walker$$36.options;
          var v17862 = minChar$$1 <= pos;
          if(v17862) {
            v17862 = pos <= limChar$$1
          }
          v10672.goChildren = v17862
        }
      }
      return cur$$2
    }
    function lookInComments(comments$$2) {
      var v17863 = comments$$2;
      if(v17863) {
        var v22517 = comments$$2.length;
        v17863 = v22517 > 0
      }
      var v10682 = v17863;
      if(v10682) {
        var i$$26 = 0;
        var v17864 = comments$$2.length;
        var v10681 = i$$26 < v17864;
        for(;v10681;) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v10675 = comments$$2[i$$26]
          }
          var minChar = v10675.minChar;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v10676 = comments$$2[i$$26]
          }
          var limChar = v10676.limChar;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22518 = comments$$2[i$$26]
          }
          var v17865 = v22518.isBlockComment;
          var v10677 = !v17865;
          if(v10677) {
            limChar = limChar + 1
          }
          var v17866 = pos >= minChar;
          if(v17866) {
            v17866 = pos < limChar
          }
          var v10680 = v17866;
          if(v10680) {
            var v10678 = ctx.path;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v10679 = comments$$2[i$$26]
            }
            JAMScript.call(v10678.push, v10678, [v10679])
          }
          i$$26 = i$$26 + 1;
          var v17867 = comments$$2.length;
          v10681 = i$$26 < v17867
        }
      }
      return
    }
    var v17868 = typeof options$$5;
    var v10683 = v17868 === "undefined";
    if(v10683) {
      options$$5 = GetAstPathOptions.Default
    }
    var ctx = JAMScript.new(AstPathContext, []);
    var v10684 = JAMScript.call(TypeScript$$7.getAstWalkerFactory, TypeScript$$7, []);
    JAMScript.call(v10684.walk, v10684, [script$$1, pre$$6, null, null, ctx]);
    return ctx.path
  }
  function getTokenizationOffset(script$$2, position) {
    function pre$$7(cur$$3, parent$$38, walker$$37) {
      var v10689 = JAMScript.call(TypeScript$$7.isValidAstNode, TypeScript$$7, [cur$$3]);
      if(v10689) {
        var v17869 = cur$$3.minChar;
        var v10686 = v17869 <= position;
        if(v10686) {
          var v10685 = cur$$3.minChar;
          bestOffset = max(bestOffset, v10685)
        }
        var v22519 = cur$$3.minChar;
        var v17870 = v22519 > position;
        var v22521 = !v17870;
        if(v22521) {
          var v22520 = cur$$3.limChar;
          v17870 = v22520 < bestOffset
        }
        var v10688 = v17870;
        if(v10688) {
          var v10687 = walker$$37.options;
          v10687.goChildren = false
        }
      }
      return cur$$3
    }
    var bestOffset = 0;
    var v10690 = JAMScript.call(TypeScript$$7.getAstWalkerFactory, TypeScript$$7, []);
    JAMScript.call(v10690.walk, v10690, [script$$2, pre$$7]);
    return bestOffset
  }
  function walkAST(ast$$7, callback$$27) {
    function post$$5(cur$$5, parent$$40, walker$$39) {
      var path$$5 = walker$$39.state;
      JAMScript.call(path$$5.pop, path$$5, []);
      return cur$$5
    }
    function pre$$8(cur$$4, parent$$39, walker$$38) {
      var path$$4 = walker$$38.state;
      JAMScript.call(path$$4.push, path$$4, [cur$$4]);
      JAMScript.call(callback$$27, null, [path$$4, walker$$38]);
      return cur$$4
    }
    var path$$3 = JAMScript.new(AstPath, []);
    var v10691 = JAMScript.call(TypeScript$$7.getAstWalkerFactory, TypeScript$$7, []);
    JAMScript.call(v10691.walk, v10691, [ast$$7, pre$$8, post$$5, null, path$$3]);
    return
  }
  TypeScript$$7.lastOf = lastOf;
  TypeScript$$7.max = max;
  TypeScript$$7.min = min$$1;
  var AstPath = v396();
  TypeScript$$7.AstPath = AstPath;
  TypeScript$$7.isValidAstNode = isValidAstNode;
  var AstPathContext = v397();
  TypeScript$$7.AstPathContext = AstPathContext;
  var v17871 = TypeScript$$7.GetAstPathOptions;
  var v22522 = !v17871;
  if(v22522) {
    v17871 = TypeScript$$7.GetAstPathOptions = {}
  }
  var v10692 = v17871;
  v398(v10692);
  var GetAstPathOptions = TypeScript$$7.GetAstPathOptions;
  TypeScript$$7.getAstPathToPosition = getAstPathToPosition;
  TypeScript$$7.getTokenizationOffset = getTokenizationOffset;
  TypeScript$$7.walkAST = walkAST;
  return
}
function v335(TypeScript$$6) {
  function v334(AstWalkerWithDetailCallback$$1) {
    function walk(script, callback$$25) {
      function post$$4(cur$$1, parent$$36) {
        AstWalkerCallback(false, cur$$1, callback$$25);
        return cur$$1
      }
      function pre$$4(cur, parent$$35) {
        var v10693 = walker$$35.options;
        var v27483 = AstWalkerCallback(true, cur, callback$$25);
        v10693.goChildren = v27483;
        return cur
      }
      var v10694 = JAMScript.call(TypeScript$$6.getAstWalkerFactory, TypeScript$$6, []);
      var walker$$35 = JAMScript.call(v10694.getWalker, v10694, [pre$$4, post$$4]);
      JAMScript.call(walker$$35.walk, walker$$35, [script, null]);
      return
    }
    function AstWalkerCallback(pre$$5, ast$$5, callback$$26) {
      var nodeType$$12 = ast$$5.nodeType;
      var v22523 = TypeScript$$6.NodeType;
      var v17872 = v22523._map;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v10695 = v17872[nodeType$$12]
      }
      var callbackString = v10695 + "Callback";
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v10696 = callback$$26[callbackString]
      }
      if(v10696) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v27845 = [[pre$$5, ast$$5], callback$$26, callback$$26[callbackString]]
        }
        return JAMScript.call(v27845[2], v27845[1], v27845[0])
      }
      var v10697 = callback$$26.DefaultCallback;
      if(v10697) {
        return JAMScript.call(callback$$26.DefaultCallback, callback$$26, [pre$$5, ast$$5])
      }
      return true
    }
    AstWalkerWithDetailCallback$$1.walk = walk;
    return
  }
  var v17873 = TypeScript$$6.AstWalkerWithDetailCallback;
  var v22524 = !v17873;
  if(v22524) {
    v17873 = TypeScript$$6.AstWalkerWithDetailCallback = {}
  }
  var v10698 = v17873;
  v334(v10698);
  var AstWalkerWithDetailCallback = TypeScript$$6.AstWalkerWithDetailCallback;
  return
}
function v333(TypeScript$$5) {
  function v332(ChildrenWalkers$$1) {
    function walkNone(preAst$$1, parent$$2, walker$$2) {
      return
    }
    function walkListChildren(preAst$$2, parent$$3, walker$$3) {
      var v10699 = preAst$$2.members;
      var len$$6 = v10699.length;
      var v17874 = walker$$3.options;
      var v10708 = v17874.reverseSiblings;
      if(v10708) {
        var i$$25 = len$$6 - 1;
        var v10703 = i$$25 >= 0;
        for(;v10703;) {
          var v17875 = walker$$3.options;
          var v10702 = v17875.goNextSibling;
          if(v10702) {
            var v10700 = preAst$$2.members;
            var v10701 = i$$25;
            var v22525 = preAst$$2.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v17876 = v22525[i$$25]
            }
            var v27484 = JAMScript.call(walker$$3.walk, walker$$3, [v17876, preAst$$2]);
            v10700[v10701] = v27484
          }
          i$$25 = i$$25 - 1;
          v10703 = i$$25 >= 0
        }
      }else {
        i$$25 = 0;
        var v10707 = i$$25 < len$$6;
        for(;v10707;) {
          var v17877 = walker$$3.options;
          var v10706 = v17877.goNextSibling;
          if(v10706) {
            var v10704 = preAst$$2.members;
            var v10705 = i$$25;
            var v22526 = preAst$$2.members;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v17878 = v22526[i$$25]
            }
            var v27485 = JAMScript.call(walker$$3.walk, walker$$3, [v17878, preAst$$2]);
            v10704[v10705] = v27485
          }
          i$$25 = i$$25 + 1;
          v10707 = i$$25 < len$$6
        }
      }
      return
    }
    function walkUnaryExpressionChildren(preAst$$3, parent$$4, walker$$4) {
      var v10710 = preAst$$3.castTerm;
      if(v10710) {
        var v10709 = preAst$$3;
        var v17879 = preAst$$3.castTerm;
        var v27486 = JAMScript.call(walker$$4.walk, walker$$4, [v17879, preAst$$3]);
        v10709.castTerm = v27486
      }
      var v10712 = preAst$$3.operand;
      if(v10712) {
        var v10711 = preAst$$3;
        var v17880 = preAst$$3.operand;
        var v27487 = JAMScript.call(walker$$4.walk, walker$$4, [v17880, preAst$$3]);
        v10711.operand = v27487
      }
      return
    }
    function walkBinaryExpressionChildren(preAst$$4, parent$$5, walker$$5) {
      var v17881 = walker$$5.options;
      var v10721 = v17881.reverseSiblings;
      if(v10721) {
        var v10714 = preAst$$4.operand2;
        if(v10714) {
          var v10713 = preAst$$4;
          var v17882 = preAst$$4.operand2;
          var v27488 = JAMScript.call(walker$$5.walk, walker$$5, [v17882, preAst$$4]);
          v10713.operand2 = v27488
        }
        var v17883 = preAst$$4.operand1;
        if(v17883) {
          var v22527 = walker$$5.options;
          v17883 = v22527.goNextSibling
        }
        var v10716 = v17883;
        if(v10716) {
          var v10715 = preAst$$4;
          var v17884 = preAst$$4.operand1;
          var v27489 = JAMScript.call(walker$$5.walk, walker$$5, [v17884, preAst$$4]);
          v10715.operand1 = v27489
        }
      }else {
        var v10718 = preAst$$4.operand1;
        if(v10718) {
          var v10717 = preAst$$4;
          var v17885 = preAst$$4.operand1;
          var v27490 = JAMScript.call(walker$$5.walk, walker$$5, [v17885, preAst$$4]);
          v10717.operand1 = v27490
        }
        var v17886 = preAst$$4.operand2;
        if(v17886) {
          var v22528 = walker$$5.options;
          v17886 = v22528.goNextSibling
        }
        var v10720 = v17886;
        if(v10720) {
          var v10719 = preAst$$4;
          var v17887 = preAst$$4.operand2;
          var v27491 = JAMScript.call(walker$$5.walk, walker$$5, [v17887, preAst$$4]);
          v10719.operand2 = v27491
        }
      }
      return
    }
    function walkTypeReferenceChildren(preAst$$5, parent$$6, walker$$6) {
      var v10723 = preAst$$5.term;
      if(v10723) {
        var v10722 = preAst$$5;
        var v17888 = preAst$$5.term;
        var v27492 = JAMScript.call(walker$$6.walk, walker$$6, [v17888, preAst$$5]);
        v10722.term = v27492
      }
      return
    }
    function walkCallExpressionChildren(preAst$$6, parent$$7, walker$$7) {
      var v22529 = walker$$7.options;
      var v17889 = v22529.reverseSiblings;
      var v10725 = !v17889;
      if(v10725) {
        var v10724 = preAst$$6;
        var v17890 = preAst$$6.target;
        var v27493 = JAMScript.call(walker$$7.walk, walker$$7, [v17890, preAst$$6]);
        v10724.target = v27493
      }
      var v17891 = preAst$$6.arguments;
      if(v17891) {
        var v22530 = walker$$7.options;
        v17891 = v22530.goNextSibling
      }
      var v10727 = v17891;
      if(v10727) {
        var v10726 = preAst$$6;
        var v17892 = preAst$$6.arguments;
        var v27494 = JAMScript.call(walker$$7.walk, walker$$7, [v17892, preAst$$6]);
        v10726.arguments = v27494
      }
      var v22531 = walker$$7.options;
      var v17893 = v22531.reverseSiblings;
      if(v17893) {
        var v22532 = walker$$7.options;
        v17893 = v22532.goNextSibling
      }
      var v10729 = v17893;
      if(v10729) {
        var v10728 = preAst$$6;
        var v17894 = preAst$$6.target;
        var v27495 = JAMScript.call(walker$$7.walk, walker$$7, [v17894, preAst$$6]);
        v10728.target = v27495
      }
      return
    }
    function walkTrinaryExpressionChildren(preAst$$7, parent$$8, walker$$8) {
      var v10731 = preAst$$7.operand1;
      if(v10731) {
        var v10730 = preAst$$7;
        var v17895 = preAst$$7.operand1;
        var v27496 = JAMScript.call(walker$$8.walk, walker$$8, [v17895, preAst$$7]);
        v10730.operand1 = v27496
      }
      var v17896 = preAst$$7.operand2;
      if(v17896) {
        var v22533 = walker$$8.options;
        v17896 = v22533.goNextSibling
      }
      var v10733 = v17896;
      if(v10733) {
        var v10732 = preAst$$7;
        var v17897 = preAst$$7.operand2;
        var v27497 = JAMScript.call(walker$$8.walk, walker$$8, [v17897, preAst$$7]);
        v10732.operand2 = v27497
      }
      var v17898 = preAst$$7.operand3;
      if(v17898) {
        var v22534 = walker$$8.options;
        v17898 = v22534.goNextSibling
      }
      var v10735 = v17898;
      if(v10735) {
        var v10734 = preAst$$7;
        var v17899 = preAst$$7.operand3;
        var v27498 = JAMScript.call(walker$$8.walk, walker$$8, [v17899, preAst$$7]);
        v10734.operand3 = v27498
      }
      return
    }
    function walkFuncDeclChildren(preAst$$8, parent$$9, walker$$9) {
      var v10737 = preAst$$8.name;
      if(v10737) {
        var v10736 = preAst$$8;
        var v17900 = preAst$$8.name;
        var v27499 = JAMScript.call(walker$$9.walk, walker$$9, [v17900, preAst$$8]);
        v10736.name = v27499
      }
      var v17901 = preAst$$8.arguments;
      if(v17901) {
        var v26384 = preAst$$8.arguments;
        var v25851 = v26384.members;
        var v24823 = v25851.length;
        var v22535 = v24823 > 0;
        if(v22535) {
          var v24824 = walker$$9.options;
          v22535 = v24824.goNextSibling
        }
        v17901 = v22535
      }
      var v10739 = v17901;
      if(v10739) {
        var v10738 = preAst$$8;
        var v17902 = preAst$$8.arguments;
        var v27500 = JAMScript.call(walker$$9.walk, walker$$9, [v17902, preAst$$8]);
        v10738.arguments = v27500
      }
      var v17903 = preAst$$8.returnTypeAnnotation;
      if(v17903) {
        var v22536 = walker$$9.options;
        v17903 = v22536.goNextSibling
      }
      var v10741 = v17903;
      if(v10741) {
        var v10740 = preAst$$8;
        var v17904 = preAst$$8.returnTypeAnnotation;
        var v27501 = JAMScript.call(walker$$9.walk, walker$$9, [v17904, preAst$$8]);
        v10740.returnTypeAnnotation = v27501
      }
      var v17905 = preAst$$8.bod;
      if(v17905) {
        var v26385 = preAst$$8.bod;
        var v25852 = v26385.members;
        var v24825 = v25852.length;
        var v22537 = v24825 > 0;
        if(v22537) {
          var v24826 = walker$$9.options;
          v22537 = v24826.goNextSibling
        }
        v17905 = v22537
      }
      var v10743 = v17905;
      if(v10743) {
        var v10742 = preAst$$8;
        var v17906 = preAst$$8.bod;
        var v27502 = JAMScript.call(walker$$9.walk, walker$$9, [v17906, preAst$$8]);
        v10742.bod = v27502
      }
      return
    }
    function walkBoundDeclChildren(preAst$$9, parent$$10, walker$$10) {
      var v10745 = preAst$$9.id;
      if(v10745) {
        var v10744 = preAst$$9;
        var v17907 = preAst$$9.id;
        var v27503 = JAMScript.call(walker$$10.walk, walker$$10, [v17907, preAst$$9]);
        v10744.id = v27503
      }
      var v10747 = preAst$$9.init;
      if(v10747) {
        var v10746 = preAst$$9;
        var v17908 = preAst$$9.init;
        var v27504 = JAMScript.call(walker$$10.walk, walker$$10, [v17908, preAst$$9]);
        v10746.init = v27504
      }
      var v17909 = preAst$$9.typeExpr;
      if(v17909) {
        var v22538 = walker$$10.options;
        v17909 = v22538.goNextSibling
      }
      var v10749 = v17909;
      if(v10749) {
        var v10748 = preAst$$9;
        var v17910 = preAst$$9.typeExpr;
        var v27505 = JAMScript.call(walker$$10.walk, walker$$10, [v17910, preAst$$9]);
        v10748.typeExpr = v27505
      }
      return
    }
    function walkReturnStatementChildren(preAst$$10, parent$$11, walker$$11) {
      var v10751 = preAst$$10.returnExpression;
      if(v10751) {
        var v10750 = preAst$$10;
        var v17911 = preAst$$10.returnExpression;
        var v27506 = JAMScript.call(walker$$11.walk, walker$$11, [v17911, preAst$$10]);
        v10750.returnExpression = v27506
      }
      return
    }
    function walkForStatementChildren(preAst$$11, parent$$12, walker$$12) {
      var v10753 = preAst$$11.init;
      if(v10753) {
        var v10752 = preAst$$11;
        var v17912 = preAst$$11.init;
        var v27507 = JAMScript.call(walker$$12.walk, walker$$12, [v17912, preAst$$11]);
        v10752.init = v27507
      }
      var v17913 = preAst$$11.cond;
      if(v17913) {
        var v22539 = walker$$12.options;
        v17913 = v22539.goNextSibling
      }
      var v10755 = v17913;
      if(v10755) {
        var v10754 = preAst$$11;
        var v17914 = preAst$$11.cond;
        var v27508 = JAMScript.call(walker$$12.walk, walker$$12, [v17914, preAst$$11]);
        v10754.cond = v27508
      }
      var v17915 = preAst$$11.incr;
      if(v17915) {
        var v22540 = walker$$12.options;
        v17915 = v22540.goNextSibling
      }
      var v10757 = v17915;
      if(v10757) {
        var v10756 = preAst$$11;
        var v17916 = preAst$$11.incr;
        var v27509 = JAMScript.call(walker$$12.walk, walker$$12, [v17916, preAst$$11]);
        v10756.incr = v27509
      }
      var v17917 = preAst$$11.body;
      if(v17917) {
        var v22541 = walker$$12.options;
        v17917 = v22541.goNextSibling
      }
      var v10759 = v17917;
      if(v10759) {
        var v10758 = preAst$$11;
        var v17918 = preAst$$11.body;
        var v27510 = JAMScript.call(walker$$12.walk, walker$$12, [v17918, preAst$$11]);
        v10758.body = v27510
      }
      return
    }
    function walkForInStatementChildren(preAst$$12, parent$$13, walker$$13) {
      var v10760 = preAst$$12;
      var v17919 = preAst$$12.lval;
      var v27511 = JAMScript.call(walker$$13.walk, walker$$13, [v17919, preAst$$12]);
      v10760.lval = v27511;
      var v17920 = walker$$13.options;
      var v10762 = v17920.goNextSibling;
      if(v10762) {
        var v10761 = preAst$$12;
        var v17921 = preAst$$12.obj;
        var v27512 = JAMScript.call(walker$$13.walk, walker$$13, [v17921, preAst$$12]);
        v10761.obj = v27512
      }
      var v17922 = preAst$$12.body;
      if(v17922) {
        var v22542 = walker$$13.options;
        v17922 = v22542.goNextSibling
      }
      var v10764 = v17922;
      if(v10764) {
        var v10763 = preAst$$12;
        var v17923 = preAst$$12.body;
        var v27513 = JAMScript.call(walker$$13.walk, walker$$13, [v17923, preAst$$12]);
        v10763.body = v27513
      }
      return
    }
    function walkIfStatementChildren(preAst$$13, parent$$14, walker$$14) {
      var v10765 = preAst$$13;
      var v17924 = preAst$$13.cond;
      var v27514 = JAMScript.call(walker$$14.walk, walker$$14, [v17924, preAst$$13]);
      v10765.cond = v27514;
      var v17925 = preAst$$13.thenBod;
      if(v17925) {
        var v22543 = walker$$14.options;
        v17925 = v22543.goNextSibling
      }
      var v10767 = v17925;
      if(v10767) {
        var v10766 = preAst$$13;
        var v17926 = preAst$$13.thenBod;
        var v27515 = JAMScript.call(walker$$14.walk, walker$$14, [v17926, preAst$$13]);
        v10766.thenBod = v27515
      }
      var v17927 = preAst$$13.elseBod;
      if(v17927) {
        var v22544 = walker$$14.options;
        v17927 = v22544.goNextSibling
      }
      var v10769 = v17927;
      if(v10769) {
        var v10768 = preAst$$13;
        var v17928 = preAst$$13.elseBod;
        var v27516 = JAMScript.call(walker$$14.walk, walker$$14, [v17928, preAst$$13]);
        v10768.elseBod = v27516
      }
      return
    }
    function walkWhileStatementChildren(preAst$$14, parent$$15, walker$$15) {
      var v10770 = preAst$$14;
      var v17929 = preAst$$14.cond;
      var v27517 = JAMScript.call(walker$$15.walk, walker$$15, [v17929, preAst$$14]);
      v10770.cond = v27517;
      var v17930 = preAst$$14.body;
      if(v17930) {
        var v22545 = walker$$15.options;
        v17930 = v22545.goNextSibling
      }
      var v10772 = v17930;
      if(v10772) {
        var v10771 = preAst$$14;
        var v17931 = preAst$$14.body;
        var v27518 = JAMScript.call(walker$$15.walk, walker$$15, [v17931, preAst$$14]);
        v10771.body = v27518
      }
      return
    }
    function walkDoWhileStatementChildren(preAst$$15, parent$$16, walker$$16) {
      var v10773 = preAst$$15;
      var v17932 = preAst$$15.cond;
      var v27519 = JAMScript.call(walker$$16.walk, walker$$16, [v17932, preAst$$15]);
      v10773.cond = v27519;
      var v17933 = preAst$$15.body;
      if(v17933) {
        var v22546 = walker$$16.options;
        v17933 = v22546.goNextSibling
      }
      var v10775 = v17933;
      if(v10775) {
        var v10774 = preAst$$15;
        var v17934 = preAst$$15.body;
        var v27520 = JAMScript.call(walker$$16.walk, walker$$16, [v17934, preAst$$15]);
        v10774.body = v27520
      }
      return
    }
    function walkBlockChildren(preAst$$16, parent$$17, walker$$17) {
      var v10777 = preAst$$16.statements;
      if(v10777) {
        var v10776 = preAst$$16;
        var v17935 = preAst$$16.statements;
        var v27521 = JAMScript.call(walker$$17.walk, walker$$17, [v17935, preAst$$16]);
        v10776.statements = v27521
      }
      return
    }
    function walkCaseStatementChildren(preAst$$17, parent$$18, walker$$18) {
      var v10779 = preAst$$17.expr;
      if(v10779) {
        var v10778 = preAst$$17;
        var v17936 = preAst$$17.expr;
        var v27522 = JAMScript.call(walker$$18.walk, walker$$18, [v17936, preAst$$17]);
        v10778.expr = v27522
      }
      var v17937 = preAst$$17.body;
      if(v17937) {
        var v22547 = walker$$18.options;
        v17937 = v22547.goNextSibling
      }
      var v10781 = v17937;
      if(v10781) {
        var v10780 = preAst$$17;
        var v17938 = preAst$$17.body;
        var v27523 = JAMScript.call(walker$$18.walk, walker$$18, [v17938, preAst$$17]);
        v10780.body = v27523
      }
      return
    }
    function walkSwitchStatementChildren(preAst$$18, parent$$19, walker$$19) {
      var v10783 = preAst$$18.val;
      if(v10783) {
        var v10782 = preAst$$18;
        var v17939 = preAst$$18.val;
        var v27524 = JAMScript.call(walker$$19.walk, walker$$19, [v17939, preAst$$18]);
        v10782.val = v27524
      }
      var v17940 = preAst$$18.caseList;
      if(v17940) {
        var v22548 = walker$$19.options;
        v17940 = v22548.goNextSibling
      }
      var v10785 = v17940;
      if(v10785) {
        var v10784 = preAst$$18;
        var v17941 = preAst$$18.caseList;
        var v27525 = JAMScript.call(walker$$19.walk, walker$$19, [v17941, preAst$$18]);
        v10784.caseList = v27525
      }
      return
    }
    function walkTryChildren(preAst$$19, parent$$20, walker$$20) {
      var v10787 = preAst$$19.body;
      if(v10787) {
        var v10786 = preAst$$19;
        var v17942 = preAst$$19.body;
        var v27526 = JAMScript.call(walker$$20.walk, walker$$20, [v17942, preAst$$19]);
        v10786.body = v27526
      }
      return
    }
    function walkTryCatchChildren(preAst$$20, parent$$21, walker$$21) {
      var v10789 = preAst$$20.tryNode;
      if(v10789) {
        var v10788 = preAst$$20;
        var v17943 = preAst$$20.tryNode;
        var v27527 = JAMScript.call(walker$$21.walk, walker$$21, [v17943, preAst$$20]);
        v10788.tryNode = v27527
      }
      var v17944 = preAst$$20.catchNode;
      if(v17944) {
        var v22549 = walker$$21.options;
        v17944 = v22549.goNextSibling
      }
      var v10791 = v17944;
      if(v10791) {
        var v10790 = preAst$$20;
        var v17945 = preAst$$20.catchNode;
        var v27528 = JAMScript.call(walker$$21.walk, walker$$21, [v17945, preAst$$20]);
        v10790.catchNode = v27528
      }
      return
    }
    function walkTryFinallyChildren(preAst$$21, parent$$22, walker$$22) {
      var v10793 = preAst$$21.tryNode;
      if(v10793) {
        var v10792 = preAst$$21;
        var v17946 = preAst$$21.tryNode;
        var v27529 = JAMScript.call(walker$$22.walk, walker$$22, [v17946, preAst$$21]);
        v10792.tryNode = v27529
      }
      var v17947 = preAst$$21.finallyNode;
      if(v17947) {
        var v22550 = walker$$22.options;
        v17947 = v22550.goNextSibling
      }
      var v10795 = v17947;
      if(v10795) {
        var v10794 = preAst$$21;
        var v17948 = preAst$$21.finallyNode;
        var v27530 = JAMScript.call(walker$$22.walk, walker$$22, [v17948, preAst$$21]);
        v10794.finallyNode = v27530
      }
      return
    }
    function walkFinallyChildren(preAst$$22, parent$$23, walker$$23) {
      var v10797 = preAst$$22.body;
      if(v10797) {
        var v10796 = preAst$$22;
        var v17949 = preAst$$22.body;
        var v27531 = JAMScript.call(walker$$23.walk, walker$$23, [v17949, preAst$$22]);
        v10796.body = v27531
      }
      return
    }
    function walkCatchChildren(preAst$$23, parent$$24, walker$$24) {
      var v10799 = preAst$$23.param;
      if(v10799) {
        var v10798 = preAst$$23;
        var v17950 = preAst$$23.param;
        var v27532 = JAMScript.call(walker$$24.walk, walker$$24, [v17950, preAst$$23]);
        v10798.param = v27532
      }
      var v17951 = preAst$$23.body;
      if(v17951) {
        var v22551 = walker$$24.options;
        v17951 = v22551.goNextSibling
      }
      var v10801 = v17951;
      if(v10801) {
        var v10800 = preAst$$23;
        var v17952 = preAst$$23.body;
        var v27533 = JAMScript.call(walker$$24.walk, walker$$24, [v17952, preAst$$23]);
        v10800.body = v27533
      }
      return
    }
    function walkRecordChildren(preAst$$24, parent$$25, walker$$25) {
      var v10802 = preAst$$24;
      var v17953 = preAst$$24.name;
      var v27534 = JAMScript.call(walker$$25.walk, walker$$25, [v17953, preAst$$24]);
      v10802.name = v27534;
      var v22552 = walker$$25.options;
      var v17954 = v22552.goNextSibling;
      if(v17954) {
        v17954 = preAst$$24.members
      }
      var v10804 = v17954;
      if(v10804) {
        var v10803 = preAst$$24;
        var v17955 = preAst$$24.members;
        var v27535 = JAMScript.call(walker$$25.walk, walker$$25, [v17955, preAst$$24]);
        v10803.members = v27535
      }
      return
    }
    function walkNamedTypeChildren(preAst$$25, parent$$26, walker$$26) {
      walkRecordChildren(preAst$$25, parent$$26, walker$$26);
      return
    }
    function walkClassDeclChildren(preAst$$26, parent$$27, walker$$27) {
      walkRecordChildren(preAst$$26, parent$$27, walker$$27);
      var v22553 = walker$$27.options;
      var v17956 = v22553.goNextSibling;
      if(v17956) {
        v17956 = preAst$$26.extendsList
      }
      var v10806 = v17956;
      if(v10806) {
        var v10805 = preAst$$26;
        var v17957 = preAst$$26.extendsList;
        var v27536 = JAMScript.call(walker$$27.walk, walker$$27, [v17957, preAst$$26]);
        v10805.extendsList = v27536
      }
      var v22554 = walker$$27.options;
      var v17958 = v22554.goNextSibling;
      if(v17958) {
        v17958 = preAst$$26.implementsList
      }
      var v10808 = v17958;
      if(v10808) {
        var v10807 = preAst$$26;
        var v17959 = preAst$$26.implementsList;
        var v27537 = JAMScript.call(walker$$27.walk, walker$$27, [v17959, preAst$$26]);
        v10807.implementsList = v27537
      }
      return
    }
    function walkScriptChildren(preAst$$27, parent$$28, walker$$28) {
      var v10810 = preAst$$27.bod;
      if(v10810) {
        var v10809 = preAst$$27;
        var v17960 = preAst$$27.bod;
        var v27538 = JAMScript.call(walker$$28.walk, walker$$28, [v17960, preAst$$27]);
        v10809.bod = v27538
      }
      return
    }
    function walkTypeDeclChildren(preAst$$28, parent$$29, walker$$29) {
      walkRecordChildren(preAst$$28, parent$$29, walker$$29);
      var v22555 = walker$$29.options;
      var v17961 = v22555.goNextSibling;
      if(v17961) {
        v17961 = preAst$$28.extendsList
      }
      var v10812 = v17961;
      if(v10812) {
        var v10811 = preAst$$28;
        var v17962 = preAst$$28.extendsList;
        var v27539 = JAMScript.call(walker$$29.walk, walker$$29, [v17962, preAst$$28]);
        v10811.extendsList = v27539
      }
      var v22556 = walker$$29.options;
      var v17963 = v22556.goNextSibling;
      if(v17963) {
        v17963 = preAst$$28.implementsList
      }
      var v10814 = v17963;
      if(v10814) {
        var v10813 = preAst$$28;
        var v17964 = preAst$$28.implementsList;
        var v27540 = JAMScript.call(walker$$29.walk, walker$$29, [v17964, preAst$$28]);
        v10813.implementsList = v27540
      }
      return
    }
    function walkModuleDeclChildren(preAst$$29, parent$$30, walker$$30) {
      walkRecordChildren(preAst$$29, parent$$30, walker$$30);
      return
    }
    function walkImportDeclChildren(preAst$$30, parent$$31, walker$$31) {
      var v10816 = preAst$$30.id;
      if(v10816) {
        var v10815 = preAst$$30;
        var v17965 = preAst$$30.id;
        var v27541 = JAMScript.call(walker$$31.walk, walker$$31, [v17965, preAst$$30]);
        v10815.id = v27541
      }
      var v10818 = preAst$$30.alias;
      if(v10818) {
        var v10817 = preAst$$30;
        var v17966 = preAst$$30.alias;
        var v27542 = JAMScript.call(walker$$31.walk, walker$$31, [v17966, preAst$$30]);
        v10817.alias = v27542
      }
      return
    }
    function walkWithStatementChildren(preAst$$31, parent$$32, walker$$32) {
      var v10820 = preAst$$31.expr;
      if(v10820) {
        var v10819 = preAst$$31;
        var v17967 = preAst$$31.expr;
        var v27543 = JAMScript.call(walker$$32.walk, walker$$32, [v17967, preAst$$31]);
        v10819.expr = v27543
      }
      var v17968 = preAst$$31.body;
      if(v17968) {
        var v22557 = walker$$32.options;
        v17968 = v22557.goNextSibling
      }
      var v10822 = v17968;
      if(v10822) {
        var v10821 = preAst$$31;
        var v17969 = preAst$$31.body;
        var v27544 = JAMScript.call(walker$$32.walk, walker$$32, [v17969, preAst$$31]);
        v10821.body = v27544
      }
      return
    }
    function walkLabelChildren(preAst$$32, parent$$33, walker$$33) {
      return
    }
    function walkLabeledStatementChildren(preAst$$33, parent$$34, walker$$34) {
      var v10823 = preAst$$33;
      var v17970 = preAst$$33.labels;
      var v27545 = JAMScript.call(walker$$34.walk, walker$$34, [v17970, preAst$$33]);
      v10823.labels = v27545;
      var v17971 = walker$$34.options;
      var v10825 = v17971.goNextSibling;
      if(v10825) {
        var v10824 = preAst$$33;
        var v17972 = preAst$$33.stmt;
        var v27546 = JAMScript.call(walker$$34.walk, walker$$34, [v17972, preAst$$33]);
        v10824.stmt = v27546
      }
      return
    }
    ChildrenWalkers$$1.walkNone = walkNone;
    ChildrenWalkers$$1.walkListChildren = walkListChildren;
    ChildrenWalkers$$1.walkUnaryExpressionChildren = walkUnaryExpressionChildren;
    ChildrenWalkers$$1.walkBinaryExpressionChildren = walkBinaryExpressionChildren;
    ChildrenWalkers$$1.walkTypeReferenceChildren = walkTypeReferenceChildren;
    ChildrenWalkers$$1.walkCallExpressionChildren = walkCallExpressionChildren;
    ChildrenWalkers$$1.walkTrinaryExpressionChildren = walkTrinaryExpressionChildren;
    ChildrenWalkers$$1.walkFuncDeclChildren = walkFuncDeclChildren;
    ChildrenWalkers$$1.walkBoundDeclChildren = walkBoundDeclChildren;
    ChildrenWalkers$$1.walkReturnStatementChildren = walkReturnStatementChildren;
    ChildrenWalkers$$1.walkForStatementChildren = walkForStatementChildren;
    ChildrenWalkers$$1.walkForInStatementChildren = walkForInStatementChildren;
    ChildrenWalkers$$1.walkIfStatementChildren = walkIfStatementChildren;
    ChildrenWalkers$$1.walkWhileStatementChildren = walkWhileStatementChildren;
    ChildrenWalkers$$1.walkDoWhileStatementChildren = walkDoWhileStatementChildren;
    ChildrenWalkers$$1.walkBlockChildren = walkBlockChildren;
    ChildrenWalkers$$1.walkCaseStatementChildren = walkCaseStatementChildren;
    ChildrenWalkers$$1.walkSwitchStatementChildren = walkSwitchStatementChildren;
    ChildrenWalkers$$1.walkTryChildren = walkTryChildren;
    ChildrenWalkers$$1.walkTryCatchChildren = walkTryCatchChildren;
    ChildrenWalkers$$1.walkTryFinallyChildren = walkTryFinallyChildren;
    ChildrenWalkers$$1.walkFinallyChildren = walkFinallyChildren;
    ChildrenWalkers$$1.walkCatchChildren = walkCatchChildren;
    ChildrenWalkers$$1.walkRecordChildren = walkRecordChildren;
    ChildrenWalkers$$1.walkNamedTypeChildren = walkNamedTypeChildren;
    ChildrenWalkers$$1.walkClassDeclChildren = walkClassDeclChildren;
    ChildrenWalkers$$1.walkScriptChildren = walkScriptChildren;
    ChildrenWalkers$$1.walkTypeDeclChildren = walkTypeDeclChildren;
    ChildrenWalkers$$1.walkModuleDeclChildren = walkModuleDeclChildren;
    ChildrenWalkers$$1.walkImportDeclChildren = walkImportDeclChildren;
    ChildrenWalkers$$1.walkWithStatementChildren = walkWithStatementChildren;
    ChildrenWalkers$$1.walkLabelChildren = walkLabelChildren;
    ChildrenWalkers$$1.walkLabeledStatementChildren = walkLabeledStatementChildren;
    return
  }
  function v331() {
    function v330() {
      var v10826 = this.childrenWalkers;
      var v17973 = TypeScript$$5.NodeType;
      var v10827 = v17973.None;
      JAMScript.set(v10826, v10827, ChildrenWalkers.walkNone);
      var v10828 = this.childrenWalkers;
      var v17974 = TypeScript$$5.NodeType;
      var v10829 = v17974.Empty;
      JAMScript.set(v10828, v10829, ChildrenWalkers.walkNone);
      var v10830 = this.childrenWalkers;
      var v17975 = TypeScript$$5.NodeType;
      var v10831 = v17975.EmptyExpr;
      JAMScript.set(v10830, v10831, ChildrenWalkers.walkNone);
      var v10832 = this.childrenWalkers;
      var v17976 = TypeScript$$5.NodeType;
      var v10833 = v17976.True;
      JAMScript.set(v10832, v10833, ChildrenWalkers.walkNone);
      var v10834 = this.childrenWalkers;
      var v17977 = TypeScript$$5.NodeType;
      var v10835 = v17977.False;
      JAMScript.set(v10834, v10835, ChildrenWalkers.walkNone);
      var v10836 = this.childrenWalkers;
      var v17978 = TypeScript$$5.NodeType;
      var v10837 = v17978.This;
      JAMScript.set(v10836, v10837, ChildrenWalkers.walkNone);
      var v10838 = this.childrenWalkers;
      var v17979 = TypeScript$$5.NodeType;
      var v10839 = v17979.Super;
      JAMScript.set(v10838, v10839, ChildrenWalkers.walkNone);
      var v10840 = this.childrenWalkers;
      var v17980 = TypeScript$$5.NodeType;
      var v10841 = v17980.QString;
      JAMScript.set(v10840, v10841, ChildrenWalkers.walkNone);
      var v10842 = this.childrenWalkers;
      var v17981 = TypeScript$$5.NodeType;
      var v10843 = v17981.Regex;
      JAMScript.set(v10842, v10843, ChildrenWalkers.walkNone);
      var v10844 = this.childrenWalkers;
      var v17982 = TypeScript$$5.NodeType;
      var v10845 = v17982.Null;
      JAMScript.set(v10844, v10845, ChildrenWalkers.walkNone);
      var v10846 = this.childrenWalkers;
      var v17983 = TypeScript$$5.NodeType;
      var v10847 = v17983.ArrayLit;
      JAMScript.set(v10846, v10847, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10848 = this.childrenWalkers;
      var v17984 = TypeScript$$5.NodeType;
      var v10849 = v17984.ObjectLit;
      JAMScript.set(v10848, v10849, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10850 = this.childrenWalkers;
      var v17985 = TypeScript$$5.NodeType;
      var v10851 = v17985.Void;
      JAMScript.set(v10850, v10851, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10852 = this.childrenWalkers;
      var v17986 = TypeScript$$5.NodeType;
      var v10853 = v17986.Comma;
      JAMScript.set(v10852, v10853, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10854 = this.childrenWalkers;
      var v17987 = TypeScript$$5.NodeType;
      var v10855 = v17987.Pos;
      JAMScript.set(v10854, v10855, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10856 = this.childrenWalkers;
      var v17988 = TypeScript$$5.NodeType;
      var v10857 = v17988.Neg;
      JAMScript.set(v10856, v10857, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10858 = this.childrenWalkers;
      var v17989 = TypeScript$$5.NodeType;
      var v10859 = v17989.Delete;
      JAMScript.set(v10858, v10859, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10860 = this.childrenWalkers;
      var v17990 = TypeScript$$5.NodeType;
      var v10861 = v17990.Await;
      JAMScript.set(v10860, v10861, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10862 = this.childrenWalkers;
      var v17991 = TypeScript$$5.NodeType;
      var v10863 = v17991.In;
      JAMScript.set(v10862, v10863, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10864 = this.childrenWalkers;
      var v17992 = TypeScript$$5.NodeType;
      var v10865 = v17992.Dot;
      JAMScript.set(v10864, v10865, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10866 = this.childrenWalkers;
      var v17993 = TypeScript$$5.NodeType;
      var v10867 = v17993.From;
      JAMScript.set(v10866, v10867, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10868 = this.childrenWalkers;
      var v17994 = TypeScript$$5.NodeType;
      var v10869 = v17994.Is;
      JAMScript.set(v10868, v10869, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10870 = this.childrenWalkers;
      var v17995 = TypeScript$$5.NodeType;
      var v10871 = v17995.InstOf;
      JAMScript.set(v10870, v10871, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10872 = this.childrenWalkers;
      var v17996 = TypeScript$$5.NodeType;
      var v10873 = v17996.Typeof;
      JAMScript.set(v10872, v10873, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10874 = this.childrenWalkers;
      var v17997 = TypeScript$$5.NodeType;
      var v10875 = v17997.NumberLit;
      JAMScript.set(v10874, v10875, ChildrenWalkers.walkNone);
      var v10876 = this.childrenWalkers;
      var v17998 = TypeScript$$5.NodeType;
      var v10877 = v17998.Name;
      JAMScript.set(v10876, v10877, ChildrenWalkers.walkNone);
      var v10878 = this.childrenWalkers;
      var v17999 = TypeScript$$5.NodeType;
      var v10879 = v17999.TypeRef;
      JAMScript.set(v10878, v10879, ChildrenWalkers.walkTypeReferenceChildren);
      var v10880 = this.childrenWalkers;
      var v18000 = TypeScript$$5.NodeType;
      var v10881 = v18000.Index;
      JAMScript.set(v10880, v10881, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10882 = this.childrenWalkers;
      var v18001 = TypeScript$$5.NodeType;
      var v10883 = v18001.Call;
      JAMScript.set(v10882, v10883, ChildrenWalkers.walkCallExpressionChildren);
      var v10884 = this.childrenWalkers;
      var v18002 = TypeScript$$5.NodeType;
      var v10885 = v18002.New;
      JAMScript.set(v10884, v10885, ChildrenWalkers.walkCallExpressionChildren);
      var v10886 = this.childrenWalkers;
      var v18003 = TypeScript$$5.NodeType;
      var v10887 = v18003.Asg;
      JAMScript.set(v10886, v10887, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10888 = this.childrenWalkers;
      var v18004 = TypeScript$$5.NodeType;
      var v10889 = v18004.AsgAdd;
      JAMScript.set(v10888, v10889, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10890 = this.childrenWalkers;
      var v18005 = TypeScript$$5.NodeType;
      var v10891 = v18005.AsgSub;
      JAMScript.set(v10890, v10891, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10892 = this.childrenWalkers;
      var v18006 = TypeScript$$5.NodeType;
      var v10893 = v18006.AsgDiv;
      JAMScript.set(v10892, v10893, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10894 = this.childrenWalkers;
      var v18007 = TypeScript$$5.NodeType;
      var v10895 = v18007.AsgMul;
      JAMScript.set(v10894, v10895, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10896 = this.childrenWalkers;
      var v18008 = TypeScript$$5.NodeType;
      var v10897 = v18008.AsgMod;
      JAMScript.set(v10896, v10897, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10898 = this.childrenWalkers;
      var v18009 = TypeScript$$5.NodeType;
      var v10899 = v18009.AsgAnd;
      JAMScript.set(v10898, v10899, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10900 = this.childrenWalkers;
      var v18010 = TypeScript$$5.NodeType;
      var v10901 = v18010.AsgXor;
      JAMScript.set(v10900, v10901, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10902 = this.childrenWalkers;
      var v18011 = TypeScript$$5.NodeType;
      var v10903 = v18011.AsgOr;
      JAMScript.set(v10902, v10903, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10904 = this.childrenWalkers;
      var v18012 = TypeScript$$5.NodeType;
      var v10905 = v18012.AsgLsh;
      JAMScript.set(v10904, v10905, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10906 = this.childrenWalkers;
      var v18013 = TypeScript$$5.NodeType;
      var v10907 = v18013.AsgRsh;
      JAMScript.set(v10906, v10907, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10908 = this.childrenWalkers;
      var v18014 = TypeScript$$5.NodeType;
      var v10909 = v18014.AsgRs2;
      JAMScript.set(v10908, v10909, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10910 = this.childrenWalkers;
      var v18015 = TypeScript$$5.NodeType;
      var v10911 = v18015.ConditionalExpression;
      JAMScript.set(v10910, v10911, ChildrenWalkers.walkTrinaryExpressionChildren);
      var v10912 = this.childrenWalkers;
      var v18016 = TypeScript$$5.NodeType;
      var v10913 = v18016.LogOr;
      JAMScript.set(v10912, v10913, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10914 = this.childrenWalkers;
      var v18017 = TypeScript$$5.NodeType;
      var v10915 = v18017.LogAnd;
      JAMScript.set(v10914, v10915, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10916 = this.childrenWalkers;
      var v18018 = TypeScript$$5.NodeType;
      var v10917 = v18018.Or;
      JAMScript.set(v10916, v10917, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10918 = this.childrenWalkers;
      var v18019 = TypeScript$$5.NodeType;
      var v10919 = v18019.Xor;
      JAMScript.set(v10918, v10919, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10920 = this.childrenWalkers;
      var v18020 = TypeScript$$5.NodeType;
      var v10921 = v18020.And;
      JAMScript.set(v10920, v10921, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10922 = this.childrenWalkers;
      var v18021 = TypeScript$$5.NodeType;
      var v10923 = v18021.Eq;
      JAMScript.set(v10922, v10923, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10924 = this.childrenWalkers;
      var v18022 = TypeScript$$5.NodeType;
      var v10925 = v18022.Ne;
      JAMScript.set(v10924, v10925, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10926 = this.childrenWalkers;
      var v18023 = TypeScript$$5.NodeType;
      var v10927 = v18023.Eqv;
      JAMScript.set(v10926, v10927, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10928 = this.childrenWalkers;
      var v18024 = TypeScript$$5.NodeType;
      var v10929 = v18024.NEqv;
      JAMScript.set(v10928, v10929, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10930 = this.childrenWalkers;
      var v18025 = TypeScript$$5.NodeType;
      var v10931 = v18025.Lt;
      JAMScript.set(v10930, v10931, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10932 = this.childrenWalkers;
      var v18026 = TypeScript$$5.NodeType;
      var v10933 = v18026.Le;
      JAMScript.set(v10932, v10933, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10934 = this.childrenWalkers;
      var v18027 = TypeScript$$5.NodeType;
      var v10935 = v18027.Gt;
      JAMScript.set(v10934, v10935, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10936 = this.childrenWalkers;
      var v18028 = TypeScript$$5.NodeType;
      var v10937 = v18028.Ge;
      JAMScript.set(v10936, v10937, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10938 = this.childrenWalkers;
      var v18029 = TypeScript$$5.NodeType;
      var v10939 = v18029.Add;
      JAMScript.set(v10938, v10939, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10940 = this.childrenWalkers;
      var v18030 = TypeScript$$5.NodeType;
      var v10941 = v18030.Sub;
      JAMScript.set(v10940, v10941, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10942 = this.childrenWalkers;
      var v18031 = TypeScript$$5.NodeType;
      var v10943 = v18031.Mul;
      JAMScript.set(v10942, v10943, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10944 = this.childrenWalkers;
      var v18032 = TypeScript$$5.NodeType;
      var v10945 = v18032.Div;
      JAMScript.set(v10944, v10945, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10946 = this.childrenWalkers;
      var v18033 = TypeScript$$5.NodeType;
      var v10947 = v18033.Mod;
      JAMScript.set(v10946, v10947, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10948 = this.childrenWalkers;
      var v18034 = TypeScript$$5.NodeType;
      var v10949 = v18034.Lsh;
      JAMScript.set(v10948, v10949, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10950 = this.childrenWalkers;
      var v18035 = TypeScript$$5.NodeType;
      var v10951 = v18035.Rsh;
      JAMScript.set(v10950, v10951, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10952 = this.childrenWalkers;
      var v18036 = TypeScript$$5.NodeType;
      var v10953 = v18036.Rs2;
      JAMScript.set(v10952, v10953, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10954 = this.childrenWalkers;
      var v18037 = TypeScript$$5.NodeType;
      var v10955 = v18037.Not;
      JAMScript.set(v10954, v10955, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10956 = this.childrenWalkers;
      var v18038 = TypeScript$$5.NodeType;
      var v10957 = v18038.LogNot;
      JAMScript.set(v10956, v10957, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10958 = this.childrenWalkers;
      var v18039 = TypeScript$$5.NodeType;
      var v10959 = v18039.IncPre;
      JAMScript.set(v10958, v10959, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10960 = this.childrenWalkers;
      var v18040 = TypeScript$$5.NodeType;
      var v10961 = v18040.DecPre;
      JAMScript.set(v10960, v10961, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10962 = this.childrenWalkers;
      var v18041 = TypeScript$$5.NodeType;
      var v10963 = v18041.IncPost;
      JAMScript.set(v10962, v10963, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10964 = this.childrenWalkers;
      var v18042 = TypeScript$$5.NodeType;
      var v10965 = v18042.DecPost;
      JAMScript.set(v10964, v10965, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10966 = this.childrenWalkers;
      var v18043 = TypeScript$$5.NodeType;
      var v10967 = v18043.TypeAssertion;
      JAMScript.set(v10966, v10967, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10968 = this.childrenWalkers;
      var v18044 = TypeScript$$5.NodeType;
      var v10969 = v18044.FuncDecl;
      JAMScript.set(v10968, v10969, ChildrenWalkers.walkFuncDeclChildren);
      var v10970 = this.childrenWalkers;
      var v18045 = TypeScript$$5.NodeType;
      var v10971 = v18045.Member;
      JAMScript.set(v10970, v10971, ChildrenWalkers.walkBinaryExpressionChildren);
      var v10972 = this.childrenWalkers;
      var v18046 = TypeScript$$5.NodeType;
      var v10973 = v18046.VarDecl;
      JAMScript.set(v10972, v10973, ChildrenWalkers.walkBoundDeclChildren);
      var v10974 = this.childrenWalkers;
      var v18047 = TypeScript$$5.NodeType;
      var v10975 = v18047.ArgDecl;
      JAMScript.set(v10974, v10975, ChildrenWalkers.walkBoundDeclChildren);
      var v10976 = this.childrenWalkers;
      var v18048 = TypeScript$$5.NodeType;
      var v10977 = v18048.Return;
      JAMScript.set(v10976, v10977, ChildrenWalkers.walkReturnStatementChildren);
      var v10978 = this.childrenWalkers;
      var v18049 = TypeScript$$5.NodeType;
      var v10979 = v18049.Break;
      JAMScript.set(v10978, v10979, ChildrenWalkers.walkNone);
      var v10980 = this.childrenWalkers;
      var v18050 = TypeScript$$5.NodeType;
      var v10981 = v18050.Continue;
      JAMScript.set(v10980, v10981, ChildrenWalkers.walkNone);
      var v10982 = this.childrenWalkers;
      var v18051 = TypeScript$$5.NodeType;
      var v10983 = v18051.Throw;
      JAMScript.set(v10982, v10983, ChildrenWalkers.walkUnaryExpressionChildren);
      var v10984 = this.childrenWalkers;
      var v18052 = TypeScript$$5.NodeType;
      var v10985 = v18052.For;
      JAMScript.set(v10984, v10985, ChildrenWalkers.walkForStatementChildren);
      var v10986 = this.childrenWalkers;
      var v18053 = TypeScript$$5.NodeType;
      var v10987 = v18053.ForIn;
      JAMScript.set(v10986, v10987, ChildrenWalkers.walkForInStatementChildren);
      var v10988 = this.childrenWalkers;
      var v18054 = TypeScript$$5.NodeType;
      var v10989 = v18054.If;
      JAMScript.set(v10988, v10989, ChildrenWalkers.walkIfStatementChildren);
      var v10990 = this.childrenWalkers;
      var v18055 = TypeScript$$5.NodeType;
      var v10991 = v18055.While;
      JAMScript.set(v10990, v10991, ChildrenWalkers.walkWhileStatementChildren);
      var v10992 = this.childrenWalkers;
      var v18056 = TypeScript$$5.NodeType;
      var v10993 = v18056.DoWhile;
      JAMScript.set(v10992, v10993, ChildrenWalkers.walkDoWhileStatementChildren);
      var v10994 = this.childrenWalkers;
      var v18057 = TypeScript$$5.NodeType;
      var v10995 = v18057.Block;
      JAMScript.set(v10994, v10995, ChildrenWalkers.walkBlockChildren);
      var v10996 = this.childrenWalkers;
      var v18058 = TypeScript$$5.NodeType;
      var v10997 = v18058.Case;
      JAMScript.set(v10996, v10997, ChildrenWalkers.walkCaseStatementChildren);
      var v10998 = this.childrenWalkers;
      var v18059 = TypeScript$$5.NodeType;
      var v10999 = v18059.Switch;
      JAMScript.set(v10998, v10999, ChildrenWalkers.walkSwitchStatementChildren);
      var v11000 = this.childrenWalkers;
      var v18060 = TypeScript$$5.NodeType;
      var v11001 = v18060.Try;
      JAMScript.set(v11000, v11001, ChildrenWalkers.walkTryChildren);
      var v11002 = this.childrenWalkers;
      var v18061 = TypeScript$$5.NodeType;
      var v11003 = v18061.TryCatch;
      JAMScript.set(v11002, v11003, ChildrenWalkers.walkTryCatchChildren);
      var v11004 = this.childrenWalkers;
      var v18062 = TypeScript$$5.NodeType;
      var v11005 = v18062.TryFinally;
      JAMScript.set(v11004, v11005, ChildrenWalkers.walkTryFinallyChildren);
      var v11006 = this.childrenWalkers;
      var v18063 = TypeScript$$5.NodeType;
      var v11007 = v18063.Finally;
      JAMScript.set(v11006, v11007, ChildrenWalkers.walkFinallyChildren);
      var v11008 = this.childrenWalkers;
      var v18064 = TypeScript$$5.NodeType;
      var v11009 = v18064.Catch;
      JAMScript.set(v11008, v11009, ChildrenWalkers.walkCatchChildren);
      var v11010 = this.childrenWalkers;
      var v18065 = TypeScript$$5.NodeType;
      var v11011 = v18065.List;
      JAMScript.set(v11010, v11011, ChildrenWalkers.walkListChildren);
      var v11012 = this.childrenWalkers;
      var v18066 = TypeScript$$5.NodeType;
      var v11013 = v18066.Script;
      JAMScript.set(v11012, v11013, ChildrenWalkers.walkScriptChildren);
      var v11014 = this.childrenWalkers;
      var v18067 = TypeScript$$5.NodeType;
      var v11015 = v18067.ClassDeclaration;
      JAMScript.set(v11014, v11015, ChildrenWalkers.walkClassDeclChildren);
      var v11016 = this.childrenWalkers;
      var v18068 = TypeScript$$5.NodeType;
      var v11017 = v18068.InterfaceDeclaration;
      JAMScript.set(v11016, v11017, ChildrenWalkers.walkTypeDeclChildren);
      var v11018 = this.childrenWalkers;
      var v18069 = TypeScript$$5.NodeType;
      var v11019 = v18069.ModuleDeclaration;
      JAMScript.set(v11018, v11019, ChildrenWalkers.walkModuleDeclChildren);
      var v11020 = this.childrenWalkers;
      var v18070 = TypeScript$$5.NodeType;
      var v11021 = v18070.ImportDeclaration;
      JAMScript.set(v11020, v11021, ChildrenWalkers.walkImportDeclChildren);
      var v11022 = this.childrenWalkers;
      var v18071 = TypeScript$$5.NodeType;
      var v11023 = v18071.With;
      JAMScript.set(v11022, v11023, ChildrenWalkers.walkWithStatementChildren);
      var v11024 = this.childrenWalkers;
      var v18072 = TypeScript$$5.NodeType;
      var v11025 = v18072.Label;
      JAMScript.set(v11024, v11025, ChildrenWalkers.walkLabelChildren);
      var v11026 = this.childrenWalkers;
      var v18073 = TypeScript$$5.NodeType;
      var v11027 = v18073.LabeledStatement;
      JAMScript.set(v11026, v11027, ChildrenWalkers.walkLabeledStatementChildren);
      var v11028 = this.childrenWalkers;
      var v18074 = TypeScript$$5.NodeType;
      var v11029 = v18074.EBStart;
      JAMScript.set(v11028, v11029, ChildrenWalkers.walkNone);
      var v11030 = this.childrenWalkers;
      var v18075 = TypeScript$$5.NodeType;
      var v11031 = v18075.GotoEB;
      JAMScript.set(v11030, v11031, ChildrenWalkers.walkNone);
      var v11032 = this.childrenWalkers;
      var v18076 = TypeScript$$5.NodeType;
      var v11033 = v18076.EndCode;
      JAMScript.set(v11032, v11033, ChildrenWalkers.walkNone);
      var v11034 = this.childrenWalkers;
      var v18077 = TypeScript$$5.NodeType;
      var v11035 = v18077.Error;
      JAMScript.set(v11034, v11035, ChildrenWalkers.walkNone);
      var v11036 = this.childrenWalkers;
      var v18078 = TypeScript$$5.NodeType;
      var v11037 = v18078.Comment;
      JAMScript.set(v11036, v11037, ChildrenWalkers.walkNone);
      var v11038 = this.childrenWalkers;
      var v18079 = TypeScript$$5.NodeType;
      var v11039 = v18079.Debugger;
      JAMScript.set(v11038, v11039, ChildrenWalkers.walkNone);
      var e$$8;
      var v18080 = TypeScript$$5.NodeType;
      var v11041 = v18080._map;
      for(e$$8 in v11041) {
        var v22558 = this.childrenWalkers;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v18081 = v22558[e$$8]
        }
        var v11040 = v18081 === undefined;
        if(v11040) {
          throw new Error("initWalkers function is not up to date with enum content!");
        }
      }
      return
    }
    function v329(pre$$3, post$$3, options$$4, state$$3) {
      var v11042 = !options$$4;
      if(v11042) {
        options$$4 = JAMScript.new(AstWalkOptions, [])
      }
      var v11043 = this.childrenWalkers;
      return JAMScript.new(AstWalker, [v11043, pre$$3, post$$3, options$$4, state$$3])
    }
    function v328(pre$$2, post$$2, options$$3, state$$2) {
      return JAMScript.call(this.getSlowWalker, this, [pre$$2, post$$2, options$$3, state$$2])
    }
    function v327(ast$$4, pre$$1, post$$1, options$$2, state$$1) {
      var v11044 = JAMScript.call(this.getWalker, this, [pre$$1, post$$1, options$$2, state$$1]);
      return JAMScript.call(v11044.walk, v11044, [ast$$4, null])
    }
    function AstWalkerFactory$$1() {
      this.childrenWalkers = [];
      JAMScript.call(this.initChildrenWalkers, this, []);
      return
    }
    var v11045 = AstWalkerFactory$$1.prototype;
    v11045.walk = v327;
    var v11046 = AstWalkerFactory$$1.prototype;
    v11046.getWalker = v328;
    var v11047 = AstWalkerFactory$$1.prototype;
    v11047.getSlowWalker = v329;
    var v11048 = AstWalkerFactory$$1.prototype;
    v11048.initChildrenWalkers = v330;
    return AstWalkerFactory$$1
  }
  function v326() {
    function v325(ast$$3, parent$$1) {
      var preAst = JAMScript.call(this.pre, this, [ast$$3, parent$$1, this]);
      var v11049 = preAst === undefined;
      if(v11049) {
        preAst = ast$$3
      }
      var v18082 = this.options;
      var v11056 = v18082.goChildren;
      if(v11056) {
        var v11050 = this.options;
        var svGoSib = v11050.goNextSibling;
        var v11051 = this.options;
        v11051.goNextSibling = true;
        var v11052 = this.childrenWalkers;
        var v11053 = ast$$3.nodeType;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v27846 = [[ast$$3, parent$$1, this], v11052, v11052[v11053]]
        }
        JAMScript.call(v27846[2], v27846[1], v27846[0]);
        var v11054 = this.options;
        v11054.goNextSibling = svGoSib
      }else {
        var v11055 = this.options;
        v11055.goChildren = true
      }
      var v11058 = this.post;
      if(v11058) {
        var postAst = JAMScript.call(this.post, this, [preAst, parent$$1, this]);
        var v11057 = postAst === undefined;
        if(v11057) {
          postAst = preAst
        }
        return postAst
      }else {
        return preAst
      }
      return
    }
    function AstWalker$$1(childrenWalkers, pre, post, options$$1, state) {
      this.childrenWalkers = childrenWalkers;
      this.pre = pre;
      this.post = post;
      this.options = options$$1;
      this.state = state;
      return
    }
    var v11059 = AstWalker$$1.prototype;
    v11059.walk = v325;
    return AstWalker$$1
  }
  function v324() {
    function v323(stop) {
      var v18083 = typeof stop;
      var v11060 = v18083 === "undefined";
      if(v11060) {
        stop = true
      }
      this.goChildren = !stop;
      this.goNextSibling = !stop;
      return
    }
    function AstWalkOptions$$1() {
      this.goChildren = true;
      this.goNextSibling = true;
      this.reverseSiblings = false;
      return
    }
    var v11061 = AstWalkOptions$$1.prototype;
    v11061.stopWalk = v323;
    return AstWalkOptions$$1
  }
  function getAstWalkerFactory() {
    var v11062 = !globalAstWalkerFactory;
    if(v11062) {
      globalAstWalkerFactory = JAMScript.new(AstWalkerFactory, [])
    }
    return globalAstWalkerFactory
  }
  var AstWalkOptions = v324();
  TypeScript$$5.AstWalkOptions = AstWalkOptions;
  var AstWalker = v326();
  var AstWalkerFactory = v331();
  TypeScript$$5.AstWalkerFactory = AstWalkerFactory;
  var globalAstWalkerFactory;
  TypeScript$$5.getAstWalkerFactory = getAstWalkerFactory;
  var ChildrenWalkers;
  var v18084 = ChildrenWalkers;
  var v22559 = !v18084;
  if(v22559) {
    v18084 = ChildrenWalkers = {}
  }
  var v11063 = v18084;
  v332(v11063);
  return
}
function v322(TypeScript$$4) {
  function v321(_super$$47) {
    function v320(emitter$$38, tokenId$$38, startLine$$38) {
      JAMScript.call(emitter$$38.emitParensAndCommentsInPlace, emitter$$38, [this, true]);
      JAMScript.call(emitter$$38.recordSourceMappingStart, emitter$$38, [this]);
      JAMScript.call(emitter$$38.writeLineToOutput, emitter$$38, ["debugger;"]);
      JAMScript.call(emitter$$38.recordSourceMappingEnd, emitter$$38, [this]);
      JAMScript.call(emitter$$38.emitParensAndCommentsInPlace, emitter$$38, [this, false]);
      return
    }
    function DebuggerStatement$$1() {
      var v18085 = TypeScript$$4.NodeType;
      var v11064 = v18085.Debugger;
      JAMScript.call(_super$$47.call, _super$$47, [this, v11064]);
      return
    }
    JAMScript.call(__extends, null, [DebuggerStatement$$1, _super$$47]);
    var v11065 = DebuggerStatement$$1.prototype;
    v11065.emit = v320;
    return DebuggerStatement$$1
  }
  function v319(_super$$46) {
    function getDocCommentTextOfSignatures(signatures) {
      var comments$$1 = [];
      var i$$24 = 0;
      var v18086 = signatures.length;
      var v11069 = i$$24 < v18086;
      for(;v11069;) {
        var v11066 = TypeScript$$4.Comment;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22560 = signatures[i$$24]
        }
        var v18087 = v22560.declAST;
        var v11067 = JAMScript.call(v18087.getDocComments, v18087, []);
        var signatureDocComment = JAMScript.call(v11066.getDocCommentText, v11066, [v11067]);
        var v11068 = signatureDocComment != "";
        if(v11068) {
          JAMScript.call(comments$$1.push, comments$$1, [signatureDocComment])
        }
        i$$24 = i$$24 + 1;
        var v18088 = signatures.length;
        v11069 = i$$24 < v18088
      }
      return comments$$1.join("\n")
    }
    function getParameterDocCommentText(param$$4, fncDocComments) {
      var v22561 = fncDocComments.length;
      var v18089 = v22561 == 0;
      var v22563 = !v18089;
      if(v22563) {
        var v24827 = fncDocComments[0];
        var v22562 = v24827.isBlockComment;
        v18089 = !v22562
      }
      var v11070 = v18089;
      if(v11070) {
        return""
      }
      var i$$23 = 0;
      var v18090 = fncDocComments.length;
      var v11094 = i$$23 < v18090;
      for(;v11094;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v11071 = fncDocComments[i$$23]
        }
        var commentContents = v11071.content;
        var j = commentContents.indexOf("@param", 0);
        var v11093 = 0 <= j;
        for(;v11093;) {
          j = j + 6;
          var v18091 = JAMScript.call(Comment$$2.isSpaceChar, Comment$$2, [commentContents, j]);
          var v11072 = !v18091;
          if(v11072) {
            j = commentContents.indexOf("@param", j);
            v11093 = 0 <= j;
            continue
          }
          j = JAMScript.call(Comment$$2.consumeLeadingSpace, Comment$$2, [commentContents, j]);
          var v11073 = j == -1;
          if(v11073) {
            break
          }
          var v18092 = JAMScript.call(commentContents.charCodeAt, commentContents, [j]);
          var v18093 = TypeScript$$4.LexCodeLC;
          var v11083 = v18092 == v18093;
          if(v11083) {
            j = j + 1;
            var charCode$$3 = 0;
            var curlies = 1;
            var v18094 = commentContents.length;
            var v11078 = j < v18094;
            for(;v11078;) {
              charCode$$3 = JAMScript.call(commentContents.charCodeAt, commentContents, [j]);
              var v18095 = TypeScript$$4.LexCodeLC;
              var v11074 = charCode$$3 == v18095;
              if(v11074) {
                curlies = curlies + 1;
                j = j + 1;
                var v18096 = commentContents.length;
                v11078 = j < v18096;
                continue
              }
              var v18097 = TypeScript$$4.LexCodeRC;
              var v11076 = charCode$$3 == v18097;
              if(v11076) {
                curlies = curlies - 1;
                var v11075 = curlies == 0;
                if(v11075) {
                  break
                }else {
                  j = j + 1;
                  var v18098 = commentContents.length;
                  v11078 = j < v18098;
                  continue
                }
              }
              var v18099 = TypeScript$$4.LexCodeAtSign;
              var v11077 = charCode$$3 == v18099;
              if(v11077) {
                break
              }
              j = j + 1;
              var v18100 = commentContents.length;
              v11078 = j < v18100
            }
            var v18101 = commentContents.length;
            var v11079 = j == v18101;
            if(v11079) {
              break
            }
            var v18102 = TypeScript$$4.LexCodeAtSign;
            var v11080 = charCode$$3 == v18102;
            if(v11080) {
              j = commentContents.indexOf("@param", j);
              v11093 = 0 <= j;
              continue
            }
            var v11081 = j + 1;
            j = JAMScript.call(Comment$$2.consumeLeadingSpace, Comment$$2, [commentContents, v11081]);
            var v11082 = j == -1;
            if(v11082) {
              break
            }
          }
          var v24828 = param$$4.length;
          var v22564 = commentContents.substr(j, v24828);
          var v18103 = param$$4 != v22564;
          var v22566 = !v18103;
          if(v22566) {
            var v25853 = param$$4.length;
            var v24829 = j + v25853;
            var v22565 = JAMScript.call(Comment$$2.isSpaceChar, Comment$$2, [commentContents, v24829]);
            v18103 = !v22565
          }
          var v11084 = v18103;
          if(v11084) {
            j = commentContents.indexOf("@param", j);
            v11093 = 0 <= j;
            continue
          }
          var v18104 = param$$4.length;
          var v11085 = j + v18104;
          j = JAMScript.call(Comment$$2.consumeLeadingSpace, Comment$$2, [commentContents, v11085]);
          var v11086 = j == -1;
          if(v11086) {
            return""
          }
          var endOfParam = commentContents.indexOf("@", j);
          var v18105;
          var v22567 = endOfParam < 0;
          if(v22567) {
            v18105 = commentContents.length
          }else {
            v18105 = endOfParam
          }
          var v11087 = v18105;
          var paramHelpString = JAMScript.call(commentContents.substring, commentContents, [j, v11087]);
          var paramSpacesToRemove = undefined;
          var v18106 = JAMScript.call(commentContents.substring, commentContents, [0, j]);
          var v11088 = v18106.lastIndexOf("\n");
          var paramLineIndex = v11088 + 1;
          var v11090 = paramLineIndex != 0;
          if(v11090) {
            var v18107 = paramLineIndex < j;
            if(v18107) {
              var v24830 = paramLineIndex + 1;
              var v22568 = commentContents.charAt(v24830);
              v18107 = v22568 == "\r"
            }
            var v11089 = v18107;
            if(v11089) {
              paramLineIndex = paramLineIndex + 1
            }
          }
          var startSpaceRemovalIndex = JAMScript.call(Comment$$2.consumeLeadingSpace, Comment$$2, [commentContents, paramLineIndex]);
          var v18108 = startSpaceRemovalIndex != j;
          if(v18108) {
            var v22569 = commentContents.charAt(startSpaceRemovalIndex);
            v18108 = v22569 == "*"
          }
          var v11092 = v18108;
          if(v11092) {
            var v11091 = j - startSpaceRemovalIndex;
            paramSpacesToRemove = v11091 - 1
          }
          return JAMScript.call(Comment$$2.cleanJSDocComment, Comment$$2, [paramHelpString, paramSpacesToRemove])
        }
        i$$23 = i$$23 + 1;
        var v18109 = fncDocComments.length;
        v11094 = i$$23 < v18109
      }
      return""
    }
    function getDocCommentText(comments) {
      var docCommentText$$1 = [];
      var c$$2 = 0;
      var v18110 = comments.length;
      var v11097 = c$$2 < v18110;
      for(;v11097;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v11095 = comments[c$$2]
        }
        var commentText = JAMScript.call(v11095.getDocCommentText, v11095, []);
        var v11096 = commentText != "";
        if(v11096) {
          JAMScript.call(docCommentText$$1.push, docCommentText$$1, [commentText])
        }
        c$$2 = c$$2 + 1;
        var v18111 = comments.length;
        v11097 = c$$2 < v18111
      }
      return docCommentText$$1.join("\n")
    }
    function cleanJSDocComment(content$$1, spacesToRemove) {
      var docCommentLines = [];
      content$$1 = content$$1.replace("/**", "");
      var v22570 = content$$1.length;
      var v18112 = v22570 >= 2;
      if(v18112) {
        var v26386 = content$$1.length;
        var v25854 = v26386 - 1;
        var v24831 = content$$1.charAt(v25854);
        var v22571 = v24831 == "/";
        if(v22571) {
          var v26387 = content$$1.length;
          var v25855 = v26387 - 2;
          var v24832 = content$$1.charAt(v25855);
          v22571 = v24832 == "*"
        }
        v18112 = v22571
      }
      var v11099 = v18112;
      if(v11099) {
        var v18113 = content$$1.length;
        var v11098 = v18113 - 2;
        content$$1 = JAMScript.call(content$$1.substring, content$$1, [0, v11098])
      }
      var lines = content$$1.split("\n");
      var inParamTag = false;
      var l = 0;
      var v18114 = lines.length;
      var v11107 = l < v18114;
      for(;v11107;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var line$$3 = lines[l]
        }
        var cleanLinePos = JAMScript.call(Comment$$2.cleanDocCommentLine, Comment$$2, [line$$3, true, spacesToRemove]);
        var v11100 = !cleanLinePos;
        if(v11100) {
          l = l + 1;
          var v18115 = lines.length;
          v11107 = l < v18115;
          continue
        }
        var docCommentText = "";
        var prevPos = cleanLinePos.minChar;
        var v11101 = cleanLinePos.minChar;
        var i$$22 = line$$3.indexOf("@", v11101);
        var v18116 = 0 <= i$$22;
        if(v18116) {
          var v22572 = cleanLinePos.limChar;
          v18116 = i$$22 < v22572
        }
        var v11104 = v18116;
        for(;v11104;) {
          var wasInParamtag = inParamTag;
          var v24833 = i$$22 + 1;
          var v22573 = line$$3.indexOf("param", v24833);
          var v22574 = i$$22 + 1;
          var v18117 = v22573 == v22574;
          if(v18117) {
            var v22575 = i$$22 + 6;
            v18117 = JAMScript.call(Comment$$2.isSpaceChar, Comment$$2, [line$$3, v22575])
          }
          var v11103 = v18117;
          if(v11103) {
            var v11102 = !wasInParamtag;
            if(v11102) {
              var v18118 = JAMScript.call(line$$3.substring, line$$3, [prevPos, i$$22]);
              docCommentText = docCommentText + v18118
            }
            prevPos = i$$22;
            inParamTag = true
          }else {
            if(wasInParamtag) {
              prevPos = i$$22;
              inParamTag = false
            }
          }
          var v18119 = i$$22 + 1;
          i$$22 = line$$3.indexOf("@", v18119);
          var v18120 = 0 <= i$$22;
          if(v18120) {
            var v22576 = cleanLinePos.limChar;
            v18120 = i$$22 < v22576
          }
          v11104 = v18120
        }
        var v11105 = !inParamTag;
        if(v11105) {
          var v22577 = cleanLinePos.limChar;
          var v18121 = JAMScript.call(line$$3.substring, line$$3, [prevPos, v22577]);
          docCommentText = docCommentText + v18121
        }
        var newCleanPos = JAMScript.call(Comment$$2.cleanDocCommentLine, Comment$$2, [docCommentText, false]);
        if(newCleanPos) {
          var v11106 = spacesToRemove == undefined;
          if(v11106) {
            spacesToRemove = cleanLinePos.jsDocSpacesRemoved
          }
          JAMScript.call(docCommentLines.push, docCommentLines, [docCommentText])
        }
        l = l + 1;
        var v18122 = lines.length;
        v11107 = l < v18122
      }
      return docCommentLines.join("\n")
    }
    function cleanDocCommentLine(line$$2, jsDocStyleComment, jsDocLineSpaceToRemove) {
      var nonSpaceIndex = JAMScript.call(Comment$$2.consumeLeadingSpace, Comment$$2, [line$$2, 0]);
      var v11111 = nonSpaceIndex != -1;
      if(v11111) {
        var jsDocSpacesRemoved = nonSpaceIndex;
        var v18123 = jsDocStyleComment;
        if(v18123) {
          var v22578 = line$$2.charAt(nonSpaceIndex);
          v18123 = v22578 == "*"
        }
        var v11109 = v18123;
        if(v11109) {
          var startIndex$$1 = nonSpaceIndex + 1;
          nonSpaceIndex = JAMScript.call(Comment$$2.consumeLeadingSpace, Comment$$2, [line$$2, startIndex$$1, jsDocLineSpaceToRemove]);
          var v11108 = nonSpaceIndex != -1;
          if(v11108) {
            jsDocSpacesRemoved = nonSpaceIndex - startIndex$$1
          }else {
            return null
          }
        }
        var v18124;
        var v26388 = line$$2.length;
        var v25856 = v26388 - 1;
        var v24834 = line$$2.charAt(v25856);
        var v22580 = v24834 == "\r";
        if(v22580) {
          var v22579 = line$$2.length;
          v18124 = v22579 - 1
        }else {
          v18124 = line$$2.length
        }
        var v11110 = v18124;
        return{minChar:nonSpaceIndex, limChar:v11110, jsDocSpacesRemoved:jsDocSpacesRemoved}
      }
      return null
    }
    function isSpaceChar(line$$1, index$$41) {
      var length$$13 = line$$1.length;
      var v11113 = index$$41 < length$$13;
      if(v11113) {
        var charCode$$2 = JAMScript.call(line$$1.charCodeAt, line$$1, [index$$41]);
        var v18125 = TypeScript$$4.LexCodeSpace;
        var v11112 = charCode$$2 == v18125;
        var v18127 = !v11112;
        if(v18127) {
          var v18126 = TypeScript$$4.LexCodeTAB;
          v11112 = charCode$$2 == v18126
        }
        return v11112
      }
      return index$$41 == length$$13
    }
    function consumeLeadingSpace(line, startIndex, maxSpacesToRemove) {
      var endIndex = line.length;
      var v11115 = maxSpacesToRemove != undefined;
      if(v11115) {
        var v11114 = startIndex + maxSpacesToRemove;
        endIndex = JAMScript.call(TypeScript$$4.min, TypeScript$$4, [v11114, endIndex])
      }
      var v11117 = startIndex < endIndex;
      for(;v11117;) {
        var charCode$$1 = JAMScript.call(line.charCodeAt, line, [startIndex]);
        var v22581 = TypeScript$$4.LexCodeSpace;
        var v18128 = charCode$$1 != v22581;
        if(v18128) {
          var v22582 = TypeScript$$4.LexCodeTAB;
          v18128 = charCode$$1 != v22582
        }
        var v11116 = v18128;
        if(v11116) {
          return startIndex
        }
        startIndex = startIndex + 1;
        v11117 = startIndex < endIndex
      }
      var v18129 = line.length;
      var v11118 = endIndex != v18129;
      if(v11118) {
        return endIndex
      }
      return-1
    }
    function v318() {
      var v18130 = this.docCommentText;
      var v11120 = v18130 == null;
      if(v11120) {
        var v11119 = this.content;
        var v27547 = JAMScript.call(Comment$$2.cleanJSDocComment, Comment$$2, [v11119]);
        this.docCommentText = v27547
      }
      return this.docCommentText
    }
    function v317() {
      var v11122 = this.isBlockComment;
      if(v11122) {
        var v18131 = this.content;
        var v11121 = v18131.charAt(2);
        return v11121 == "*"
      }
      return false
    }
    function v316() {
      var v18132 = this.text;
      var v11129 = v18132 == null;
      if(v11129) {
        var v11128 = this.isBlockComment;
        if(v11128) {
          var v11123 = this.content;
          var v27548 = v11123.split("\n");
          this.text = v27548;
          var i$$21 = 0;
          var v22583 = this.text;
          var v18133 = v22583.length;
          var v11126 = i$$21 < v18133;
          for(;v11126;) {
            var v11124 = this.text;
            var v11125 = i$$21;
            var v22584 = this.text;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v18134 = v22584[i$$21]
            }
            var v27549 = v18134.replace(/^\s+|\s+$/g, "");
            v11124[v11125] = v27549;
            i$$21 = i$$21 + 1;
            var v22585 = this.text;
            var v18135 = v22585.length;
            v11126 = i$$21 < v18135
          }
        }else {
          var v18136 = this.content;
          var v11127 = v18136.replace(/^\s+|\s+$/g, "");
          this.text = [v11127]
        }
      }
      return this.text
    }
    function Comment$$2(content, isBlockComment, endsLine) {
      var v18137 = TypeScript$$4.NodeType;
      var v11130 = v18137.Comment;
      JAMScript.call(_super$$46.call, _super$$46, [this, v11130]);
      this.content = content;
      this.isBlockComment = isBlockComment;
      this.endsLine = endsLine;
      this.text = null;
      this.docCommentText = null;
      return
    }
    JAMScript.call(__extends, null, [Comment$$2, _super$$46]);
    var v11131 = Comment$$2.prototype;
    v11131.getText = v316;
    var v11132 = Comment$$2.prototype;
    v11132.isDocComment = v317;
    var v11133 = Comment$$2.prototype;
    v11133.getDocCommentText = v318;
    Comment$$2.consumeLeadingSpace = consumeLeadingSpace;
    Comment$$2.isSpaceChar = isSpaceChar;
    Comment$$2.cleanDocCommentLine = cleanDocCommentLine;
    Comment$$2.cleanJSDocComment = cleanJSDocComment;
    Comment$$2.getDocCommentText = getDocCommentText;
    Comment$$2.getParameterDocCommentText = getParameterDocCommentText;
    Comment$$2.getDocCommentTextOfSignatures = getDocCommentTextOfSignatures;
    return Comment$$2
  }
  function v315(_super$$45) {
    function v314(typeFlow$$35) {
      var v11134 = this.body;
      var v27550 = JAMScript.call(typeFlow$$35.typeCheck, typeFlow$$35, [v11134]);
      this.body = v27550;
      return this
    }
    function v313(context$$26) {
      var v11136 = this.body;
      if(v11136) {
        var v11135 = this.body;
        JAMScript.call(context$$26.walk, context$$26, [v11135, this])
      }
      var v18138 = context$$26.walker;
      var v11137 = v18138.options;
      v11137.goChildren = false;
      context$$26.noContinuation = false;
      return
    }
    function v312(emitter$$37, tokenId$$37, startLine$$37) {
      JAMScript.call(emitter$$37.emitParensAndCommentsInPlace, emitter$$37, [this, true]);
      JAMScript.call(emitter$$37.recordSourceMappingStart, emitter$$37, [this]);
      JAMScript.call(emitter$$37.writeToOutput, emitter$$37, ["finally"]);
      var v11138 = this.body;
      var v18139 = TypeScript$$4.TokenID;
      var v11139 = v18139.Finally;
      JAMScript.call(emitter$$37.emitJavascript, emitter$$37, [v11138, v11139, false]);
      JAMScript.call(emitter$$37.recordSourceMappingEnd, emitter$$37, [this]);
      JAMScript.call(emitter$$37.emitParensAndCommentsInPlace, emitter$$37, [this, false]);
      return
    }
    function Finally$$1(body$$2) {
      var v18140 = TypeScript$$4.NodeType;
      var v11140 = v18140.Finally;
      JAMScript.call(_super$$45.call, _super$$45, [this, v11140]);
      this.body = body$$2;
      return
    }
    JAMScript.call(__extends, null, [Finally$$1, _super$$45]);
    var v11141 = Finally$$1.prototype;
    v11141.emit = v312;
    var v11142 = Finally$$1.prototype;
    v11142.addToControlFlow = v313;
    var v11143 = Finally$$1.prototype;
    v11143.typeCheck = v314;
    return Finally$$1
  }
  function v311(_super$$44) {
    function v310(typeFlow$$34) {
      var prevScope = typeFlow$$34.scope;
      typeFlow$$34.scope = this.containedScope;
      var v11144 = this.param;
      var v27551 = JAMScript.call(typeFlow$$34.typeCheck, typeFlow$$34, [v11144]);
      this.param = v27551;
      var v11145 = TypeScript$$4.ValueLocation;
      var exceptVar = JAMScript.new(v11145, []);
      var v11146 = TypeScript$$4.VariableSymbol;
      var v22586 = this.param;
      var v18141 = v22586.id;
      var v11147 = v18141.text;
      var v18142 = this.param;
      var v11148 = v18142.minChar;
      var v22587 = typeFlow$$34.checker;
      var v18143 = v22587.locationInfo;
      var v11149 = v18143.unitIndex;
      var varSym = JAMScript.new(v11146, [v11147, v11148, v11149, exceptVar]);
      exceptVar.symbol = varSym;
      var v11150 = TypeScript$$4.TypeLink;
      var v27552 = JAMScript.new(v11150, []);
      exceptVar.typeLink = v27552;
      var v11151 = exceptVar.typeLink;
      v11151.type = typeFlow$$34.anyType;
      var thisFnc = typeFlow$$34.thisFnc;
      var v18144 = thisFnc;
      if(v18144) {
        v18144 = thisFnc.type
      }
      var v11154 = v18144;
      if(v11154) {
        var v11152 = exceptVar.symbol;
        var v18145 = thisFnc.type;
        v11152.container = v18145.symbol
      }else {
        var v11153 = exceptVar.symbol;
        v11153.container = null
      }
      var v11155 = this.param;
      v11155.sym = exceptVar.symbol;
      var v11156 = typeFlow$$34.scope;
      var v18146 = exceptVar.symbol;
      var v11157 = v18146.container;
      var v11158 = this.param;
      var v11159 = exceptVar.symbol;
      var v18147 = typeFlow$$34.checker;
      var v11160 = v18147.errorReporter;
      JAMScript.call(v11156.enter, v11156, [v11157, v11158, v11159, v11160, false, false, false]);
      var v11161 = this.body;
      var v27553 = JAMScript.call(typeFlow$$34.typeCheck, typeFlow$$34, [v11161]);
      this.body = v27553;
      var v18148 = typeFlow$$34.checker;
      var v11165 = JAMScript.call(v18148.inProvisionalTypecheckMode, v18148, []);
      if(v11165) {
        var v11162 = typeFlow$$34.scope;
        var table = JAMScript.call(v11162.getTable, v11162, []);
        var v18149 = table.secondaryTable;
        var v11163 = v18149.table;
        var v18150 = exceptVar.symbol;
        var v11164 = v18150.name;
        JAMScript.set(v11163, v11164, undefined)
      }
      this.type = typeFlow$$34.voidType;
      typeFlow$$34.scope = prevScope;
      return this
    }
    function v309(context$$25) {
      var v11169 = this.param;
      if(v11169) {
        var v11166 = this.param;
        JAMScript.call(context$$25.addContent, context$$25, [v11166]);
        var v11167 = TypeScript$$4.BasicBlock;
        var bodBlock = JAMScript.new(v11167, []);
        var v11168 = context$$25.current;
        JAMScript.call(v11168.addSuccessor, v11168, [bodBlock]);
        context$$25.current = bodBlock
      }
      var v11171 = this.body;
      if(v11171) {
        var v11170 = this.body;
        JAMScript.call(context$$25.walk, context$$25, [v11170, this])
      }
      context$$25.noContinuation = false;
      var v18151 = context$$25.walker;
      var v11172 = v18151.options;
      v11172.goChildren = false;
      return
    }
    function v308(emitter$$36, tokenId$$36, startLine$$36) {
      JAMScript.call(emitter$$36.emitParensAndCommentsInPlace, emitter$$36, [this, true]);
      JAMScript.call(emitter$$36.recordSourceMappingStart, emitter$$36, [this]);
      JAMScript.call(emitter$$36.writeToOutput, emitter$$36, [" "]);
      var v11173 = this.statement;
      JAMScript.call(emitter$$36.recordSourceMappingStart, emitter$$36, [v11173]);
      JAMScript.call(emitter$$36.writeToOutput, emitter$$36, ["catch ("]);
      var v11174 = this.param;
      var v18152 = TypeScript$$4.TokenID;
      var v11175 = v18152.OpenParen;
      JAMScript.call(emitter$$36.emitJavascript, emitter$$36, [v11174, v11175, false]);
      JAMScript.call(emitter$$36.writeToOutput, emitter$$36, [")"]);
      var v11176 = this.statement;
      JAMScript.call(emitter$$36.recordSourceMappingEnd, emitter$$36, [v11176]);
      var v11177 = this.body;
      var v18153 = TypeScript$$4.TokenID;
      var v11178 = v18153.Catch;
      JAMScript.call(emitter$$36.emitJavascript, emitter$$36, [v11177, v11178, false]);
      JAMScript.call(emitter$$36.recordSourceMappingEnd, emitter$$36, [this]);
      JAMScript.call(emitter$$36.emitParensAndCommentsInPlace, emitter$$36, [this, false]);
      return
    }
    function Catch$$1(param$$3, body$$1) {
      var v18154 = TypeScript$$4.NodeType;
      var v11179 = v18154.Catch;
      JAMScript.call(_super$$44.call, _super$$44, [this, v11179]);
      this.param = param$$3;
      this.body = body$$1;
      var v27554 = JAMScript.new(ASTSpan, []);
      this.statement = v27554;
      this.containedScope = null;
      var v11181 = this.param;
      if(v11181) {
        var v11180 = this.param;
        var v22588 = v11180.varFlags;
        var v24835 = TypeScript$$4.VarFlags;
        var v22589 = v24835.AutoInit;
        v11180.varFlags = v22588 | v22589
      }
      return
    }
    JAMScript.call(__extends, null, [Catch$$1, _super$$44]);
    var v11182 = Catch$$1.prototype;
    v11182.emit = v308;
    var v11183 = Catch$$1.prototype;
    v11183.addToControlFlow = v309;
    var v11184 = Catch$$1.prototype;
    v11184.typeCheck = v310;
    return Catch$$1
  }
  function v307(_super$$43) {
    function v306(context$$24) {
      var v11186 = this.body;
      if(v11186) {
        var v11185 = this.body;
        JAMScript.call(context$$24.walk, context$$24, [v11185, this])
      }
      var v18155 = context$$24.walker;
      var v11187 = v18155.options;
      v11187.goChildren = false;
      context$$24.noContinuation = false;
      return
    }
    function v305(typeFlow$$33) {
      var v11188 = this.body;
      var v27555 = JAMScript.call(typeFlow$$33.typeCheck, typeFlow$$33, [v11188]);
      this.body = v27555;
      return this
    }
    function v304(emitter$$35, tokenId$$35, startLine$$35) {
      JAMScript.call(emitter$$35.emitParensAndCommentsInPlace, emitter$$35, [this, true]);
      JAMScript.call(emitter$$35.recordSourceMappingStart, emitter$$35, [this]);
      JAMScript.call(emitter$$35.writeToOutput, emitter$$35, ["try "]);
      var v11189 = this.body;
      var v18156 = TypeScript$$4.TokenID;
      var v11190 = v18156.Try;
      JAMScript.call(emitter$$35.emitJavascript, emitter$$35, [v11189, v11190, false]);
      JAMScript.call(emitter$$35.recordSourceMappingEnd, emitter$$35, [this]);
      JAMScript.call(emitter$$35.emitParensAndCommentsInPlace, emitter$$35, [this, false]);
      return
    }
    function Try$$1(body) {
      var v18157 = TypeScript$$4.NodeType;
      var v11191 = v18157.Try;
      JAMScript.call(_super$$43.call, _super$$43, [this, v11191]);
      this.body = body;
      return
    }
    JAMScript.call(__extends, null, [Try$$1, _super$$43]);
    var v11192 = Try$$1.prototype;
    v11192.emit = v304;
    var v11193 = Try$$1.prototype;
    v11193.typeCheck = v305;
    var v11194 = Try$$1.prototype;
    v11194.addToControlFlow = v306;
    return Try$$1
  }
  function v303(_super$$42) {
    function v302(typeFlow$$32) {
      var v11195 = this.tryNode;
      var v27556 = JAMScript.call(typeFlow$$32.typeCheck, typeFlow$$32, [v11195]);
      this.tryNode = v27556;
      var v11196 = this.catchNode;
      var v27557 = JAMScript.call(typeFlow$$32.typeCheck, typeFlow$$32, [v11196]);
      this.catchNode = v27557;
      this.type = typeFlow$$32.voidType;
      return this
    }
    function v301(context$$23) {
      var beforeTry = context$$23.current;
      var v11197 = TypeScript$$4.BasicBlock;
      var tryBlock = JAMScript.new(v11197, []);
      JAMScript.call(beforeTry.addSuccessor, beforeTry, [tryBlock]);
      context$$23.current = tryBlock;
      var v11198 = TypeScript$$4.BasicBlock;
      var afterTryCatch = JAMScript.new(v11198, []);
      JAMScript.call(context$$23.pushStatement, context$$23, [this, null, afterTryCatch]);
      var v11199 = this.tryNode;
      JAMScript.call(context$$23.walk, context$$23, [v11199, this]);
      var v18158 = context$$23.noContinuation;
      var v11202 = !v18158;
      if(v11202) {
        var v11201 = context$$23.current;
        if(v11201) {
          var v11200 = context$$23.current;
          JAMScript.call(v11200.addSuccessor, v11200, [afterTryCatch])
        }
      }
      var v11203 = TypeScript$$4.BasicBlock;
      var v27558 = JAMScript.new(v11203, []);
      context$$23.current = v27558;
      var v11204 = context$$23.current;
      JAMScript.call(beforeTry.addSuccessor, beforeTry, [v11204]);
      var v11205 = this.catchNode;
      JAMScript.call(context$$23.walk, context$$23, [v11205, this]);
      JAMScript.call(context$$23.popStatement, context$$23, []);
      var v18159 = context$$23.noContinuation;
      var v11208 = !v18159;
      if(v11208) {
        var v11207 = context$$23.current;
        if(v11207) {
          var v11206 = context$$23.current;
          JAMScript.call(v11206.addSuccessor, v11206, [afterTryCatch])
        }
      }
      context$$23.current = afterTryCatch;
      var v18160 = context$$23.walker;
      var v11209 = v18160.options;
      v11209.goChildren = false;
      return
    }
    function v300(emitter$$34, tokenId$$34, startLine$$34) {
      JAMScript.call(emitter$$34.emitParensAndCommentsInPlace, emitter$$34, [this, true]);
      JAMScript.call(emitter$$34.recordSourceMappingStart, emitter$$34, [this]);
      var v11210 = this.tryNode;
      var v18161 = TypeScript$$4.TokenID;
      var v11211 = v18161.Try;
      JAMScript.call(emitter$$34.emitJavascript, emitter$$34, [v11210, v11211, false]);
      var v11212 = this.catchNode;
      var v18162 = TypeScript$$4.TokenID;
      var v11213 = v18162.Catch;
      JAMScript.call(emitter$$34.emitJavascript, emitter$$34, [v11212, v11213, false]);
      JAMScript.call(emitter$$34.recordSourceMappingEnd, emitter$$34, [this]);
      JAMScript.call(emitter$$34.emitParensAndCommentsInPlace, emitter$$34, [this, false]);
      return
    }
    function v299() {
      return true
    }
    function TryCatch$$1(tryNode$$1, catchNode) {
      var v18163 = TypeScript$$4.NodeType;
      var v11214 = v18163.TryCatch;
      JAMScript.call(_super$$42.call, _super$$42, [this, v11214]);
      this.tryNode = tryNode$$1;
      this.catchNode = catchNode;
      return
    }
    JAMScript.call(__extends, null, [TryCatch$$1, _super$$42]);
    var v11215 = TryCatch$$1.prototype;
    v11215.isCompoundStatement = v299;
    var v11216 = TryCatch$$1.prototype;
    v11216.emit = v300;
    var v11217 = TryCatch$$1.prototype;
    v11217.addToControlFlow = v301;
    var v11218 = TryCatch$$1.prototype;
    v11218.typeCheck = v302;
    return TryCatch$$1
  }
  function v298(_super$$41) {
    function v297(context$$22) {
      var v11219 = TypeScript$$4.BasicBlock;
      var afterFinally = JAMScript.new(v11219, []);
      var v11220 = this.tryNode;
      JAMScript.call(context$$22.walk, context$$22, [v11220, this]);
      var v11221 = TypeScript$$4.BasicBlock;
      var finBlock = JAMScript.new(v11221, []);
      var v11223 = context$$22.current;
      if(v11223) {
        var v11222 = context$$22.current;
        JAMScript.call(v11222.addSuccessor, v11222, [finBlock])
      }
      context$$22.current = finBlock;
      JAMScript.call(context$$22.pushStatement, context$$22, [this, null, afterFinally]);
      var v11224 = this.finallyNode;
      JAMScript.call(context$$22.walk, context$$22, [v11224, this]);
      var v22590 = context$$22.noContinuation;
      var v18164 = !v22590;
      if(v18164) {
        v18164 = context$$22.current
      }
      var v11226 = v18164;
      if(v11226) {
        var v11225 = context$$22.current;
        JAMScript.call(v11225.addSuccessor, v11225, [afterFinally])
      }
      var v22591 = afterFinally.predecessors;
      var v18165 = v22591.length;
      var v11227 = v18165 > 0;
      if(v11227) {
        context$$22.current = afterFinally
      }else {
        context$$22.noContinuation = true
      }
      JAMScript.call(context$$22.popStatement, context$$22, []);
      var v18166 = context$$22.walker;
      var v11228 = v18166.options;
      v11228.goChildren = false;
      return
    }
    function v296(typeFlow$$31) {
      var v11229 = this.tryNode;
      var v27559 = JAMScript.call(typeFlow$$31.typeCheck, typeFlow$$31, [v11229]);
      this.tryNode = v27559;
      var v11230 = this.finallyNode;
      var v27560 = JAMScript.call(typeFlow$$31.typeCheck, typeFlow$$31, [v11230]);
      this.finallyNode = v27560;
      this.type = typeFlow$$31.voidType;
      return this
    }
    function v295(emitter$$33, tokenId$$33, startLine$$33) {
      JAMScript.call(emitter$$33.recordSourceMappingStart, emitter$$33, [this]);
      var v11231 = this.tryNode;
      var v18167 = TypeScript$$4.TokenID;
      var v11232 = v18167.Try;
      JAMScript.call(emitter$$33.emitJavascript, emitter$$33, [v11231, v11232, false]);
      var v11233 = this.finallyNode;
      var v18168 = TypeScript$$4.TokenID;
      var v11234 = v18168.Finally;
      JAMScript.call(emitter$$33.emitJavascript, emitter$$33, [v11233, v11234, false]);
      JAMScript.call(emitter$$33.recordSourceMappingEnd, emitter$$33, [this]);
      return
    }
    function v294() {
      return true
    }
    function TryFinally$$1(tryNode, finallyNode) {
      var v18169 = TypeScript$$4.NodeType;
      var v11235 = v18169.TryFinally;
      JAMScript.call(_super$$41.call, _super$$41, [this, v11235]);
      this.tryNode = tryNode;
      this.finallyNode = finallyNode;
      return
    }
    JAMScript.call(__extends, null, [TryFinally$$1, _super$$41]);
    var v11236 = TryFinally$$1.prototype;
    v11236.isCompoundStatement = v294;
    var v11237 = TryFinally$$1.prototype;
    v11237.emit = v295;
    var v11238 = TryFinally$$1.prototype;
    v11238.typeCheck = v296;
    var v11239 = TryFinally$$1.prototype;
    v11239.addToControlFlow = v297;
    return TryFinally$$1
  }
  function v293(_super$$40) {
    function v292(typeFlow$$30) {
      var prevInTCTR = typeFlow$$30.inTypeRefTypeCheck;
      typeFlow$$30.inTypeRefTypeCheck = true;
      var v11240 = typeFlow$$30.checker;
      var typeLink = JAMScript.call(TypeScript$$4.getTypeLink, TypeScript$$4, [this, v11240, true]);
      var v11241 = typeFlow$$30.checker;
      var v11242 = typeFlow$$30.scope;
      JAMScript.call(v11241.resolveTypeLink, v11241, [v11242, typeLink, false]);
      var v11244 = this.term;
      if(v11244) {
        var v11243 = this.term;
        JAMScript.call(typeFlow$$30.typeCheck, typeFlow$$30, [v11243])
      }
      var v11245 = typeLink.type;
      JAMScript.call(typeFlow$$30.checkForVoidConstructor, typeFlow$$30, [v11245, this]);
      this.type = typeLink.type;
      var v11247 = this.term;
      if(v11247) {
        var v11246 = this.term;
        v11246.type = this.type
      }
      typeFlow$$30.inTypeRefTypeCheck = prevInTCTR;
      return this
    }
    function v291(emitter$$32, tokenId$$32, startLine$$32) {
      throw new Error("should not emit a type ref");
    }
    function TypeReference$$1(term, arrayCount) {
      var v18170 = TypeScript$$4.NodeType;
      var v11248 = v18170.TypeRef;
      JAMScript.call(_super$$40.call, _super$$40, [this, v11248]);
      this.term = term;
      this.arrayCount = arrayCount;
      return
    }
    JAMScript.call(__extends, null, [TypeReference$$1, _super$$40]);
    var v11249 = TypeReference$$1.prototype;
    v11249.emit = v291;
    var v11250 = TypeReference$$1.prototype;
    v11250.typeCheck = v292;
    return TypeReference$$1
  }
  function v290(_super$$39) {
    function v289(context$$21) {
      var v11251 = TypeScript$$4.BasicBlock;
      var execBlock$$1 = JAMScript.new(v11251, []);
      var v11252 = context$$21.currentSwitch;
      var v22592 = context$$21.currentSwitch;
      var v18171 = v22592.length;
      var v11253 = v18171 - 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var sw$$2 = v11252[v11253]
      }
      var v11256 = this.expr;
      if(v11256) {
        var v11254 = TypeScript$$4.BasicBlock;
        var exprBlock = JAMScript.new(v11254, []);
        context$$21.current = exprBlock;
        JAMScript.call(sw$$2.addSuccessor, sw$$2, [exprBlock]);
        var v11255 = this.expr;
        JAMScript.call(context$$21.addContent, context$$21, [v11255]);
        JAMScript.call(exprBlock.addSuccessor, exprBlock, [execBlock$$1])
      }else {
        JAMScript.call(sw$$2.addSuccessor, sw$$2, [execBlock$$1])
      }
      context$$21.current = execBlock$$1;
      var v11258 = this.body;
      if(v11258) {
        var v11257 = this.body;
        JAMScript.call(context$$21.walk, context$$21, [v11257, this])
      }
      context$$21.noContinuation = false;
      var v18172 = context$$21.walker;
      var v11259 = v18172.options;
      v11259.goChildren = false;
      return
    }
    function v288(typeFlow$$29) {
      var v11260 = this.expr;
      var v27561 = JAMScript.call(typeFlow$$29.typeCheck, typeFlow$$29, [v11260]);
      this.expr = v27561;
      var v11261 = this.body;
      JAMScript.call(typeFlow$$29.typeCheck, typeFlow$$29, [v11261]);
      this.type = typeFlow$$29.voidType;
      return this
    }
    function v287(emitter$$31, tokenId$$31, startLine$$31) {
      JAMScript.call(emitter$$31.emitParensAndCommentsInPlace, emitter$$31, [this, true]);
      JAMScript.call(emitter$$31.recordSourceMappingStart, emitter$$31, [this]);
      var v11264 = this.expr;
      if(v11264) {
        JAMScript.call(emitter$$31.writeToOutput, emitter$$31, ["case "]);
        var v11262 = this.expr;
        var v18173 = TypeScript$$4.TokenID;
        var v11263 = v18173.Identifier;
        JAMScript.call(emitter$$31.emitJavascript, emitter$$31, [v11262, v11263, false])
      }else {
        JAMScript.call(emitter$$31.writeToOutput, emitter$$31, ["default"])
      }
      JAMScript.call(emitter$$31.writeToOutput, emitter$$31, [":"]);
      var v25857 = this.body;
      var v24836 = v25857.members;
      var v22593 = v24836.length;
      var v18174 = v22593 == 1;
      if(v18174) {
        var v26389 = this.body;
        var v25858 = v26389.members;
        var v24837 = v25858[0];
        var v22594 = v24837.nodeType;
        var v24838 = TypeScript$$4.NodeType;
        var v22595 = v24838.Block;
        v18174 = v22594 == v22595
      }
      var v11269 = v18174;
      if(v11269) {
        var v11265 = this.body;
        JAMScript.call(emitter$$31.emitJavascriptStatements, emitter$$31, [v11265, false])
      }else {
        JAMScript.call(emitter$$31.writeLineToOutput, emitter$$31, [""]);
        var v11266 = emitter$$31.indenter;
        JAMScript.call(v11266.increaseIndent, v11266, []);
        var v11267 = this.body;
        JAMScript.call(emitter$$31.emitBareJavascriptStatements, emitter$$31, [v11267]);
        var v11268 = emitter$$31.indenter;
        JAMScript.call(v11268.decreaseIndent, v11268, [])
      }
      JAMScript.call(emitter$$31.recordSourceMappingEnd, emitter$$31, [this]);
      JAMScript.call(emitter$$31.emitParensAndCommentsInPlace, emitter$$31, [this, false]);
      return
    }
    function CaseStatement$$1() {
      var v18175 = TypeScript$$4.NodeType;
      var v11270 = v18175.Case;
      JAMScript.call(_super$$39.call, _super$$39, [this, v11270]);
      this.expr = null;
      return
    }
    JAMScript.call(__extends, null, [CaseStatement$$1, _super$$39]);
    var v11271 = CaseStatement$$1.prototype;
    v11271.emit = v287;
    var v11272 = CaseStatement$$1.prototype;
    v11272.typeCheck = v288;
    var v11273 = CaseStatement$$1.prototype;
    v11273.addToControlFlow = v289;
    return CaseStatement$$1
  }
  function v286(_super$$38) {
    function v285(context$$20) {
      var condBlock$$2 = context$$20.current;
      var v11274 = this.val;
      JAMScript.call(context$$20.addContent, context$$20, [v11274]);
      var v11275 = TypeScript$$4.BasicBlock;
      var execBlock = JAMScript.new(v11275, []);
      var v11276 = TypeScript$$4.BasicBlock;
      var afterSwitch = JAMScript.new(v11276, []);
      JAMScript.call(condBlock$$2.addSuccessor, condBlock$$2, [execBlock]);
      JAMScript.call(context$$20.pushSwitch, context$$20, [execBlock]);
      context$$20.current = execBlock;
      JAMScript.call(context$$20.pushStatement, context$$20, [this, execBlock, afterSwitch]);
      var v11277 = this.caseList;
      JAMScript.call(context$$20.walk, context$$20, [v11277, this]);
      JAMScript.call(context$$20.popSwitch, context$$20, []);
      var targetInfo$$4 = JAMScript.call(context$$20.popStatement, context$$20, []);
      var v11278 = this.defaultCase;
      var hasCondContinuation = v11278 == null;
      var v18176 = this.defaultCase;
      var v11279 = v18176 == null;
      if(v11279) {
        JAMScript.call(condBlock$$2.addSuccessor, condBlock$$2, [afterSwitch])
      }
      var v22596 = afterSwitch.predecessors;
      var v18177 = v22596.length;
      var v11280 = v18177 > 0;
      if(v11280) {
        context$$20.noContinuation = false;
        context$$20.current = afterSwitch
      }else {
        context$$20.noContinuation = true
      }
      var v18178 = context$$20.walker;
      var v11281 = v18178.options;
      v11281.goChildren = false;
      return
    }
    function v284(typeFlow$$28) {
      var v18179 = this.caseList;
      var v11282 = v18179.members;
      var len$$5 = v11282.length;
      var v11283 = this.val;
      var v27562 = JAMScript.call(typeFlow$$28.typeCheck, typeFlow$$28, [v11283]);
      this.val = v27562;
      var i$$20 = 0;
      var v11286 = i$$20 < len$$5;
      for(;v11286;) {
        var v18180 = this.caseList;
        var v11284 = v18180.members;
        var v11285 = i$$20;
        var v24839 = this.caseList;
        var v22597 = v24839.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v18181 = v22597[i$$20]
        }
        var v27563 = JAMScript.call(typeFlow$$28.typeCheck, typeFlow$$28, [v18181]);
        v11284[v11285] = v27563;
        i$$20 = i$$20 + 1;
        v11286 = i$$20 < len$$5
      }
      var v11287 = this.defaultCase;
      var v27564 = JAMScript.call(typeFlow$$28.typeCheck, typeFlow$$28, [v11287]);
      this.defaultCase = v27564;
      this.type = typeFlow$$28.voidType;
      return this
    }
    function v283(emitter$$30, tokenId$$30, startLine$$30) {
      JAMScript.call(emitter$$30.emitParensAndCommentsInPlace, emitter$$30, [this, true]);
      JAMScript.call(emitter$$30.recordSourceMappingStart, emitter$$30, [this]);
      var temp$$7 = JAMScript.call(emitter$$30.setInObjectLiteral, emitter$$30, [false]);
      var v11288 = this.statement;
      JAMScript.call(emitter$$30.recordSourceMappingStart, emitter$$30, [v11288]);
      JAMScript.call(emitter$$30.writeToOutput, emitter$$30, ["switch("]);
      var v11289 = this.val;
      var v18182 = TypeScript$$4.TokenID;
      var v11290 = v18182.Identifier;
      JAMScript.call(emitter$$30.emitJavascript, emitter$$30, [v11289, v11290, false]);
      JAMScript.call(emitter$$30.writeToOutput, emitter$$30, [")"]);
      var v11291 = this.statement;
      JAMScript.call(emitter$$30.recordSourceMappingEnd, emitter$$30, [v11291]);
      JAMScript.call(emitter$$30.writeLineToOutput, emitter$$30, [" {"]);
      var v11292 = emitter$$30.indenter;
      JAMScript.call(v11292.increaseIndent, v11292, []);
      var v18183 = this.caseList;
      var v11293 = v18183.members;
      var casesLen = v11293.length;
      var i$$19 = 0;
      var v11296 = i$$19 < casesLen;
      for(;v11296;) {
        var v18184 = this.caseList;
        var v11294 = v18184.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var caseExpr = v11294[i$$19]
        }
        var v18185 = TypeScript$$4.TokenID;
        var v11295 = v18185.Case;
        JAMScript.call(emitter$$30.emitJavascript, emitter$$30, [caseExpr, v11295, true]);
        i$$19 = i$$19 + 1;
        v11296 = i$$19 < casesLen
      }
      var v11297 = emitter$$30.indenter;
      JAMScript.call(v11297.decreaseIndent, v11297, []);
      JAMScript.call(emitter$$30.emitIndent, emitter$$30, []);
      JAMScript.call(emitter$$30.writeToOutput, emitter$$30, ["}"]);
      JAMScript.call(emitter$$30.setInObjectLiteral, emitter$$30, [temp$$7]);
      JAMScript.call(emitter$$30.recordSourceMappingEnd, emitter$$30, [this]);
      JAMScript.call(emitter$$30.emitParensAndCommentsInPlace, emitter$$30, [this, false]);
      return
    }
    function v282() {
      return true
    }
    function SwitchStatement$$1(val$$4) {
      var v18186 = TypeScript$$4.NodeType;
      var v11298 = v18186.Switch;
      JAMScript.call(_super$$38.call, _super$$38, [this, v11298]);
      this.val = val$$4;
      this.defaultCase = null;
      var v27565 = JAMScript.new(ASTSpan, []);
      this.statement = v27565;
      return
    }
    JAMScript.call(__extends, null, [SwitchStatement$$1, _super$$38]);
    var v11299 = SwitchStatement$$1.prototype;
    v11299.isCompoundStatement = v282;
    var v11300 = SwitchStatement$$1.prototype;
    v11300.emit = v283;
    var v11301 = SwitchStatement$$1.prototype;
    v11301.typeCheck = v284;
    var v11302 = SwitchStatement$$1.prototype;
    v11302.addToControlFlow = v285;
    return SwitchStatement$$1
  }
  function v281(_super$$37) {
    function v280(typeFlow$$27) {
      return JAMScript.call(typeFlow$$27.typeCheckWith, typeFlow$$27, [this])
    }
    function v279(emitter$$29, tokenId$$29, startLine$$29) {
      JAMScript.call(emitter$$29.emitParensAndCommentsInPlace, emitter$$29, [this, true]);
      JAMScript.call(emitter$$29.recordSourceMappingStart, emitter$$29, [this]);
      JAMScript.call(emitter$$29.writeToOutput, emitter$$29, ["with ("]);
      var v11305 = this.expr;
      if(v11305) {
        var v11303 = this.expr;
        var v18187 = TypeScript$$4.TokenID;
        var v11304 = v18187.With;
        JAMScript.call(emitter$$29.emitJavascript, emitter$$29, [v11303, v11304, false])
      }
      JAMScript.call(emitter$$29.writeToOutput, emitter$$29, [")"]);
      var v11306 = this.body;
      JAMScript.call(emitter$$29.emitJavascriptStatements, emitter$$29, [v11306, true]);
      JAMScript.call(emitter$$29.recordSourceMappingEnd, emitter$$29, [this]);
      JAMScript.call(emitter$$29.emitParensAndCommentsInPlace, emitter$$29, [this, false]);
      return
    }
    function v278() {
      return true
    }
    function WithStatement$$1(expr$$3) {
      var v18188 = TypeScript$$4.NodeType;
      var v11307 = v18188.With;
      JAMScript.call(_super$$37.call, _super$$37, [this, v11307]);
      this.expr = expr$$3;
      this.withSym = null;
      return
    }
    JAMScript.call(__extends, null, [WithStatement$$1, _super$$37]);
    var v11308 = WithStatement$$1.prototype;
    v11308.isCompoundStatement = v278;
    var v11309 = WithStatement$$1.prototype;
    v11309.emit = v279;
    var v11310 = WithStatement$$1.prototype;
    v11310.typeCheck = v280;
    return WithStatement$$1
  }
  function v277(_super$$36) {
    function v276(context$$19) {
      var v11312 = this.init;
      if(v11312) {
        var v11311 = this.init;
        JAMScript.call(context$$19.addContent, context$$19, [v11311])
      }
      var loopHeader$$3 = context$$19.current;
      var v11313 = TypeScript$$4.BasicBlock;
      var loopStart$$3 = JAMScript.new(v11313, []);
      var v11314 = TypeScript$$4.BasicBlock;
      var afterLoop$$3 = JAMScript.new(v11314, []);
      JAMScript.call(loopHeader$$3.addSuccessor, loopHeader$$3, [loopStart$$3]);
      context$$19.current = loopStart$$3;
      var condBlock$$1 = null;
      var continueTarget = loopStart$$3;
      var incrBB = null;
      var v11316 = this.incr;
      if(v11316) {
        var v11315 = TypeScript$$4.BasicBlock;
        incrBB = JAMScript.new(v11315, []);
        continueTarget = incrBB
      }
      var v11320 = this.cond;
      if(v11320) {
        condBlock$$1 = context$$19.current;
        var v11317 = this.cond;
        JAMScript.call(context$$19.addContent, context$$19, [v11317]);
        var v11318 = TypeScript$$4.BasicBlock;
        var v27566 = JAMScript.new(v11318, []);
        context$$19.current = v27566;
        var v11319 = context$$19.current;
        JAMScript.call(condBlock$$1.addSuccessor, condBlock$$1, [v11319])
      }
      var targetInfo$$3 = null;
      var v11322 = this.body;
      if(v11322) {
        JAMScript.call(context$$19.pushStatement, context$$19, [this, continueTarget, afterLoop$$3]);
        var v11321 = this.body;
        JAMScript.call(context$$19.walk, context$$19, [v11321, this]);
        targetInfo$$3 = JAMScript.call(context$$19.popStatement, context$$19, [])
      }
      var v11328 = this.incr;
      if(v11328) {
        var v11327 = context$$19.noContinuation;
        if(v11327) {
          var v22598 = incrBB.predecessors;
          var v18189 = v22598.length;
          var v11324 = v18189 == 0;
          if(v11324) {
            var v11323 = this.incr;
            JAMScript.call(context$$19.addUnreachable, context$$19, [v11323])
          }
        }else {
          var v11325 = context$$19.current;
          JAMScript.call(v11325.addSuccessor, v11325, [incrBB]);
          context$$19.current = incrBB;
          var v11326 = this.incr;
          JAMScript.call(context$$19.addContent, context$$19, [v11326])
        }
      }
      var loopEnd$$3 = context$$19.current;
      var v18190 = context$$19.noContinuation;
      var v11329 = !v18190;
      if(v11329) {
        JAMScript.call(loopEnd$$3.addSuccessor, loopEnd$$3, [loopStart$$3])
      }
      if(condBlock$$1) {
        JAMScript.call(condBlock$$1.addSuccessor, condBlock$$1, [afterLoop$$3]);
        context$$19.noContinuation = false
      }
      var v22599 = afterLoop$$3.predecessors;
      var v18191 = v22599.length;
      var v11330 = v18191 > 0;
      if(v11330) {
        context$$19.noContinuation = false;
        context$$19.current = afterLoop$$3
      }
      var v18192 = context$$19.walker;
      var v11331 = v18192.options;
      v11331.goChildren = false;
      return
    }
    function v275(typeFlow$$26) {
      return JAMScript.call(typeFlow$$26.typeCheckFor, typeFlow$$26, [this])
    }
    function v274(emitter$$28, tokenId$$28, startLine$$28) {
      JAMScript.call(emitter$$28.emitParensAndCommentsInPlace, emitter$$28, [this, true]);
      JAMScript.call(emitter$$28.recordSourceMappingStart, emitter$$28, [this]);
      var temp$$6 = JAMScript.call(emitter$$28.setInObjectLiteral, emitter$$28, [false]);
      JAMScript.call(emitter$$28.writeToOutput, emitter$$28, ["for("]);
      var v11338 = this.init;
      if(v11338) {
        var v22600 = this.init;
        var v18193 = v22600.nodeType;
        var v22601 = TypeScript$$4.NodeType;
        var v18194 = v22601.List;
        var v11337 = v18193 != v18194;
        if(v11337) {
          var v11332 = this.init;
          var v18195 = TypeScript$$4.TokenID;
          var v11333 = v18195.For;
          JAMScript.call(emitter$$28.emitJavascript, emitter$$28, [v11332, v11333, false])
        }else {
          var v22602 = this.init;
          var v18196 = v22602.members;
          var v11334 = v18196.length;
          JAMScript.call(emitter$$28.setInVarBlock, emitter$$28, [v11334]);
          var v11335 = this.init;
          var v18197 = TypeScript$$4.TokenID;
          var v11336 = v18197.For;
          JAMScript.call(emitter$$28.emitJavascriptList, emitter$$28, [v11335, null, v11336, false, false, false])
        }
      }
      JAMScript.call(emitter$$28.writeToOutput, emitter$$28, ["; "]);
      var v11339 = this.cond;
      var v18198 = TypeScript$$4.TokenID;
      var v11340 = v18198.For;
      JAMScript.call(emitter$$28.emitJavascript, emitter$$28, [v11339, v11340, false]);
      JAMScript.call(emitter$$28.writeToOutput, emitter$$28, ["; "]);
      var v11341 = this.incr;
      var v18199 = TypeScript$$4.TokenID;
      var v11342 = v18199.For;
      JAMScript.call(emitter$$28.emitJavascript, emitter$$28, [v11341, v11342, false]);
      JAMScript.call(emitter$$28.writeToOutput, emitter$$28, [")"]);
      var v11343 = this.body;
      JAMScript.call(emitter$$28.emitJavascriptStatements, emitter$$28, [v11343, true]);
      JAMScript.call(emitter$$28.setInObjectLiteral, emitter$$28, [temp$$6]);
      JAMScript.call(emitter$$28.recordSourceMappingEnd, emitter$$28, [this]);
      JAMScript.call(emitter$$28.emitParensAndCommentsInPlace, emitter$$28, [this, false]);
      return
    }
    function v273() {
      return true
    }
    function ForStatement$$1(init) {
      var v18200 = TypeScript$$4.NodeType;
      var v11344 = v18200.For;
      JAMScript.call(_super$$36.call, _super$$36, [this, v11344]);
      this.init = init;
      return
    }
    JAMScript.call(__extends, null, [ForStatement$$1, _super$$36]);
    var v11345 = ForStatement$$1.prototype;
    v11345.isLoop = v273;
    var v11346 = ForStatement$$1.prototype;
    v11346.emit = v274;
    var v11347 = ForStatement$$1.prototype;
    v11347.typeCheck = v275;
    var v11348 = ForStatement$$1.prototype;
    v11348.addToControlFlow = v276;
    return ForStatement$$1
  }
  function v272(_super$$35) {
    function v271(context$$18) {
      var v11350 = this.lval;
      if(v11350) {
        var v11349 = this.lval;
        JAMScript.call(context$$18.addContent, context$$18, [v11349])
      }
      var v11352 = this.obj;
      if(v11352) {
        var v11351 = this.obj;
        JAMScript.call(context$$18.addContent, context$$18, [v11351])
      }
      var loopHeader$$2 = context$$18.current;
      var v11353 = TypeScript$$4.BasicBlock;
      var loopStart$$2 = JAMScript.new(v11353, []);
      var v11354 = TypeScript$$4.BasicBlock;
      var afterLoop$$2 = JAMScript.new(v11354, []);
      JAMScript.call(loopHeader$$2.addSuccessor, loopHeader$$2, [loopStart$$2]);
      context$$18.current = loopStart$$2;
      var v11356 = this.body;
      if(v11356) {
        JAMScript.call(context$$18.pushStatement, context$$18, [this, loopStart$$2, afterLoop$$2]);
        var v11355 = this.body;
        JAMScript.call(context$$18.walk, context$$18, [v11355, this]);
        JAMScript.call(context$$18.popStatement, context$$18, [])
      }
      var v18201 = context$$18.noContinuation;
      var v11357 = !v18201;
      if(v11357) {
        var loopEnd$$2 = context$$18.current;
        JAMScript.call(loopEnd$$2.addSuccessor, loopEnd$$2, [loopStart$$2])
      }
      context$$18.current = afterLoop$$2;
      context$$18.noContinuation = false;
      JAMScript.call(loopHeader$$2.addSuccessor, loopHeader$$2, [afterLoop$$2]);
      var v18202 = context$$18.walker;
      var v11358 = v18202.options;
      v11358.goChildren = false;
      return
    }
    function v270(typeFlow$$25) {
      var v22603 = typeFlow$$25.checker;
      var v18203 = v22603.styleSettings;
      var v11361 = v18203.forin;
      if(v11361) {
        var v18204 = JAMScript.call(this.isFiltered, this, []);
        var v11360 = !v18204;
        if(v11360) {
          var v18205 = typeFlow$$25.checker;
          var v11359 = v18205.errorReporter;
          JAMScript.call(v11359.styleError, v11359, [this, "no hasOwnProperty filter"])
        }
      }
      return JAMScript.call(typeFlow$$25.typeCheckForIn, typeFlow$$25, [this])
    }
    function v269(emitter$$27, tokenId$$27, startLine$$27) {
      JAMScript.call(emitter$$27.emitParensAndCommentsInPlace, emitter$$27, [this, true]);
      JAMScript.call(emitter$$27.recordSourceMappingStart, emitter$$27, [this]);
      var temp$$5 = JAMScript.call(emitter$$27.setInObjectLiteral, emitter$$27, [false]);
      var v11362 = this.statement;
      JAMScript.call(emitter$$27.recordSourceMappingStart, emitter$$27, [v11362]);
      JAMScript.call(emitter$$27.writeToOutput, emitter$$27, ["for("]);
      var v11363 = this.lval;
      var v18206 = TypeScript$$4.TokenID;
      var v11364 = v18206.For;
      JAMScript.call(emitter$$27.emitJavascript, emitter$$27, [v11363, v11364, false]);
      JAMScript.call(emitter$$27.writeToOutput, emitter$$27, [" in "]);
      var v11365 = this.obj;
      var v18207 = TypeScript$$4.TokenID;
      var v11366 = v18207.For;
      JAMScript.call(emitter$$27.emitJavascript, emitter$$27, [v11365, v11366, false]);
      JAMScript.call(emitter$$27.writeToOutput, emitter$$27, [")"]);
      var v11367 = this.statement;
      JAMScript.call(emitter$$27.recordSourceMappingEnd, emitter$$27, [v11367]);
      var v11368 = this.body;
      JAMScript.call(emitter$$27.emitJavascriptStatements, emitter$$27, [v11368, true]);
      JAMScript.call(emitter$$27.setInObjectLiteral, emitter$$27, [temp$$5]);
      JAMScript.call(emitter$$27.recordSourceMappingEnd, emitter$$27, [this]);
      JAMScript.call(emitter$$27.emitParensAndCommentsInPlace, emitter$$27, [this, false]);
      return
    }
    function v268() {
      var v11385 = this.body;
      if(v11385) {
        var singleItem = null;
        var v22604 = this.body;
        var v18208 = v22604.nodeType;
        var v22605 = TypeScript$$4.NodeType;
        var v18209 = v22605.List;
        var v11371 = v18208 == v18209;
        if(v11371) {
          var stmts = this.body;
          var v22606 = stmts.members;
          var v18210 = v22606.length;
          var v11370 = v18210 == 1;
          if(v11370) {
            var v11369 = stmts.members;
            singleItem = v11369[0]
          }
        }else {
          singleItem = this.body
        }
        var v11384 = singleItem !== null;
        if(v11384) {
          var v18211 = singleItem.nodeType;
          var v22607 = TypeScript$$4.NodeType;
          var v18212 = v22607.Block;
          var v11374 = v18211 == v18212;
          if(v11374) {
            var block = singleItem;
            var v22608 = block.statements;
            var v18213 = v22608 !== null;
            if(v18213) {
              var v25859 = block.statements;
              var v24840 = v25859.members;
              var v22609 = v24840.length;
              v18213 = v22609 == 1
            }
            var v11373 = v18213;
            if(v11373) {
              var v18214 = block.statements;
              var v11372 = v18214.members;
              singleItem = v11372[0]
            }
          }
          var v18215 = singleItem.nodeType;
          var v22610 = TypeScript$$4.NodeType;
          var v18216 = v22610.If;
          var v11383 = v18215 == v18216;
          if(v11383) {
            var cond$$2 = singleItem.cond;
            var v18217 = cond$$2.nodeType;
            var v22611 = TypeScript$$4.NodeType;
            var v18218 = v22611.Call;
            var v11382 = v18217 == v18218;
            if(v11382) {
              var target$$38 = cond$$2.target;
              var v18219 = target$$38.nodeType;
              var v22612 = TypeScript$$4.NodeType;
              var v18220 = v22612.Dot;
              var v11381 = v18219 == v18220;
              if(v11381) {
                var binex = target$$38;
                var v24841 = binex.operand1;
                var v22613 = v24841.nodeType;
                var v24842 = TypeScript$$4.NodeType;
                var v22614 = v24842.Name;
                var v18221 = v22613 == v22614;
                if(v18221) {
                  var v25860 = this.obj;
                  var v24843 = v25860.nodeType;
                  var v25861 = TypeScript$$4.NodeType;
                  var v24844 = v25861.Name;
                  var v22615 = v24843 == v24844;
                  if(v22615) {
                    var v25862 = binex.operand1;
                    var v24845 = v25862.actualText;
                    var v25863 = this.obj;
                    var v24846 = v25863.actualText;
                    v22615 = v24845 == v24846
                  }
                  v18221 = v22615
                }
                var v11380 = v18221;
                if(v11380) {
                  var prop$$4 = binex.operand2;
                  var v18222 = prop$$4.actualText;
                  var v11379 = v18222 == "hasOwnProperty";
                  if(v11379) {
                    var args$$2 = cond$$2.arguments;
                    var v18223 = args$$2 !== null;
                    if(v18223) {
                      var v24847 = args$$2.members;
                      var v22616 = v24847.length;
                      v18223 = v22616 == 1
                    }
                    var v11378 = v18223;
                    if(v11378) {
                      var v11375 = args$$2.members;
                      var arg$$5 = v11375[0];
                      var v22617 = arg$$5.nodeType;
                      var v24848 = TypeScript$$4.NodeType;
                      var v22618 = v24848.Name;
                      var v18224 = v22617 == v22618;
                      if(v18224) {
                        var v24849 = this.lval;
                        var v22619 = v24849.nodeType;
                        var v24850 = TypeScript$$4.NodeType;
                        var v22620 = v24850.Name;
                        v18224 = v22619 == v22620
                      }
                      var v11377 = v18224;
                      if(v11377) {
                        var v22621 = this.lval;
                        var v18225 = v22621.actualText;
                        var v18226 = arg$$5.actualText;
                        var v11376 = v18225 == v18226;
                        if(v11376) {
                          return true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return false
    }
    function v267() {
      return true
    }
    function ForInStatement$$1(lval, obj$$16) {
      var v18227 = TypeScript$$4.NodeType;
      var v11386 = v18227.ForIn;
      JAMScript.call(_super$$35.call, _super$$35, [this, v11386]);
      this.lval = lval;
      this.obj = obj$$16;
      var v27567 = JAMScript.new(ASTSpan, []);
      this.statement = v27567;
      var v18228 = this.lval;
      if(v18228) {
        var v24851 = this.lval;
        var v22622 = v24851.nodeType;
        var v24852 = TypeScript$$4.NodeType;
        var v22623 = v24852.VarDecl;
        v18228 = v22622 == v22623
      }
      var v11388 = v18228;
      if(v11388) {
        var v11387 = this.lval;
        var v22624 = v11387.varFlags;
        var v24853 = TypeScript$$4.VarFlags;
        var v22625 = v24853.AutoInit;
        v11387.varFlags = v22624 | v22625
      }
      return
    }
    JAMScript.call(__extends, null, [ForInStatement$$1, _super$$35]);
    var v11389 = ForInStatement$$1.prototype;
    v11389.isLoop = v267;
    var v11390 = ForInStatement$$1.prototype;
    v11390.isFiltered = v268;
    var v11391 = ForInStatement$$1.prototype;
    v11391.emit = v269;
    var v11392 = ForInStatement$$1.prototype;
    v11392.typeCheck = v270;
    var v11393 = ForInStatement$$1.prototype;
    v11393.addToControlFlow = v271;
    return ForInStatement$$1
  }
  function v266(_super$$34) {
    function EndCode$$1() {
      var v18229 = TypeScript$$4.NodeType;
      var v11394 = v18229.EndCode;
      JAMScript.call(_super$$34.call, _super$$34, [this, v11394]);
      return
    }
    JAMScript.call(__extends, null, [EndCode$$1, _super$$34]);
    return EndCode$$1
  }
  function v265(_super$$33) {
    function v264(typeFlow$$24) {
      return JAMScript.call(typeFlow$$24.typeCheckReturn, typeFlow$$24, [this])
    }
    function v263(context$$17) {
      var v18230 = _super$$33.prototype;
      var v11395 = v18230.addToControlFlow;
      JAMScript.call(v11395.call, v11395, [this, context$$17]);
      JAMScript.call(context$$17.returnStmt, context$$17, []);
      return
    }
    function v262(emitter$$26, tokenId$$26, startLine$$26) {
      JAMScript.call(emitter$$26.emitParensAndCommentsInPlace, emitter$$26, [this, true]);
      JAMScript.call(emitter$$26.recordSourceMappingStart, emitter$$26, [this]);
      var temp$$4 = JAMScript.call(emitter$$26.setInObjectLiteral, emitter$$26, [false]);
      var v11399 = this.returnExpression;
      if(v11399) {
        JAMScript.call(emitter$$26.writeToOutput, emitter$$26, ["return "]);
        var v11396 = this.returnExpression;
        var v18231 = TypeScript$$4.TokenID;
        var v11397 = v18231.Semicolon;
        JAMScript.call(emitter$$26.emitJavascript, emitter$$26, [v11396, v11397, false]);
        var v22626 = this.returnExpression;
        var v18232 = v22626.nodeType;
        var v22627 = TypeScript$$4.NodeType;
        var v18233 = v22627.FuncDecl;
        var v11398 = v18232 === v18233;
        if(v11398) {
          JAMScript.call(emitter$$26.writeToOutput, emitter$$26, [";"])
        }
      }else {
        JAMScript.call(emitter$$26.writeToOutput, emitter$$26, ["return;"])
      }
      JAMScript.call(emitter$$26.setInObjectLiteral, emitter$$26, [temp$$4]);
      JAMScript.call(emitter$$26.recordSourceMappingEnd, emitter$$26, [this]);
      JAMScript.call(emitter$$26.emitParensAndCommentsInPlace, emitter$$26, [this, false]);
      return
    }
    function ReturnStatement$$1() {
      var v18234 = TypeScript$$4.NodeType;
      var v11400 = v18234.Return;
      JAMScript.call(_super$$33.call, _super$$33, [this, v11400]);
      this.returnExpression = null;
      return
    }
    JAMScript.call(__extends, null, [ReturnStatement$$1, _super$$33]);
    var v11401 = ReturnStatement$$1.prototype;
    v11401.emit = v262;
    var v11402 = ReturnStatement$$1.prototype;
    v11402.addToControlFlow = v263;
    var v11403 = ReturnStatement$$1.prototype;
    v11403.typeCheck = v264;
    return ReturnStatement$$1
  }
  function v261(_super$$32) {
    function v260(context$$16) {
      var v11404 = this.cond;
      JAMScript.call(v11404.addToControlFlow, v11404, [context$$16]);
      var v11405 = TypeScript$$4.BasicBlock;
      var afterIf = JAMScript.new(v11405, []);
      var beforeIf = context$$16.current;
      JAMScript.call(context$$16.pushStatement, context$$16, [this, beforeIf, afterIf]);
      var hasContinuation = false;
      var v11406 = TypeScript$$4.BasicBlock;
      var v27568 = JAMScript.new(v11406, []);
      context$$16.current = v27568;
      var v11407 = context$$16.current;
      JAMScript.call(beforeIf.addSuccessor, beforeIf, [v11407]);
      var v11408 = this.thenBod;
      JAMScript.call(context$$16.walk, context$$16, [v11408, this]);
      var v18235 = context$$16.noContinuation;
      var v11410 = !v18235;
      if(v11410) {
        hasContinuation = true;
        var v11409 = context$$16.current;
        JAMScript.call(v11409.addSuccessor, v11409, [afterIf])
      }
      var v11416 = this.elseBod;
      if(v11416) {
        var v11411 = TypeScript$$4.BasicBlock;
        var v27569 = JAMScript.new(v11411, []);
        context$$16.current = v27569;
        context$$16.noContinuation = false;
        var v11412 = context$$16.current;
        JAMScript.call(beforeIf.addSuccessor, beforeIf, [v11412]);
        var v11413 = this.elseBod;
        JAMScript.call(context$$16.walk, context$$16, [v11413, this]);
        var v18236 = context$$16.noContinuation;
        var v11415 = !v18236;
        if(v11415) {
          hasContinuation = true;
          var v11414 = context$$16.current;
          JAMScript.call(v11414.addSuccessor, v11414, [afterIf])
        }else {
          if(hasContinuation) {
            context$$16.noContinuation = false
          }
        }
      }else {
        JAMScript.call(beforeIf.addSuccessor, beforeIf, [afterIf]);
        context$$16.noContinuation = false;
        hasContinuation = true
      }
      var targetInfo$$2 = JAMScript.call(context$$16.popStatement, context$$16, []);
      var v22628 = afterIf.predecessors;
      var v18237 = v22628.length;
      var v11417 = v18237 > 0;
      if(v11417) {
        context$$16.noContinuation = false;
        hasContinuation = true
      }
      if(hasContinuation) {
        context$$16.current = afterIf
      }
      var v18238 = context$$16.walker;
      var v11418 = v18238.options;
      v11418.goChildren = false;
      return
    }
    function v259(typeFlow$$23) {
      return JAMScript.call(typeFlow$$23.typeCheckIf, typeFlow$$23, [this])
    }
    function v258(emitter$$25, tokenId$$25, startLine$$25) {
      JAMScript.call(emitter$$25.emitParensAndCommentsInPlace, emitter$$25, [this, true]);
      JAMScript.call(emitter$$25.recordSourceMappingStart, emitter$$25, [this]);
      var temp$$3 = JAMScript.call(emitter$$25.setInObjectLiteral, emitter$$25, [false]);
      var v11419 = this.statement;
      JAMScript.call(emitter$$25.recordSourceMappingStart, emitter$$25, [v11419]);
      JAMScript.call(emitter$$25.writeToOutput, emitter$$25, ["if("]);
      var v11420 = this.cond;
      var v18239 = TypeScript$$4.TokenID;
      var v11421 = v18239.If;
      JAMScript.call(emitter$$25.emitJavascript, emitter$$25, [v11420, v11421, false]);
      JAMScript.call(emitter$$25.writeToOutput, emitter$$25, [")"]);
      var v11422 = this.statement;
      JAMScript.call(emitter$$25.recordSourceMappingEnd, emitter$$25, [v11422]);
      var v11423 = this.thenBod;
      JAMScript.call(emitter$$25.emitJavascriptStatements, emitter$$25, [v11423, true]);
      var v11427 = this.elseBod;
      if(v11427) {
        var v22629 = this.elseBod;
        var v18240 = v22629.nodeType;
        var v22630 = TypeScript$$4.NodeType;
        var v18241 = v22630.If;
        var v11426 = v18240 === v18241;
        if(v11426) {
          JAMScript.call(emitter$$25.writeToOutput, emitter$$25, [" else "]);
          var v11424 = this.elseBod;
          JAMScript.call(v11424.emit, v11424, [emitter$$25, tokenId$$25, false])
        }else {
          JAMScript.call(emitter$$25.writeToOutput, emitter$$25, [" else"]);
          var v11425 = this.elseBod;
          JAMScript.call(emitter$$25.emitJavascriptStatements, emitter$$25, [v11425, true])
        }
      }
      JAMScript.call(emitter$$25.setInObjectLiteral, emitter$$25, [temp$$3]);
      JAMScript.call(emitter$$25.recordSourceMappingEnd, emitter$$25, [this]);
      JAMScript.call(emitter$$25.emitParensAndCommentsInPlace, emitter$$25, [this, false]);
      return
    }
    function v257() {
      return true
    }
    function IfStatement$$1(cond$$1) {
      var v18242 = TypeScript$$4.NodeType;
      var v11428 = v18242.If;
      JAMScript.call(_super$$32.call, _super$$32, [this, v11428]);
      this.cond = cond$$1;
      this.elseBod = null;
      var v27570 = JAMScript.new(ASTSpan, []);
      this.statement = v27570;
      return
    }
    JAMScript.call(__extends, null, [IfStatement$$1, _super$$32]);
    var v11429 = IfStatement$$1.prototype;
    v11429.isCompoundStatement = v257;
    var v11430 = IfStatement$$1.prototype;
    v11430.emit = v258;
    var v11431 = IfStatement$$1.prototype;
    v11431.typeCheck = v259;
    var v11432 = IfStatement$$1.prototype;
    v11432.addToControlFlow = v260;
    return IfStatement$$1
  }
  function v256(_super$$31) {
    function v255(context$$15) {
      var loopHeader$$1 = context$$15.current;
      var v11433 = TypeScript$$4.BasicBlock;
      var loopStart$$1 = JAMScript.new(v11433, []);
      var v11434 = TypeScript$$4.BasicBlock;
      var afterLoop$$1 = JAMScript.new(v11434, []);
      JAMScript.call(loopHeader$$1.addSuccessor, loopHeader$$1, [loopStart$$1]);
      context$$15.current = loopStart$$1;
      var targetInfo$$1 = null;
      var v11436 = this.body;
      if(v11436) {
        JAMScript.call(context$$15.pushStatement, context$$15, [this, loopStart$$1, afterLoop$$1]);
        var v11435 = this.body;
        JAMScript.call(context$$15.walk, context$$15, [v11435, this]);
        targetInfo$$1 = JAMScript.call(context$$15.popStatement, context$$15, [])
      }
      var v18243 = context$$15.noContinuation;
      var v11439 = !v18243;
      if(v11439) {
        var loopEnd$$1 = context$$15.current;
        JAMScript.call(loopEnd$$1.addSuccessor, loopEnd$$1, [loopStart$$1]);
        var v11437 = this.cond;
        JAMScript.call(context$$15.addContent, context$$15, [v11437]);
        context$$15.current = afterLoop$$1;
        JAMScript.call(loopEnd$$1.addSuccessor, loopEnd$$1, [afterLoop$$1])
      }else {
        var v11438 = this.cond;
        JAMScript.call(context$$15.addUnreachable, context$$15, [v11438])
      }
      var v18244 = context$$15.walker;
      var v11440 = v18244.options;
      v11440.goChildren = false;
      return
    }
    function v254(typeFlow$$22) {
      return JAMScript.call(typeFlow$$22.typeCheckDoWhile, typeFlow$$22, [this])
    }
    function v253(emitter$$24, tokenId$$24, startLine$$24) {
      JAMScript.call(emitter$$24.emitParensAndCommentsInPlace, emitter$$24, [this, true]);
      JAMScript.call(emitter$$24.recordSourceMappingStart, emitter$$24, [this]);
      var temp$$2 = JAMScript.call(emitter$$24.setInObjectLiteral, emitter$$24, [false]);
      JAMScript.call(emitter$$24.writeToOutput, emitter$$24, ["do"]);
      var v11441 = this.body;
      JAMScript.call(emitter$$24.emitJavascriptStatements, emitter$$24, [v11441, true]);
      var v11442 = this.whileAST;
      JAMScript.call(emitter$$24.recordSourceMappingStart, emitter$$24, [v11442]);
      JAMScript.call(emitter$$24.writeToOutput, emitter$$24, ["while"]);
      var v11443 = this.whileAST;
      JAMScript.call(emitter$$24.recordSourceMappingEnd, emitter$$24, [v11443]);
      JAMScript.call(emitter$$24.writeToOutput, emitter$$24, ["("]);
      var v11444 = this.cond;
      var v18245 = TypeScript$$4.TokenID;
      var v11445 = v18245.CloseParen;
      JAMScript.call(emitter$$24.emitJavascript, emitter$$24, [v11444, v11445, false]);
      JAMScript.call(emitter$$24.writeToOutput, emitter$$24, [")"]);
      JAMScript.call(emitter$$24.setInObjectLiteral, emitter$$24, [temp$$2]);
      JAMScript.call(emitter$$24.recordSourceMappingEnd, emitter$$24, [this]);
      JAMScript.call(emitter$$24.writeToOutput, emitter$$24, [";"]);
      JAMScript.call(emitter$$24.emitParensAndCommentsInPlace, emitter$$24, [this, false]);
      return
    }
    function v252() {
      return true
    }
    function DoWhileStatement$$1() {
      var v18246 = TypeScript$$4.NodeType;
      var v11446 = v18246.DoWhile;
      JAMScript.call(_super$$31.call, _super$$31, [this, v11446]);
      this.body = null;
      this.whileAST = null;
      this.cond = null;
      return
    }
    JAMScript.call(__extends, null, [DoWhileStatement$$1, _super$$31]);
    var v11447 = DoWhileStatement$$1.prototype;
    v11447.isLoop = v252;
    var v11448 = DoWhileStatement$$1.prototype;
    v11448.emit = v253;
    var v11449 = DoWhileStatement$$1.prototype;
    v11449.typeCheck = v254;
    var v11450 = DoWhileStatement$$1.prototype;
    v11450.addToControlFlow = v255;
    return DoWhileStatement$$1
  }
  function v251(_super$$30) {
    function v250(context$$14) {
      var loopHeader = context$$14.current;
      var v11451 = TypeScript$$4.BasicBlock;
      var loopStart = JAMScript.new(v11451, []);
      var v11452 = TypeScript$$4.BasicBlock;
      var afterLoop = JAMScript.new(v11452, []);
      JAMScript.call(loopHeader.addSuccessor, loopHeader, [loopStart]);
      context$$14.current = loopStart;
      var v11453 = this.cond;
      JAMScript.call(context$$14.addContent, context$$14, [v11453]);
      var condBlock = context$$14.current;
      var targetInfo = null;
      var v11457 = this.body;
      if(v11457) {
        var v11454 = TypeScript$$4.BasicBlock;
        var v27571 = JAMScript.new(v11454, []);
        context$$14.current = v27571;
        var v11455 = context$$14.current;
        JAMScript.call(condBlock.addSuccessor, condBlock, [v11455]);
        JAMScript.call(context$$14.pushStatement, context$$14, [this, loopStart, afterLoop]);
        var v11456 = this.body;
        JAMScript.call(context$$14.walk, context$$14, [v11456, this]);
        targetInfo = JAMScript.call(context$$14.popStatement, context$$14, [])
      }
      var v18247 = context$$14.noContinuation;
      var v11458 = !v18247;
      if(v11458) {
        var loopEnd = context$$14.current;
        JAMScript.call(loopEnd.addSuccessor, loopEnd, [loopStart])
      }
      context$$14.current = afterLoop;
      JAMScript.call(condBlock.addSuccessor, condBlock, [afterLoop]);
      context$$14.noContinuation = false;
      var v18248 = context$$14.walker;
      var v11459 = v18248.options;
      v11459.goChildren = false;
      return
    }
    function v249(typeFlow$$21) {
      return JAMScript.call(typeFlow$$21.typeCheckWhile, typeFlow$$21, [this])
    }
    function v248(emitter$$23, tokenId$$23, startLine$$23) {
      JAMScript.call(emitter$$23.emitParensAndCommentsInPlace, emitter$$23, [this, true]);
      JAMScript.call(emitter$$23.recordSourceMappingStart, emitter$$23, [this]);
      var temp$$1 = JAMScript.call(emitter$$23.setInObjectLiteral, emitter$$23, [false]);
      JAMScript.call(emitter$$23.writeToOutput, emitter$$23, ["while("]);
      var v11460 = this.cond;
      var v18249 = TypeScript$$4.TokenID;
      var v11461 = v18249.While;
      JAMScript.call(emitter$$23.emitJavascript, emitter$$23, [v11460, v11461, false]);
      JAMScript.call(emitter$$23.writeToOutput, emitter$$23, [")"]);
      var v11462 = this.body;
      JAMScript.call(emitter$$23.emitJavascriptStatements, emitter$$23, [v11462, false]);
      JAMScript.call(emitter$$23.setInObjectLiteral, emitter$$23, [temp$$1]);
      JAMScript.call(emitter$$23.recordSourceMappingEnd, emitter$$23, [this]);
      JAMScript.call(emitter$$23.emitParensAndCommentsInPlace, emitter$$23, [this, false]);
      return
    }
    function v247() {
      return true
    }
    function WhileStatement$$1(cond) {
      var v18250 = TypeScript$$4.NodeType;
      var v11463 = v18250.While;
      JAMScript.call(_super$$30.call, _super$$30, [this, v11463]);
      this.cond = cond;
      this.body = null;
      return
    }
    JAMScript.call(__extends, null, [WhileStatement$$1, _super$$30]);
    var v11464 = WhileStatement$$1.prototype;
    v11464.isLoop = v247;
    var v11465 = WhileStatement$$1.prototype;
    v11465.emit = v248;
    var v11466 = WhileStatement$$1.prototype;
    v11466.typeCheck = v249;
    var v11467 = WhileStatement$$1.prototype;
    v11467.addToControlFlow = v250;
    return WhileStatement$$1
  }
  function v246(_super$$29) {
    function v245(emitter$$22, tokenId$$22, startLine$$22) {
      JAMScript.call(emitter$$22.emitParensAndCommentsInPlace, emitter$$22, [this, true]);
      JAMScript.call(emitter$$22.recordSourceMappingStart, emitter$$22, [this]);
      var v18251 = this.nodeType;
      var v22631 = TypeScript$$4.NodeType;
      var v18252 = v22631.Break;
      var v11468 = v18251 == v18252;
      if(v11468) {
        JAMScript.call(emitter$$22.writeToOutput, emitter$$22, ["break"])
      }else {
        JAMScript.call(emitter$$22.writeToOutput, emitter$$22, ["continue"])
      }
      var v11470 = this.target;
      if(v11470) {
        var v18253 = this.target;
        var v11469 = " " + v18253;
        JAMScript.call(emitter$$22.writeToOutput, emitter$$22, [v11469])
      }
      JAMScript.call(emitter$$22.recordSourceMappingEnd, emitter$$22, [this]);
      JAMScript.call(emitter$$22.writeToOutput, emitter$$22, [";"]);
      JAMScript.call(emitter$$22.emitParensAndCommentsInPlace, emitter$$22, [this, false]);
      return
    }
    function v244(context$$13) {
      var v18254 = _super$$29.prototype;
      var v11471 = v18254.addToControlFlow;
      JAMScript.call(v11471.call, v11471, [this, context$$13]);
      var v11472 = this.resolvedTarget;
      var v18255 = this.nodeType;
      var v22632 = TypeScript$$4.NodeType;
      var v18256 = v22632.Continue;
      var v11473 = v18255 == v18256;
      JAMScript.call(context$$13.unconditionalBranch, context$$13, [v11472, v11473]);
      return
    }
    function v243(parser, stmt$$2) {
      var v11474 = JAMScript.call(stmt$$2.isLoop, stmt$$2, []);
      if(v11474) {
        this.resolvedTarget = stmt$$2;
        return true
      }
      var v18257 = this.nodeType;
      var v22633 = TypeScript$$4.NodeType;
      var v18258 = v22633.Continue;
      var v11476 = v18257 === v18258;
      if(v11476) {
        JAMScript.call(parser.reportParseError, parser, ["continue statement applies only to loops"]);
        return false
      }else {
        var v22634 = stmt$$2.nodeType;
        var v24854 = TypeScript$$4.NodeType;
        var v22635 = v24854.Switch;
        var v18259 = v22634 == v22635;
        var v22636 = !v18259;
        if(v22636) {
          v18259 = this.target
        }
        var v11475 = v18259;
        if(v11475) {
          this.resolvedTarget = stmt$$2;
          return true
        }else {
          JAMScript.call(parser.reportParseError, parser, ["break statement with no label can apply only to a loop or switch statement"]);
          return false
        }
      }
      return
    }
    function v242() {
      return this.target
    }
    function Jump$$1(nodeType$$11) {
      JAMScript.call(_super$$29.call, _super$$29, [this, nodeType$$11]);
      this.target = null;
      this.resolvedTarget = null;
      return
    }
    JAMScript.call(__extends, null, [Jump$$1, _super$$29]);
    var v11477 = Jump$$1.prototype;
    v11477.hasExplicitTarget = v242;
    var v11478 = Jump$$1.prototype;
    v11478.setResolvedTarget = v243;
    var v11479 = Jump$$1.prototype;
    v11479.addToControlFlow = v244;
    var v11480 = Jump$$1.prototype;
    v11480.emit = v245;
    return Jump$$1
  }
  function v241(_super$$28) {
    function v240(typeFlow$$20) {
      var v24855 = typeFlow$$20.checker;
      var v22637 = v24855.styleSettings;
      var v18260 = v22637.emptyBlocks;
      var v11483 = !v18260;
      if(v11483) {
        var v22638 = this.statements;
        var v18261 = v22638 === null;
        var v22640 = !v18261;
        if(v22640) {
          var v25864 = this.statements;
          var v24856 = v25864.members;
          var v22639 = v24856.length;
          v18261 = v22639 == 0
        }
        var v11482 = v18261;
        if(v11482) {
          var v18262 = typeFlow$$20.checker;
          var v11481 = v18262.errorReporter;
          JAMScript.call(v11481.styleError, v11481, [this, "empty block"])
        }
      }
      var v11484 = this.statements;
      JAMScript.call(typeFlow$$20.typeCheck, typeFlow$$20, [v11484]);
      return this
    }
    function v239(context$$12) {
      var v11485 = TypeScript$$4.BasicBlock;
      var afterIfNeeded = JAMScript.new(v11485, []);
      var v11486 = context$$12.current;
      JAMScript.call(context$$12.pushStatement, context$$12, [this, v11486, afterIfNeeded]);
      var v11488 = this.statements;
      if(v11488) {
        var v11487 = this.statements;
        JAMScript.call(context$$12.walk, context$$12, [v11487, this])
      }
      var v18263 = context$$12.walker;
      var v11489 = v18263.options;
      v11489.goChildren = false;
      JAMScript.call(context$$12.popStatement, context$$12, []);
      var v22641 = afterIfNeeded.predecessors;
      var v18264 = v22641.length;
      var v11491 = v18264 > 0;
      if(v11491) {
        var v11490 = context$$12.current;
        JAMScript.call(v11490.addSuccessor, v11490, [afterIfNeeded]);
        context$$12.current = afterIfNeeded
      }
      return
    }
    function v238(emitter$$21, tokenId$$21, startLine$$21) {
      JAMScript.call(emitter$$21.emitParensAndCommentsInPlace, emitter$$21, [this, true]);
      JAMScript.call(emitter$$21.recordSourceMappingStart, emitter$$21, [this]);
      var v11494 = this.isStatementBlock;
      if(v11494) {
        JAMScript.call(emitter$$21.writeLineToOutput, emitter$$21, [" {"]);
        var v11492 = emitter$$21.indenter;
        JAMScript.call(v11492.increaseIndent, v11492, [])
      }else {
        var v22642 = this.statements;
        var v18265 = v22642.members;
        var v11493 = v18265.length;
        JAMScript.call(emitter$$21.setInVarBlock, emitter$$21, [v11493])
      }
      var temp = JAMScript.call(emitter$$21.setInObjectLiteral, emitter$$21, [false]);
      var v11497 = this.statements;
      if(v11497) {
        var v11495 = this.statements;
        var v18266 = TypeScript$$4.TokenID;
        var v11496 = v18266.Semicolon;
        JAMScript.call(emitter$$21.emitJavascriptList, emitter$$21, [v11495, null, v11496, true, false, false])
      }
      var v11499 = this.isStatementBlock;
      if(v11499) {
        var v11498 = emitter$$21.indenter;
        JAMScript.call(v11498.decreaseIndent, v11498, []);
        JAMScript.call(emitter$$21.emitIndent, emitter$$21, []);
        JAMScript.call(emitter$$21.writeToOutput, emitter$$21, ["}"])
      }
      JAMScript.call(emitter$$21.setInObjectLiteral, emitter$$21, [temp]);
      JAMScript.call(emitter$$21.recordSourceMappingEnd, emitter$$21, [this]);
      JAMScript.call(emitter$$21.emitParensAndCommentsInPlace, emitter$$21, [this, false]);
      return
    }
    function Block$$1(statements, isStatementBlock) {
      var v18267 = TypeScript$$4.NodeType;
      var v11500 = v18267.Block;
      JAMScript.call(_super$$28.call, _super$$28, [this, v11500]);
      this.statements = statements;
      this.isStatementBlock = isStatementBlock;
      return
    }
    JAMScript.call(__extends, null, [Block$$1, _super$$28]);
    var v11501 = Block$$1.prototype;
    v11501.emit = v238;
    var v11502 = Block$$1.prototype;
    v11502.addToControlFlow = v239;
    var v11503 = Block$$1.prototype;
    v11503.typeCheck = v240;
    return Block$$1
  }
  function v237(_super$$27) {
    function v236(context$$11) {
      var beforeBB = context$$11.current;
      var v11504 = TypeScript$$4.BasicBlock;
      var bb = JAMScript.new(v11504, []);
      context$$11.current = bb;
      JAMScript.call(beforeBB.addSuccessor, beforeBB, [bb]);
      return
    }
    function v235(typeFlow$$19) {
      var v11505 = this.labels;
      JAMScript.call(typeFlow$$19.typeCheck, typeFlow$$19, [v11505]);
      var v11506 = this.stmt;
      var v27572 = JAMScript.call(v11506.typeCheck, v11506, [typeFlow$$19]);
      this.stmt = v27572;
      return this
    }
    function v234(emitter$$20, tokenId$$20, startLine$$20) {
      JAMScript.call(emitter$$20.emitParensAndCommentsInPlace, emitter$$20, [this, true]);
      JAMScript.call(emitter$$20.recordSourceMappingStart, emitter$$20, [this]);
      var v11510 = this.labels;
      if(v11510) {
        var v18268 = this.labels;
        var v11507 = v18268.members;
        var labelsLen = v11507.length;
        var i$$18 = 0;
        var v11509 = i$$18 < labelsLen;
        for(;v11509;) {
          var v22643 = this.labels;
          var v18269 = v22643.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v11508 = v18269[i$$18]
          }
          JAMScript.call(v11508.emit, v11508, [emitter$$20, tokenId$$20, startLine$$20]);
          i$$18 = i$$18 + 1;
          v11509 = i$$18 < labelsLen
        }
      }
      var v11511 = this.stmt;
      JAMScript.call(v11511.emit, v11511, [emitter$$20, tokenId$$20, true]);
      JAMScript.call(emitter$$20.recordSourceMappingEnd, emitter$$20, [this]);
      JAMScript.call(emitter$$20.emitParensAndCommentsInPlace, emitter$$20, [this, false]);
      return
    }
    function LabeledStatement$$1(labels, stmt$$1) {
      var v18270 = TypeScript$$4.NodeType;
      var v11512 = v18270.LabeledStatement;
      JAMScript.call(_super$$27.call, _super$$27, [this, v11512]);
      this.labels = labels;
      this.stmt = stmt$$1;
      return
    }
    JAMScript.call(__extends, null, [LabeledStatement$$1, _super$$27]);
    var v11513 = LabeledStatement$$1.prototype;
    v11513.emit = v234;
    var v11514 = LabeledStatement$$1.prototype;
    v11514.typeCheck = v235;
    var v11515 = LabeledStatement$$1.prototype;
    v11515.addToControlFlow = v236;
    return LabeledStatement$$1
  }
  function v233(_super$$26) {
    function v232(typeFlow$$18) {
      this.type = typeFlow$$18.voidType;
      return this
    }
    function v231() {
      return JAMScript.call(this.isLoop, this, [])
    }
    function v230() {
      return true
    }
    function v229() {
      return false
    }
    function Statement$$1(nodeType$$10) {
      JAMScript.call(_super$$26.call, _super$$26, [this, nodeType$$10]);
      var v18271 = this.flags;
      var v22644 = TypeScript$$4.ASTFlags;
      var v18272 = v22644.IsStatement;
      this.flags = v18271 | v18272;
      return
    }
    JAMScript.call(__extends, null, [Statement$$1, _super$$26]);
    var v11516 = Statement$$1.prototype;
    v11516.isLoop = v229;
    var v11517 = Statement$$1.prototype;
    v11517.isStatementOrExpression = v230;
    var v11518 = Statement$$1.prototype;
    v11518.isCompoundStatement = v231;
    var v11519 = Statement$$1.prototype;
    v11519.typeCheck = v232;
    return Statement$$1
  }
  function v228(_super$$25) {
    function v227(emitter$$19, tokenId$$19, startLine$$19) {
      return
    }
    function v226(typeFlow$$17) {
      return JAMScript.call(typeFlow$$17.typeCheckInterface, typeFlow$$17, [this])
    }
    function InterfaceDeclaration$$1(name$$39, members$$4, extendsList$$2, implementsList$$2) {
      var v18273 = TypeScript$$4.NodeType;
      var v11520 = v18273.InterfaceDeclaration;
      JAMScript.call(_super$$25.call, _super$$25, [this, v11520, name$$39, extendsList$$2, implementsList$$2, members$$4]);
      return
    }
    JAMScript.call(__extends, null, [InterfaceDeclaration$$1, _super$$25]);
    var v11521 = InterfaceDeclaration$$1.prototype;
    v11521.typeCheck = v226;
    var v11522 = InterfaceDeclaration$$1.prototype;
    v11522.emit = v227;
    return InterfaceDeclaration$$1
  }
  function v225(_super$$24) {
    function v224(emitter$$18, tokenId$$18, startLine$$18) {
      JAMScript.call(emitter$$18.emitJavascriptClass, emitter$$18, [this]);
      return
    }
    function v223(typeFlow$$16) {
      return JAMScript.call(typeFlow$$16.typeCheckClass, typeFlow$$16, [this])
    }
    function ClassDeclaration$$1(name$$38, members$$3, extendsList$$1, implementsList$$1) {
      var v18274 = TypeScript$$4.NodeType;
      var v11523 = v18274.ClassDeclaration;
      JAMScript.call(_super$$24.call, _super$$24, [this, v11523, name$$38, extendsList$$1, implementsList$$1, members$$3]);
      this.knownMemberNames = {};
      this.constructorDecl = null;
      this.constructorNestingLevel = 0;
      this.endingToken = null;
      return
    }
    JAMScript.call(__extends, null, [ClassDeclaration$$1, _super$$24]);
    var v11524 = ClassDeclaration$$1.prototype;
    v11524.typeCheck = v223;
    var v11525 = ClassDeclaration$$1.prototype;
    v11525.emit = v224;
    return ClassDeclaration$$1
  }
  function v222(_super$$23) {
    function v221() {
      var v11526 = this.varFlags;
      var v18275 = TypeScript$$4.VarFlags;
      var v11527 = v18275.Ambient;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11526, v11527])
    }
    function v220() {
      var v11528 = this.varFlags;
      var v18276 = TypeScript$$4.VarFlags;
      var v11529 = v18276.Exported;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11528, v11529])
    }
    function TypeDeclaration$$1(nodeType$$9, name$$37, extendsList, implementsList, members$$2) {
      JAMScript.call(_super$$23.call, _super$$23, [this, nodeType$$9, name$$37, members$$2]);
      this.extendsList = extendsList;
      this.implementsList = implementsList;
      var v11530 = TypeScript$$4.VarFlags;
      this.varFlags = v11530.None;
      return
    }
    JAMScript.call(__extends, null, [TypeDeclaration$$1, _super$$23]);
    var v11531 = TypeDeclaration$$1.prototype;
    v11531.isExported = v220;
    var v11532 = TypeDeclaration$$1.prototype;
    v11532.isAmbient = v221;
    return TypeDeclaration$$1
  }
  function v219(_super$$22) {
    function v218(emitter$$17, tokenId$$17, startLine$$17) {
      var v22645 = this.modFlags;
      var v24857 = TypeScript$$4.ModuleFlags;
      var v22646 = v24857.ShouldEmitModuleDecl;
      var v18277 = JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22645, v22646]);
      var v11533 = !v18277;
      if(v11533) {
        JAMScript.call(emitter$$17.emitParensAndCommentsInPlace, emitter$$17, [this, true]);
        JAMScript.call(emitter$$17.recordSourceMappingStart, emitter$$17, [this]);
        JAMScript.call(emitter$$17.emitJavascriptModule, emitter$$17, [this]);
        JAMScript.call(emitter$$17.recordSourceMappingEnd, emitter$$17, [this]);
        JAMScript.call(emitter$$17.emitParensAndCommentsInPlace, emitter$$17, [this, false])
      }
      return
    }
    function v217(typeFlow$$15) {
      return JAMScript.call(typeFlow$$15.typeCheckModule, typeFlow$$15, [this])
    }
    function v216() {
      var v18278 = this.modFlags;
      var v24858 = TypeScript$$4.ModuleFlags;
      var v22647 = v24858.ShouldEmitModuleDecl;
      var v18279 = ~v22647;
      this.modFlags = v18278 & v18279;
      return
    }
    function v215() {
      var v11534 = this.modFlags;
      var v18280 = TypeScript$$4.ModuleFlags;
      var v11535 = v18280.IsEnum;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11534, v11535])
    }
    function v214() {
      var v11536 = this.modFlags;
      var v18281 = TypeScript$$4.ModuleFlags;
      var v11537 = v18281.Ambient;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11536, v11537])
    }
    function v213() {
      var v11538 = this.modFlags;
      var v18282 = TypeScript$$4.ModuleFlags;
      var v11539 = v18282.Exported;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11538, v11539])
    }
    function ModuleDeclaration$$1(name$$36, members$$1, vars$$2, scopes$$2, endingToken) {
      var v18283 = TypeScript$$4.NodeType;
      var v11540 = v18283.ModuleDeclaration;
      JAMScript.call(_super$$22.call, _super$$22, [this, v11540, name$$36, members$$1]);
      this.endingToken = endingToken;
      var v11541 = TypeScript$$4.ModuleFlags;
      this.modFlags = v11541.ShouldEmitModuleDecl;
      this.amdDependencies = [];
      this.containsUnicodeChar = false;
      this.containsUnicodeCharInComment = false;
      this.vars = vars$$2;
      this.scopes = scopes$$2;
      var v11542 = this.name;
      this.prettyName = v11542.actualText;
      return
    }
    JAMScript.call(__extends, null, [ModuleDeclaration$$1, _super$$22]);
    var v11543 = ModuleDeclaration$$1.prototype;
    v11543.isExported = v213;
    var v11544 = ModuleDeclaration$$1.prototype;
    v11544.isAmbient = v214;
    var v11545 = ModuleDeclaration$$1.prototype;
    v11545.isEnum = v215;
    var v11546 = ModuleDeclaration$$1.prototype;
    v11546.recordNonInterface = v216;
    var v11547 = ModuleDeclaration$$1.prototype;
    v11547.typeCheck = v217;
    var v11548 = ModuleDeclaration$$1.prototype;
    v11548.emit = v218;
    return ModuleDeclaration$$1
  }
  function v212(_super$$21) {
    function v211() {
      return true
    }
    function NamedDeclaration$$1(nodeType$$8, name$$35, members) {
      JAMScript.call(_super$$21.call, _super$$21, [this, nodeType$$8]);
      this.name = name$$35;
      this.members = members;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      return
    }
    JAMScript.call(__extends, null, [NamedDeclaration$$1, _super$$21]);
    var v11549 = NamedDeclaration$$1.prototype;
    v11549.isDeclaration = v211;
    return NamedDeclaration$$1
  }
  function v210(_super$$20) {
    function v209(symbol$$1) {
      var i$$17 = 0;
      var v22648 = this.externallyVisibleImportedSymbols;
      var v18284 = v22648.length;
      var v11551 = i$$17 < v18284;
      for(;v11551;) {
        var v22649 = this.externallyVisibleImportedSymbols;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v18285 = v22649[i$$17]
        }
        var v11550 = v18285 == symbol$$1;
        if(v11550) {
          return true
        }
        i$$17 = i$$17 + 1;
        var v22650 = this.externallyVisibleImportedSymbols;
        var v18286 = v22650.length;
        v11551 = i$$17 < v18286
      }
      return false
    }
    function v208(symbol, checker) {
      var v11552 = JAMScript.call(this.isExternallyVisibleSymbol, this, [symbol]);
      if(v11552) {
        return
      }
      var v24859 = JAMScript.call(symbol.getType, symbol, []);
      var v22651 = v24859.symbol;
      var v18287 = JAMScript.call(v22651.isExternallyVisible, v22651, [checker]);
      var v11558 = !v18287;
      if(v11558) {
        var quotes = "";
        var v18288 = JAMScript.call(symbol.getType, symbol, []);
        var v11553 = v18288.symbol;
        var moduleName = v11553.prettyName;
        var v18289 = JAMScript.call(TypeScript$$4.isQuoted, TypeScript$$4, [moduleName]);
        var v11554 = !v18289;
        if(v11554) {
          quotes = "'"
        }
        var v11555 = checker.errorReporter;
        var v11556 = symbol.declAST;
        var v22652 = "Externally visible import statement uses non exported module " + quotes;
        var v18290 = v22652 + moduleName;
        var v11557 = v18290 + quotes;
        JAMScript.call(v11555.simpleError, v11555, [v11556, v11557])
      }
      var v11559 = this.externallyVisibleImportedSymbols;
      JAMScript.call(v11559.push, v11559, [symbol]);
      return
    }
    function v207(emitter$$16, tokenId$$16, startLine$$16) {
      var v18291 = emitter$$16.emitOptions;
      var v11565 = JAMScript.call(this.emitRequired, this, [v18291]);
      if(v11565) {
        var v11560 = this.bod;
        JAMScript.call(emitter$$16.emitParensAndCommentsInPlace, emitter$$16, [v11560, true]);
        var v11561 = this.bod;
        var v18292 = TypeScript$$4.TokenID;
        var v11562 = v18292.Semicolon;
        var v11563 = this.requiresExtendsBlock;
        JAMScript.call(emitter$$16.emitJavascriptList, emitter$$16, [v11561, null, v11562, true, false, false, true, v11563]);
        var v11564 = this.bod;
        JAMScript.call(emitter$$16.emitParensAndCommentsInPlace, emitter$$16, [v11564, false])
      }
      return
    }
    function v206(emitOptions) {
      var v18293 = this.cachedEmitRequired;
      var v11566 = v18293 != undefined;
      if(v11566) {
        return this.cachedEmitRequired
      }
      var v22653 = this.isDeclareFile;
      var v18294 = !v22653;
      if(v18294) {
        var v24860 = this.isResident;
        var v22654 = !v24860;
        if(v22654) {
          v22654 = this.bod
        }
        v18294 = v22654
      }
      var v11580 = v18294;
      if(v11580) {
        var i$$16 = 0;
        var v18295 = this.bod;
        var v11567 = v18295.members;
        var len$$4 = v11567.length;
        var v11578 = i$$16 < len$$4;
        for(;v11578;) {
          var v18296 = this.bod;
          var v11568 = v18296.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var stmt = v11568[i$$16]
          }
          var v18297 = stmt.nodeType;
          var v22655 = TypeScript$$4.NodeType;
          var v18298 = v22655.ModuleDeclaration;
          var v11577 = v18297 == v18298;
          if(v11577) {
            var v22656 = stmt.modFlags;
            var v25865 = TypeScript$$4.ModuleFlags;
            var v24861 = v25865.ShouldEmitModuleDecl;
            var v25866 = TypeScript$$4.ModuleFlags;
            var v24862 = v25866.Ambient;
            var v22657 = v24861 | v24862;
            var v18299 = JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22656, v22657]);
            var v11569 = !v18299;
            if(v11569) {
              return JAMScript.call(this.setCachedEmitRequired, this, [true])
            }
          }else {
            var v18300 = stmt.nodeType;
            var v22658 = TypeScript$$4.NodeType;
            var v18301 = v22658.ClassDeclaration;
            var v11576 = v18300 == v18301;
            if(v11576) {
              var v22659 = stmt.varFlags;
              var v24863 = TypeScript$$4.VarFlags;
              var v22660 = v24863.Ambient;
              var v18302 = JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22659, v22660]);
              var v11570 = !v18302;
              if(v11570) {
                return JAMScript.call(this.setCachedEmitRequired, this, [true])
              }
            }else {
              var v18303 = stmt.nodeType;
              var v22661 = TypeScript$$4.NodeType;
              var v18304 = v22661.VarDecl;
              var v11575 = v18303 == v18304;
              if(v11575) {
                var v22662 = stmt.varFlags;
                var v24864 = TypeScript$$4.VarFlags;
                var v22663 = v24864.Ambient;
                var v18305 = JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22662, v22663]);
                var v11571 = !v18305;
                if(v11571) {
                  return JAMScript.call(this.setCachedEmitRequired, this, [true])
                }
              }else {
                var v18306 = stmt.nodeType;
                var v22664 = TypeScript$$4.NodeType;
                var v18307 = v22664.FuncDecl;
                var v11574 = v18306 == v18307;
                if(v11574) {
                  var v18308 = JAMScript.call(stmt.isSignature, stmt, []);
                  var v11572 = !v18308;
                  if(v11572) {
                    return JAMScript.call(this.setCachedEmitRequired, this, [true])
                  }
                }else {
                  var v22665 = stmt.nodeType;
                  var v24865 = TypeScript$$4.NodeType;
                  var v22666 = v24865.InterfaceDeclaration;
                  var v18309 = v22665 != v22666;
                  if(v18309) {
                    var v22667 = stmt.nodeType;
                    var v24866 = TypeScript$$4.NodeType;
                    var v22668 = v24866.Empty;
                    v18309 = v22667 != v22668
                  }
                  var v11573 = v18309;
                  if(v11573) {
                    return JAMScript.call(this.setCachedEmitRequired, this, [true])
                  }
                }
              }
            }
          }
          i$$16 = i$$16 + 1;
          v11578 = i$$16 < len$$4
        }
        var v18310 = emitOptions.emitComments;
        if(v18310) {
          var v25867 = this.bod;
          var v24867 = v25867.preComments;
          if(v24867) {
            var v26648 = this.bod;
            var v26390 = v26648.preComments;
            var v25868 = v26390.length;
            v24867 = v25868 > 0
          }
          var v22669 = v24867;
          var v24869 = !v22669;
          if(v24869) {
            var v25869 = this.bod;
            var v24868 = v25869.postComments;
            if(v24868) {
              var v26649 = this.bod;
              var v26391 = v26649.postComments;
              var v25870 = v26391.length;
              v24868 = v25870 > 0
            }
            v22669 = v24868
          }
          v18310 = v22669
        }
        var v11579 = v18310;
        if(v11579) {
          return JAMScript.call(this.setCachedEmitRequired, this, [true])
        }
      }
      return JAMScript.call(this.setCachedEmitRequired, this, [false])
    }
    function v205() {
      return"Script"
    }
    function v204(typeFlow$$14) {
      return JAMScript.call(typeFlow$$14.typeCheckScript, typeFlow$$14, [this])
    }
    function v203(value$$31) {
      this.cachedEmitRequired = value$$31;
      return this.cachedEmitRequired
    }
    function Script$$1(vars$$1, scopes$$1) {
      var v11581 = JAMScript.new(Identifier, ["script"]);
      var v18311 = TypeScript$$4.NodeType;
      var v11582 = v18311.Script;
      JAMScript.call(_super$$20.call, _super$$20, [this, v11581, null, false, null, vars$$1, scopes$$1, null, v11582]);
      this.locationInfo = null;
      this.referencedFiles = [];
      this.requiresGlobal = false;
      this.requiresExtendsBlock = false;
      this.isResident = false;
      this.isDeclareFile = false;
      this.hasBeenTypeChecked = false;
      this.topLevelMod = null;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.containsUnicodeChar = false;
      this.containsUnicodeCharInComment = false;
      this.externallyVisibleImportedSymbols = [];
      this.vars = vars$$1;
      this.scopes = scopes$$1;
      return
    }
    JAMScript.call(__extends, null, [Script$$1, _super$$20]);
    var v11583 = Script$$1.prototype;
    v11583.setCachedEmitRequired = v203;
    var v11584 = Script$$1.prototype;
    v11584.typeCheck = v204;
    var v11585 = Script$$1.prototype;
    v11585.treeViewLabel = v205;
    var v11586 = Script$$1.prototype;
    v11586.emitRequired = v206;
    var v11587 = Script$$1.prototype;
    v11587.emit = v207;
    var v11588 = Script$$1.prototype;
    v11588.AddExternallyVisibleImportedSymbol = v208;
    var v11589 = Script$$1.prototype;
    v11589.isExternallyVisibleSymbol = v209;
    return Script$$1
  }
  function v202() {
    function LocationInfo$$1(filename, lineMap, unitIndex) {
      this.filename = filename;
      this.lineMap = lineMap;
      this.unitIndex = unitIndex;
      return
    }
    return LocationInfo$$1
  }
  function v201(_super$$19) {
    function v200() {
      var v18312 = this.fncFlags;
      var v22670 = TypeScript$$4.FncFlags;
      var v18313 = v22670.Signature;
      var v11590 = v18312 & v18313;
      var v18314 = TypeScript$$4.FncFlags;
      var v11591 = v18314.None;
      return v11590 != v11591
    }
    function v199() {
      var v11592 = TypeScript$$4.FncFlags;
      this.fncFlags = v11592.None;
      return
    }
    function v198() {
      var v18315 = this.name;
      var v11594 = v18315 == null;
      if(v11594) {
        return"funcExpr"
      }else {
        var v18316 = this.name;
        var v11593 = v18316.actualText;
        return"func: " + v11593
      }
      return
    }
    function v197() {
      var v11595 = this.fncFlags;
      var v18317 = TypeScript$$4.FncFlags;
      var v11596 = v18317.Static;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11595, v11596])
    }
    function v196() {
      var v11597 = this.fncFlags;
      var v18318 = TypeScript$$4.FncFlags;
      var v11598 = v18318.Public;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11597, v11598])
    }
    function v195() {
      var v11599 = this.fncFlags;
      var v18319 = TypeScript$$4.FncFlags;
      var v11600 = v18319.Private;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11599, v11600])
    }
    function v194() {
      var v11601 = this.fncFlags;
      var v18320 = TypeScript$$4.FncFlags;
      var v11602 = v18320.Exported;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11601, v11602])
    }
    function v193() {
      var v11603 = this.fncFlags;
      var v18321 = TypeScript$$4.FncFlags;
      var v11604 = v18321.Ambient;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11603, v11604])
    }
    function v192() {
      var v11605 = this.fncFlags;
      var v18322 = TypeScript$$4.FncFlags;
      var v11606 = v18322.SetAccessor;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11605, v11606])
    }
    function v191() {
      var v11607 = this.fncFlags;
      var v18323 = TypeScript$$4.FncFlags;
      var v11608 = v18323.GetAccessor;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11607, v11608])
    }
    function v190() {
      var v18324 = this.fncFlags;
      var v22671 = TypeScript$$4.FncFlags;
      var v18325 = v22671.GetAccessor;
      var v11609 = JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v18324, v18325]);
      var v18328 = !v11609;
      if(v18328) {
        var v18326 = this.fncFlags;
        var v22672 = TypeScript$$4.FncFlags;
        var v18327 = v22672.SetAccessor;
        v11609 = JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v18326, v18327])
      }
      return v11609
    }
    function v189() {
      var v11610 = this.name;
      return v11610 === null
    }
    function v188() {
      var v11611 = JAMScript.call(this.isCallMember, this, []);
      var v18330 = !v11611;
      if(v18330) {
        var v18329 = JAMScript.call(this.isIndexerMember, this, []);
        var v22673 = !v18329;
        if(v22673) {
          v18329 = JAMScript.call(this.isConstructMember, this, [])
        }
        v11611 = v18329
      }
      return v11611
    }
    function v187() {
      var v11612 = this.fncFlags;
      var v18331 = TypeScript$$4.FncFlags;
      var v11613 = v18331.IndexerMember;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11612, v11613])
    }
    function v186() {
      var v11614 = this.fncFlags;
      var v18332 = TypeScript$$4.FncFlags;
      var v11615 = v18332.ConstructMember;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11614, v11615])
    }
    function v185() {
      var v11616 = this.fncFlags;
      var v18333 = TypeScript$$4.FncFlags;
      var v11617 = v18333.CallMember;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11616, v11617])
    }
    function v184() {
      var v18334 = this.fncFlags;
      var v22674 = TypeScript$$4.FncFlags;
      var v18335 = v22674.Method;
      var v11618 = v18334 & v18335;
      var v18336 = TypeScript$$4.FncFlags;
      var v11619 = v18336.None;
      return v11618 != v11619
    }
    function v183() {
      var v11621 = this.name;
      if(v11621) {
        var v11620 = this.name;
        return v11620.actualText
      }else {
        return this.hint
      }
      return
    }
    function v182(emitter$$15, tokenId$$15, startLine$$15) {
      JAMScript.call(emitter$$15.emitJavascriptFunction, emitter$$15, [this]);
      return
    }
    function v181(typeFlow$$13) {
      return JAMScript.call(typeFlow$$13.typeCheckFunction, typeFlow$$13, [this])
    }
    function v180() {
      function controlFlowPrefix(ast$$2, parent, walker$$1) {
        var v11622 = walker$$1.state;
        JAMScript.call(ast$$2.addToControlFlow, ast$$2, [v11622]);
        return ast$$2
      }
      var v11623 = TypeScript$$4.BasicBlock;
      var entry$$1 = JAMScript.new(v11623, []);
      var v11624 = TypeScript$$4.BasicBlock;
      var exit = JAMScript.new(v11624, []);
      var v11625 = TypeScript$$4.ControlFlowContext;
      var context$$10 = JAMScript.new(v11625, [entry$$1, exit]);
      var v11626 = JAMScript.call(TypeScript$$4.getAstWalkerFactory, TypeScript$$4, []);
      var walker = JAMScript.call(v11626.getWalker, v11626, [controlFlowPrefix, null, null, context$$10]);
      context$$10.walker = walker;
      var v11627 = this.bod;
      JAMScript.call(walker.walk, walker, [v11627, this]);
      return context$$10
    }
    function v179(sym$$1) {
      var v18337 = this.jumpRefs;
      var v11628 = v18337 == null;
      if(v11628) {
        var v27573 = new Array;
        this.jumpRefs = v27573
      }
      var v11629 = sym$$1.name;
      var id$$6 = JAMScript.new(Identifier, [v11629]);
      var v11630 = this.jumpRefs;
      var v18338 = this.jumpRefs;
      var v11631 = v18338.length;
      JAMScript.set(v11630, v11631, id$$6);
      id$$6.sym = sym$$1;
      var v11632 = id$$6;
      var v27574 = JAMScript.call(this.addCloRef, this, [id$$6, null]);
      v11632.cloId = v27574;
      return
    }
    function v178(id$$5, sym) {
      var v18339 = this.envids;
      var v11633 = v18339 == null;
      if(v11633) {
        var v27575 = new Array;
        this.envids = v27575
      }
      var v11634 = this.envids;
      var v18340 = this.envids;
      var v11635 = v18340.length;
      JAMScript.set(v11634, v11635, id$$5);
      var outerFnc = this.enclosingFnc;
      if(sym) {
        var v18341 = outerFnc;
        if(v18341) {
          var v24870 = outerFnc.type;
          var v22675 = v24870.symbol;
          var v22676 = sym.container;
          v18341 = v22675 != v22676
        }
        var v11636 = v18341;
        for(;v11636;) {
          JAMScript.call(outerFnc.addJumpRef, outerFnc, [sym]);
          outerFnc = outerFnc.enclosingFnc;
          var v18342 = outerFnc;
          if(v18342) {
            var v24871 = outerFnc.type;
            var v22677 = v24871.symbol;
            var v22678 = sym.container;
            v18342 = v22677 != v22678
          }
          v11636 = v18342
        }
      }
      var v18343 = this.envids;
      var v11637 = v18343.length;
      return v11637 - 1
    }
    function v177() {
      var v18344 = this.fncFlags;
      var v22679 = TypeScript$$4.FncFlags;
      var v18345 = v22679.HasSuperReferenceInFatArrowFunction;
      this.fncFlags = v18344 | v18345;
      return
    }
    function v176() {
      var v11638 = this.fncFlags;
      var v18346 = TypeScript$$4.FncFlags;
      var v11639 = v18346.HasSuperReferenceInFatArrowFunction;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11638, v11639])
    }
    function v175() {
      var v18347 = this.fncFlags;
      var v22680 = TypeScript$$4.FncFlags;
      var v18348 = v22680.HasSelfReference;
      this.fncFlags = v18347 | v18348;
      return
    }
    function v174() {
      var v11640 = this.fncFlags;
      var v18349 = TypeScript$$4.FncFlags;
      var v11641 = v18349.HasSelfReference;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11640, v11641])
    }
    function v173() {
      var v18350 = this.internalNameCache;
      var v11643 = v18350 == null;
      if(v11643) {
        var extName = JAMScript.call(this.getNameText, this, []);
        if(extName) {
          this.internalNameCache = "_internal_" + extName
        }else {
          var v11642 = internalId;
          internalId = internalId + 1;
          this.internalNameCache = "_internal_" + v11642
        }
      }
      return this.internalNameCache
    }
    function v172() {
      return true
    }
    function FuncDecl$$1(name$$34, bod, isConstructor, args$$1, vars, scopes, statics, nodeType$$7) {
      JAMScript.call(_super$$19.call, _super$$19, [this, nodeType$$7]);
      this.name = name$$34;
      this.bod = bod;
      this.isConstructor = isConstructor;
      this.arguments = args$$1;
      this.vars = vars;
      this.scopes = scopes;
      this.statics = statics;
      this.hint = null;
      var v11644 = TypeScript$$4.FncFlags;
      this.fncFlags = v11644.None;
      this.returnTypeAnnotation = null;
      this.variableArgList = false;
      this.jumpRefs = null;
      this.internalNameCache = null;
      this.tmp1Declared = false;
      this.enclosingFnc = null;
      this.freeVariables = [];
      this.unitIndex = -1;
      this.classDecl = null;
      this.boundToProperty = null;
      this.isOverload = false;
      this.innerStaticFuncs = [];
      this.isTargetTypedAsMethod = false;
      this.isInlineCallLiteral = false;
      this.accessorSymbol = null;
      this.leftCurlyCount = 0;
      this.rightCurlyCount = 0;
      this.returnStatementsWithExpressions = [];
      this.scopeType = null;
      this.endingToken = null;
      return
    }
    JAMScript.call(__extends, null, [FuncDecl$$1, _super$$19]);
    var v11645 = FuncDecl$$1.prototype;
    v11645.isDeclaration = v172;
    var v11646 = FuncDecl$$1.prototype;
    v11646.internalName = v173;
    var v11647 = FuncDecl$$1.prototype;
    v11647.hasSelfReference = v174;
    var v11648 = FuncDecl$$1.prototype;
    v11648.setHasSelfReference = v175;
    var v11649 = FuncDecl$$1.prototype;
    v11649.hasSuperReferenceInFatArrowFunction = v176;
    var v11650 = FuncDecl$$1.prototype;
    v11650.setHasSuperReferenceInFatArrowFunction = v177;
    var v11651 = FuncDecl$$1.prototype;
    v11651.addCloRef = v178;
    var v11652 = FuncDecl$$1.prototype;
    v11652.addJumpRef = v179;
    var v11653 = FuncDecl$$1.prototype;
    v11653.buildControlFlow = v180;
    var v11654 = FuncDecl$$1.prototype;
    v11654.typeCheck = v181;
    var v11655 = FuncDecl$$1.prototype;
    v11655.emit = v182;
    var v11656 = FuncDecl$$1.prototype;
    v11656.getNameText = v183;
    var v11657 = FuncDecl$$1.prototype;
    v11657.isMethod = v184;
    var v11658 = FuncDecl$$1.prototype;
    v11658.isCallMember = v185;
    var v11659 = FuncDecl$$1.prototype;
    v11659.isConstructMember = v186;
    var v11660 = FuncDecl$$1.prototype;
    v11660.isIndexerMember = v187;
    var v11661 = FuncDecl$$1.prototype;
    v11661.isSpecialFn = v188;
    var v11662 = FuncDecl$$1.prototype;
    v11662.isAnonymousFn = v189;
    var v11663 = FuncDecl$$1.prototype;
    v11663.isAccessor = v190;
    var v11664 = FuncDecl$$1.prototype;
    v11664.isGetAccessor = v191;
    var v11665 = FuncDecl$$1.prototype;
    v11665.isSetAccessor = v192;
    var v11666 = FuncDecl$$1.prototype;
    v11666.isAmbient = v193;
    var v11667 = FuncDecl$$1.prototype;
    v11667.isExported = v194;
    var v11668 = FuncDecl$$1.prototype;
    v11668.isPrivate = v195;
    var v11669 = FuncDecl$$1.prototype;
    v11669.isPublic = v196;
    var v11670 = FuncDecl$$1.prototype;
    v11670.isStatic = v197;
    var v11671 = FuncDecl$$1.prototype;
    v11671.treeViewLabel = v198;
    var v11672 = FuncDecl$$1.prototype;
    v11672.ClearFlags = v199;
    var v11673 = FuncDecl$$1.prototype;
    v11673.isSignature = v200;
    return FuncDecl$$1
  }
  function v171(_super$$18) {
    function v170(emitter$$14, tokenId$$14, startLine$$14) {
      JAMScript.call(emitter$$14.emitParensAndCommentsInPlace, emitter$$14, [this, true]);
      JAMScript.call(emitter$$14.recordSourceMappingStart, emitter$$14, [this]);
      var v18351 = this.id;
      var v11674 = v18351.actualText;
      JAMScript.call(emitter$$14.writeToOutput, emitter$$14, [v11674]);
      JAMScript.call(emitter$$14.recordSourceMappingEnd, emitter$$14, [this]);
      JAMScript.call(emitter$$14.emitParensAndCommentsInPlace, emitter$$14, [this, false]);
      return
    }
    function v169() {
      var v18352 = this.id;
      var v11675 = v18352.actualText;
      return"arg: " + v11675
    }
    function v168() {
      var v11676 = this.isOptional;
      var v18353 = !v11676;
      if(v18353) {
        v11676 = this.init
      }
      return v11676
    }
    function ArgDecl$$1(id$$4) {
      var v18354 = TypeScript$$4.NodeType;
      var v11677 = v18354.ArgDecl;
      JAMScript.call(_super$$18.call, _super$$18, [this, id$$4, v11677, 0]);
      this.isOptional = false;
      this.parameterPropertySym = null;
      return
    }
    JAMScript.call(__extends, null, [ArgDecl$$1, _super$$18]);
    var v11678 = ArgDecl$$1.prototype;
    v11678.isOptionalArg = v168;
    var v11679 = ArgDecl$$1.prototype;
    v11679.treeViewLabel = v169;
    var v11680 = ArgDecl$$1.prototype;
    v11680.emit = v170;
    return ArgDecl$$1
  }
  function v167(_super$$17) {
    function v166() {
      var v18355 = this.id;
      var v11681 = v18355.actualText;
      return"var " + v11681
    }
    function v165(emitter$$13, tokenId$$13, startLine$$13) {
      JAMScript.call(emitter$$13.emitJavascriptVarDecl, emitter$$13, [this, tokenId$$13]);
      return
    }
    function v164() {
      var v11682 = this.varFlags;
      var v18356 = TypeScript$$4.VarFlags;
      var v11683 = v18356.Static;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11682, v11683])
    }
    function v163() {
      var v11684 = this.varFlags;
      var v18357 = TypeScript$$4.VarFlags;
      var v11685 = v18357.Exported;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11684, v11685])
    }
    function v162() {
      var v11686 = this.varFlags;
      var v18358 = TypeScript$$4.VarFlags;
      var v11687 = v18358.Ambient;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11686, v11687])
    }
    function VarDecl$$1(id$$3, nest) {
      var v18359 = TypeScript$$4.NodeType;
      var v11688 = v18359.VarDecl;
      JAMScript.call(_super$$17.call, _super$$17, [this, id$$3, v11688, nest]);
      return
    }
    JAMScript.call(__extends, null, [VarDecl$$1, _super$$17]);
    var v11689 = VarDecl$$1.prototype;
    v11689.isAmbient = v162;
    var v11690 = VarDecl$$1.prototype;
    v11690.isExported = v163;
    var v11691 = VarDecl$$1.prototype;
    v11691.isStatic = v164;
    var v11692 = VarDecl$$1.prototype;
    v11692.emit = v165;
    var v11693 = VarDecl$$1.prototype;
    v11693.treeViewLabel = v166;
    return VarDecl$$1
  }
  function v161(_super$$16) {
    function v160() {
      return JAMScript.call(this.treeViewLabel, this, [])
    }
    function v159(typeFlow$$12) {
      return JAMScript.call(typeFlow$$12.typeCheckBoundDecl, typeFlow$$12, [this])
    }
    function v158() {
      var v11694 = this.varFlags;
      var v18360 = TypeScript$$4.VarFlags;
      var v11695 = v18360.Property;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11694, v11695])
    }
    function v157() {
      var v11696 = this.varFlags;
      var v18361 = TypeScript$$4.VarFlags;
      var v11697 = v18361.Public;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11696, v11697])
    }
    function v156() {
      var v11698 = this.varFlags;
      var v18362 = TypeScript$$4.VarFlags;
      var v11699 = v18362.Private;
      return JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v11698, v11699])
    }
    function v155() {
      return true
    }
    function v154() {
      return true
    }
    function BoundDecl$$1(id$$2, nodeType$$6, nestingLevel) {
      JAMScript.call(_super$$16.call, _super$$16, [this, nodeType$$6]);
      this.id = id$$2;
      this.nestingLevel = nestingLevel;
      this.init = null;
      this.typeExpr = null;
      var v11700 = TypeScript$$4.VarFlags;
      this.varFlags = v11700.None;
      this.sym = null;
      return
    }
    JAMScript.call(__extends, null, [BoundDecl$$1, _super$$16]);
    var v11701 = BoundDecl$$1.prototype;
    v11701.isDeclaration = v154;
    var v11702 = BoundDecl$$1.prototype;
    v11702.isStatementOrExpression = v155;
    var v11703 = BoundDecl$$1.prototype;
    v11703.isPrivate = v156;
    var v11704 = BoundDecl$$1.prototype;
    v11704.isPublic = v157;
    var v11705 = BoundDecl$$1.prototype;
    v11705.isProperty = v158;
    var v11706 = BoundDecl$$1.prototype;
    v11706.typeCheck = v159;
    var v11707 = BoundDecl$$1.prototype;
    v11707.printLabel = v160;
    return BoundDecl$$1
  }
  function v153(_super$$15) {
    function v152() {
      var v22681 = this.alias;
      var v18363 = v22681.nodeType;
      var v22682 = TypeScript$$4.NodeType;
      var v18364 = v22682.Name;
      var v11709 = v18363 == v18364;
      if(v11709) {
        var v11708 = this.alias;
        return v11708.actualText
      }else {
        var dotExpr$$1 = this.alias;
        var firstMod = dotExpr$$1.operand1;
        return firstMod.actualText
      }
      return
    }
    function v151(aliasAST) {
      var v18365 = typeof aliasAST;
      var v11710 = v18365 === "undefined";
      if(v11710) {
        aliasAST = this.alias
      }
      var v18366 = aliasAST.nodeType;
      var v22683 = TypeScript$$4.NodeType;
      var v18367 = v22683.Name;
      var v11713 = v18366 == v18367;
      if(v11713) {
        return aliasAST.actualText
      }else {
        var dotExpr = aliasAST;
        var v22684 = dotExpr.operand1;
        var v18368 = JAMScript.call(this.getAliasName, this, [v22684]);
        var v11711 = v18368 + ".";
        var v18369 = dotExpr.operand2;
        var v11712 = JAMScript.call(this.getAliasName, this, [v18369]);
        return v11711 + v11712
      }
      return
    }
    function v150(typeFlow$$11) {
      return JAMScript.call(typeFlow$$11.typeCheckImportDecl, typeFlow$$11, [this])
    }
    function v149(emitter$$12, tokenId$$12, startLine$$12) {
      var v11714 = this.alias;
      var mod = v11714.type;
      var v22685 = this.isDynamicImport;
      var v18370 = !v22685;
      var v22687 = !v18370;
      if(v22687) {
        var v24872 = this.id;
        var v22686 = v24872.sym;
        if(v22686) {
          var v26392 = this.id;
          var v25871 = v26392.sym;
          var v24873 = v25871.onlyReferencedAsTypeRef;
          v22686 = !v24873
        }
        v18370 = v22686
      }
      var v11721 = v18370;
      if(v11721) {
        var prevModAliasId = emitter$$12.modAliasId;
        var prevFirstModAlias = emitter$$12.firstModAlias;
        JAMScript.call(emitter$$12.recordSourceMappingStart, emitter$$12, [this]);
        JAMScript.call(emitter$$12.emitParensAndCommentsInPlace, emitter$$12, [this, true]);
        var v24874 = this.id;
        var v22688 = v24874.actualText;
        var v18371 = "var " + v22688;
        var v11715 = v18371 + " = ";
        JAMScript.call(emitter$$12.writeToOutput, emitter$$12, [v11715]);
        var v11716 = this.id;
        emitter$$12.modAliasId = v11716.actualText;
        var v11717 = emitter$$12;
        var v27576 = JAMScript.call(this.firstAliasedModToString, this, []);
        v11717.firstModAlias = v27576;
        var v11718 = this.alias;
        var v18372 = TypeScript$$4.TokenID;
        var v11719 = v18372.Tilde;
        JAMScript.call(emitter$$12.emitJavascript, emitter$$12, [v11718, v11719, false]);
        var v18373 = this.isDynamicImport;
        var v11720 = !v18373;
        if(v11720) {
          JAMScript.call(emitter$$12.writeToOutput, emitter$$12, [";"])
        }
        JAMScript.call(emitter$$12.emitParensAndCommentsInPlace, emitter$$12, [this, false]);
        JAMScript.call(emitter$$12.recordSourceMappingEnd, emitter$$12, [this]);
        emitter$$12.modAliasId = prevModAliasId;
        emitter$$12.firstModAlias = prevFirstModAlias
      }
      return
    }
    function v148() {
      return true
    }
    function v147() {
      return true
    }
    function ImportDeclaration$$1(id$$1, alias) {
      var v18374 = TypeScript$$4.NodeType;
      var v11722 = v18374.ImportDeclaration;
      JAMScript.call(_super$$15.call, _super$$15, [this, v11722]);
      this.id = id$$1;
      this.alias = alias;
      var v11723 = TypeScript$$4.VarFlags;
      this.varFlags = v11723.None;
      this.isDynamicImport = false;
      return
    }
    JAMScript.call(__extends, null, [ImportDeclaration$$1, _super$$15]);
    var v11724 = ImportDeclaration$$1.prototype;
    v11724.isStatementOrExpression = v147;
    var v11725 = ImportDeclaration$$1.prototype;
    v11725.isDeclaration = v148;
    var v11726 = ImportDeclaration$$1.prototype;
    v11726.emit = v149;
    var v11727 = ImportDeclaration$$1.prototype;
    v11727.typeCheck = v150;
    var v11728 = ImportDeclaration$$1.prototype;
    v11728.getAliasName = v151;
    var v11729 = ImportDeclaration$$1.prototype;
    v11729.firstAliasedModToString = v152;
    return ImportDeclaration$$1
  }
  function v146(_super$$14) {
    function ModuleElement$$1(nodeType$$5) {
      JAMScript.call(_super$$14.call, _super$$14, [this, nodeType$$5]);
      return
    }
    JAMScript.call(__extends, null, [ModuleElement$$1, _super$$14]);
    return ModuleElement$$1
  }
  function v145(_super$$13) {
    function v144() {
      return this.text
    }
    function v143() {
      var v11730 = this.text;
      return"st: " + v11730
    }
    function v142(typeFlow$$10) {
      this.type = typeFlow$$10.stringType;
      return this
    }
    function v141(emitter$$11, tokenId$$11, startLine$$11) {
      JAMScript.call(emitter$$11.emitParensAndCommentsInPlace, emitter$$11, [this, true]);
      JAMScript.call(emitter$$11.recordSourceMappingStart, emitter$$11, [this]);
      var v11731 = this.text;
      JAMScript.call(emitter$$11.emitStringLiteral, emitter$$11, [v11731]);
      JAMScript.call(emitter$$11.recordSourceMappingEnd, emitter$$11, [this]);
      JAMScript.call(emitter$$11.emitParensAndCommentsInPlace, emitter$$11, [this, false]);
      return
    }
    function StringLiteral$$1(text$$8) {
      var v18375 = TypeScript$$4.NodeType;
      var v11732 = v18375.QString;
      JAMScript.call(_super$$13.call, _super$$13, [this, v11732]);
      this.text = text$$8;
      return
    }
    JAMScript.call(__extends, null, [StringLiteral$$1, _super$$13]);
    var v11733 = StringLiteral$$1.prototype;
    v11733.emit = v141;
    var v11734 = StringLiteral$$1.prototype;
    v11734.typeCheck = v142;
    var v11735 = StringLiteral$$1.prototype;
    v11735.treeViewLabel = v143;
    var v11736 = StringLiteral$$1.prototype;
    v11736.printLabel = v144;
    return StringLiteral$$1
  }
  function v140(_super$$12) {
    function v139(emitter$$10, tokenId$$10, startLine$$10) {
      JAMScript.call(emitter$$10.emitParensAndCommentsInPlace, emitter$$10, [this, true]);
      JAMScript.call(emitter$$10.recordSourceMappingStart, emitter$$10, [this]);
      var v18376 = this.regex;
      var v11737 = JAMScript.call(v18376.toString, v18376, []);
      JAMScript.call(emitter$$10.writeToOutput, emitter$$10, [v11737]);
      JAMScript.call(emitter$$10.recordSourceMappingEnd, emitter$$10, [this]);
      JAMScript.call(emitter$$10.emitParensAndCommentsInPlace, emitter$$10, [this, false]);
      return
    }
    function v138(typeFlow$$9) {
      this.type = typeFlow$$9.regexType;
      return this
    }
    function RegexLiteral$$1(regex$$1) {
      var v18377 = TypeScript$$4.NodeType;
      var v11738 = v18377.Regex;
      JAMScript.call(_super$$12.call, _super$$12, [this, v11738]);
      this.regex = regex$$1;
      return
    }
    JAMScript.call(__extends, null, [RegexLiteral$$1, _super$$12]);
    var v11739 = RegexLiteral$$1.prototype;
    v11739.typeCheck = v138;
    var v11740 = RegexLiteral$$1.prototype;
    v11740.emit = v139;
    return RegexLiteral$$1
  }
  function v137(_super$$11) {
    function v136() {
      var v22689 = this.value;
      var v18378 = Math.floor(v22689);
      var v18379 = this.value;
      var v11745 = v18378 != v18379;
      if(v11745) {
        var v18380 = this.value;
        var v11741 = v18380.toFixed(2);
        return JAMScript.call(v11741.toString, v11741, [])
      }else {
        var v11744 = this.hasEmptyFraction;
        if(v11744) {
          var v18381 = this.value;
          var v11742 = JAMScript.call(v18381.toString, v18381, []);
          return v11742 + ".0"
        }else {
          var v11743 = this.value;
          return JAMScript.call(v11743.toString, v11743, [])
        }
      }
      return
    }
    function v135(emitter$$9, tokenId$$9, startLine$$9) {
      JAMScript.call(emitter$$9.emitParensAndCommentsInPlace, emitter$$9, [this, true]);
      JAMScript.call(emitter$$9.recordSourceMappingStart, emitter$$9, [this]);
      var v11746 = this.isNegativeZero;
      if(v11746) {
        JAMScript.call(emitter$$9.writeToOutput, emitter$$9, ["-"])
      }
      var v18382 = this.value;
      var v11747 = JAMScript.call(v18382.toString, v18382, []);
      JAMScript.call(emitter$$9.writeToOutput, emitter$$9, [v11747]);
      var v11748 = this.hasEmptyFraction;
      if(v11748) {
        JAMScript.call(emitter$$9.writeToOutput, emitter$$9, [".0"])
      }
      JAMScript.call(emitter$$9.recordSourceMappingEnd, emitter$$9, [this]);
      JAMScript.call(emitter$$9.emitParensAndCommentsInPlace, emitter$$9, [this, false]);
      return
    }
    function v134() {
      var v11749 = JAMScript.call(this.printLabel, this, []);
      return"num: " + v11749
    }
    function v133(typeFlow$$8) {
      this.type = typeFlow$$8.doubleType;
      return this
    }
    function NumberLiteral$$1(value$$30, hasEmptyFraction) {
      var v18383 = TypeScript$$4.NodeType;
      var v11750 = v18383.NumberLit;
      JAMScript.call(_super$$11.call, _super$$11, [this, v11750]);
      this.value = value$$30;
      this.hasEmptyFraction = hasEmptyFraction;
      this.isNegativeZero = false;
      return
    }
    JAMScript.call(__extends, null, [NumberLiteral$$1, _super$$11]);
    var v11751 = NumberLiteral$$1.prototype;
    v11751.typeCheck = v133;
    var v11752 = NumberLiteral$$1.prototype;
    v11752.treeViewLabel = v134;
    var v11753 = NumberLiteral$$1.prototype;
    v11753.emit = v135;
    var v11754 = NumberLiteral$$1.prototype;
    v11754.printLabel = v136;
    return NumberLiteral$$1
  }
  function v132(_super$$10) {
    function v131(emitter$$8, tokenId$$8, startLine$$8) {
      JAMScript.call(emitter$$8.emitParensAndCommentsInPlace, emitter$$8, [this, true]);
      JAMScript.call(emitter$$8.recordSourceMappingStart, emitter$$8, [this]);
      var v11755 = this.operand1;
      var v18384 = TypeScript$$4.TokenID;
      var v11756 = v18384.Question;
      JAMScript.call(emitter$$8.emitJavascript, emitter$$8, [v11755, v11756, false]);
      JAMScript.call(emitter$$8.writeToOutput, emitter$$8, [" ? "]);
      var v11757 = this.operand2;
      var v18385 = TypeScript$$4.TokenID;
      var v11758 = v18385.Question;
      JAMScript.call(emitter$$8.emitJavascript, emitter$$8, [v11757, v11758, false]);
      JAMScript.call(emitter$$8.writeToOutput, emitter$$8, [" : "]);
      var v11759 = this.operand3;
      var v18386 = TypeScript$$4.TokenID;
      var v11760 = v18386.Question;
      JAMScript.call(emitter$$8.emitJavascript, emitter$$8, [v11759, v11760, false]);
      JAMScript.call(emitter$$8.recordSourceMappingEnd, emitter$$8, [this]);
      JAMScript.call(emitter$$8.emitParensAndCommentsInPlace, emitter$$8, [this, false]);
      return
    }
    function v130(typeFlow$$7) {
      return JAMScript.call(typeFlow$$7.typeCheckQMark, typeFlow$$7, [this])
    }
    function ConditionalExpression$$1(operand1$$1, operand2$$1, operand3) {
      var v18387 = TypeScript$$4.NodeType;
      var v11761 = v18387.ConditionalExpression;
      JAMScript.call(_super$$10.call, _super$$10, [this, v11761]);
      this.operand1 = operand1$$1;
      this.operand2 = operand2$$1;
      this.operand3 = operand3;
      return
    }
    JAMScript.call(__extends, null, [ConditionalExpression$$1, _super$$10]);
    var v11762 = ConditionalExpression$$1.prototype;
    v11762.typeCheck = v130;
    var v11763 = ConditionalExpression$$1.prototype;
    v11763.emit = v131;
    return ConditionalExpression$$1
  }
  function v129(_super$$9) {
    function v128(emitter$$7, tokenId$$7, startLine$$7) {
      var v11764 = TypeScript$$4.nodeTypeToTokTable;
      var v11765 = this.nodeType;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var binTokenId = v11764[v11765]
      }
      JAMScript.call(emitter$$7.emitParensAndCommentsInPlace, emitter$$7, [this, true]);
      JAMScript.call(emitter$$7.recordSourceMappingStart, emitter$$7, [this]);
      var v11791 = binTokenId != undefined;
      if(v11791) {
        var v11766 = this.operand1;
        JAMScript.call(emitter$$7.emitJavascript, emitter$$7, [v11766, binTokenId, false]);
        var v24875 = TypeScript$$4.tokenTable;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v22690 = v24875[binTokenId]
        }
        var v18388 = v22690.text;
        var v11769 = v18388 == "instanceof";
        if(v11769) {
          JAMScript.call(emitter$$7.writeToOutput, emitter$$7, [" instanceof "])
        }else {
          var v24876 = TypeScript$$4.tokenTable;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22691 = v24876[binTokenId]
          }
          var v18389 = v22691.text;
          var v11768 = v18389 == "in";
          if(v11768) {
            JAMScript.call(emitter$$7.writeToOutput, emitter$$7, [" in "])
          }else {
            var v25872 = TypeScript$$4.tokenTable;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              var v24877 = v25872[binTokenId]
            }
            var v22692 = v24877.text;
            var v18390 = " " + v22692;
            var v11767 = v18390 + " ";
            JAMScript.call(emitter$$7.writeToOutputTrimmable, emitter$$7, [v11767])
          }
        }
        var v11770 = this.operand2;
        JAMScript.call(emitter$$7.emitJavascript, emitter$$7, [v11770, binTokenId, false])
      }else {
        var v11790 = this.nodeType;
        switch(v11790) {
          case TypeScript$$4.NodeType.Dot:
            var v18391 = JAMScript.call(emitter$$7.tryEmitConstant, emitter$$7, [this]);
            var v11774 = !v18391;
            if(v11774) {
              var v11771 = this.operand1;
              var v18392 = TypeScript$$4.TokenID;
              var v11772 = v18392.Dot;
              JAMScript.call(emitter$$7.emitJavascript, emitter$$7, [v11771, v11772, false]);
              JAMScript.call(emitter$$7.writeToOutput, emitter$$7, ["."]);
              var v11773 = this.operand2;
              JAMScript.call(emitter$$7.emitJavascriptName, emitter$$7, [v11773, false])
            }
            break;
          case TypeScript$$4.NodeType.Index:
            var v11775 = this.operand1;
            var v11776 = this.operand2;
            JAMScript.call(emitter$$7.emitIndex, emitter$$7, [v11775, v11776]);
            break;
          case TypeScript$$4.NodeType.Member:
            var v24878 = this.operand2;
            var v22693 = v24878.nodeType;
            var v24879 = TypeScript$$4.NodeType;
            var v22694 = v24879.FuncDecl;
            var v18393 = v22693 == v22694;
            if(v18393) {
              var v22695 = this.operand2;
              v18393 = JAMScript.call(v22695.isAccessor, v22695, [])
            }
            var v11782 = v18393;
            if(v11782) {
              var funcDecl = this.operand2;
              var v18394 = funcDecl.fncFlags;
              var v22696 = TypeScript$$4.FncFlags;
              var v18395 = v22696.GetAccessor;
              var v11777 = JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v18394, v18395]);
              if(v11777) {
                JAMScript.call(emitter$$7.writeToOutput, emitter$$7, ["get "])
              }else {
                JAMScript.call(emitter$$7.writeToOutput, emitter$$7, ["set "])
              }
              var v11778 = this.operand1;
              var v18396 = TypeScript$$4.TokenID;
              var v11779 = v18396.Colon;
              JAMScript.call(emitter$$7.emitJavascript, emitter$$7, [v11778, v11779, false])
            }else {
              var v11780 = this.operand1;
              var v18397 = TypeScript$$4.TokenID;
              var v11781 = v18397.Colon;
              JAMScript.call(emitter$$7.emitJavascript, emitter$$7, [v11780, v11781, false]);
              JAMScript.call(emitter$$7.writeToOutputTrimmable, emitter$$7, [": "])
            }
            var v11783 = this.operand2;
            var v18398 = TypeScript$$4.TokenID;
            var v11784 = v18398.Comma;
            JAMScript.call(emitter$$7.emitJavascript, emitter$$7, [v11783, v11784, false]);
            break;
          case TypeScript$$4.NodeType.Comma:
            var v11785 = this.operand1;
            var v18399 = TypeScript$$4.TokenID;
            var v11786 = v18399.Comma;
            JAMScript.call(emitter$$7.emitJavascript, emitter$$7, [v11785, v11786, false]);
            var v18400 = emitter$$7.emitState;
            var v11787 = v18400.inObjectLiteral;
            if(v11787) {
              JAMScript.call(emitter$$7.writeLineToOutput, emitter$$7, [", "])
            }else {
              JAMScript.call(emitter$$7.writeToOutput, emitter$$7, [","])
            }
            var v11788 = this.operand2;
            var v18401 = TypeScript$$4.TokenID;
            var v11789 = v18401.Comma;
            JAMScript.call(emitter$$7.emitJavascript, emitter$$7, [v11788, v11789, false]);
            break;
          case TypeScript$$4.NodeType.Is:
            throw new Error("should be de-sugared during type check");;
          default:
            throw new Error("please implement in derived class");
        }
      }
      JAMScript.call(emitter$$7.recordSourceMappingEnd, emitter$$7, [this]);
      JAMScript.call(emitter$$7.emitParensAndCommentsInPlace, emitter$$7, [this, false]);
      return
    }
    function v127(typeFlow$$6) {
      var v11804 = this.nodeType;
      switch(v11804) {
        case TypeScript$$4.NodeType.Dot:
          return JAMScript.call(typeFlow$$6.typeCheckDotOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.Asg:
          return JAMScript.call(typeFlow$$6.typeCheckAsgOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.Add:
        ;
        case TypeScript$$4.NodeType.Sub:
        ;
        case TypeScript$$4.NodeType.Mul:
        ;
        case TypeScript$$4.NodeType.Div:
        ;
        case TypeScript$$4.NodeType.Mod:
        ;
        case TypeScript$$4.NodeType.Or:
        ;
        case TypeScript$$4.NodeType.And:
          return JAMScript.call(typeFlow$$6.typeCheckArithmeticOperator, typeFlow$$6, [this, false]);
        case TypeScript$$4.NodeType.Xor:
          return JAMScript.call(typeFlow$$6.typeCheckBitwiseOperator, typeFlow$$6, [this, false]);
        case TypeScript$$4.NodeType.Ne:
        ;
        case TypeScript$$4.NodeType.Eq:
          var text$$7;
          var v22697 = typeFlow$$6.checker;
          var v18402 = v22697.styleSettings;
          var v11802 = v18402.eqeqeq;
          if(v11802) {
            var v11792 = TypeScript$$4.nodeTypeTable;
            var v11793 = this.nodeType;
            introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
              text$$7 = v11792[v11793]
            }
            var v18403 = typeFlow$$6.checker;
            var v11794 = v18403.errorReporter;
            var v11795 = "use of " + text$$7;
            JAMScript.call(v11794.styleError, v11794, [this, v11795])
          }else {
            var v22698 = typeFlow$$6.checker;
            var v18404 = v22698.styleSettings;
            var v11801 = v18404.eqnull;
            if(v11801) {
              var v11796 = TypeScript$$4.nodeTypeTable;
              var v11797 = this.nodeType;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                text$$7 = v11796[v11797]
              }
              var v22699 = this.operand2;
              var v18405 = v22699 !== null;
              if(v18405) {
                var v24880 = this.operand2;
                var v22700 = v24880.nodeType;
                var v24881 = TypeScript$$4.NodeType;
                var v22701 = v24881.Null;
                v18405 = v22700 == v22701
              }
              var v11800 = v18405;
              if(v11800) {
                var v18406 = typeFlow$$6.checker;
                var v11798 = v18406.errorReporter;
                var v18407 = "use of " + text$$7;
                var v11799 = v18407 + " to compare with null";
                JAMScript.call(v11798.styleError, v11798, [this, v11799])
              }
            }
          }
        ;
        case TypeScript$$4.NodeType.Eqv:
        ;
        case TypeScript$$4.NodeType.NEqv:
        ;
        case TypeScript$$4.NodeType.Lt:
        ;
        case TypeScript$$4.NodeType.Le:
        ;
        case TypeScript$$4.NodeType.Ge:
        ;
        case TypeScript$$4.NodeType.Gt:
          return JAMScript.call(typeFlow$$6.typeCheckBooleanOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.Index:
          return JAMScript.call(typeFlow$$6.typeCheckIndex, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.Member:
          this.type = typeFlow$$6.voidType;
          return this;
        case TypeScript$$4.NodeType.LogOr:
          return JAMScript.call(typeFlow$$6.typeCheckLogOr, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.LogAnd:
          return JAMScript.call(typeFlow$$6.typeCheckLogAnd, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.AsgAdd:
        ;
        case TypeScript$$4.NodeType.AsgSub:
        ;
        case TypeScript$$4.NodeType.AsgMul:
        ;
        case TypeScript$$4.NodeType.AsgDiv:
        ;
        case TypeScript$$4.NodeType.AsgMod:
        ;
        case TypeScript$$4.NodeType.AsgOr:
        ;
        case TypeScript$$4.NodeType.AsgAnd:
          return JAMScript.call(typeFlow$$6.typeCheckArithmeticOperator, typeFlow$$6, [this, true]);
        case TypeScript$$4.NodeType.AsgXor:
          return JAMScript.call(typeFlow$$6.typeCheckBitwiseOperator, typeFlow$$6, [this, true]);
        case TypeScript$$4.NodeType.Lsh:
        ;
        case TypeScript$$4.NodeType.Rsh:
        ;
        case TypeScript$$4.NodeType.Rs2:
          return JAMScript.call(typeFlow$$6.typeCheckShift, typeFlow$$6, [this, false]);
        case TypeScript$$4.NodeType.AsgLsh:
        ;
        case TypeScript$$4.NodeType.AsgRsh:
        ;
        case TypeScript$$4.NodeType.AsgRs2:
          return JAMScript.call(typeFlow$$6.typeCheckShift, typeFlow$$6, [this, true]);
        case TypeScript$$4.NodeType.Comma:
          return JAMScript.call(typeFlow$$6.typeCheckCommaOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.InstOf:
          return JAMScript.call(typeFlow$$6.typeCheckInstOf, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.In:
          return JAMScript.call(typeFlow$$6.typeCheckInOperator, typeFlow$$6, [this]);
        case TypeScript$$4.NodeType.From:
          var v18408 = typeFlow$$6.checker;
          var v11803 = v18408.errorReporter;
          JAMScript.call(v11803.simpleError, v11803, [this, "Illegal use of 'from' keyword in binary expression"]);
          break;
        default:
          throw new Error("please implement in derived class");
      }
      return this
    }
    function BinaryExpression$$1(nodeType$$4, operand1, operand2) {
      JAMScript.call(_super$$9.call, _super$$9, [this, nodeType$$4]);
      this.operand1 = operand1;
      this.operand2 = operand2;
      return
    }
    JAMScript.call(__extends, null, [BinaryExpression$$1, _super$$9]);
    var v11805 = BinaryExpression$$1.prototype;
    v11805.typeCheck = v127;
    var v11806 = BinaryExpression$$1.prototype;
    v11806.emit = v128;
    return BinaryExpression$$1
  }
  function v126(_super$$8) {
    function v125(emitter$$6, tokenId$$6, startLine$$6) {
      JAMScript.call(emitter$$6.emitParensAndCommentsInPlace, emitter$$6, [this, true]);
      JAMScript.call(emitter$$6.recordSourceMappingStart, emitter$$6, [this]);
      var v18409 = this.nodeType;
      var v22702 = TypeScript$$4.NodeType;
      var v18410 = v22702.New;
      var v11811 = v18409 == v18410;
      if(v11811) {
        var v11807 = this.target;
        var v11808 = this.arguments;
        JAMScript.call(emitter$$6.emitNew, emitter$$6, [v11807, v11808])
      }else {
        var v11809 = this.target;
        var v11810 = this.arguments;
        JAMScript.call(emitter$$6.emitCall, emitter$$6, [this, v11809, v11810])
      }
      JAMScript.call(emitter$$6.recordSourceMappingEnd, emitter$$6, [this]);
      JAMScript.call(emitter$$6.emitParensAndCommentsInPlace, emitter$$6, [this, false]);
      return
    }
    function v124(typeFlow$$5) {
      var v18411 = this.nodeType;
      var v22703 = TypeScript$$4.NodeType;
      var v18412 = v22703.New;
      var v11812 = v18411 == v18412;
      if(v11812) {
        return JAMScript.call(typeFlow$$5.typeCheckNew, typeFlow$$5, [this])
      }else {
        return JAMScript.call(typeFlow$$5.typeCheckCall, typeFlow$$5, [this])
      }
      return
    }
    function CallExpression$$1(nodeType$$3, target$$37, args) {
      JAMScript.call(_super$$8.call, _super$$8, [this, nodeType$$3]);
      this.target = target$$37;
      this.arguments = args;
      this.signature = null;
      var v11813 = this.target;
      this.minChar = v11813.minChar;
      return
    }
    JAMScript.call(__extends, null, [CallExpression$$1, _super$$8]);
    var v11814 = CallExpression$$1.prototype;
    v11814.typeCheck = v124;
    var v11815 = CallExpression$$1.prototype;
    v11815.emit = v125;
    return CallExpression$$1
  }
  function v123(_super$$7) {
    function v122(emitter$$5, tokenId$$5, startLine$$5) {
      JAMScript.call(emitter$$5.emitParensAndCommentsInPlace, emitter$$5, [this, true]);
      JAMScript.call(emitter$$5.recordSourceMappingStart, emitter$$5, [this]);
      var v11848 = this.nodeType;
      switch(v11848) {
        case TypeScript$$4.NodeType.IncPost:
          var v11816 = this.operand;
          var v18413 = TypeScript$$4.TokenID;
          var v11817 = v18413.PlusPlus;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11816, v11817, false]);
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["++"]);
          break;
        case TypeScript$$4.NodeType.LogNot:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["!"]);
          var v11818 = this.operand;
          var v18414 = TypeScript$$4.TokenID;
          var v11819 = v18414.Exclamation;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11818, v11819, false]);
          break;
        case TypeScript$$4.NodeType.DecPost:
          var v11820 = this.operand;
          var v18415 = TypeScript$$4.TokenID;
          var v11821 = v18415.MinusMinus;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11820, v11821, false]);
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["--"]);
          break;
        case TypeScript$$4.NodeType.ObjectLit:
          var v11822 = this.operand;
          JAMScript.call(emitter$$5.emitObjectLiteral, emitter$$5, [v11822]);
          break;
        case TypeScript$$4.NodeType.ArrayLit:
          var v11823 = this.operand;
          JAMScript.call(emitter$$5.emitArrayLiteral, emitter$$5, [v11823]);
          break;
        case TypeScript$$4.NodeType.Not:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["~"]);
          var v11824 = this.operand;
          var v18416 = TypeScript$$4.TokenID;
          var v11825 = v18416.Tilde;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11824, v11825, false]);
          break;
        case TypeScript$$4.NodeType.Neg:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["-"]);
          var v22704 = this.operand;
          var v18417 = v22704.nodeType;
          var v22705 = TypeScript$$4.NodeType;
          var v18418 = v22705.Neg;
          var v11827 = v18417 == v18418;
          if(v11827) {
            var v11826 = this.operand;
            v11826.isParenthesized = true
          }
          var v11828 = this.operand;
          var v18419 = TypeScript$$4.TokenID;
          var v11829 = v18419.Minus;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11828, v11829, false]);
          break;
        case TypeScript$$4.NodeType.Pos:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["+"]);
          var v22706 = this.operand;
          var v18420 = v22706.nodeType;
          var v22707 = TypeScript$$4.NodeType;
          var v18421 = v22707.Pos;
          var v11831 = v18420 == v18421;
          if(v11831) {
            var v11830 = this.operand;
            v11830.isParenthesized = true
          }
          var v11832 = this.operand;
          var v18422 = TypeScript$$4.TokenID;
          var v11833 = v18422.Plus;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11832, v11833, false]);
          break;
        case TypeScript$$4.NodeType.IncPre:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["++"]);
          var v11834 = this.operand;
          var v18423 = TypeScript$$4.TokenID;
          var v11835 = v18423.PlusPlus;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11834, v11835, false]);
          break;
        case TypeScript$$4.NodeType.DecPre:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["--"]);
          var v11836 = this.operand;
          var v18424 = TypeScript$$4.TokenID;
          var v11837 = v18424.MinusMinus;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11836, v11837, false]);
          break;
        case TypeScript$$4.NodeType.Throw:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["throw "]);
          var v11838 = this.operand;
          var v18425 = TypeScript$$4.TokenID;
          var v11839 = v18425.Tilde;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11838, v11839, false]);
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, [";"]);
          break;
        case TypeScript$$4.NodeType.Typeof:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["typeof "]);
          var v11840 = this.operand;
          var v18426 = TypeScript$$4.TokenID;
          var v11841 = v18426.Tilde;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11840, v11841, false]);
          break;
        case TypeScript$$4.NodeType.Delete:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["delete "]);
          var v11842 = this.operand;
          var v18427 = TypeScript$$4.TokenID;
          var v11843 = v18427.Tilde;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11842, v11843, false]);
          break;
        case TypeScript$$4.NodeType.Void:
          JAMScript.call(emitter$$5.writeToOutput, emitter$$5, ["void "]);
          var v11844 = this.operand;
          var v18428 = TypeScript$$4.TokenID;
          var v11845 = v18428.Tilde;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11844, v11845, false]);
          break;
        case TypeScript$$4.NodeType.TypeAssertion:
          var v11846 = this.operand;
          var v18429 = TypeScript$$4.TokenID;
          var v11847 = v18429.Tilde;
          JAMScript.call(emitter$$5.emitJavascript, emitter$$5, [v11846, v11847, false]);
          break;
        default:
          throw new Error("please implement in derived class");
      }
      JAMScript.call(emitter$$5.recordSourceMappingEnd, emitter$$5, [this]);
      JAMScript.call(emitter$$5.emitParensAndCommentsInPlace, emitter$$5, [this, false]);
      return
    }
    function v121(typeFlow$$4) {
      var v11863 = this.nodeType;
      switch(v11863) {
        case TypeScript$$4.NodeType.Not:
          return JAMScript.call(typeFlow$$4.typeCheckBitNot, typeFlow$$4, [this]);
        case TypeScript$$4.NodeType.LogNot:
          return JAMScript.call(typeFlow$$4.typeCheckLogNot, typeFlow$$4, [this]);
        case TypeScript$$4.NodeType.Pos:
        ;
        case TypeScript$$4.NodeType.Neg:
          return JAMScript.call(typeFlow$$4.typeCheckUnaryNumberOperator, typeFlow$$4, [this]);
        case TypeScript$$4.NodeType.IncPost:
        ;
        case TypeScript$$4.NodeType.IncPre:
        ;
        case TypeScript$$4.NodeType.DecPost:
        ;
        case TypeScript$$4.NodeType.DecPre:
          return JAMScript.call(typeFlow$$4.typeCheckIncOrDec, typeFlow$$4, [this]);
        case TypeScript$$4.NodeType.ArrayLit:
          JAMScript.call(typeFlow$$4.typeCheckArrayLit, typeFlow$$4, [this]);
          return this;
        case TypeScript$$4.NodeType.ObjectLit:
          JAMScript.call(typeFlow$$4.typeCheckObjectLit, typeFlow$$4, [this]);
          return this;
        case TypeScript$$4.NodeType.Throw:
          var v11849 = this.operand;
          var v27577 = JAMScript.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11849]);
          this.operand = v27577;
          this.type = typeFlow$$4.voidType;
          return this;
        case TypeScript$$4.NodeType.Typeof:
          var v11850 = this.operand;
          var v27578 = JAMScript.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11850]);
          this.operand = v27578;
          this.type = typeFlow$$4.stringType;
          return this;
        case TypeScript$$4.NodeType.Delete:
          var v11851 = this.operand;
          var v27579 = JAMScript.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11851]);
          this.operand = v27579;
          this.type = typeFlow$$4.booleanType;
          break;
        case TypeScript$$4.NodeType.TypeAssertion:
          var v11852 = this.castTerm;
          var v27580 = JAMScript.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11852]);
          this.castTerm = v27580;
          var v18430 = this.operand;
          var v11853 = v18430.isParenthesized;
          var applyTargetType = !v11853;
          var v11854;
          if(applyTargetType) {
            var v18431 = this.castTerm;
            v11854 = v18431.type
          }else {
            v11854 = null
          }
          var targetType = v11854;
          var v11855 = typeFlow$$4.checker;
          var v18432 = typeFlow$$4.checker;
          var v11856 = JAMScript.call(v18432.inProvisionalTypecheckMode, v18432, []);
          var v11857 = this.operand;
          JAMScript.call(v11855.typeCheckWithContextualType, v11855, [targetType, v11856, true, v11857]);
          var v11858 = this.operand;
          var v18433 = this.castTerm;
          var v11859 = v18433.type;
          JAMScript.call(typeFlow$$4.castWithCoercion, typeFlow$$4, [v11858, v11859, false, true]);
          var v11860 = this.castTerm;
          this.type = v11860.type;
          return this;
        case TypeScript$$4.NodeType.Void:
          var v11861 = this.operand;
          var v27581 = JAMScript.call(typeFlow$$4.typeCheck, typeFlow$$4, [v11861]);
          this.operand = v27581;
          var v11862 = typeFlow$$4.checker;
          this.type = v11862.undefinedType;
          break;
        default:
          throw new Error("please implement in derived class");
      }
      return this
    }
    function v120(context$$9) {
      var v18434 = _super$$7.prototype;
      var v11864 = v18434.addToControlFlow;
      JAMScript.call(v11864.call, v11864, [this, context$$9]);
      var v18435 = this.nodeType;
      var v22708 = TypeScript$$4.NodeType;
      var v18436 = v22708.Throw;
      var v11865 = v18435 == v18436;
      if(v11865) {
        JAMScript.call(context$$9.returnStmt, context$$9, [])
      }
      return
    }
    function UnaryExpression$$1(nodeType$$2, operand) {
      JAMScript.call(_super$$7.call, _super$$7, [this, nodeType$$2]);
      this.operand = operand;
      this.targetType = null;
      this.castTerm = null;
      return
    }
    JAMScript.call(__extends, null, [UnaryExpression$$1, _super$$7]);
    var v11866 = UnaryExpression$$1.prototype;
    v11866.addToControlFlow = v120;
    var v11867 = UnaryExpression$$1.prototype;
    v11867.typeCheck = v121;
    var v11868 = UnaryExpression$$1.prototype;
    v11868.emit = v122;
    return UnaryExpression$$1
  }
  function v119(_super$$6) {
    function v118() {
      return true
    }
    function v117() {
      return true
    }
    function Expression$$1(nodeType$$1) {
      JAMScript.call(_super$$6.call, _super$$6, [this, nodeType$$1]);
      return
    }
    JAMScript.call(__extends, null, [Expression$$1, _super$$6]);
    var v11869 = Expression$$1.prototype;
    v11869.isExpression = v117;
    var v11870 = Expression$$1.prototype;
    v11870.isStatementOrExpression = v118;
    return Expression$$1
  }
  function v116(_super$$5) {
    function v115(emitter$$4, tokenId$$4, startLine$$4) {
      JAMScript.call(emitter$$4.emitParensAndCommentsInPlace, emitter$$4, [this, true]);
      JAMScript.call(emitter$$4.recordSourceMappingStart, emitter$$4, [this]);
      var v11871 = this.id;
      JAMScript.call(emitter$$4.recordSourceMappingStart, emitter$$4, [v11871]);
      var v18437 = this.id;
      var v11872 = v18437.actualText;
      JAMScript.call(emitter$$4.writeToOutput, emitter$$4, [v11872]);
      var v11873 = this.id;
      JAMScript.call(emitter$$4.recordSourceMappingEnd, emitter$$4, [v11873]);
      JAMScript.call(emitter$$4.writeLineToOutput, emitter$$4, [":"]);
      JAMScript.call(emitter$$4.recordSourceMappingEnd, emitter$$4, [this]);
      JAMScript.call(emitter$$4.emitParensAndCommentsInPlace, emitter$$4, [this, false]);
      return
    }
    function v114(typeFlow$$3) {
      this.type = typeFlow$$3.voidType;
      return this
    }
    function v113() {
      var v18438 = this.id;
      var v11874 = v18438.actualText;
      return v11874 + ":"
    }
    function Label$$1(id) {
      var v18439 = TypeScript$$4.NodeType;
      var v11875 = v18439.Label;
      JAMScript.call(_super$$5.call, _super$$5, [this, v11875]);
      this.id = id;
      return
    }
    JAMScript.call(__extends, null, [Label$$1, _super$$5]);
    var v11876 = Label$$1.prototype;
    v11876.printLabel = v113;
    var v11877 = Label$$1.prototype;
    v11877.typeCheck = v114;
    var v11878 = Label$$1.prototype;
    v11878.emit = v115;
    return Label$$1
  }
  function v112(_super$$4) {
    function v111(emitter$$3, tokenId$$3, startLine$$3) {
      return
    }
    function v110() {
      return true
    }
    function MissingIdentifier$$1() {
      JAMScript.call(_super$$4.call, _super$$4, [this, "__missing"]);
      return
    }
    JAMScript.call(__extends, null, [MissingIdentifier$$1, _super$$4]);
    var v11879 = MissingIdentifier$$1.prototype;
    v11879.isMissing = v110;
    var v11880 = MissingIdentifier$$1.prototype;
    v11880.emit = v111;
    return MissingIdentifier$$1
  }
  function v109(_super$$3) {
    function fromToken(token$$4) {
      var v11881 = JAMScript.call(token$$4.getText, token$$4, []);
      var v11882 = token$$4.hasEscapeSequence;
      return new Identifier$$1(v11881, v11882)
    }
    function v108(emitter$$2, tokenId$$2, startLine$$2) {
      JAMScript.call(emitter$$2.emitJavascriptName, emitter$$2, [this, true]);
      return
    }
    function v107(typeFlow$$2) {
      return JAMScript.call(typeFlow$$2.typeCheckName, typeFlow$$2, [this])
    }
    function v106() {
      var v11884 = this.actualText;
      if(v11884) {
        var v11883 = this.actualText;
        return"id: " + v11883
      }else {
        return"name node"
      }
      return
    }
    function v105() {
      var v11885 = this.actualText;
      return"id: " + v11885
    }
    function v104() {
      return true
    }
    function v103() {
      return false
    }
    function v102(actualText$$1, hasEscapeSequence$$1) {
      this.actualText = actualText$$1;
      if(hasEscapeSequence$$1) {
        var v27582 = JAMScript.call(AST.getResolvedIdentifierName, AST, [actualText$$1]);
        this.text = v27582
      }else {
        this.text = actualText$$1
      }
      return
    }
    function Identifier$$1(actualText, hasEscapeSequence) {
      var v18440 = TypeScript$$4.NodeType;
      var v11886 = v18440.Name;
      JAMScript.call(_super$$3.call, _super$$3, [this, v11886]);
      this.actualText = actualText;
      this.hasEscapeSequence = hasEscapeSequence;
      this.sym = null;
      this.cloId = -1;
      JAMScript.call(this.setText, this, [actualText, hasEscapeSequence]);
      return
    }
    JAMScript.call(__extends, null, [Identifier$$1, _super$$3]);
    var v11887 = Identifier$$1.prototype;
    v11887.setText = v102;
    var v11888 = Identifier$$1.prototype;
    v11888.isMissing = v103;
    var v11889 = Identifier$$1.prototype;
    v11889.isLeaf = v104;
    var v11890 = Identifier$$1.prototype;
    v11890.treeViewLabel = v105;
    var v11891 = Identifier$$1.prototype;
    v11891.printLabel = v106;
    var v11892 = Identifier$$1.prototype;
    v11892.typeCheck = v107;
    var v11893 = Identifier$$1.prototype;
    v11893.emit = v108;
    Identifier$$1.fromToken = fromToken;
    return Identifier$$1
  }
  function v101(_super$$2) {
    function v100(typeFlow$$1) {
      var v11894 = this.members;
      var len$$3 = v11894.length;
      var v18441 = typeFlow$$1;
      var v22709 = typeFlow$$1.nestingLevel;
      v18441.nestingLevel = v22709 + 1;
      var i$$15 = 0;
      var v11898 = i$$15 < len$$3;
      for(;v11898;) {
        var v18442 = this.members;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v11897 = v18442[i$$15]
        }
        if(v11897) {
          var v11895 = this.members;
          var v11896 = i$$15;
          var v22710 = this.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v18443 = v22710[i$$15]
          }
          var v27583 = JAMScript.call(v18443.typeCheck, v18443, [typeFlow$$1]);
          v11895[v11896] = v27583
        }
        i$$15 = i$$15 + 1;
        v11898 = i$$15 < len$$3
      }
      var v18444 = typeFlow$$1;
      var v22711 = typeFlow$$1.nestingLevel;
      v18444.nestingLevel = v22711 - 1;
      return this
    }
    function v99(emitter$$1, tokenId$$1, startLine$$1) {
      JAMScript.call(emitter$$1.recordSourceMappingStart, emitter$$1, [this]);
      var v18445 = TypeScript$$4.TokenID;
      var v11899 = v18445.Semicolon;
      JAMScript.call(emitter$$1.emitJavascriptList, emitter$$1, [this, null, v11899, startLine$$1, false, false]);
      JAMScript.call(emitter$$1.recordSourceMappingEnd, emitter$$1, [this]);
      return
    }
    function v98(ast$$1) {
      var v18446 = ast$$1.nodeType;
      var v22712 = TypeScript$$4.NodeType;
      var v18447 = v22712.List;
      var v11903 = v18446 == v18447;
      if(v11903) {
        var list = ast$$1;
        var i$$14 = 0;
        var v11900 = list.members;
        var len$$2 = v11900.length;
        var v11902 = i$$14 < len$$2;
        for(;v11902;) {
          var v18448 = list.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v11901 = v18448[i$$14]
          }
          JAMScript.call(this.append, this, [v11901]);
          i$$14 = i$$14 + 1;
          v11902 = i$$14 < len$$2
        }
      }else {
        JAMScript.call(this.append, this, [ast$$1])
      }
      return this
    }
    function v97(ast) {
      var v11904 = this.members;
      var v18449 = this.members;
      var v11905 = v18449.length;
      JAMScript.set(v11904, v11905, ast);
      return this
    }
    function v96(context$$8) {
      var v11906 = this.members;
      var len$$1 = v11906.length;
      var i$$13 = 0;
      var v11911 = i$$13 < len$$1;
      for(;v11911;) {
        var v11910 = context$$8.noContinuation;
        if(v11910) {
          var v18450 = this.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v11907 = v18450[i$$13]
          }
          JAMScript.call(context$$8.addUnreachable, context$$8, [v11907]);
          break
        }else {
          var v11908 = this.members;
          var v11909 = i$$13;
          var v22713 = this.members;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v18451 = v22713[i$$13]
          }
          var v27584 = JAMScript.call(context$$8.walk, context$$8, [v18451, this]);
          v11908[v11909] = v27584
        }
        i$$13 = i$$13 + 1;
        v11911 = i$$13 < len$$1
      }
      var v18452 = context$$8.walker;
      var v11912 = v18452.options;
      v11912.goChildren = false;
      return
    }
    function ASTList$$1() {
      var v18453 = TypeScript$$4.NodeType;
      var v11913 = v18453.List;
      JAMScript.call(_super$$2.call, _super$$2, [this, v11913]);
      this.enclosingScope = null;
      var v27585 = new Array;
      this.members = v27585;
      return
    }
    JAMScript.call(__extends, null, [ASTList$$1, _super$$2]);
    var v11914 = ASTList$$1.prototype;
    v11914.addToControlFlow = v96;
    var v11915 = ASTList$$1.prototype;
    v11915.append = v97;
    var v11916 = ASTList$$1.prototype;
    v11916.appendAll = v98;
    var v11917 = ASTList$$1.prototype;
    v11917.emit = v99;
    var v11918 = ASTList$$1.prototype;
    v11918.typeCheck = v100;
    return ASTList$$1
  }
  function v95(_super$$1) {
    function IncompleteAST$$1(min, lim) {
      var v18454 = TypeScript$$4.NodeType;
      var v11919 = v18454.Error;
      JAMScript.call(_super$$1.call, _super$$1, [this, v11919]);
      this.minChar = min;
      this.limChar = lim;
      return
    }
    JAMScript.call(__extends, null, [IncompleteAST$$1, _super$$1]);
    return IncompleteAST$$1
  }
  function v94(_super) {
    function v93() {
      var v22714 = JAMScript.call(this.isDeclaration, this, []);
      var v18455 = !v22714;
      var v22716 = !v18455;
      if(v22716) {
        var v24882 = this.preComments;
        var v22715 = !v24882;
        var v24884 = !v22715;
        if(v24884) {
          var v25873 = this.preComments;
          var v24883 = v25873.length;
          v22715 = v24883 == 0
        }
        v18455 = v22715
      }
      var v11920 = v18455;
      if(v11920) {
        return[]
      }
      var v18456 = this.docComments;
      var v11927 = !v18456;
      if(v11927) {
        var v11921 = this.preComments;
        var preCommentsLength = v11921.length;
        var docComments = [];
        var i$$12 = preCommentsLength - 1;
        var v11926 = i$$12 >= 0;
        for(;v11926;) {
          var v22717 = this.preComments;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v18457 = v22717[i$$12]
          }
          var v11925 = JAMScript.call(v18457.isDocComment, v18457, []);
          if(v11925) {
            var v11922;
            var v22718 = docComments.length;
            var v18459 = v22718 > 0;
            if(v18459) {
              var v22719 = docComments.length;
              var v18458 = v22719 - 1;
              v11922 = docComments[v18458]
            }else {
              v11922 = null
            }
            var prevDocComment = v11922;
            var v18460 = prevDocComment == null;
            var v22721 = !v18460;
            if(v22721) {
              var v26393 = this.preComments;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v25874 = v26393[i$$12]
              }
              var v24885 = v25874.limLine;
              var v24886 = prevDocComment.minLine;
              var v22720 = v24885 == v24886;
              var v24889 = !v22720;
              if(v24889) {
                var v26650 = this.preComments;
                introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                  var v26394 = v26650[i$$12]
                }
                var v25875 = v26394.limLine;
                var v24887 = v25875 + 1;
                var v24888 = prevDocComment.minLine;
                v22720 = v24887 == v24888
              }
              v18460 = v22720
            }
            var v11924 = v18460;
            if(v11924) {
              var v18461 = this.preComments;
              introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
                var v11923 = v18461[i$$12]
              }
              JAMScript.call(docComments.push, docComments, [v11923]);
              i$$12 = i$$12 - 1;
              v11926 = i$$12 >= 0;
              continue
            }
          }
          break
        }
        var v27586 = docComments.reverse();
        this.docComments = v27586
      }
      return this.docComments
    }
    function getResolvedIdentifierName(name$$33) {
      var v11928 = !name$$33;
      if(v11928) {
        return""
      }
      var resolved = "";
      var start$$6 = 0;
      var i$$11 = 0;
      var v22722 = name$$33.length;
      var v18462 = v22722 - 6;
      var v11931 = i$$11 <= v18462;
      for(;v11931;) {
        var v22723 = name$$33.charAt(i$$11);
        var v18463 = v22723 == "\\";
        if(v18463) {
          var v24890 = i$$11 + 1;
          var v22724 = name$$33.charAt(v24890);
          v18463 = v22724 == "u"
        }
        var v11930 = v18463;
        if(v11930) {
          var v18464 = i$$11 + 2;
          var v11929 = name$$33.substr(v18464, 4);
          var charCode = parseInt(v11929, 16);
          var v22725 = i$$11 - start$$6;
          var v18465 = name$$33.substr(start$$6, v22725);
          resolved = resolved + v18465;
          var v18466 = String.fromCharCode(charCode);
          resolved = resolved + v18466;
          i$$11 = i$$11 + 6;
          start$$6 = i$$11;
          var v22726 = name$$33.length;
          var v18467 = v22726 - 6;
          v11931 = i$$11 <= v18467;
          continue
        }
        i$$11 = i$$11 + 1;
        var v22727 = name$$33.length;
        var v18468 = v22727 - 6;
        v11931 = i$$11 <= v18468
      }
      var v18469 = JAMScript.call(name$$33.substring, name$$33, [start$$6]);
      resolved = resolved + v18469;
      return resolved
    }
    function v92() {
      var v18470 = TypeScript$$4.NodeType;
      var v11932 = v18470._map;
      var v11933 = this.nodeType;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        return v11932[v11933]
      }
    }
    function v91(container, freeUses) {
      return
    }
    function v90(context$$7) {
      var v18471 = context$$7.walker;
      var v11934 = v18471.options;
      v11934.goChildren = false;
      JAMScript.call(context$$7.addContent, context$$7, [this]);
      return
    }
    function v89() {
      var v22728 = TypeScript$$4.nodeTypeTable;
      var v22729 = this.nodeType;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v18472 = v22728[v22729]
      }
      var v11939 = v18472 !== undefined;
      if(v11939) {
        var v11935 = TypeScript$$4.nodeTypeTable;
        var v11936 = this.nodeType;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          return v11935[v11936]
        }
      }else {
        var v18473 = TypeScript$$4.NodeType;
        var v11937 = v18473._map;
        var v11938 = this.nodeType;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          return v11937[v11938]
        }
      }
      return
    }
    function v88(context$$6) {
      JAMScript.call(context$$6.startLine, context$$6, []);
      var lineCol = {line:-1, col:-1};
      var limLineCol = {line:-1, col:-1};
      var v18474 = context$$6.parser;
      var v11945 = v18474 !== null;
      if(v11945) {
        var v11940 = context$$6.parser;
        var v11941 = this.minChar;
        JAMScript.call(v11940.getSourceLineCol, v11940, [lineCol, v11941]);
        var v11942 = context$$6.parser;
        var v11943 = this.limChar;
        JAMScript.call(v11942.getSourceLineCol, v11942, [limLineCol, v11943]);
        var v26877 = lineCol.line;
        var v26829 = "(" + v26877;
        var v26761 = v26829 + ",";
        var v26762 = lineCol.col;
        var v26651 = v26761 + v26762;
        var v26395 = v26651 + ")--";
        var v25876 = v26395 + "(";
        var v25877 = limLineCol.line;
        var v24891 = v25876 + v25877;
        var v22730 = v24891 + ",";
        var v22731 = limLineCol.col;
        var v18475 = v22730 + v22731;
        var v11944 = v18475 + "): ";
        JAMScript.call(context$$6.write, context$$6, [v11944])
      }
      var lab = JAMScript.call(this.printLabel, this, []);
      var v18476 = this.flags;
      var v22732 = TypeScript$$4.ASTFlags;
      var v18477 = v22732.Error;
      var v11946 = JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v18476, v18477]);
      if(v11946) {
        lab = lab + " (Error)"
      }
      JAMScript.call(context$$6.writeLine, context$$6, [lab]);
      return
    }
    function v87(emitter, tokenId, startLine) {
      JAMScript.call(emitter.emitParensAndCommentsInPlace, emitter, [this, true]);
      var v11948 = this.nodeType;
      switch(v11948) {
        case TypeScript$$4.NodeType.This:
          JAMScript.call(emitter.recordSourceMappingStart, emitter, [this]);
          var v18478 = emitter.thisFnc;
          if(v18478) {
            var v24892 = emitter.thisFnc;
            var v22733 = v24892.fncFlags;
            var v24893 = TypeScript$$4.FncFlags;
            var v22734 = v24893.IsFatArrowFunction;
            v18478 = JAMScript.call(TypeScript$$4.hasFlag, TypeScript$$4, [v22733, v22734])
          }
          var v11947 = v18478;
          if(v11947) {
            JAMScript.call(emitter.writeToOutput, emitter, ["_this"])
          }else {
            JAMScript.call(emitter.writeToOutput, emitter, ["this"])
          }
          JAMScript.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.Null:
          JAMScript.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAMScript.call(emitter.writeToOutput, emitter, ["null"]);
          JAMScript.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.False:
          JAMScript.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAMScript.call(emitter.writeToOutput, emitter, ["false"]);
          JAMScript.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.True:
          JAMScript.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAMScript.call(emitter.writeToOutput, emitter, ["true"]);
          JAMScript.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.Super:
          JAMScript.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAMScript.call(emitter.emitSuperReference, emitter, []);
          JAMScript.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.EndCode:
        ;
        case TypeScript$$4.NodeType.Error:
        ;
        case TypeScript$$4.NodeType.EmptyExpr:
          break;
        case TypeScript$$4.NodeType.Empty:
          JAMScript.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAMScript.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        case TypeScript$$4.NodeType.Void:
          JAMScript.call(emitter.recordSourceMappingStart, emitter, [this]);
          JAMScript.call(emitter.writeToOutput, emitter, ["void "]);
          JAMScript.call(emitter.recordSourceMappingEnd, emitter, [this]);
          break;
        default:
          throw new Error("please implement in derived class");
      }
      JAMScript.call(emitter.emitParensAndCommentsInPlace, emitter, [this, false]);
      return
    }
    function v86(typeFlow) {
      var v11949 = this.nodeType;
      switch(v11949) {
        case TypeScript$$4.NodeType.Error:
        ;
        case TypeScript$$4.NodeType.EmptyExpr:
          this.type = typeFlow.anyType;
          break;
        case TypeScript$$4.NodeType.This:
          return JAMScript.call(typeFlow.typeCheckThis, typeFlow, [this]);
        case TypeScript$$4.NodeType.Null:
          this.type = typeFlow.nullType;
          break;
        case TypeScript$$4.NodeType.False:
        ;
        case TypeScript$$4.NodeType.True:
          this.type = typeFlow.booleanType;
          break;
        case TypeScript$$4.NodeType.Super:
          return JAMScript.call(typeFlow.typeCheckSuper, typeFlow, [this]);
        case TypeScript$$4.NodeType.EndCode:
        ;
        case TypeScript$$4.NodeType.Empty:
        ;
        case TypeScript$$4.NodeType.Void:
          this.type = typeFlow.voidType;
          break;
        default:
          throw new Error("please implement in derived class");
      }
      return this
    }
    function v85() {
      return false
    }
    function v84() {
      var v11950 = JAMScript.call(this.isStatementOrExpression, this, []);
      if(v11950) {
        var v18479 = JAMScript.call(this.isCompoundStatement, this, []);
        v11950 = !v18479
      }
      return v11950
    }
    function v83() {
      return false
    }
    function v82() {
      return false
    }
    function v81() {
      return false
    }
    function AST$$1(nodeType) {
      JAMScript.call(_super.call, _super, [this]);
      this.nodeType = nodeType;
      this.type = null;
      var v11951 = TypeScript$$4.ASTFlags;
      this.flags = v11951.Writeable;
      var v11952 = TypeScript$$4.CompilerDiagnostics;
      this.passCreated = v11952.analysisPass;
      this.preComments = null;
      this.postComments = null;
      this.docComments = null;
      this.isParenthesized = false;
      return
    }
    JAMScript.call(__extends, null, [AST$$1, _super]);
    var v11953 = AST$$1.prototype;
    v11953.isExpression = v81;
    var v11954 = AST$$1.prototype;
    v11954.isStatementOrExpression = v82;
    var v11955 = AST$$1.prototype;
    v11955.isCompoundStatement = v83;
    var v11956 = AST$$1.prototype;
    v11956.isLeaf = v84;
    var v11957 = AST$$1.prototype;
    v11957.isDeclaration = v85;
    var v11958 = AST$$1.prototype;
    v11958.typeCheck = v86;
    var v11959 = AST$$1.prototype;
    v11959.emit = v87;
    var v11960 = AST$$1.prototype;
    v11960.print = v88;
    var v11961 = AST$$1.prototype;
    v11961.printLabel = v89;
    var v11962 = AST$$1.prototype;
    v11962.addToControlFlow = v90;
    var v11963 = AST$$1.prototype;
    v11963.netFreeUses = v91;
    var v11964 = AST$$1.prototype;
    v11964.treeViewLabel = v92;
    AST$$1.getResolvedIdentifierName = getResolvedIdentifierName;
    var v11965 = AST$$1.prototype;
    v11965.getDocComments = v93;
    return AST$$1
  }
  function v80() {
    function ASTSpan$$1() {
      this.minChar = -1;
      this.limChar = -1;
      return
    }
    return ASTSpan$$1
  }
  var ASTSpan = v80();
  TypeScript$$4.ASTSpan = ASTSpan;
  var AST = v94(ASTSpan);
  TypeScript$$4.AST = AST;
  var IncompleteAST = v95(AST);
  TypeScript$$4.IncompleteAST = IncompleteAST;
  var ASTList = v101(AST);
  TypeScript$$4.ASTList = ASTList;
  var Identifier = v109(AST);
  TypeScript$$4.Identifier = Identifier;
  var MissingIdentifier = v112(Identifier);
  TypeScript$$4.MissingIdentifier = MissingIdentifier;
  var Label = v116(AST);
  TypeScript$$4.Label = Label;
  var Expression = v119(AST);
  TypeScript$$4.Expression = Expression;
  var UnaryExpression = v123(Expression);
  TypeScript$$4.UnaryExpression = UnaryExpression;
  var CallExpression = v126(Expression);
  TypeScript$$4.CallExpression = CallExpression;
  var BinaryExpression = v129(Expression);
  TypeScript$$4.BinaryExpression = BinaryExpression;
  var ConditionalExpression = v132(Expression);
  TypeScript$$4.ConditionalExpression = ConditionalExpression;
  var NumberLiteral = v137(Expression);
  TypeScript$$4.NumberLiteral = NumberLiteral;
  var RegexLiteral = v140(Expression);
  TypeScript$$4.RegexLiteral = RegexLiteral;
  var StringLiteral = v145(Expression);
  TypeScript$$4.StringLiteral = StringLiteral;
  var ModuleElement = v146(AST);
  TypeScript$$4.ModuleElement = ModuleElement;
  var ImportDeclaration = v153(ModuleElement);
  TypeScript$$4.ImportDeclaration = ImportDeclaration;
  var BoundDecl = v161(AST);
  TypeScript$$4.BoundDecl = BoundDecl;
  var VarDecl = v167(BoundDecl);
  TypeScript$$4.VarDecl = VarDecl;
  var ArgDecl = v171(BoundDecl);
  TypeScript$$4.ArgDecl = ArgDecl;
  var internalId = 0;
  var FuncDecl = v201(AST);
  TypeScript$$4.FuncDecl = FuncDecl;
  var LocationInfo = v202();
  TypeScript$$4.LocationInfo = LocationInfo;
  var v27587 = JAMScript.new(LocationInfo, ["unknown", null, -1]);
  TypeScript$$4.unknownLocationInfo = v27587;
  var Script = v210(FuncDecl);
  TypeScript$$4.Script = Script;
  var NamedDeclaration = v212(ModuleElement);
  TypeScript$$4.NamedDeclaration = NamedDeclaration;
  var ModuleDeclaration = v219(NamedDeclaration);
  TypeScript$$4.ModuleDeclaration = ModuleDeclaration;
  var TypeDeclaration = v222(NamedDeclaration);
  TypeScript$$4.TypeDeclaration = TypeDeclaration;
  var ClassDeclaration = v225(TypeDeclaration);
  TypeScript$$4.ClassDeclaration = ClassDeclaration;
  var InterfaceDeclaration = v228(TypeDeclaration);
  TypeScript$$4.InterfaceDeclaration = InterfaceDeclaration;
  var Statement = v233(ModuleElement);
  TypeScript$$4.Statement = Statement;
  var LabeledStatement = v237(Statement);
  TypeScript$$4.LabeledStatement = LabeledStatement;
  var Block = v241(Statement);
  TypeScript$$4.Block = Block;
  var Jump = v246(Statement);
  TypeScript$$4.Jump = Jump;
  var WhileStatement = v251(Statement);
  TypeScript$$4.WhileStatement = WhileStatement;
  var DoWhileStatement = v256(Statement);
  TypeScript$$4.DoWhileStatement = DoWhileStatement;
  var IfStatement = v261(Statement);
  TypeScript$$4.IfStatement = IfStatement;
  var ReturnStatement = v265(Statement);
  TypeScript$$4.ReturnStatement = ReturnStatement;
  var EndCode = v266(AST);
  TypeScript$$4.EndCode = EndCode;
  var ForInStatement = v272(Statement);
  TypeScript$$4.ForInStatement = ForInStatement;
  var ForStatement = v277(Statement);
  TypeScript$$4.ForStatement = ForStatement;
  var WithStatement = v281(Statement);
  TypeScript$$4.WithStatement = WithStatement;
  var SwitchStatement = v286(Statement);
  TypeScript$$4.SwitchStatement = SwitchStatement;
  var CaseStatement = v290(Statement);
  TypeScript$$4.CaseStatement = CaseStatement;
  var TypeReference = v293(AST);
  TypeScript$$4.TypeReference = TypeReference;
  var TryFinally = v298(Statement);
  TypeScript$$4.TryFinally = TryFinally;
  var TryCatch = v303(Statement);
  TypeScript$$4.TryCatch = TryCatch;
  var Try = v307(Statement);
  TypeScript$$4.Try = Try;
  var Catch = v311(Statement);
  TypeScript$$4.Catch = Catch;
  var Finally = v315(Statement);
  TypeScript$$4.Finally = Finally;
  var Comment$$1 = v319(AST);
  TypeScript$$4.Comment = Comment$$1;
  var DebuggerStatement = v321(Statement);
  TypeScript$$4.DebuggerStatement = DebuggerStatement;
  return
}
function v79(d, b) {
  function __() {
    this.constructor = d;
    return
  }
  __.prototype = b.prototype;
  var v27588 = new __;
  d.prototype = v27588;
  return
}
function v78(TypeScript$$3) {
  function v77() {
    function v76(key$$26, data$$32) {
      var lookupData = JAMScript.call(this.lookup, this, [key$$26]);
      if(lookupData) {
        return false
      }
      var v11966 = this.keys;
      var v18480 = this.keys;
      var v11967 = v18480.length;
      JAMScript.set(v11966, v11967, key$$26);
      var v11968 = this.values;
      var v18481 = this.values;
      var v11969 = v18481.length;
      JAMScript.set(v11968, v11969, data$$32);
      return true
    }
    function v75(key$$25, findValue) {
      var searchArray = this.keys;
      if(findValue) {
        searchArray = this.values
      }
      var i$$10 = 0;
      var v18482 = searchArray.length;
      var v11973 = i$$10 < v18482;
      for(;v11973;) {
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v18483 = searchArray[i$$10]
        }
        var v11972 = v18483 == key$$25;
        if(v11972) {
          var v18484 = this.keys;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v11970 = v18484[i$$10]
          }
          var v18485 = this.values;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v11971 = v18485[i$$10]
          }
          return{key:v11970, data:v11971}
        }
        i$$10 = i$$10 + 1;
        var v18486 = searchArray.length;
        v11973 = i$$10 < v18486
      }
      return null
    }
    function SimpleHashTable$$1() {
      this.keys = [];
      this.values = [];
      return
    }
    var v11974 = SimpleHashTable$$1.prototype;
    v11974.lookup = v75;
    var v11975 = SimpleHashTable$$1.prototype;
    v11975.add = v76;
    return SimpleHashTable$$1
  }
  function v74() {
    function v73(key$$24) {
      var current$$2;
      var val$$3 = JAMScript.call(this.hashFn, this, [key$$24]);
      var v11976 = this.size;
      val$$3 = val$$3 % v11976;
      var v11977 = this.table;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        current$$2 = v11977[val$$3]
      }
      var v11979 = current$$2 != null;
      for(;v11979;) {
        var v18487 = current$$2.key;
        var v11978 = JAMScript.call(this.equalsFn, this, [key$$24, v18487]);
        if(v11978) {
          return current$$2.data
        }
        current$$2 = current$$2.next;
        v11979 = current$$2 != null
      }
      return null
    }
    function v72() {
      return this.itemCount
    }
    function v71(key$$23) {
      var current$$1;
      var val$$2 = JAMScript.call(this.hashFn, this, [key$$23]);
      var v11980 = this.size;
      val$$2 = val$$2 % v11980;
      var result$$3 = null;
      var prevEntry = null;
      var v11981 = this.table;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        current$$1 = v11981[val$$2]
      }
      var v11984 = current$$1 != null;
      for(;v11984;) {
        var v18488 = current$$1.key;
        var v11983 = JAMScript.call(this.equalsFn, this, [key$$23, v18488]);
        if(v11983) {
          result$$3 = current$$1.data;
          var v18489 = this.itemCount;
          this.itemCount = v18489 - 1;
          if(prevEntry) {
            prevEntry.next = current$$1.next
          }else {
            var v11982 = this.table;
            JAMScript.set(v11982, val$$2, current$$1.next)
          }
          break
        }
        prevEntry = current$$1;
        current$$1 = current$$1.next;
        v11984 = current$$1 != null
      }
      return result$$3
    }
    function v70(key$$22, data$$31) {
      var current;
      var entry = JAMScript.new(HashEntry, [key$$22, data$$31]);
      var val$$1 = JAMScript.call(this.hashFn, this, [key$$22]);
      var v11985 = this.size;
      val$$1 = val$$1 % v11985;
      var v11986 = this.table;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        current = v11986[val$$1]
      }
      var v11988 = current != null;
      for(;v11988;) {
        var v18490 = current.key;
        var v11987 = JAMScript.call(this.equalsFn, this, [key$$22, v18490]);
        if(v11987) {
          return false
        }
        current = current.next;
        v11988 = current != null
      }
      var v11989 = this.table;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        entry.next = v11989[val$$1]
      }
      var v11990 = this.table;
      JAMScript.set(v11990, val$$1, entry);
      var v18491 = this.itemCount;
      this.itemCount = v18491 + 1;
      return true
    }
    function HashTable$$1(size$$4, hashFn, equalsFn) {
      this.size = size$$4;
      this.hashFn = hashFn;
      this.equalsFn = equalsFn;
      this.itemCount = 0;
      var v27589 = new Array;
      this.table = v27589;
      var i$$9 = 0;
      var v18492 = this.size;
      var v11992 = i$$9 < v18492;
      for(;v11992;) {
        var v11991 = this.table;
        v11991[i$$9] = null;
        i$$9 = i$$9 + 1;
        var v18493 = this.size;
        v11992 = i$$9 < v18493
      }
      return
    }
    var v11993 = HashTable$$1.prototype;
    v11993.add = v70;
    var v11994 = HashTable$$1.prototype;
    v11994.remove = v71;
    var v11995 = HashTable$$1.prototype;
    v11995.count = v72;
    var v11996 = HashTable$$1.prototype;
    v11996.lookup = v73;
    return HashTable$$1
  }
  function v69() {
    function HashEntry$$1(key$$21, data$$30) {
      this.key = key$$21;
      this.data = data$$30;
      return
    }
    return HashEntry$$1
  }
  function v68() {
    function v67(key$$20) {
      var v11997 = this.primaryTable;
      var data$$29 = JAMScript.call(v11997.lookup, v11997, [key$$20]);
      var v11999 = data$$29 != undefined;
      if(v11999) {
        return data$$29
      }else {
        var v11998 = this.secondaryTable;
        return JAMScript.call(v11998.lookup, v11998, [key$$20])
      }
      return
    }
    function v66() {
      var v18494 = this.primaryTable;
      var v12000 = JAMScript.call(v18494.count, v18494, []);
      var v18495 = this.secondaryTable;
      var v12001 = JAMScript.call(v18495.count, v18495, []);
      return v12000 + v12001
    }
    function v65(fn$$5, context$$5) {
      var v18496 = this.primaryTable;
      var v12002 = JAMScript.call(v18496.some, v18496, [fn$$5, context$$5]);
      var v18498 = !v12002;
      if(v18498) {
        var v18497 = this.secondaryTable;
        v12002 = JAMScript.call(v18497.some, v18497, [fn$$5, context$$5])
      }
      return v12002
    }
    function v64(fn$$4, context$$4) {
      var v18499 = this.primaryTable;
      var v12003 = JAMScript.call(v18499.every, v18499, [fn$$4, context$$4]);
      if(v12003) {
        var v18500 = this.secondaryTable;
        v12003 = JAMScript.call(v18500.every, v18500, [fn$$4, context$$4])
      }
      return v12003
    }
    function v63(fn$$3, context$$3) {
      var v12004 = this.primaryTable;
      JAMScript.call(v12004.map, v12004, [fn$$3, context$$3]);
      var v12005 = this.secondaryTable;
      JAMScript.call(v12005.map, v12005, [fn$$3, context$$3]);
      return
    }
    function v62(key$$19, data$$28) {
      var v12008 = this.insertPrimary;
      if(v12008) {
        var v12006 = this.primaryTable;
        return JAMScript.call(v12006.addOrUpdate, v12006, [key$$19, data$$28])
      }else {
        var v12007 = this.secondaryTable;
        return JAMScript.call(v12007.addOrUpdate, v12007, [key$$19, data$$28])
      }
      return
    }
    function v61(key$$18, data$$27) {
      var v12011 = this.insertPrimary;
      if(v12011) {
        var v12009 = this.primaryTable;
        return JAMScript.call(v12009.add, v12009, [key$$18, data$$27])
      }else {
        var v12010 = this.secondaryTable;
        return JAMScript.call(v12010.add, v12010, [key$$18, data$$27])
      }
      return
    }
    function v60() {
      var v18501 = this.primaryTable;
      var v12012 = JAMScript.call(v18501.getAllKeys, v18501, []);
      var v18502 = this.secondaryTable;
      var v12013 = JAMScript.call(v18502.getAllKeys, v18502, []);
      return v12012.concat(v12013)
    }
    function DualStringHashTable$$1(primaryTable, secondaryTable) {
      this.primaryTable = primaryTable;
      this.secondaryTable = secondaryTable;
      this.insertPrimary = true;
      return
    }
    var v12014 = DualStringHashTable$$1.prototype;
    v12014.getAllKeys = v60;
    var v12015 = DualStringHashTable$$1.prototype;
    v12015.add = v61;
    var v12016 = DualStringHashTable$$1.prototype;
    v12016.addOrUpdate = v62;
    var v12017 = DualStringHashTable$$1.prototype;
    v12017.map = v63;
    var v12018 = DualStringHashTable$$1.prototype;
    v12018.every = v64;
    var v12019 = DualStringHashTable$$1.prototype;
    v12019.some = v65;
    var v12020 = DualStringHashTable$$1.prototype;
    v12020.count = v66;
    var v12021 = DualStringHashTable$$1.prototype;
    v12021.lookup = v67;
    return DualStringHashTable$$1
  }
  function v59() {
    function v58(key$$17) {
      var v12022 = this.table;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var data$$26 = v12022[key$$17]
      }
      var v12023 = data$$26 != undefined;
      if(v12023) {
        return data$$26
      }else {
        return null
      }
      return
    }
    function v57() {
      return this.itemCount
    }
    function v56(fn$$2, context$$2) {
      var k$$4;
      var v12027 = this.table;
      for(k$$4 in v12027) {
        var v12024 = this.table;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var data$$25 = v12024[k$$4]
        }
        var v12026 = data$$25 != undefined;
        if(v12026) {
          var v22735 = this.table;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v18503 = v22735[k$$4]
          }
          var v12025 = JAMScript.call(fn$$2, null, [k$$4, v18503, context$$2]);
          if(v12025) {
            return true
          }
        }
      }
      return false
    }
    function v55(fn$$1, context$$1) {
      var k$$3;
      var v12031 = this.table;
      for(k$$3 in v12031) {
        var v12028 = this.table;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var data$$24 = v12028[k$$3]
        }
        var v12030 = data$$24 != undefined;
        if(v12030) {
          var v24894 = this.table;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v22736 = v24894[k$$3]
          }
          var v18504 = JAMScript.call(fn$$1, null, [k$$3, v22736, context$$1]);
          var v12029 = !v18504;
          if(v12029) {
            return false
          }
        }
      }
      return true
    }
    function v54(fn, context) {
      var k$$2;
      var v12035 = this.table;
      for(k$$2 in v12035) {
        var v12032 = this.table;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var data$$23 = v12032[k$$2]
        }
        var v12034 = data$$23 != undefined;
        if(v12034) {
          var v18505 = this.table;
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v12033 = v18505[k$$2]
          }
          JAMScript.call(fn, null, [k$$2, v12033, context])
        }
      }
      return
    }
    function v53(key$$16, data$$22) {
      var v22737 = this.table;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v18506 = v22737[key$$16]
      }
      var v12037 = v18506 != undefined;
      if(v12037) {
        var v12036 = this.table;
        JAMScript.set(v12036, key$$16, data$$22);
        return false
      }
      var v12038 = this.table;
      JAMScript.set(v12038, key$$16, data$$22);
      var v18507 = this.itemCount;
      this.itemCount = v18507 + 1;
      return true
    }
    function v52(key$$15, data$$21) {
      var v22738 = this.table;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v18508 = v22738[key$$15]
      }
      var v12039 = v18508 != undefined;
      if(v12039) {
        return false
      }
      var v12040 = this.table;
      JAMScript.set(v12040, key$$15, data$$21);
      var v18509 = this.itemCount;
      this.itemCount = v18509 + 1;
      return true
    }
    function v51() {
      var result$$2 = [];
      var k$$1;
      var v12043 = this.table;
      for(k$$1 in v12043) {
        var v22739 = this.table;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v18510 = v22739[k$$1]
        }
        var v12042 = v18510 != undefined;
        if(v12042) {
          var v12041 = result$$2.length;
          result$$2[v12041] = k$$1
        }
      }
      return result$$2
    }
    function StringHashTable$$1() {
      this.itemCount = 0;
      var v27590 = JAMScript.new(BlockIntrinsics, []);
      this.table = v27590;
      return
    }
    var v12044 = StringHashTable$$1.prototype;
    v12044.getAllKeys = v51;
    var v12045 = StringHashTable$$1.prototype;
    v12045.add = v52;
    var v12046 = StringHashTable$$1.prototype;
    v12046.addOrUpdate = v53;
    var v12047 = StringHashTable$$1.prototype;
    v12047.map = v54;
    var v12048 = StringHashTable$$1.prototype;
    v12048.every = v55;
    var v12049 = StringHashTable$$1.prototype;
    v12049.some = v56;
    var v12050 = StringHashTable$$1.prototype;
    v12050.count = v57;
    var v12051 = StringHashTable$$1.prototype;
    v12051.lookup = v58;
    return StringHashTable$$1
  }
  function v50() {
    function BlockIntrinsics$$1() {
      this.prototype = undefined;
      this.toString = undefined;
      this.toLocaleString = undefined;
      this.valueOf = undefined;
      this.hasOwnProperty = undefined;
      this.propertyIsEnumerable = undefined;
      this.isPrototypeOf = undefined;
      this["constructor"] = undefined;
      return
    }
    return BlockIntrinsics$$1
  }
  function numberHashFn(key$$14) {
    var c2 = 668265261;
    var v12052 = key$$14 ^ 61;
    var v12053 = key$$14 >>> 16;
    key$$14 = v12052 ^ v12053;
    var v12054 = key$$14 << 3;
    key$$14 = key$$14 + v12054;
    var v12055 = key$$14 >>> 4;
    key$$14 = key$$14 ^ v12055;
    key$$14 = key$$14 * c2;
    var v12056 = key$$14 >>> 15;
    key$$14 = key$$14 ^ v12056;
    return key$$14
  }
  function combineHashes(key1, key2) {
    var v18511 = key1 >> 5;
    var v12057 = v18511 + key1;
    return key2 ^ v12057
  }
  var BlockIntrinsics = v50();
  TypeScript$$3.BlockIntrinsics = BlockIntrinsics;
  var StringHashTable = v59();
  TypeScript$$3.StringHashTable = StringHashTable;
  var DualStringHashTable = v68();
  TypeScript$$3.DualStringHashTable = DualStringHashTable;
  TypeScript$$3.numberHashFn = numberHashFn;
  TypeScript$$3.combineHashes = combineHashes;
  var HashEntry = v69();
  TypeScript$$3.HashEntry = HashEntry;
  var HashTable = v74();
  TypeScript$$3.HashTable = HashTable;
  var SimpleHashTable = v77();
  TypeScript$$3.SimpleHashTable = SimpleHashTable;
  return
}
function v49(TypeScript$$2) {
  var v12058 = TypeScript$$2.NodeType;
  var v18512 = !v12058;
  if(v18512) {
    v12058 = TypeScript$$2.NodeType = {}
  }
  var NodeType$$inline_0 = v12058;
  NodeType$$inline_0._map = [];
  var v12059 = NodeType$$inline_0._map;
  v12059[0] = "None";
  NodeType$$inline_0.None = 0;
  var v12060 = NodeType$$inline_0._map;
  v12060[1] = "Empty";
  NodeType$$inline_0.Empty = 1;
  var v12061 = NodeType$$inline_0._map;
  v12061[2] = "EmptyExpr";
  NodeType$$inline_0.EmptyExpr = 2;
  var v12062 = NodeType$$inline_0._map;
  v12062[3] = "True";
  NodeType$$inline_0.True = 3;
  var v12063 = NodeType$$inline_0._map;
  v12063[4] = "False";
  NodeType$$inline_0.False = 4;
  var v12064 = NodeType$$inline_0._map;
  v12064[5] = "This";
  NodeType$$inline_0.This = 5;
  var v12065 = NodeType$$inline_0._map;
  v12065[6] = "Super";
  NodeType$$inline_0.Super = 6;
  var v12066 = NodeType$$inline_0._map;
  v12066[7] = "QString";
  NodeType$$inline_0.QString = 7;
  var v12067 = NodeType$$inline_0._map;
  v12067[8] = "Regex";
  NodeType$$inline_0.Regex = 8;
  var v12068 = NodeType$$inline_0._map;
  v12068[9] = "Null";
  NodeType$$inline_0.Null = 9;
  var v12069 = NodeType$$inline_0._map;
  v12069[10] = "ArrayLit";
  NodeType$$inline_0.ArrayLit = 10;
  var v12070 = NodeType$$inline_0._map;
  v12070[11] = "ObjectLit";
  NodeType$$inline_0.ObjectLit = 11;
  var v12071 = NodeType$$inline_0._map;
  v12071[12] = "Void";
  NodeType$$inline_0.Void = 12;
  var v12072 = NodeType$$inline_0._map;
  v12072[13] = "Comma";
  NodeType$$inline_0.Comma = 13;
  var v12073 = NodeType$$inline_0._map;
  v12073[14] = "Pos";
  NodeType$$inline_0.Pos = 14;
  var v12074 = NodeType$$inline_0._map;
  v12074[15] = "Neg";
  NodeType$$inline_0.Neg = 15;
  var v12075 = NodeType$$inline_0._map;
  v12075[16] = "Delete";
  NodeType$$inline_0.Delete = 16;
  var v12076 = NodeType$$inline_0._map;
  v12076[17] = "Await";
  NodeType$$inline_0.Await = 17;
  var v12077 = NodeType$$inline_0._map;
  v12077[18] = "In";
  NodeType$$inline_0.In = 18;
  var v12078 = NodeType$$inline_0._map;
  v12078[19] = "Dot";
  NodeType$$inline_0.Dot = 19;
  var v12079 = NodeType$$inline_0._map;
  v12079[20] = "From";
  NodeType$$inline_0.From = 20;
  var v12080 = NodeType$$inline_0._map;
  v12080[21] = "Is";
  NodeType$$inline_0.Is = 21;
  var v12081 = NodeType$$inline_0._map;
  v12081[22] = "InstOf";
  NodeType$$inline_0.InstOf = 22;
  var v12082 = NodeType$$inline_0._map;
  v12082[23] = "Typeof";
  NodeType$$inline_0.Typeof = 23;
  var v12083 = NodeType$$inline_0._map;
  v12083[24] = "NumberLit";
  NodeType$$inline_0.NumberLit = 24;
  var v12084 = NodeType$$inline_0._map;
  v12084[25] = "Name";
  NodeType$$inline_0.Name = 25;
  var v12085 = NodeType$$inline_0._map;
  v12085[26] = "TypeRef";
  NodeType$$inline_0.TypeRef = 26;
  var v12086 = NodeType$$inline_0._map;
  v12086[27] = "Index";
  NodeType$$inline_0.Index = 27;
  var v12087 = NodeType$$inline_0._map;
  v12087[28] = "Call";
  NodeType$$inline_0.Call = 28;
  var v12088 = NodeType$$inline_0._map;
  v12088[29] = "New";
  NodeType$$inline_0.New = 29;
  var v12089 = NodeType$$inline_0._map;
  v12089[30] = "Asg";
  NodeType$$inline_0.Asg = 30;
  var v12090 = NodeType$$inline_0._map;
  v12090[31] = "AsgAdd";
  NodeType$$inline_0.AsgAdd = 31;
  var v12091 = NodeType$$inline_0._map;
  v12091[32] = "AsgSub";
  NodeType$$inline_0.AsgSub = 32;
  var v12092 = NodeType$$inline_0._map;
  v12092[33] = "AsgDiv";
  NodeType$$inline_0.AsgDiv = 33;
  var v12093 = NodeType$$inline_0._map;
  v12093[34] = "AsgMul";
  NodeType$$inline_0.AsgMul = 34;
  var v12094 = NodeType$$inline_0._map;
  v12094[35] = "AsgMod";
  NodeType$$inline_0.AsgMod = 35;
  var v12095 = NodeType$$inline_0._map;
  v12095[36] = "AsgAnd";
  NodeType$$inline_0.AsgAnd = 36;
  var v12096 = NodeType$$inline_0._map;
  v12096[37] = "AsgXor";
  NodeType$$inline_0.AsgXor = 37;
  var v12097 = NodeType$$inline_0._map;
  v12097[38] = "AsgOr";
  NodeType$$inline_0.AsgOr = 38;
  var v12098 = NodeType$$inline_0._map;
  v12098[39] = "AsgLsh";
  NodeType$$inline_0.AsgLsh = 39;
  var v12099 = NodeType$$inline_0._map;
  v12099[40] = "AsgRsh";
  NodeType$$inline_0.AsgRsh = 40;
  var v12100 = NodeType$$inline_0._map;
  v12100[41] = "AsgRs2";
  NodeType$$inline_0.AsgRs2 = 41;
  var v12101 = NodeType$$inline_0._map;
  v12101[42] = "ConditionalExpression";
  NodeType$$inline_0.ConditionalExpression = 42;
  var v12102 = NodeType$$inline_0._map;
  v12102[43] = "LogOr";
  NodeType$$inline_0.LogOr = 43;
  var v12103 = NodeType$$inline_0._map;
  v12103[44] = "LogAnd";
  NodeType$$inline_0.LogAnd = 44;
  var v12104 = NodeType$$inline_0._map;
  v12104[45] = "Or";
  NodeType$$inline_0.Or = 45;
  var v12105 = NodeType$$inline_0._map;
  v12105[46] = "Xor";
  NodeType$$inline_0.Xor = 46;
  var v12106 = NodeType$$inline_0._map;
  v12106[47] = "And";
  NodeType$$inline_0.And = 47;
  var v12107 = NodeType$$inline_0._map;
  v12107[48] = "Eq";
  NodeType$$inline_0.Eq = 48;
  var v12108 = NodeType$$inline_0._map;
  v12108[49] = "Ne";
  NodeType$$inline_0.Ne = 49;
  var v12109 = NodeType$$inline_0._map;
  v12109[50] = "Eqv";
  NodeType$$inline_0.Eqv = 50;
  var v12110 = NodeType$$inline_0._map;
  v12110[51] = "NEqv";
  NodeType$$inline_0.NEqv = 51;
  var v12111 = NodeType$$inline_0._map;
  v12111[52] = "Lt";
  NodeType$$inline_0.Lt = 52;
  var v12112 = NodeType$$inline_0._map;
  v12112[53] = "Le";
  NodeType$$inline_0.Le = 53;
  var v12113 = NodeType$$inline_0._map;
  v12113[54] = "Gt";
  NodeType$$inline_0.Gt = 54;
  var v12114 = NodeType$$inline_0._map;
  v12114[55] = "Ge";
  NodeType$$inline_0.Ge = 55;
  var v12115 = NodeType$$inline_0._map;
  v12115[56] = "Add";
  NodeType$$inline_0.Add = 56;
  var v12116 = NodeType$$inline_0._map;
  v12116[57] = "Sub";
  NodeType$$inline_0.Sub = 57;
  var v12117 = NodeType$$inline_0._map;
  v12117[58] = "Mul";
  NodeType$$inline_0.Mul = 58;
  var v12118 = NodeType$$inline_0._map;
  v12118[59] = "Div";
  NodeType$$inline_0.Div = 59;
  var v12119 = NodeType$$inline_0._map;
  v12119[60] = "Mod";
  NodeType$$inline_0.Mod = 60;
  var v12120 = NodeType$$inline_0._map;
  v12120[61] = "Lsh";
  NodeType$$inline_0.Lsh = 61;
  var v12121 = NodeType$$inline_0._map;
  v12121[62] = "Rsh";
  NodeType$$inline_0.Rsh = 62;
  var v12122 = NodeType$$inline_0._map;
  v12122[63] = "Rs2";
  NodeType$$inline_0.Rs2 = 63;
  var v12123 = NodeType$$inline_0._map;
  v12123[64] = "Not";
  NodeType$$inline_0.Not = 64;
  var v12124 = NodeType$$inline_0._map;
  v12124[65] = "LogNot";
  NodeType$$inline_0.LogNot = 65;
  var v12125 = NodeType$$inline_0._map;
  v12125[66] = "IncPre";
  NodeType$$inline_0.IncPre = 66;
  var v12126 = NodeType$$inline_0._map;
  v12126[67] = "DecPre";
  NodeType$$inline_0.DecPre = 67;
  var v12127 = NodeType$$inline_0._map;
  v12127[68] = "IncPost";
  NodeType$$inline_0.IncPost = 68;
  var v12128 = NodeType$$inline_0._map;
  v12128[69] = "DecPost";
  NodeType$$inline_0.DecPost = 69;
  var v12129 = NodeType$$inline_0._map;
  v12129[70] = "TypeAssertion";
  NodeType$$inline_0.TypeAssertion = 70;
  var v12130 = NodeType$$inline_0._map;
  v12130[71] = "FuncDecl";
  NodeType$$inline_0.FuncDecl = 71;
  var v12131 = NodeType$$inline_0._map;
  v12131[72] = "Member";
  NodeType$$inline_0.Member = 72;
  var v12132 = NodeType$$inline_0._map;
  v12132[73] = "VarDecl";
  NodeType$$inline_0.VarDecl = 73;
  var v12133 = NodeType$$inline_0._map;
  v12133[74] = "ArgDecl";
  NodeType$$inline_0.ArgDecl = 74;
  var v12134 = NodeType$$inline_0._map;
  v12134[75] = "Return";
  NodeType$$inline_0.Return = 75;
  var v12135 = NodeType$$inline_0._map;
  v12135[76] = "Break";
  NodeType$$inline_0.Break = 76;
  var v12136 = NodeType$$inline_0._map;
  v12136[77] = "Continue";
  NodeType$$inline_0.Continue = 77;
  var v12137 = NodeType$$inline_0._map;
  v12137[78] = "Throw";
  NodeType$$inline_0.Throw = 78;
  var v12138 = NodeType$$inline_0._map;
  v12138[79] = "For";
  NodeType$$inline_0.For = 79;
  var v12139 = NodeType$$inline_0._map;
  v12139[80] = "ForIn";
  NodeType$$inline_0.ForIn = 80;
  var v12140 = NodeType$$inline_0._map;
  v12140[81] = "If";
  NodeType$$inline_0.If = 81;
  var v12141 = NodeType$$inline_0._map;
  v12141[82] = "While";
  NodeType$$inline_0.While = 82;
  var v12142 = NodeType$$inline_0._map;
  v12142[83] = "DoWhile";
  NodeType$$inline_0.DoWhile = 83;
  var v12143 = NodeType$$inline_0._map;
  v12143[84] = "Block";
  NodeType$$inline_0.Block = 84;
  var v12144 = NodeType$$inline_0._map;
  v12144[85] = "Case";
  NodeType$$inline_0.Case = 85;
  var v12145 = NodeType$$inline_0._map;
  v12145[86] = "Switch";
  NodeType$$inline_0.Switch = 86;
  var v12146 = NodeType$$inline_0._map;
  v12146[87] = "Try";
  NodeType$$inline_0.Try = 87;
  var v12147 = NodeType$$inline_0._map;
  v12147[88] = "TryCatch";
  NodeType$$inline_0.TryCatch = 88;
  var v12148 = NodeType$$inline_0._map;
  v12148[89] = "TryFinally";
  NodeType$$inline_0.TryFinally = 89;
  var v12149 = NodeType$$inline_0._map;
  v12149[90] = "Finally";
  NodeType$$inline_0.Finally = 90;
  var v12150 = NodeType$$inline_0._map;
  v12150[91] = "Catch";
  NodeType$$inline_0.Catch = 91;
  var v12151 = NodeType$$inline_0._map;
  v12151[92] = "List";
  NodeType$$inline_0.List = 92;
  var v12152 = NodeType$$inline_0._map;
  v12152[93] = "Script";
  NodeType$$inline_0.Script = 93;
  var v12153 = NodeType$$inline_0._map;
  v12153[94] = "ClassDeclaration";
  NodeType$$inline_0.ClassDeclaration = 94;
  var v12154 = NodeType$$inline_0._map;
  v12154[95] = "InterfaceDeclaration";
  NodeType$$inline_0.InterfaceDeclaration = 95;
  var v12155 = NodeType$$inline_0._map;
  v12155[96] = "ModuleDeclaration";
  NodeType$$inline_0.ModuleDeclaration = 96;
  var v12156 = NodeType$$inline_0._map;
  v12156[97] = "ImportDeclaration";
  NodeType$$inline_0.ImportDeclaration = 97;
  var v12157 = NodeType$$inline_0._map;
  v12157[98] = "With";
  NodeType$$inline_0.With = 98;
  var v12158 = NodeType$$inline_0._map;
  v12158[99] = "Label";
  NodeType$$inline_0.Label = 99;
  var v12159 = NodeType$$inline_0._map;
  v12159[100] = "LabeledStatement";
  NodeType$$inline_0.LabeledStatement = 100;
  var v12160 = NodeType$$inline_0._map;
  v12160[101] = "EBStart";
  NodeType$$inline_0.EBStart = 101;
  var v12161 = NodeType$$inline_0._map;
  v12161[102] = "GotoEB";
  NodeType$$inline_0.GotoEB = 102;
  var v12162 = NodeType$$inline_0._map;
  v12162[103] = "EndCode";
  NodeType$$inline_0.EndCode = 103;
  var v12163 = NodeType$$inline_0._map;
  v12163[104] = "Error";
  NodeType$$inline_0.Error = 104;
  var v12164 = NodeType$$inline_0._map;
  v12164[105] = "Comment";
  NodeType$$inline_0.Comment = 105;
  var v12165 = NodeType$$inline_0._map;
  v12165[106] = "Debugger";
  NodeType$$inline_0.Debugger = 106;
  var v12166 = NodeType$$inline_0;
  v12166.GeneralNode = NodeType$$inline_0.FuncDecl;
  var v12167 = NodeType$$inline_0;
  v12167.LastAsg = NodeType$$inline_0.AsgRs2;
  var NodeType = TypeScript$$2.NodeType;
  return
}
function v48(TypeScript$$1) {
  function v47(ModuleGenTarget$$1) {
    ModuleGenTarget$$1._map = [];
    ModuleGenTarget$$1.Synchronous = 0;
    ModuleGenTarget$$1.Asynchronous = 1;
    ModuleGenTarget$$1.Local = 1 << 1;
    return
  }
  function v46(CodeGenTarget$$1) {
    CodeGenTarget$$1._map = [];
    CodeGenTarget$$1.ES3 = 0;
    CodeGenTarget$$1.ES5 = 1;
    return
  }
  function v45(TypeRelationshipFlags$$1) {
    TypeRelationshipFlags$$1._map = [];
    TypeRelationshipFlags$$1.SuccessfulComparison = 0;
    TypeRelationshipFlags$$1.SourceIsNullTargetIsVoidOrUndefined = 1;
    TypeRelationshipFlags$$1.RequiredPropertyIsMissing = 1 << 1;
    TypeRelationshipFlags$$1.IncompatibleSignatures = 1 << 2;
    TypeRelationshipFlags$$1.SourceSignatureHasTooManyParameters = 3;
    TypeRelationshipFlags$$1.IncompatibleReturnTypes = 1 << 4;
    TypeRelationshipFlags$$1.IncompatiblePropertyTypes = 1 << 5;
    TypeRelationshipFlags$$1.IncompatibleParameterTypes = 1 << 6;
    return
  }
  function v44(TypeFlags$$1) {
    TypeFlags$$1._map = [];
    TypeFlags$$1.None = 0;
    TypeFlags$$1.HasImplementation = 1;
    TypeFlags$$1.HasSelfReference = 1 << 1;
    TypeFlags$$1.MergeResult = 1 << 2;
    TypeFlags$$1.IsEnum = 1 << 3;
    TypeFlags$$1.BuildingName = 1 << 4;
    TypeFlags$$1.HasBaseType = 1 << 5;
    TypeFlags$$1.HasBaseTypeOfObject = 1 << 6;
    TypeFlags$$1.IsClass = 1 << 7;
    return
  }
  function v43(SignatureFlags$$1) {
    SignatureFlags$$1._map = [];
    SignatureFlags$$1.None = 0;
    SignatureFlags$$1.IsIndexer = 1;
    SignatureFlags$$1.IsStringIndexer = 1 << 1;
    SignatureFlags$$1.IsNumberIndexer = 1 << 2;
    return
  }
  function v42(FncFlags$$1) {
    FncFlags$$1._map = [];
    FncFlags$$1.None = 0;
    FncFlags$$1.Exported = 1;
    FncFlags$$1.Private = 1 << 1;
    FncFlags$$1.Public = 1 << 2;
    FncFlags$$1.Ambient = 1 << 3;
    FncFlags$$1.Static = 1 << 4;
    FncFlags$$1.LocalStatic = 1 << 5;
    FncFlags$$1.GetAccessor = 1 << 6;
    FncFlags$$1.SetAccessor = 1 << 7;
    FncFlags$$1.Definition = 1 << 8;
    FncFlags$$1.Signature = 1 << 9;
    FncFlags$$1.Method = 1 << 10;
    FncFlags$$1.HasReturnExpression = 1 << 11;
    FncFlags$$1.CallMember = 1 << 12;
    FncFlags$$1.ConstructMember = 1 << 13;
    FncFlags$$1.HasSelfReference = 1 << 14;
    FncFlags$$1.IsFatArrowFunction = 1 << 15;
    FncFlags$$1.IndexerMember = 1 << 16;
    FncFlags$$1.IsFunctionExpression = 1 << 17;
    FncFlags$$1.ClassMethod = 1 << 18;
    FncFlags$$1.ClassPropertyMethodExported = 1 << 19;
    FncFlags$$1.HasSuperReferenceInFatArrowFunction = 1 << 20;
    FncFlags$$1.IsPropertyBound = 1 << 21;
    return
  }
  function v41(VarFlags$$1) {
    VarFlags$$1._map = [];
    VarFlags$$1.None = 0;
    VarFlags$$1.Exported = 1;
    VarFlags$$1.Private = 1 << 1;
    VarFlags$$1.Public = 1 << 2;
    VarFlags$$1.Ambient = 1 << 3;
    VarFlags$$1.Static = 1 << 4;
    VarFlags$$1.LocalStatic = 1 << 5;
    VarFlags$$1.GetAccessor = 1 << 6;
    VarFlags$$1.SetAccessor = 1 << 7;
    VarFlags$$1.AutoInit = 1 << 8;
    VarFlags$$1.Property = 1 << 9;
    VarFlags$$1.Readonly = 1 << 10;
    VarFlags$$1.Class = 1 << 11;
    VarFlags$$1.ClassProperty = 1 << 12;
    VarFlags$$1.ClassBodyProperty = 1 << 13;
    VarFlags$$1.ClassConstructorProperty = 1 << 14;
    VarFlags$$1.ClassSuperMustBeFirstCallInConstructor = 1 << 15;
    VarFlags$$1.Constant = 1 << 16;
    VarFlags$$1.MustCaptureThis = 1 << 17;
    return
  }
  function v40(SymbolFlags$$1) {
    SymbolFlags$$1._map = [];
    SymbolFlags$$1.None = 0;
    SymbolFlags$$1.Exported = 1;
    SymbolFlags$$1.Private = 1 << 1;
    SymbolFlags$$1.Public = 1 << 2;
    SymbolFlags$$1.Ambient = 1 << 3;
    SymbolFlags$$1.Static = 1 << 4;
    SymbolFlags$$1.LocalStatic = 1 << 5;
    SymbolFlags$$1.GetAccessor = 1 << 6;
    SymbolFlags$$1.SetAccessor = 1 << 7;
    SymbolFlags$$1.Property = 1 << 8;
    SymbolFlags$$1.Readonly = 1 << 9;
    SymbolFlags$$1.ModuleMember = 1 << 10;
    SymbolFlags$$1.InterfaceMember = 1 << 11;
    SymbolFlags$$1.ClassMember = 1 << 12;
    SymbolFlags$$1.BuiltIn = 1 << 13;
    SymbolFlags$$1.TypeSetDuringScopeAssignment = 1 << 14;
    SymbolFlags$$1.Constant = 1 << 15;
    SymbolFlags$$1.Optional = 1 << 16;
    SymbolFlags$$1.RecursivelyReferenced = 1 << 17;
    SymbolFlags$$1.Bound = 1 << 18;
    SymbolFlags$$1.CompilerGenerated = 1 << 19;
    return
  }
  function v39(ModuleFlags$$1) {
    ModuleFlags$$1._map = [];
    ModuleFlags$$1.None = 0;
    ModuleFlags$$1.Exported = 1;
    ModuleFlags$$1.Private = 1 << 1;
    ModuleFlags$$1.Public = 1 << 2;
    ModuleFlags$$1.Ambient = 1 << 3;
    ModuleFlags$$1.Static = 1 << 4;
    ModuleFlags$$1.LocalStatic = 1 << 5;
    ModuleFlags$$1.GetAccessor = 1 << 6;
    ModuleFlags$$1.SetAccessor = 1 << 7;
    ModuleFlags$$1.IsEnum = 1 << 8;
    ModuleFlags$$1.ShouldEmitModuleDecl = 1 << 9;
    ModuleFlags$$1.IsWholeFile = 1 << 10;
    ModuleFlags$$1.IsDynamic = 1 << 11;
    ModuleFlags$$1.MustCaptureThis = 1 << 12;
    return
  }
  function v38(DeclFlags$$1) {
    DeclFlags$$1._map = [];
    DeclFlags$$1.None = 0;
    DeclFlags$$1.Exported = 1;
    DeclFlags$$1.Private = 1 << 1;
    DeclFlags$$1.Public = 1 << 2;
    DeclFlags$$1.Ambient = 1 << 3;
    DeclFlags$$1.Static = 1 << 4;
    DeclFlags$$1.LocalStatic = 1 << 5;
    DeclFlags$$1.GetAccessor = 1 << 6;
    DeclFlags$$1.SetAccessor = 1 << 7;
    return
  }
  function v37(ASTFlags$$1) {
    ASTFlags$$1._map = [];
    ASTFlags$$1.None = 0;
    ASTFlags$$1.ExplicitSemicolon = 1;
    ASTFlags$$1.AutomaticSemicolon = 1 << 1;
    ASTFlags$$1.Writeable = 1 << 2;
    ASTFlags$$1.Error = 1 << 3;
    ASTFlags$$1.DotLHSPartial = 1 << 4;
    ASTFlags$$1.DotLHS = 1 << 5;
    ASTFlags$$1.IsStatement = 1 << 6;
    ASTFlags$$1.StrictMode = 1 << 7;
    ASTFlags$$1.PossibleOptionalParameter = 1 << 8;
    ASTFlags$$1.ClassBaseConstructorCall = 1 << 9;
    ASTFlags$$1.OptionalName = 1 << 10;
    ASTFlags$$1.SkipNextRParen = 1 << 11;
    return
  }
  function v36(Modifiers$$1) {
    Modifiers$$1._map = [];
    Modifiers$$1.None = 0;
    Modifiers$$1.Private = 1;
    Modifiers$$1.Public = 1 << 1;
    Modifiers$$1.Readonly = 1 << 2;
    Modifiers$$1.Ambient = 1 << 3;
    Modifiers$$1.Exported = 1 << 4;
    Modifiers$$1.Getter = 1 << 5;
    Modifiers$$1.Setter = 1 << 6;
    Modifiers$$1.Static = 1 << 7;
    return
  }
  function v35(AllowedElements$$1) {
    AllowedElements$$1._map = [];
    AllowedElements$$1.None = 0;
    AllowedElements$$1.ModuleDeclarations = 1 << 2;
    AllowedElements$$1.ClassDeclarations = 1 << 3;
    AllowedElements$$1.InterfaceDeclarations = 1 << 4;
    AllowedElements$$1.AmbientDeclarations = 1 << 10;
    AllowedElements$$1.Properties = 1 << 11;
    var v12168 = AllowedElements$$1;
    var v24895 = AllowedElements$$1.ModuleDeclarations;
    var v24896 = AllowedElements$$1.ClassDeclarations;
    var v22740 = v24895 | v24896;
    var v22741 = AllowedElements$$1.InterfaceDeclarations;
    var v18513 = v22740 | v22741;
    var v18514 = AllowedElements$$1.AmbientDeclarations;
    v12168.Global = v18513 | v18514;
    var v12169 = AllowedElements$$1;
    var v18515 = AllowedElements$$1.Global;
    var v18516 = AllowedElements$$1.Properties;
    v12169.QuickParse = v18515 | v18516;
    return
  }
  function v34(ErrorRecoverySet$$1) {
    ErrorRecoverySet$$1._map = [];
    ErrorRecoverySet$$1.None = 0;
    ErrorRecoverySet$$1.Comma = 1;
    ErrorRecoverySet$$1.SColon = 1 << 1;
    ErrorRecoverySet$$1.Asg = 1 << 2;
    ErrorRecoverySet$$1.BinOp = 1 << 3;
    ErrorRecoverySet$$1.RBrack = 1 << 4;
    ErrorRecoverySet$$1.RCurly = 1 << 5;
    ErrorRecoverySet$$1.RParen = 1 << 6;
    ErrorRecoverySet$$1.Dot = 1 << 7;
    ErrorRecoverySet$$1.Colon = 1 << 8;
    ErrorRecoverySet$$1.PrimType = 1 << 9;
    ErrorRecoverySet$$1.AddOp = 1 << 10;
    ErrorRecoverySet$$1.LCurly = 1 << 11;
    ErrorRecoverySet$$1.PreOp = 1 << 12;
    ErrorRecoverySet$$1.RegExp = 1 << 13;
    ErrorRecoverySet$$1.LParen = 1 << 14;
    ErrorRecoverySet$$1.LBrack = 1 << 15;
    ErrorRecoverySet$$1.Scope = 1 << 16;
    ErrorRecoverySet$$1.In = 1 << 17;
    ErrorRecoverySet$$1.SCase = 1 << 18;
    ErrorRecoverySet$$1.Else = 1 << 19;
    ErrorRecoverySet$$1.Catch = 1 << 20;
    ErrorRecoverySet$$1.Var = 1 << 21;
    ErrorRecoverySet$$1.Stmt = 1 << 22;
    ErrorRecoverySet$$1.While = 1 << 23;
    ErrorRecoverySet$$1.ID = 1 << 24;
    ErrorRecoverySet$$1.Prefix = 1 << 25;
    ErrorRecoverySet$$1.Literal = 1 << 26;
    ErrorRecoverySet$$1.RLit = 1 << 27;
    ErrorRecoverySet$$1.Func = 1 << 28;
    ErrorRecoverySet$$1.EOF = 1 << 29;
    ErrorRecoverySet$$1.TypeScriptS = 1 << 30;
    var v12170 = ErrorRecoverySet$$1;
    var v26909 = ErrorRecoverySet$$1.SColon;
    var v26910 = ErrorRecoverySet$$1.AddOp;
    var v26898 = v26909 | v26910;
    var v26899 = ErrorRecoverySet$$1.LCurly;
    var v26878 = v26898 | v26899;
    var v26879 = ErrorRecoverySet$$1.PreOp;
    var v26830 = v26878 | v26879;
    var v26831 = ErrorRecoverySet$$1.RegExp;
    var v26763 = v26830 | v26831;
    var v26764 = ErrorRecoverySet$$1.LParen;
    var v26652 = v26763 | v26764;
    var v26653 = ErrorRecoverySet$$1.LBrack;
    var v26396 = v26652 | v26653;
    var v26397 = ErrorRecoverySet$$1.ID;
    var v25878 = v26396 | v26397;
    var v25879 = ErrorRecoverySet$$1.Prefix;
    var v24897 = v25878 | v25879;
    var v24898 = ErrorRecoverySet$$1.RLit;
    var v22742 = v24897 | v24898;
    var v22743 = ErrorRecoverySet$$1.Func;
    var v18517 = v22742 | v22743;
    var v18518 = ErrorRecoverySet$$1.Literal;
    v12170.ExprStart = v18517 | v18518;
    var v12171 = ErrorRecoverySet$$1;
    var v26398 = ErrorRecoverySet$$1.ExprStart;
    var v26399 = ErrorRecoverySet$$1.SColon;
    var v25880 = v26398 | v26399;
    var v25881 = ErrorRecoverySet$$1.Var;
    var v24899 = v25880 | v25881;
    var v24900 = ErrorRecoverySet$$1.Stmt;
    var v22744 = v24899 | v24900;
    var v22745 = ErrorRecoverySet$$1.While;
    var v18519 = v22744 | v22745;
    var v18520 = ErrorRecoverySet$$1.TypeScriptS;
    v12171.StmtStart = v18519 | v18520;
    var v12172 = ErrorRecoverySet$$1;
    var v22746 = ErrorRecoverySet$$1.Dot;
    var v22747 = ErrorRecoverySet$$1.LParen;
    var v18521 = v22746 | v22747;
    var v18522 = ErrorRecoverySet$$1.LBrack;
    v12172.Postfix = v18521 | v18522;
    return
  }
  function hasFlag(val, flag$$1) {
    var v12173 = val & flag$$1;
    return v12173 != 0
  }
  function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags) {
    return fncOrVarOrSymbolOrModuleFlags
  }
  function flagsToString(e$$7, flags$$1) {
    var builder = "";
    var i$$8 = 1;
    var v18523 = 1 << 31;
    var v12177 = i$$8 < v18523;
    for(;v12177;) {
      var v18524 = flags$$1 & i$$8;
      var v12176 = v18524 != 0;
      if(v12176) {
        var k;
        for(k in e$$7) {
          introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
            var v18525 = e$$7[k]
          }
          var v12175 = v18525 == i$$8;
          if(v12175) {
            var v18526 = builder.length;
            var v12174 = v18526 > 0;
            if(v12174) {
              builder = builder + "|"
            }
            builder = builder + k;
            break
          }
        }
      }
      i$$8 = i$$8 << 1;
      var v18527 = 1 << 31;
      v12177 = i$$8 < v18527
    }
    return builder
  }
  TypeScript$$1.hasFlag = hasFlag;
  var v18528 = TypeScript$$1.ErrorRecoverySet;
  var v22748 = !v18528;
  if(v22748) {
    v18528 = TypeScript$$1.ErrorRecoverySet = {}
  }
  var v12178 = v18528;
  v34(v12178);
  var ErrorRecoverySet = TypeScript$$1.ErrorRecoverySet;
  var v18529 = TypeScript$$1.AllowedElements;
  var v22749 = !v18529;
  if(v22749) {
    v18529 = TypeScript$$1.AllowedElements = {}
  }
  var v12179 = v18529;
  v35(v12179);
  var AllowedElements = TypeScript$$1.AllowedElements;
  var v18530 = TypeScript$$1.Modifiers;
  var v22750 = !v18530;
  if(v22750) {
    v18530 = TypeScript$$1.Modifiers = {}
  }
  var v12180 = v18530;
  v36(v12180);
  var Modifiers = TypeScript$$1.Modifiers;
  var v18531 = TypeScript$$1.ASTFlags;
  var v22751 = !v18531;
  if(v22751) {
    v18531 = TypeScript$$1.ASTFlags = {}
  }
  var v12181 = v18531;
  v37(v12181);
  var ASTFlags = TypeScript$$1.ASTFlags;
  var v18532 = TypeScript$$1.DeclFlags;
  var v22752 = !v18532;
  if(v22752) {
    v18532 = TypeScript$$1.DeclFlags = {}
  }
  var v12182 = v18532;
  v38(v12182);
  var DeclFlags = TypeScript$$1.DeclFlags;
  var v18533 = TypeScript$$1.ModuleFlags;
  var v22753 = !v18533;
  if(v22753) {
    v18533 = TypeScript$$1.ModuleFlags = {}
  }
  var v12183 = v18533;
  v39(v12183);
  var ModuleFlags = TypeScript$$1.ModuleFlags;
  var v18534 = TypeScript$$1.SymbolFlags;
  var v22754 = !v18534;
  if(v22754) {
    v18534 = TypeScript$$1.SymbolFlags = {}
  }
  var v12184 = v18534;
  v40(v12184);
  var SymbolFlags = TypeScript$$1.SymbolFlags;
  var v18535 = TypeScript$$1.VarFlags;
  var v22755 = !v18535;
  if(v22755) {
    v18535 = TypeScript$$1.VarFlags = {}
  }
  var v12185 = v18535;
  v41(v12185);
  var VarFlags = TypeScript$$1.VarFlags;
  var v18536 = TypeScript$$1.FncFlags;
  var v22756 = !v18536;
  if(v22756) {
    v18536 = TypeScript$$1.FncFlags = {}
  }
  var v12186 = v18536;
  v42(v12186);
  var FncFlags = TypeScript$$1.FncFlags;
  var v18537 = TypeScript$$1.SignatureFlags;
  var v22757 = !v18537;
  if(v22757) {
    v18537 = TypeScript$$1.SignatureFlags = {}
  }
  var v12187 = v18537;
  v43(v12187);
  var SignatureFlags = TypeScript$$1.SignatureFlags;
  TypeScript$$1.ToDeclFlags = ToDeclFlags;
  var v18538 = TypeScript$$1.TypeFlags;
  var v22758 = !v18538;
  if(v22758) {
    v18538 = TypeScript$$1.TypeFlags = {}
  }
  var v12188 = v18538;
  v44(v12188);
  var TypeFlags = TypeScript$$1.TypeFlags;
  var v18539 = TypeScript$$1.TypeRelationshipFlags;
  var v22759 = !v18539;
  if(v22759) {
    v18539 = TypeScript$$1.TypeRelationshipFlags = {}
  }
  var v12189 = v18539;
  v45(v12189);
  var TypeRelationshipFlags = TypeScript$$1.TypeRelationshipFlags;
  var v18540 = TypeScript$$1.CodeGenTarget;
  var v22760 = !v18540;
  if(v22760) {
    v18540 = TypeScript$$1.CodeGenTarget = {}
  }
  var v12190 = v18540;
  v46(v12190);
  var CodeGenTarget = TypeScript$$1.CodeGenTarget;
  var v18541 = TypeScript$$1.ModuleGenTarget;
  var v22761 = !v18541;
  if(v22761) {
    v18541 = TypeScript$$1.ModuleGenTarget = {}
  }
  var v12191 = v18541;
  v47(v12191);
  var ModuleGenTarget = TypeScript$$1.ModuleGenTarget;
  TypeScript$$1.codeGenTarget = CodeGenTarget.ES3;
  TypeScript$$1.moduleGenTarget = ModuleGenTarget.Synchronous;
  TypeScript$$1.optimizeModuleCodeGen = true;
  TypeScript$$1.flagsToString = flagsToString;
  return
}
function v33(s$$8) {
  var i$$7 = 0;
  var v18542 = s$$8.length;
  var v12193 = i$$7 < v18542;
  for(;v12193;) {
    var c$$1 = JAMScript.call(s$$8.charCodeAt, s$$8, [i$$7]);
    var v18543 = this.cumulative_checksum;
    var v12192 = v18543 << 1;
    this.cumulative_checksum = v12192 ^ c$$1;
    i$$7 = i$$7 + 1;
    var v18544 = s$$8.length;
    v12193 = i$$7 < v18544
  }
  return
}
function v32() {
  var v18545 = this.checksum;
  var v18546 = this.cumulative_checksum;
  var v12194 = v18545 != v18546;
  if(v12194) {
    throw new Error("Wrong checksum.");
  }
  this.cumulative_checksum = 0;
  return
}
function v31(s$$7) {
  var v12195 = s$$7 + "\n";
  JAMScript.call(this.Verify, this, [v12195]);
  return
}
function v30(s$$6) {
  JAMScript.call(this.Verify, this, [s$$6]);
  return
}
function v29(s$$5) {
  var i$$6 = 0;
  var v18547 = s$$5.length;
  var v12197 = i$$6 < v18547;
  for(;v12197;) {
    var c = JAMScript.call(s$$5.charCodeAt, s$$5, [i$$6]);
    var v18548 = this.cumulative_checksum;
    var v12196 = v18548 << 1;
    this.cumulative_checksum = v12196 ^ c;
    i$$6 = i$$6 + 1;
    var v18549 = s$$5.length;
    v12197 = i$$6 < v18549
  }
  return
}
function v28() {
  var v18550 = this.checksum;
  var v18551 = this.cumulative_checksum;
  var v12198 = v18550 != v18551;
  if(v12198) {
    throw new Error("Wrong checksum.");
  }
  this.cumulative_checksum = 0;
  return
}
function v27(s$$4) {
  var v12199 = s$$4 + "\n";
  JAMScript.call(this.Verify, this, [v12199]);
  return
}
function v26(s$$3) {
  JAMScript.call(this.Verify, this, [s$$3]);
  return
}
function v25(runner$$2) {
  function RunNextSetup() {
    var v12201 = index$$40 < length$$12;
    if(v12201) {
      try {
        var v18552 = suite$$1.benchmarks;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var v12200 = v18552[index$$40]
        }
        JAMScript.call(v12200.Setup, v12200, [])
      }catch(e$$4) {
        JAMScript.call(suite$$1.NotifyError, suite$$1, [e$$4]);
        return null
      }
      return RunNextBenchmark
    }
    JAMScript.call(suite$$1.NotifyResult, suite$$1, []);
    return null
  }
  function RunNextBenchmark() {
    try {
      var v18553 = suite$$1.benchmarks;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v12202 = v18553[index$$40]
      }
      data$$20 = JAMScript.call(suite$$1.RunSingleBenchmark, suite$$1, [v12202, data$$20])
    }catch(e$$5) {
      JAMScript.call(suite$$1.NotifyError, suite$$1, [e$$5]);
      return null
    }
    var v12203;
    var v18554 = data$$20 == null;
    if(v18554) {
      v12203 = RunNextTearDown
    }else {
      v12203 = RunNextBenchmark()
    }
    return v12203
  }
  function RunNextTearDown() {
    try {
      var v18555 = suite$$1.benchmarks;
      var v18556 = index$$40;
      index$$40 = index$$40 + 1;
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v12204 = v18555[v18556]
      }
      JAMScript.call(v12204.TearDown, v12204, [])
    }catch(e$$6) {
      JAMScript.call(suite$$1.NotifyError, suite$$1, [e$$6]);
      return null
    }
    return RunNextSetup
  }
  JAMScript.call(BenchmarkSuite.ResetRNG, BenchmarkSuite, []);
  this.results = [];
  this.runner = runner$$2;
  var v12205 = this.benchmarks;
  var length$$12 = v12205.length;
  var index$$40 = 0;
  var suite$$1 = this;
  var data$$20;
  return RunNextSetup()
}
function v24(benchmark$$1, data$$18) {
  function Measure(data$$19) {
    var elapsed = 0;
    var start$$4 = new Date;
    var i$$5 = 0;
    var v18557;
    if(doDeterministic$$1) {
      var v22762 = benchmark$$1.deterministicIterations;
      v18557 = i$$5 < v22762
    }else {
      v18557 = elapsed < 1E3
    }
    var v12207 = v18557;
    for(;v12207;) {
      JAMScript.call(benchmark$$1.run, benchmark$$1, []);
      var v12206 = new Date;
      elapsed = v12206 - start$$4;
      i$$5 = i$$5 + 1;
      var v18558;
      if(doDeterministic$$1) {
        var v22763 = benchmark$$1.deterministicIterations;
        v18558 = i$$5 < v22763
      }else {
        v18558 = elapsed < 1E3
      }
      v12207 = v18558
    }
    var v12208 = data$$19 != null;
    if(v12208) {
      var v18559 = data$$19;
      var v22764 = data$$19.runs;
      v18559.runs = v22764 + i$$5;
      var v18560 = data$$19;
      var v22765 = data$$19.elapsed;
      v18560.elapsed = v22765 + elapsed
    }
    return
  }
  var config = BenchmarkSuite.config;
  var v12209;
  var v22766 = config.doWarmup;
  var v18561 = v22766 !== undefined;
  if(v18561) {
    v12209 = config.doWarmup
  }else {
    v12209 = benchmark$$1.doWarmup
  }
  var doWarmup$$1 = v12209;
  var v12210;
  var v22767 = config.doDeterministic;
  var v18562 = v22767 !== undefined;
  if(v18562) {
    v12210 = config.doDeterministic
  }else {
    v12210 = benchmark$$1.doDeterministic
  }
  var doDeterministic$$1 = v12210;
  var v18563 = !doWarmup$$1;
  if(v18563) {
    v18563 = data$$18 == null
  }
  var v12211 = v18563;
  if(v12211) {
    data$$18 = {runs:0, elapsed:0}
  }
  var v12217 = data$$18 == null;
  if(v12217) {
    Measure(null);
    return{runs:0, elapsed:0}
  }else {
    Measure(data$$18);
    var v18564 = data$$18.runs;
    var v18565 = benchmark$$1.minIterations;
    var v12212 = v18564 < v18565;
    if(v12212) {
      return data$$18
    }
    var v18566 = data$$18.elapsed;
    var v12213 = v18566 * 1E3;
    var v12214 = data$$18.runs;
    var usec = v12213 / v12214;
    var v12215;
    var v22768 = benchmark$$1.rmsResult;
    var v18567 = v22768 != null;
    if(v18567) {
      v12215 = JAMScript.call(benchmark$$1.rmsResult, benchmark$$1, [])
    }else {
      v12215 = 0
    }
    var rms = v12215;
    var v12216 = new BenchmarkResult(benchmark$$1, usec, rms);
    JAMScript.call(this.NotifyStep, this, [v12216]);
    return null
  }
  return
}
function v23(error$$2) {
  var v18568 = this.runner;
  var v12220 = v18568.NotifyError;
  if(v12220) {
    var v12218 = this.runner;
    var v12219 = this.name;
    JAMScript.call(v12218.NotifyError, v12218, [v12219, error$$2])
  }
  var v18569 = this.runner;
  var v12223 = v18569.NotifyStep;
  if(v12223) {
    var v12221 = this.runner;
    var v12222 = this.name;
    JAMScript.call(v12221.NotifyStep, v12221, [v12222])
  }
  return
}
function v22(runner$$1) {
  var v12224 = BenchmarkSuite.scores;
  JAMScript.call(v12224.push, v12224, [1]);
  var v12226 = runner$$1.NotifyResult;
  if(v12226) {
    var v12225 = this.name;
    JAMScript.call(runner$$1.NotifyResult, runner$$1, [v12225, "Skipped"])
  }
  return
}
function v21() {
  var v12227 = this.results;
  var mean = JAMScript.call(BenchmarkSuite.GeometricMeanTime, BenchmarkSuite, [v12227]);
  var v18570 = this.reference;
  var v12228 = v18570[0];
  var score$$1 = v12228 / mean;
  var v12229 = BenchmarkSuite.scores;
  JAMScript.call(v12229.push, v12229, [score$$1]);
  var v18571 = this.runner;
  var v12233 = v18571.NotifyResult;
  if(v12233) {
    var v12230 = 100 * score$$1;
    var formatted$$1 = JAMScript.call(BenchmarkSuite.FormatScore, BenchmarkSuite, [v12230]);
    var v12231 = this.runner;
    var v12232 = this.name;
    JAMScript.call(v12231.NotifyResult, v12231, [v12232, formatted$$1])
  }
  var v22769 = this.reference;
  var v18572 = v22769.length;
  var v12242 = v18572 == 2;
  if(v12242) {
    var v12234 = this.results;
    var meanLatency = JAMScript.call(BenchmarkSuite.GeometricMeanLatency, BenchmarkSuite, [v12234]);
    var v12241 = meanLatency != 0;
    if(v12241) {
      var v18573 = this.reference;
      var v12235 = v18573[1];
      var scoreLatency = v12235 / meanLatency;
      var v12236 = BenchmarkSuite.scores;
      JAMScript.call(v12236.push, v12236, [scoreLatency]);
      var v18574 = this.runner;
      var v12240 = v18574.NotifyResult;
      if(v12240) {
        var v12237 = 100 * scoreLatency;
        var formattedLatency = JAMScript.call(BenchmarkSuite.FormatScore, BenchmarkSuite, [v12237]);
        var v12238 = this.runner;
        var v18575 = this.name;
        var v12239 = v18575 + "Latency";
        JAMScript.call(v12238.NotifyResult, v12238, [v12239, formattedLatency])
      }
    }
  }
  return
}
function v20(result$$1) {
  var v12243 = this.results;
  JAMScript.call(v12243.push, v12243, [result$$1]);
  var v18576 = this.runner;
  var v12246 = v18576.NotifyStep;
  if(v12246) {
    var v12244 = this.runner;
    var v18577 = result$$1.benchmark;
    var v12245 = v18577.name;
    JAMScript.call(v12244.NotifyStep, v12244, [v12245])
  }
  return
}
function v19(value$$29) {
  var v12247 = value$$29 > 100;
  if(v12247) {
    return value$$29.toFixed(0)
  }else {
    return value$$29.toPrecision(3)
  }
  return
}
function v18(measurements$$1) {
  var log$$2 = 0;
  var hasLatencyResult = false;
  var i$$4 = 0;
  var v18578 = measurements$$1.length;
  var v12249 = i$$4 < v18578;
  for(;v12249;) {
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      var v22770 = measurements$$1[i$$4]
    }
    var v18579 = v22770.latency;
    var v12248 = v18579 != 0;
    if(v12248) {
      introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
        var v24901 = measurements$$1[i$$4]
      }
      var v22771 = v24901.latency;
      var v18580 = JAMScript.call(Math.log, Math, [v22771]);
      log$$2 = log$$2 + v18580;
      hasLatencyResult = true
    }
    i$$4 = i$$4 + 1;
    var v18581 = measurements$$1.length;
    v12249 = i$$4 < v18581
  }
  if(hasLatencyResult) {
    var v12250 = Math.E;
    var v18582 = measurements$$1.length;
    var v12251 = log$$2 / v18582;
    return Math.pow(v12250, v12251)
  }else {
    return 0
  }
  return
}
function v17(measurements) {
  var log$$1 = 0;
  var i$$3 = 0;
  var v18583 = measurements.length;
  var v12252 = i$$3 < v18583;
  for(;v12252;) {
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      var v24902 = measurements[i$$3]
    }
    var v22772 = v24902.time;
    var v18584 = JAMScript.call(Math.log, Math, [v22772]);
    log$$1 = log$$1 + v18584;
    i$$3 = i$$3 + 1;
    var v18585 = measurements.length;
    v12252 = i$$3 < v18585
  }
  var v12253 = Math.E;
  var v18586 = measurements.length;
  var v12254 = log$$1 / v18586;
  return Math.pow(v12253, v12254)
}
function v16(numbers) {
  var log = 0;
  var i$$2 = 0;
  var v18587 = numbers.length;
  var v12255 = i$$2 < v18587;
  for(;v12255;) {
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      var v22773 = numbers[i$$2]
    }
    var v18588 = JAMScript.call(Math.log, Math, [v22773]);
    log = log + v18588;
    i$$2 = i$$2 + 1;
    var v18589 = numbers.length;
    v12255 = i$$2 < v18589
  }
  var v12256 = Math.E;
  var v18590 = numbers.length;
  var v12257 = log / v18590;
  return Math.pow(v12256, v12257)
}
function v15() {
  var result = 0;
  var suites$$1 = BenchmarkSuite.suites;
  var i$$1 = 0;
  var v18591 = suites$$1.length;
  var v12258 = i$$1 < v18591;
  for(;v12258;) {
    introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
      var v24903 = suites$$1[i$$1]
    }
    var v22774 = v24903.benchmarks;
    var v18592 = v22774.length;
    result = result + v18592;
    i$$1 = i$$1 + 1;
    var v18593 = suites$$1.length;
    v12258 = i$$1 < v18593
  }
  return result
}
function v14(runner, skipBenchmarks$$1) {
  function RunStep() {
    var v18594 = continuation;
    var v22775 = !v18594;
    if(v22775) {
      v18594 = index$$39 < length$$11
    }
    var v12264 = v18594;
    for(;v12264;) {
      if(continuation) {
        continuation = JAMScript.call(continuation, null, [])
      }else {
        var v12259 = index$$39;
        index$$39 = index$$39 + 1;
        introspect(JAMScript.introspectors.processC545F199BE443C5FB0DC91C55134FB746FD8B074) {
          var suite = suites[v12259]
        }
        var v12261 = runner.NotifyStart;
        if(v12261) {
          var v12260 = suite.name;
          JAMScript.call(runner.NotifyStart, runner, [v12260])
        }
        var v22776 = suite.name;
        var v18595 = skipBenchmarks$$1.indexOf(v22776);
        var v12262 = v18595 > -1;
        if(v12262) {
          JAMScript.call(suite.NotifySkipped, suite, [runner])
        }else {
          continuation = JAMScript.call(suite.RunStep, suite, [runner])
        }
      }
      var v18596 = continuation;
      if(v18596) {
        var v24904 = typeof window;
        var v22777 = v24904 != "undefined";
        if(v22777) {
          v22777 = window.setTimeout
        }
        v18596 = v22777
      }
      var v12263 = v18596;
      if(v12263) {
        window.setTimeout(RunStep, 25);
        return
      }
      var v18597 = continuation;
      var v22778 = !v18597;
      if(v22778) {
        v18597 = index$$39 < length$$11
      }
      v12264 = v18597
    }
    var v12267 = runner.NotifyScore;
    if(v12267) {
      var v12265 = BenchmarkSuite.scores;
      var score = JAMScript.call(BenchmarkSuite.GeometricMean, BenchmarkSuite, [v12265]);
      var v12266 = 100 * score;
      var formatted = JAMScript.call(BenchmarkSuite.FormatScore, BenchmarkSuite, [v12266]);
      JAMScript.call(runner.NotifyScore, runner, [formatted])
    }
    return
  }
  var v12268;
  var v22779 = typeof skipBenchmarks$$1;
  var v18598 = v22779 === "undefined";
  if(v18598) {
    v12268 = []
  }else {
    v12268 = skipBenchmarks$$1
  }
  skipBenchmarks$$1 = v12268;
  var continuation = null;
  var suites = BenchmarkSuite.suites;
  var length$$11 = suites.length;
  BenchmarkSuite.scores = [];
  var index$$39 = 0;
  RunStep();
  return
}
function v13() {
  function v12() {
    function v11() {
      var v18599 = seed + 2127912214;
      var v18600 = seed << 12;
      var v12269 = v18599 + v18600;
      seed = v12269 & 4294967295;
      var v18601 = seed ^ 3345072700;
      var v18602 = seed >>> 19;
      var v12270 = v18601 ^ v18602;
      seed = v12270 & 4294967295;
      var v18603 = seed + 374761393;
      var v18604 = seed << 5;
      var v12271 = v18603 + v18604;
      seed = v12271 & 4294967295;
      var v18605 = seed + 3550635116;
      var v18606 = seed << 9;
      var v12272 = v18605 ^ v18606;
      seed = v12272 & 4294967295;
      var v18607 = seed + 4251993797;
      var v18608 = seed << 3;
      var v12273 = v18607 + v18608;
      seed = v12273 & 4294967295;
      var v18609 = seed ^ 3042594569;
      var v18610 = seed >>> 16;
      var v12274 = v18609 ^ v18610;
      seed = v12274 & 4294967295;
      var v12275 = seed & 268435455;
      return v12275 / 268435456
    }
    var seed = 49734321;
    return v11
  }
  var v12276 = Math;
  var v27591 = v12();
  v12276.random = v27591;
  return
}
function v10(s$$2) {
  throw"Alert called with argument: " + s$$2;
}
function v9() {
  return this.time
}
function v8() {
  var v12277 = performance.now;
  var v18612 = !v12277;
  if(v18612) {
    var v18611 = performance.mozNow;
    var v22781 = !v18611;
    if(v22781) {
      var v22780 = performance.msNow;
      var v24906 = !v22780;
      if(v24906) {
        var v24905 = performance.oNow;
        var v25883 = !v24905;
        if(v25883) {
          var v25882 = performance.webkitNow;
          var v26400 = !v25882;
          if(v26400) {
            v25882 = Date.now
          }
          v24905 = v25882
        }
        v22780 = v24905
      }
      v18611 = v22780
    }
    v12277 = v18611
  }
  return v12277
}
function Benchmark(name$$31, doWarmup, doDeterministic, deterministicIterations, run, setup, tearDown, rmsResult, minIterations) {
  function v1() {
    return
  }
  function v0() {
    return
  }
  this.name = name$$31;
  this.doWarmup = doWarmup;
  this.doDeterministic = doDeterministic;
  this.deterministicIterations = deterministicIterations;
  this.run = run;
  var v12278;
  if(setup) {
    v12278 = setup
  }else {
    v12278 = v0
  }
  this.Setup = v12278;
  var v12279;
  if(tearDown) {
    v12279 = tearDown
  }else {
    v12279 = v1
  }
  this.TearDown = v12279;
  var v12280;
  if(rmsResult) {
    v12280 = rmsResult
  }else {
    v12280 = null
  }
  this.rmsResult = v12280;
  var v12281;
  if(minIterations) {
    v12281 = minIterations
  }else {
    v12281 = 32
  }
  this.minIterations = v12281;
  return
}
function BenchmarkResult(benchmark, time, latency) {
  this.benchmark = benchmark;
  this.time = time;
  this.latency = latency;
  return
}
function BenchmarkSuite(name$$32, reference, benchmarks$$1) {
  this.name = name$$32;
  this.reference = reference;
  this.benchmarks = benchmarks$$1;
  var v12282 = BenchmarkSuite.suites;
  JAMScript.call(v12282.push, v12282, [this]);
  return
}
function setupTypescript() {
  return
}
function tearDownTypescript() {
  compiler_input = null;
  return
}
function runTypescript() {
  function v5(path$$2) {
    return path$$2
  }
  function v4(path$$1) {
    return false
  }
  function v3(path) {
    return false
  }
  function v2(fileName) {
    return outfile
  }
  var compiler = createCompiler();
  JAMScript.call(compiler.addUnit, compiler, [compiler_input, "compiler_input.ts"]);
  parseErrors = [];
  JAMScript.call(compiler.reTypeCheck, compiler, []);
  var v12283 = {createFile:v2, fileExists:v3, directoryExists:v4, resolvePath:v5};
  JAMScript.call(compiler.emit, compiler, [v12283]);
  var v22782 = parseErrors.length;
  var v18613 = v22782 != 192;
  if(v18613) {
    var v22783 = parseErrors.length;
    v18613 = v22783 != 193
  }
  var v12284 = v18613;
  if(v12284) {
    throw new Error("Parse errors.");
  }
  compiler = null;
  return
}
function createCompiler() {
  function v6(start$$5, len, message$$10) {
    var v12285 = {start:start$$5, len:len, message:message$$10};
    JAMScript.call(parseErrors.push, parseErrors, [v12285]);
    return
  }
  var v12286 = TypeScript.CompilationSettings;
  var settings = JAMScript.new(v12286, []);
  var v12287 = TypeScript.CodeGenTarget;
  settings.codeGenTarget = v12287.ES5;
  var v12288 = TypeScript.TypeScriptCompiler;
  var v18614 = TypeScript.NullLogger;
  var v12289 = JAMScript.new(v18614, []);
  var compiler$$1 = JAMScript.new(v12288, [outerr, v12289, settings]);
  JAMScript.call(compiler$$1.setErrorCallback, compiler$$1, [v6]);
  var v12290 = compiler$$1.parser;
  v12290.errorRecovery = true;
  JAMScript.call(compiler$$1.typeCheck, compiler$$1, []);
  return compiler$$1
}
function ShowBox(name$$93) {
  function v7(entry$$3) {
    var v18615 = JAMScript.call(name$$93.valueOf, name$$93, []);
    var v18616 = JAMScript.call(entry$$3.valueOf, entry$$3, []);
    var v12293 = v18615 === v18616;
    if(v12293) {
      var v18617 = "Box-" + name$$93;
      var v12291 = v18617 + "Latency";
      var box1 = document.getElementById(v12291);
      var v12292 = box1.style;
      v12292.visibility = "visible"
    }
    return
  }
  var v12294 = "Box-" + name$$93;
  var box = document.getElementById(v12294);
  var v12295 = box.style;
  v12295.visibility = "visible";
  var v18618 = document.getElementById("progress-bar");
  var v12296 = v18618.style;
  var v25884 = completed = completed + 1;
  var v24907 = v25884 / benchmarks;
  var v22784 = v24907 * 100;
  var v18619 = "" + v22784;
  var bar = v12296.width = v18619 + "%";
  latencyBenchmarks.forEach(v7);
  return
}
function AddResult(name$$94, result$$41) {
  var v18620 = name$$94 + ": ";
  var v12297 = v18620 + result$$41;
  JAMScript.call(console.log, console, [v12297]);
  var v12298 = "Result-" + name$$94;
  var box$$1 = document.getElementById(v12298);
  JAMScript.set(box$$1, "innerHTML", result$$41);
  return
}
function AddError(name$$95, error$$4) {
  var v18621 = name$$95 + ": ";
  var v18622 = error$$4.message;
  var v12299 = v18621 + v18622;
  JAMScript.call(console.log, console, [v12299]);
  var v12301 = error$$4 == "TypedArrayUnsupported";
  if(v12301) {
    AddResult(name$$95, "<b>Unsupported</b>")
  }else {
    var v12300 = error$$4 == "PerformanceNowUnsupported";
    if(v12300) {
      AddResult(name$$95, "<b>Timer error</b>")
    }else {
      AddResult(name$$95, "<b>Error</b>")
    }
  }
  success = false;
  return
}
function AddScore(score$$2) {
  var status$$1 = document.getElementById("main-banner");
  if(success) {
    JAMScript.set(status$$1, "innerHTML", "Octane Score: " + score$$2)
  }else {
    JAMScript.set(status$$1, "innerHTML", "Octane Score (incomplete): " + score$$2)
  }
  var v18623 = document.getElementById("progress-bar-container");
  var v12302 = v18623.style;
  v12302.visibility = "hidden";
  var v18624 = document.getElementById("bottom-text");
  var v12303 = v18624.style;
  v12303.visibility = "visible";
  var v12304 = document.getElementById("inside-anchor");
  var v12305 = document.getElementById("bar-appendix");
  v12304.removeChild(v12305);
  var v18625 = document.getElementById("alertbox");
  var v12306 = v18625.style;
  v12306.visibility = "hidden";
  return
}
function Run() {
  var v12307 = document.getElementById("main-banner");
  JAMScript.set(v12307, "innerHTML", "Running Octane...");
  var v12308 = document.getElementById("bar-appendix");
  JAMScript.set(v12308, "innerHTML", '<br/><div class="progress progress-striped" id="progress-bar-container" style="visibility:hidden"><div class="bar"style="width: 0%;" id="progress-bar"></div></div>');
  var anchor = document.getElementById("run-octane");
  var parent$$73 = document.getElementById("main-container");
  var v12309 = document.getElementById("inside-anchor");
  JAMScript.call(parent$$73.appendChild, parent$$73, [v12309]);
  parent$$73.removeChild(anchor);
  var v12310 = document.getElementById("startup-text");
  JAMScript.set(v12310, "innerHTML", "");
  var v18626 = document.getElementById("progress-bar-container");
  var v12311 = v18626.style;
  v12311.visibility = "visible";
  var v12312 = {NotifyStart:ShowBox, NotifyError:AddError, NotifyResult:AddResult, NotifyScore:AddScore};
  JAMScript.call(BenchmarkSuite.RunSuites, BenchmarkSuite, [v12312, skipBenchmarks]);
  return
}
function CheckCompatibility() {
  var v18627 = typeof Uint8Array;
  var v12313 = v18627 != "undefined";
  if(v12313) {
    var v22785 = typeof Float64Array;
    var v18628 = v22785 != "undefined";
    if(v18628) {
      var v25885 = new Uint8Array(0);
      var v24908 = v25885.subarray;
      var v22786 = typeof v24908;
      v18628 = v22786 != "undefined"
    }
    v12313 = v18628
  }
  var hasTypedArrays = v12313;
  var v12315 = !hasTypedArrays;
  if(v12315) {
    JAMScript.call(console.log, console, ["Typed Arrays not supported"]);
    var v18629 = document.getElementById("alertbox");
    var v12314 = v18629.style;
    v12314.display = "block"
  }
  var v24909 = window.document;
  var v22787 = v24909.URL;
  var v18630 = v22787.indexOf("skip_zlib=1");
  var v12316 = v18630 >= 0;
  if(v12316) {
    JAMScript.call(skipBenchmarks.push, skipBenchmarks, ["zlib"])
  }
  var v24910 = window.document;
  var v22788 = v24910.URL;
  var v18631 = v22788.indexOf("auto=1");
  var v12317 = v18631 >= 0;
  if(v12317) {
    Run()
  }
  return
}
function Load() {
  JAMScript.call(setTimeout, null, [CheckCompatibility, 200]);
  return
}
var performance = performance || {};
var v12318 = performance;
var v27592 = v8();
v12318.now = v27592;
var v12319 = BenchmarkResult.prototype;
v12319.valueOf = v9;
BenchmarkSuite.suites = [];
BenchmarkSuite.version = "9";
BenchmarkSuite.config = {doWarmup:undefined, doDeterministic:undefined};
alert = v10;
BenchmarkSuite.ResetRNG = v13;
BenchmarkSuite.RunSuites = v14;
BenchmarkSuite.CountBenchmarks = v15;
BenchmarkSuite.GeometricMean = v16;
BenchmarkSuite.GeometricMeanTime = v17;
BenchmarkSuite.GeometricMeanLatency = v18;
BenchmarkSuite.FormatScore = v19;
var v12320 = BenchmarkSuite.prototype;
v12320.NotifyStep = v20;
var v12321 = BenchmarkSuite.prototype;
v12321.NotifyResult = v21;
var v12322 = BenchmarkSuite.prototype;
v12322.NotifySkipped = v22;
var v12323 = BenchmarkSuite.prototype;
v12323.NotifyError = v23;
var v12324 = BenchmarkSuite.prototype;
v12324.RunSingleBenchmark = v24;
var v12325 = BenchmarkSuite.prototype;
v12325.RunStep = v25;
var v12326 = [255011322];
var v18632 = new Benchmark("Typescript", false, true, 5, runTypescript, setupTypescript, tearDownTypescript, null, 1);
var v12327 = [v18632];
var typescript = new BenchmarkSuite("Typescript", v12326, v12327);
var parseErrors = [];
var outfile = {checksum:-412589664, cumulative_checksum:0, Write:v26, WriteLine:v27, Close:v28, Verify:v29};
var outerr = {checksum:0, cumulative_checksum:0, Write:v30, WriteLine:v31, Close:v32, Verify:v33};
var v27844 = '//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    export class AstLogger {\n\n        constructor (public logger: ILogger) { }\n\n        public logScript(script: TypeScript.Script): void {\n            this.logLinemap(script.locationInfo.lineMap);\n\n            var stack: AST[]= [];\n\n            var pre = (cur: TypeScript.AST, parent: TypeScript.AST) => {\n                stack.push(cur);\n                var indent = (stack.length - 1) * 2;\n                this.logComments(script, cur.preComments, indent);\n                this.logNode(script, cur, indent);\n                this.logComments(script, cur.postComments, indent);\n                return cur;\n            }\n\n            var post = (cur: TypeScript.AST, parent: TypeScript.AST) => {\n                stack.pop();\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(script, pre, post);\n        }\n\n\n        public logNode(script: TypeScript.Script, cur: TypeScript.AST, indent: number) {\n            var msg = this.addPadding("", indent, "| ", true);\n\n            msg = msg.concat("+ " + cur.treeViewLabel());\n            msg = this.addPadding(msg, 70, " ", false);\n\n            msg = msg + this.addLineColumn(script, cur.minChar);\n            msg = this.addPadding(msg, 80, " ", false);\n\n            msg = msg + "=> ";\n            msg = msg + this.addLineColumn(script, cur.limChar);\n            msg = this.addPadding(msg, 102, " ", false);\n\n            msg = msg.concat("[" + this.addPadding(cur.minChar.toString(), 1, " ", true) + ", " + this.addPadding(cur.limChar.toString(), 1, " ", true) + "]");\n\n            msg = this.addPadding(msg, 115, " ", false);\n            msg = msg.concat("sym=" + (<any>cur).sym);\n\n            msg = this.addPadding(msg, 135, " ", false);\n            msg = msg.concat("type=" + (cur.type === null ? "null" : cur.type.getTypeName()));\n            this.logger.log(msg);\n        }\n\n        private logComments(script: TypeScript.Script, comments: TypeScript.AST[], indent: number) {\n            if (comments == null)\n                return;\n\n            for (var i = 0; i < comments.length; i++) {\n                this.logNode(script, comments[i], indent);\n            }\n        }\n\n        public logLinemap(linemap: number[]) {\n            var result = "[";\n            for (var i = 0; i < linemap.length; i++) {\n                if (i > 0)\n                    result += ",";\n                result += linemap[i];\n            }\n            result += "]";\n            this.logger.log("linemap: " + result);\n        }\n\n        private addPadding(s: string, targetLength: number, paddingString: string, leftPadding: bool): string {\n            var result = (leftPadding ? "" : s);\n            for (var i = s.length; i < targetLength; i++) {\n                result = result + paddingString;\n            }\n            result = result + (leftPadding ? s : "");\n            return result;\n        }\n\n        private addLineColumn(script: TypeScript.Script, position: numbe' + 
'r): string {\n            // just for calling getSourceLineColFromMap\n            var lineInfo = {\n                line: -1,\n                col: -1\n            }\n            TypeScript.getSourceLineColFromMap(lineInfo, position, script.locationInfo.lineMap);\n\n            if (lineInfo.col !== -1) {\n                lineInfo.col++; //TODO: function above seems to consider line as 1-based, and column as 0-based\n            }\n\n            return "(" + lineInfo.line + ", " + lineInfo.col + ")";\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export function lastOf(items: any[]): any {\n        return (items === null || items.length === 0) ? null : items[items.length - 1];\n    }\n\n    export function max(a: number, b: number): number {\n        return a >= b ? a : b;\n    }\n\n    export function min(a: number, b: number): number {\n        return a <= b ? a : b;\n    }\n\n    //\n    // Helper class representing a path from a root ast node to a (grand)child ast node.\n    // This is helpful as our tree don\'t have parents.\n    //\n    export class AstPath {\n        public asts: TypeScript.AST[] = [];\n        public top: number = -1;\n\n        static reverseIndexOf(items: any[], index: number): any {\n            return (items === null || items.length <= index) ? null : items[items.length - index - 1];\n        }\n\n        public clone(): AstPath {\n            var clone = new AstPath();\n            clone.asts = this.asts.map((value) => { return value; });\n            clone.top = this.top;\n            return clone;\n        }\n\n        public pop(): TypeScript.AST {\n            var head = this.ast();\n            this.up();\n\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            return head;\n        }\n\n        public push(ast: TypeScript.AST) {\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            this.top = this.asts.length;\n            this.asts.push(ast);\n        }\n\n        public up() {\n            if (this.top <= -1)\n                throw new Error("Invalid call to \'up\'");\n            this.top--;\n        }\n\n        public down() {\n            if (this.top == this.ast.length - 1)\n                throw new Error("Invalid call to \'down\'");\n            this.top++;\n        }\n\n        public nodeType(): TypeScript.NodeType {\n            if (this.ast() == null)\n                return TypeScript.NodeType.None;\n            return this.ast().nodeType;\n        }\n\n        public ast() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));\n        }\n\n        public parent() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top);\n        }\n\n        public count() {\n            return this.top + 1;\n        }\n\n        public get(index: number): TypeScript.AST {\n            return this.asts[index];\n        }\n\n        public isNameOfClass(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfInterface(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfArgument(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ArgDecl) &&\n                ((<TypeScript.ArgDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfVariable(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === Ty';
var v27843 = v27844 + "peScript.NodeType.VarDecl) &&\n                ((<TypeScript.VarDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfModule(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) &&\n                ((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfFunction(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.FuncDecl) &&\n                ((<TypeScript.FuncDecl>this.parent()).name === this.ast());\n        }\n\n        public isChildOfScript(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script;\n        }\n\n        public isChildOfModule(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration;\n        }\n\n        public isChildOfClass(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration;\n        }\n\n        public isArgumentOfClassConstructor(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 5 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) &&\n                ((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]);\n        }\n\n        public isChildOfInterface(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration;\n        }\n\n        public isTopLevelImplicitModule() {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags, TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfTopLevelImplicitModule() {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).modFlags, TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfScript(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script &&\n                 (<TypeScript.Script>this.asts[this.top - 1]).bod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfSwitch(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch &&\n                 (<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList == this.asts[this.top - 0];\n        }\n\n        public isBodyOfModule(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfClass(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                 (<T";
var v27842 = v27843 + "ypeScript.ClassDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                 (<TypeScript.FuncDecl>this.asts[this.top - 1]).bod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfInterface(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration &&\n                 (<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];\n        }\n\n        public isBodyOfBlock(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 1]).statements == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFor(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.For &&\n                (<TypeScript.ForStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfCase(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case &&\n                (<TypeScript.CaseStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfTry(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try &&\n                (<TypeScript.Try>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfCatch(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch &&\n                (<TypeScript.Catch>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfDoWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile &&\n                (<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.While &&\n                (<TypeScript.WhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfForIn(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn &&\n                (<TypeScript.ForInStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfWith(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.With &&\n                (<TypeScript.WithStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isBodyOfFinally(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally &&\n                (<TypeScript.Finally>this.asts[this.top - 1]).body == this.asts[this.top - 0];\n        }\n\n        public isCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1];\n        }\n\n        public isDefaultCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0];\n        }\n\n        public isListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];\n        }\n\n        public isBodyOfObjectLit(): bool {\n            return this.isListOfObjectLit();\n        }\n\n        public isEmptyListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[t";
var v27841 = v27842 + "his.top - 1]).operand == this.asts[this.top - 0] &&\n                (<TypeScript.ASTList>this.asts[this.top - 0]).members.length == 0;\n        }\n\n        public isMemberOfObjectLit(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand == this.asts[this.top - 1];\n        }\n\n        public isNameOfMemberOfObjectLit(): bool {\n            return this.count() >= 4 &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand == this.asts[this.top - 2];\n        }\n\n        public isListOfArrayLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];\n        }\n\n        public isTargetOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0];\n        }\n\n        public isMemberOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isItemOfList(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List;\n            //(<Tools.ASTList>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isThenOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod == this.asts[this.top - 0];\n        }\n\n        public isElseOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod == this.asts[this.top - 0];\n        }\n\n        public isBodyOfDefaultCase(): bool {\n            return this.isBodyOfCase();\n        }\n\n        public isSingleStatementList(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.ASTList>this.asts[this.top]).members.length === 1;\n        }\n\n        public isArgumentListOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentOfFunction(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1];\n        }\n\n        public isArgumentListOfCall(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentListOfNew(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.New &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isSynthesizedBlock(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false;\n        }\n    }\n\n    export function isValidAstNode(ast: Typ";
var v27840 = v27841 + 'eScript.ASTSpan): bool {\n        if (ast === null)\n            return false;\n\n        if (ast.minChar === -1 || ast.limChar === -1)\n            return false;\n\n        return true;\n    }\n\n    export class AstPathContext {\n        public path = new TypeScript.AstPath();\n    }\n\n    export enum GetAstPathOptions {\n        Default = 0,\n        EdgeInclusive = 1,\n        //We need this options dealing with an AST coming from an incomplete AST. For example:\n        //     class foo { // r\n        // If we ask for the AST at the position after the "r" character, we won\'t see we are \n        // inside a comment, because the "class" AST node has a limChar corresponding to the position of \n        // the "{" character, meaning we don\'t traverse the tree down to the stmt list of the class, meaning\n        // we don\'t find the "precomment" attached to the errorneous empty stmt.\n        //TODO: It would be nice to be able to get rid of this.\n        DontPruneSearchBasedOnPosition = 1 << 1,\n    }\n\n    ///\n    /// Return the stack of AST nodes containing "position"\n    ///\n    export function getAstPathToPosition(script: TypeScript.AST, pos: number, options = GetAstPathOptions.Default): TypeScript.AstPath {\n        var lookInComments = (comments: TypeScript.Comment[]) => {\n            if (comments && comments.length > 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    var minChar = comments[i].minChar;\n                    var limChar = comments[i].limChar;\n                    if (!comments[i].isBlockComment) {\n                        limChar++; // For single line comments, include 1 more character (for the newline)\n                    }\n                    if (pos >= minChar && pos < limChar) {\n                        ctx.path.push(comments[i]);\n                    }\n                }\n            }\n        }\n\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {\n            if (isValidAstNode(cur)) {\n\n                // Add "cur" to the stack if it contains our position\n                // For "identifier" nodes, we need a special case: A position equal to "limChar" is\n                // valid, since the position corresponds to a caret position (in between characters)\n                // For example:\n                //  bar\n                //  0123\n                // If "position == 3", the caret is at the "right" of the "r" character, which should be considered valid\n                var inclusive =\n                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||\n                    cur.nodeType === TypeScript.NodeType.Name ||\n                    pos === script.limChar; // Special "EOF" case\n\n                var minChar = cur.minChar;\n                var limChar = cur.limChar + (inclusive ? 1 : 0)\n                if (pos >= minChar && pos < limChar) {\n\n                    // TODO: Since AST is sometimes not correct wrt to position, only add "cur" if it\'s better\n                    //       than top of the stack.\n                    var previous = ctx.path.ast();\n                    if (previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {\n                        ctx.path.push(cur);\n                    }\n                    else {\n                        //logger.log("TODO: Ignoring node because minChar, limChar not better than previous node in stack");\n                    }\n                }\n\n                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually\n                if (pos < limChar) {\n                    lookInComments(cur.preComments);\n                }\n                if (pos >= minChar) {\n                    lookInComments(cur.postComments);\n                }\n\n                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {\n                    // Don\'t go further down the tree if pos is outside of [minChar, limChar]\n                    walker.options.goChildren = (minChar <= pos && pos <= limChar);\n                }\n            }\n            return cur;\n        }\n\n        var ctx = new AstPathContext();\n        TypeScript.getAstWalkerFactory().walk(script, pre, null, null, ctx);\n        return ctx.path;\n    }\n\n    //\n    // Find a source text offset that is safe for lexing tokens at the given position.\n    // This is used when "position" might be inside a comment or string, etc.\n    //\n    export function getTokenizationOffset(script: TypeScript.Script, position: number): number {\n        var bestOffset = 0;\n        var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker): TypeScript.AST => {\n            if (TypeScript.isValidAstNode(cur)) {\n                // Did we find a closer offset?\n                if (cur.minChar <= position) {\n                    bestOffset = max(bestOffset, cur.minChar);\n                }\n\n                // Stop the walk if this node is not related to ';
var v27839 = v27840 + '"minChar"\n                if (cur.minChar > position || cur.limChar < bestOffset) {\n                    walker.options.goChildren = false;\n                }\n            }\n\n            return cur;\n        }\n\n        TypeScript.getAstWalkerFactory().walk(script, pre);\n        return bestOffset;\n    }\n\n    ///\n    /// Simple function to Walk an AST using a simple callback function.\n    ///\n    export function walkAST(ast: TypeScript.AST, callback: (path: AstPath, walker: TypeScript.IAstWalker) => void ): void {\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.push(cur);\n            callback(path, walker);\n            return cur;\n        }\n        var post = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.pop();\n            return cur;\n        }\n\n        var path = new AstPath();\n        TypeScript.getAstWalkerFactory().walk(ast, pre, post, null, path);\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ASTSpan {\n        public minChar: number = -1;  // -1 = "undefined" or "compiler generated"\n        public limChar: number = -1;  // -1 = "undefined" or "compiler generated"   \n    }\n\n    export class AST extends ASTSpan {\n        public type: Type = null;\n        public flags = ASTFlags.Writeable;\n\n        // REVIEW: for diagnostic purposes\n        public passCreated: number = CompilerDiagnostics.analysisPass;\n\n        public preComments: Comment[] = null;\n        public postComments: Comment[] = null;\n        private docComments: Comment[] = null;\n\n        public isParenthesized = false;\n\n        constructor (public nodeType: NodeType) {\n            super();\n        }\n\n        public isExpression() { return false; }\n\n        public isStatementOrExpression() { return false; }\n\n        public isCompoundStatement() { return false; }\n\n        public isLeaf() { return this.isStatementOrExpression() && (!this.isCompoundStatement()); }\n        \n        public isDeclaration() { return false; }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Error:\n                case NodeType.EmptyExpr:\n                    this.type = typeFlow.anyType;\n                    break;\n                case NodeType.This:\n                    return typeFlow.typeCheckThis(this);\n                case NodeType.Null:\n                    this.type = typeFlow.nullType;\n                    break;\n                case NodeType.False:\n                case NodeType.True:\n                    this.type = typeFlow.booleanType;\n                    break;\n                case NodeType.Super:\n                    return typeFlow.typeCheckSuper(this);\n                case NodeType.EndCode:\n                case NodeType.Empty:\n                case NodeType.Void:\n                    this.type = typeFlow.voidType;\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            switch (this.nodeType) {\n                case NodeType.This:\n                    emitter.recordSourceMappingStart(this);\n                    if (emitter.thisFnc && (hasFlag(emitter.thisFnc.fncFlags, FncFlags.IsFatArrowFunction))) {\n                        emitter.writeToOutput("_this");\n                    }\n                    else {\n                        emitter.writeToOutput("this");\n                    }\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Null:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("null");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.False:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("false");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.True';
var v27838 = v27839 + ':\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("true");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Super:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.emitSuperReference();\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.EndCode:\n                case NodeType.Error:\n                case NodeType.EmptyExpr:\n                    break;\n                case NodeType.Empty:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Void:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput("void ");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public print(context: PrintContext) {\n            context.startLine();\n            var lineCol = { line: -1, col: -1 };\n            var limLineCol = { line: -1, col: -1 };\n            if (context.parser !== null) {\n                context.parser.getSourceLineCol(lineCol, this.minChar);\n                context.parser.getSourceLineCol(limLineCol, this.limChar);\n                context.write("(" + lineCol.line + "," + lineCol.col + ")--" +\n                              "(" + limLineCol.line + "," + limLineCol.col + "): ");\n            }\n            var lab = this.printLabel();\n            if (hasFlag(this.flags, ASTFlags.Error)) {\n                lab += " (Error)";\n            }\n            context.writeLine(lab);\n        }\n\n        public printLabel() {\n            if (nodeTypeTable[this.nodeType] !== undefined) {\n                return nodeTypeTable[this.nodeType];\n            }\n            else {\n                return (<any>NodeType)._map[this.nodeType];\n            }\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            // by default, AST adds itself to current basic block and does not check its children\n            context.walker.options.goChildren = false;\n            context.addContent(this);\n        }\n\n        public netFreeUses(container: Symbol, freeUses: StringHashTable) {\n        }\n\n        public treeViewLabel() {\n            return (<any>NodeType)._map[this.nodeType];\n        }\n\n        public static getResolvedIdentifierName(name: string): string {\n            if (!name) return "";\n\n            var resolved = "";\n            var start = 0;\n            var i = 0;\n            while(i <= name.length - 6) {\n                // Look for escape sequence \\uxxxx\n                if (name.charAt(i) == \'\\\\\' && name.charAt(i+1) == \'u\') {\n                    var charCode = parseInt(name.substr(i + 2, 4), 16);\n                    resolved += name.substr(start, i - start);\n                    resolved += String.fromCharCode(charCode);\n                    i += 6;\n                    start = i;\n                    continue;\n                } \n                i++;\n            }\n            // Append remaining string\n            resolved += name.substring(start);\n            return resolved;\n        }\n\n        public getDocComments() : Comment[] {\n            if (!this.isDeclaration() || !this.preComments || this.preComments.length == 0) {\n                return [];\n            }\n\n            if (!this.docComments) {\n                var preCommentsLength = this.preComments.length;\n                var docComments: Comment[] = [];\n                for (var i = preCommentsLength - 1; i >= 0; i--) {\n                    if (this.preComments[i].isDocComment()) {\n                        var prevDocComment = docComments.length > 0 ? docComments[docComments.length - 1] : null;\n                        if (prevDocComment == null || // If the help comments were not yet set then this is the comment\n                             (this.preComments[i].limLine == prevDocComment.minLine ||\n                              this.preComments[i].limLine + 1 == prevDocComment.minLine)) { // On same line or next line\n                            docComments.push(this.preComments[i]);\n                            continue;\n                        }\n                    }\n                    break;\n                }\n\n                this.docComments = docComments.reverse();\n            }\n\n            return this.docComments;\n        }\n    }\n\n    export class IncompleteAST extends AST {\n        constructor (min: number, lim: number) {\n            super(NodeType.Error);\n\n            this.minChar = min;\n            this.limChar = lim;\n        }\n    }\n\n    export class ASTList extends AST {\n        public enclosingScope: SymbolScope = null;\n        publ';
var v27837 = v27838 + "ic members: AST[] = new AST[];\n\n        constructor () {\n            super(NodeType.List);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var len = this.members.length;\n            for (var i = 0; i < len; i++) {\n                if (context.noContinuation) {\n                    context.addUnreachable(this.members[i]);\n                    break;\n                }\n                else {\n                    this.members[i] = context.walk(this.members[i], this);\n                }\n            }\n            context.walker.options.goChildren = false;\n        }\n\n        public append(ast: AST) {\n            this.members[this.members.length] = ast;\n            return this;\n        }\n\n        public appendAll(ast: AST) {\n            if (ast.nodeType == NodeType.List) {\n                var list = <ASTList>ast;\n                for (var i = 0, len = list.members.length; i < len; i++) {\n                    this.append(list.members[i]);\n                }\n            }\n            else {\n                this.append(ast);\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascriptList(this, null, TokenID.Semicolon, startLine, false, false);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.members.length;\n            typeFlow.nestingLevel++;\n            for (var i = 0; i < len; i++) {\n                if (this.members[i]) {\n                    this.members[i] = this.members[i].typeCheck(typeFlow);\n                }\n            }\n            typeFlow.nestingLevel--;\n            return this;\n        }\n    }\n\n    export class Identifier extends AST {\n        public sym: Symbol = null;\n        public cloId = -1;\n        public text: string;\n\n        // 'actualText' is the text that the user has entered for the identifier. the text might \n        // include any Unicode escape sequences (e.g.: \\u0041 for 'A'). 'text', however, contains \n        // the resolved value of any escape sequences in the actual text; so in the previous \n        // example, actualText = '\\u0041', text = 'A'.\n        //\n        // For purposes of finding a symbol, use text, as this will allow you to match all \n        // variations of the variable text. For full-fidelity translation of the user input, such\n        // as emitting, use the actualText field.\n        // \n        // Note: \n        //    To change text, and to avoid running into a situation where 'actualText' does not \n        //    match 'text', always use setText.\n        constructor (public actualText: string, public hasEscapeSequence?: bool) {\n            super(NodeType.Name);\n            this.setText(actualText, hasEscapeSequence);\n        }\n\n        public setText(actualText: string, hasEscapeSequence?: bool) {\n            this.actualText = actualText;\n            if (hasEscapeSequence) {\n                this.text = AST.getResolvedIdentifierName(actualText);\n            }\n            else {\n                this.text = actualText;\n            }\n        }\n\n        public isMissing() { return false; }\n        public isLeaf() { return true; }\n\n        public treeViewLabel() {\n            return \"id: \" + this.actualText;\n        }\n\n        public printLabel() {\n            if (this.actualText) {\n                return \"id: \" + this.actualText;\n            }\n            else {\n                return \"name node\";\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckName(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptName(this, true);\n        }\n\n        public static fromToken(token: Token): Identifier {\n            return new Identifier(token.getText(), (<IdentifierToken>token).hasEscapeSequence);\n        }\n    }\n\n    export class MissingIdentifier extends Identifier {\n        constructor () {\n            super(\"__missing\");\n        }\n\n        public isMissing() {\n            return true;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            // Emit nothing for a missing ID\n        }\n    }\n\n    export class Label extends AST {\n        constructor (public id: Identifier) {\n            super(NodeType.Label);\n        }\n\n        public printLabel() { return this.id.actualText + \":\"; }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.recordSourceMappingStart(this.id);\n            emitter.writeToOutput(this.id.actualText);\n            emitter.recordSourceMappingEnd(this.id);";
var v27836 = v27837 + '\n            emitter.writeLineToOutput(":");\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class Expression extends AST {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public isExpression() { return true; }\n\n        public isStatementOrExpression() { return true; }\n    }\n\n    export class UnaryExpression extends Expression {\n        public targetType: Type = null; // Target type for an object literal (null if no target type)\n        public castTerm: AST = null;\n\n        constructor (nodeType: NodeType, public operand: AST) {\n            super(nodeType);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            // TODO: add successor as catch block/finally block if present\n            if (this.nodeType == NodeType.Throw) {\n                context.returnStmt();\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Not:\n                    return typeFlow.typeCheckBitNot(this);\n\n                case NodeType.LogNot:\n                    return typeFlow.typeCheckLogNot(this);\n\n                case NodeType.Pos:\n                case NodeType.Neg:\n                    return typeFlow.typeCheckUnaryNumberOperator(this);\n\n                case NodeType.IncPost:\n                case NodeType.IncPre:\n                case NodeType.DecPost:\n                case NodeType.DecPre:\n                    return typeFlow.typeCheckIncOrDec(this);\n\n                case NodeType.ArrayLit:\n                    typeFlow.typeCheckArrayLit(this);\n                    return this;\n\n                case NodeType.ObjectLit:\n                    typeFlow.typeCheckObjectLit(this);\n                    return this;\n\n                case NodeType.Throw:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.voidType;\n                    return this;\n\n                case NodeType.Typeof:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.stringType;\n                    return this;\n\n                case NodeType.Delete:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.booleanType;\n                    break;\n\n                case NodeType.TypeAssertion:\n                    this.castTerm = typeFlow.typeCheck(this.castTerm);\n                    var applyTargetType = !this.operand.isParenthesized;\n\n                    var targetType = applyTargetType ? this.castTerm.type : null;\n\n                    typeFlow.checker.typeCheckWithContextualType(targetType, typeFlow.checker.inProvisionalTypecheckMode(), true, this.operand);\n                    typeFlow.castWithCoercion(this.operand, this.castTerm.type, false, true);\n                    this.type = this.castTerm.type;\n                    return this;\n\n                case NodeType.Void:\n                    // REVIEW - Although this is good to do for completeness\'s sake,\n                    // this shouldn\'t be strictly necessary from the void operator\'s\n                    // point of view\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.checker.undefinedType;\n                    break;\n\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            switch (this.nodeType) {\n                case NodeType.IncPost:\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    emitter.writeToOutput("++");\n                    break;\n                case NodeType.LogNot:\n                    emitter.writeToOutput("!");\n                    emitter.emitJavascript(this.operand, TokenID.Exclamation, false);\n                    break;\n                case NodeType.DecPost:\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    emitter.writeToOutput("--");\n                    break;\n                case NodeType.ObjectLit:\n                    emitter.emitObjectLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.ArrayLit:\n                    emitter.emitArrayLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.Not:\n                    emitter.writeToOutput("~");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Neg:\n                    emitter.writeToOutput("-"';
var v27835 = v27836 + ');\n                    if (this.operand.nodeType == NodeType.Neg) {\n                        this.operand.isParenthesized = true;\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Minus, false);\n                    break;\n                case NodeType.Pos:\n                    emitter.writeToOutput("+");\n                    if (this.operand.nodeType == NodeType.Pos) {\n                        this.operand.isParenthesized = true;\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Plus, false);\n                    break;\n                case NodeType.IncPre:\n                    emitter.writeToOutput("++");\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    break;\n                case NodeType.DecPre:\n                    emitter.writeToOutput("--");\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    break;\n                case NodeType.Throw:\n                    emitter.writeToOutput("throw ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    emitter.writeToOutput(";");\n                    break;\n                case NodeType.Typeof:\n                    emitter.writeToOutput("typeof ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Delete:\n                    emitter.writeToOutput("delete ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Void:\n                    emitter.writeToOutput("void ");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.TypeAssertion:\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class CallExpression extends Expression {\n        constructor (nodeType: NodeType,\n                     public target: AST,\n                     public arguments: ASTList) {\n            super(nodeType);\n            this.minChar = this.target.minChar;\n        }\n\n        public signature: Signature = null;\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (this.nodeType == NodeType.New) {\n                return typeFlow.typeCheckNew(this);\n            }\n            else {\n                return typeFlow.typeCheckCall(this);\n            }\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n\n            if (this.nodeType == NodeType.New) {\n                emitter.emitNew(this.target, this.arguments);\n            }\n            else {\n                emitter.emitCall(this, this.target, this.arguments);\n            }\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class BinaryExpression extends Expression {\n        constructor (nodeType: NodeType, public operand1: AST, public operand2: AST) {\n            super(nodeType);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Dot:\n                    return typeFlow.typeCheckDotOperator(this);\n                case NodeType.Asg:\n                    return typeFlow.typeCheckAsgOperator(this);\n                case NodeType.Add:\n                case NodeType.Sub:\n                case NodeType.Mul:\n                case NodeType.Div:\n                case NodeType.Mod:\n                case NodeType.Or:\n                case NodeType.And:\n                    return typeFlow.typeCheckArithmeticOperator(this, false);\n                case NodeType.Xor:\n                    return typeFlow.typeCheckBitwiseOperator(this, false);\n                case NodeType.Ne:\n                case NodeType.Eq:\n                    var text: string;\n                    if (typeFlow.checker.styleSettings.eqeqeq) {\n                        text = nodeTypeTable[this.nodeType];\n                        typeFlow.checker.errorReporter.styleError(this, "use of " + text);\n                    }\n                    else if (typeFlow.checker.styleSettings.eqnull) {\n                        text = nodeTypeTable[this.nodeType];\n                        if ((this.operand2 !== null) && (this.operand2.nodeType == NodeType.Null)) {\n                            typeFlow.checker.errorReporter.styleError(this, "use of " + text + " to compare with null");\n                        }\n                    }\n         ';
var v27834 = v27835 + '       case NodeType.Eqv:\n                case NodeType.NEqv:\n                case NodeType.Lt:\n                case NodeType.Le:\n                case NodeType.Ge:\n                case NodeType.Gt:\n                    return typeFlow.typeCheckBooleanOperator(this);\n                case NodeType.Index:\n                    return typeFlow.typeCheckIndex(this);\n                case NodeType.Member:\n                    this.type = typeFlow.voidType;\n                    return this;\n                case NodeType.LogOr:\n                    return typeFlow.typeCheckLogOr(this);\n                case NodeType.LogAnd:\n                    return typeFlow.typeCheckLogAnd(this);\n                case NodeType.AsgAdd:\n                case NodeType.AsgSub:\n                case NodeType.AsgMul:\n                case NodeType.AsgDiv:\n                case NodeType.AsgMod:\n                case NodeType.AsgOr:\n                case NodeType.AsgAnd:\n                    return typeFlow.typeCheckArithmeticOperator(this, true);\n                case NodeType.AsgXor:\n                    return typeFlow.typeCheckBitwiseOperator(this, true);\n                case NodeType.Lsh:\n                case NodeType.Rsh:\n                case NodeType.Rs2:\n                    return typeFlow.typeCheckShift(this, false);\n                case NodeType.AsgLsh:\n                case NodeType.AsgRsh:\n                case NodeType.AsgRs2:\n                    return typeFlow.typeCheckShift(this, true);\n                case NodeType.Comma:\n                    return typeFlow.typeCheckCommaOperator(this);\n                case NodeType.InstOf:\n                    return typeFlow.typeCheckInstOf(this);\n                case NodeType.In:\n                    return typeFlow.typeCheckInOperator(this);\n                case NodeType.From:\n                    typeFlow.checker.errorReporter.simpleError(this, "Illegal use of \'from\' keyword in binary expression");\n                    break;\n                default:\n                    throw new Error("please implement in derived class");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            var binTokenId = nodeTypeToTokTable[this.nodeType];\n\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (binTokenId != undefined) {\n\n                emitter.emitJavascript(this.operand1, binTokenId, false);\n\n                if (tokenTable[binTokenId].text == "instanceof") {\n                    emitter.writeToOutput(" instanceof ");\n                }\n                else if (tokenTable[binTokenId].text == "in") {\n                    emitter.writeToOutput(" in ");\n                }\n                else {\n                    emitter.writeToOutputTrimmable(" " + tokenTable[binTokenId].text + " ");\n                }\n\n                emitter.emitJavascript(this.operand2, binTokenId, false);\n            }\n            else {\n                switch (this.nodeType) {\n                    case NodeType.Dot:\n                        if (!emitter.tryEmitConstant(this)) {\n                            emitter.emitJavascript(this.operand1, TokenID.Dot, false);\n                            emitter.writeToOutput(".");\n                            emitter.emitJavascriptName(<Identifier>this.operand2, false);\n                        }\n                        break;\n                    case NodeType.Index:\n                        emitter.emitIndex(this.operand1, this.operand2);\n                        break;\n\n                    case NodeType.Member:\n                        if (this.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>this.operand2).isAccessor()) {\n                            var funcDecl = <FuncDecl>this.operand2;\n                            if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                                emitter.writeToOutput("get ");\n                            }\n                            else {\n                                emitter.writeToOutput("set ");\n                            }\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                        }\n                        else {\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                            emitter.writeToOutputTrimmable(": ");\n                        }\n                        emitter.emitJavascript(this.operand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Comma:\n                        emitter.emitJavascript(this.operand1, TokenID.Comma, false);\n                        if (emitter.emitState.inObjectLiteral) {\n                            emitter.writeLineToOutput(", ");\n                        }\n                        else {\n                            emitter.writeToOutput(",");\n                        }\n                        emitter.emitJavascript(this.op';
var v27833 = v27834 + 'erand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Is:\n                        throw new Error("should be de-sugared during type check");\n                    default:\n                        throw new Error("please implement in derived class");\n                }\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class ConditionalExpression extends Expression {\n        constructor (public operand1: AST,\n                     public operand2: AST,\n                     public operand3: AST) {\n            super(NodeType.ConditionalExpression);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckQMark(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.operand1, TokenID.Question, false);\n            emitter.writeToOutput(" ? ");\n            emitter.emitJavascript(this.operand2, TokenID.Question, false);\n            emitter.writeToOutput(" : ");\n            emitter.emitJavascript(this.operand3, TokenID.Question, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class NumberLiteral extends Expression {\n        constructor (public value: number, public hasEmptyFraction?: bool) {\n            super(NodeType.NumberLit);\n        }\n\n        public isNegativeZero = false;\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.doubleType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return "num: " + this.printLabel();\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.isNegativeZero) {\n                emitter.writeToOutput("-");\n            }\n\n            emitter.writeToOutput(this.value.toString());\n\n            if (this.hasEmptyFraction)\n                emitter.writeToOutput(".0");\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public printLabel() {\n            if (Math.floor(this.value) != this.value) {\n                return this.value.toFixed(2).toString();\n            }\n            else if (this.hasEmptyFraction) {\n                return this.value.toString() + ".0";\n            }\n            else {\n                return this.value.toString();\n            }\n        }\n    }\n\n    export class RegexLiteral extends Expression {\n        constructor (public regex) {\n            super(NodeType.Regex);\n        }\n        \n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.regexType;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.regex.toString());\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class StringLiteral extends Expression {\n        constructor (public text: string) {\n            super(NodeType.QString);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitStringLiteral(this.text);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.stringType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return "st: " + this.text;\n        }\n\n        public printLabel() {\n            return this.text;\n        }\n    }\n\n    export class ModuleElement extends AST {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n    }\n\n    export class ImportDeclaration extends ModuleElement {\n        public isStatementOrExpression() { return true; }\n        public varFlags = VarFlags.None;\n        public isDynamicImport = false;\n        public isDeclaration() { return true; }\n\n        constructor (public id: Identifier, public alias: AST) {\n            super(NodeType.ImportDeclaration);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            var mod = <ModuleType>this.alias.type;\n            // REVIEW: Only modules may be aliased for now, though there\'s no real\n            // restriction on what the typ';
var v27832 = v27833 + 'e symbol may be\n            if (!this.isDynamicImport || (this.id.sym && !(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef)) {\n                var prevModAliasId = emitter.modAliasId;\n                var prevFirstModAlias = emitter.firstModAlias;\n\n                emitter.recordSourceMappingStart(this);\n                emitter.emitParensAndCommentsInPlace(this, true);\n                emitter.writeToOutput("var " + this.id.actualText + " = ");\n                emitter.modAliasId = this.id.actualText;\n                emitter.firstModAlias = this.firstAliasedModToString();\n                emitter.emitJavascript(this.alias, TokenID.Tilde, false);\n                // the dynamic import case will insert the semi-colon automatically\n                if (!this.isDynamicImport) {\n                    emitter.writeToOutput(";");\n                }\n                emitter.emitParensAndCommentsInPlace(this, false);\n                emitter.recordSourceMappingEnd(this);\n\n                emitter.modAliasId = prevModAliasId;\n                emitter.firstModAlias = prevFirstModAlias;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckImportDecl(this);\n        }\n\n        public getAliasName(aliasAST?: AST = this.alias) : string {\n            if (aliasAST.nodeType == NodeType.Name) {\n                return (<Identifier>aliasAST).actualText;\n            } else {\n                var dotExpr = <BinaryExpression>aliasAST;\n                return this.getAliasName(dotExpr.operand1) + "." + this.getAliasName(dotExpr.operand2);\n            }\n        }\n\n        public firstAliasedModToString() {\n            if (this.alias.nodeType == NodeType.Name) {\n                return (<Identifier>this.alias).actualText;\n            }\n            else {\n                var dotExpr = <BinaryExpression>this.alias;\n                var firstMod = <Identifier>dotExpr.operand1;\n                return firstMod.actualText;\n            }\n        }\n    }\n\n    export class BoundDecl extends AST {\n        public init: AST = null;\n        public typeExpr: AST = null;\n        public varFlags = VarFlags.None;\n        public sym: Symbol = null;\n        public isDeclaration() { return true; }\n\n        constructor (public id: Identifier, nodeType: NodeType, public nestingLevel: number) {\n            super(nodeType);\n        }\n\n        public isStatementOrExpression() { return true; }\n\n        public isPrivate() { return hasFlag(this.varFlags, VarFlags.Private); }\n        public isPublic() { return hasFlag(this.varFlags, VarFlags.Public); }\n        public isProperty() { return hasFlag(this.varFlags, VarFlags.Property); }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckBoundDecl(this);\n        }\n\n        public printLabel() {\n            return this.treeViewLabel();\n        }\n    }\n\n    export class VarDecl extends BoundDecl {\n        constructor (id: Identifier, nest: number) {\n            super(id, NodeType.VarDecl, nest);\n        }\n\n        public isAmbient() { return hasFlag(this.varFlags, VarFlags.Ambient); }\n        public isExported() { return hasFlag(this.varFlags, VarFlags.Exported); }\n        public isStatic() { return hasFlag(this.varFlags, VarFlags.Static); }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptVarDecl(this, tokenId);\n        }\n\n        public treeViewLabel() {\n            return "var " + this.id.actualText;\n        }\n    }\n\n    export class ArgDecl extends BoundDecl {\n        constructor (id: Identifier) {\n            super(id, NodeType.ArgDecl, 0);\n        }\n\n        public isOptional = false;\n\n        public isOptionalArg() { return this.isOptional || this.init; }\n\n        public treeViewLabel() {\n            return "arg: " + this.id.actualText;\n        }\n\n        public parameterPropertySym: FieldSymbol = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.id.actualText);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    var internalId = 0;\n\n    export class FuncDecl extends AST {\n        public hint: string = null;\n        public fncFlags = FncFlags.None;\n        public returnTypeAnnotation: AST = null;\n        public symbols: IHashTable;\n        public variableArgList = false;\n        public signature: Signature;\n        public envids: Identifier[];\n        public jumpRefs: Identifier[] = null;\n        public internalNameCache: string = null;\n        public tmp1Declared = false;\n        public enclosingFnc: FuncDecl = null;\n        public freeVariables: Symbol[] = [];\n        public unitIndex = -1;\n        public classDecl: NamedDeclaration = null;\n        public boundToProperty: VarDecl = null;\n        public isOverload = fa';
var v27831 = v27832 + 'lse;\n        public innerStaticFuncs: FuncDecl[] = [];\n        public isTargetTypedAsMethod = false;\n        public isInlineCallLiteral = false;\n        public accessorSymbol: Symbol = null;\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public returnStatementsWithExpressions: ReturnStatement[] = [];\n        public scopeType: Type = null; // Type of the FuncDecl, before target typing\n        public endingToken: ASTSpan = null;\n        public isDeclaration() { return true; }\n\n        constructor (public name: Identifier, public bod: ASTList, public isConstructor: bool,\n                     public arguments: ASTList, public vars: ASTList, public scopes: ASTList, public statics: ASTList,\n                     nodeType: number) {\n\n            super(nodeType);\n        }\n\n        public internalName(): string {\n            if (this.internalNameCache == null) {\n                var extName = this.getNameText();\n                if (extName) {\n                    this.internalNameCache = "_internal_" + extName;\n                }\n                else {\n                    this.internalNameCache = "_internal_" + internalId++;\n                }\n            }\n            return this.internalNameCache;\n        }\n\n        public hasSelfReference() { return hasFlag(this.fncFlags, FncFlags.HasSelfReference); }\n        public setHasSelfReference() { this.fncFlags |= FncFlags.HasSelfReference; }\n\n        public hasSuperReferenceInFatArrowFunction() { return hasFlag(this.fncFlags, FncFlags.HasSuperReferenceInFatArrowFunction); }\n        public setHasSuperReferenceInFatArrowFunction() { this.fncFlags |= FncFlags.HasSuperReferenceInFatArrowFunction; }\n\n        public addCloRef(id: Identifier, sym: Symbol): number {\n            if (this.envids == null) {\n                this.envids = new Identifier[];\n            }\n            this.envids[this.envids.length] = id;\n            var outerFnc = this.enclosingFnc;\n            if (sym) {\n                while (outerFnc && (outerFnc.type.symbol != sym.container)) {\n                    outerFnc.addJumpRef(sym);\n                    outerFnc = outerFnc.enclosingFnc;\n                }\n            }\n            return this.envids.length - 1;\n        }\n\n        public addJumpRef(sym: Symbol): void {\n            if (this.jumpRefs == null) {\n                this.jumpRefs = new Identifier[];\n            }\n            var id = new Identifier(sym.name);\n            this.jumpRefs[this.jumpRefs.length] = id;\n            id.sym = sym;\n            id.cloId = this.addCloRef(id, null);\n        }\n\n        public buildControlFlow(): ControlFlowContext {\n            var entry = new BasicBlock();\n            var exit = new BasicBlock();\n\n            var context = new ControlFlowContext(entry, exit);\n\n            var controlFlowPrefix = (ast: AST, parent: AST, walker: IAstWalker) => {\n                ast.addToControlFlow(walker.state);\n                return ast;\n            }\n\n            var walker = getAstWalkerFactory().getWalker(controlFlowPrefix, null, null, context);\n            context.walker = walker;\n            walker.walk(this.bod, this);\n\n            return context;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFunction(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptFunction(this);\n        }\n\n        public getNameText() {\n            if (this.name) {\n                return this.name.actualText;\n            }\n            else {\n                return this.hint;\n            }\n        }\n\n        public isMethod() {\n            return (this.fncFlags & FncFlags.Method) != FncFlags.None;\n        }\n\n        public isCallMember() { return hasFlag(this.fncFlags, FncFlags.CallMember); }\n        public isConstructMember() { return hasFlag(this.fncFlags, FncFlags.ConstructMember); }\n        public isIndexerMember() { return hasFlag(this.fncFlags, FncFlags.IndexerMember); }\n        public isSpecialFn() { return this.isCallMember() || this.isIndexerMember() || this.isConstructMember(); }\n        public isAnonymousFn() { return this.name === null; }\n        public isAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor) || hasFlag(this.fncFlags, FncFlags.SetAccessor); }\n        public isGetAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor); }\n        public isSetAccessor() { return hasFlag(this.fncFlags, FncFlags.SetAccessor); }\n        public isAmbient() { return hasFlag(this.fncFlags, FncFlags.Ambient); }\n        public isExported() { return hasFlag(this.fncFlags, FncFlags.Exported); }\n        public isPrivate() { return hasFlag(this.fncFlags, FncFlags.Private); }\n        public isPublic() { return hasFlag(this.fncFlags, FncFlags.Public); }\n        public isStatic() { return hasFlag(this.fncFlags, FncFlags.Static); }\n\n        public treeViewLabel() {\n            if (this.name == null) {\n                return "funcExpr";\n      ';
var v27830 = v27831 + '      }\n            else {\n                return "func: " + this.name.actualText\n            }\n        }\n\n        public ClearFlags(): void {\n            this.fncFlags = FncFlags.None;\n        }\n\n        public isSignature() { return (this.fncFlags & FncFlags.Signature) != FncFlags.None; }\n    }\n\n    export class LocationInfo {\n        constructor (public filename: string, public lineMap: number[], public unitIndex) { }\n    }\n\n    export var unknownLocationInfo = new LocationInfo("unknown", null, -1);\n\n    export class Script extends FuncDecl {\n        public locationInfo: LocationInfo = null;\n        public referencedFiles: IFileReference[] = [];\n        public requiresGlobal = false;\n        public requiresExtendsBlock = false;\n        public isResident = false;\n        public isDeclareFile = false;\n        public hasBeenTypeChecked = false;\n        public topLevelMod: ModuleDeclaration = null;\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public vars: ASTList;\n        public scopes: ASTList;\n        // Remember if the script contains Unicode chars, that is needed when generating code for this script object to decide the output file correct encoding.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n        public cachedEmitRequired: bool;\n\n        private setCachedEmitRequired(value: bool) {\n            this.cachedEmitRequired = value;\n            return this.cachedEmitRequired;\n        }\n\n        constructor (vars: ASTList, scopes: ASTList) {\n            super(new Identifier("script"), null, false, null, vars, scopes, null, NodeType.Script);\n            this.vars = vars;\n            this.scopes = scopes;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckScript(this);\n        }\n\n        public treeViewLabel() {\n            return "Script";\n        }\n\n        public emitRequired(emitOptions: EmitOptions) {\n            if (this.cachedEmitRequired != undefined) {\n                return this.cachedEmitRequired;\n            }\n\n            if (!this.isDeclareFile && !this.isResident && this.bod) {\n                if (this.bod.members.length == 0) {\n                    // allow empty files that are not declare files \n                    return this.setCachedEmitRequired(true);\n                }\n\n                for (var i = 0, len = this.bod.members.length; i < len; i++) {\n                    var stmt = this.bod.members[i];\n                    if (stmt.nodeType == NodeType.ModuleDeclaration) {\n                        if (!hasFlag((<ModuleDeclaration>stmt).modFlags, ModuleFlags.ShouldEmitModuleDecl | ModuleFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.ClassDeclaration) {\n                        if (!hasFlag((<ClassDeclaration>stmt).varFlags, VarFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.VarDecl) {\n                        if (!hasFlag((<VarDecl>stmt).varFlags, VarFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType == NodeType.FuncDecl) {\n                        if (!(<FuncDecl>stmt).isSignature()) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType != NodeType.InterfaceDeclaration && stmt.nodeType != NodeType.Empty) {\n                        return this.setCachedEmitRequired(true);\n                    }\n                }\n\n                if ( emitOptions.emitComments &&\n                    ((this.bod.preComments && this.bod.preComments.length > 0) || (this.bod.postComments && this.bod.postComments.length > 0))) {\n                    return this.setCachedEmitRequired(true);\n                }\n            }\n            return this.setCachedEmitRequired(false);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (this.emitRequired(emitter.emitOptions)) {\n                emitter.emitParensAndCommentsInPlace(this.bod, true);\n                emitter.emitJavascriptList(this.bod, null, TokenID.Semicolon, true, false, false, true, this.requiresExtendsBlock);\n                emitter.emitParensAndCommentsInPlace(this.bod, false);\n            }\n        }\n\n        private externallyVisibleImportedSymbols: Symbol[] = [];\n\n        public AddExternallyVisibleImportedSymbol(symbol: Symbol, checker: TypeChecker) {\n            if (this.isExternallyVisibleSymbol(symbol)) {\n                return;\n            }\n\n            // Before adding check if the external symbol is also marked for visibility\n            if (!symbol.getType().symbol.isExter';
var v27829 = v27830 + 'nallyVisible(checker)) {\n                // Report error\n                var quotes = "";\n                var moduleName = symbol.getType().symbol.prettyName;\n                if (!isQuoted(moduleName)) {\n                    quotes = "\'";\n                }\n                checker.errorReporter.simpleError(symbol.declAST, "Externally visible import statement uses non exported module " + quotes + moduleName + quotes);\n            }\n            this.externallyVisibleImportedSymbols.push(symbol);\n        }\n\n        public isExternallyVisibleSymbol(symbol: Symbol) {\n            for (var i = 0 ; i < this.externallyVisibleImportedSymbols.length; i++) {\n                if (this.externallyVisibleImportedSymbols[i] == symbol) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    export class NamedDeclaration extends ModuleElement {\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public isDeclaration() { return true; }\n\n        constructor (nodeType: NodeType,\n                     public name: Identifier,\n                     public members: ASTList) {\n            super(nodeType);\n        }\n    }\n\n    export class ModuleDeclaration extends NamedDeclaration {\n        public modFlags = ModuleFlags.ShouldEmitModuleDecl;\n        public mod: ModuleType;\n        public prettyName: string;\n        public amdDependencies: string[] = [];\n        public vars: ASTList;\n        public scopes: ASTList;\n        // Remember if the module contains Unicode chars, that is needed for dynamic module as we will generate a file for each.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n\n        constructor (name: Identifier, members: ASTList, vars: ASTList, scopes: ASTList, public endingToken: ASTSpan) {\n            super(NodeType.ModuleDeclaration, name, members);\n\n            this.vars = vars;\n            this.scopes = scopes;\n            this.prettyName = this.name.actualText;\n        }\n\n        public isExported() { return hasFlag(this.modFlags, ModuleFlags.Exported); }\n        public isAmbient() { return hasFlag(this.modFlags, ModuleFlags.Ambient); }\n        public isEnum() { return hasFlag(this.modFlags, ModuleFlags.IsEnum); }\n\n        public recordNonInterface() {\n            this.modFlags &= ~ModuleFlags.ShouldEmitModuleDecl;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckModule(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (!hasFlag(this.modFlags, ModuleFlags.ShouldEmitModuleDecl)) {\n                emitter.emitParensAndCommentsInPlace(this, true);\n                emitter.emitJavascriptModule(this);\n                emitter.emitParensAndCommentsInPlace(this, false);\n            }\n        }\n    }\n\n    export class TypeDeclaration extends NamedDeclaration {\n        public varFlags = VarFlags.None;\n\n        constructor (nodeType: NodeType,\n                     name: Identifier,\n                     public extendsList: ASTList,\n                     public implementsList: ASTList,\n                     members: ASTList) {\n            super(nodeType, name, members);\n        }\n\n        public isExported() { \n            return hasFlag(this.varFlags, VarFlags.Exported);\n        }\n\n        public isAmbient() {\n            return hasFlag(this.varFlags, VarFlags.Ambient);\n        }\n    }\n\n    export class ClassDeclaration extends TypeDeclaration {\n        public knownMemberNames: any = {};\n        public constructorDecl: FuncDecl = null;\n        public constructorNestingLevel = 0;\n        public endingToken: ASTSpan = null;\n\n        constructor (name: Identifier,\n                     members: ASTList,\n                     extendsList: ASTList,\n                     implementsList: ASTList) {\n            super(NodeType.ClassDeclaration, name, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckClass(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptClass(this);\n        }\n    }\n\n    export class InterfaceDeclaration extends TypeDeclaration {\n        constructor (name: Identifier,\n                     members: ASTList,\n                     extendsList: ASTList,\n                     implementsList: ASTList) {\n            super(NodeType.InterfaceDeclaration, name, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckInterface(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n        }\n    }\n\n    export class Statement extends ModuleElement {\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n            this.flags |= ASTFlags.IsStatement;\n        }\n\n        public isLoop() { return false; }\n\n        public i';
var v27828 = v27829 + 'sStatementOrExpression() { return true; }\n\n        public isCompoundStatement() { return this.isLoop(); }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.voidType;\n            return this;\n        }\n    }\n\n    export class LabeledStatement extends Statement {\n        constructor (public labels: ASTList, public stmt: AST) {\n            super(NodeType.LabeledStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.labels) {\n                var labelsLen = this.labels.members.length;\n                for (var i = 0; i < labelsLen; i++) {\n                    this.labels.members[i].emit(emitter, tokenId, startLine);\n                }\n            }\n            this.stmt.emit(emitter, tokenId, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            typeFlow.typeCheck(this.labels);\n            this.stmt = this.stmt.typeCheck(typeFlow);\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var beforeBB = context.current;\n            var bb = new BasicBlock();\n            context.current = bb;\n            beforeBB.addSuccessor(bb);\n        }\n    }\n\n    export class Block extends Statement {\n        constructor (public statements: ASTList,\n                     public isStatementBlock: bool) {\n            super(NodeType.Block);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.isStatementBlock) {\n                emitter.writeLineToOutput(" {");\n                emitter.indenter.increaseIndent();\n            } else {\n                emitter.setInVarBlock(this.statements.members.length);\n            }\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.statements) {\n                emitter.emitJavascriptList(this.statements, null, TokenID.Semicolon, true, false, false);\n            }\n            if (this.isStatementBlock) {\n                emitter.indenter.decreaseIndent();\n                emitter.emitIndent();\n                emitter.writeToOutput("}");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var afterIfNeeded = new BasicBlock();\n            context.pushStatement(this, context.current, afterIfNeeded);\n            if (this.statements) {\n                context.walk(this.statements, this);\n            }\n            context.walker.options.goChildren = false;\n            context.popStatement();\n            if (afterIfNeeded.predecessors.length > 0) {\n                context.current.addSuccessor(afterIfNeeded);\n                context.current = afterIfNeeded;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (!typeFlow.checker.styleSettings.emptyBlocks) {\n                if ((this.statements === null) || (this.statements.members.length == 0)) {\n                    typeFlow.checker.errorReporter.styleError(this, "empty block");\n                }\n            }\n\n            typeFlow.typeCheck(this.statements);\n            return this;\n        }\n    }\n\n    export class Jump extends Statement {\n        public target: string = null;\n        public hasExplicitTarget() { return (this.target); }\n        public resolvedTarget: Statement = null;\n\n        constructor (nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public setResolvedTarget(parser: Parser, stmt: Statement): bool {\n            if (stmt.isLoop()) {\n                this.resolvedTarget = stmt;\n                return true;\n            }\n            if (this.nodeType === NodeType.Continue) {\n                parser.reportParseError("continue statement applies only to loops");\n                return false;\n            }\n            else {\n                if ((stmt.nodeType == NodeType.Switch) || this.hasExplicitTarget()) {\n                    this.resolvedTarget = stmt;\n                    return true;\n                }\n                else {\n                    parser.reportParseError("break statement with no label can apply only to a loop or switch statement");\n                    return false;\n                }\n            }\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.unconditionalBranch(this.resolvedTarget, (this.nodeType == NodeType.Continue));\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, s';
var v27827 = v27828 + 'tartLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.nodeType == NodeType.Break) {\n                emitter.writeToOutput("break");\n            }\n            else {\n                emitter.writeToOutput("continue");\n            }\n            if (this.hasExplicitTarget()) {\n                emitter.writeToOutput(" " + this.target);\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(";");\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n\n    export class WhileStatement extends Statement {\n        public body: AST = null;\n\n        constructor (public cond: AST) {\n            super(NodeType.While);\n        }\n\n        public isLoop() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("while(");\n            emitter.emitJavascript(this.cond, TokenID.While, false);\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, false);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            context.addContent(this.cond);\n            var condBlock = context.current;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            condBlock.addSuccessor(afterLoop);\n            // TODO: check for while (true) and then only continue if afterLoop has predecessors\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class DoWhileStatement extends Statement {\n        public body: AST = null;\n        public whileAST: AST = null;\n        public cond: AST = null;\n        public isLoop() { return true; }\n\n        constructor () {\n            super(NodeType.DoWhile);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("do");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingStart(this.whileAST);\n            emitter.writeToOutput("while");\n            emitter.recordSourceMappingEnd(this.whileAST);\n            emitter.writeToOutput(\'(\');\n            emitter.emitJavascript(this.cond, TokenID.CloseParen, false);\n            emitter.writeToOutput(")");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(";");\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckDoWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n                context.addContent(this.cond);\n                // TODO: check for while (true) \n                context.current = afterLoop;\n                loopEnd.addSuccessor(afterLoop);\n            }\n            else {\n                context.addUnreachable(t';
var v27826 = v27827 + 'his.cond);\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class IfStatement extends Statement {\n        public thenBod: AST;\n        public elseBod: AST = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor (public cond: AST) {\n            super(NodeType.If);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("if(");\n            emitter.emitJavascript(this.cond, TokenID.If, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.thenBod, true);\n            if (this.elseBod) {\n                if (this.elseBod.nodeType === NodeType.If) {\n                    emitter.writeToOutput(" else ");\n                    this.elseBod.emit(emitter, tokenId, /*startLine:*/ false);\n                }\n                else {\n                    emitter.writeToOutput(" else");\n                    emitter.emitJavascriptStatements(this.elseBod, true);\n                }\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckIf(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            this.cond.addToControlFlow(context);\n            var afterIf = new BasicBlock();\n            var beforeIf = context.current;\n            context.pushStatement(this, beforeIf, afterIf);\n            var hasContinuation = false;\n            context.current = new BasicBlock();\n            beforeIf.addSuccessor(context.current);\n            context.walk(this.thenBod, this);\n            if (!context.noContinuation) {\n                hasContinuation = true;\n                context.current.addSuccessor(afterIf);\n            }\n            if (this.elseBod) {\n                // current block will be thenBod\n                context.current = new BasicBlock();\n                context.noContinuation = false;\n                beforeIf.addSuccessor(context.current);\n                context.walk(this.elseBod, this);\n                if (!context.noContinuation) {\n                    hasContinuation = true;\n                    context.current.addSuccessor(afterIf);\n                }\n                else {\n                    // thenBod created continuation for if statement\n                    if (hasContinuation) {\n                        context.noContinuation = false;\n                    }\n                }\n            }\n            else {\n                beforeIf.addSuccessor(afterIf);\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            var targetInfo = context.popStatement();\n            if (afterIf.predecessors.length > 0) {\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            if (hasContinuation) {\n                context.current = afterIf;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class ReturnStatement extends Statement {\n        public returnExpression: AST = null;\n\n        constructor () {\n            super(NodeType.Return);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.returnExpression) {\n                emitter.writeToOutput("return ");\n                emitter.emitJavascript(this.returnExpression, TokenID.Semicolon, false);\n\n                if (this.returnExpression.nodeType === NodeType.FuncDecl) {\n                    emitter.writeToOutput(";");\n                }\n            }\n            else {\n                emitter.writeToOutput("return;");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.returnStmt();\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckReturn(this);\n        }\n    }\n\n    export class EndCode extends AST {\n        constructor () {\n            super(NodeType.EndCode);\n        }\n    }\n\n    export class ForInStatement extends Statement {\n        constructor ';
var v27825 = v27826 + '(public lval: AST, public obj: AST) {\n            super(NodeType.ForIn);\n            if (this.lval && (this.lval.nodeType == NodeType.VarDecl)) {\n                (<BoundDecl>this.lval).varFlags |= VarFlags.AutoInit;\n            }\n        }\n        public statement: ASTSpan = new ASTSpan();\n        public body: AST;\n\n        public isLoop() { return true; }\n\n        public isFiltered() {\n            if (this.body) {\n                var singleItem: AST = null;\n                if (this.body.nodeType == NodeType.List) {\n                    var stmts = <ASTList>this.body;\n                    if (stmts.members.length == 1) {\n                        singleItem = stmts.members[0];\n                    }\n                }\n                else {\n                    singleItem = this.body;\n                }\n                // match template for filtering \'own\' properties from obj\n                if (singleItem !== null) {\n                    if (singleItem.nodeType == NodeType.Block) {\n                        var block = <Block>singleItem;\n                        if ((block.statements !== null) && (block.statements.members.length == 1)) {\n                            singleItem = block.statements.members[0];\n                        }\n                    }\n                    if (singleItem.nodeType == NodeType.If) {\n                        var cond = (<IfStatement>singleItem).cond;\n                        if (cond.nodeType == NodeType.Call) {\n                            var target = (<CallExpression>cond).target;\n                            if (target.nodeType == NodeType.Dot) {\n                                var binex = <BinaryExpression>target;\n                                if ((binex.operand1.nodeType == NodeType.Name) &&\n                                    (this.obj.nodeType == NodeType.Name) &&\n                                    ((<Identifier>binex.operand1).actualText == (<Identifier>this.obj).actualText)) {\n                                    var prop = <Identifier>binex.operand2;\n                                    if (prop.actualText == "hasOwnProperty") {\n                                        var args = (<CallExpression>cond).arguments;\n                                        if ((args !== null) && (args.members.length == 1)) {\n                                            var arg = args.members[0];\n                                            if ((arg.nodeType == NodeType.Name) &&\n                                                 (this.lval.nodeType == NodeType.Name)) {\n                                                if (((<Identifier>this.lval).actualText) == (<Identifier>arg).actualText) {\n                                                    return true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("for(");\n            emitter.emitJavascript(this.lval, TokenID.For, false);\n            emitter.writeToOutput(" in ");\n            emitter.emitJavascript(this.obj, TokenID.For, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (typeFlow.checker.styleSettings.forin) {\n                if (!this.isFiltered()) {\n                    typeFlow.checker.errorReporter.styleError(this, "no hasOwnProperty filter");\n                }\n            }\n            return typeFlow.typeCheckForIn(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.lval) {\n                context.addContent(this.lval);\n            }\n            if (this.obj) {\n                context.addContent(this.obj);\n            }\n\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopE';
var v27824 = v27825 + 'nd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            context.noContinuation = false;\n            loopHeader.addSuccessor(afterLoop);\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class ForStatement extends Statement {\n        public cond: AST;\n        public body: AST;\n        public incr: AST;\n\n        constructor (public init: AST) {\n            super(NodeType.For);\n        }\n\n        public isLoop() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput("for(");\n            if (this.init) {\n                if (this.init.nodeType != NodeType.List) {\n                    emitter.emitJavascript(this.init, TokenID.For, false);\n                }\n                else {\n                    emitter.setInVarBlock((<ASTList>this.init).members.length); \n                    emitter.emitJavascriptList(this.init, null, TokenID.For, false, false, false);\n                }\n            }\n            emitter.writeToOutput("; ");\n            emitter.emitJavascript(this.cond, TokenID.For, false);\n            emitter.writeToOutput("; ");\n            emitter.emitJavascript(this.incr, TokenID.For, false);\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFor(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.init) {\n                context.addContent(this.init);\n            }\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var condBlock: BasicBlock = null;\n            var continueTarget = loopStart;\n            var incrBB: BasicBlock = null;\n            if (this.incr) {\n                incrBB = new BasicBlock();\n                continueTarget = incrBB;\n            }\n            if (this.cond) {\n                condBlock = context.current;\n                context.addContent(this.cond);\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n            }\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, continueTarget, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (this.incr) {\n                if (context.noContinuation) {\n                    if (incrBB.predecessors.length == 0) {\n                        context.addUnreachable(this.incr);\n                    }\n                }\n                else {\n                    context.current.addSuccessor(incrBB);\n                    context.current = incrBB;\n                    context.addContent(this.incr);\n                }\n            }\n            var loopEnd = context.current;\n            if (!(context.noContinuation)) {\n                loopEnd.addSuccessor(loopStart);\n\n            }\n            if (condBlock) {\n                condBlock.addSuccessor(afterLoop);\n                context.noContinuation = false;\n            }\n            if (afterLoop.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterLoop;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class WithStatement extends Statement {\n        public body: AST;\n\n        public isCompoundStatement() { return true; }\n\n        public withSym: WithSymbol = null;\n\n        constructor (public expr: AST) {\n            super(NodeType.With);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("with (");\n            if (this.expr) {\n                emitter.emitJavascript(this.expr, TokenID.With, false);\n            }\n\n            emitter.writeToOutput(")");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWith(this);\n        }\n    }\n\n    export class SwitchStatement extends Statement {\n        public caseList:';
var v27823 = v27824 + ' ASTList;\n        public defaultCase: CaseStatement = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor (public val: AST) {\n            super(NodeType.Switch);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("switch(");\n            emitter.emitJavascript(this.val, TokenID.Identifier, false);\n            emitter.writeToOutput(")"); \n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.writeLineToOutput(" {");\n            emitter.indenter.increaseIndent();\n            var casesLen = this.caseList.members.length;\n            for (var i = 0; i < casesLen; i++) {\n                var caseExpr = this.caseList.members[i];\n                emitter.emitJavascript(caseExpr, TokenID.Case, true);\n            }\n            emitter.indenter.decreaseIndent();\n            emitter.emitIndent();\n            emitter.writeToOutput("}");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.caseList.members.length;\n            this.val = typeFlow.typeCheck(this.val);\n            for (var i = 0; i < len; i++) {\n                this.caseList.members[i] = typeFlow.typeCheck(this.caseList.members[i]);\n            }\n            this.defaultCase = <CaseStatement>typeFlow.typeCheck(this.defaultCase);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // if there are break statements that match this switch, then just link cond block with block after switch\n        public addToControlFlow(context: ControlFlowContext) {\n            var condBlock = context.current;\n            context.addContent(this.val);\n            var execBlock = new BasicBlock();\n            var afterSwitch = new BasicBlock();\n\n            condBlock.addSuccessor(execBlock);\n            context.pushSwitch(execBlock);\n            context.current = execBlock;\n            context.pushStatement(this, execBlock, afterSwitch);\n            context.walk(this.caseList, this);\n            context.popSwitch();\n            var targetInfo = context.popStatement();\n            var hasCondContinuation = (this.defaultCase == null);\n            if (this.defaultCase == null) {\n                condBlock.addSuccessor(afterSwitch);\n            }\n            if (afterSwitch.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterSwitch;\n            }\n            else {\n                context.noContinuation = true;\n            }\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class CaseStatement extends Statement {\n        public expr: AST = null;\n        public body: ASTList;\n\n        constructor () {\n            super(NodeType.Case);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.expr) {\n                emitter.writeToOutput("case ");\n                emitter.emitJavascript(this.expr, TokenID.Identifier, false);\n            }\n            else {\n                emitter.writeToOutput("default");\n            }\n            emitter.writeToOutput(":");\n            if (this.body.members.length == 1 && this.body.members[0].nodeType == NodeType.Block) {\n                // The case statement was written with curly braces, so emit it with the appropriate formatting\n                emitter.emitJavascriptStatements(this.body, false);\n            }\n            else {\n                // No curly braces. Format in the expected way\n                emitter.writeLineToOutput("");\n                emitter.indenter.increaseIndent();\n                emitter.emitBareJavascriptStatements(this.body);\n                emitter.indenter.decreaseIndent();\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.expr = typeFlow.typeCheck(this.expr);\n            typeFlow.typeCheck(this.body);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // TODO: more reasoning about unreachable cases (such as duplicate literals as case expressions)\n        // for now, assume all cases are reachable, regardless of whether some cases fall through\n        public addToControlFlow(context: ControlFlowContext) {\n            var execBlock = new BasicBlock();\n            v';
var v27822 = v27823 + 'ar sw = context.currentSwitch[context.currentSwitch.length - 1];\n            // TODO: fall-through from previous (+ to end of switch)\n            if (this.expr) {\n                var exprBlock = new BasicBlock();\n                context.current = exprBlock;\n                sw.addSuccessor(exprBlock);\n                context.addContent(this.expr);\n                exprBlock.addSuccessor(execBlock);\n            }\n            else {\n                sw.addSuccessor(execBlock);\n            }\n            context.current = execBlock;\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class TypeReference extends AST {\n        constructor (public term: AST, public arrayCount: number) {\n            super(NodeType.TypeRef);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            throw new Error("should not emit a type ref");\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevInTCTR = typeFlow.inTypeRefTypeCheck;\n            typeFlow.inTypeRefTypeCheck = true;\n            var typeLink = getTypeLink(this, typeFlow.checker, true);\n            typeFlow.checker.resolveTypeLink(typeFlow.scope, typeLink, false);\n\n            if (this.term) {\n                typeFlow.typeCheck(this.term);\n            }\n\n            typeFlow.checkForVoidConstructor(typeLink.type, this);\n\n            this.type = typeLink.type;\n\n            // in error recovery cases, there may not be a term\n            if (this.term) {\n                this.term.type = this.type;\n            }\n\n            typeFlow.inTypeRefTypeCheck = prevInTCTR;\n            return this;\n        }\n    }\n\n    export class TryFinally extends Statement {\n        constructor (public tryNode: AST, public finallyNode: Finally) {\n            super(NodeType.TryFinally);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.tryNode, TokenID.Try, false);\n            emitter.emitJavascript(this.finallyNode, TokenID.Finally, false);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.tryNode = typeFlow.typeCheck(this.tryNode);\n            this.finallyNode = <Finally>typeFlow.typeCheck(this.finallyNode);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var afterFinally = new BasicBlock();\n            context.walk(this.tryNode, this);\n            var finBlock = new BasicBlock();\n            if (context.current) {\n                context.current.addSuccessor(finBlock);\n            }\n            context.current = finBlock;\n            context.pushStatement(this, null, afterFinally);\n            context.walk(this.finallyNode, this);\n            if (!context.noContinuation && context.current) {\n                context.current.addSuccessor(afterFinally);\n            }\n            if (afterFinally.predecessors.length > 0) {\n                context.current = afterFinally;\n            }\n            else {\n                context.noContinuation = true;\n            }\n            context.popStatement();\n            context.walker.options.goChildren = false;\n        }\n    }\n\n    export class TryCatch extends Statement {\n        constructor (public tryNode: Try, public catchNode: Catch) {\n            super(NodeType.TryCatch);\n        }\n\n        public isCompoundStatement() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.tryNode, TokenID.Try, false);\n            emitter.emitJavascript(this.catchNode, TokenID.Catch, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var beforeTry = context.current;\n            var tryBlock = new BasicBlock();\n            beforeTry.addSuccessor(tryBlock);\n            context.current = tryBlock;\n            var afterTryCatch = new BasicBlock();\n            context.pushStatement(this, null, afterTryCatch);\n            context.walk(this.tryNode, this);\n            if (!context.noContinuation) {\n                if (context.current) {\n                    context.current.addSuccessor(afterTryCatch);\n                }\n            }\n            context.current = new BasicBlock();\n            beforeTry.addSuccessor(context.current);\n            context.walk(this.catchNode, this);\n            context.popStatement();\n            if (!context.noContinuation)';
var v27821 = v27822 + ' {\n                if (context.current) {\n                    context.current.addSuccessor(afterTryCatch);\n                }\n            }\n            context.current = afterTryCatch;\n            context.walker.options.goChildren = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.tryNode = <Try>typeFlow.typeCheck(this.tryNode);\n            this.catchNode = <Catch>typeFlow.typeCheck(this.catchNode);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n    }\n\n    export class Try extends Statement {\n        constructor (public body: AST) {\n            super(NodeType.Try);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("try ");\n            emitter.emitJavascript(this.body, TokenID.Try, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.body = typeFlow.typeCheck(this.body);\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.walker.options.goChildren = false;\n            context.noContinuation = false;\n        }\n    }\n\n    export class Catch extends Statement {\n        constructor (public param: VarDecl, public body: AST) {\n            super(NodeType.Catch);\n            if (this.param) {\n                this.param.varFlags |= VarFlags.AutoInit;\n            }\n        }\n        public statement: ASTSpan = new ASTSpan();\n        public containedScope: SymbolScope = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(" ");\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput("catch (");\n            emitter.emitJavascript(this.param, TokenID.OpenParen, false);\n            emitter.writeToOutput(")");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascript(this.body, TokenID.Catch, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.param) {\n                context.addContent(this.param);\n                var bodBlock = new BasicBlock();\n                context.current.addSuccessor(bodBlock);\n                context.current = bodBlock;\n            }\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevScope = typeFlow.scope;\n            typeFlow.scope = this.containedScope;\n            this.param = <VarDecl>typeFlow.typeCheck(this.param);\n            var exceptVar = new ValueLocation();\n            var varSym = new VariableSymbol((<VarDecl>this.param).id.text,\n                                          this.param.minChar,\n                                          typeFlow.checker.locationInfo.unitIndex,\n                                          exceptVar);\n            exceptVar.symbol = varSym;\n            exceptVar.typeLink = new TypeLink();\n            // var type for now (add syntax for type annotation)\n            exceptVar.typeLink.type = typeFlow.anyType;\n            var thisFnc = typeFlow.thisFnc;\n            if (thisFnc && thisFnc.type) {\n                exceptVar.symbol.container = thisFnc.type.symbol;\n            }\n            else {\n                exceptVar.symbol.container = null;\n            }\n            this.param.sym = exceptVar.symbol;\n            typeFlow.scope.enter(exceptVar.symbol.container, this.param, exceptVar.symbol,\n                                 typeFlow.checker.errorReporter, false, false, false);\n            this.body = typeFlow.typeCheck(this.body);\n\n            // if we\'re in provisional typecheck mode, clean up the symbol entry\n            // REVIEW: This is obviously bad form, since we\'re counting on the internal\n            // layout of the symbol table, but this is also the only place where we insert\n            // symbols during typecheck\n            if (typeFlow.checker.inProvisionalTypecheckMode()) {\n                var table = typeFlow.scope.getTable();\n                (<any>table).secondaryTable.table[exceptVar.symbol.name] = undefined;\n            }\n            this.type = typeFlow.voidType;\n            typeFlow.scope = prevScope;\n            return this;\n        }\n    }\n\n    export class Finally extends Statement ';
var v27820 = v27821 + '{\n        constructor (public body: AST) {\n            super(NodeType.Finally);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput("finally");\n            emitter.emitJavascript(this.body, TokenID.Finally, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.walker.options.goChildren = false;\n            context.noContinuation = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.body = typeFlow.typeCheck(this.body);\n            return this;\n        }\n    }\n\n    export class Comment extends AST {\n\n        public text: string[] = null;\n        public minLine: number;\n        public limLine: number;\n        private docCommentText: string = null;\n\n        constructor (public content: string, public isBlockComment: bool, public endsLine) {\n            super(NodeType.Comment);\n        }\n\n        public getText(): string[] {\n            if (this.text == null) {\n                if (this.isBlockComment) {\n                    this.text = this.content.split("\\n");\n                    for (var i = 0; i < this.text.length; i++) {\n                        this.text[i] = this.text[i].replace(/^\\s+|\\s+$/g, \'\');\n                    }\n                }\n                else {\n                    this.text = [(this.content.replace(/^\\s+|\\s+$/g, \'\'))];\n                }\n            }\n\n            return this.text;\n        }\n\n        public isDocComment() {\n            if (this.isBlockComment) {\n                return this.content.charAt(2) == "*";\n            }\n\n            return false;\n        }\n\n        public getDocCommentText() {\n            if (this.docCommentText == null) {\n                this.docCommentText = Comment.cleanJSDocComment(this.content);\n            }\n\n            return this.docCommentText;\n        }\n\n        static consumeLeadingSpace(line: string, startIndex: number, maxSpacesToRemove?: number) {\n            var endIndex = line.length;\n            if (maxSpacesToRemove != undefined) {\n                endIndex = min(startIndex + maxSpacesToRemove, endIndex);\n            }\n\n            for (; startIndex < endIndex; startIndex++) {\n                var charCode = line.charCodeAt(startIndex);\n                if (charCode != LexCodeSpace && charCode != LexCodeTAB) {\n                    return startIndex;\n                }\n            }\n            \n            if (endIndex != line.length) {\n                return endIndex;\n            }\n\n            return -1;\n        }\n\n        static isSpaceChar(line: string, index: number) {\n            var length = line.length;\n            if (index < length) {\n                var charCode = line.charCodeAt(index);\n                // If the character is space\n                return charCode == LexCodeSpace || charCode == LexCodeTAB;\n            }\n\n            // If the index is end of the line it is space\n            return index == length;\n        }\n\n        static cleanDocCommentLine(line: string, jsDocStyleComment: bool, jsDocLineSpaceToRemove?: number) {\n            var nonSpaceIndex = Comment.consumeLeadingSpace(line, 0);\n            if (nonSpaceIndex != -1) {\n                var jsDocSpacesRemoved = nonSpaceIndex;\n                if (jsDocStyleComment && line.charAt(nonSpaceIndex) == \'*\') { // remove leading * in case of jsDocComment\n                    var startIndex = nonSpaceIndex + 1;\n                    nonSpaceIndex = Comment.consumeLeadingSpace(line, startIndex, jsDocLineSpaceToRemove);\n\n                    if (nonSpaceIndex != -1) {\n                        jsDocSpacesRemoved = nonSpaceIndex - startIndex;\n                    } else {\n                        return null;\n                    }\n                }\n\n                return {\n                    minChar: nonSpaceIndex,\n                    limChar: line.charAt(line.length - 1) == "\\r" ? line.length - 1 : line.length,\n                    jsDocSpacesRemoved: jsDocSpacesRemoved\n                };\n            }\n\n            return null;\n        }\n\n        static cleanJSDocComment(content: string, spacesToRemove?: number) {\n            var docCommentLines: string[] = [];\n            content = content.replace("/**", ""); // remove /**\n            if (content.length >= 2 && content.charAt(content.length - 1) == "/" && content.charAt(content.length - 2) == "*") {\n                content = content.substring(0, content.length - 2); // remove last */\n            }\n            var lines = content.split("\\n");\n            var inParamTag = false;\n            for (var l = 0; l < lines.length; l++) {\n                var line = lines[l];\n                var clean';
var v27819 = v27820 + 'LinePos = Comment.cleanDocCommentLine(line, true, spacesToRemove);\n                if (!cleanLinePos) {\n                    // Whole line empty, read next line\n                    continue;\n                }\n\n                var docCommentText = "";\n                var prevPos = cleanLinePos.minChar;\n                for (var i = line.indexOf("@", cleanLinePos.minChar); 0 <= i && i < cleanLinePos.limChar; i = line.indexOf("@", i + 1)) {\n                    // We have encoutered @. \n                    // If we were omitting param comment, we dont have to do anything\n                    // other wise the content of the text till @ tag goes as doc comment\n                    var wasInParamtag = inParamTag;\n\n                    // Parse contents next to @\n                    if (line.indexOf("param", i + 1) == i + 1 && Comment.isSpaceChar(line, i + 6)) {\n                        // It is param tag. \n\n                        // If we were not in param tag earlier, push the contents from prev pos of the tag this tag start as docComment\n                        if (!wasInParamtag) {\n                            docCommentText += line.substring(prevPos, i);\n                        }\n\n                        // New start of contents \n                        prevPos = i;\n                        inParamTag = true;\n                    } else if (wasInParamtag) {\n                        // Non param tag start\n                        prevPos = i;\n                        inParamTag = false;\n                    }\n                }\n\n                if (!inParamTag) {\n                    docCommentText += line.substring(prevPos, cleanLinePos.limChar);\n                }\n\n                // Add line to comment text if it is not only white space line\n                var newCleanPos = Comment.cleanDocCommentLine(docCommentText, false);\n                if (newCleanPos) {\n                    if (spacesToRemove == undefined) {\n                        spacesToRemove = cleanLinePos.jsDocSpacesRemoved;\n                    }\n                    docCommentLines.push(docCommentText);\n                }\n            }\n            \n            return docCommentLines.join("\\n");\n        }\n\n        static getDocCommentText(comments: Comment[]) {\n            var docCommentText: string[] = [];\n            for (var c = 0 ; c < comments.length; c++) {\n                var commentText = comments[c].getDocCommentText();\n                if (commentText != "") {\n                    docCommentText.push(commentText);\n                }\n            }\n            return docCommentText.join("\\n");\n        }\n\n        static getParameterDocCommentText(param: string, fncDocComments: Comment[]) {\n            if (fncDocComments.length == 0 || !fncDocComments[0].isBlockComment) {\n                // there were no fnc doc comments and the comment is not block comment then it cannot have \n                // @param comment that can be parsed\n                return "";\n            }\n            \n            for (var i = 0; i < fncDocComments.length; i++) {\n                var commentContents = fncDocComments[i].content;\n                for (var j = commentContents.indexOf("@param", 0); 0 <= j; j = commentContents.indexOf("@param", j)) {\n                    j += 6;\n                    if (!Comment.isSpaceChar(commentContents, j)) {\n                        // This is not param tag but a tag line @paramxxxxx\n                        continue;\n                    }\n\n                    // This is param tag. Check if it is what we are looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j);\n                    if (j == -1) {\n                        break;\n                    }\n                    \n                    // Ignore the type expression\n                    if (commentContents.charCodeAt(j) == LexCodeLC) {\n                        j++;\n                        // Consume the type\n                        var charCode = 0;\n                        for (var curlies = 1; j < commentContents.length; j++) {\n                            charCode = commentContents.charCodeAt(j);\n                            // { character means we need to find another } to match the found one\n                            if (charCode == LexCodeLC) {\n                                curlies++;\n                                continue;\n                            }\n\n                            // } char\n                            if (charCode == LexCodeRC) {\n                                curlies--;\n                                if (curlies == 0) {\n                                    // We do not have any more } to match the type expression is ignored completely\n                                    break;\n                                } else {\n                                    // there are more { to be matched with }\n                                    continue;\n                                }\n                            }\n\n                            // Found start';
var v27818 = v27819 + ' of another tag\n                            if (charCode == LexCodeAtSign) {\n                                break;\n                            }\n                        }\n\n                        // End of the comment\n                        if (j == commentContents.length) {\n                            break;\n                        }\n\n                        // End of the tag, go onto looking for next tag\n                        if (charCode == LexCodeAtSign) {\n                            continue;\n                        }\n\n                        j = Comment.consumeLeadingSpace(commentContents, j + 1);\n                        if (j == -1) {\n                            break;\n                        }\n                    }\n\n                    // Parameter name\n                    if (param != commentContents.substr(j, param.length) || !Comment.isSpaceChar(commentContents, j + param.length)) {\n                        // this is not the parameter we are looking for\n                        continue;\n                    }\n\n                    // Found the parameter we were looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j + param.length);\n                    if (j == -1) {\n                        return "";\n                    }\n                    \n                    var endOfParam = commentContents.indexOf("@", j);\n                    var paramHelpString = commentContents.substring(j, endOfParam < 0 ? commentContents.length : endOfParam);\n\n                    // Find alignement spaces to remove\n                    var paramSpacesToRemove: number = undefined;\n                    var paramLineIndex = commentContents.substring(0, j).lastIndexOf("\\n") + 1;\n                    if (paramLineIndex != 0) {\n                        if (paramLineIndex < j && commentContents.charAt(paramLineIndex + 1) == "\\r") {\n                            paramLineIndex++;\n                        }\n                    }\n                    var startSpaceRemovalIndex = Comment.consumeLeadingSpace(commentContents, paramLineIndex);\n                    if (startSpaceRemovalIndex != j && commentContents.charAt(startSpaceRemovalIndex) == "*") {\n                        paramSpacesToRemove = j - startSpaceRemovalIndex - 1;\n                    }\n\n                    // Clean jsDocComment and return\n                    return Comment.cleanJSDocComment(paramHelpString, paramSpacesToRemove);\n                }\n            }\n\n            return "";\n        }\n\n        static getDocCommentTextOfSignatures(signatures: Signature[]) {\n            var comments: string[] = [];\n            for (var i = 0; i < signatures.length; i++) {\n                var signatureDocComment = TypeScript.Comment.getDocCommentText(signatures[i].declAST.getDocComments());\n                if (signatureDocComment != "") {\n                    comments.push(signatureDocComment);\n                }\n            }\n\n            return comments.join("\\n");\n        }\n    }\n\n    export class DebuggerStatement extends Statement {\n        constructor () {\n            super(NodeType.Debugger);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitParensAndCommentsInPlace(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeLineToOutput("debugger;");\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitParensAndCommentsInPlace(this, false);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript.AstWalkerWithDetailCallback {\n    export interface AstWalkerDetailCallback {\n        EmptyCallback? (pre, ast: AST): bool;\n        EmptyExprCallback? (pre, ast: AST): bool;\n        TrueCallback? (pre, ast: AST): bool;\n        FalseCallback? (pre, ast: AST): bool;\n        ThisCallback? (pre, ast: AST): bool;\n        SuperCallback? (pre, ast: AST): bool;\n        QStringCallback? (pre, ast: AST): bool;\n        RegexCallback? (pre, ast: AST): bool;\n        NullCallback? (pre, ast: AST): bool;\n        ArrayLitCallback? (pre, ast: AST): bool;\n        ObjectLitCallback? (pre, ast: AST): bool;\n        VoidCallback? (pre, ast: AST): bool;\n        CommaCallback? (pre, ast: AST): bool;\n        PosCallback? (pre, ast: AST): bool;\n        NegCallback? (pre, ast: AST): bool;\n        DeleteCallback? (pre, ast: AST): bool;\n        AwaitCal';
var v27817 = v27818 + "lback? (pre, ast: AST): bool;\n        InCallback? (pre, ast: AST): bool;\n        DotCallback? (pre, ast: AST): bool;\n        FromCallback? (pre, ast: AST): bool;\n        IsCallback? (pre, ast: AST): bool;\n        InstOfCallback? (pre, ast: AST): bool;\n        TypeofCallback? (pre, ast: AST): bool;\n        NumberLitCallback? (pre, ast: AST): bool;\n        NameCallback? (pre, identifierAst: Identifier): bool;\n        TypeRefCallback? (pre, ast: AST): bool;\n        IndexCallback? (pre, ast: AST): bool;\n        CallCallback? (pre, ast: AST): bool;\n        NewCallback? (pre, ast: AST): bool;\n        AsgCallback? (pre, ast: AST): bool;\n        AsgAddCallback? (pre, ast: AST): bool;\n        AsgSubCallback? (pre, ast: AST): bool;\n        AsgDivCallback? (pre, ast: AST): bool;\n        AsgMulCallback? (pre, ast: AST): bool;\n        AsgModCallback? (pre, ast: AST): bool;\n        AsgAndCallback? (pre, ast: AST): bool;\n        AsgXorCallback? (pre, ast: AST): bool;\n        AsgOrCallback? (pre, ast: AST): bool;\n        AsgLshCallback? (pre, ast: AST): bool;\n        AsgRshCallback? (pre, ast: AST): bool;\n        AsgRs2Callback? (pre, ast: AST): bool;\n        QMarkCallback? (pre, ast: AST): bool;\n        LogOrCallback? (pre, ast: AST): bool;\n        LogAndCallback? (pre, ast: AST): bool;\n        OrCallback? (pre, ast: AST): bool;\n        XorCallback? (pre, ast: AST): bool;\n        AndCallback? (pre, ast: AST): bool;\n        EqCallback? (pre, ast: AST): bool;\n        NeCallback? (pre, ast: AST): bool;\n        EqvCallback? (pre, ast: AST): bool;\n        NEqvCallback? (pre, ast: AST): bool;\n        LtCallback? (pre, ast: AST): bool;\n        LeCallback? (pre, ast: AST): bool;\n        GtCallback? (pre, ast: AST): bool;\n        GeCallback? (pre, ast: AST): bool;\n        AddCallback? (pre, ast: AST): bool;\n        SubCallback? (pre, ast: AST): bool;\n        MulCallback? (pre, ast: AST): bool;\n        DivCallback? (pre, ast: AST): bool;\n        ModCallback? (pre, ast: AST): bool;\n        LshCallback? (pre, ast: AST): bool;\n        RshCallback? (pre, ast: AST): bool;\n        Rs2Callback? (pre, ast: AST): bool;\n        NotCallback? (pre, ast: AST): bool;\n        LogNotCallback? (pre, ast: AST): bool;\n        IncPreCallback? (pre, ast: AST): bool;\n        DecPreCallback? (pre, ast: AST): bool;\n        IncPostCallback? (pre, ast: AST): bool;\n        DecPostCallback? (pre, ast: AST): bool;\n        TypeAssertionCallback? (pre, ast: AST): bool;\n        FuncDeclCallback? (pre, funcDecl: FuncDecl): bool;\n        MemberCallback? (pre, ast: AST): bool;\n        VarDeclCallback? (pre, varDecl: VarDecl): bool;\n        ArgDeclCallback? (pre, ast: AST): bool;\n        ReturnCallback? (pre, ast: AST): bool;\n        BreakCallback? (pre, ast: AST): bool;\n        ContinueCallback? (pre, ast: AST): bool;\n        ThrowCallback? (pre, ast: AST): bool;\n        ForCallback? (pre, ast: AST): bool;\n        ForInCallback? (pre, ast: AST): bool;\n        IfCallback? (pre, ast: AST): bool;\n        WhileCallback? (pre, ast: AST): bool;\n        DoWhileCallback? (pre, ast: AST): bool;\n        BlockCallback? (pre, block: Block): bool;\n        CaseCallback? (pre, ast: AST): bool;\n        SwitchCallback? (pre, ast: AST): bool;\n        TryCallback? (pre, ast: AST): bool;\n        TryCatchCallback? (pre, ast: AST): bool;\n        TryFinallyCallback? (pre, ast: AST): bool;\n        FinallyCallback? (pre, ast: AST): bool;\n        CatchCallback? (pre, ast: AST): bool;\n        ListCallback? (pre, astList: ASTList): bool;\n        ScriptCallback? (pre, script: Script): bool;\n        ClassDeclarationCallback? (pre, ast: AST): bool;\n        InterfaceDeclarationCallback? (pre, interfaceDecl: InterfaceDeclaration): bool;\n        ModuleDeclarationCallback? (pre, moduleDecl: ModuleDeclaration): bool;\n        ImportDeclarationCallback? (pre, ast: AST): bool;\n        WithCallback? (pre, ast: AST): bool;\n        LabelCallback? (pre, labelAST: AST): bool;\n        LabeledStatementCallback? (pre, ast: AST): bool;\n        EBStartCallback? (pre, ast: AST): bool;\n        GotoEBCallback? (pre, ast: AST): bool;\n        EndCodeCallback? (pre, ast: AST): bool;\n        ErrorCallback? (pre, ast: AST): bool;\n        CommentCallback? (pre, ast: AST): bool;\n        DebuggerCallback? (pre, ast: AST): bool;\n        DefaultCallback? (pre, ast: AST): bool;\n    }\n\n    export function walk(script: Script, callback: AstWalkerDetailCallback): void {\n        var pre = (cur: AST, parent: AST) => {\n            walker.options.goChildren = AstWalkerCallback(true, cur, callback);\n            return cur;\n        }\n\n        var post = (cur: AST, parent: AST) => {\n            AstWalkerCallback(false, cur, callback);\n            return cur;\n        }\n\n        var walker = TypeScript.getAstWalkerFactory().getWalker(pre, post);\n        walker.walk(script, null);\n    }\n\n    function AstWalkerCallback(pre: bool, ast: AST, callback: AstWalkerDetailCallback): bool {\n        // See if the Callback needs to be handled using spe";
var v27816 = v27817 + 'cific one or default one\n        var nodeType = ast.nodeType;\n        var callbackString = (<any>NodeType)._map[nodeType] + "Callback";\n        if (callback[callbackString]) {\n            return callback[callbackString](pre, ast);\n        }\n\n        if (callback.DefaultCallback) {\n            return callback.DefaultCallback(pre, ast);\n        }\n\n        return true;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface IAstWalker {\n        walk(ast: AST, parent: AST): AST;\n        options: AstWalkOptions;\n        state: any; // user state object\n    }\n\n    export class AstWalkOptions {\n        public goChildren = true;\n        public goNextSibling = true;\n        public reverseSiblings = false; // visit siblings in reverse execution order\n\n        public stopWalk(stop:bool = true) {\n            this.goChildren = !stop;\n            this.goNextSibling = !stop;\n        }\n    }\n\n    export interface IAstWalkCallback {\n        (ast: AST, parent: AST, walker: IAstWalker): AST;\n    }\n\n    export interface IAstWalkChildren {\n        (preAst: AST, parent: AST, walker: IAstWalker): void;\n    }\n\n    class AstWalker implements IAstWalker {\n        constructor (\n            private childrenWalkers: IAstWalkChildren[],\n            private pre: IAstWalkCallback,\n            private post: IAstWalkCallback,\n            public options: AstWalkOptions,\n            public state: any) {\n        }\n\n        public walk(ast: AST, parent: AST): AST {\n            var preAst = this.pre(ast, parent, this);\n            if (preAst === undefined) {\n                preAst = ast;\n            }\n            if (this.options.goChildren) {\n                var svGoSib = this.options.goNextSibling;\n                this.options.goNextSibling = true;\n                // Call the "walkChildren" function corresponding to "nodeType".\n                this.childrenWalkers[ast.nodeType](ast, parent, this);\n                this.options.goNextSibling = svGoSib;\n            }\n            else {\n                // no go only applies to children of node issuing it\n                this.options.goChildren = true;\n            }\n            if (this.post) {\n                var postAst = this.post(preAst, parent, this);\n                if (postAst === undefined) {\n                    postAst = preAst;\n                }\n                return postAst;\n            }\n            else {\n                return preAst;\n            }\n        }\n    }\n\n    export class AstWalkerFactory {\n        private childrenWalkers: IAstWalkChildren[] = [];\n\n        constructor () {\n            this.initChildrenWalkers();\n        }\n\n        public walk(ast: AST, pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): AST {\n            return this.getWalker(pre, post, options, state).walk(ast, null)\n        }\n\n        public getWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            return this.getSlowWalker(pre, post, options, state);\n        }\n\n        private getSlowWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            if (!options) {\n                options = new AstWalkOptions();\n            }\n\n            return new AstWalker(this.childrenWalkers, pre, post, options, state);\n        }\n\n        private initChildrenWalkers(): void {\n            this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChild';
var v27815 = v27816 + "ren;\n            this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;\n            this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalker";
var v27814 = v27815 + 's[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren;\n            this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren;\n            this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren;\n            this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren;\n            this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren;\n            this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren;\n            this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren;\n            this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren;\n            this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren;\n            this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren;\n            this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren;\n            this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren;\n            this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren;\n            this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren;\n            this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren;\n            this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren;\n            this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren;\n            this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;\n            this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;\n            this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;\n            this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;\n            this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren;\n            this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren;\n            this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;\n            this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone;\n\n            // Verify the code is up to date with the enum\n            for (var e in (<any>NodeType)._map) {\n                if ((<any>this.childrenWalkers)[e] === undefined) {\n                    throw new Error("initWalkers function is not up to date with enum content!");\n                }\n            }\n        }\n    }\n\n    var globalAstWalkerFactory: AstWalkerFactory;\n\n    export function getAstWalkerFactory(): AstWalkerFactory {\n        if (!globalAstWalkerFactory) {\n            globalAstWalkerFactory = new AstWalkerFactory();\n        }\n        return globalAstWalkerFactory;\n    }\n\n    module ChildrenWalkers {\n        export function walkNone(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            // Nothing to do\n        }\n\n        export function walkListChildren(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            var len = preAst.members.length;\n            if (walker.options.reverseSiblings) {\n                for (var i = len - 1; i >= 0; i--) {\n                    if (walker.options.goNextSibling) {\n                        preAst.m';
var v27813 = v27814 + "embers[i] = walker.walk(preAst.members[i], preAst);\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < len; i++) {\n                    if (walker.options.goNextSibling) {\n                        preAst.members[i] = walker.walk(preAst.members[i], preAst);\n                    }\n                }\n            }\n        }\n\n        export function walkUnaryExpressionChildren(preAst: UnaryExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.castTerm) {\n                preAst.castTerm = walker.walk(preAst.castTerm, preAst);\n            }\n            if (preAst.operand) {\n                preAst.operand = walker.walk(preAst.operand, preAst);\n            }\n        }\n\n        export function walkBinaryExpressionChildren(preAst: BinaryExpression, parent: AST, walker: IAstWalker): void {\n            if (walker.options.reverseSiblings) {\n                if (preAst.operand2) {\n                    preAst.operand2 = walker.walk(preAst.operand2, preAst);\n                }\n                if ((preAst.operand1) && (walker.options.goNextSibling)) {\n                    preAst.operand1 = walker.walk(preAst.operand1, preAst);\n                }\n            } else {\n                if (preAst.operand1) {\n                    preAst.operand1 = walker.walk(preAst.operand1, preAst);\n                }\n                if ((preAst.operand2) && (walker.options.goNextSibling)) {\n                    preAst.operand2 = walker.walk(preAst.operand2, preAst);\n                }\n            }\n        }\n\n        export function walkTypeReferenceChildren(preAst: TypeReference, parent: AST, walker: IAstWalker): void {\n            if (preAst.term) {\n                preAst.term = walker.walk(preAst.term, preAst);\n            }\n        }\n\n        export function walkCallExpressionChildren(preAst: CallExpression, parent: AST, walker: IAstWalker): void {\n            if (!walker.options.reverseSiblings) {\n                preAst.target = walker.walk(preAst.target, preAst);\n            }\n            if (preAst.arguments && (walker.options.goNextSibling)) {\n                preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst);\n            }\n            if ((walker.options.reverseSiblings) && (walker.options.goNextSibling)) {\n                preAst.target = walker.walk(preAst.target, preAst);\n            }\n        }\n\n        export function walkTrinaryExpressionChildren(preAst: ConditionalExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.operand1) {\n                preAst.operand1 = walker.walk(preAst.operand1, preAst);\n            }\n            if (preAst.operand2 && (walker.options.goNextSibling)) {\n                preAst.operand2 = walker.walk(preAst.operand2, preAst);\n            }\n            if (preAst.operand3 && (walker.options.goNextSibling)) {\n                preAst.operand3 = walker.walk(preAst.operand3, preAst);\n            }\n        }\n\n        export function walkFuncDeclChildren(preAst: FuncDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            }\n            if (preAst.arguments && (preAst.arguments.members.length > 0) && (walker.options.goNextSibling)) {\n                preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst);\n            }\n            if (preAst.returnTypeAnnotation && (walker.options.goNextSibling)) {\n                preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst);\n            }\n            if (preAst.bod && (preAst.bod.members.length > 0) && (walker.options.goNextSibling)) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkBoundDeclChildren(preAst: BoundDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n            if ((preAst.typeExpr) && (walker.options.goNextSibling)) {\n                preAst.typeExpr = walker.walk(preAst.typeExpr, preAst);\n            }\n        }\n\n        export function walkReturnStatementChildren(preAst: ReturnStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.returnExpression) {\n                preAst.returnExpression = walker.walk(preAst.returnExpression, preAst);\n            }\n        }\n\n        export function walkForStatementChildren(preAst: ForStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n\n            if (preAst.cond && walker.options.goNextSibling) {\n                preAst.cond = walker.walk(preAst.cond, preAst);\n            }\n\n            if (preAst.incr && walker.options.goNextSibling) {\n                pr";
var v27812 = v27813 + "eAst.incr = walker.walk(preAst.incr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkForInStatementChildren(preAst: ForInStatement, parent: AST, walker: IAstWalker): void {\n            preAst.lval = walker.walk(preAst.lval, preAst);\n            if (walker.options.goNextSibling) {\n                preAst.obj = walker.walk(preAst.obj, preAst);\n            }\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkIfStatementChildren(preAst: IfStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.thenBod && (walker.options.goNextSibling)) {\n                preAst.thenBod = walker.walk(preAst.thenBod, preAst);\n            }\n            if (preAst.elseBod && (walker.options.goNextSibling)) {\n                preAst.elseBod = walker.walk(preAst.elseBod, preAst);\n            }\n        }\n\n        export function walkWhileStatementChildren(preAst: WhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkDoWhileStatementChildren(preAst: DoWhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body && (walker.options.goNextSibling)) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkBlockChildren(preAst: Block, parent: AST, walker: IAstWalker): void {\n            if (preAst.statements) {\n                preAst.statements = <ASTList>walker.walk(preAst.statements, preAst);\n            }\n        }\n\n        export function walkCaseStatementChildren(preAst: CaseStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = <ASTList>walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkSwitchStatementChildren(preAst: SwitchStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.val) {\n                preAst.val = walker.walk(preAst.val, preAst);\n            }\n\n            if ((preAst.caseList) && walker.options.goNextSibling) {\n                preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst);\n            }\n        }\n\n        export function walkTryChildren(preAst: Try, parent: AST, walker: IAstWalker): void {\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkTryCatchChildren(preAst: TryCatch, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryNode) {\n                preAst.tryNode = <Try>walker.walk(preAst.tryNode, preAst);\n            }\n\n            if ((preAst.catchNode) && walker.options.goNextSibling) {\n                preAst.catchNode = <Catch>walker.walk(preAst.catchNode, preAst);\n            }\n        }\n\n        export function walkTryFinallyChildren(preAst: TryFinally, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryNode) {\n                preAst.tryNode = walker.walk(preAst.tryNode, preAst);\n            }\n\n            if (preAst.finallyNode && walker.options.goNextSibling) {\n                preAst.finallyNode = <Finally>walker.walk(preAst.finallyNode, preAst);\n            }\n        }\n\n        export function walkFinallyChildren(preAst: Finally, parent: AST, walker: IAstWalker): void {\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkCatchChildren(preAst: Catch, parent: AST, walker: IAstWalker): void {\n            if (preAst.param) {\n                preAst.param = <VarDecl>walker.walk(preAst.param, preAst);\n            }\n\n            if ((preAst.body) && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkRecordChildren(preAst: NamedDeclaration, parent: AST, walker: IAstWalker): void {\n            preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            if (walker.options.goNextSibling && preAst.members) {\n                preAst.members = <ASTList>walker.walk(preAst.members, preAst);\n            }\n\n        }\n\n        export function walkNamedTypeChildren(preAst: TypeDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n";
var v27811 = v27812 + '\n        export function walkClassDeclChildren(preAst: ClassDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            if (walker.options.goNextSibling && preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (walker.options.goNextSibling && preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkScriptChildren(preAst: Script, parent: AST, walker: IAstWalker): void {\n            if (preAst.bod) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkTypeDeclChildren(preAst: InterfaceDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            // walked arguments as part of members\n            if (walker.options.goNextSibling && preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (walker.options.goNextSibling && preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkModuleDeclChildren(preAst: ModuleDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n\n        export function walkImportDeclChildren(preAst: ImportDeclaration, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.alias) {\n                preAst.alias = walker.walk(preAst.alias, preAst);\n            }\n        }\n\n        export function walkWithStatementChildren(preAst: WithStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body && walker.options.goNextSibling) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkLabelChildren(preAst: Label, parent: AST, walker: IAstWalker): void {\n            //TODO: Walk "id"?\n        }\n\n        export function walkLabeledStatementChildren(preAst: LabeledStatement, parent: AST, walker: IAstWalker): void {\n            preAst.labels = <ASTList>walker.walk(preAst.labels, preAst);\n            if (walker.options.goNextSibling) {\n                preAst.stmt = walker.walk(preAst.stmt, preAst);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    class Base64Format {\n        static encodedValues = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n        static encode(inValue: number) {\n            if (inValue < 64) {\n                return encodedValues.charAt(inValue);\n            }\n            throw TypeError(inValue + ": not a 64 based value");\n        }\n\n        static decodeChar(inChar: string) {\n            if (inChar.length === 1) {\n                return encodedValues.indexOf(inChar);\n            } else {\n                throw TypeError(\'"\' + inChar + \'" must have length 1\');\n            }\n        }\n    }\n\n    export class Base64VLQFormat {\n        static encode(inValue: number) {\n            // Add a new least significant bit that has the sign of the value.\n            // if negative number the least significant bit that gets added to the number has value 1\n            // else least significant bit value that gets added is 0\n            // eg. -1 changes to binary : 01 [1] => 3\n            //     +1 changes to binary : 01 [0] => 2\n            if (inValue < 0) {\n                inValue = ((-inValue) << 1) + 1;\n            }\n            else {\n                inValue = inValue << 1;\n            }\n\n            // Encode 5 bits at a time starting from least significant bits\n            var encodedStr = "";\n            do {\n                var currentDigit = inValue & 31; // 11111\n                inValue = inValue >> 5;\n                if (inValue > 0) {\n                    // There are still more digits to decode, set the msb (6th bit)\n                    currentDigit = currentDigit | 32; \n               ';
var v27810 = v27811 + ' }\n                encodedStr = encodedStr + Base64Format.encode(currentDigit);\n            } while (inValue > 0);\n\n            return encodedStr;\n        }\n\n        static decode(inString: string) {\n            var result = 0;\n            var negative = false;\n\n            var shift = 0;\n            for (var i = 0; i < inString.length; i++) {\n                var byte = Base64Format.decodeChar(inString[i]);\n                if (i === 0) {\n                    // Sign bit appears in the LSBit of the first value\n                    if ((byte & 1) === 1) {\n                        negative = true;\n                    }\n                    result = (byte >> 1) & 15; // 1111x\n                } else {\n                    result = result | ((byte & 31) << shift); // 11111\n                }\n\n                shift += (i == 0) ? 4 : 5;\n\n                if ((byte & 32) === 32) {\n                    // Continue\n                } else {\n                    return { value: negative ? -(result) : result, rest: inString.substr(i + 1) };\n                }\n            }\n\n            throw new Error(\'Base64 value "\' + inString + \'" finished with a continuation bit\');\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Binder {\n        constructor(public checker: TypeChecker) { }\n        \n        public resolveBaseTypeLinks(typeLinks: TypeLink[], scope: SymbolScope) {\n            var extendsList: Type[] = null;\n            if (typeLinks) {\n                extendsList = new Type[];\n                for (var i = 0, len = typeLinks.length; i < len; i++) {\n                    extendsList[i] = this.checker.resolveBaseTypeLink(typeLinks[i], scope);\n                }\n            }\n            return extendsList;\n        }\n\n        public resolveBases(scope: SymbolScope, type: Type) {\n            type.extendsList = this.resolveBaseTypeLinks(type.extendsTypeLinks, scope);\n\n            var i = 0, len = type.extendsList.length;\n            var derivedIsClass = type.isClassInstance();\n            for (; i < len; i++) {\n                var baseIsClass = type.extendsList[i].isClassInstance();\n                if (type.extendsList[i] != this.checker.anyType) {\n                    var baseRef = type.extendsTypeLinks[i].ast;\n                    if (derivedIsClass) {\n                        if (!baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "A class may only extend other classes, " + type.extendsList[i].symbol.fullName() + " is not a class.");\n                        }\n                    }\n                    else {\n                        if (baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() + " is a class.");\n                        }\n                    }\n                }\n            }\n\n            type.implementsList = this.resolveBaseTypeLinks(type.implementsTypeLinks, scope);\n\n            if (type.implementsList) {\n                for (i = 0, len = type.implementsList.length; i < len; i++) {\n                    var iface = type.implementsList[i];\n                    var baseRef = type.implementsTypeLinks[i].ast;\n                    if (iface.isClassInstance()) {\n                        if (derivedIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "A class may only implement an interface; " + iface.symbol.fullName() + " is a class.");\n                        }\n                    }\n                }\n            }\n        }\n\n        public resolveSignatureGroup(signatureGroup: SignatureGroup, scope: SymbolScope, instanceType: Type) {\n            var supplyVar = !(signatureGroup.hasImplementation);\n            for (var i = 0, len = signatureGroup.signatures.length; i < len; i++) {\n                var signature = signatureGroup.signatures[i];\n                if (instanceType) {\n                    signature.returnType.type = instanceType;\n                }\n                else {\n                    this.checker.resolveTypeLink(scope, signature.returnType, supplyVar);\n               ';
var v27809 = v27810 + ' }\n                var paramLen = signature.parameters.length;\n                for (var j = 0; j < paramLen; j++) {\n                    this.bindSymbol(scope, signature.parameters[j]);\n                }\n                if (signature.hasVariableArgList) {\n                    // check that last parameter has an array type\n                    var lastParam = <ParameterSymbol>signature.parameters[paramLen - 1];\n                    lastParam.argsOffset = paramLen - 1;\n                    if (!lastParam.getType().isArray()) {\n                        this.checker.errorReporter.simpleErrorFromSym(lastParam,\n                                                                 "... parameter must have array type");\n                        lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type);\n                    }\n                }\n            }\n        }\n\n        public bindType(scope: SymbolScope, type: Type, instanceType: Type): void {\n            if (instanceType) {\n                this.bindType(scope, instanceType, null);\n            }\n            if (type.hasMembers()) {\n                var members = type.members;\n                var ambientMembers = type.ambientMembers;\n                var typeMembers = type.getAllEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var ambientTypeMembers = type.getAllAmbientEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var memberScope = new SymbolTableScope(members, ambientMembers, typeMembers, ambientTypeMembers, type.symbol);\n                var agg = new SymbolAggregateScope(type.symbol);\n                var prevCurrentModDecl = this.checker.currentModDecl;\n                var prevBindStatus = this.checker.inBind;\n                agg.addParentScope(memberScope);\n                agg.addParentScope(scope);\n                if (type.isModuleType()) {\n                    this.checker.currentModDecl = <ModuleDeclaration>type.symbol.declAST;\n                    this.checker.inBind = true;\n                }\n                if (members) {\n                    this.bind(agg, type.members.allMembers); // REVIEW: Should only be getting exported types?\n                }\n                if (typeMembers) {\n                    this.bind(agg, typeMembers.allMembers);\n                }\n                if (ambientMembers) {\n                    this.bind(agg, ambientMembers.allMembers);\n                }\n                if (ambientTypeMembers) {\n                    this.bind(agg, ambientTypeMembers.allMembers);\n                }\n                this.checker.currentModDecl = prevCurrentModDecl;\n                this.checker.inBind = prevBindStatus;\n            }\n            if (type.extendsTypeLinks) {\n                this.resolveBases(scope, type);\n            }\n            if (type.construct) {\n                this.resolveSignatureGroup(type.construct, scope, instanceType);\n            }\n            if (type.call) {\n                this.resolveSignatureGroup(type.call, scope, null);\n            }\n            if (type.index) {\n                this.resolveSignatureGroup(type.index, scope, null);\n            }\n            if (type.elementType) {\n                this.bindType(scope, type.elementType, null);\n            }\n        }\n\n        public bindSymbol(scope: SymbolScope, symbol: Symbol) {\n            if (!symbol.bound) {\n                var prevLocationInfo = this.checker.locationInfo;\n                if ((this.checker.units) && (symbol.unitIndex >= 0) && (symbol.unitIndex < this.checker.units.length)) {\n                    this.checker.locationInfo = this.checker.units[symbol.unitIndex];\n                }\n                switch (symbol.kind()) {\n                    case SymbolKind.Type:\n\n                        if (symbol.flags & SymbolFlags.Bound) {\n                            break;\n                        }\n\n                        var typeSymbol = <TypeSymbol>symbol;\n                        typeSymbol.flags |= SymbolFlags.Bound;\n\n                        // Since type collection happens out of order, a dynamic module referenced by an import statement\n                        // may not yet be in scope when the import symbol is created.  In that case, we need to search\n                        // out the module symbol now\n                        // Note that we\'ll also want to do this in resolveTypeMembers, in case the symbol is set outside the\n                        // context of a given module  (E.g., an outer import statement)\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.filename, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymb';
var v27808 = v27809 + 'ol.type = modSym.getType();\n                            }\n                        }\n\n                        if (typeSymbol.type && typeSymbol.type != this.checker.gloModType) {\n                            this.bindType(scope, typeSymbol.type, typeSymbol.instanceType);\n\n                            // bind expansions on the parent type symbol\n                            if (typeSymbol.type.isModuleType()) {\n                                for (var i = 0; i < typeSymbol.expansions.length; i++) {\n                                    this.bindType(scope, typeSymbol.expansions[i], typeSymbol.instanceType);\n                                }\n                            }\n                        }\n                        break;\n                    case SymbolKind.Field:\n                        this.checker.resolveTypeLink(scope, (<FieldSymbol>symbol).field.typeLink,\n                                                false);\n                        break;\n                    case SymbolKind.Parameter:\n                        this.checker.resolveTypeLink(scope,\n                                                (<ParameterSymbol>symbol).parameter.typeLink,\n                                                true);\n                        break;\n                }\n                this.checker.locationInfo = prevLocationInfo;\n            }\n            symbol.bound = true;\n        }\n\n        public bind(scope: SymbolScope, table: IHashTable) {\n            table.map(\n                (key, sym, binder) => {\n                    binder.bindSymbol(scope, sym);\n                },\n                this);\n        }\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class DeclFileWriter {\n        public onNewLine = true;\n        constructor(private declFile: ITextWriter) {\n        }\n\n        public Write(s: string) {\n            this.declFile.Write(s);\n            this.onNewLine = false;\n        }\n\n        public WriteLine(s: string) {\n            this.declFile.WriteLine(s);\n            this.onNewLine = true;\n        }\n\n        public Close() {\n            this.declFile.Close();\n        }\n    }\n\n    export class DeclarationEmitter implements AstWalkerWithDetailCallback.AstWalkerDetailCallback {\n        private declFile: DeclFileWriter = null;\n        private indenter = new Indenter();\n        private declarationContainerStack: AST[] = [];\n        private isDottedModuleName: bool[] = [];\n        private dottedModuleEmit: string;\n        private ignoreCallbackAst: AST = null;\n        private singleDeclFile: DeclFileWriter = null;\n        private varListCount: number = 0;\n\n        private getAstDeclarationContainer() {\n            return this.declarationContainerStack[this.declarationContainerStack.length - 1];\n        }\n\n        private emitDottedModuleName() {\n            return (this.isDottedModuleName.length == 0) ? false : this.isDottedModuleName[this.isDottedModuleName.length - 1];\n        }\n\n        constructor (public checker: TypeChecker, public emitOptions: EmitOptions, public errorReporter: ErrorReporter) {\n        }\n\n        public setDeclarationFile(file: ITextWriter) {\n            this.declFile = new DeclFileWriter(file);\n        }\n\n        public Close() {\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                this.declFile.Close();\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n\n        public emitDeclarations(script: TypeScript.Script): void {\n            AstWalkerWithDetailCallback.walk(script, this);\n        }\n\n        private getIndentString(declIndent? = false) {\n            if (this.emitOptions.minWhitespace) {\n                return "";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        private emitIndent() {\n            this.declFile.Write(this.getIndentString());\n        }\n\n        private canEmitSignature(declFlags: DeclFlags, canEmitGlobalAmbientDecl?: bool = true, useDeclarationContainerTop?: bool = true) {\n            var container: AST;\n            if (useDeclarationContainerTop) {\n                container = this.getAstDeclarationContainer();\n            } else {\n                container = this.declarationContainerStack[this.declarationContainerStack.length - 2];\n            }\n';
var v27807 = v27808 + '\n            if (container.nodeType == NodeType.ModuleDeclaration && !hasFlag(declFlags, DeclFlags.Exported)) {\n                return false;\n            }\n\n            if (!canEmitGlobalAmbientDecl && container.nodeType == NodeType.Script && hasFlag(declFlags, DeclFlags.Ambient)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        private canEmitPrePostAstSignature(declFlags: DeclFlags, astWithPrePostCallback: AST, preCallback: bool) {\n            if (this.ignoreCallbackAst) {\n                CompilerDiagnostics.assert(this.ignoreCallbackAst != astWithPrePostCallback, "Ignore Callback AST mismatch");\n                this.ignoreCallbackAst = null;\n                return false;\n            } else if (preCallback &&\n                !this.canEmitSignature(declFlags, true, preCallback)) {\n                this.ignoreCallbackAst = astWithPrePostCallback;\n                return false;\n            }\n\n            return true;\n        }\n\n        private getDeclFlagsString(declFlags: DeclFlags, typeString: string) {\n            var result = this.getIndentString();\n\n            // Accessor strings\n            var accessorString = "";\n            if (hasFlag(declFlags, DeclFlags.GetAccessor)) {\n                accessorString = "get ";\n            }\n            else if (hasFlag(declFlags, DeclFlags.SetAccessor)) {\n                accessorString = "set ";\n            }\n\n            // Emit export only for global export statements. The container for this would be dynamic module which is whole file\n            var container = this.getAstDeclarationContainer();\n            if (container.nodeType == NodeType.ModuleDeclaration &&\n                hasFlag((<ModuleDeclaration>container).modFlags, ModuleFlags.IsWholeFile) &&\n                hasFlag(declFlags, DeclFlags.Exported)) {\n                result += "export ";\n            }\n\n            // Static/public/private/global declare\n            if (hasFlag(declFlags, DeclFlags.LocalStatic) || hasFlag(declFlags, DeclFlags.Static)) {\n                result += "static " + accessorString;\n            }\n            else {\n                if (hasFlag(declFlags, DeclFlags.Private)) {\n                    result += "private " + accessorString;\n                }\n                else if (hasFlag(declFlags, DeclFlags.Public)) {\n                    result += "public " + accessorString;\n                }\n                else {\n                    if (accessorString == "") {\n                        result += typeString + " ";\n                    } else {\n                        result += accessorString;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        private emitDeclFlags(declFlags: DeclFlags, typeString: string) {\n            this.declFile.Write(this.getDeclFlagsString(declFlags, typeString));\n        }\n\n        private canEmitTypeAnnotationSignature(declFlag: DeclFlags = DeclFlags.None) {\n            // Private declaration, shouldnt emit type any time.\n            return !hasFlag(declFlag, DeclFlags.Private);\n        }\n\n        private pushDeclarationContainer(ast: AST) {\n            this.declarationContainerStack.push(ast);\n        }\n\n        private popDeclarationContainer(ast: AST) {\n            CompilerDiagnostics.assert(ast != this.getAstDeclarationContainer(), \'Declaration container mismatch\');\n            this.declarationContainerStack.pop();\n        }\n\n        private emitTypeNamesMember(memberName: MemberName, emitIndent? : bool = false) {\n            if (memberName.prefix == "{ ") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.WriteLine("{");\n                this.indenter.increaseIndent();\n                emitIndent = true;\n            } else if (memberName.prefix != "") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write(memberName.prefix);\n                emitIndent = false;\n            }\n\n            if (memberName.isString()) {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write((<MemberNameString>memberName).text);\n            } else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    this.emitTypeNamesMember(ar.entries[index], emitIndent);\n                    if (ar.delim == "; ") {\n                        this.declFile.WriteLine(";");\n                    }\n                }\n            }\n\n            if (memberName.suffix == "}") {\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.declFile.Write(memberName.suffix);\n            } else {\n                this.declFile.Write(memberName.suffix);\n            }\n        }\n\n        private emitTypeSignature(type: Type) {\n            var containingScope: SymbolScope = null';
var v27806 = v27807 + ';\n            var declarationContainerAst = this.getAstDeclarationContainer();\n            switch (declarationContainerAst.nodeType) {\n                case NodeType.ModuleDeclaration:\n                case NodeType.InterfaceDeclaration:\n                case NodeType.FuncDecl:\n                    if (declarationContainerAst.type) {\n                        containingScope = declarationContainerAst.type.containedScope;\n                    }\n                    break;\n\n                case NodeType.Script:\n                    var script = <Script>declarationContainerAst;\n                    if (script.bod) {\n                        containingScope = script.bod.enclosingScope;\n                    }\n                    break;\n\n                case NodeType.ClassDeclaration:\n                    if (declarationContainerAst.type) {\n                        containingScope = declarationContainerAst.type.instanceType.containedScope;\n                    }\n                    break;\n\n                default:\n                    CompilerDiagnostics.debugPrint("Unknown containing scope");\n            }\n\n            var typeNameMembers = type.getScopedTypeNameEx(containingScope);\n            this.emitTypeNamesMember(typeNameMembers);\n        }\n\n        private emitComment(comment: Comment) {\n            var text = comment.getText();\n            if (this.declFile.onNewLine) {\n                this.emitIndent();\n            } else if (!comment.isBlockComment) {\n                this.declFile.WriteLine("");\n                this.emitIndent();\n            }\n            \n            this.declFile.Write(text[0]);\n\n            for (var i = 1; i < text.length; i++) {\n                this.declFile.WriteLine("");\n                this.emitIndent();\n                this.declFile.Write(text[i]);\n            }\n\n            if (comment.endsLine || !comment.isBlockComment) {\n                this.declFile.WriteLine("");\n            } else {\n                this.declFile.Write(" ");\n            }\n        }\n\n        private emitDeclarationComments(ast: AST, endLine?: bool);\n        private emitDeclarationComments(symbol: Symbol, endLine?: bool);\n        private emitDeclarationComments(astOrSymbol, endLine = true) {\n            if (!this.emitOptions.emitComments) {\n                return;\n            }\n\n            var declComments = <Comment[]>astOrSymbol.getDocComments();\n            if (declComments.length > 0) {\n                for (var i = 0; i < declComments.length; i++) {\n                    this.emitComment(declComments[i]);\n                }\n\n                if (endLine) {\n                    if (!this.declFile.onNewLine) {\n                        this.declFile.WriteLine("");\n                    }\n                } else {\n                    if (this.declFile.onNewLine) {\n                        this.emitIndent();\n                    }\n                }\n            }\n        }\n\n        public VarDeclCallback(pre: bool, varDecl: VarDecl): bool {\n            if (pre && this.canEmitSignature(ToDeclFlags(varDecl.varFlags), false)) {\n                var interfaceMember = (this.getAstDeclarationContainer().nodeType == NodeType.InterfaceDeclaration);\n                this.emitDeclarationComments(varDecl);\n                if (!interfaceMember) {\n                    // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n                    // If it is var list of form  var a = varList count will be 0\n                    if (this.varListCount >= 0) {\n                        this.emitDeclFlags(ToDeclFlags(varDecl.varFlags), "var");\n                        this.varListCount = -this.varListCount;\n                    }\n                    this.declFile.Write(varDecl.id.text);\n                } else {\n                    this.emitIndent();\n                    this.declFile.Write(varDecl.id.text);\n                    if (hasFlag(varDecl.id.flags, ASTFlags.OptionalName)) {\n                        this.declFile.Write("?");\n                    }\n                }\n\n                var type: Type = null;\n                if (varDecl.typeExpr && varDecl.typeExpr.type) {\n                    type = varDecl.typeExpr.type;\n                }\n                else if (varDecl.sym) {\n                    type = (<FieldSymbol>varDecl.sym).getType();\n                    // Dont emit inferred any\n                    if (type == this.checker.anyType) {\n                        type = null;\n                    }\n                }\n\n                if (type && this.canEmitTypeAnnotationSignature(ToDeclFlags(varDecl.varFlags))) {\n                    this.declFile.Write(": ");\n                    this.emitTypeSignature(type);\n                }\n               \n                // emitted one var decl\n                if (this.varListCount > 0) { this.varListCount--; } else if (this.varListCount < 0) { this.varListCount++; }\n\n                // Write ; or ,\n                if (this.varListCount < 0) {\n                    this.declF';
var v27805 = v27806 + 'ile.Write(", ");\n                } else {\n                    this.declFile.WriteLine(";");\n                }\n            }\n            return false;\n        }\n\n        public BlockCallback(pre: bool, block: Block): bool {\n            if (!block.isStatementBlock) {\n                if (pre) {\n                    this.varListCount = block.statements.members.length;\n                } else {\n                    this.varListCount = 0;\n                }\n                return true;\n            }\n            return false;\n        }\n\n        private emitArgDecl(argDecl: ArgDecl, funcDecl: FuncDecl) {\n            this.emitDeclarationComments(argDecl, false);\n            this.declFile.Write(argDecl.id.text);\n            if (argDecl.isOptionalArg()) {\n                this.declFile.Write("?");\n            }\n            if ((argDecl.typeExpr || argDecl.type != this.checker.anyType) &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags))) {\n                this.declFile.Write(": ");\n                this.emitTypeSignature(argDecl.type);\n            }\n        }\n\n        public FuncDeclCallback(pre: bool, funcDecl: FuncDecl): bool {\n            if (!pre) {\n                return false;\n            }\n\n            if (funcDecl.isAccessor()) {\n                return this.emitPropertyAccessorSignature(funcDecl);\n            }\n\n            var isInterfaceMember = (this.getAstDeclarationContainer().nodeType == NodeType.InterfaceDeclaration);\n            if (funcDecl.bod) {\n                if (funcDecl.isConstructor) {\n                    if (funcDecl.type.construct && funcDecl.type.construct.signatures.length > 1) {\n                        return false;\n                    }\n                } else {\n                    if (funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {\n                        // This means its implementation of overload signature. do not emit\n                        return false;\n                    }\n                }\n            } else if (!isInterfaceMember && hasFlag(funcDecl.fncFlags, FncFlags.Private) && funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {\n                // Print only first overload of private function\n                var signatures = funcDecl.type.call.signatures;\n                var firstSignature = signatures[0].declAST;\n                if (firstSignature.bod) {\n                    // Its a implementation, use next one\n                    firstSignature = signatures[1].declAST;\n                }\n\n                if (firstSignature != funcDecl) {\n                    return false;\n                }\n            }\n\n            if (!this.canEmitSignature(ToDeclFlags(funcDecl.fncFlags), false)) {\n                return false;\n            }\n\n            this.emitDeclarationComments(funcDecl);\n            if (funcDecl.isConstructor) {\n                this.emitIndent();\n                this.declFile.Write("constructor");\n            }\n            else {\n                var id = funcDecl.getNameText();\n                if (!isInterfaceMember) {\n                    this.emitDeclFlags(ToDeclFlags(funcDecl.fncFlags), "function");\n                    this.declFile.Write(id);\n                } else {\n                    this.emitIndent();\n                    if (funcDecl.isConstructMember()) {\n                        this.declFile.Write("new");\n                    } else if (!funcDecl.isCallMember() && !funcDecl.isIndexerMember()) {\n                        this.declFile.Write(id);\n                        if (hasFlag(funcDecl.name.flags, ASTFlags.OptionalName)) {\n                            this.declFile.Write("? ");\n                        }\n                    }\n                }\n            }\n\n            if (!funcDecl.isIndexerMember()) {\n                this.declFile.Write("(");\n            } else {\n                this.declFile.Write("[");\n            }\n\n            this.indenter.increaseIndent();\n\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length;\n                if (funcDecl.variableArgList) {\n                    argsLen--;\n                }\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    this.emitArgDecl(argDecl, funcDecl);\n                    if (i < (argsLen - 1)) {\n                        this.declFile.Write(", ");\n                    }\n                }\n            }\n\n            if (funcDecl.variableArgList) {\n                var lastArg = <ArgDecl>funcDecl.arguments.members[funcDecl.arguments.members.length - 1];\n                if (funcDecl.arguments.members.length > 1) {\n                    this.declFile.Write(", ...");\n                }\n                else {\n                    this.declFile.Write("...");\n                }\n                this.emitArgDecl(lastArg, funcDecl);\n            }\n\n            this.indenter.decreaseIndent();\n\n            if (!funcDecl.isIndexerMember(';
var v27804 = v27805 + ')) {\n                this.declFile.Write(")");\n            } else {\n                this.declFile.Write("]");\n            }\n\n            if (!funcDecl.isConstructor &&\n                (funcDecl.returnTypeAnnotation || funcDecl.signature.returnType.type != this.checker.anyType) &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags))) {\n                this.declFile.Write(": ");\n                this.emitTypeSignature(funcDecl.signature.returnType.type);\n            }\n\n            this.declFile.WriteLine(";");\n\n            return false;\n        }\n\n        private emitBaseList(bases: ASTList, qual: string) {\n            if (bases && (bases.members.length > 0)) {\n                this.declFile.Write(" " + qual + " ");\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    var baseExpr = bases.members[i];\n                    var baseSymbol = baseExpr.type.symbol;\n                    var baseType = baseExpr.type;\n                    if (i > 0) {\n                        this.declFile.Write(", ");\n                    }\n                    this.emitTypeSignature(baseType);\n                }\n            }\n        }\n\n        private emitPropertyAccessorSignature(funcDecl: FuncDecl) {\n            var accessorSymbol = <FieldSymbol>funcDecl.accessorSymbol;\n            if (accessorSymbol.getter && accessorSymbol.getter.declAST != funcDecl) {\n                // Setter is being used to emit the type info. \n                return false;\n            }\n\n            this.emitDeclarationComments(accessorSymbol);\n            this.emitDeclFlags(ToDeclFlags(accessorSymbol.flags), "var");\n            this.declFile.Write(funcDecl.name.text);\n            var propertyType = accessorSymbol.getType();\n            if (this.canEmitTypeAnnotationSignature(ToDeclFlags(accessorSymbol.flags))) {\n                this.declFile.Write(" : ");\n                this.emitTypeSignature(propertyType);\n            }\n            this.declFile.WriteLine(";");\n\n            return false;\n        }\n\n        private emitClassMembersFromConstructorDefinition(funcDecl: FuncDecl) {\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length; if (funcDecl.variableArgList) { argsLen--; }\n\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    if (hasFlag(argDecl.varFlags, VarFlags.Property)) {\n                        this.emitDeclarationComments(argDecl);\n                        this.emitDeclFlags(ToDeclFlags(argDecl.varFlags), "var");\n                        this.declFile.Write(argDecl.id.text);\n\n                        if (argDecl.typeExpr && this.canEmitTypeAnnotationSignature(ToDeclFlags(argDecl.varFlags))) {\n                            this.declFile.Write(": ");\n                            this.emitTypeSignature(argDecl.type);\n                        }\n                        this.declFile.WriteLine(";");\n                    }\n                }\n            }\n        }\n\n        public ClassDeclarationCallback(pre: bool, classDecl: ClassDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(classDecl.varFlags), classDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var className = classDecl.name.text;\n                this.emitDeclarationComments(classDecl);\n                this.emitDeclFlags(ToDeclFlags(classDecl.varFlags), "class");\n                this.declFile.Write(className);\n                this.emitBaseList(classDecl.extendsList, "extends");\n                this.emitBaseList(classDecl.implementsList, "implements");\n                this.declFile.WriteLine(" {");\n\n                this.pushDeclarationContainer(classDecl);\n                this.indenter.increaseIndent();\n                if (classDecl.constructorDecl) {\n                    this.emitClassMembersFromConstructorDefinition(classDecl.constructorDecl);\n                }\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(classDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine("}");\n            }\n\n            return true;\n        }\n\n        public InterfaceDeclarationCallback(pre: bool, interfaceDecl: InterfaceDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(interfaceDecl.varFlags), interfaceDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var interfaceName = interfaceDecl.name.text;\n                this.emitDeclarationComments(interfaceDecl);\n                this.emitDeclFlags(ToDeclFlags(interfaceDecl.varFlags), "interface");\n                this.declFile.Write(interfaceName);\n                this.emitBaseList(interfaceDecl.extendsList, "extends");\n                this.declFile.WriteLine(" {");\n\n                this.indenter';
var v27803 = v27804 + '.increaseIndent();\n                this.pushDeclarationContainer(interfaceDecl);\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(interfaceDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine("}");\n            }\n\n            return true;\n        }\n\n        public ImportDeclarationCallback(pre: bool, importDecl: ImportDeclaration): bool {\n            if (pre) {\n                if ((<Script>this.declarationContainerStack[0]).isExternallyVisibleSymbol(importDecl.id.sym)) {\n                    this.emitDeclarationComments(importDecl);\n                    this.emitIndent();\n                    this.declFile.Write("import ");\n\n                    this.declFile.Write(importDecl.id.text + " = ");\n                    if (importDecl.isDynamicImport) {\n                        this.declFile.WriteLine("module (" + importDecl.getAliasName() + ");");\n                    } else {\n                        this.declFile.WriteLine(importDecl.getAliasName() + ";");\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private emitEnumSignature(moduleDecl: ModuleDeclaration) {\n            if (!this.canEmitSignature(ToDeclFlags(moduleDecl.modFlags))) {\n                return false;\n            }\n\n            this.emitDeclarationComments(moduleDecl);\n            this.emitDeclFlags(ToDeclFlags(moduleDecl.modFlags), "enum");\n            this.declFile.WriteLine(moduleDecl.name.text + " {");\n\n            this.indenter.increaseIndent();\n            var membersLen = moduleDecl.members.members.length;\n            for (var j = 1; j < membersLen; j++) {\n                var memberDecl: AST = moduleDecl.members.members[j];\n                if (memberDecl.nodeType == NodeType.VarDecl) {\n                    this.emitDeclarationComments(memberDecl);\n                    this.emitIndent();\n                    this.declFile.WriteLine((<VarDecl>memberDecl).id.text + ",");\n                } else {\n                    CompilerDiagnostics.assert(memberDecl.nodeType != NodeType.Asg, "We want to catch this");\n                }\n            }\n            this.indenter.decreaseIndent();\n\n            this.emitIndent();\n            this.declFile.WriteLine("}");\n\n            return false;\n        }\n\n        public ModuleDeclarationCallback(pre: bool, moduleDecl: ModuleDeclaration): bool {\n            if (hasFlag(moduleDecl.modFlags, ModuleFlags.IsWholeFile)) {\n                // This is dynamic modules and we are going to outputing single file, \n                // we need to change the declFile because dynamic modules are always emitted to their corresponding .d.ts\n                if (hasFlag(moduleDecl.modFlags, ModuleFlags.IsDynamic)) {\n                    if (pre) {\n                        if (!this.emitOptions.outputMany) {\n                            this.singleDeclFile = this.declFile;\n                            CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");\n                            // Create new file\n                            var declareFileName = this.emitOptions.mapOutputFileName(stripQuotes(moduleDecl.name.sym.name), TypeScriptCompiler.mapToDTSFileName);\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment);\n                            try {\n                                // Creating files can cause exceptions, report them.   \n                                this.declFile = new DeclFileWriter(this.emitOptions.ioHost.createFile(declareFileName, useUTF8InOutputfile));\n                            } catch (ex) {\n                                this.errorReporter.emitterError(null, ex.message);\n                            }\n                        }\n                        this.pushDeclarationContainer(moduleDecl);\n                    } else {\n                        if (!this.emitOptions.outputMany) {\n                            CompilerDiagnostics.assert(this.singleDeclFile != this.declFile, "singleDeclFile cannot be null as we are going to revert back to it");\n                            CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");\n                            try {\n                                // Closing files could result in exceptions, report them if they occur\n                                this.declFile.Close();\n                            } catch (ex) {\n                                this.errorReporter.emitterError(null, ex.message);\n                            }\n                            this.declFile = this.singleDeclFile;\n                        }\n                        this.popDeclarationContainer(moduleDecl);\n                    }\n                }\n\n                return true;\n            }\n\n            if (moduleDecl.isEnum()) {\n                if (pre) {\n           ';
var v27802 = v27803 + '         this.emitEnumSignature(moduleDecl);\n                }\n                return false;\n            }\n\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(moduleDecl.modFlags), moduleDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                if (this.emitDottedModuleName()) {\n                    this.dottedModuleEmit += ".";\n                } else {\n                    this.dottedModuleEmit = this.getDeclFlagsString(ToDeclFlags(moduleDecl.modFlags), "module");\n                }\n                this.dottedModuleEmit += moduleDecl.name.text;\n\n                var isCurrentModuleDotted = (moduleDecl.members.members.length == 1 &&\n                    moduleDecl.members.members[0].nodeType == NodeType.ModuleDeclaration &&\n                    !(<ModuleDeclaration>moduleDecl.members.members[0]).isEnum() &&\n                    hasFlag((<ModuleDeclaration>moduleDecl.members.members[0]).modFlags, ModuleFlags.Exported));\n\n                // Module is dotted only if it does not have doc comments for it\n                var moduleDeclComments = moduleDecl.getDocComments();\n                isCurrentModuleDotted = isCurrentModuleDotted && (moduleDeclComments == null || moduleDeclComments.length == 0);\n\n                this.isDottedModuleName.push(isCurrentModuleDotted);\n                this.pushDeclarationContainer(moduleDecl);\n\n                if (!isCurrentModuleDotted) {\n                    this.emitDeclarationComments(moduleDecl);\n                    this.declFile.Write(this.dottedModuleEmit);\n                    this.declFile.WriteLine(" {");\n                    this.indenter.increaseIndent();\n                }\n            } else {\n                if (!this.emitDottedModuleName()) {\n                    this.indenter.decreaseIndent();\n                    this.emitIndent();\n                    this.declFile.WriteLine("}");\n                }\n                this.popDeclarationContainer(moduleDecl);\n                this.isDottedModuleName.pop();\n            }\n\n            return true;\n        }\n\n        public ScriptCallback(pre: bool, script: Script): bool {\n            if (pre) {\n                if (this.emitOptions.outputMany) {\n                    for (var i = 0; i < script.referencedFiles.length; i++) {\n                        var referencePath = script.referencedFiles[i].path;\n                        var declareFileName: string;\n                        if (isRooted(referencePath)) {\n                            declareFileName = this.emitOptions.mapOutputFileName(referencePath, TypeScriptCompiler.mapToDTSFileName)\n                        } else {\n                            declareFileName = getDeclareFilePath(script.referencedFiles[i].path);\n                        }\n                        this.declFile.WriteLine(\'/// <reference path="\' + declareFileName + \'" />\');\n                    }\n                }\n                this.pushDeclarationContainer(script);\n            }\n            else {\n                this.popDeclarationContainer(script);\n            }\n            return true;\n        }\n\n        public DefaultCallback(pre: bool, ast: AST): bool {\n            return !hasFlag(ast.flags, ASTFlags.IsStatement);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export module CompilerDiagnostics {\n        export var debug = false;\n        export interface IDiagnosticWriter {\n            Alert(output: string): void;\n        }\n\n        export var diagnosticWriter: IDiagnosticWriter = null;\n\n        export var analysisPass: number = 0;\n\n        export function Alert(output: string) {\n            if (diagnosticWriter) {\n                diagnosticWriter.Alert(output);\n            }\n        }\n\n        export function debugPrint(s: string) {\n            if (debug) {\n                Alert(s);\n            }\n        }\n\n        export function assert(condition: bool, s: string) {\n            if (debug) {\n                if (!condition) {\n                    Alert(s);\n                }\n            }\n        }\n\n    }\n\n    export interface ILogger {\n        information(): bool;\n        debug(): bool;\n        warning(): bool;\n        error(): bool;\n        fatal(): bool;\n        log(s: string): void;\n    }\n\n    export class NullLogger implements ILogger {\n        public information(): bool { return false; }\n        public debug(): bool { r';
var v27801 = v27802 + 'eturn false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n        }\n    }\n\n    export class LoggerAdapter implements ILogger {\n        private _information: bool;\n        private _debug: bool;\n        private _warning: bool;\n        private _error: bool;\n        private _fatal: bool;\n\n        constructor (public logger: ILogger) { \n            this._information = this.logger.information();\n            this._debug = this.logger.debug();\n            this._warning = this.logger.warning();\n            this._error = this.logger.error();\n            this._fatal = this.logger.fatal();\n        }\n\n\n        public information(): bool { return this._information; }\n        public debug(): bool { return this._debug; }\n        public warning(): bool { return this._warning; }\n        public error(): bool { return this._error; }\n        public fatal(): bool { return this._fatal; }\n        public log(s: string): void {\n            this.logger.log(s);\n        }\n    }\n\n    export class BufferedLogger implements ILogger {\n        public logContents = [];\n\n        public information(): bool { return false; }\n        public debug(): bool { return false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n            this.logContents.push(s);\n        }\n    }\n\n    export function timeFunction(logger: ILogger, funcDescription: string, func: () =>any): any {\n        var start = +new Date();\n        var result = func();\n        var end = +new Date();\n        logger.log(funcDescription + " completed in " + (end - start) + " msec");\n        return result;\n    }\n\n    export function stringToLiteral(value: string, length: number): string {\n        var result = "";\n\n        var addChar = (index: number) => {\n            var ch = value.charCodeAt(index);\n            switch (ch) {\n                case 0x09: // tab\n                    result += "\\\\t";\n                    break;\n                case 0x0a: // line feed\n                    result += "\\\\n";\n                    break;\n                case 0x0b: // vertical tab\n                    result += "\\\\v";\n                    break;\n                case 0x0c: // form feed\n                    result += "\\\\f";\n                    break;\n                case 0x0d: // carriage return\n                    result += "\\\\r";\n                    break;\n                case 0x22:  // double quote\n                    result += "\\\\\\"";\n                    break;\n                case 0x27: // single quote\n                    result += "\\\\\\\'";\n                    break;\n                case 0x5c: // Backslash\n                    result += "\\\\";\n                    break;\n                default:\n                    result += value.charAt(index);\n            }\n        }\n\n        var tooLong = (value.length > length);\n        if (tooLong) {\n            var mid = length >> 1;\n            for (var i = 0; i < mid; i++) addChar(i);\n            result += "(...)";\n            for (var i = value.length - mid; i < value.length; i++) addChar(i);\n        }\n        else {\n            length = value.length;\n            for (var i = 0; i < length; i++) addChar(i);\n        }\n        return result;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum EmitContainer {\n        Prog,\n        Module,\n        DynamicModule,\n        Class,\n        Constructor,\n        Function,\n        Args,\n        Interface,\n    }\n\n    export class EmitState {\n        public column: number;\n        public line: number;\n        public pretty: bool;\n        public inObjectLiteral: bool;\n        public container: EmitContainer;\n\n        constructor () {\n            this.column = 0;\n            this.line = 0;\n            this.pretty = false;\n            this.inObjectLiteral = false;\n            this.container = EmitContainer.Prog;\n        }\n    }\n\n    export class EmitOptions {\n        public minWhitespace: bool;\n        public propagateConstants: bool;\n        public emitComments: bool;\n        public outputOption: string;\n        public ioHost: EmitterIOHost = null;\n        public outputMany: bool = true;\n        public commonDirectoryPath';
var v27800 = v27801 + ' = "";\n\n        constructor(settings: CompilationSettings) {\n            this.minWhitespace = settings.minWhitespace;\n            this.propagateConstants = settings.propagateConstants;\n            this.emitComments = settings.emitComments;\n            this.outputOption = settings.outputOption;\n        }\n\n        public mapOutputFileName(fileName: string, extensionChanger: (fname: string, wholeFileNameReplaced: bool) => string) {\n            if (this.outputMany) {\n                var updatedFileName = fileName;\n                if (this.outputOption != "") {\n                    // Replace the common directory path with the option specified\n                    updatedFileName = fileName.replace(this.commonDirectoryPath, "");\n                    updatedFileName = this.outputOption + updatedFileName;\n                }\n                return extensionChanger(updatedFileName, false);\n            } else {\n                return extensionChanger(this.outputOption, true);\n            }\n        }\n    }\n\n    export class Indenter {\n        static indentStep : number = 4;\n        static indentStepString : string = "    ";\n        static indentStrings: string[] = [];\n        public indentAmt: number = 0;\n\n        public increaseIndent() {\n            this.indentAmt += Indenter.indentStep;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt -= Indenter.indentStep;\n        }\n\n        public getIndent() {\n            var indentString = Indenter.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = "";\n                for (var i = 0; i < this.indentAmt; i = i + Indenter.indentStep) {\n                    indentString += Indenter.indentStepString;\n                }\n                Indenter.indentStrings[this.indentAmt] = indentString;\n            }\n            return indentString;\n        }\n    }\n\n    export class Emitter {\n        public prologueEmitted = false;\n        public thisClassNode: TypeDeclaration = null;\n        public thisFnc: FuncDecl = null;\n        public moduleDeclList: ModuleDeclaration[] = [];\n        public moduleName = "";\n        public emitState = new EmitState();\n        public indenter = new Indenter();\n        public ambientModule = false;\n        public modAliasId: string = null;\n        public firstModAlias: string = null;\n        public allSourceMappers: SourceMapper[] = [];\n        public sourceMapper: SourceMapper = null;\n        public captureThisStmtString = "var _this = this;";\n        private varListCountStack: number[] = [0]; \n\n        constructor(public checker: TypeChecker, public emittingFileName: string, public outfile: ITextWriter, public emitOptions: EmitOptions, public errorReporter: ErrorReporter) {\n        }\n\n        public setSourceMappings(mapper: SourceMapper) {\n            this.allSourceMappers.push(mapper);\n            this.sourceMapper = mapper;\n        }\n\n        public writeToOutput(s: string) {\n            this.outfile.Write(s);\n            // TODO: check s for newline\n            this.emitState.column += s.length;\n        }\n\n        public writeToOutputTrimmable(s: string) {\n            if (this.emitOptions.minWhitespace) {\n                s = s.replace(/[\\s]*/g, \'\');\n            }\n            this.writeToOutput(s);\n        }\n\n        public writeLineToOutput(s: string) {\n            if (this.emitOptions.minWhitespace) {\n                this.writeToOutput(s);\n                var c = s.charCodeAt(s.length - 1);\n                if (!((c == LexCodeSpace) || (c == LexCodeSMC) || (c == LexCodeLBR))) {\n                    this.writeToOutput(\' \');\n                }\n            }\n            else {\n                this.outfile.WriteLine(s);\n                this.emitState.column = 0\n                this.emitState.line++;\n            }\n        }\n\n        public writeCaptureThisStatement(ast: AST) {\n            this.emitIndent();\n            this.recordSourceMappingStart(ast);\n            this.writeToOutput(this.captureThisStmtString);\n            this.recordSourceMappingEnd(ast);\n            this.writeLineToOutput("");\n        }\n\n        public setInVarBlock(count: number) {\n            this.varListCountStack[this.varListCountStack.length - 1] = count;\n        }\n\n        public setInObjectLiteral(val: bool): bool {\n            var temp = this.emitState.inObjectLiteral;\n            this.emitState.inObjectLiteral = val;\n            return temp;\n        }\n\n        public setContainer(c: number): number {\n            var temp = this.emitState.container;\n            this.emitState.container = c;\n            return temp;\n        }\n\n        private getIndentString() {\n            if (this.emitOptions.minWhitespace) {\n                return "";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        public emitIndent() {\n            this.writeToOutput(this.getIndentString());\n        }\n\n        public emitCommentInPlace(comment: Comment) {\n            var tex';
var v27799 = v27800 + 't = comment.getText();\n            var hadNewLine = false;\n\n            if (comment.isBlockComment) {\n                if (this.emitState.column == 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n\n                if (text.length > 1 || comment.endsLine) {\n                    for (var i = 1; i < text.length; i++) {\n                        this.writeLineToOutput("");\n                        this.emitIndent();\n                        this.writeToOutput(text[i]);\n                    }\n                    this.recordSourceMappingEnd(comment);\n                    this.writeLineToOutput("");\n                    hadNewLine = true;\n                } else {\n                    this.recordSourceMappingEnd(comment);\n                }\n            }\n            else {\n                if (this.emitState.column == 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n                this.recordSourceMappingEnd(comment);\n                this.writeLineToOutput("");\n                hadNewLine = true;\n            }\n\n            if (hadNewLine) {\n                this.emitIndent();\n            }\n            else {\n                this.writeToOutput(" ");\n            }\n        }\n\n        public emitParensAndCommentsInPlace(ast: AST, pre: bool) {\n            var comments = pre ? ast.preComments : ast.postComments;\n\n            // comments should be printed before the LParen, but after the RParen\n            if (ast.isParenthesized && !pre) {\n                this.writeToOutput(")");\n            }\n            if (this.emitOptions.emitComments && comments && comments.length != 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    this.emitCommentInPlace(comments[i]);\n                }\n            }\n            if (ast.isParenthesized && pre) {\n                this.writeToOutput("(");\n            }\n        }\n\n        // TODO: emit accessor pattern\n        public emitObjectLiteral(content: ASTList) {\n            this.writeLineToOutput("{");\n            this.indenter.increaseIndent();\n            var inObjectLiteral = this.setInObjectLiteral(true);\n            this.emitJavascriptList(content, ",", TokenID.Comma, true, false, false);\n            this.setInObjectLiteral(inObjectLiteral);\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.writeToOutput("}");\n        }\n\n        public emitArrayLiteral(content: ASTList) {\n            this.writeToOutput("[");\n            if (content) {\n                this.writeLineToOutput("");\n                this.indenter.increaseIndent();\n                this.emitJavascriptList(content, ", ", TokenID.Comma, true, false, false);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n            }\n            this.writeToOutput("]");\n        }\n\n        public emitNew(target: AST, args: ASTList) {\n            this.writeToOutput("new ");\n            if (target.nodeType == NodeType.TypeRef) {\n                var typeRef = <TypeReference>target;\n                if (typeRef.arrayCount) {\n                    this.writeToOutput("Array()");\n                }\n                else {\n                    this.emitJavascript(typeRef.term, TokenID.Tilde, false);\n                    this.writeToOutput("()");\n                }\n            }\n            else {\n                this.emitJavascript(target, TokenID.Tilde, false);\n                this.recordSourceMappingStart(args);\n                this.writeToOutput("(");\n                this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                this.writeToOutput(")");\n                this.recordSourceMappingEnd(args);\n            }\n        }\n\n        public tryEmitConstant(dotExpr: BinaryExpression) {\n            if (!this.emitOptions.propagateConstants) {\n                return false;\n            }\n            var propertyName = <Identifier>dotExpr.operand2;\n            if (propertyName && propertyName.sym && propertyName.sym.isVariable()) {\n                if (hasFlag(propertyName.sym.flags, SymbolFlags.Constant)) {\n                    if (propertyName.sym.declAST) {\n                        var boundDecl = <BoundDecl>propertyName.sym.declAST;\n                        if (boundDecl.init && (boundDecl.init.nodeType == NodeType.NumberLit)) {\n                            var numLit = <NumberLiteral>boundDecl.init;\n                            this.writeToOutput(numLit.value.toString());\n                            var comment = " /* ";\n                            comment += propertyName.actualText;\n                            comment += " */ ";\n                            this.writeToOutput(comment);\n                            return true;\n                        }\n                    }\n                }\n            }\n            ret';
var v27798 = v27799 + 'urn false;\n        }\n\n        public emitCall(callNode: CallExpression, target: AST, args: ASTList) {\n            if (!this.emitSuperCall(callNode)) {\n                if (!hasFlag(callNode.flags, ASTFlags.ClassBaseConstructorCall)) {\n                    if (target.nodeType == NodeType.FuncDecl && !target.isParenthesized) {\n                        this.writeToOutput("(");\n                    }\n                    if (callNode.target.nodeType == NodeType.Super && this.emitState.container == EmitContainer.Constructor) {\n                        this.writeToOutput("_super.call");\n                    }\n                    else {\n                        this.emitJavascript(target, TokenID.OpenParen, false);\n                    }\n                    if (target.nodeType == NodeType.FuncDecl && !target.isParenthesized) {\n                        this.writeToOutput(")");\n                    }\n                    this.recordSourceMappingStart(args);\n                    this.writeToOutput("(");\n                    if (callNode.target.nodeType == NodeType.Super && this.emitState.container == EmitContainer.Constructor) {\n                        this.writeToOutput("this");\n                        if (args && args.members.length) {\n                            this.writeToOutput(", ");\n                        }\n                    }\n                    this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                    this.writeToOutput(")");\n                    this.recordSourceMappingEnd(args);\n                }\n                else {\n                    this.indenter.decreaseIndent();\n                    this.indenter.decreaseIndent();\n                    var constructorCall = new ASTList();\n                    constructorCall.members[0] = callNode;\n                    this.emitConstructorCalls(constructorCall, this.thisClassNode);\n                    this.indenter.increaseIndent();\n                    this.indenter.increaseIndent();\n                }\n            }\n        }\n\n        public emitConstructorCalls(bases: ASTList, classDecl: TypeDeclaration) {\n            if (bases == null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            this.recordSourceMappingStart(classDecl);\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType == NodeType.Call) {\n                    baseSymbol = (<CallExpression>baseExpr).target.type.symbol;\n                }\n                else {\n                    baseSymbol = baseExpr.type.symbol;\n                }\n                var baseName = baseSymbol.name;\n                if (baseSymbol.declModule != classDecl.type.symbol.declModule) {\n                    baseName = baseSymbol.fullName();\n                }\n                if (baseExpr.nodeType == NodeType.Call) {\n                    this.emitIndent();\n                    this.writeToOutput("_super.call(this");\n                    var args = (<CallExpression>baseExpr).arguments;\n                    if (args && (args.members.length > 0)) {\n                        this.writeToOutput(", ");\n                        this.emitJavascriptList(args, ", ", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(")");\n                }\n                else {\n                    if (baseExpr.type && (baseExpr.type.isClassInstance())) {\n                        // parameterless constructor call;\n                        this.emitIndent();\n                        this.writeToOutput(classDecl.name.actualText + "._super.constructor");\n                        //emitJavascript(baseExpr,TokenID.LParen,false);\n                        this.writeToOutput(".call(this)");\n                    }\n                }\n            }\n            this.recordSourceMappingEnd(classDecl);\n        }\n\n        public emitInnerFunction(funcDecl: FuncDecl, printName: bool, isMember: bool,\n            bases: ASTList, hasSelfRef: bool, classDecl: TypeDeclaration) {\n            /// REVIEW: The code below causes functions to get pushed to a newline in cases where they shouldn\'t\n            /// such as: \n            ///     Foo.prototype.bar = \n            ///         function() {\n            ///         };\n            /// Once we start emitting comments, we should pull this code out to place on the outer context where the function\n            /// is used.\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n            //    this.writeLineToOutput("");\n            //    this.increaseIndent();\n            //    emitIndent();\n            //}\n\n            var isClassConstructor = funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod);\n            var hasNonObjectBaseType = isClassConstructor && hasFlag(this.thisClassNode.type.instanceType.typeFlags, TypeFlags.HasBaseType) && !hasFlag(this.thisClassNode.';
var v27797 = v27798 + 'type.instanceType.typeFlags, TypeFlags.HasBaseTypeOfObject);\n            var classPropertiesMustComeAfterSuperCall = hasNonObjectBaseType && hasFlag((<ClassDeclaration>this.thisClassNode).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor);\n\n            // We have no way of knowing if the current function is used as an expression or a statement, so as to enusre that the emitted\n            // JavaScript is always valid, add an extra parentheses for unparenthesized function expressions\n            var shouldParenthesize = hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression) && !funcDecl.isParenthesized && !funcDecl.isAccessor() && (hasFlag(funcDecl.flags, ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.flags, ASTFlags.AutomaticSemicolon));\n\n            this.emitParensAndCommentsInPlace(funcDecl, true);\n            if (shouldParenthesize) {\n                this.writeToOutput("(");\n            }\n            this.recordSourceMappingStart(funcDecl);\n            if (!(funcDecl.isAccessor() && (<FieldSymbol>funcDecl.accessorSymbol).isObjectLitField)) {\n                this.writeToOutput("function ");\n            }\n            if (printName) {\n                var id = funcDecl.getNameText();\n                if (id && !funcDecl.isAccessor()) {\n                    if (funcDecl.name) {\n                        this.recordSourceMappingStart(funcDecl.name);\n                    }\n                    this.writeToOutput(id);\n                    if (funcDecl.name) {\n                        this.recordSourceMappingEnd(funcDecl.name);\n                    }\n                }\n            }\n\n            this.writeToOutput("(");\n            var argsLen = 0;\n            var i = 0;\n            var arg: ArgDecl;\n            var defaultArgs: ArgDecl[] = [];\n            if (funcDecl.arguments) {\n                var tempContainer = this.setContainer(EmitContainer.Args);\n                argsLen = funcDecl.arguments.members.length;\n                var printLen = argsLen;\n                if (funcDecl.variableArgList) {\n                    printLen--;\n                }\n                for (i = 0; i < printLen; i++) {\n                    arg = <ArgDecl>funcDecl.arguments.members[i];\n                    if (arg.init) {\n                        defaultArgs.push(arg);\n                    }\n                    this.emitJavascript(arg, TokenID.OpenParen, false);\n                    if (i < (printLen - 1)) {\n                        this.writeToOutput(", ");\n                    }\n                }\n                this.setContainer(tempContainer);\n            }\n            this.writeLineToOutput(") {");\n\n            if (funcDecl.isConstructor) {\n                this.recordSourceMappingNameStart("constructor");\n            } else if (funcDecl.isGetAccessor()) {\n                this.recordSourceMappingNameStart("get_" + funcDecl.getNameText());\n            } else if (funcDecl.isSetAccessor()) {\n                this.recordSourceMappingNameStart("set_" + funcDecl.getNameText());\n            } else {\n                this.recordSourceMappingNameStart(funcDecl.getNameText());\n            }\n            this.indenter.increaseIndent();\n\n            // set default args first\n            for (i = 0; i < defaultArgs.length; i++) {\n                var arg = defaultArgs[i];\n                this.emitIndent();\n                this.recordSourceMappingStart(arg);\n                this.writeToOutput("if (typeof " + arg.id.actualText + " === \\"undefined\\") { ");//\n                this.recordSourceMappingStart(arg.id);\n                this.writeToOutput(arg.id.actualText);\n                this.recordSourceMappingEnd(arg.id);\n                this.writeToOutput(" = ");\n                this.emitJavascript(arg.init, TokenID.OpenParen, false);\n                this.writeLineToOutput("; }")\n                this.recordSourceMappingEnd(arg);\n            }\n\n            if (funcDecl.isConstructor && ((<ClassDeclaration>funcDecl.classDecl).varFlags & VarFlags.MustCaptureThis)) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n\n            if (funcDecl.isConstructor && !classPropertiesMustComeAfterSuperCall) {\n                if (funcDecl.arguments) {\n                    argsLen = funcDecl.arguments.members.length;\n                    for (i = 0; i < argsLen; i++) {\n                        arg = <ArgDecl>funcDecl.arguments.members[i];\n                        if ((arg.varFlags & VarFlags.Property) != VarFlags.None) {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(arg);\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput("this." + arg.id.actualText);\n                            this.recordSourceMappingEnd(arg.id);\n                            this.writeToOutput(" = ");\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput(arg.id.actualText);\n                            this.re';
var v27796 = v27797 + 'cordSourceMappingEnd(arg.id);\n                            this.writeLineToOutput(";");\n                            this.recordSourceMappingEnd(arg);\n                        }\n                    }\n                }\n\n                // For classes, the constructor needs to be explicitly called\n                if (!hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                    this.emitConstructorCalls(bases, classDecl);\n                }\n            }\n            if (hasSelfRef) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n            if (funcDecl.variableArgList) {\n                argsLen = funcDecl.arguments.members.length;\n                var lastArg = <ArgDecl>funcDecl.arguments.members[argsLen - 1];\n                this.emitIndent();\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("var ");\n                this.recordSourceMappingStart(lastArg.id);\n                this.writeToOutput(lastArg.id.actualText);\n                this.recordSourceMappingEnd(lastArg.id);\n                this.writeLineToOutput(" = [];");\n                this.recordSourceMappingEnd(lastArg);\n                this.emitIndent();\n                this.writeToOutput("for (")\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("var _i = 0;");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput(" ");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("_i < (arguments.length - " + (argsLen - 1) + ")");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput("; ");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput("_i++");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput(") {");\n                this.indenter.increaseIndent();\n                this.emitIndent();\n\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(lastArg.id.actualText + "[_i] = arguments[_i + " + (argsLen - 1) + "];");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput("");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput("}");\n            }\n\n            // if it\'s a class, emit the uninitializedMembers, first emit the non-proto class body members\n            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod) && !classPropertiesMustComeAfterSuperCall) {\n\n                var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                for (var i = 0; i < nProps; i++) {\n                    if ((<ASTList>this.thisClassNode.members).members[i].nodeType == NodeType.VarDecl) {\n                        var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[i];\n                        if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                            this.emitIndent();\n                            this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                            this.writeLineToOutput("");\n                        }\n                    }\n                }\n                //this.writeLineToOutput("");\n            }\n\n            this.emitBareJavascriptStatements(funcDecl.bod, classPropertiesMustComeAfterSuperCall);\n\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.recordSourceMappingStart(funcDecl.endingToken);\n            this.writeToOutput("}");\n\n            this.recordSourceMappingNameEnd();\n            this.recordSourceMappingEnd(funcDecl.endingToken);\n            this.recordSourceMappingEnd(funcDecl);\n\n            if (shouldParenthesize) {\n                this.writeToOutput(")");\n            }\n\n            // The extra call is to make sure the caller\'s funcDecl end is recorded, since caller wont be able to record it\n            this.recordSourceMappingEnd(funcDecl);\n\n            this.emitParensAndCommentsInPlace(funcDecl, false);\n\n            if (!isMember &&\n                //funcDecl.name != null &&\n                !hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression) &&\n                (hasFlag(funcDecl.fncFlags, FncFlags.Definition) || funcDecl.isConstructor)) {\n                this.writeLineToOutput("");\n            } else if (hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression)) {\n                if (hasFlag(funcDecl.flags, ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.flags, ASTFlags.AutomaticSemicolon)) {\n                    // If either of these two flags are set, then the function expression is a statement. Terminate it.\n                    this.writeLineToOutput(";");\n                }\n            }\n            /// TODO: See the other part of this at the beginning of function\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n  ';
var v27795 = v27796 + '          //    this.decreaseIndent();\n            //}           \n        }\n\n        public emitJavascriptModule(moduleDecl: ModuleDeclaration) {\n            var modName = moduleDecl.name.actualText;\n            if (isTSFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 3));\n            }\n            else if (isSTRFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 4));\n            }\n\n            if (!hasFlag(moduleDecl.modFlags, ModuleFlags.Ambient)) {\n                var isDynamicMod = hasFlag(moduleDecl.modFlags, ModuleFlags.IsDynamic);\n                var prevOutFile = this.outfile;\n                var prevOutFileName = this.emittingFileName;\n                var prevAllSourceMappers = this.allSourceMappers;\n                var prevSourceMapper = this.sourceMapper;\n                var prevColumn = this.emitState.column;\n                var prevLine = this.emitState.line;\n                var temp = this.setContainer(EmitContainer.Module);\n                var svModuleName = this.moduleName;\n                var isExported = hasFlag(moduleDecl.modFlags, ModuleFlags.Exported);\n                this.moduleDeclList[this.moduleDeclList.length] = moduleDecl;\n                var isWholeFile = hasFlag(moduleDecl.modFlags, ModuleFlags.IsWholeFile);\n                this.moduleName = moduleDecl.name.actualText;\n\n                // prologue\n                if (isDynamicMod) {\n                    // create the new outfile for this module\n                    var tsModFileName = stripQuotes(moduleDecl.name.actualText);\n                    var modFilePath = trimModName(tsModFileName) + ".js";\n                    modFilePath = this.emitOptions.mapOutputFileName(modFilePath, TypeScriptCompiler.mapToJSFileName);\n\n                    if (this.emitOptions.ioHost) {\n                        // Ensure that the slashes are normalized so that the comparison is fair\n                        // REVIEW: Note that modFilePath is normalized to forward slashes in Parser.parse, so the \n                        // first call to switchToForwardSlashes is technically a no-op, but it will prevent us from\n                        // regressing if the parser changes\n                        if (switchToForwardSlashes(modFilePath) != switchToForwardSlashes(this.emittingFileName)) {\n                            this.emittingFileName = modFilePath;\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment);\n                            this.outfile = this.createFile(this.emittingFileName, useUTF8InOutputfile);\n                            if (prevSourceMapper != null) {\n                                this.allSourceMappers = [];\n                                var sourceMappingFile = this.createFile(this.emittingFileName + SourceMapper.MapFileExtension, false);\n                                this.setSourceMappings(new TypeScript.SourceMapper(tsModFileName, this.emittingFileName, this.outfile, sourceMappingFile, this.errorReporter));\n                                this.emitState.column = 0;\n                                this.emitState.line = 0;\n                            }\n                        } else {\n                            CompilerDiagnostics.assert(this.emitOptions.outputMany, "Cannot have dynamic modules compiling into single file");\n                        }\n                    }\n\n                    this.setContainer(EmitContainer.DynamicModule); // discard the previous \'Module\' container\n\n                    this.recordSourceMappingStart(moduleDecl);\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) { // AMD\n                        var dependencyList = "[\\"require\\", \\"exports\\"";\n                        var importList = "require, exports";\n                        var importStatement: ImportDeclaration = null;\n\n                        // all dependencies are quoted\n                        for (var i = 0; i < (<ModuleType>moduleDecl.mod).importedModules.length; i++) {\n                            importStatement = (<ModuleType>moduleDecl.mod).importedModules[i]\n\n                            // if the imported module is only used in a type position, do not add it as a requirement\n                            if (importStatement.id.sym &&\n                                !(<TypeSymbol>importStatement.id.sym).onlyReferencedAsTypeRef) {\n                                if (i <= (<ModuleType>moduleDecl.mod).importedModules.length - 1) {\n                                    dependencyList += ", ";\n                                    importList += ", ";\n                                }\n\n                                importList += "__" + importStatement.id.actualText + "__";\n                                dependencyList += importStatement.firstAliasedModToString();\n                            }\n                        }\n\n                 ';
var v27794 = v27795 + '       // emit any potential amd dependencies\n                        for (var i = 0; i < moduleDecl.amdDependencies.length; i++) {\n                            dependencyList += ", \\"" + moduleDecl.amdDependencies[i] + "\\"";\n                        }\n\n                        dependencyList += "]";\n\n                        this.writeLineToOutput("define(" + dependencyList + "," + " function(" + importList + ") {");\n                    }\n                    else { // Node\n\n                    }\n                }\n                else {\n\n                    if (!isExported) {\n                        this.recordSourceMappingStart(moduleDecl);\n                        this.writeToOutput("var ");\n                        this.recordSourceMappingStart(moduleDecl.name);\n                        this.writeToOutput(this.moduleName);\n                        this.recordSourceMappingEnd(moduleDecl.name);\n                        this.writeLineToOutput(";");\n                        this.recordSourceMappingEnd(moduleDecl);\n                        this.emitIndent();\n                    }\n\n                    this.writeToOutput("(");\n                    this.recordSourceMappingStart(moduleDecl);\n                    this.writeToOutput("function (");\n                    this.recordSourceMappingStart(moduleDecl.name);\n                    this.writeToOutput(this.moduleName);\n                    this.recordSourceMappingEnd(moduleDecl.name);\n                    this.writeLineToOutput(") {");\n                }\n\n                if (!isWholeFile) {\n                    this.recordSourceMappingNameStart(this.moduleName);\n                }\n\n                // body - don\'t indent for Node\n                if (!isDynamicMod || moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                    this.indenter.increaseIndent();\n                }\n\n                if (moduleDecl.modFlags & ModuleFlags.MustCaptureThis) {\n                    this.writeCaptureThisStatement(moduleDecl);\n                }\n\n                this.emitJavascriptList(moduleDecl.members, null, TokenID.Semicolon, true, false, false);\n                if (!isDynamicMod || moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                    this.indenter.decreaseIndent();\n                }\n                this.emitIndent();\n\n                // epilogue\n                if (isDynamicMod) {\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) { // AMD\n                        this.writeLineToOutput("})");\n                    }\n                    else { // Node\n                    }\n                    if (!isWholeFile) {\n                        this.recordSourceMappingNameEnd();\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n\n                    // close the module outfile, and restore the old one\n                    if (this.outfile != prevOutFile) {\n                        this.Close();\n                        if (prevSourceMapper != null) {\n                            this.allSourceMappers = prevAllSourceMappers;\n                            this.sourceMapper = prevSourceMapper;\n                            this.emitState.column = prevColumn;\n                            this.emitState.line = prevLine;\n                        }\n                        this.outfile = prevOutFile;\n                        this.emittingFileName = prevOutFileName;\n                    }\n                }\n                else {\n                    var containingMod: ModuleDeclaration = null;\n                    if (moduleDecl.type && moduleDecl.type.symbol.container && moduleDecl.type.symbol.container.declAST) {\n                        containingMod = <ModuleDeclaration>moduleDecl.type.symbol.container.declAST;\n                    }\n                    var parentIsDynamic = containingMod && hasFlag(containingMod.modFlags, ModuleFlags.IsDynamic);\n\n                    this.recordSourceMappingStart(moduleDecl.endingToken);\n                    if (temp == EmitContainer.Prog && isExported) {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(this." + this.moduleName + " || (this." + this.moduleName + " = {}));");\n                    }\n                    else if (isExported || temp == EmitContainer.Prog) {\n                        var dotMod = svModuleName != "" ? (parentIsDynamic ? "exports" : svModuleName) + "." : svModuleName;\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(" + dotMod + this.moduleName + " || (" + dotMod + this.moduleName + " = {})';
var v27793 = v27794 + ');");\n                    }\n                    else if (!isExported && temp != EmitContainer.Prog) {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")(" + this.moduleName + " || (" + this.moduleName + " = {}));");\n                    }\n                    else {\n                        this.writeToOutput("}");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(")();");\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n                    this.writeLineToOutput("");\n                    if (temp != EmitContainer.Prog && isExported) {\n                        this.emitIndent();\n                        this.recordSourceMappingStart(moduleDecl);\n                        if (parentIsDynamic) {\n                            this.writeLineToOutput("var " + this.moduleName + " = exports." + this.moduleName + ";");\n                        } else {\n                            this.writeLineToOutput("var " + this.moduleName + " = " + svModuleName + "." + this.moduleName + ";");\n                        }\n                        this.recordSourceMappingEnd(moduleDecl);\n                    }\n                }\n\n                this.setContainer(temp);\n                this.moduleName = svModuleName;\n                this.moduleDeclList.length--;\n            }\n        }\n\n        public emitIndex(operand1: AST, operand2: AST) {\n            var temp = this.setInObjectLiteral(false);\n            this.emitJavascript(operand1, TokenID.Tilde, false);\n            this.writeToOutput("[");\n            this.emitJavascriptList(operand2, ", ", TokenID.Comma, false, false, false);\n            this.writeToOutput("]");\n            this.setInObjectLiteral(temp);\n        }\n\n        public emitStringLiteral(text: string) {\n            // should preserve escape etc.\n            // TODO: simplify object literal simple name\n            this.writeToOutput(text);\n        }\n\n        public emitJavascriptFunction(funcDecl: FuncDecl) {\n            if (hasFlag(funcDecl.fncFlags, FncFlags.Signature) || funcDecl.isOverload) {\n                return;\n            }\n            var temp: number;\n            var tempFnc = this.thisFnc;\n            this.thisFnc = funcDecl;\n\n            if (funcDecl.isConstructor) {\n                temp = this.setContainer(EmitContainer.Constructor);\n            }\n            else {\n                temp = this.setContainer(EmitContainer.Function);\n            }\n\n            var bases: ASTList = null;\n            var hasSelfRef = false;\n            var funcName = funcDecl.getNameText();\n\n            if ((this.emitState.inObjectLiteral || !funcDecl.isAccessor()) &&\n                ((temp != EmitContainer.Constructor) ||\n                ((funcDecl.fncFlags & FncFlags.Method) == FncFlags.None))) {\n                var tempLit = this.setInObjectLiteral(false);\n                if (this.thisClassNode) {\n                    bases = this.thisClassNode.extendsList;\n                }\n                hasSelfRef = Emitter.shouldCaptureThis(funcDecl);\n                this.recordSourceMappingStart(funcDecl);\n                if (hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported) && funcDecl.type.symbol.container == this.checker.gloMod && !funcDecl.isConstructor) {\n                    this.writeToOutput("this." + funcName + " = ");\n                    this.emitInnerFunction(funcDecl, false, false, bases, hasSelfRef, this.thisClassNode);\n                }\n                else {\n                    this.emitInnerFunction(funcDecl, (funcDecl.name && !funcDecl.name.isMissing()), false, bases, hasSelfRef, this.thisClassNode);\n                }\n                this.setInObjectLiteral(tempLit);\n            }\n            this.setContainer(temp);\n            this.thisFnc = tempFnc;\n\n            if (hasFlag(funcDecl.fncFlags, FncFlags.Definition)) {\n                if (hasFlag(funcDecl.fncFlags, FncFlags.Static)) {\n                    if (this.thisClassNode) {\n                        if (funcDecl.isAccessor()) {\n                            this.emitPropertyAccessor(funcDecl, this.thisClassNode.name.actualText, false);\n                        }\n                        else {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(funcDecl);\n                            this.writeLineToOutput(this.thisClassNode.name.actualText + "." + funcName +\n                                          " = " + funcName + ";");\n                            this.recordSourceMappingEnd(funcDecl);\n                     ';
var v27792 = v27793 + '   }\n                    }\n                }\n                else if ((this.emitState.container == EmitContainer.Module || this.emitState.container == EmitContainer.DynamicModule) && hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported)) {\n                    this.emitIndent();\n                    var modName = this.emitState.container == EmitContainer.Module ? this.moduleName : "exports";\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeLineToOutput(modName + "." + funcName +\n                                      " = " + funcName + ";");\n                    this.recordSourceMappingEnd(funcDecl);\n                }\n            }\n        }\n\n        public emitAmbientVarDecl(varDecl: VarDecl) {\n            if (varDecl.init) {\n                this.emitParensAndCommentsInPlace(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                this.writeToOutput(" = ");\n                this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                this.recordSourceMappingEnd(varDecl);\n                this.writeToOutput(";");\n                this.emitParensAndCommentsInPlace(varDecl, false);\n            }\n        }\n\n        private varListCount(): number {\n            return this.varListCountStack[this.varListCountStack.length - 1];\n        }\n\n        // Emits "var " if it is allowed\n        private emitVarDeclVar() {\n            // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n            // If it is var list of form  var a = varList count will be 0\n            if (this.varListCount() >= 0) {\n                this.writeToOutput("var ");\n                this.setInVarBlock(-this.varListCount());\n            }\n            return true;\n        }\n\n        private onEmitVar() {\n            if (this.varListCount() > 0) {\n                this.setInVarBlock(this.varListCount() - 1);\n            }\n            else if (this.varListCount() < 0) {\n                this.setInVarBlock(this.varListCount() + 1);\n            }\n        }\n\n        public emitJavascriptVarDecl(varDecl: VarDecl, tokenId: TokenID) {\n            if ((varDecl.varFlags & VarFlags.Ambient) == VarFlags.Ambient) {\n                this.emitAmbientVarDecl(varDecl);\n                this.onEmitVar();\n            }\n            else {\n                var sym = varDecl.sym;\n                var hasInitializer = (varDecl.init != null);\n                this.emitParensAndCommentsInPlace(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                if (sym && sym.isMember() && sym.container &&\n                    (sym.container.kind() == SymbolKind.Type)) {\n                    var type = (<TypeSymbol>sym.container).type;\n                    if (type.isClass() && (!hasFlag(sym.flags, SymbolFlags.ModuleMember))) {\n                        // class\n                        if (this.emitState.container != EmitContainer.Args) {\n                            if (hasFlag(sym.flags, SymbolFlags.Static)) {\n                                this.writeToOutput(sym.container.name + ".");\n                            }\n                            else {\n                                this.writeToOutput("this.");\n                            }\n                        }\n                    }\n                    else if (type.hasImplementation()) {\n                        // module\n                        if (!hasFlag(sym.flags, SymbolFlags.Exported) && (sym.container == this.checker.gloMod || !hasFlag(sym.flags, SymbolFlags.Property))) {\n                            this.emitVarDeclVar();\n                        }\n                        else if (hasFlag(varDecl.varFlags, VarFlags.LocalStatic)) {\n                            this.writeToOutput(".");\n                        }\n                        else {\n                            if (this.emitState.container == EmitContainer.DynamicModule) {\n                                this.writeToOutput("exports.");\n                            }\n                            else {\n                                this.writeToOutput(this.moduleName + ".");\n                            }\n                        }\n                    }\n                    else {\n                        // function, constructor, method etc.\n                        if (tokenId != TokenID.OpenParen) {\n                            if (hasFlag(sym.flags, SymbolFlags.Exported) && sym.container == this.checker.gloMod) {\n                                this.writeToOutput("this.");\n                            }\n                            else {\n                                this.emitVarDeclVar();\n                            }\n                        }\n                    }\n                }\n                else {\n            ';
var v27791 = v27792 + '        if (tokenId != TokenID.OpenParen) {\n                        this.emitVarDeclVar();\n                    }\n                }\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                if (hasInitializer) {\n                    this.writeToOutputTrimmable(" = ");\n\n                    // Ensure we have a fresh var list count when recursing into the variable \n                    // initializer.  We don\'t want our current list of variables to affect how we\n                    // emit nested variable lists.\n                    this.varListCountStack.push(0);\n                    this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                    this.varListCountStack.pop();\n                }\n                this.onEmitVar();\n                if ((tokenId != TokenID.OpenParen)) {\n                    if (this.varListCount() < 0) {\n                        this.writeToOutput(", ");\n                    } else if (tokenId != TokenID.For) {\n                        this.writeToOutputTrimmable(";");\n                    }\n                }\n                this.recordSourceMappingEnd(varDecl);\n                this.emitParensAndCommentsInPlace(varDecl, false);\n            }\n        }\n\n        public declEnclosed(moduleDecl: ModuleDeclaration): bool {\n            if (moduleDecl == null) {\n                return true;\n            }\n            for (var i = 0, len = this.moduleDeclList.length; i < len; i++) {\n                if (this.moduleDeclList[i] == moduleDecl) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitJavascriptName(name: Identifier, addThis: bool) {\n            var sym = name.sym;\n            this.emitParensAndCommentsInPlace(name, true);\n            this.recordSourceMappingStart(name);\n            if (!name.isMissing()) {\n                if (addThis && (this.emitState.container != EmitContainer.Args) && sym) {\n                    // TODO: flag global module with marker other than string name\n                    if (sym.container && (sym.container.name != globalId)) {\n                        if (hasFlag(sym.flags, SymbolFlags.Static) && (hasFlag(sym.flags, SymbolFlags.Property))) {\n                            if (sym.declModule && hasFlag(sym.declModule.modFlags, ModuleFlags.IsDynamic)) {\n                                this.writeToOutput("exports.");\n                            }\n                            else {\n                                this.writeToOutput(sym.container.name + ".");\n                            }\n                        }\n                        else if (sym.kind() == SymbolKind.Field) {\n                            var fieldSym = <FieldSymbol>sym;\n                            if (hasFlag(fieldSym.flags, SymbolFlags.ModuleMember)) {\n                                if ((sym.container != this.checker.gloMod) && ((hasFlag(sym.flags, SymbolFlags.Property)) || hasFlag(sym.flags, SymbolFlags.Exported))) {\n                                    if (hasFlag(sym.declModule.modFlags, ModuleFlags.IsDynamic)) {\n                                        this.writeToOutput("exports.");\n                                    }\n                                    else {\n                                        this.writeToOutput(sym.container.name + ".");\n                                    }\n                                }\n                            }\n                            else {\n                                if (sym.isInstanceProperty()) {\n                                    this.emitThis();\n                                    this.writeToOutput(".");\n                                }\n                            }\n                        }\n                        else if (sym.kind() == SymbolKind.Type) {\n                            if (sym.isInstanceProperty()) {\n                                var typeSym = <TypeSymbol>sym;\n                                var type = typeSym.type;\n                                if (type.call && !hasFlag(sym.flags, SymbolFlags.ModuleMember)) {\n                                    this.emitThis();\n                                    this.writeToOutput(".");\n                                }\n                            }\n                            else if ((sym.unitIndex != this.checker.locationInfo.unitIndex) || (!this.declEnclosed(sym.declModule))) {\n                                this.writeToOutput(sym.container.name + ".")\n                            }\n                        }\n                    }\n                    else if (sym.container == this.checker.gloMod &&\n                                hasFlag(sym.flags, SymbolFlags.Exported) &&\n                                !hasFlag(sym.flags, SymbolFlags.Ambient) &&\n                                // check that it\'s a not a member of an ambient module...\n                                !((sym.isType()';
var v27790 = v27791 + ' || sym.isMember()) &&\n                                    sym.declModule &&\n                                    hasFlag(sym.declModule.modFlags, ModuleFlags.Ambient)) &&\n                                this.emitState.container == EmitContainer.Prog &&\n                                sym.declAST.nodeType != NodeType.FuncDecl) {\n                        this.writeToOutput("this.");\n                    }\n                }\n\n                // If it\'s a dynamic module, we need to print the "require" invocation\n                if (sym &&\n                    sym.declAST &&\n                    sym.declAST.nodeType == NodeType.ModuleDeclaration &&\n                    (hasFlag((<ModuleDeclaration>sym.declAST).modFlags, ModuleFlags.IsDynamic))) {\n                    var moduleDecl: ModuleDeclaration = <ModuleDeclaration>sym.declAST;\n\n                    if (moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                        this.writeLineToOutput("__" + this.modAliasId + "__;");\n                    }\n                    else {\n                        var modPath = name.actualText;//(<ModuleDecl>moduleDecl.mod.symbol.declAST).name.actualText;\n                        var isAmbient = moduleDecl.mod.symbol.declAST && hasFlag((<ModuleDeclaration>moduleDecl.mod.symbol.declAST).modFlags, ModuleFlags.Ambient);\n                        modPath = isAmbient ? modPath : this.firstModAlias ? this.firstModAlias : quoteBaseName(modPath);\n                        modPath = isAmbient ? modPath : (!isRelative(stripQuotes(modPath)) ? quoteStr("./" + stripQuotes(modPath)) : modPath);\n                        this.writeToOutput("require(" + modPath + ")");\n                    }\n                }\n                else {\n                    this.writeToOutput(name.actualText);\n                }\n            }\n            this.recordSourceMappingEnd(name);\n            this.emitParensAndCommentsInPlace(name, false);\n        }\n\n        public emitJavascriptStatements(stmts: AST, emitEmptyBod: bool) {\n            if (stmts) {\n                if (stmts.nodeType != NodeType.Block) {\n                    var hasContents = (stmts && (stmts.nodeType != NodeType.List || ((<ASTList>stmts).members.length > 0)));\n                    if (emitEmptyBod || hasContents) {\n                        var hasOnlyBlockStatement = ((stmts.nodeType == NodeType.Block) ||\n                            ((stmts.nodeType == NodeType.List) && ((<ASTList>stmts).members.length == 1) && ((<ASTList>stmts).members[0].nodeType == NodeType.Block)));\n\n                        this.recordSourceMappingStart(stmts);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput(" {");\n                            this.indenter.increaseIndent();\n                        }\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, false);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput("");\n                            this.indenter.decreaseIndent();\n                            this.emitIndent();\n                            this.writeToOutput("}");\n                        }\n                        this.recordSourceMappingEnd(stmts);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else if (emitEmptyBod) {\n                this.writeToOutput("{ }");\n            }\n        }\n\n        public emitBareJavascriptStatements(stmts: AST, emitClassPropertiesAfterSuperCall: bool = false) {\n            // just the statements without enclosing curly braces\n            if (stmts.nodeType != NodeType.Block) {\n                if (stmts.nodeType == NodeType.List) {\n                    var stmtList = <ASTList>stmts;\n                    if ((stmtList.members.length == 2) &&\n                        (stmtList.members[0].nodeType == NodeType.Block) &&\n                        (stmtList.members[1].nodeType == NodeType.EndCode)) {\n                        this.emitJavascript(stmtList.members[0], TokenID.Semicolon, true);\n                        this.writeLineToOutput("");\n                    }\n                    else {\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, emitClassPropertiesAfterSuperCall);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else {\n                this.emitJavascript(stmts, TokenID.Semicolon, true);\n            }\n        }\n\n        public recordSourceMappingNameStart(name: string) {\n            if (this.sourceMapper) {\n                var finalName = name;\n                if (!name) {\n                    finalName = "";\n                } else if (this.sourceMapper.currentNameIndex.length > 0) {\n                    finalName = this.sourceMapper.names[this.source';
var v27789 = v27790 + "Mapper.currentNameIndex.length - 1] + \".\" + name;\n                }\n\n                // We are currently not looking for duplicate but that is possible.\n                this.sourceMapper.names.push(finalName);\n                this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length - 1);\n            }\n        }\n\n        public recordSourceMappingNameEnd() {\n            if (this.sourceMapper) {\n                this.sourceMapper.currentNameIndex.pop();\n            }\n        }\n\n        public recordSourceMappingStart(ast: ASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                var lineCol = { line: -1, col: -1 };\n                var sourceMapping = new SourceMapping();\n                sourceMapping.start.emittedColumn = this.emitState.column;\n                sourceMapping.start.emittedLine = this.emitState.line;\n                // REVIEW: check time consumed by this binary search (about two per leaf statement)\n                getSourceLineColFromMap(lineCol, ast.minChar, this.checker.locationInfo.lineMap);\n                sourceMapping.start.sourceColumn = lineCol.col;\n                sourceMapping.start.sourceLine = lineCol.line;\n                getSourceLineColFromMap(lineCol, ast.limChar, this.checker.locationInfo.lineMap);\n                sourceMapping.end.sourceColumn = lineCol.col;\n                sourceMapping.end.sourceLine = lineCol.line;\n                if (this.sourceMapper.currentNameIndex.length > 0) {\n                    sourceMapping.nameIndex = this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1];\n                }\n                // Set parent and child relationship\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                siblings.push(sourceMapping);\n                this.sourceMapper.currentMappings.push(sourceMapping.childMappings);\n            }\n        }\n\n        public recordSourceMappingEnd(ast: ASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                // Pop source mapping childs\n                this.sourceMapper.currentMappings.pop();\n\n                // Get the last source mapping from sibling list = which is the one we are recording end for\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                var sourceMapping = siblings[siblings.length - 1];\n\n                sourceMapping.end.emittedColumn = this.emitState.column;\n                sourceMapping.end.emittedLine = this.emitState.line;\n            }\n        }\n\n        public Close() {\n            if (this.sourceMapper != null) {\n                SourceMapper.EmitSourceMapping(this.allSourceMappers);\n            }\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                this.outfile.Close();\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n\n        public emitJavascriptList(ast: AST, delimiter: string, tokenId: TokenID, startLine: bool, onlyStatics: bool, emitClassPropertiesAfterSuperCall: bool = false, emitPrologue? = false, requiresExtendsBlock?: bool) {\n            if (ast == null) {\n                return;\n            }\n            else if (ast.nodeType != NodeType.List) {\n                this.emitPrologue(emitPrologue);\n                this.emitJavascript(ast, tokenId, startLine);\n            }\n            else {\n                var list = <ASTList>ast;\n                if (list.members.length == 0) {\n                    return;\n                }\n\n                this.emitParensAndCommentsInPlace(ast, true);\n                var len = list.members.length;\n                for (var i = 0; i < len; i++) {\n                    if (emitPrologue) {\n                        // If the list has Strict mode flags, emit prologue after first statement\n                        // otherwise emit before first statement\n                        if (i == 1 || !hasFlag(list.flags, ASTFlags.StrictMode)) {\n                            this.emitPrologue(requiresExtendsBlock);\n                            emitPrologue = false;\n                        }\n                    }\n\n                    // In some circumstances, class property initializers must be emitted immediately after the 'super' constructor\n                    // call which, in these cases, must be the first statement in the constructor body\n                    if (i == 1 && emitClassPropertiesAfterSuperCall) {\n\n                        // emit any parameter properties first\n                        var constructorDecl = (<ClassDeclaration>this.thisClassNode).constructorDecl;\n\n                        if (constructorDecl && constructorDecl.arguments) {\n                            var argsLen = constructorDecl.arguments.members.length;\n                            for (var iArg = 0; iArg < argsLen; iArg++) {\n                     ";
var v27788 = v27789 + '           var arg = <BoundDecl>constructorDecl.arguments.members[iArg];\n                                if ((arg.varFlags & VarFlags.Property) != VarFlags.None) {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(arg);\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput("this." + arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeToOutput(" = ");\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput(arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeLineToOutput(";");\n                                    this.recordSourceMappingEnd(arg);\n                                }\n                            }\n                        }\n\n                        var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                        for (var iMember = 0; iMember < nProps; iMember++) {\n                            if ((<ASTList>this.thisClassNode.members).members[iMember].nodeType == NodeType.VarDecl) {\n                                var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[iMember];\n                                if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                                    this.emitIndent();\n                                    this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                    this.writeLineToOutput("");\n                                }\n                            }\n                        }\n                    }\n\n                    var emitNode = list.members[i];\n\n                    var isStaticDecl =\n                                (emitNode.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>emitNode).fncFlags, FncFlags.Static)) ||\n                                (emitNode.nodeType == NodeType.VarDecl && hasFlag((<VarDecl>emitNode).varFlags, VarFlags.Static))\n\n                    if (onlyStatics ? !isStaticDecl : isStaticDecl) {\n                        continue;\n                    }\n                    this.emitJavascript(emitNode, tokenId, startLine);\n\n                    if (delimiter && (i < (len - 1))) {\n                        if (startLine) {\n                            this.writeLineToOutput(delimiter);\n                        }\n                        else {\n                            this.writeToOutput(delimiter);\n                        }\n                    }\n                    else if (startLine &&\n                             (emitNode.nodeType != NodeType.ModuleDeclaration) &&\n                             (emitNode.nodeType != NodeType.InterfaceDeclaration) &&\n                             (!((emitNode.nodeType == NodeType.VarDecl) &&\n                                ((((<VarDecl>emitNode).varFlags) & VarFlags.Ambient) == VarFlags.Ambient) &&\n                                (((<VarDecl>emitNode).init) == null)) && this.varListCount() >= 0) &&\n                             (emitNode.nodeType != NodeType.Block || (<Block>emitNode).isStatementBlock) &&\n                             (emitNode.nodeType != NodeType.EndCode) &&\n                             (emitNode.nodeType != NodeType.FuncDecl)) {\n                        this.writeLineToOutput("");\n                    }\n                }\n                this.emitParensAndCommentsInPlace(ast, false);\n            }\n        }\n\n        // tokenId is the id the preceding token\n        public emitJavascript(ast: AST, tokenId: TokenID, startLine: bool) {\n            if (ast == null) {\n                return;\n            }\n\n            // REVIEW: simplify rules for indenting\n            if (startLine && (this.indenter.indentAmt > 0) && (ast.nodeType != NodeType.List) &&\n                (ast.nodeType != NodeType.Block)) {\n                if ((ast.nodeType != NodeType.InterfaceDeclaration) &&\n                    (!((ast.nodeType == NodeType.VarDecl) &&\n                       ((((<VarDecl>ast).varFlags) & VarFlags.Ambient) == VarFlags.Ambient) &&\n                       (((<VarDecl>ast).init) == null)) && this.varListCount() >= 0) &&\n                    (ast.nodeType != NodeType.EndCode) &&\n                    ((ast.nodeType != NodeType.FuncDecl) ||\n                     (this.emitState.container != EmitContainer.Constructor))) {\n                    this.emitIndent();\n                }\n            }\n\n            ast.emit(this, tokenId, startLine);\n\n            if ((tokenId == TokenID.Semicolon) && (ast.nodeType < NodeType.GeneralNode)) {\n                this.writeToOutput(";");\n            }\n        }\n\n        public emitPropertyAccessor(funcDecl: FuncDecl, className: string, isProto: bool) {\n            if (!(<FieldSymbol>funcDecl.accessorSymbol).h';
var v27787 = v27788 + 'asBeenEmitted) {\n                var accessorSymbol = <FieldSymbol>funcDecl.accessorSymbol;\n                this.emitIndent();\n                this.recordSourceMappingStart(funcDecl);\n                this.writeLineToOutput("Object.defineProperty(" + className + (isProto ? ".prototype, \\"" : ", \\"") + funcDecl.name.actualText + "\\"" + ", {");\n                this.indenter.increaseIndent();\n\n                if (accessorSymbol.getter) {\n                    var getter: FuncDecl = <FuncDecl>accessorSymbol.getter.declAST;\n\n                    this.emitIndent();\n                    this.recordSourceMappingStart(getter);\n                    this.writeToOutput("get: ");\n                    this.emitInnerFunction(getter, false, isProto, null, Emitter.shouldCaptureThis(getter), null);\n                    this.writeLineToOutput(",");\n                }\n\n                if (accessorSymbol.setter) {\n                    var setter: FuncDecl = <FuncDecl>accessorSymbol.setter.declAST;\n\n                    this.emitIndent();\n                    this.recordSourceMappingStart(setter);\n                    this.writeToOutput("set: ");\n                    this.emitInnerFunction(setter, false, isProto, null, Emitter.shouldCaptureThis(setter), null);\n                    this.writeLineToOutput(",");\n                }\n\n                this.emitIndent();\n                this.writeLineToOutput("enumerable: true,");\n                this.emitIndent();\n                this.writeLineToOutput("configurable: true");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput("});");\n                this.recordSourceMappingEnd(funcDecl);\n\n                accessorSymbol.hasBeenEmitted = true;\n            }\n        }\n\n        public emitPrototypeMember(member: AST, className: string) {\n            if (member.nodeType == NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>member;\n                if (funcDecl.isAccessor()) {\n                    this.emitPropertyAccessor(funcDecl, className, true);\n                }\n                else {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeToOutput(className + ".prototype." + funcDecl.getNameText() + " = ");\n                    this.emitInnerFunction(funcDecl, false, true, null, Emitter.shouldCaptureThis(funcDecl), null);\n                    this.writeLineToOutput(";");\n                }\n            }\n            else if (member.nodeType == NodeType.VarDecl) {\n                var varDecl = <VarDecl>member;\n\n                if (varDecl.init) {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(varDecl);\n                    this.recordSourceMappingStart(varDecl.id);\n                    this.writeToOutput(className + ".prototype." + varDecl.id.actualText);\n                    this.recordSourceMappingEnd(varDecl.id);\n                    this.writeToOutput(" = ");\n                    this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                    this.recordSourceMappingEnd(varDecl);\n                    this.writeLineToOutput(";");\n                }\n            }\n        }\n\n        public emitAddBaseMethods(className: string, base: Type, classDecl: TypeDeclaration): void {\n            if (base.members) {\n                var baseSymbol = base.symbol;\n                var baseName = baseSymbol.name;\n                if (baseSymbol.declModule != classDecl.type.symbol.declModule) {\n                    baseName = baseSymbol.fullName();\n                }\n                base.members.allMembers.map(function(key, s, c) {\n                    var sym = <Symbol>s;\n                    if ((sym.kind() == SymbolKind.Type) && (<TypeSymbol>sym).type.call) {\n                        this.recordSourceMappingStart(sym.declAST);\n                        this.writeLineToOutput(className + ".prototype." + sym.name + " = " +\n                                          baseName + ".prototype." + sym.name + ";");\n                        this.recordSourceMappingEnd(sym.declAST);\n                    }\n                }, null);\n            }\n            if (base.extendsList) {\n                for (var i = 0, len = base.extendsList.length; i < len; i++) {\n                    this.emitAddBaseMethods(className, base.extendsList[i], classDecl);\n                }\n            }\n        }\n\n        public emitJavascriptClass(classDecl: ClassDeclaration) {\n            if (!hasFlag(classDecl.varFlags, VarFlags.Ambient)) {\n                var svClassNode = this.thisClassNode;\n                var i = 0;\n                this.thisClassNode = classDecl;\n                var className = classDecl.name.actualText;\n                this.emitParensAndCommentsInPlace(classDecl, true);\n                var temp = this.setContainer(EmitContainer.Class);\n\n                this.recordSourceMappingStart(classDecl);\n                if (hasFlag(classDecl.varFlags, VarF';
var v27786 = v27787 + 'lags.Exported) && classDecl.type.symbol.container == this.checker.gloMod) {\n                    this.writeToOutput("this." + className);\n                }\n                else {\n                    this.writeToOutput("var " + className);\n                }\n\n                //if (hasFlag(classDecl.varFlags, VarFlags.Exported) && (temp == EmitContainer.Module || temp == EmitContainer.DynamicModule)) {\n                //    var modName = temp == EmitContainer.Module ? this.moduleName : "exports";\n                //    this.writeToOutput(" = " + modName + "." + className);\n                //}\n\n                var hasBaseClass = classDecl.extendsList && classDecl.extendsList.members.length;\n                var baseNameDecl: AST = null;\n                var baseName: AST = null;\n\n                if (hasBaseClass) {\n                    this.writeLineToOutput(" = (function (_super) {");\n                } else {\n                    this.writeLineToOutput(" = (function () {");\n                }\n\n                this.recordSourceMappingNameStart(className);\n                this.indenter.increaseIndent();\n\n                if (hasBaseClass) {\n                    baseNameDecl = classDecl.extendsList.members[0];\n                    baseName = baseNameDecl.nodeType == NodeType.Call ? (<CallExpression>baseNameDecl).target : baseNameDecl;\n                    this.emitIndent();\n                    this.writeLineToOutput("__extends(" + className + ", _super);");\n                }\n\n                this.emitIndent();\n\n                var constrDecl = classDecl.constructorDecl;\n\n                // output constructor\n                if (constrDecl) {\n                    // declared constructor\n                    this.emitJavascript(classDecl.constructorDecl, TokenID.OpenParen, false);\n\n                }\n                else {\n                    var wroteProps = 0;\n\n                    this.recordSourceMappingStart(classDecl);\n                    // default constructor\n                    this.indenter.increaseIndent();\n                    this.writeToOutput("function " + classDecl.name.actualText + "() {");\n                    this.recordSourceMappingNameStart("constructor");\n                    if (hasBaseClass) {\n                        this.writeLineToOutput("");\n                        this.emitIndent();\n                        this.writeLineToOutput("_super.apply(this, arguments);");\n                        wroteProps++;\n                    }\n\n                    if (classDecl.varFlags & VarFlags.MustCaptureThis) {\n                        this.writeCaptureThisStatement(classDecl);\n                    }\n\n                    var members = (<ASTList>this.thisClassNode.members).members\n\n                    // output initialized properties\n                    for (var i = 0; i < members.length; i++) {\n                        if (members[i].nodeType == NodeType.VarDecl) {\n                            var varDecl = <VarDecl>members[i];\n                            if (!hasFlag(varDecl.varFlags, VarFlags.Static) && varDecl.init) {\n                                this.writeLineToOutput("");\n                                this.emitIndent();\n                                this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                wroteProps++;\n                            }\n                        }\n                    }\n                    if (wroteProps) {\n                        this.writeLineToOutput("");\n                        this.indenter.decreaseIndent();\n                        this.emitIndent();\n                        this.writeLineToOutput("}");\n                    }\n                    else {\n                        this.writeLineToOutput(" }");\n                        this.indenter.decreaseIndent();\n                    }\n                    this.recordSourceMappingNameEnd();\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                var membersLen = classDecl.members.members.length;\n                for (var j = 0; j < membersLen; j++) {\n\n                    var memberDecl: AST = classDecl.members.members[j];\n\n                    if (memberDecl.nodeType == NodeType.FuncDecl) {\n                        var fn = <FuncDecl>memberDecl;\n\n                        if (hasFlag(fn.fncFlags, FncFlags.Method) && !fn.isSignature()) {\n                            if (!hasFlag(fn.fncFlags, FncFlags.Static)) {\n                                this.emitPrototypeMember(fn, className);\n                            }\n                            else { // static functions\n                                if (fn.isAccessor()) {\n                                    this.emitPropertyAccessor(fn, this.thisClassNode.name.actualText, false);\n                                }\n                                else {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(fn)\n                                    this.writeToOutput(classD';
var v27785 = v27786 + 'ecl.name.actualText + "." + fn.name.actualText + " = ");\n                                    this.emitInnerFunction(fn, (fn.name && !fn.name.isMissing()), true,\n                                            null, Emitter.shouldCaptureThis(fn), null);\n                                    this.writeLineToOutput(";");\n                                }\n                            }\n                        }\n                    }\n                    else if (memberDecl.nodeType == NodeType.VarDecl) {\n                        var varDecl = <VarDecl>memberDecl;\n                        if (hasFlag(varDecl.varFlags, VarFlags.Static)) {\n\n                            if (varDecl.init) {\n                                // EMITREVIEW\n                                this.emitIndent();\n                                this.recordSourceMappingStart(varDecl);\n                                this.writeToOutput(classDecl.name.actualText + "." + varDecl.id.actualText + " = ");\n                                this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                                // EMITREVIEW\n\n                                this.writeLineToOutput(";");\n                                this.recordSourceMappingEnd(varDecl);\n                            }\n                        }\n                    }\n                    else {\n                        throw Error("We want to catch this");\n                    }\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeLineToOutput("return " + className + ";");\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeToOutput("}");\n                this.recordSourceMappingNameEnd();\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.recordSourceMappingStart(classDecl);\n                this.writeToOutput(")(");\n                if (hasBaseClass)\n                    this.emitJavascript(baseName, TokenID.Tilde, false);\n                this.writeToOutput(");");\n                this.recordSourceMappingEnd(classDecl);\n\n                if ((temp == EmitContainer.Module || temp == EmitContainer.DynamicModule) && hasFlag(classDecl.varFlags, VarFlags.Exported)) {\n                    this.writeLineToOutput("");\n                    this.emitIndent();\n                    var modName = temp == EmitContainer.Module ? this.moduleName : "exports";\n                    this.recordSourceMappingStart(classDecl);\n                    this.writeToOutput(modName + "." + className + " = " + className + ";");\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingEnd(classDecl);\n                this.emitParensAndCommentsInPlace(classDecl, false);\n                this.setContainer(temp);\n                this.thisClassNode = svClassNode;\n            }\n        }\n\n        public emitPrologue(reqInherits: bool) {\n            if (!this.prologueEmitted) {\n                if (reqInherits) {\n                    this.prologueEmitted = true;\n                    this.writeLineToOutput("var __extends = this.__extends || function (d, b) {");\n                    this.writeLineToOutput("    function __() { this.constructor = d; }");\n                    this.writeLineToOutput("    __.prototype = b.prototype;");\n                    this.writeLineToOutput("    d.prototype = new __();");\n                    this.writeLineToOutput("};");\n                }\n                if (this.checker.mustCaptureGlobalThis) {\n                    this.prologueEmitted = true;\n                    this.writeLineToOutput(this.captureThisStmtString);\n                }\n            }\n        }\n\n        public emitSuperReference() {\n            this.writeToOutput("_super.prototype");\n        }\n\n        public emitSuperCall(callEx: CallExpression): bool {\n            if (callEx.target.nodeType == NodeType.Dot) {\n                var dotNode = <BinaryExpression>callEx.target;\n                if (dotNode.operand1.nodeType == NodeType.Super) {\n                    this.emitJavascript(dotNode, TokenID.OpenParen, false);\n                    this.writeToOutput(".call(");\n                    this.emitThis();\n                    if (callEx.arguments && callEx.arguments.members.length > 0) {\n                        this.writeToOutput(", ");\n                        this.emitJavascriptList(callEx.arguments, ", ", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(")");\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitThis() {\n            if (this.thisFnc && !this.thisFnc.isMethod() && (!this.thisFnc.isConstructor)) {\n          ';
var v27784 = v27785 + '      this.writeToOutput("_this");\n            }\n            else {\n                this.writeToOutput("this");\n            }\n        }\n\n        private static shouldCaptureThis(func: FuncDecl): bool {\n            // Super calls use \'this\' reference. If super call is in a lambda, \'this\' value needs to be captured in the parent.\n            return func.hasSelfReference() || func.hasSuperReferenceInFatArrowFunction();\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface ILineCol {\n        line: number;\n        col: number;\n    }\n\n    export class ErrorReporter {\n        public parser: Parser = null;\n        public checker: TypeChecker = null;\n        public lineCol = { line: 0, col: 0 };\n        public emitAsComments = true;\n        public hasErrors = false;\n        public pushToErrorSink = false;\n        public errorSink: string[] = [];\n\n        constructor (public outfile: ITextWriter) { }\n\n        public getCapturedErrors() { return this.errorSink; }\n        public freeCapturedErrors() { this.errorSink = []; }\n        public captureError(emsg: string) { this.errorSink[this.errorSink.length] = emsg; }\n\n        public setErrOut(outerr) {\n            this.outfile = outerr;\n            this.emitAsComments = false;\n        }\n\n        public emitPrefix() {\n            if (this.emitAsComments) {\n                this.outfile.Write("// ");\n            }\n            this.outfile.Write(this.checker.locationInfo.filename + "(" + this.lineCol.line + "," + this.lineCol.col + "): ");\n        }\n\n        public writePrefix(ast: AST): void {\n            if (ast) {\n                this.setError(ast);\n            }\n            else {\n                this.lineCol.line = 0;\n                this.lineCol.col = 0;\n            }\n            this.emitPrefix();\n        }\n\n        public writePrefixFromSym(symbol: Symbol): void {\n            if (symbol && this.checker.locationInfo.lineMap) {\n                getSourceLineColFromMap(this.lineCol, symbol.location,\n                                        this.checker.locationInfo.lineMap);\n            }\n            else {\n                this.lineCol.line = -1;\n                this.lineCol.col = -1;\n            }\n            this.emitPrefix();\n        }\n\n        public setError(ast: AST) {\n            if (ast) {\n                ast.flags |= ASTFlags.Error;\n                if (this.checker.locationInfo.lineMap) {\n                    getSourceLineColFromMap(this.lineCol, ast.minChar, this.checker.locationInfo.lineMap);\n                }\n            }\n        }\n\n        public reportError(ast: AST, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (ast && this.parser.errorRecovery && this.parser.errorCallback) {\n                var len = (ast.limChar - ast.minChar);\n                this.parser.errorCallback(ast.minChar, len, message, this.checker.locationInfo.unitIndex);\n            }\n            else {\n                this.writePrefix(ast);\n                this.outfile.WriteLine(message); // Right after the semi-colon\n            }\n        }\n\n        public reportErrorFromSym(symbol: Symbol, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (this.parser.errorRecovery && this.parser.errorCallback) {\n                this.parser.errorCallback(symbol.location, symbol.length, message, this.checker.locationInfo.unitIndex);\n            }\n            else {\n                this.writePrefixFromSym(symbol);\n                this.outfile.WriteLine(message);\n            }\n        }\n\n        public emitterError(ast: AST, message: string) {\n            this.reportError(ast, message);\n            // Emitter errors are not recoverable, stop immediately\n            throw Error("EmitError");\n        }\n\n        public duplicateIdentifier(ast: AST, name: string) {\n            this.reportError(';
var v27783 = v27784 + 'ast, "Duplicate identifier \'" + name + "\'");\n        }\n\n        public showRef(ast: AST, text: string, symbol: Symbol) {\n            var defLineCol = { line: -1, col: -1 };\n            // TODO: multiple def locations\n            this.parser.getSourceLineCol(defLineCol, symbol.location);\n            this.reportError(ast, "symbol " + text + " defined at (" + defLineCol.line + "," +\n                              defLineCol.col + ")");\n        }\n\n        public unresolvedSymbol(ast: AST, name: string) {\n            this.reportError(ast, "The name \'" + name + "\' does not exist in the current scope");\n        }\n\n        public symbolDoesNotReferToAValue(ast: AST, name: string): void {\n            this.reportError(ast, "The name \'" + name + "\' does not refer to a value");\n        }\n\n        public styleError(ast: AST, msg: string): void {\n            var bkThrow = this.pushToErrorSink;\n            this.pushToErrorSink = false;\n            this.reportError(ast, "STYLE: " + msg);\n            this.pushToErrorSink = bkThrow;\n        }\n\n        public simpleError(ast: AST, msg: string): void {\n            this.reportError(ast, msg);\n        }\n\n        public simpleErrorFromSym(sym: Symbol, msg: string): void {\n            this.reportErrorFromSym(sym, msg);\n        }\n\n        public invalidSuperReference(ast: AST) {\n            this.simpleError(ast, "Keyword \'super\' can only be used inside a class instance method");\n        }\n\n        public valueCannotBeModified(ast: AST) {\n            this.simpleError(ast, "The left-hand side of an assignment expression must be a variable, property or indexer");\n        }\n\n        public invalidCall(ast: CallExpression, nodeType: number, scope: SymbolScope): void {\n            var targetType = ast.target.type;\n            var typeName = targetType.getScopedTypeName(scope);\n            if (targetType.construct && (nodeType == NodeType.Call)) {\n                this.reportError(ast, "Value of type \'" + typeName + "\' is not callable.  Did you mean to include \'new\'?");\n            } else {\n                var catString = (nodeType == NodeType.Call) ? "callable" : "newable";\n\n                this.reportError(ast, "Value of type \'" + typeName + "\' is not " + catString);\n            }\n        }\n\n        public indexLHS(ast: BinaryExpression, scope: SymbolScope): void {\n            var targetType = ast.operand1.type.getScopedTypeName(scope);\n            var indexType = ast.operand2.type.getScopedTypeName(scope);\n            this.simpleError(ast, "Value of type \'" + targetType + "\' is not indexable by type \'" + indexType + "\'");\n        }\n\n        public incompatibleTypes(ast: AST, t1: Type, t2: Type, op: string, scope: SymbolScope, comparisonInfo?:TypeComparisonInfo) {\n            if (!t1) {\n                t1 = this.checker.anyType;\n            }\n            if (!t2) {\n                t2 = this.checker.anyType;\n            }\n\n            var reason = comparisonInfo ? comparisonInfo.message : "";\n            if (op) {\n                this.reportError(ast, "Operator \'" + op + "\' cannot be applied to types \'" + t1.getScopedTypeName(scope) +\n                                  "\' and \'" + t2.getScopedTypeName(scope) + "\'" + (reason ? ": " + reason : ""));\n            }\n            else {\n                this.reportError(ast, "Cannot convert \'" + t1.getScopedTypeName(scope) +\n                                  "\' to \'" + t2.getScopedTypeName(scope) + "\'" + (reason ? ": " + reason : ""));\n            }\n        }\n\n        public expectedClassOrInterface(ast: AST): void {\n            this.simpleError(ast, "Expected var, class, interface, or module");\n        }\n\n        public unaryOperatorTypeError(ast: AST, op: string, type: Type) {\n            this.reportError(ast, "Operator \'" + op + "\' cannot be applied to type \'" + type.getTypeName() + "\'");\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export function hasFlag(val: number, flag: number) {\n        return (val & flag) != 0;\n    }\n\n    export enum ErrorRecoverySet {\n        None = 0,\n        Comma = 1, // Comma\n        SColon = 1 << 1, // SColon\n        Asg = 1 << 2, // Asg\n        BinOp = 1 << 3, // Lsh, Rsh, Rs2, Le, Ge, INSTANCEOF, EQ, NE, Eqv, NEqv, LogAnd, LogOr, AsgMul, AsgDiv\n        // AsgMod, AsgAdd, AsgSub, AsgLsh, AsgRsh, AsgRs2, AsgAnd, AsgXor, AsgOr, QMark, Mult, Div, \n        // Pct, GT, LT, ';
var v27782 = v27783 + "And, Xor, Or\n        RBrack = 1 << 4, // RBrack\n        RCurly = 1 << 5, // RCurly\n        RParen = 1 << 6, // RParen\n        Dot = 1 << 7, // Dot\n        Colon = 1 << 8, // Colon\n        PrimType = 1 << 9, // number, string, bool\n        AddOp = 1 << 10, // Add, Sub\n        LCurly = 1 << 11, // LCurly\n        PreOp = 1 << 12, // Tilde, Bang, Inc, Dec\n        RegExp = 1 << 13, // RegExp\n        LParen = 1 << 14, // LParen\n        LBrack = 1 << 15, // LBrack\n        Scope = 1 << 16, // Scope\n        In = 1 << 17, // IN\n        SCase = 1 << 18, // CASE, DEFAULT\n        Else = 1 << 19, // ELSE\n        Catch = 1 << 20, // CATCH, FINALLY\n        Var = 1 << 21, // \n        Stmt = 1 << 22, // BREAK, RETURN, THROW, DEBUGGER, FOR, SWITCH, DO, IF, TRY, WITH\n        While = 1 << 23, // WHILE\n        ID = 1 << 24, // ID\n        Prefix = 1 << 25, // VOID, DELETE, TYPEOF, AWAIT\n        Literal = 1 << 26, // IntCon, FltCon, StrCon\n        RLit = 1 << 27, // THIS, TRUE, FALSE, NULL\n        Func = 1 << 28, // FUNCTION\n        EOF = 1 << 29, // EOF\n\n        // REVIEW: Name this something clearer.\n        TypeScriptS = 1 << 30, // PROPERTY, PRIVATE, STATIC, INTERFACE, CLASS, MODULE, EXPORT, IMPORT\n        ExprStart = SColon | AddOp | LCurly | PreOp | RegExp | LParen | LBrack | ID | Prefix | RLit | Func | Literal,\n        StmtStart = ExprStart | SColon | Var | Stmt | While | TypeScriptS,\n        Postfix = Dot | LParen | LBrack,\n    }\n\n    export enum AllowedElements {\n        None = 0,\n        ModuleDeclarations = 1 << 2,\n        ClassDeclarations = 1 << 3,\n        InterfaceDeclarations = 1 << 4,\n        AmbientDeclarations = 1 << 10,\n        Properties = 1 << 11,\n\n        Global = ModuleDeclarations | ClassDeclarations | InterfaceDeclarations | AmbientDeclarations,\n        QuickParse = Global | Properties,\n    }\n\n    export enum Modifiers {\n        None = 0,\n        Private = 1,\n        Public = 1 << 1,\n        Readonly = 1 << 2,\n        Ambient = 1 << 3,\n        Exported = 1 << 4,\n        Getter = 1 << 5,\n        Setter = 1 << 6,\n        Static = 1 << 7,\n    }\n\n    export enum ASTFlags {\n        None = 0,\n        ExplicitSemicolon = 1, // statment terminated by an explicit semicolon\n        AutomaticSemicolon = 1 << 1, // statment terminated by an automatic semicolon\n        Writeable = 1 << 2,  // node is lhs that can be modified\n        Error = 1 << 3, // node has an error\n        DotLHSPartial = 1 << 4, // node is the lhs of an incomplete dot expr at cursor\n        DotLHS = 1 << 5, // node is the lhs of a dot expr\n        IsStatement = 1 << 6, // node is a statement\n        StrictMode = 1 << 7, // node is in the strict mode environment\n        PossibleOptionalParameter = 1 << 8,\n        ClassBaseConstructorCall = 1 << 9,\n        OptionalName = 1 << 10,\n        // REVIEW: This flag is to mark lambda nodes to note that the LParen of an expression has already been matched in the lambda header.\n        //         The flag is used to communicate this piece of information to the calling parseTerm, which intern will remove it.\n        //         Once we have a better way to associate information with nodes, this flag should not be used.\n        SkipNextRParen = 1 << 11, \n    }\n\n    export enum DeclFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n    }\n\n    export enum ModuleFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        IsEnum = 1 << 8,\n        ShouldEmitModuleDecl = 1 << 9,\n        IsWholeFile = 1 << 10,\n        IsDynamic = 1 << 11,\n        MustCaptureThis = 1 << 12,\n    }\n\n    export enum SymbolFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        Property = 1 << 8,\n        Readonly = 1 << 9,\n        ModuleMember = 1 << 10,\n        InterfaceMember = 1 << 11,\n        ClassMember = 1 << 12,\n        BuiltIn = 1 << 13,\n        TypeSetDuringScopeAssignment = 1 << 14,\n        Constant = 1 << 15,\n        Optional = 1 << 16,\n        RecursivelyReferenced = 1 << 17,\n        Bound = 1 << 18,\n        CompilerGenerated = 1 << 19,\n    }\n\n    export enum VarFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        AutoInit = 1 << 8,\n        Property = 1 << 9,\n        Readonly = 1 << 10,\n        Class = 1 << 11,\n        ClassProperty = 1 << 12,\n        ClassBodyProperty = 1 << 13,";
var v27781 = v27782 + '\n        ClassConstructorProperty = 1 << 14,\n        ClassSuperMustBeFirstCallInConstructor = 1 << 15,\n        Constant = 1 << 16,\n        MustCaptureThis = 1 << 17,\n    }\n\n    export enum FncFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        LocalStatic = 1 << 5,\n        GetAccessor = 1 << 6,\n        SetAccessor = 1 << 7,\n        Definition = 1 << 8,\n        Signature = 1 << 9,\n        Method = 1 << 10,\n        HasReturnExpression = 1 << 11,\n        CallMember = 1 << 12,\n        ConstructMember = 1 << 13,\n        HasSelfReference = 1 << 14,\n        IsFatArrowFunction = 1 << 15,\n        IndexerMember = 1 << 16,\n        IsFunctionExpression = 1 << 17,\n        ClassMethod = 1 << 18,\n        ClassPropertyMethodExported = 1 << 19,\n        HasSuperReferenceInFatArrowFunction = 1 << 20,\n        IsPropertyBound = 1 << 21,\n    }\n\n    export enum SignatureFlags {\n        None = 0,\n        IsIndexer = 1,\n        IsStringIndexer = 1 << 1,\n        IsNumberIndexer = 1 << 2,\n    }\n\n    export function ToDeclFlags(fncFlags: FncFlags) : DeclFlags;\n    export function ToDeclFlags(varFlags: VarFlags) : DeclFlags;\n    export function ToDeclFlags(symFlags: SymbolFlags): DeclFlags;\n    export function ToDeclFlags(moduleFlags: ModuleFlags): DeclFlags;\n    export function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags: any) {\n        return <DeclFlags>fncOrVarOrSymbolOrModuleFlags;\n    }\n\n    export enum TypeFlags {\n        None = 0,\n        HasImplementation = 1,\n        HasSelfReference = 1 << 1,\n        MergeResult = 1 << 2,\n        IsEnum = 1 << 3,\n        BuildingName = 1 << 4,\n        HasBaseType = 1 << 5,\n        HasBaseTypeOfObject = 1 << 6,\n        IsClass = 1 << 7,\n    }\n\n    export enum TypeRelationshipFlags {\n        SuccessfulComparison = 0,\n        SourceIsNullTargetIsVoidOrUndefined = 1,\n        RequiredPropertyIsMissing = 1 << 1,\n        IncompatibleSignatures = 1 << 2,\n        SourceSignatureHasTooManyParameters = 3,\n        IncompatibleReturnTypes = 1 << 4,\n        IncompatiblePropertyTypes = 1 << 5,\n        IncompatibleParameterTypes = 1 << 6,\n    }\n\n    export enum CodeGenTarget {\n        ES3 = 0,\n        ES5 = 1,\n    }\n\n    export enum ModuleGenTarget {\n        Synchronous = 0,\n        Asynchronous = 1,\n        Local = 1 << 1,\n    }\n\n    // Compiler defaults to generating ES5-compliant code for\n    //  - getters and setters\n    export var codeGenTarget: CodeGenTarget = CodeGenTarget.ES3;\n\n    export var moduleGenTarget: ModuleGenTarget = ModuleGenTarget.Synchronous;\n\n    export var optimizeModuleCodeGen = true;\n\n    export function flagsToString(e, flags: number): string {\n        var builder = "";\n        for (var i = 1; i < (1 << 31) ; i = i << 1) {\n            if ((flags & i) != 0) {\n                for (var k in e) {\n                    if (e[k] == i) {\n                        if (builder.length > 0) {\n                            builder += "|";\n                        }\n                        builder += k;\n                        break;\n                    }\n                }\n            }\n        }\n        return builder;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class BlockIntrinsics {\n        public prototype = undefined;\n        public toString = undefined;\n        public toLocaleString = undefined;\n        public valueOf = undefined;\n        public hasOwnProperty = undefined;\n        public propertyIsEnumerable = undefined;\n        public isPrototypeOf = undefined;\n\n        constructor () {\n            // initialize the \'constructor\' field\n            this["constructor"] = undefined;\n        }\n    }\n\n    export interface IHashTable {\n        getAllKeys(): string[];\n        add(key: string, data): bool;\n        addOrUpdate(key: string, data): bool;\n        map(fn: (k: string, v, c) => void , context): void;\n        every(fn: (k: string, v, c) => bool, context): bool;\n        some(fn: (k: string, v, c) => bool, context): bool;\n        count(): number;\n        lookup(key: string): any;\n    }\n\n    export class StringHashTable implements IHashTable {\n        public itemCount = 0;\n        public table = <any>(<any> new BlockIntrinsics());\n\n        public getAllKeys(): string[]{\n            var result: string[] = [];\n            for (var k in this.table) {\n ';
var v27780 = v27781 + "               if (this.table[k] != undefined) {\n                    result[result.length] = k;\n                }\n            }\n            return result;\n        }\n\n        public add(key: string, data): bool {\n            if (this.table[key] != undefined) {\n                return false;\n            }\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.table[key] != undefined) {\n                this.table[key] = data;\n                return false;\n            }\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public map(fn: (k: string, v, c) => void , context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    fn(k, this.table[k], context);\n                }\n            }\n        }\n\n        public every(fn: (k: string, v, c) => bool, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    if (!fn(k, this.table[k], context)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        public some(fn: (k: string, v, c) => bool, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n                if (data != undefined) {\n                    if (fn(k, this.table[k], context)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public count(): number { return this.itemCount; }\n\n        public lookup(key: string) {\n            var data = this.table[key];\n            if (data != undefined) {\n                return data;\n            }\n            else {\n                return (null);\n            }\n        }\n    }\n\n    // The resident table is expected to reference the same table object, whereas the \n    // transientTable may reference different objects over time\n    // REVIEW:  WARNING:  For performance reasons, neither the primary nor secondary table may be null\n    export class DualStringHashTable implements IHashTable {\n\n        public insertPrimary = true;\n\n        constructor (public primaryTable: IHashTable,\n                                        public secondaryTable: IHashTable) { }\n\n        public getAllKeys(): string[]{\n            return this.primaryTable.getAllKeys().concat(this.secondaryTable.getAllKeys());\n        }\n\n        public add(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.add(key, data);\n            }\n            else {\n                return this.secondaryTable.add(key, data);\n            }\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.addOrUpdate(key, data);\n            }\n            else {\n                return this.secondaryTable.addOrUpdate(key, data);\n            }\n        }\n\n        public map(fn: (k: string, v, c) => void , context) {\n            this.primaryTable.map(fn, context);\n            this.secondaryTable.map(fn, context);\n        }\n\n        public every(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.every(fn, context) && this.secondaryTable.every(fn, context);\n        }\n\n        public some(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.some(fn, context) || this.secondaryTable.some(fn, context);\n        }\n\n        public count() {\n            return this.primaryTable.count() + this.secondaryTable.count();\n        }\n\n        public lookup(key: string) {\n            var data = this.primaryTable.lookup(key);\n            if (data != undefined) {\n                return data;\n            }\n            else {\n                return this.secondaryTable.lookup(key);\n            }\n        }\n    }\n\n    export function numberHashFn(key: number): number {\n        var c2 = 0x27d4eb2d; // a prime or an odd constant\n        key = (key ^ 61) ^ (key >>> 16);\n        key = key + (key << 3);\n        key = key ^ (key >>> 4);\n        key = key * c2;\n        key = key ^ (key >>> 15);\n        return key;\n    }\n\n    export function combineHashes(key1: number, key2: number) {\n        return key2 ^ ((key1 >> 5) + key1);\n    }\n\n    export class HashEntry {\n        public next: HashEntry;\n\n        constructor (public key, public data) { }\n    }\n\n    export class HashTable {\n        public itemCount: number = 0;\n        public table = new HashEntry[];\n\n        constructor (public size: number, public hashFn: (key) =>number,\n                    public equalsFn: (key1, key2) =>bool) {\n            for (var i: number = 0; i < this.size; i++) {\n                this.table[i] = null;\n            }\n        }\n\n        publi";
var v27779 = v27780 + 'c add(key, data): bool {\n            var current: HashEntry;\n            var entry: HashEntry = new HashEntry(key, data);\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return false;\n                }\n            }\n            entry.next = this.table[val];\n            this.table[val] = entry;\n            this.itemCount++;\n            return true;\n        }\n\n        public remove(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            var result = null;\n            var prevEntry: HashEntry = null;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    result = current.data;\n                    this.itemCount--;\n                    if (prevEntry) {\n                        prevEntry.next = current.next;\n                    }\n                    else {\n                        this.table[val] = current.next;\n                    }\n                    break;\n                }\n                prevEntry = current;\n            }\n            return result;\n        }\n\n        public count(): number { return this.itemCount; }\n\n        public lookup(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return (current.data);\n                }\n            }\n            return (null);\n        }\n    }\n\n    // Simple Hash table with list of keys and values matching each other at the given index\n    export class SimpleHashTable {\n        private keys = [];\n        private values = [];\n\n        public lookup(key, findValue?: bool) {\n            var searchArray = this.keys;\n            if (findValue) {\n                searchArray = this.values;\n            }\n\n            for (var i = 0; i < searchArray.length; i++) {\n                if (searchArray[i] == key) {\n                    return {\n                        key: this.keys[i],\n                        data: this.values[i],\n                    };\n                }\n            }\n            return null;\n        }\n\n        public add(key, data): bool {\n            var lookupData = this.lookup(key);\n            if (lookupData) {\n                return false;\n            }\n\n            this.keys[this.keys.length] = key;\n            this.values[this.values.length] = data;\n\n            return true;\n        }\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class IncrementalParser {\n        \n        private astLogger: AstLogger;\n\n        constructor (private logger: TypeScript.ILogger) {\n            this.astLogger = new AstLogger(this.logger);\n        }\n\n        //\n        // Return "null" if "editRange" cannot be safely determined to be inside a single scope.\n        //\n        public getEnclosingScopeContextIfSingleScopeEdit(previousScript: Script, scriptId: string, newSourceText: ISourceText, editRange: ScriptEditRange): EnclosingScopeContext {\n            this.logger.log("checkEditsInsideSingleScope(\\"" + scriptId + "\\")");\n\n            if (editRange === null) {\n                throw new Error("editRange should be valid");\n            }\n\n            if (editRange.isUnknown()) {\n                this.logger.log("  Bailing out because edit range is unknown");\n                return null;\n            }\n\n            var scope1 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.minChar, false/*isMemberCompletion*/);\n            var scope2 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.limChar, false/*isMemberCompletion*/);\n            if (scope1 == null || scope2 == null) {\n                this.logger.log("  Bailing out because containing scopes cannot be determined");\n                return null;\n            }\n\n            // We only support changes within a single containing scope\n            if (scope1.scopeStartAST !== scope2.scopeStartAST) {\n      ';
var v27778 = v27779 + '          this.logger.log("  Bailing out because edit overlaps 2 disctint scopes");\n                return null;\n            }\n\n            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;\n            if (newScopeLength <= 0) {\n                this.logger.log("  Bailing out because scope has been entirely removed from new source text");\n                return null;\n            }\n\n            return scope1;\n        }\n\n        public attemptIncrementalUpdateUnit(previousScript: Script, scriptId: string, newSourceText: ISourceText, editRange: ScriptEditRange): UpdateUnitResult {\n            this.logger.log("attemptIncrementalUpdateUnit(\\"" + scriptId + "\\")");\n\n            if (editRange === null) {\n                throw new Error("editRange should be valid");\n            }\n\n            var scope1 = this.getEnclosingScopeContextIfSingleScopeEdit(previousScript, scriptId, newSourceText, editRange);\n            if (scope1 === null) {\n                return null;\n            }\n\n            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;\n\n            // Heuristic: if the range to reparse is too big, bail out. \n            // This is because a full parse will be faster than an incremental parse followed by all the necessary fix-ups \n            if (newScopeLength >= newSourceText.getLength() / 2) {\n                this.logger.log("  Bailing out because range of scope to reparse (" + newScopeLength + " characters) is greater than half the size of the source text");\n                return null;\n            }\n\n            // Capture parsing errors so that they are part of "updateResult"\n            var parseErrors: TypeScript.ErrorEntry[] = [];\n            var errorCapture = function(minChar: number, charLen: number, message: string, unitIndex: number): void {\n                parseErrors.push(new TypeScript.ErrorEntry(unitIndex, minChar, minChar + charLen, message));\n            };\n\n            var quickParseResult = TypeScript.quickParse(this.logger, scope1.scopeStartAST, newSourceText, scope1.scopeStartAST.minChar, scope1.scopeStartAST.minChar + newScopeLength, errorCapture);\n            if (quickParseResult.endLexState != TypeScript.LexState.Start) {\n                this.logger.log("  Bailing out because scope contains unterminated comment");\n                return null;\n            }\n\n            var scriptFragment = quickParseResult.Script;\n            if (scriptFragment.vars.members.length !== 0) {\n                this.logger.log("  Bailing out because new source text defines variables");\n                return null;\n            }\n\n            //if (scriptFragment.scopes.members.length !== 1) {\n            //    logger.log("  Bailing out because new source text defines more than one scope (or none)");\n            //    return null;\n            //}\n\n            // This detects adding close curlies, since they have the side effect of having the parser \n            // parse more members in the scope range.\n            if (scriptFragment.bod.members.length !== 1) {\n                this.logger.log("  Bailing out because new source text defines more than one scope (or none)");\n                return null;\n            }\n\n            var oldScope = scope1.scopeStartAST;\n            var newScope = scriptFragment.bod.members[0];\n\n            if (oldScope.nodeType != newScope.nodeType) {\n                this.logger.log("  Bailing out because new source text does not define the same scope type as the existing scope");\n                return null;\n            }\n\n            if (!(<any>oldScope).leftCurlyCount || !(<any>oldScope).rightCurlyCount) {\n                this.logger.log("  Bailing out because sopce doesn\'t have left/right curly count");\n                return null;\n            }\n\n            if ((<any>oldScope).leftCurlyCount !== (<any>newScope).leftCurlyCount) {\n                this.logger.log("  Bailing out because new source text contains more (or fewer) left curly braces");\n                return null;\n            }\n\n            if ((<any>oldScope).rightCurlyCount !== (<any>newScope).rightCurlyCount) {\n                this.logger.log("  Bailing out because new source text contains more (or fewer) right curly braces");\n                return null;\n            }\n\n            if (newScope.minChar !== 0) {\n                this.logger.log("  Bailing out because new function declaration does not start at position 0");\n                return null;\n            }\n\n            if (newScope.limChar !== newScopeLength) {\n                this.logger.log("  Bailing out because new function declaration does not end at the new end position");\n                return null;\n            }\n\n            return TypeScript.UpdateUnitResult.singleScopeEdits(previousScript, scriptFragment, oldScope, newScope, editRange, parseErrors);\n        }\n\n        public mergeTrees(updateResult: UpdateUnitResult): void {\n            TypeScript.timeF';
var v27777 = v27778 + 'unction(this.logger, "mergeTrees()", () => {\n                var editRange = new ScriptEditRange(updateResult.scope1.minChar, updateResult.scope1.limChar, updateResult.editRange.delta);\n                // Update positions in current ast\n                this.applyDeltaPosition(updateResult.script1, editRange.limChar, editRange.delta);\n                // Update positions in new (partial) ast\n                this.applyDeltaPosition(updateResult.script2, 0, editRange.minChar);\n                // Merge linemaps\n                this.mergeLocationInfo(updateResult.script1, updateResult.script2, editRange);\n                //  Replace old AST for scope with new one\n                this.replaceAST(updateResult.script1, updateResult.scope1, updateResult.scope2);\n            });\n        }\n\n        private replaceAST(script: TypeScript.AST, oldAst: TypeScript.AST, newAst: TypeScript.AST) {\n            var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => {\n                if (cur === oldAst) {\n                    // Transfer comments ownership to new AST. We need this because when "quick parsing" the\n                    // new AST, we don\'t take into account the text before and after the "minChar/limChar" pair\n                    // of the scope, which don\'t include pre/post-comments.\n                    newAst.preComments = cur.preComments;\n                    newAst.postComments = cur.postComments;\n\n                    this.logger.log("replaced old AST node with new one in script AST");\n                    walker.options.stopWalk();\n                    return newAst;\n                }\n\n                // Avoid visiting sub-trees outside of the edit range\n                if (TypeScript.isValidAstNode(cur)) {\n                    if (cur.limChar < oldAst.minChar || cur.minChar > oldAst.limChar) {\n                        walker.options.goChildren = false;\n                    }\n                }\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(script, pre);\n        }\n\n        private mergeLocationInfo(script: TypeScript.Script, partial: TypeScript.Script, editRange: ScriptEditRange) {\n            // Don\'t merger these fields, as the original script has the right values\n            //script.locationInfo.unitIndex = partial.locationInfo.unitIndex;\n            //script.locationInfo.filename = partial.locationInfo.filename;\n\n            var lineMap1 = script.locationInfo.lineMap;\n            var lineMap2 = partial.locationInfo.lineMap;\n\n            if (this.logger.information()) {\n                this.logger.log("lineMap1 (before):");\n                this.astLogger.logLinemap(lineMap1);\n                this.logger.log("lineMap2 (quick parse):");\n                this.astLogger.logLinemap(lineMap2);\n                this.logger.log("EditRange=" + editRange);\n            }\n\n            // Skip entries < minChar\n            var i1 = 2; // lineMap[0] is always undefined, lineMap[1] is always 0.\n            var i2 = 2; // lineMap[0] is always undefined, lineMap[1] is always 0.\n            var len1 = lineMap1.length;\n            var len2 = lineMap2.length;\n            while (i1 < len1) {\n                if (lineMap1[i1] <= editRange.minChar) {\n                    // Nothing to do for this entry, since it\'s before the range of the change\n                    i1++;\n                } else if (lineMap1[i1] >= editRange.limChar) {\n                    // Apply delta to this entry, since it\'s outside the range of the change\n                    lineMap1[i1] += editRange.delta;\n                    i1++;\n                }\n                else {\n                    if (i2 < len2) {\n                        // Add a new entry to lineMap1 corresponding to lineMap2 in new range\n                        lineMap1.splice(i1, 0, lineMap2[i2] + editRange.minChar);\n                        i1++;\n                        len1++;\n                        i2++;\n                    }\n                    else { /* i2 >= len 2 */\n                        // Remove this entry, since there is no corresponding entry in the new map\n                        lineMap1.splice(i1, 1);\n                        len1--;\n                    }\n                }\n            }\n            // Merge the remaining entries in lineMap2 while maintaing the constraint that a lineMap is sorted\n            if (i2 < len2) {\n                // i1 >= len1 && i2 < len2 \n                if (lineMap1[len1 - 1] >= (lineMap2[i2] + editRange.minChar)) {\n                    // lineMap2 needs to be merged within lineMap1\n                    i1 = 2;\n                    while (i1 < len1 && i2 < len2) {\n                        if (lineMap1[i1] < (lineMap2[i2] + editRange.minChar)) {\n                            i1++;\n                        }\n                        else {\n                            lineMap1.splice(i1, 0, lineMap2[i2] + editRange.minChar);\n                            i1++;\n                            len1++;\n  ';
var v27776 = v27777 + '                          i2++;\n                        }\n                    }\n                }\n\n                // Append all the remaining entries in lineMap2 to the end of lineMap1\n                for (; i2 < len2; i2++) {\n                    lineMap1.push(lineMap2[i2] + editRange.minChar);\n                }\n            }\n\n            if (this.logger.information()) {\n                this.logger.log("lineMap1 (after merge):");\n                this.astLogger.logLinemap(lineMap1);\n            }\n        }\n\n        private applyDeltaPosition(ast: TypeScript.AST, start: number, delta: number) {\n            var applyDelta = (ast: TypeScript.AST) => {\n                if (ast.minChar !== -1 && ast.minChar >= start) {\n                    ast.minChar += delta;\n                }\n                if (ast.limChar !== -1 && ast.limChar >= start) {\n                    ast.limChar += delta;\n                }\n            }\n\n            var applyDeltaToComments = (comments: TypeScript.Comment[]) => {\n                if (comments && comments.length > 0) {\n                    for (var i = 0; i < comments.length; i++) {\n                        applyDelta(comments[i]);\n                    }\n                }\n            }\n\n            var pre = function(cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n                // *Before* applying delta to this, check if we need to go to children\n                if (cur.limChar !== -1 && cur.limChar < start) {\n                    walker.options.goChildren = false; // Done with applying Delta for this sub-tree\n                }\n\n                // Apply delta to this node\n                applyDelta(cur);\n                applyDeltaToComments(cur.preComments);\n                applyDeltaToComments(cur.postComments);\n\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(ast, pre);\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\ninterface IResolvedFile {\n    content: string;\n    path: string;\n}\n\ninterface IFileWatcher {\n    close(): void;\n}\n\ninterface IIO {\n    readFile(path: string): string;\n    writeFile(path: string, contents: string): void;\n    createFile(path: string, useUTF8?: bool): ITextWriter;\n    deleteFile(path: string): void;\n    dir(path: string, re?: RegExp, options?: { recursive?: bool; }): string[];\n    fileExists(path: string): bool;\n    directoryExists(path: string): bool;\n    createDirectory(path: string): void;\n    resolvePath(path: string): string;\n    dirName(path: string): string;\n    findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n    print(str: string): void;\n    printLine(str: string): void;\n    arguments: string[];\n    stderr: ITextWriter;\n    stdout: ITextWriter;\n    watchFile(filename: string, callback: (string) => void ): IFileWatcher;\n    run(source: string, filename: string): void;\n    getExecutingFilePath(): string;\n    quit(exitCode?: number);\n}\n\nmodule IOUtils {\n    // Creates the directory including its parent if not already present\n    function createDirectoryStructure(ioHost: IIO, dirName: string) {\n        if (ioHost.directoryExists(dirName)) {\n            return;\n        }\n\n        var parentDirectory = ioHost.dirName(dirName);\n        if (parentDirectory != "") {\n            createDirectoryStructure(ioHost, parentDirectory);\n        }\n        ioHost.createDirectory(dirName);\n    }\n\n    // Creates a file including its directory structure if not already present\n    export function createFileAndFolderStructure(ioHost: IIO, fileName: string, useUTF8?: bool) {\n        var path = ioHost.resolvePath(fileName);\n        var dirName = ioHost.dirName(path);\n        createDirectoryStructure(ioHost, dirName);\n        return ioHost.createFile(path, useUTF8);\n    }\n\n    export function throwIOError(message: string, error: Error) {\n        var errorMessage = message;\n        if (error && error.message) {\n            errorMessage += (" " + error.message);\n        }\n        throw new Error(errorMessage);\n    }\n}\n\n// Declare dependencies needed for all supported hosts\ndeclare class Enumerator {\n    public atEnd(): bool;\n    public moveNext();\n    public item(): any;\n    constructor (o: any);\n}\ndeclare function setTimeout(callback: () =>void , ms?: number);\ndeclare var require: any;\ndeclare module process {\n    export var argv: string[];\n    export var platform: string;\n    export function on(event: st';
var v27775 = v27776 + 'ring, handler: (any) => void ): void;\n    export module stdout {\n        export function write(str: string);\n    }\n    export module stderr {\n        export function write(str: string);\n    }\n    export module mainModule {\n        export var filename: string;\n    }\n    export function exit(exitCode?: number);\n}\n\nvar IO = (function() {\n\n    // Create an IO object for use inside WindowsScriptHost hosts\n    // Depends on WSCript and FileSystemObject\n    function getWindowsScriptHostIO(): IIO {\n        var fso = new ActiveXObject("Scripting.FileSystemObject");\n        var streamObjectPool = [];\n\n        function getStreamObject(): any { \n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            }  else {\n                return new ActiveXObject("ADODB.Stream");\n            }\n        }\n\n        function releaseStreamObject(obj: any) { \n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            readFile: function(path) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Open();\n                    streamObj.Type = 2; // Text data\n                    streamObj.Charset = \'x-ansi\'; // Assume we are reading ansi text\n                    streamObj.LoadFromFile(path);\n                    var bomChar = streamObj.ReadText(2); // Read the BOM char\n                    streamObj.Position = 0; // Position has to be at 0 before changing the encoding\n                    if ((bomChar.charCodeAt(0) == 0xFE && bomChar.charCodeAt(1) == 0xFF)\n                        || (bomChar.charCodeAt(0) == 0xFF && bomChar.charCodeAt(1) == 0xFE)) {\n                        streamObj.Charset = \'unicode\';\n                    } else if (bomChar.charCodeAt(0) == 0xEF && bomChar.charCodeAt(1) == 0xBB) {\n                        streamObj.Charset = \'utf-8\'; \n                    }\n\n                    // Read the whole file\n                    var str = streamObj.ReadText(-1 /* read from the current position to EOS */);\n                    streamObj.Close();\n                    releaseStreamObject(streamObj);\n                    return <string>str;\n                }\n                catch (err) {\n                    IOUtils.throwIOError("Error reading file \\"" + path + "\\".", err);\n                }\n            },\n\n            writeFile: function(path, contents) {\n                var file = this.createFile(path);\n                file.Write(contents);\n                file.Close();\n            },\n\n            fileExists: function(path: string): bool {\n                return fso.FileExists(path);\n            },\n\n            resolvePath: function(path: string): string {\n                return fso.GetAbsolutePathName(path);\n            },\n\n            dirName: function(path: string): string {\n                return fso.GetParentFolderName(path);\n            },\n\n            findFile: function(rootPath: string, partialFilePath: string): IResolvedFile {\n                var path = fso.GetAbsolutePathName(rootPath) + "/" + partialFilePath;\n\n                while (true) {\n                    if (fso.FileExists(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        }\n                        catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint("Could not find " + path + ", trying parent");\n                        }\n                    }\n                    else {\n                        rootPath = fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));\n\n                        if (rootPath == "") {\n                            return null;\n                        }\n                        else {\n                            path = fso.BuildPath(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n\n            deleteFile: function(path: string): void {\n                try {\n                    if (fso.FileExists(path)) {\n                        fso.DeleteFile(path, true); // true: delete read-only files\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t delete file \'" + path + "\'.", e);\n                }\n            },\n\n            createFile: function (path, useUTF8?) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Charset = useUTF8 ? \'utf-8\' : \'x-ansi\';\n                    streamObj.Open();\n                    return {\n                        Write: function (str) { streamObj.WriteText(str, 0); },\n                        WriteLine: function (str) { streamObj.WriteText(str, 1); },\n                        Close: function() {\n                            try {\n            ';
var v27774 = v27775 + '                    streamObj.SaveToFile(path, 2);\n                            } catch (saveError) {\n                                IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", saveError);\n                            }\n                            finally {\n                                if (streamObj.State != 0 /*adStateClosed*/) {\n                                    streamObj.Close();\n                                }\n                                releaseStreamObject(streamObj);\n                            }\n                        }\n                    };\n                } catch (creationError) {\n                    IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", creationError);\n                }\n            },\n\n            directoryExists: function(path) {\n                return <bool>fso.FolderExists(path);\n            },\n\n            createDirectory: function(path) {\n                try {\n                    if (!this.directoryExists(path)) {\n                        fso.CreateFolder(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t create directory \'" + path + "\'.", e);\n                }\n            },\n\n            dir: function(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n                function filesInFolder(folder, root): string[]{\n                    var paths = [];\n                    var fc: Enumerator;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd() ; fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + "/" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd() ; fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + "/" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n\n            print: function(str) {\n                WScript.StdOut.Write(str);\n            },\n\n            printLine: function(str) {\n                WScript.Echo(str);\n            },\n\n            arguments: <string[]>args,\n            stderr: WScript.StdErr,\n            stdout: WScript.StdOut,\n            watchFile: null,\n            run: function(source, filename) {\n                try {\n                    eval(source);\n                } catch (e) {\n                    IOUtils.throwIOError("Error while executing file \'" + filename + "\'.", e);\n                }\n            },\n            getExecutingFilePath: function () {\n                return WScript.ScriptFullName;\n            },\n            quit: function (exitCode? : number = 0) {\n                try {\n                    WScript.Quit(exitCode);\n                } catch (e) {\n                }\n            }\n        }\n\n    };\n\n    // Create an IO object for use inside Node.js hosts\n    // Depends on \'fs\' and \'path\' modules\n    function getNodeIO(): IIO {\n\n        var _fs = require(\'fs\');\n        var _path = require(\'path\');\n        var _module = require(\'module\');\n\n        return {\n            readFile: function(file) {\n                try {\n                    var buffer = _fs.readFileSync(file);\n                    switch (buffer[0]) {\n                        case 0xFE:\n                            if (buffer[1] == 0xFF) {\n                                // utf16-be. Reading the buffer as big endian is not supported, so convert it to \n                                // Little Endian first\n                                var i = 0;\n                                while ((i + 1) < buffer.length) {\n                                    var temp = buffer[i]\n                                    buffer[i] = buffer[i + 1];\n                                    buffer[i + 1] = temp;\n                                    i += 2;\n                                }\n                                return buffer.toString("ucs2", 2);\n                            }\n                            break;\n                        case 0xFF:\n                            if (buffer[1] == 0xFE) {\n                                // utf16-le \n                                return buffer.toString("ucs2", 2);\n                            }\n                            break;\n                        case 0xEF:\n                            if (buffer[1] == 0xBB) {\n                                // utf-8\n                                return buffer.toString("utf8", 3);\n                            }\n                    }\n                    // Default behaviour\n                    return buffer.toString();\n                } catch ';
var v27773 = v27774 + '(e) {\n                    IOUtils.throwIOError("Error reading file \\"" + file + "\\".", e);\n                }\n            },\n            writeFile: <(path: string, contents: string) => void >_fs.writeFileSync,\n            deleteFile: function(path) {\n                try {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t delete file \'" + path + "\'.", e);\n                }\n            },\n            fileExists: function(path): bool {\n                return _fs.existsSync(path);\n            },\n            createFile: function(path, useUTF8?) {\n                function mkdirRecursiveSync(path) {\n                    var stats = _fs.statSync(path);\n                    if (stats.isFile()) {\n                        IOUtils.throwIOError("\\"" + path + "\\" exists but isn\'t a directory.", null);\n                    } else if (stats.isDirectory()) {\n                        return;\n                    } else {\n                        mkdirRecursiveSync(_path.dirname(path));\n                        _fs.mkdirSync(path, 0775);\n                    }\n                }\n\n                mkdirRecursiveSync(_path.dirname(path));\n\n                try {\n                    var fd = _fs.openSync(path, \'w\');\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t write to file \'" + path + "\'.", e);\n                }\n                return {\n                    Write: function(str) { _fs.writeSync(fd, str); },\n                    WriteLine: function(str) { _fs.writeSync(fd, str + \'\\r\\n\'); },\n                    Close: function() { _fs.closeSync(fd); fd = null; }\n                };\n            },\n            dir: function dir(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n\n                function filesInFolder(folder: string): string[]{\n                    var paths = [];\n\n                    var files = _fs.readdirSync(folder);\n                    for (var i = 0; i < files.length; i++) {\n                        var stat = _fs.statSync(folder + "/" + files[i]);\n                        if (options.recursive && stat.isDirectory()) {\n                            paths = paths.concat(filesInFolder(folder + "/" + files[i]));\n                        } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                            paths.push(folder + "/" + files[i]);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            createDirectory: function(path: string): void {\n                try {\n                    if (!this.directoryExists(path)) {\n                        _fs.mkdirSync(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError("Couldn\'t create directory \'" + path + "\'.", e);\n                }\n            },\n\n            directoryExists: function(path: string): bool {\n                return _fs.existsSync(path) && _fs.lstatSync(path).isDirectory();\n            },\n            resolvePath: function(path: string): string {\n                return _path.resolve(path);\n            },\n            dirName: function(path: string): string {\n                return _path.dirname(path);\n            },\n            findFile: function(rootPath: string, partialFilePath): IResolvedFile {\n                var path = rootPath + "/" + partialFilePath;\n\n                while (true) {\n                    if (_fs.existsSync(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        } catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint(("Could not find " + path) + ", trying parent");\n                        }\n                    }\n                    else {\n                        var parentPath = _path.resolve(rootPath, "..");\n\n                        // Node will just continue to repeat the root path, rather than return null\n                        if (rootPath === parentPath) {\n                            return null;\n                        }\n                        else {\n                            rootPath = parentPath;\n                            path = _path.resolve(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            print: function(str) { process.stdout.write(str) },\n            printLine: function(str) { process.stdout.write(str + \'\\n\') },\n            arguments: process.argv.slice(2),\n            stderr: {\n                Write: function(str) { process.stderr.write(str); },\n                WriteLine: function(str) { process.stderr.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            stdout: {\n                Write: function(str) { process.stdout.write(str); },\n                Write';
var v27772 = v27773 + 'Line: function(str) { process.stdout.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            watchFile: function(filename: string, callback: (string) => void ): IFileWatcher {\n                var firstRun = true;\n                var processingChange = false;\n\n                var fileChanged: any = function(curr, prev) {\n                    if (!firstRun) {\n                        if (curr.mtime < prev.mtime) {\n                            return;\n                        }\n\n                        _fs.unwatchFile(filename, fileChanged);\n                        if (!processingChange) {\n                            processingChange = true;\n                            callback(filename);\n                            setTimeout(function() { processingChange = false; }, 100);\n                        }\n                    }\n                    firstRun = false;\n                    _fs.watchFile(filename, { persistent: true, interval: 500 }, fileChanged);\n                };\n\n                fileChanged();\n                return {\n                    filename: filename,\n                    close: function() {\n                        _fs.unwatchFile(filename, fileChanged);\n                    }\n                };\n            },\n            run: function(source, filename) {\n                require.main.filename = filename;\n                require.main.paths = _module._nodeModulePaths(_path.dirname(_fs.realpathSync(filename)));\n                require.main._compile(source, filename);\n            }, \n            getExecutingFilePath: function () {\n                return process.mainModule.filename;\n            },\n            quit: process.exit\n        }\n    };\n\n    if (typeof ActiveXObject === "function")\n        return getWindowsScriptHostIO();\n    else if (typeof require === "function")\n        return getNodeIO();\n    else\n        return null; // Unsupported host\n})();\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // Note: Any addition to the NodeType should also be supported with addition to AstWalkerDetailCallback\n    export enum NodeType {\n        None,\n        Empty,\n        EmptyExpr,\n        True,\n        False,\n        This,\n        Super,\n        QString,\n        Regex,\n        Null,\n        ArrayLit,\n        ObjectLit,\n        Void,\n        Comma,\n        Pos,\n        Neg,\n        Delete,\n        Await,\n        In,\n        Dot,\n        From,\n        Is,\n        InstOf,\n        Typeof,\n        NumberLit,\n        Name,\n        TypeRef,\n        Index,\n        Call,\n        New,\n        Asg,\n        AsgAdd,\n        AsgSub,\n        AsgDiv,\n        AsgMul,\n        AsgMod,\n        AsgAnd,\n        AsgXor,\n        AsgOr,\n        AsgLsh,\n        AsgRsh,\n        AsgRs2,\n        ConditionalExpression,\n        LogOr,\n        LogAnd,\n        Or,\n        Xor,\n        And,\n        Eq,\n        Ne,\n        Eqv,\n        NEqv,\n        Lt,\n        Le,\n        Gt,\n        Ge,\n        Add,\n        Sub,\n        Mul,\n        Div,\n        Mod,\n        Lsh,\n        Rsh,\n        Rs2,\n        Not,\n        LogNot,\n        IncPre,\n        DecPre,\n        IncPost,\n        DecPost,\n        TypeAssertion,\n        FuncDecl,\n        Member,\n        VarDecl,\n        ArgDecl,\n        Return,\n        Break,\n        Continue,\n        Throw,\n        For,\n        ForIn,\n        If,\n        While,\n        DoWhile,\n        Block,\n        Case,\n        Switch,\n        Try,\n        TryCatch,\n        TryFinally,\n        Finally,\n        Catch,\n        List,\n        Script,\n        ClassDeclaration,\n        InterfaceDeclaration,\n        ModuleDeclaration,\n        ImportDeclaration,\n        With,\n        Label,\n        LabeledStatement,\n        EBStart,\n        GotoEB,\n        EndCode,\n        Error,\n        Comment,\n        Debugger,\n        GeneralNode = FuncDecl,\n        LastAsg = AsgRs2,\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.';
var v27771 = v27772 + '\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path="io.ts" />\n\ninterface IOptions {\n    name?: string;\n    flag?: bool;\n    short?: string;\n    usage?: string;\n    set?: (s: string) => void;\n    type?: string;\n    experimental?: bool;\n}\n\nclass OptionsParser {\n    private DEFAULT_SHORT_FLAG = "-";\n    private DEFAULT_LONG_FLAG = "--";\n\n    // Find the option record for the given string. Returns null if not found.\n    private findOption(arg: string) {\n\n        for (var i = 0; i < this.options.length; i++) {\n\n            if (arg === this.options[i].short || arg === this.options[i].name) {\n                return this.options[i];\n            }\n        }\n\n        return null;\n    }\n\n    public unnamed: string[] = [];\n\n    public options: IOptions[] = [];\n\n    constructor (public host: IIO) {\n    }\n\n    public printUsage() {\n        this.host.printLine("Syntax:   tsc [options] [file ..]");\n        this.host.printLine("");\n        this.host.printLine("Examples: tsc hello.ts");\n        this.host.printLine("          tsc --out foo.js foo.ts");\n        this.host.printLine("          tsc @args.txt");\n        this.host.printLine("");\n        this.host.printLine("Options:");\n\n        var output = [];\n        var maxLength = 0;\n\n        this.options = this.options.sort(function(a, b) {\n            var aName = a.name.toLowerCase();\n            var bName = b.name.toLowerCase();\n\n            if (aName > bName) {\n                return 1;\n            } else if (aName < bName) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Build up output array\n        for (var i = 0; i < this.options.length; i++) {\n            var option = this.options[i];\n\n            if (option.experimental) {\n                continue;\n            }\n\n            if (!option.usage) {\n                break;\n            }\n\n            var usageString = "  ";\n            var type = option.type ? " " + option.type.toUpperCase() : "";\n\n            if (option.short) {\n                usageString += this.DEFAULT_SHORT_FLAG + option.short + type + ", ";\n            }\n\n            usageString += this.DEFAULT_LONG_FLAG + option.name + type;\n\n            output.push([usageString, option.usage]);\n\n            if (usageString.length > maxLength) {\n                maxLength = usageString.length;\n            }\n        }\n\n        output.push(["  @<file>", "Insert command line options and files from a file."]);\n\n        // Print padded output\n        for (var i = 0; i < output.length; i++) {\n            this.host.printLine(output[i][0] + (new Array(maxLength - output[i][0].length + 3)).join(" ") + output[i][1]);\n        }\n    }\n\n    public option(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = false;\n\n        this.options.push(config);\n    }\n\n    public flag(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = true\n\n        this.options.push(config);\n    }\n\n    // Parse an arguments string\n    public parseString(argString: string) {\n        var position = 0;\n        var tokens = argString.match(/\\s+|"|[^\\s"]+/g);\n\n        function peek() {\n            return tokens[position];\n        }\n\n        function consume() {\n            return tokens[position++];\n        }\n\n        function consumeQuotedString() {\n            var value = \'\';\n            consume(); // skip opening quote.\n\n            var token = peek();\n\n            while (token && token !== \'"\') {\n                consume();\n\n                value += token;\n\n                token = peek();\n            }\n\n            consume(); // skip ending quote;\n\n            return value;\n        }\n\n        var args: string[] = [];\n        var currentArg = \'\';\n\n        while (position < tokens.length) {\n            var token = peek();\n\n            if (token === \'"\') {\n                currentArg += consumeQuotedString();\n            } else if (token.match(/\\s/)) {\n                if (currentArg.length > 0) {\n                    args.push(currentArg);\n                    currentArg = \'\';\n                }\n\n                consume();\n            } else {\n                consume();\n                currentArg += token;\n            }\n        }\n\n        if (currentArg.length > 0) {\n            args.push(currentArg);\n        }\n\n        this.parse(args);\n    }\n\n    // Parse arguments as they come from the platform: split into arguments.\n    public parse(args: string[]) {\n        var position = 0;\n\n        function consume() {\n            return args[position++];\n        }\n\n        while (position < args.length) {\n            var current = consume();\n           ';
var v27770 = v27771 + ' var match = current.match(/^(--?|@)(.*)/);\n            var value = null;\n\n            if (match) {\n                if (match[1] === \'@\') {\n                    this.parseString(this.host.readFile(match[2]));\n                } else {\n                    var arg = match[2];\n                    var option = this.findOption(arg);\n\n                    if (option === null) {\n                        this.host.printLine("Unknown option \'" + arg +"\'");\n                        this.host.printLine("Use the \'--help\' flag to see options");\n                    } else {\n                        if (!option.flag)\n                            value = consume();\n\n                        option.set(value);\n                    }\n                }\n            } else {\n                this.unnamed.push(current);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum TypeContext {\n        NoTypes = 0,\n        ArraySuffix = 1,\n        Primitive = 2,\n        Named = 4,\n        AllSimpleTypes = Primitive | Named,\n        AllTypes = Primitive | Named | ArraySuffix,\n    }\n\n    export enum ParseState {\n        None,\n        StartScript,\n        StartStatementList,\n        StartStatement,\n        StartFncDecl,\n        FncDeclName,\n        FncDeclArgs,\n        FncDeclReturnType,\n        ForInit,\n        ForInitAfterVar,\n        ForCondStart,\n        EndStmtList,\n        EndScript,\n    }\n\n    export interface IStatementInfo {\n        stmt: Statement;\n        labels: ASTList;\n    }\n\n    export interface ILambdaArgumentContext {\n        preProcessedLambdaArgs: AST;\n    }\n\n    export class QuickParseResult {\n        constructor (public Script: Script, public endLexState: LexState) { }\n    }\n\n    export class Parser {\n        private varLists: ASTList[] = [];\n        private scopeLists: ASTList[] = [];\n        private staticsLists: ASTList[] = [];\n\n        private scanner: IScanner = new Scanner();\n        private currentToken: Token = null;\n\n        private needTerminator = false;\n\n        // TODO: consolidate these\n        private inFunction = false;\n        private inInterfaceDecl = false;\n        public currentClassDecl: NamedDeclaration = null;\n\n        private inFncDecl = false;  // this is only for FuncDecls - not constructors, like inFnc\n        private anonId = new Identifier("_anonymous");\n        public style_requireSemi = false;\n        public style_funcInLoop = true;\n        private incremental = false;\n        public errorRecovery = false;\n        public outfile: ITextWriter = undefined;\n        public errorCallback: (minChar: number, charLen: number, message: string, unit: number) =>void = null;\n        private state: ParseState = ParseState.StartStatementList;\n        private ambientModule = false;\n        private ambientClass = false;\n        private topLevel = true;\n        private allowImportDeclaration = true;\n        private currentUnitIndex = (-1);\n        private prevIDTok: Token = null;\n        private statementInfoStack: IStatementInfo[] = new IStatementInfo[];\n        private hasTopLevelImportOrExport = false; // for imports, only true if it\'s a dynamic module\n        private strictMode = false;\n        private nestingLevel = 0;\n        private prevExpr: AST = null;\n        private currentClassDefinition: ClassDeclaration = null;\n        private parsingClassConstructorDefinition = false;\n        private parsingDeclareFile = false;\n        private amdDependencies: string[] = [];\n        public inferPropertiesFromThisAssignment = false;\n        public requiresExtendsBlock = false;\n\n        private resetStmtStack() {\n            this.statementInfoStack = new IStatementInfo[];\n        }\n\n        private inLoop() {\n            for (var j = this.statementInfoStack.length - 1; j >= 0; j--) {\n                if (this.statementInfoStack[j].stmt.isLoop()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private pushStmt(stmt: Statement, labels: ASTList) {\n            // allocate here to avoid always storing this information in statements\n            var info = { stmt: stmt, labels: labels };\n            this.statementInfoStack.push(info);\n        }\n\n        private popStmt(): IStatementInfo {\n            return this.statementInfoStack.pop();\n        }\n\n        private resolveJumpTarget(jump: Jump): void {';
var v27769 = v27770 + '\n            var resolvedTarget = AST.getResolvedIdentifierName(jump.target);\n            var len = this.statementInfoStack.length;\n            for (var i = len - 1; i >= 0; i--) {\n                var info = this.statementInfoStack[i];\n                if (jump.target) {\n                    if (info.labels && (info.labels.members.length > 0)) {\n                        for (var j = 0, labLen = info.labels.members.length; j < labLen; j++) {\n                            var label = <Label>info.labels.members[j];\n                            if (label.id.text == resolvedTarget) {\n                                jump.setResolvedTarget(this, info.stmt);\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (info.stmt.isLoop()) {\n                        jump.setResolvedTarget(this, info.stmt);\n                        return;\n                    }\n                    else if ((info.stmt.nodeType == NodeType.Switch) && (jump.nodeType == NodeType.Break)) {\n                        jump.setResolvedTarget(this, info.stmt);\n                        return;\n                    }\n                }\n            }\n            // no luck\n            if (jump.target) {\n                this.reportParseError("could not find enclosing statement with label " + jump.target);\n            }\n            else {\n                if (jump.nodeType == NodeType.Break) {\n                    this.reportParseError("break statement requires enclosing loop or switch");\n                }\n                else {\n                    this.reportParseError("continue statement requires enclosing loop");\n                }\n            }\n        }\n\n        public setErrorRecovery(outfile: ITextWriter) {\n            this.outfile = outfile;\n            this.errorRecovery = true;\n        }\n\n        public getSourceLineCol(lineCol: ILineCol, minChar: number): void {\n            getSourceLineColFromMap(lineCol, minChar, this.scanner.lineMap);\n        }\n\n        private createRef(text: string, hasEscapeSequence: bool, minChar: number): Identifier {\n            var id = new Identifier(text, hasEscapeSequence);\n            id.minChar = minChar;\n            return id;\n        }\n\n        private reportParseStyleError(message: string) {\n            this.reportParseError("STYLE: " + message);\n        }\n\n        public reportParseError(message: string, startPos = this.scanner.startPos, pos = this.scanner.pos) {\n            var len = Math.max(1, pos - startPos);\n            if (this.errorCallback) {\n                this.errorCallback(startPos, len, message, this.currentUnitIndex);\n            }\n            else if (this.errorRecovery) {\n                var lineCol = { line: -1, col: -1 };\n                this.getSourceLineCol(lineCol, startPos);\n                if (this.outfile) {\n                    this.outfile.WriteLine("// " + this.fname + " (" + lineCol.line + "," + lineCol.col + "): " + message);\n                }\n            }\n            else {\n                throw new SyntaxError(this.fname + " (" + this.scanner.line + "," + this.scanner.col + "): " + message);\n            }\n        }\n\n        private checkNextToken(tokenId: TokenID, errorRecoverySet: ErrorRecoverySet, errorText: string = null): void {\n            this.currentToken = this.scanner.scan();\n            this.checkCurrentToken(tokenId, errorRecoverySet, errorText);\n        }\n\n        private skip(errorRecoverySet: ErrorRecoverySet) {\n            errorRecoverySet |= ErrorRecoverySet.EOF;\n            var ersTok = ErrorRecoverySet.None;\n            var tokenInfo = lookupToken(this.currentToken.tokenId);\n            if (tokenInfo != undefined) {\n                ersTok = tokenInfo.ers;\n            }\n            var pendingRightCurlies = 0;\n            while (((ersTok & errorRecoverySet) == ErrorRecoverySet.None) ||\n                   (this.currentToken.tokenId == TokenID.CloseBrace) && (pendingRightCurlies > 0)) {\n                if (this.currentToken.tokenId == TokenID.OpenBrace) {\n                    pendingRightCurlies++;\n                }\n                else if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    pendingRightCurlies--;\n                }\n                this.currentToken = this.scanner.scan();\n                ersTok = ErrorRecoverySet.None;\n                tokenInfo = lookupToken(this.currentToken.tokenId);\n                if (tokenInfo != undefined) {\n                    ersTok = tokenInfo.ers;\n                }\n                // TODO: regex rescan \n            }\n        }\n\n        private checkCurrentToken(tokenId: TokenID, errorRecoverySet: ErrorRecoverySet, errorText: string = null): void {\n            if (this.currentToken.tokenId != tokenId) {\n                errorText = errorText == null ? ("Expected \'" + tokenTable[tokenId].text + "\'") : errorText;\n                this.reportParseError(errorText);\n                if (this.errorRecove';
var v27768 = v27769 + 'ry) {\n                    this.skip(errorRecoverySet);\n                }\n            }\n            else {\n                this.currentToken = this.scanner.scan();\n            }\n        }\n\n        private pushDeclLists() {\n            this.staticsLists.push(new ASTList());\n            this.varLists.push(new ASTList());\n            this.scopeLists.push(new ASTList());\n        }\n\n        private popDeclLists() {\n            this.staticsLists.pop();\n            this.varLists.pop();\n            this.scopeLists.pop();\n        }\n\n        private topVarList() {\n            return this.varLists[this.varLists.length - 1];\n        }\n\n        private topScopeList() {\n            return this.scopeLists[this.scopeLists.length - 1];\n        }\n\n        private topStaticsList() {\n            return this.staticsLists[this.staticsLists.length - 1];\n        }\n\n        private parseComment(comment: CommentToken) {\n            if (comment) {\n                var c: Comment = new Comment(comment.value, comment.isBlock, comment.endsLine);\n                c.minChar = comment.startPos;\n                c.limChar = comment.startPos + comment.value.length;\n                var lineCol = { line: -1, col: -1 };\n                this.getSourceLineCol(lineCol, c.minChar);\n                c.minLine = lineCol.line;\n                this.getSourceLineCol(lineCol, c.limChar);\n                c.limLine = lineCol.line;\n\n                if (!comment.isBlock && comment.value.length > 3 && comment.value.substring(0, 3) == "///") {\n                    var dependencyPath = getAdditionalDependencyPath(comment.value);\n\n                    if (dependencyPath) {\n                        this.amdDependencies.push(dependencyPath);\n                    }\n\n                    if (getImplicitImport(comment.value)) {\n                        this.hasTopLevelImportOrExport = true;\n                    }\n                }\n\n                return c;\n            }\n            else {\n                return null;\n            }\n        }\n\n        private parseCommentsInner(comments: CommentToken[]) {\n            if (comments) {\n                var commentASTs: Comment[] = new Comment[];\n                for (var i = 0; i < comments.length; i++) {\n                    commentASTs.push(this.parseComment(comments[i]));\n                }\n                return commentASTs;\n            } else {\n                return null;\n            }\n        }\n\n        private parseComments() {\n            var comments = this.scanner.getComments();\n            return this.parseCommentsInner(comments);\n        }\n\n        private parseCommentsForLine(line: number) {\n            var comments = this.scanner.getCommentsForLine(line);\n\n            return this.parseCommentsInner(comments);\n        }\n\n        private combineComments(comment1: Comment[], comment2: Comment[]) {\n            if (comment1 == null) {\n                return comment2;\n            }\n            else if (comment2 == null) {\n                return comment1;\n            }\n            else {\n                return comment1.concat(comment2);\n            }\n        }\n\n        private parseEnumDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): ModuleDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("Enum declaration requires identifier");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.startPos;\n                    name.limChar = this.scanner.startPos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.ID);\n            this.pushDeclLists();\n            var members = new ASTList();\n            members.minChar = membersMinChar;\n            var mapDecl = new VarDecl(new Identifier("_map"), 0);\n            mapDecl.varFlags |= VarFlags.Exported;\n            mapDecl.varFlags |= VarFlags.Private;\n\n            // REVIEW: Is this still necessary?\n            mapDecl.varFlags |= (VarFlags.Property | VarFlags.Public);\n            mapDecl.init = new UnaryExpression(NodeType.ArrayLit, null);\n            members.append(mapDecl);\n            var lastValue: NumberLiteral = null;\n            for (; ;) {\n                var minChar = this.scanner.startPos;\n                var limChar;\n                var memberName: Identifier = null;\n';
var v27767 = v27768 + '                var memberValue: AST = null;\n                var preComments = null;\n                var postComments = null;\n\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                    memberName = Identifier.fromToken(this.currentToken);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    break;\n                }\n                else {\n                    this.reportParseError("Expected identifer of enum member");\n                    if (this.errorRecovery) {\n                        memberName = new MissingIdentifier();\n                        memberName.minChar = this.scanner.startPos;\n                        memberName.limChar = this.scanner.startPos;\n                        memberName.flags |= ASTFlags.Error;\n                    }\n                }\n\n                limChar = this.scanner.pos;\n                preComments = this.parseComments();\n                this.currentToken = this.scanner.scan();\n                postComments = this.parseComments();\n\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    this.currentToken = this.scanner.scan();\n                    memberValue = this.parseExpr(errorRecoverySet, OperatorPrecedence.Comma, true,\n                                          TypeContext.NoTypes);\n                    lastValue = <NumberLiteral>memberValue;\n                    limChar = memberValue.limChar;\n                }\n                else {\n                    if (lastValue == null) {\n                        memberValue = new NumberLiteral(0);\n                        lastValue = <NumberLiteral>memberValue;\n                    }\n                    else {\n                        memberValue = new NumberLiteral(lastValue.value + 1);\n                        lastValue = <NumberLiteral>memberValue;\n                    }\n                    var map: BinaryExpression =\n                        new BinaryExpression(NodeType.Asg,\n                                             new BinaryExpression(NodeType.Index,\n                                                                  new Identifier("_map"),\n                                                                  memberValue),\n                                             new StringLiteral(\'"\' + memberName.actualText + \'"\'));\n                    members.append(map);\n                }\n                var member = new VarDecl(memberName, this.nestingLevel);\n                member.minChar = minChar;\n                member.limChar = limChar;\n                member.init = memberValue;\n                // Note: Leave minChar, limChar as "-1" on typeExpr as this is a parsing artifact.\n                member.typeExpr = new TypeReference(this.createRef(name.actualText, name.hasEscapeSequence, -1), 0);\n                member.varFlags |= (VarFlags.Readonly | VarFlags.Property);\n                if (memberValue.nodeType == NodeType.NumberLit) {\n                    member.varFlags |= VarFlags.Constant;\n                }\n                member.preComments = preComments;\n                members.append(member);\n                member.postComments = postComments;\n                // all enum members are exported\n                member.varFlags |= VarFlags.Exported;\n\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    this.currentToken = this.scanner.scan();\n                    member.postComments = this.combineComments(member.postComments, this.parseCommentsForLine(this.scanner.prevLine));\n                    if ((this.currentToken.tokenId == TokenID.Identifier) || (convertTokToIDName(this.currentToken))) {\n                        continue;\n                    }\n                }\n                break;\n            }\n            var endingToken = new ASTSpan();\n            endingToken.minChar = this.scanner.startPos;\n            endingToken.limChar = this.scanner.pos;\n\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n            members.limChar = this.scanner.lastTokenLimChar();\n            var modDecl = new ModuleDeclaration(name, members, this.topVarList(), this.topScopeList(), endingToken);\n            modDecl.modFlags |= ModuleFlags.IsEnum;\n            this.popDeclLists();\n\n            modDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            modDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return modDecl;\n        }\n\n        private parseDottedName(enclosedList: AST[]): void {\n            this.currentToken = this.scanner.scan();\n            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                var id = Identifier.fromToken(this.currentToken);\n                id.preComments = this.parseCom';
var v27766 = v27767 + "ments();\n                enclosedList[enclosedList.length] = id;\n                id.minChar = this.scanner.startPos;\n                id.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n                if (this.currentToken.tokenId == TokenID.Dot) {\n                    this.parseDottedName(enclosedList);\n                }\n            }\n            else {\n                this.reportParseError(\"need identifier after '.'\");\n            }\n        }\n\n        // REVIEW: This is much more lenient than the spec - we're basically just checking to see if the\n        // path is rooted or contains an extension, not if it could potentially be a bogus file path\n        private isValidImportPath(importPath: string) {\n            importPath = stripQuotes(importPath);\n\n            if (!importPath ||\n                importPath.indexOf(':') != -1 || \n                importPath.indexOf('\\\\') != -1 ||\n                //(importPath.indexOf('.') != -1 && importPath.charAt(0) != '.') ||\n                importPath.charAt(0) == '/') {\n                return false;\n            }\n            return true;\n        }\n\n        private parseImportDeclaration(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): ImportDeclaration {\n\n            var name: Identifier = null;\n            var alias: AST = null;\n            var importDecl: ImportDeclaration = null;\n            var minChar = this.scanner.startPos;\n            var isDynamicImport = false;\n\n            this.currentToken = this.scanner.scan();\n\n            if (this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n                name = Identifier.fromToken(this.currentToken);\n            }\n            else {\n                this.reportParseError(\"Expected identifer after 'import'\");\n                name = new MissingIdentifier();\n            }\n\n            name.minChar = this.scanner.startPos;\n            name.limChar = this.scanner.pos;\n\n            this.currentToken = this.scanner.scan();\n\n            this.checkCurrentToken(TokenID.Equals, errorRecoverySet | ErrorRecoverySet.ID);\n\n            var aliasPreComments = this.parseComments();\n\n            var limChar;\n            if (this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n\n                if (this.currentToken.tokenId == TokenID.Module) {\n                    limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        this.currentToken = this.scanner.scan();\n\n                        if (this.currentToken.tokenId == TokenID.StringLiteral || this.currentToken.tokenId == TokenID.Identifier || convertTokToID(this.currentToken, this.strictMode)) {\n\n                            if (this.currentToken.tokenId == TokenID.StringLiteral) {\n\n                                if (this.topLevel) {\n                                    this.hasTopLevelImportOrExport = true;\n                                } else if (!this.allowImportDeclaration) {\n                                    this.reportParseError(\"Import declaration of external module is permitted only in global or top level dynamic modules\");\n                                }\n\n                                var aliasText = this.currentToken.getText();\n                                alias = Identifier.fromToken(this.currentToken);\n                                alias.minChar = this.scanner.startPos;\n                                alias.limChar = this.scanner.pos;\n\n                                if (!this.isValidImportPath((<Identifier>alias).text)) {\n                                    this.reportParseError(\"Invalid import path\");\n                                }\n\n                                isDynamicImport = true;\n                                this.currentToken = this.scanner.scan();\n                                    \n                                alias.preComments = aliasPreComments;\n                            }\n                            else {\n                                alias = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                            OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                                    \n                                alias.preComments = aliasPreComments;\n                            }\n                        }\n\n                        limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.ID);\n\n                        if (alias) {\n                            alias.postComments = this.parseComments();\n                        }\n                    }\n                }\n                else {\n                    alias = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                 ";
var v27765 = v27766 + '                           OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                    limChar = this.scanner.pos; // Include semicolon if needed\n                }\n            }\n            else {\n                this.reportParseError("Expected module name");\n                alias = new MissingIdentifier();\n                alias.minChar = this.scanner.startPos;\n                if (this.currentToken.tokenId == TokenID.Semicolon) {\n                    alias.limChar = this.scanner.startPos;\n                } else {\n                    alias.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n                alias.flags |= ASTFlags.Error;\n                limChar = alias.limChar;\n            }\n\n            importDecl = new ImportDeclaration(name, alias);\n            importDecl.isDynamicImport = isDynamicImport;\n\n            importDecl.minChar = minChar;\n            importDecl.limChar = limChar;\n\n            return importDecl;\n        }\n\n        private parseModuleDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers, preComments: Comment[]): ModuleDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var svAmbient = this.ambientModule;\n            var svTopLevel = this.topLevel;\n            this.topLevel = false;\n            if (this.parsingDeclareFile || svAmbient || hasFlag(modifiers, Modifiers.Ambient)) {\n                this.ambientModule = true;\n            }\n\n            this.currentToken = this.scanner.scan();\n            var name: AST = null;\n            var enclosedList: AST[] = null;\n            this.pushDeclLists();\n            var minChar = this.scanner.startPos;\n            var isDynamicMod = false;\n\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (this.currentToken.tokenId == TokenID.StringLiteral) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode))) {\n                var nameText = this.currentToken.getText();\n\n                if (this.currentToken.tokenId == TokenID.StringLiteral) {\n                    isDynamicMod = true;\n                    if (!this.ambientModule) {\n                        this.reportParseError("Only ambient dynamic modules may have string literal names");\n                    }\n\n                    if (!svTopLevel) {\n                        this.reportParseError("Dynamic modules may not be nested within other modules");\n                    }\n                }\n\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n\n                this.currentToken = this.scanner.scan();\n            }\n            else if (this.currentToken.tokenId == TokenID.OpenBrace) {\n                this.reportParseError("Module name missing");\n                name = new Identifier("");\n                // "fake" position of where the ID would be\n                name.minChar = minChar;\n                name.limChar = minChar;\n            }\n\n            if (this.currentToken.tokenId == TokenID.Dot) {\n                enclosedList = new AST[];\n                this.parseDottedName(enclosedList);\n            }\n\n            if (name == null) {\n                name = new MissingIdentifier();\n            }\n\n            var moduleBody = new ASTList();\n            var bodyMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.ID);\n\n            if (svTopLevel && isDynamicMod) {\n                this.allowImportDeclaration = true;\n            } else {\n                this.allowImportDeclaration = false;\n            }\n            this.parseStatementList(\n                errorRecoverySet | ErrorRecoverySet.RCurly, moduleBody,\n                /*sourceElements:*/ true, /*noLeadingCase:*/ true, AllowedElements.Global, modifiers);\n            moduleBody.minChar = bodyMinChar;\n            moduleBody.limChar = this.scanner.pos;\n\n            var endingToken = new ASTSpan();\n            endingToken.minChar = this.scanner.startPos;\n            endingToken.limChar = this.scanner.pos;\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            var limChar = this.scanner.lastTokenLimChar();\n            var moduleDecl: ModuleDeclaration;\n\n            this.allowImportDeclaration = svTopLevel;\n\n            if (enclosedList && (enclosedList.length > 0)) {\n                var len = enclosedList.length;\n                var innerName = <Identifier>enclosedList[len - 1];\n                var innerDecl = new ModuleDeclaration(innerName, moduleBody, this.topVarList(),\n                                                this.topScopeList(), endingToken);\n                innerDecl.preComments = preComments;\n\n                if (this.parsingDeclareFile || hasFl';
var v27764 = v27765 + 'ag(modifiers, Modifiers.Ambient)) {\n                    innerDecl.modFlags |= ModuleFlags.Ambient;\n                }\n\n                innerDecl.modFlags |= ModuleFlags.Exported;\n\n                // REVIEW: will also possibly need to re-parent comments as well\n                innerDecl.minChar = minChar;\n                innerDecl.limChar = limChar;\n\n                this.popDeclLists();\n                var outerModBod: ASTList;\n                for (var i = len - 2; i >= 0; i--) {\n                    outerModBod = new ASTList();\n                    outerModBod.append(innerDecl);\n                    innerName = <Identifier>enclosedList[i];\n                    innerDecl = new ModuleDeclaration(innerName, outerModBod, new ASTList(),\n                                                new ASTList(), endingToken);\n                    outerModBod.minChar = innerDecl.minChar = minChar;\n                    outerModBod.limChar = innerDecl.limChar = limChar;\n\n                    if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                        innerDecl.modFlags |= ModuleFlags.Ambient;\n                    }\n\n                    innerDecl.modFlags |= ModuleFlags.Exported;\n                }\n                outerModBod = new ASTList();\n                outerModBod.append(innerDecl);\n                outerModBod.minChar = minChar;\n                outerModBod.limChar = limChar;\n                moduleDecl = new ModuleDeclaration(<Identifier>name, outerModBod, new ASTList(),\n                                            new ASTList(), endingToken);\n            }\n            else {\n                moduleDecl = new ModuleDeclaration(<Identifier>name, moduleBody, this.topVarList(), this.topScopeList(), endingToken);\n                moduleDecl.preComments = preComments;\n                this.popDeclLists();\n            }\n\n            if (this.parsingDeclareFile || svAmbient || hasFlag(modifiers, Modifiers.Ambient)) {\n                moduleDecl.modFlags |= ModuleFlags.Ambient;\n            }\n            if (svAmbient || hasFlag(modifiers, Modifiers.Exported)) {\n                moduleDecl.modFlags |= ModuleFlags.Exported;\n            }\n            if (isDynamicMod) {\n                moduleDecl.modFlags |= ModuleFlags.IsDynamic;\n            }\n\n            this.ambientModule = svAmbient;\n\n            this.topLevel = svTopLevel;\n            moduleDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            moduleDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            moduleDecl.limChar = moduleBody.limChar;\n            return moduleDecl;\n        }\n\n        private parseTypeReferenceTail(errorRecoverySet: ErrorRecoverySet, minChar: number, term: AST): TypeReference {\n            var result = new TypeReference(term, 0);\n            result.minChar = minChar;\n            while (this.currentToken.tokenId == TokenID.OpenBracket) {\n                this.currentToken = this.scanner.scan();\n                result.arrayCount++;\n                this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet | ErrorRecoverySet.LBrack);\n            }\n            result.limChar = this.scanner.lastTokenLimChar();\n            return result;\n        }\n\n        // REVIEW: Consider renaming to parseTypeName.\n        private parseNamedType(errorRecoverySet: ErrorRecoverySet, minChar: number, term: AST, tail: bool): AST {\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId == TokenID.Dot) {\n                var curpos = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n                // Don\'t allow reserved words if immediately after a new line and error recovery is enabled\n                if ((this.currentToken.tokenId == TokenID.Identifier) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && convertTokToID(this.currentToken, this.strictMode))) {\n                    var op2 = Identifier.fromToken(this.currentToken);\n                    op2.minChar = this.scanner.startPos;\n                    op2.limChar = this.scanner.pos;\n                    var dotNode = new BinaryExpression(NodeType.Dot, term, op2);\n                    dotNode.minChar = term.minChar;\n                    dotNode.limChar = op2.limChar;\n                    return this.parseNamedType(errorRecoverySet, minChar,\n                                            dotNode, tail);\n                }\n                else {\n                    this.reportParseError("need identifier after \'.\'");\n                    if (this.errorRecovery) {\n                        term.flags |= ASTFlags.DotLHS;\n                        // We set "limChar" to be slightly innacurate for completion list behavior\n                        // (last AST node from "quickParse" will match DotLHS and be at end of file position)\n                        // This is to match the behavior of TokenId.Dot processing in parsePostfixOperators.\n                        term.limChar = this.scanner.las';
var v27763 = v27764 + 'tTokenLimChar();\n                        return term;\n                    }\n                    else {\n                        var eop2 = new MissingIdentifier();\n                        eop2.minChar = this.scanner.pos;\n                        eop2.limChar = this.scanner.pos;\n                        var edotNode = new BinaryExpression(NodeType.Dot, term, eop2);\n                        edotNode.flags |= ASTFlags.Error;\n                        edotNode.minChar = term.minChar;\n                        edotNode.limChar = eop2.limChar;\n                        return this.parseNamedType(errorRecoverySet, minChar,\n                                                edotNode, tail);\n                    }\n                }\n            }\n            else {\n                if (tail) {\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, term);\n                }\n                else {\n                    return term;\n                }\n            }\n        }\n\n        // REVIEW: Reconsider renaming this to parseType to match the grammar.\n        private parseTypeReference(errorRecoverySet: ErrorRecoverySet, allowVoid: bool): AST {\n            var minChar = this.scanner.startPos;\n            var isConstructorMember = false;\n\n            switch (this.currentToken.tokenId) {\n                case TokenID.Void:\n                    if (!allowVoid) {\n                        this.reportParseError("void not a valid type in this context");\n                    }\n                // Intentional fall-through\n                case TokenID.Any:\n                case TokenID.Number:\n                case TokenID.Bool:\n                case TokenID.String: {\n                    var text = tokenTable[this.currentToken.tokenId].text;\n                    var predefinedIdentifier = new Identifier(text);\n                    predefinedIdentifier.minChar = minChar;\n                    predefinedIdentifier.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, predefinedIdentifier);\n                }\n\n                case TokenID.Identifier:\n                    var ident = this.createRef(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence, minChar);\n                    ident.limChar = this.scanner.pos;\n                    return this.parseNamedType(errorRecoverySet, minChar, ident, true);\n\n                case TokenID.OpenBrace:\n                    return this.parseObjectType(minChar, errorRecoverySet);\n\n                case TokenID.New:\n                    this.currentToken = this.scanner.scan();\n                    // can\'t use chkCurrentTok, since we don\'t want to advance the token\n                    if (this.currentToken.tokenId != TokenID.OpenParen) {\n                        this.reportParseError("Expected \'(\'");\n                    }\n                    else {\n                        isConstructorMember = true;\n                        // fall through...\n                    }\n\n                case TokenID.OpenParen: {\n                    // ( formals ) => type\n                    var formals = new ASTList();\n                    var variableArgList =\n                        this.parseFormalParameterList(errorRecoverySet | ErrorRecoverySet.RParen,\n                                            formals, false, true, false, false, false, false, null, true);\n                    this.checkCurrentToken(TokenID.EqualsGreaterThan, errorRecoverySet);\n                    var returnType = this.parseTypeReference(errorRecoverySet, true);\n                    var funcDecl = new FuncDecl(null, null, false, formals, null, null, null,\n                                                NodeType.FuncDecl);\n                    funcDecl.returnTypeAnnotation = returnType;\n                    funcDecl.variableArgList = variableArgList;\n                    funcDecl.fncFlags |= FncFlags.Signature;\n\n                    if (isConstructorMember) {\n                        funcDecl.fncFlags |= FncFlags.ConstructMember;\n                        funcDecl.hint = "_construct";\n                        funcDecl.classDecl = null;\n                    }\n                    funcDecl.minChar = minChar;\n                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, funcDecl);\n                }\n\n                default:\n                    this.reportParseError("Expected type name");\n                    var etr = new TypeReference(null, 0);\n                    etr.flags |= ASTFlags.Error;\n                    etr.minChar = this.scanner.pos;\n                    etr.limChar = this.scanner.pos;\n                    return etr;\n            }\n        }\n\n        private parseObjectType(minChar: number, errorRecoverySet: ErrorRecoverySet): TypeReference {\n            this.currentToken = this.scanner.scan();\n\n            var members = new ASTList();\n            members.minChar = minChar;\n\n            var prevInInter';
var v27762 = v27763 + 'faceDecl = this.inInterfaceDecl;\n            this.inInterfaceDecl = true;\n            this.parseTypeMemberList(errorRecoverySet | ErrorRecoverySet.RCurly, members);\n            this.inInterfaceDecl = prevInInterfaceDecl;\n\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            // REVIEW: We\'re parsing an ObjectType, but we give a NodeType of Interface here.\n            var interfaceDecl = new InterfaceDeclaration(\n                this.anonId, members, /*extends:*/ null, /*implementsL*/ null);\n\n            interfaceDecl.minChar = minChar;\n            interfaceDecl.limChar = members.limChar;    // "}"\n\n            return this.parseTypeReferenceTail(errorRecoverySet, minChar, interfaceDecl);\n        }\n\n        private parseFunctionBlock(errorRecoverySet: ErrorRecoverySet,\n                                   allowedElements: AllowedElements,\n                                   parentModifiers: Modifiers,\n                                   bod: ASTList,\n                                   bodMinChar: number): void {\n            this.state = ParseState.StartStatementList;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.StmtStart);\n            var savedInFunction = this.inFunction;\n            this.inFunction = true;\n            this.parseStatementList(\n                errorRecoverySet | ErrorRecoverySet.RCurly | ErrorRecoverySet.StmtStart,\n                bod, /*sourceElements:*/ true, /*noLeadingCase:*/ false, allowedElements, parentModifiers);\n            bod.minChar = bodMinChar;\n            bod.limChar = this.scanner.pos;\n            this.inFunction = savedInFunction;\n            var ec = new EndCode();\n            ec.minChar = bod.limChar;\n            ec.limChar = ec.minChar;\n            bod.append(ec);\n        }\n\n        private parseFunctionStatements(errorRecoverySet: ErrorRecoverySet,\n                                        name: Identifier,\n                                        isConstructor: bool,\n                                        isMethod: bool,\n                                        args: ASTList,\n                                        allowedElements: AllowedElements,\n                                        minChar: number,\n                                        requiresSignature: bool,\n                                        parentModifiers: Modifiers) {\n\n            this.pushDeclLists();\n            // start new statement stack\n            var svStmtStack = this.statementInfoStack;\n            this.resetStmtStack();\n\n            var bod: ASTList = null;\n            var wasShorthand = false;\n            var isAnonLambda = false;\n            var limChar: number;\n\n            if (requiresSignature) {\n                // If we require a signature, but they provided a block, then give an error, but\n                // still consume the block.\n                limChar = this.scanner.pos;\n                if (this.currentToken.tokenId === TokenID.OpenBrace) {\n                    this.reportParseError("Function declarations are not permitted within interfaces, ambient modules or classes")\n                    bod = new ASTList();\n                    var bodMinChar = this.scanner.startPos;\n\n                    this.parseFunctionBlock(errorRecoverySet, allowedElements, parentModifiers, bod, bodMinChar);\n                    this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n                    // If there\'s also a semicolon, then just skip over it.  We don\'t want to report an \n                    // additional error here.\n                    if (this.currentToken.tokenId === TokenID.Semicolon) {\n                        this.currentToken = this.scanner.scan();\n                    }\n                }\n                else {\n                    this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet, "Expected \';\'");\n                }\n            }\n            else {\n                bod = new ASTList();\n                var bodMinChar = this.scanner.startPos;\n                if (this.currentToken.tokenId == TokenID.EqualsGreaterThan) {\n                    if (isMethod) {\n                        this.reportParseError("\'=>\' may not be used for class methods");\n                    }\n                    wasShorthand = true;\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (wasShorthand && this.currentToken.tokenId != TokenID.OpenBrace) {\n                    var retExpr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                            OperatorPrecedence.Assignment, true,\n                                            TypeContext.NoTypes);\n                    var retStmt = new ReturnStatement();\n                    retStmt.returnExpression = retExpr;\n                    retStmt.minChar = retExpr.minChar;\n                    retStmt.limChar = retExpr.limChar;\n                    bod.minChar = bodMinChar;\n                    bod.append(retStmt);\n ';
var v27761 = v27762 + '               }\n                else {\n                    isAnonLambda = wasShorthand;\n                    this.parseFunctionBlock(errorRecoverySet, allowedElements, parentModifiers, bod, bodMinChar);\n                }\n\n                limChar = this.scanner.pos;\n            }\n\n            var funcDecl = new FuncDecl(name, bod, isConstructor, args, this.topVarList(),\n                                        this.topScopeList(), this.topStaticsList(), NodeType.FuncDecl);\n            this.popDeclLists();\n            var scopeList = this.topScopeList();\n            scopeList.append(funcDecl);\n            var staticFuncDecl = false;\n\n            if (!requiresSignature) {\n                if (!wasShorthand || isAnonLambda) {\n                    funcDecl.endingToken = new ASTSpan();\n                    funcDecl.endingToken.minChar = this.scanner.startPos;\n                    funcDecl.endingToken.limChar = this.scanner.pos;\n                    this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n                    if (isAnonLambda) {\n                        funcDecl.fncFlags |= FncFlags.IsFatArrowFunction;\n                    }\n                }\n                else {\n                    funcDecl.fncFlags |= FncFlags.IsFatArrowFunction;\n                    funcDecl.endingToken = new ASTSpan();\n\n                    funcDecl.endingToken.minChar = bod.members[0].minChar;\n                    funcDecl.endingToken.limChar = bod.members[0].limChar;\n                }\n            }\n            funcDecl.minChar = minChar;\n            funcDecl.limChar = limChar;\n\n            if (!requiresSignature) {\n                funcDecl.fncFlags |= FncFlags.Definition;\n            }\n\n            this.statementInfoStack = svStmtStack;\n            return funcDecl;\n        }\n\n        private transformAnonymousArgsIntoFormals(formals: ASTList, argList: AST) : bool {\n\n            var translateBinExOperand = (operand: AST) : bool => {\n                if (operand.nodeType == NodeType.Comma) {\n                    return this.transformAnonymousArgsIntoFormals(formals, operand);\n                }\n                else if (operand.nodeType == NodeType.Name || operand.nodeType == NodeType.Asg) {\n                    var opArg = operand.nodeType == NodeType.Asg ? (<BinaryExpression>operand).operand1 : operand;\n\n                    var arg = new ArgDecl(<Identifier>opArg);\n                    arg.preComments = opArg.preComments;\n                    arg.postComments = opArg.postComments;\n                    arg.minChar = operand.minChar;\n                    arg.limChar = operand.limChar;\n\n                    if (hasFlag(opArg.flags, ASTFlags.PossibleOptionalParameter)) {\n                        arg.isOptional = true;\n                    }\n\n                    if (operand.nodeType == NodeType.Asg) {\n                        arg.init = (<BinaryExpression>operand).operand2;\n                    }\n\n                    formals.append(arg);\n\n                    return arg.isOptional || arg.init;\n                }\n                else {\n                    this.reportParseError("Invalid lambda argument");\n                }\n                return false;\n            }\n\n            if (argList) {\n                if (argList.nodeType == NodeType.Comma) {\n                    var commaList = <BinaryExpression> argList;\n                    if (commaList.operand1.isParenthesized) { \n                        this.reportParseError("Invalid lambda argument", commaList.operand1.minChar, commaList.operand1.limChar);\n                    }\n                    if (commaList.operand2.isParenthesized) { \n                        this.reportParseError("Invalid lambda argument", commaList.operand2.minChar, commaList.operand2.limChar);\n                    }\n                    var isOptional = translateBinExOperand(commaList.operand1);\n                    isOptional = translateBinExOperand(commaList.operand2) || isOptional;\n                    return isOptional;\n                }\n                else {\n                    return translateBinExOperand(argList);\n                }\n            }\n        }\n\n        private parseFormalParameterList(errorRecoverySet: ErrorRecoverySet,\n                                            formals: ASTList,\n                                            isClassConstr: bool,\n                                            isSig: bool,\n                                            isIndexer: bool,\n                                            isGetter: bool,\n                                            isSetter: bool,\n                                            isLambda: bool,\n                                            preProcessedLambdaArgs: AST,\n                                            expectClosingRParen: bool): bool \n        {\n\n            formals.minChar = this.scanner.startPos; // \'(\' or \'[\'\n            if (isIndexer) {\n                this.currentToken = this.scanner.scan();\n            }\n            else if (!isLambda) {\n                this.ch';
var v27760 = v27761 + 'eckCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.RParen);\n            }\n            var sawEllipsis = false;\n            var firstArg = true;\n            var hasOptional = false;\n            var haveFirstArgID = false;\n\n            // if preProcessedLambdaArgs is "true", we either have a typeless argument list, or we have\n            // a single identifier node and the current token is the \':\' before a typereference\n            if (isLambda && preProcessedLambdaArgs && preProcessedLambdaArgs.nodeType != NodeType.EmptyExpr) {\n                hasOptional = this.transformAnonymousArgsIntoFormals(formals, preProcessedLambdaArgs);\n                haveFirstArgID = true;\n            }\n\n            while (true) {\n                var munchedArg = false;\n                var argFlags = VarFlags.None;\n                var argMinChar = this.scanner.startPos;\n\n                if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TokenID.This) {\n                    if (!isClassConstr) {\n                        this.reportParseError("Instance property declarations using \'this\' may only be used in class constructors");\n                    }\n                    this.currentToken = this.scanner.scan(); // consume the \'.\'\n\n                    argFlags |= (VarFlags.Public | VarFlags.Property);\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.Public) {\n                    argFlags |= (VarFlags.Public | VarFlags.Property);\n\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Private) {\n                    argFlags |= (VarFlags.Private | VarFlags.Property);\n\n                    if (this.currentClassDefinition) {\n                        this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Static && isClassConstr) {\n                    this.reportParseError("Static properties can not be declared as parameter properties");\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (argFlags != VarFlags.None) {\n                    if (!isClassConstr) {\n                        this.reportParseError("only constructor parameters can be properties");\n                    }\n                    this.currentToken = this.scanner.scan();\n\n                    if (isModifier(this.currentToken)) { \n                        this.reportParseError("Multiple modifiers may not be applied to parameters");\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == TokenID.This) {\n                        if (!isClassConstr) {\n                            this.reportParseError("Instance property declarations using \'this\' may only be used in class constructors");\n                        }\n                        this.currentToken = this.scanner.scan(); // consume the \'.\'\n                        this.currentToken = this.scanner.scan();\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.DotDotDot) {\n                    sawEllipsis = true;\n                    this.currentToken = this.scanner.scan();\n\n                    if (!(this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                        this.reportParseError("\'...\' parameters require both a parameter name and an array type annotation to be specified");\n                        sawEllipsis = false; // Do not treat this parameter as vararg\n                    }\n                }\n\n                var argId: Identifier = null;\n\n                if (!haveFirstArgID && (this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                    argId = Identifier.fromToken(this.currentToken);\n                    argId.minChar = this.scanner.startPos;\n                    argId.limChar = this.scanner.pos;\n                }\n\n                if (haveFirstArgID || argId) {\n                    munchedArg = true;\n                    var type: AST = null;\n                    var arg: ArgDecl = null;\n\n                    if (haveFirstArgID && formals.members.length) {\n                        arg = <ArgDecl>formals.members[formals.members.length - 1];\n\n                        if (arg.isOptional) {\n                            hasOptional = true;\n                        }\n                    }\n         ';
var v27759 = v27760 + '           else {\n                        arg = new ArgDecl(argId);\n\n                        if (isGetter) {\n                            this.reportParseError("Property getters may not take any arguments");\n                        }\n\n                        if (isSetter && !firstArg) {\n                            this.reportParseError("Property setters may only take one argument");\n                        }\n\n                        arg.minChar = argMinChar;\n                        arg.preComments = this.parseComments();\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.Question) {\n                        arg.isOptional = true;\n                        hasOptional = true;\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.Colon) {\n                        this.currentToken = this.scanner.scan();\n                        type = this.parseTypeReference(errorRecoverySet, false);\n                    }\n\n                    // check for default parameter\n                    // REVIEW: In the case of a typed reference, assume that parseTypeReference or one\n                    // of its children in the call graph advanced tok\n                    if (this.currentToken.tokenId == TokenID.Equals) {\n                        if (isSig) {\n                            this.reportParseError("Arguments in signatures may not have default values");\n                        }\n\n                        hasOptional = true;\n                        this.currentToken = this.scanner.scan();\n                        arg.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                            OperatorPrecedence.Comma, false,\n                                            TypeContext.NoTypes);\n\n                    }\n\n                    if (hasOptional && !arg.isOptionalArg() && !sawEllipsis) {\n                        this.reportParseError("Optional parameters may only be followed by other optional parameters");\n                    }\n\n                    if (sawEllipsis && arg.isOptionalArg()) {\n                        this.reportParseError("Varargs may not be optional or have default parameters");\n                    }\n\n                    if (sawEllipsis && !type) {\n                        // Ellipsis is missing a type definition\n                        this.reportParseError("\'...\' parameters require both a parameter name and an array type annotation to be specified");\n                    }\n\n                    // REVIEW: Ok for lambdas?\n                    arg.postComments = this.parseComments();\n                    arg.typeExpr = type;\n                    arg.limChar = this.scanner.lastTokenLimChar();\n                    arg.varFlags |= argFlags;\n                    if (!haveFirstArgID) {\n                        formals.append(arg);\n                    }\n                    else {\n                        haveFirstArgID = false;\n                    }\n                }\n                firstArg = false;\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    if ((munchedArg) && (!sawEllipsis)) {\n                        this.currentToken = this.scanner.scan();\n                        continue;\n                    }\n                    else {\n                        this.reportParseError("Unexpected \',\' in argument list");\n                        if (this.errorRecovery) {\n                            this.currentToken = this.scanner.scan();\n                            continue;\n                        }\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n\n            if (isIndexer) {\n                this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet | ErrorRecoverySet.LCurly | ErrorRecoverySet.SColon);\n            }\n            else if (expectClosingRParen) {\n                this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly | ErrorRecoverySet.SColon);\n            }\n            formals.limChar = this.scanner.lastTokenLimChar(); // \')\' or \']\'\n            return sawEllipsis;\n        }\n\n        private parseFncDecl(errorRecoverySet: ErrorRecoverySet,\n                             isDecl: bool,\n                             requiresSignature: bool,\n                             isMethod: bool,\n                             methodName: Identifier,\n                             indexer: bool,\n                             isStatic: bool,\n                             markedAsAmbient: bool,\n                             modifiers: Modifiers,\n                             lambdaArgContext: ILambdaArgumentContext,\n                             expectClosingRParen: bool): AST {\n\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyC';
var v27758 = v27759 + 'ount;\n\n            var prevInConstr = this.parsingClassConstructorDefinition;\n            this.parsingClassConstructorDefinition = false;\n\n            var name: Identifier = null;\n            var fnMin = this.scanner.startPos;\n            var minChar = this.scanner.pos;\n            var prevNestingLevel = this.nestingLevel;\n            var preComments = this.parseComments();\n            var isLambda = !!lambdaArgContext;\n            this.nestingLevel = 0;\n            if ((!this.style_funcInLoop) && this.inLoop()) {\n                this.reportParseStyleError("function declaration in loop");\n            }\n            if (!isMethod && !isStatic && !indexer && !lambdaArgContext) {\n                // past function keyword\n                this.currentToken = this.scanner.scan();\n                this.state = ParseState.StartFncDecl;\n                if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToID(this.currentToken, this.strictMode))) {\n                    if (isDecl) {\n                        this.reportParseError("Function declaration must include identifier");\n\n                        this.nestingLevel = prevNestingLevel;\n                        return new IncompleteAST(fnMin, this.scanner.pos);\n                    }\n                }\n                else {\n                    name = Identifier.fromToken(this.currentToken);\n                    name.minChar = this.scanner.startPos;\n                    name.limChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n            else {\n                if (methodName) {\n                    name = methodName;\n                }\n            }\n\n            this.state = ParseState.FncDeclName;\n            var args: ASTList = new ASTList();\n            var variableArgList = false;\n            var isOverload = false;\n            var isGetter = hasFlag(modifiers, Modifiers.Getter);\n            var isSetter = hasFlag(modifiers, Modifiers.Setter);\n            if ((this.currentToken.tokenId == TokenID.OpenParen) || (indexer && (this.currentToken.tokenId == TokenID.OpenBracket)) || (lambdaArgContext && (lambdaArgContext.preProcessedLambdaArgs || this.currentToken.tokenId == TokenID.DotDotDot))) {\n                // arg list\n                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, false, requiresSignature, indexer, isGetter, isSetter, isLambda, lambdaArgContext ? lambdaArgContext.preProcessedLambdaArgs : null, expectClosingRParen);\n            }\n            this.state = ParseState.FncDeclArgs;\n            var returnType: AST = null;\n            if (this.currentToken.tokenId == TokenID.Colon) {\n                this.currentToken = this.scanner.scan();\n                if (hasFlag(modifiers, Modifiers.Setter)) {\n                    this.reportParseError("Property setters may not declare a return type");\n                }\n                returnType = this.parseTypeReference(errorRecoverySet, true);\n            }\n\n            if (indexer && args.members.length == 0) {\n                this.reportParseError("Index signatures require a parameter type to be specified");\n            }\n            this.state = ParseState.FncDeclReturnType;\n\n            if (isLambda && this.currentToken.tokenId != TokenID.EqualsGreaterThan) {\n                this.reportParseError("Expected \'=>\'");\n            }\n\n            // REVIEW:\n            // Currently, it\'s imperative that ambient functions *not* be marked as overloads.  At some point, we may\n            // want to unify the two concepts internally\n            if (isDecl && !(this.parsingDeclareFile || markedAsAmbient) && (!isMethod || !(this.ambientModule || this.ambientClass || this.inInterfaceDecl)) && this.currentToken.tokenId == TokenID.Semicolon) {\n                isOverload = true;\n                isDecl = false;\n                requiresSignature = true;\n            }\n            var svInFncDecl = this.inFncDecl;\n            this.inFncDecl = true;\n            var funcDecl: FuncDecl =\n                this.parseFunctionStatements(\n                errorRecoverySet | ErrorRecoverySet.RCurly,\n                name, /*isConstructor:*/ false, isMethod, args, AllowedElements.None,\n                minChar, requiresSignature, Modifiers.None);\n\n            this.inFncDecl = svInFncDecl;\n            funcDecl.variableArgList = variableArgList;\n            funcDecl.isOverload = isOverload;\n\n            if (!requiresSignature) { // REVIEW: What\'s the point of this?  Why not just use \'Signature\' instead of \'Definition\'?\n                funcDecl.fncFlags |= FncFlags.Definition;\n            }\n\n            if (isStatic) {\n                funcDecl.fncFlags |= FncFlags.Static;\n            }\n\n            if (requiresSignature) {\n                funcDecl.fncFlags |= FncFlags.Signature;\n            }\n            if (indexer) {\n                funcDecl.fncFlags |= FncFlags.IndexerMember;\n            }\n            funcDecl.returnTypeAnnotation = returnType;';
var v27757 = v27758 + '\n            if (isMethod) {\n                funcDecl.fncFlags |= FncFlags.Method;\n                // all class property methods are currently exported\n                funcDecl.fncFlags |= FncFlags.ClassPropertyMethodExported;\n            }\n            funcDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            funcDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n\n            this.nestingLevel = prevNestingLevel;\n            this.parsingClassConstructorDefinition = prevInConstr;\n            funcDecl.preComments = preComments;\n            return funcDecl;\n        }\n\n        private convertToTypeReference(ast: AST): TypeReference {\n            var result: TypeReference;\n            switch (ast.nodeType) {\n                case NodeType.TypeRef:\n                    return <TypeReference>ast;\n                case NodeType.Name:\n                    result = new TypeReference(ast, 0);\n                    result.minChar = ast.minChar;\n                    result.limChar = ast.limChar;\n                    return result;\n                case NodeType.Index: {\n                    var expr = <BinaryExpression>ast;\n                    result = this.convertToTypeReference(expr.operand1);\n                    if (result) {\n                        result.arrayCount++;\n                        result.minChar = expr.minChar;\n                        result.limChar = expr.limChar;\n                        return result;\n                    }\n                    else {\n                        var etr = <TypeReference>new AST(NodeType.Error);\n                        return etr;\n                    }\n                }\n            }\n            return null;\n        }\n\n        private parseArgList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var args: ASTList = new ASTList();\n            args.minChar = this.scanner.startPos;\n\n            // skip left paren\n            this.currentToken = this.scanner.scan();\n\n            if (this.currentToken.tokenId !== TokenID.CloseParen) {\n                while (true) {\n                    if (args.members.length > 0xffff) {\n                        this.reportParseError("max number of args exceeded");\n                        break;\n                    }\n\n                    var arg = this.parseExpr(\n                        ErrorRecoverySet.Comma | errorRecoverySet,\n                        OperatorPrecedence.Comma, \n                        /*allowIn:*/ true,\n                        TypeContext.NoTypes);\n\n                    args.append(arg);\n                    if (this.currentToken.tokenId != TokenID.Comma) {\n                        break;\n                    }\n\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n\n            args.limChar = this.scanner.pos;\n            return args;\n        }\n\n        private parseBaseList(extendsList: ASTList,\n                              implementsList: ASTList,\n                              errorRecoverySet: ErrorRecoverySet,\n                              isClass: bool): void {\n            var keyword = true;\n            var currentList = extendsList;\n            for (; ;) {\n                if (keyword) {\n                    if (this.currentToken.tokenId === TokenID.Implements) {\n                        currentList = implementsList;\n                    }\n                    else if (this.currentToken.tokenId == TokenID.Extends && !this.requiresExtendsBlock) {\n                        this.requiresExtendsBlock = isClass;\n                    }\n                    this.currentToken = this.scanner.scan();\n                    keyword = false;\n                }\n                var baseName: Identifier = null;\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                    var minChar = this.scanner.startPos;\n                    baseName = Identifier.fromToken(this.currentToken);\n                    baseName.minChar = minChar;\n                    baseName.limChar = this.scanner.pos;\n                    baseName = <Identifier>this.parseNamedType(errorRecoverySet | ErrorRecoverySet.LCurly,\n                                            minChar, baseName, false);\n                }\n                else {\n                    this.reportParseError("Expected base name");\n                    if (this.errorRecovery) {\n                        baseName = new MissingIdentifier();\n                        baseName.minChar = this.scanner.pos;\n                        baseName.limChar = this.scanner.pos;\n                        baseName.flags |= ASTFlags.Error;\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.OpenParen) {\n                    if (isClass) {\n                        this.reportParseError("Base classes may only be initialized via a \'super\' call within the constructor body");\n                    }\n                    else {\n                        th';
var v27756 = v27757 + 'is.reportParseError("Interfaces may not be extended with a call expression");\n                    }\n                }\n                else {\n                    currentList.append(baseName);\n                }\n\n                if (isClass && currentList == extendsList && extendsList.members.length > 1) {\n                    this.reportParseError("A class may only extend one other class");\n                }\n\n                if (this.currentToken.tokenId == TokenID.Comma) {\n                    this.currentToken = this.scanner.scan();\n                    continue;\n                }\n\n                else if ((this.currentToken.tokenId == TokenID.Extends) ||\n                         (this.currentToken.tokenId == TokenID.Implements)) {\n\n                    if (this.currentToken.tokenId == TokenID.Extends && !this.requiresExtendsBlock) {\n                        this.requiresExtendsBlock = isClass;\n                    }\n\n                    currentList = extendsList;\n                    keyword = true;\n                    continue;\n                }\n\n                break;\n            }\n        }\n\n        private parseClassDecl(errorRecoverySet: ErrorRecoverySet, minChar: number, modifiers: Modifiers): ClassDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            if ((modifiers & Modifiers.Readonly) != Modifiers.None) {\n                this.reportParseError("const modifier is implicit for class");\n            }\n\n            // mark the class as ambient, as necessary\n            if (this.parsingDeclareFile || this.ambientModule) {\n                modifiers |= Modifiers.Ambient;\n                modifiers |= Modifiers.Exported;\n            }\n            var classIsMarkedAsAmbient = this.parsingDeclareFile || (modifiers & Modifiers.Ambient) != Modifiers.None;\n            var svAmbientClass = this.ambientClass;\n            this.ambientClass = classIsMarkedAsAmbient;\n\n            // grab the class\'s name\n            this.currentToken = this.scanner.scan();\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode)) ) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("class missing name");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.pos;\n                    name.limChar = this.scanner.pos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var extendsList: ASTList = null;\n            var implementsList: ASTList = null;\n            var requiresSignature = false;\n\n            if ((this.currentToken.tokenId == TokenID.Extends) ||\n                (this.currentToken.tokenId == TokenID.Implements)) {\n                extendsList = new ASTList();\n                implementsList = new ASTList();\n                this.parseBaseList(extendsList, implementsList, errorRecoverySet, /*isClass:*/ true);\n            }\n\n            // REVIEW: Note that we don\'t set this as the current class decl\n            var classDecl = new ClassDeclaration(name, new ASTList(), extendsList, implementsList);\n\n            this.currentClassDefinition = classDecl;\n\n            // parse the classes members\n            this.parseClassElements(classDecl, errorRecoverySet, modifiers);\n\n            if (this.ambientModule || this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Exported)) {\n                classDecl.varFlags |= VarFlags.Exported;\n            }\n\n            if (this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                classDecl.varFlags |= VarFlags.Ambient;\n            }\n\n            classDecl.varFlags |= VarFlags.Class;\n\n            this.ambientClass = svAmbientClass;\n            classDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            classDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return classDecl;\n        }\n\n        private parseClassElements(classDecl: ClassDeclaration, errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers) {\n            var modifiers = parentModifiers;\n            var resetModifiers = false;\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet);\n\n            this.nestingLevel++;\n\n            var currentMemberMinChar = this.scanner.startPos;\n            var wasGetOrSetId = false;\n\n            while (!(this.currentToken.tokenId == TokenID.CloseBrace || this.currentToken.tokenId == TokenID.EndOfFile)) {\n                var scanNext = true;';
var v27755 = v27756 + '\n                var publicOrPrivateFlags = Modifiers.Public | Modifiers.Private;\n\n                // modifiers\n                if (this.currentToken.tokenId == TokenID.Get) {\n                    if (modifiers & Modifiers.Getter) {\n                        this.reportParseError("Duplicate \'get\' declaration in class body");\n                    }\n                    if (modifiers & Modifiers.Setter) {\n                        this.reportParseError("Getter already marked as a setter");\n                    }\n                    modifiers |= Modifiers.Getter;\n                }\n                else if (this.currentToken.tokenId == TokenID.Set) {\n                    if (modifiers & Modifiers.Setter) {\n                        this.reportParseError("Duplicate \'set\' declaration in class body");\n                    }\n                    if (modifiers & Modifiers.Getter) {\n                        this.reportParseError("Setter already marked as a getter");\n                    }\n                    modifiers |= Modifiers.Setter;\n\n                }\n                else if (this.currentToken.tokenId == TokenID.Private) {\n                    if (modifiers & publicOrPrivateFlags) {\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Private;\n                }\n                else if (this.currentToken.tokenId == TokenID.Public) {\n                    if (modifiers & publicOrPrivateFlags) {\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Public;\n                }\n                else if (this.currentToken.tokenId == TokenID.Static) {\n                    if (modifiers & Modifiers.Static) { // only check for double instances of static\n                        this.reportParseError("Multiple modifiers may not be applied to class members");\n                    }\n                    modifiers |= Modifiers.Static;\n                }  // constructors\n                else if (this.currentToken.tokenId == TokenID.Constructor) {\n\n                    if (modifiers != parentModifiers) {\n                        this.reportParseError("Constructors may not have modifiers");\n                    }\n\n                    this.parseClassConstructorDeclaration(currentMemberMinChar, errorRecoverySet, modifiers);\n                    scanNext = false; // parsing functions advances the token for us\n                    resetModifiers = true;\n                }  // member declarations\n                else if (wasGetOrSetId || this.currentToken.tokenId == TokenID.Identifier || convertTokToIDName(this.currentToken)) {\n\n                    var idText = wasGetOrSetId ? ((modifiers & Modifiers.Getter) ? "get" : "set") : this.currentToken.getText();\n                    var id = wasGetOrSetId ? new Identifier(idText) : Identifier.fromToken(this.currentToken);\n                    id.minChar = this.scanner.startPos;\n                    id.limChar = this.scanner.pos;\n\n                    // unset the get/set bit, if we\'re using it for an id\n                    if (wasGetOrSetId) {\n                        modifiers = modifiers ^ ((modifiers & Modifiers.Getter) ? Modifiers.Getter : Modifiers.Setter);\n                        wasGetOrSetId = false;\n                    }\n                    else {\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        this.parseClassMemberFunctionDeclaration(id, currentMemberMinChar, errorRecoverySet, modifiers);\n                        scanNext = false; // parsing functions advances the token for us\n                    }\n                    else {\n                        if (modifiers & Modifiers.Getter || modifiers & Modifiers.Setter) {\n                            this.reportParseError("Property accessors must be functions");\n                        }\n\n                        var varDecl = this.parseClassMemberVariableDeclaration(id, currentMemberMinChar, false, errorRecoverySet, modifiers);\n\n                        if (varDecl.init && varDecl.init.nodeType == NodeType.FuncDecl) {\n                            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                                scanNext = false;\n                            }\n                        }\n                        else if (varDecl.init && varDecl.init.nodeType == NodeType.ObjectLit && this.currentToken.tokenId != TokenID.Semicolon) {\n                            scanNext = false;\n                            varDecl.init.flags |= ASTFlags.AutomaticSemicolon;\n                        }\n                        else if (this.currentToken.tokenId != TokenID.Semicolon) {\n                            this.reportParseError("Expected \';\'");\n                            scanNext = false;\n                        }';
var v27754 = v27755 + "\n                    }\n\n                    resetModifiers = true;\n                } // catch errant uses of 'super'\n                else if (this.currentToken.tokenId == TokenID.Super) {\n                    this.reportParseError(\"Base class initializers must be the first statement in a class definition\");\n                }\n                else if (!wasGetOrSetId && ((modifiers & Modifiers.Getter) || (modifiers & Modifiers.Setter)) &&\n                         ((this.currentToken.tokenId == TokenID.OpenParen) || (this.currentToken.tokenId == TokenID.Equals) ||\n                          (this.currentToken.tokenId == TokenID.Colon) || (this.currentToken.tokenId == TokenID.Semicolon))) {\n                             // catch a 'get' or 'set' used as an identifier\n                    wasGetOrSetId = true;\n                    scanNext = false;\n\n                }  // mark anything else as an error\n                else if (this.currentToken.tokenId != TokenID.Semicolon) { // jettison semicolons\n                    this.reportParseError(\"Unexpected '\" + this.currentToken.getText() + \"' in class definition\");\n                    resetModifiers = true;\n                }\n\n                if (scanNext) {\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (resetModifiers) {\n                    modifiers = parentModifiers;\n                    currentMemberMinChar = this.scanner.startPos;\n                    resetModifiers = false;\n                }\n            }\n\n            var membersLimChar = this.scanner.pos;\n            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                classDecl.endingToken = new ASTSpan();\n                classDecl.endingToken.minChar = this.scanner.startPos;\n                classDecl.endingToken.limChar = this.scanner.pos;\n\n                // for a class with an empty body, consume any 'dangling' inner comments\n                if (!this.currentClassDefinition.members.members.length) {\n                    this.currentClassDefinition.preComments = this.parseComments();\n                }\n\n                this.currentToken = this.scanner.scan();\n            }\n\n            this.nestingLevel--;\n\n            this.currentClassDefinition.members.minChar = membersMinChar;\n            this.currentClassDefinition.members.limChar = membersLimChar;\n            this.currentClassDefinition.limChar = membersLimChar;\n            this.currentClassDefinition = null;\n        }\n\n        private parseClassConstructorDeclaration(minChar: number, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n            this.parsingClassConstructorDefinition = true;\n\n            var isAmbient = this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient);\n\n            var args: ASTList = new ASTList();\n            var variableArgList = false;\n            var preComments = this.parseComments();\n\n            this.currentToken = this.scanner.scan(); // scan past the 'constructor' token\n\n            if (this.currentToken.tokenId == TokenID.OpenParen) {\n                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, true, isAmbient, false, false, false, false, null, true);\n                if (args.members.length > 0) {\n                    var lastArg = args.members[args.members.length - 1];\n                }\n            }\n\n            var requiresSignature = isAmbient || this.currentToken.tokenId == TokenID.Semicolon;\n\n\n            if (requiresSignature) {\n                for (var i = 0; i < args.members.length; i++) {\n                    var arg = <ArgDecl> args.members[i];\n                    if (hasFlag(arg.varFlags, VarFlags.Property)) {\n                        this.reportParseError(\"Overload or ambient signatures may not specify parameter properties\", arg.minChar, arg.limChar);\n                    }\n                }\n            }\n\n            if (!requiresSignature) {\n                this.currentClassDefinition.constructorNestingLevel = this.nestingLevel + 1;\n            }\n\n            var constructorFuncDecl = this.parseFunctionStatements(\n                errorRecoverySet | ErrorRecoverySet.RCurly, this.currentClassDefinition.name, \n                /*isConstructor:*/ true, /*isMethod:*/ false, args, AllowedElements.Properties, \n                minChar, requiresSignature, modifiers);\n\n            constructorFuncDecl.preComments = preComments;\n\n            if (requiresSignature && !isAmbient) {\n                constructorFuncDecl.isOverload = true;\n            }\n\n            constructorFuncDecl.variableArgList = variableArgList;\n            this.currentClassDecl = null;\n            constructorFuncDecl.returnTypeAnnotation = this.convertToTypeReference(this.currentClassDefinition.name);\n            constructorFuncDecl.classDecl = this.currentClassDefinition;\n\n            if (isAmbient) {\n                constructorFuncDecl.fncFlags |= FncFlags.Ambient;\n            }\n\n            if (requiresSignature) {\n                constructorF";
var v27753 = v27754 + 'uncDecl.fncFlags |= FncFlags.Signature;\n            }\n\n            if (this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                constructorFuncDecl.fncFlags |= FncFlags.Exported;\n            }\n\n\n            if (this.currentClassDefinition.constructorDecl) {\n                if (!isAmbient && !this.currentClassDefinition.constructorDecl.isSignature() && !constructorFuncDecl.isSignature()) {\n                    this.reportParseError("Duplicate constructor definition");\n                }\n            }\n\n            if (isAmbient || !constructorFuncDecl.isSignature()) {\n                this.currentClassDefinition.constructorDecl = constructorFuncDecl;\n            }\n\n            // REVIEW: Should we have a separate flag for class constructors?  (Constructors are not methods)\n            constructorFuncDecl.fncFlags |= FncFlags.ClassMethod;\n\n            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = constructorFuncDecl;\n\n            this.parsingClassConstructorDefinition = false;\n\n            return constructorFuncDecl;\n        }\n\n        private parseClassMemberVariableDeclaration(text: Identifier, minChar: number, isDeclaredInConstructor: bool, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n\n            var varDecl = new VarDecl(text, this.nestingLevel);\n            varDecl.minChar = minChar;\n            var isStatic = false;\n            varDecl.preComments = this.parseComments();\n\n            if (this.currentToken.tokenId == TokenID.Colon) {\n                this.currentToken = this.scanner.scan();\n                varDecl.typeExpr =\n                    this.parseTypeReference(errorRecoverySet | ErrorRecoverySet.Asg | ErrorRecoverySet.Comma, false);\n                if (varDecl.typeExpr && varDecl.typeExpr.nodeType == NodeType.TypeRef) {\n                    var typeExpr = (<TypeReference>varDecl.typeExpr);\n                    if (typeExpr.term && typeExpr.term.nodeType == NodeType.FuncDecl) {\n                        typeExpr.term.preComments = varDecl.preComments;\n                    }\n                }\n            }\n\n            if (this.currentToken.tokenId == TokenID.Equals) {\n                if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                    this.reportParseError("context does not permit variable initializer");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        varDecl.flags |= ASTFlags.Error;\n                        varDecl.limChar = this.scanner.lastTokenLimChar();\n                        return varDecl;\n                    }\n                }\n\n                // TODO: note assignment for language service\n                this.currentToken = this.scanner.scan();\n\n                varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                        OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n\n                varDecl.limChar = varDecl.init.limChar;\n\n                // member initializers on instance properties require that super be invoked as the first call within the constructor\n                if (!(modifiers & Modifiers.Static)) {\n                    this.currentClassDefinition.varFlags |= VarFlags.ClassSuperMustBeFirstCallInConstructor;\n                }\n            }\n            else {\n                varDecl.limChar = this.scanner.pos;\n            }\n\n            if (modifiers & Modifiers.Static) {\n                varDecl.varFlags |= VarFlags.Static;\n                isStatic = true;\n            }\n\n            if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                varDecl.varFlags |= VarFlags.Private;\n            }\n            else {\n                varDecl.varFlags |= VarFlags.Public;\n            }\n\n            varDecl.varFlags |= VarFlags.Property;\n\n            if (isDeclaredInConstructor) {\n                varDecl.varFlags |= VarFlags.ClassConstructorProperty;\n            }\n\n            if (!isDeclaredInConstructor && !isStatic) {\n                varDecl.varFlags |= VarFlags.ClassBodyProperty;\n            }\n\n            this.currentClassDefinition.knownMemberNames[text.actualText] = true;\n\n            if (!isDeclaredInConstructor) {\n                this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = varDecl;\n            }\n\n            varDecl.postComments = this.parseComments();\n            return varDecl;\n        }\n\n        private parseClassMemberFunctionDeclaration(methodName: Identifier, minChar: number, errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers) {\n            var wasAccessorID = this.prevIDTok != null;\n            var isAccessor = hasFlag(modifiers, Modifiers.Getter) || hasFlag(modifiers, Modifiers.Setter);\n            var isStatic = hasFlag(modifiers, Modifiers.Static);\n\n            var isAmbient = this.ambientModule || hasFlag(modifiers, Modifiers.Ambient);\n\n            er';
var v27752 = v27753 + 'rorRecoverySet |= ErrorRecoverySet.RParen;\n\n            if (isAccessor && (modifiers & Modifiers.Ambient)) {\n                this.reportParseError("Property accessors may not be declared in ambient classes");\n            }\n\n            // REVIEW: Why bother passing in isAmbient for both requiresSignature and isAmbient?  Shouldn\'t just saying its ambient suffice?\n            var ast: AST = this.parseFncDecl(errorRecoverySet, true, isAmbient, true, methodName, false, isStatic, isAmbient, modifiers, null, true);\n            if (ast.nodeType == NodeType.Error) {\n                return ast;\n            }\n\n            var funcDecl = <FuncDecl>ast;\n\n            funcDecl.minChar = minChar;\n            if (funcDecl.bod !== null)\n                funcDecl.limChar = funcDecl.bod.limChar;\n\n            if (modifiers & Modifiers.Private) {\n                funcDecl.fncFlags |= FncFlags.Private;\n            }\n            else {\n                funcDecl.fncFlags |= FncFlags.Public;\n            }\n\n            if (isStatic) {\n                funcDecl.fncFlags |= FncFlags.Static;\n            }\n\n            if (isAccessor) {\n                // REVIEW: verify return-type annotations and arguments\n                if (hasFlag(modifiers, Modifiers.Getter)) {\n                    funcDecl.fncFlags |= FncFlags.GetAccessor;\n                    funcDecl.hint = "get" + funcDecl.name.actualText;\n                }\n                else {\n                    funcDecl.fncFlags |= FncFlags.SetAccessor;\n                    funcDecl.hint = "set" + funcDecl.name.actualText;\n                }\n                funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n                if (codeGenTarget < CodeGenTarget.ES5) {\n                    this.reportParseError("Property accessors are only available when targeting ES5 or greater", funcDecl.minChar, funcDecl.limChar);\n                }\n            }\n\n            funcDecl.fncFlags |= FncFlags.ClassMethod;\n\n            this.currentClassDefinition.knownMemberNames[methodName.actualText] = true;\n\n            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = funcDecl;\n\n            return funcDecl;\n        }\n\n        private parseTypeMember(errorRecoverySet: ErrorRecoverySet): AST {\n            var minChar = this.scanner.startPos;\n\n            var propertyDecl = this.parsePropertyDeclaration(\n                errorRecoverySet, Modifiers.Public, /*requireSignature:*/ true, /*isStatic:*/ false);\n\n            if (propertyDecl) {\n                propertyDecl.minChar = minChar;\n\n                if (propertyDecl.nodeType == NodeType.VarDecl) {\n                     this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet);\n                }\n            }\n\n            return propertyDecl;\n        }\n\n        private parseTypeMemberList(errorRecoverySet: ErrorRecoverySet, members: ASTList) {\n            errorRecoverySet |= ErrorRecoverySet.TypeScriptS;\n            while (true) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.CloseBrace:\n                    case TokenID.EndOfFile:\n                        members.limChar = this.scanner.pos;\n                        return;\n                }\n\n                // REVIEW: This code looks suspect.  If parseTypeMember returns null, then \n                // won\'t we just infinite loop?\n                var element = this.parseTypeMember(errorRecoverySet);\n                if (element) {\n                    members.append(element);\n                }\n            }\n        }\n\n        private parseInterfaceDecl(errorRecoverySet: ErrorRecoverySet, modifiers: Modifiers): InterfaceDeclaration {\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            this.currentToken = this.scanner.scan();\n            var minChar = this.scanner.pos;\n            var name: Identifier = null;\n            if ((this.currentToken.tokenId == TokenID.Identifier) || (!isPrimitiveTypeToken(this.currentToken) && convertTokToID(this.currentToken, this.strictMode))) {\n                name = Identifier.fromToken(this.currentToken);\n                name.minChar = this.scanner.startPos;\n                name.limChar = this.scanner.pos;\n                this.currentToken = this.scanner.scan();\n            }\n            else {\n                this.reportParseError("interface missing name");\n                if (this.errorRecovery) {\n                    name = new MissingIdentifier();\n                    name.minChar = this.scanner.pos;\n                    name.limChar = this.scanner.pos;\n                    name.flags |= ASTFlags.Error;\n                }\n            }\n\n            var extendsList: ASTList = null;\n            var implementsList: ASTList = null;\n            if (this.currentToken.tokenId === TokenID.Extends || this.currentToken.tokenId === TokenID.Implements) {\n                if (this.currentToken.tokenId === TokenID.Implements) {\n            ';
var v27751 = v27752 + '        this.reportParseError("Expected \'extends\'");\n                }\n\n                extendsList = new ASTList();\n                implementsList = new ASTList();\n                extendsList.minChar = this.scanner.startPos;\n                this.parseBaseList(extendsList, implementsList, errorRecoverySet, /*isClass:*/ false);\n            }\n\n            var membersMinChar = this.scanner.startPos;\n            this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.TypeScriptS);\n            var members = new ASTList();\n            members.minChar = membersMinChar;\n            var prevInInterfaceDecl = this.inInterfaceDecl;\n            this.inInterfaceDecl = true;\n            this.parseTypeMemberList(errorRecoverySet | ErrorRecoverySet.RCurly, members);\n            this.inInterfaceDecl = prevInInterfaceDecl;\n            this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n\n            // REVIEW: According to the grammar, an interface declaration should actually just\n            // have an \'ObjectType\' and not a list of members.  We may want to consider making that\n            // change.  Note: it would mean breaking aparat TypeDecl into InterfaceDeclaration and \n            // ClassDeclaration.\n            var interfaceDecl = new InterfaceDeclaration(name, members, extendsList, null);\n            if (hasFlag(modifiers, Modifiers.Private)) {\n                interfaceDecl.varFlags |= VarFlags.Private;\n            }\n            if (hasFlag(modifiers, Modifiers.Public)) {\n                interfaceDecl.varFlags |= VarFlags.Public;\n            }\n            if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                interfaceDecl.varFlags |= VarFlags.Exported;\n            }\n\n            interfaceDecl.limChar = members.limChar;\n            interfaceDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            interfaceDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            return interfaceDecl;\n        }\n\n        private makeVarDecl(id: Identifier, nest: number): VarDecl {\n            var varDecl = new VarDecl(id, nest);\n            var currentVarList = this.topVarList();\n            if (currentVarList) {\n                currentVarList.append(varDecl);\n            }\n            return varDecl;\n        }\n\n        private parsePropertyDeclaration(\n            errorRecoverySet: ErrorRecoverySet,\n            modifiers: Modifiers,\n            requireSignature: bool,\n            isStatic: bool): AST {\n\n            var text: Identifier = null;\n            var minChar = this.scanner.startPos;\n            var nameLimChar = minChar;\n            var isNew = false;\n            var isIndexer = false;\n            var wasAccessorID = this.prevIDTok != null;\n            var isAccessor = hasFlag(modifiers, Modifiers.Getter) || hasFlag(modifiers, Modifiers.Setter);\n\n            if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                requireSignature = true;\n            }\n\n            if (this.currentToken.tokenId == TokenID.OpenParen && !wasAccessorID) {\n                if (!requireSignature && !isStatic) {\n                    this.reportParseError("Expected identifier in property declaration");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        //REVIEW: Use something else than "Identifier"?\n                        text = new MissingIdentifier();\n                    }\n                }\n            }\n            else if (this.currentToken.tokenId == TokenID.New) {\n                if (requireSignature) {\n                    this.currentToken = this.scanner.scan();\n                    if (this.currentToken.tokenId == TokenID.OpenParen) {\n                        isNew = true;\n                    }\n                }\n\n                if (!isNew) {\n                    // is identifier\n                    if (!requireSignature) {\n                        this.currentToken = this.scanner.scan();\n                    }\n                    text = new Identifier("new");\n                    text.minChar = this.scanner.pos - 3;\n                    text.limChar = this.scanner.pos;\n                    nameLimChar = this.scanner.pos;\n                }\n            }\n            else if ((this.currentToken.tokenId == TokenID.OpenBracket) && requireSignature) {\n                // indexer signature\n                isIndexer = true;\n                //REVIEW: Should we use a special "compiler reserved" identifier node?\n                text = new Identifier("__item");\n            }\n            else if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToIDName(this.currentToken)) && !wasAccessorID) {\n                this.reportParseError("Expected identifier in property declaration");\n                if (this.errorRecovery) {\n                    var eminChar = this.scanner.startPos;\n             ';
var v27750 = v27751 + '       var curpos = this.scanner.pos;\n                    this.skip(errorRecoverySet & (~ErrorRecoverySet.Comma));\n                    if (this.scanner.pos == curpos) {\n                        // ensure progress\n                        this.currentToken = this.scanner.scan();\n                    }\n\n                    var epd = new VarDecl(new MissingIdentifier(), this.nestingLevel);\n                    epd.flags |= ASTFlags.Error;\n                    epd.minChar = eminChar;\n                    epd.limChar = this.scanner.lastTokenLimChar();\n                    return epd;\n                }\n            }\n            else {\n                if (wasAccessorID) {\n                    text = Identifier.fromToken(this.prevIDTok);\n                    text.minChar = this.scanner.lastTokenLimChar() - 3;\n                    text.limChar = this.scanner.lastTokenLimChar();\n                    nameLimChar = text.limChar;\n\n                    if (codeGenTarget < CodeGenTarget.ES5) {\n                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                    }\n\n                    // this block guards against \'get\' and \'set\' tokens that\n                    // were coerced into identifiers\n                    if (this.currentToken.getText() == text.actualText && this.currentToken != this.prevIDTok) {\n                        this.currentToken = this.scanner.scan();\n                    } // Otherwise, don\'t update the token - we\'re already at \'(\'\n\n                    // reset the previous ID Token\n                    this.prevIDTok = null;\n                }\n                else {\n                    text = Identifier.fromToken(this.currentToken);\n                    text.minChar = this.scanner.startPos;\n                    text.limChar = this.scanner.pos;\n                    nameLimChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n\n            if (this.currentToken.tokenId == TokenID.Question) {\n                if (this.inInterfaceDecl && text) {\n                    text.flags |= ASTFlags.OptionalName;\n                }\n                else {\n                    this.reportParseError("Optional properties may only be declared on interface or object types");\n                }\n                this.currentToken = this.scanner.scan();\n            }\n\n            if ((this.currentToken.tokenId == TokenID.OpenParen) ||\n                (isIndexer && (this.currentToken.tokenId == TokenID.OpenBracket))) {\n                var ers = errorRecoverySet | ErrorRecoverySet.RParen;\n                if (isIndexer) {\n                    ers = errorRecoverySet | ErrorRecoverySet.RBrack;\n                }\n                var ast = this.parseFncDecl(ers, true, requireSignature,\n                                       !this.inFncDecl, text, isIndexer, isStatic, (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)), modifiers, null, true);\n                var funcDecl: FuncDecl;\n                if (ast.nodeType == NodeType.Error) {\n                    return ast;\n                }\n                else {\n                    funcDecl = <FuncDecl>ast;\n                }\n                if (funcDecl.name) {\n                    funcDecl.name.minChar = minChar;\n                    funcDecl.name.limChar = nameLimChar;\n                }\n                if ((modifiers & Modifiers.Public) != Modifiers.None) {\n                    funcDecl.fncFlags |= FncFlags.Public;\n                }\n                if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                    funcDecl.fncFlags |= FncFlags.Private;\n                }\n                if (isStatic) {\n                    funcDecl.fncFlags |= FncFlags.Static;\n                }\n                if (this.parsingDeclareFile || hasFlag(modifiers, Modifiers.Ambient)) {\n                    funcDecl.fncFlags |= FncFlags.Ambient;\n                }\n                if (isAccessor) {\n                    // REVIEW: verify return-type annotations and arguments\n                    if (hasFlag(modifiers, Modifiers.Getter)) {\n                        funcDecl.fncFlags |= FncFlags.GetAccessor;\n                        funcDecl.hint = "get" + funcDecl.name.actualText;\n                    }\n                    else {\n                        funcDecl.fncFlags |= FncFlags.SetAccessor;\n                        funcDecl.hint = "set" + funcDecl.name.actualText;\n                    }\n                    funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n\n                    if (modifiers & Modifiers.Ambient) {\n                        this.reportParseError("Property accessors may not be declared in ambient types");\n                    }\n                }\n\n                if (text == null) {\n                    if (isNew) {\n                        funcDecl.fncFlags |= FncFlags.ConstructMember;\n                        funcDecl.hint = "_construct";\n                        funcDecl.classDecl = thi';
var v27749 = v27750 + 's.currentClassDecl;\n                    }\n                    else {\n                        funcDecl.hint = "_call";\n                        funcDecl.fncFlags |= FncFlags.CallMember;\n                    }\n                }\n                return funcDecl;\n            }\n            else {\n                var varDecl = new VarDecl(text, this.nestingLevel);\n                varDecl.preComments = this.parseComments();\n                varDecl.minChar = minChar;\n                if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    varDecl.typeExpr =\n                        this.parseTypeReference(errorRecoverySet | ErrorRecoverySet.Asg |\n                                           ErrorRecoverySet.Comma, false);\n                    if (varDecl.typeExpr && varDecl.typeExpr.nodeType == NodeType.TypeRef) {\n                        var typeExpr = (<TypeReference>varDecl.typeExpr);\n                        if (typeExpr.term && typeExpr.term.nodeType == NodeType.FuncDecl) {\n                            typeExpr.term.preComments = varDecl.preComments;\n                        }\n                    }\n                }\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    if (requireSignature) {\n                        this.reportParseError("context does not permit variable initializer");\n                        if (this.errorRecovery) {\n                            this.skip(errorRecoverySet);\n                            varDecl.flags |= ASTFlags.Error;\n                            varDecl.limChar = this.scanner.lastTokenLimChar();\n                            return varDecl;\n                        }\n                    }\n                    // TODO: note assignment for language service\n                    this.currentToken = this.scanner.scan();\n                    varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                           OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                    varDecl.limChar = varDecl.init.limChar;\n                    if (varDecl.init.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>varDecl.init;\n                        funcDecl.hint = varDecl.id.text;\n                        funcDecl.boundToProperty = varDecl;\n                    }\n                    else if (isAccessor) {\n                        this.reportParseError("Accessors may only be functions");\n                    }\n                }\n                else {\n                    varDecl.limChar = this.scanner.pos;\n                }\n                if ((modifiers & Modifiers.Readonly) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Readonly;\n                }\n                if (isStatic) {\n                    varDecl.varFlags |= VarFlags.Static;\n                }\n                if ((modifiers & Modifiers.Public) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Public;\n                }\n                if ((modifiers & Modifiers.Private) != Modifiers.None) {\n                    varDecl.varFlags |= VarFlags.Private;\n                }\n                varDecl.varFlags |= VarFlags.Property;\n                return varDecl;\n            }\n        }\n\n        private parseVariableDeclaration(\n            errorRecoverySet: ErrorRecoverySet,\n            modifiers: Modifiers,\n            allowIn: bool,\n            isStatic: bool): AST {\n\n            var isConst = hasFlag(modifiers, Modifiers.Readonly);\n            var minChar = this.scanner.startPos;\n            var varDecl: VarDecl = null;\n            var declList: ASTList = null;\n            var multivar = false;\n\n            this.currentToken = this.scanner.scan();\n            var varDeclPreComments = this.parseComments();\n\n            while (true) {\n                if ((this.currentToken.tokenId != TokenID.Identifier) && (!convertTokToID(this.currentToken, this.strictMode))) {\n                    this.reportParseError("Expected identifier in variable declaration");\n\n                    if (this.errorRecovery) {\n                        varDecl = new VarDecl(new MissingIdentifier(), this.nestingLevel);\n                        varDecl.minChar = minChar;\n                        this.skip(errorRecoverySet);\n                        varDecl.flags |= ASTFlags.Error;\n                        varDecl.limChar = this.scanner.lastTokenLimChar();\n                        return varDecl;\n                    }\n                }\n\n                var varDeclName = Identifier.fromToken(this.currentToken)\n                if (this.strictMode && (varDeclName.text == "eval")) {\n                    this.reportParseError("\'eval\' may not name a variable in strict mode");\n                }\n\n                varDecl = this.makeVarDecl(varDeclName, this.nestingLevel);\n                varDecl.id.minChar = this.scanner.startPos;\n                varDecl.id.limChar = this.scanner.pos;\n  ';
var v27748 = v27749 + '              varDecl.preComments = varDeclPreComments;\n\n                if (isStatic) {\n                    varDecl.varFlags |= VarFlags.Static;\n                }\n                if (hasFlag(modifiers, Modifiers.Readonly)) {\n                    varDecl.varFlags |= VarFlags.Readonly;\n                }\n                if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                    varDecl.varFlags |= VarFlags.Ambient;\n                }\n                if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                    varDecl.varFlags |= VarFlags.Exported;\n                }\n                varDecl.minChar = minChar;\n                if (declList) {\n                    declList.append(varDecl);\n                }\n\n                // move past ID; with error recovery need a test \n                this.currentToken = this.scanner.scan();\n                if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    var prevInFncDecl = this.inFncDecl;\n                    this.inFncDecl = false;\n                    varDecl.typeExpr = this.parseTypeReference(\n                        errorRecoverySet | ErrorRecoverySet.Asg | ErrorRecoverySet.Comma, /*allowVoid:*/ false);\n                    this.inFncDecl = prevInFncDecl;\n                }\n\n                if (this.currentToken.tokenId == TokenID.Equals) {\n                    if (hasFlag(varDecl.varFlags, VarFlags.Ambient)) {\n                        this.reportParseError("Ambient variable can not have an initializer");\n                    }\n                    // TODO: note assignment for language service\n                    this.currentToken = this.scanner.scan();\n                    varDecl.init = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                           OperatorPrecedence.Comma, allowIn,\n                                           TypeContext.NoTypes);\n                    varDecl.limChar = varDecl.init.limChar;\n                    if (varDecl.init.nodeType == NodeType.FuncDecl) {\n                        // TODO: use \'as\' operator when can bootstrap\n                        var funcDecl = <FuncDecl>varDecl.init;\n                        funcDecl.hint = varDecl.id.actualText;\n                    }\n                }\n                else {\n                    if (isConst) {\n                        this.reportParseError("const declaration requires initializer");\n                    }\n                    varDecl.limChar = this.scanner.pos;\n                }\n                varDecl.postComments = this.parseCommentsForLine(this.scanner.line);\n\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    if (declList) {\n                        declList.limChar = varDecl.limChar;\n                        return declList;\n                    }\n                    else {\n                        return varDecl;\n                    }\n                }\n\n                if (!multivar) {\n                    declList = new ASTList();\n                    declList.minChar = varDecl.minChar;\n                    declList.append(varDecl);\n                    multivar = true;\n                }\n\n                this.currentToken = this.scanner.scan();\n                minChar = this.scanner.startPos;\n            }\n        }\n\n        private parseMemberList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var elements = new ASTList();\n            if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                return elements;\n            }\n\n            var idHint: string = null;\n            var memberName: AST = null;\n            var memberExpr: AST = null;\n            var member: BinaryExpression = null;\n            var minChar = this.scanner.startPos;\n            var isSet = false;\n            var skippedTokenForGetSetId = false;\n            var getSetTok: Token = null;\n            var getSetStartPos = 0;\n            var getSetPos = 0;\n\n            for (; ;) {\n                var accessorPattern = false;\n                if (this.currentToken.tokenId == TokenID.Get || this.currentToken.tokenId == TokenID.Set) {\n                    isSet = this.currentToken.tokenId == TokenID.Set;\n                    getSetTok = this.currentToken;\n                    getSetStartPos = this.scanner.startPos;\n                    getSetPos = this.scanner.pos;\n\n                    this.currentToken = this.scanner.scan();\n\n                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                        idHint = isSet ? "set" : "get";\n                        idHint = idHint + this.currentToken.getText();\n                        memberName = Identifier.fromToken(this.currentToken);\n                        memberName.minChar = this.scanner.startPos;\n                        accessorPattern = true;\n                   ';
var v27747 = v27748 + '     if (codeGenTarget < CodeGenTarget.ES5) {\n                            this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                        }\n                    }\n                    else if (this.currentToken.tokenId != TokenID.Colon) {\n                        this.reportParseError("Expected identifier, string or number as accessor name");\n                    }\n                    else {\n                        skippedTokenForGetSetId = true;\n                        memberName = Identifier.fromToken(getSetTok);\n                        memberName.minChar = getSetStartPos;\n                        memberName.limChar = getSetPos;\n                    }\n                }\n                else if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToIDName(this.currentToken)) {\n                    idHint = this.currentToken.getText();\n                    memberName = Identifier.fromToken(this.currentToken);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else if (this.currentToken.tokenId == TokenID.StringLiteral) {\n                    idHint = this.currentToken.getText();\n                    memberName = new StringLiteral(idHint);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                    // TODO: allow reserved words\n                else if (this.currentToken.tokenId == TokenID.NumberLiteral) {\n                    var ntok = <NumberLiteralToken>this.currentToken;\n                    idHint = ntok.value.toString();\n                    memberName = new StringLiteral(idHint);\n                    memberName.minChar = this.scanner.startPos;\n                    memberName.limChar = this.scanner.pos;\n                }\n                else {\n                    this.reportParseError("Expected identifier, string or number as member name");\n                    if (this.errorRecovery) {\n                        memberName = new MissingIdentifier();\n                        memberName.minChar = this.scanner.startPos;\n                        memberName.flags |= ASTFlags.Error;\n                        this.skip(errorRecoverySet | ErrorRecoverySet.Comma);\n                        memberName.limChar = this.scanner.lastTokenLimChar();\n                    }\n                }\n\n                if (!skippedTokenForGetSetId) {\n                    this.currentToken = this.scanner.scan();\n                }\n                else {\n                    skippedTokenForGetSetId = false;\n                }\n\n                if (this.currentToken.tokenId == TokenID.Question) {\n                    memberName.flags |= ASTFlags.OptionalName;\n                    this.currentToken = this.scanner.scan();\n                }\n\n                if (accessorPattern) {\n                    var args = new ASTList();\n                    this.parseFormalParameterList(errorRecoverySet | ErrorRecoverySet.RParen,\n                                      args, false, true, false, !isSet, isSet, false, null, true);\n\n                    var funcDecl: FuncDecl =\n                        this.parseFunctionStatements(errorRecoverySet | ErrorRecoverySet.RCurly,\n                                                <Identifier>memberName, false, true, args,\n                                                AllowedElements.None,\n                                                this.scanner.startPos, false, Modifiers.None);\n\n                    if (isSet && funcDecl.returnTypeAnnotation) {\n                        this.reportParseError("Property setters may not declare a return type");\n                    }\n\n                    funcDecl.fncFlags |= isSet ? FncFlags.SetAccessor : FncFlags.GetAccessor;\n                    funcDecl.fncFlags |= FncFlags.IsFunctionExpression;\n                    funcDecl.hint = idHint;\n                    memberExpr = funcDecl;\n                    member = new BinaryExpression(NodeType.Member, memberName, memberExpr);\n                    member.minChar = memberName.minChar;\n                    if (memberExpr.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>memberExpr;\n                        funcDecl.hint = idHint;\n                    }\n                }\n                else if (this.currentToken.tokenId == TokenID.Colon) {\n                    this.currentToken = this.scanner.scan();\n                    memberExpr = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                         OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                    // If the memberExpr is a type reference, we can be certain that it was an\n                    // array type declaraion that lacked a "new".  We can realistically only\n                    // expect call and name ASTs to be the result of this call to parseExpr.\n                   ';
var v27746 = v27747 + " // If it's a constructor without a \"new\", we'll flag it as an invalid\n                    // call site later on.\n                    if (memberExpr.nodeType == NodeType.TypeRef) {\n                        this.reportParseError(\"Expected 'new' on array declaration in member definition\")\n                    }\n                    member = new BinaryExpression(NodeType.Member, memberName, memberExpr);\n                    member.minChar = memberName.minChar;\n                    if (memberExpr.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>memberExpr;\n                        funcDecl.hint = idHint;\n                    }\n                }\n                else {\n                    this.reportParseError(\"Expected ':' in member definition\");\n                    if (this.errorRecovery) {\n                        this.skip(errorRecoverySet);\n                        elements.flags |= ASTFlags.Error;\n                        elements.minChar = minChar;\n                        elements.limChar = this.scanner.lastTokenLimChar();\n                        return elements;\n                    }\n                }\n                idHint = null;\n                elements.append(member);\n                member.limChar = this.scanner.lastTokenLimChar();\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    break;\n                }\n                else {\n                    // munch comma\n                    this.currentToken = this.scanner.scan();\n                }\n\n                // trailing comma allowed\n                if (this.currentToken.tokenId == TokenID.CloseBrace) {\n                    break;\n                }\n            }\n\n            if (member) {\n                elements.limChar = member.limChar;\n            }\n            elements.minChar = minChar;\n            return elements;\n        }\n\n        private parseArrayList(errorRecoverySet: ErrorRecoverySet): ASTList {\n            var elements: ASTList = null;\n            if (this.currentToken.tokenId == TokenID.CloseBracket) {\n                return elements;\n            }\n            else {\n                elements = new ASTList();\n                elements.minChar = this.scanner.startPos;\n            }\n\n            var arg: AST;\n\n            for (; ;) {\n                if ((this.currentToken.tokenId == TokenID.Comma) ||\n                    (this.currentToken.tokenId == TokenID.CloseBracket)) {\n                    arg = new AST(NodeType.EmptyExpr);\n                }\n                else {\n                    arg = this.parseExpr(ErrorRecoverySet.Comma | errorRecoverySet,\n                                  OperatorPrecedence.Comma, true, TypeContext.NoTypes);\n                }\n                elements.append(arg);\n                if (this.currentToken.tokenId != TokenID.Comma) {\n                    break;\n                }\n                this.currentToken = this.scanner.scan();\n            }\n            elements.limChar = this.scanner.lastTokenLimChar();\n            return elements;\n        }\n\n        private parseArrayLiteral(errorRecoverySet: ErrorRecoverySet): UnaryExpression {\n            var arrayLiteral: UnaryExpression = null;\n            arrayLiteral = new UnaryExpression(NodeType.ArrayLit,\n                                             this.parseArrayList(errorRecoverySet));\n            return arrayLiteral;\n        }\n\n        private parseTerm(errorRecoverySet: ErrorRecoverySet, allowCall: bool, typeContext: TypeContext, inCast: bool): AST {\n            var ast: AST = null;\n            var sawId = false;\n            var inNew = false;\n            var minChar = this.scanner.startPos;\n            var limChar = this.scanner.pos;\n            var parseAsLambda = false;\n            var expectlambdaRParen = false;\n\n            // keywords first\n            switch (this.currentToken.tokenId) {\n                case TokenID.Number:\n                case TokenID.Bool:\n                case TokenID.Any:\n                case TokenID.String:\n                    var tid = new Identifier(tokenTable[this.currentToken.tokenId].text);\n                    if (hasFlag(typeContext, TypeContext.Primitive)) {\n                        ast = new TypeReference(tid, 0);\n                        sawId = true;\n                    }\n                    else {\n                        ast = tid;\n                        sawId = true;\n                    }\n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.This:\n                    ast = new AST(NodeType.This);\n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.Super:\n                    ast = new AST(NodeType.Super);\n                    ast.minChar =";
var v27745 = v27746 + " minChar;\n                    this.currentToken = this.scanner.scan();\n                    limChar = this.scanner.lastTokenLimChar();\n                    break;\n                case TokenID.True:\n                    ast = new AST(NodeType.True);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.False:\n                    ast = new AST(NodeType.False);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.Null:\n                    ast = new AST(NodeType.Null);\n                    this.currentToken = this.scanner.scan();\n                    ast.minChar = minChar;\n                    break;\n                case TokenID.New:\n                    minChar = this.scanner.pos;\n                    this.currentToken = this.scanner.scan();\n                    var target = this.parseTerm(errorRecoverySet, false, TypeContext.AllSimpleTypes, inCast);\n\n                    if (target.nodeType == NodeType.Error || (target.nodeType == NodeType.Index && (<BinaryExpression>target).operand1.nodeType == NodeType.TypeRef)) {\n                        this.reportParseError(\"Cannot invoke 'new' on this expression\");\n                    } else {\n                        ast = new CallExpression(NodeType.New, target, null);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        inNew = true;\n                    }\n                    break;\n                case TokenID.Function:\n                    minChar = this.scanner.pos;\n                    ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, null, true);\n                    (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n                    ast.minChar = minChar;\n                    limChar = this.scanner.lastTokenLimChar();\n                    ast.limChar = limChar;\n                    break;\n            }\n\n            if (ast == null) {\n                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n\n                    var idText = this.currentToken.getText();\n                    ast = this.createRef(idText, (<IdentifierToken>this.currentToken).hasEscapeSequence, minChar);\n                    sawId = true;\n \n                    ast.minChar = minChar;\n                    this.currentToken = this.scanner.scan();\n\n                    if (this.currentToken.tokenId == TokenID.Question) {\n                        ast.flags |= ASTFlags.PossibleOptionalParameter;\n                    }\n\n                    limChar = this.scanner.lastTokenLimChar();\n                }\n            }\n\n            if (inCast) {\n                this.checkCurrentToken(TokenID.GreaterThan, errorRecoverySet);\n            }\n\n            if (ast == null) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.OpenParen:\n                        minChar = this.scanner.pos;\n                        var prevTokId = this.scanner.previousToken().tokenId;\n                        this.currentToken = this.scanner.scan();\n\n                        var couldBeLambda = prevTokId == TokenID.OpenParen || // foo(()=>{});\n                                            prevTokId == TokenID.Comma || // foo(x,()=>{});\n                                            prevTokId == TokenID.EqualsEquals || // var foo = ()=>{};\n                                            prevTokId == TokenID.Colon;    // var x = { foo: ()=> {} };\n\n\n                        if (couldBeLambda && this.currentToken.tokenId == TokenID.CloseParen) {\n                            parseAsLambda = true;\n                            expectlambdaRParen = false;\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else if (couldBeLambda && this.currentToken.tokenId == TokenID.DotDotDot) {\n                            parseAsLambda = true;\n                            expectlambdaRParen = true;\n                        }\n                        else {\n                            ast = this.parseExpr(errorRecoverySet | ErrorRecoverySet.RParen,\n                                          OperatorPrecedence.None, true, TypeContext.NoTypes, couldBeLambda);\n                            limChar = this.scanner.lastTokenLimChar();\n                            parseAsLambda = couldBeLambda && (ast.nodeType == NodeType.Name || ast.nodeType == NodeType.Comma) &&\n                                            (this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.Question);\n                            expectlambdaRParen = true;\n                        }\n\n                        // Check for the RParen if it's not an anonymous '=>' function\n                       ";
var v27744 = v27745 + " if ((ast && !parseAsLambda)) {\n                            if (hasFlag(ast.flags, ASTFlags.SkipNextRParen)) {\n                                // REVIEW: parseExpr resulted in a lambda node, the LParen scanned earlier, is the beginning of that node, and not of a parenthesized expression;\n                                //         do not look for a matching RParen for this node, but make sure to remove the flag, so that any enclosing parenthesis are matched correctly.\n                                ast.flags = ast.flags & (~(ASTFlags.SkipNextRParen)); \n                                break;\n                            }\n                            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n                            ast.isParenthesized = true;\n                        }\n\n                        break;\n                    case TokenID.NumberLiteral: {\n                        var numTok = <NumberLiteralToken>this.currentToken;\n                        this.currentToken = this.scanner.scan();\n                        ast = new NumberLiteral(numTok.value, numTok.hasEmptyFraction);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.StringLiteral:\n                        ast = new StringLiteral(this.currentToken.getText());\n                        this.currentToken = this.scanner.scan();\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    case TokenID.RegularExpressionLiteral: {\n                        var rtok = <RegularExpressionLiteralToken>this.currentToken;\n                        ast = new RegexLiteral(rtok.regex);\n                        this.currentToken = this.scanner.scan();\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.OpenBracket:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        ast = this.parseArrayLiteral(ErrorRecoverySet.RBrack | errorRecoverySet);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.pos; // ']'\n                        this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet);\n                        break;\n                    // TODO: rescan regex for TokenID.Div and AsgDiv\n                        case TokenID.OpenBrace:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var members = this.parseMemberList(ErrorRecoverySet.RCurly | errorRecoverySet)\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        ast = new UnaryExpression(NodeType.ObjectLit, members);\n                        ast.minChar = minChar;\n                        limChar = this.scanner.lastTokenLimChar();\n                        members.minChar = minChar;\n                        members.limChar = limChar;\n                        break;\n\n                    case TokenID.LessThan:\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var term: AST = this.parseTypeReference(ErrorRecoverySet.BinOp, false);\n                        this.checkCurrentToken(TokenID.GreaterThan, errorRecoverySet);\n                        ast = new UnaryExpression(NodeType.TypeAssertion, this.parseExpr(errorRecoverySet, OperatorPrecedence.Unary, false, TypeContext.NoTypes));\n                        (<UnaryExpression>ast).castTerm = term;\n                        break;\n\n                    default:\n                        if (this.prevExpr && hasFlag(this.prevExpr.flags, ASTFlags.PossibleOptionalParameter)) {\n                            parseAsLambda = true;\n                            ast = this.prevExpr;\n                        }\n                        else {\n                            this.reportParseError(\"Check format of expression term\");\n                            if (this.errorRecovery) {\n                                var ident = new MissingIdentifier();\n                                ident.minChar = minChar;\n                                ident.flags |= ASTFlags.Error;\n                                this.skip(errorRecoverySet | ErrorRecoverySet.Postfix);\n                                if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                    ident.setText(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence);\n                                    this.currentToken = this.scanner.scan();\n                       ";
var v27743 = v27744 + '             limChar = this.scanner.lastTokenLimChar();\n                                }\n                                else {\n                                    limChar = this.scanner.lastTokenLimChar();\n                                    //tok=scanner.scan();\n                                }\n\n                                // REVIEW: set sawId\n                                ast = ident;\n                            }\n                        }\n                }\n            }\n\n            if (parseAsLambda) {\n                // If the next token is an fat arrow or a colon, we either have a parameter list, or can rightly assume\n                // that we have a typed formal, so we proceed with the lambda parse\n                if (\n                    this.currentToken.tokenId == TokenID.Colon ||\n                    this.currentToken.tokenId == TokenID.Comma ||\n                    this.currentToken.tokenId == TokenID.CloseParen ||\n                    this.currentToken.tokenId == TokenID.DotDotDot) {\n\n                        // We won\'t scan in the \':\' case, since keeping the \':\' simplifies argument handling in parseFormalParameterList\n                        // Note that we don\'t set the minchar in this case\n                    ast = this.parseLambdaExpr(errorRecoverySet, ast, true /* skipNextRParen */, expectlambdaRParen);\n                    ast.minChar = minChar;\n                    limChar = this.scanner.lastTokenLimChar();\n                    ast.limChar = limChar;\n                }\n                else if (ast) {\n                    ast.isParenthesized = true;\n                }\n            }\n\n            if (sawId && (typeContext != TypeContext.NoTypes)) {\n                typeContext |= TypeContext.ArraySuffix;\n            }\n\n            var postFix = this.parsePostfixOperators(errorRecoverySet, ast, allowCall, inNew, typeContext, minChar, limChar);\n\n            // Defensive error check...\n            if (postFix) {\n                if (sawId && (postFix.nodeType == NodeType.Index)) {\n                    var binExpr = <BinaryExpression>postFix;\n                    if (binExpr.operand2 == null) {\n                        postFix = this.convertToTypeReference(postFix);\n                    }\n                }\n\n                ///////////////////////////////////////////////////////////\n                //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n                //      as they are sometimes not specific enough for each expression kind.\n                postFix.minChar = minChar;\n                // Only update "limChar" if it is not better than "lastTokenLimChar()"\n                postFix.limChar = max(postFix.limChar, this.scanner.lastTokenLimChar());\n                //\n                ///////////////////////////////////////////////////////////\n                return postFix;\n            }\n            else {\n                return new AST(NodeType.Error);\n            }\n\n        }\n\n        private parseLambdaExpr(errorRecoverySet: ErrorRecoverySet, lambdaArgs: AST, skipNextRParen: bool, expectClosingRParen: bool): AST {\n            // REVIEW: Parse the remainder of a lambda expression. The opening paren has been read already, if it existed. \n            //         skipNextRParen sets a flag on the resulting lambda node to tell the calling parseTerm that the LParen it scanned has been matched as part of parsing the formal parameter list\n            //         expectClosingRParen indicates that a closing RParen is expected, in the cases with optional parameter or more than one parameter.\n            var ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, { preProcessedLambdaArgs: lambdaArgs }, expectClosingRParen);\n            (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n            (<FuncDecl>ast).fncFlags |= FncFlags.IsFatArrowFunction;\n            if (!skipNextRParen) {\n                ast.flags |= ASTFlags.SkipNextRParen;\n            }\n            ast.limChar = this.scanner.lastTokenLimChar();;\n            return ast;\n        }\n\n        private parseExpr(errorRecoverySet: ErrorRecoverySet, minPrecedence: number, allowIn: bool,\n            typeContext: TypeContext, possiblyInLambda: bool = false): AST {\n            var ast: AST = null;\n            var tokenInfo = lookupToken(this.currentToken.tokenId);\n            var canAssign: bool = true;\n            var idHint: string = null;\n            var minChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            var exprIsAnonLambda = false;\n\n            if ((tokenInfo != undefined) && (tokenInfo.unopNodeType != NodeType.None)) {\n                canAssign = false;\n                this.currentToken = this.scanner.scan();\n                var tempExpr = this.parseExpr(ErrorRecoverySet.BinOp | errorRecoverySet,\n                                       tokenInfo.unopPrecedence, allowIn,\n                                       TypeCo';
var v27742 = v27743 + 'ntext.NoTypes);\n\n                // fold unary +- into constants\n                if ((tokenInfo.unopNodeType == NodeType.Pos) &&\n                    (tempExpr.nodeType == NodeType.NumberLit)) {\n                    ast = tempExpr;\n                }\n                else if ((tokenInfo.unopNodeType == NodeType.Neg) &&\n                         (tempExpr.nodeType == NodeType.NumberLit)) {\n                    var numLit = <NumberLiteral>tempExpr;\n                    numLit.value = (-numLit.value);\n                    if (numLit.value == 0) {\n                        numLit.isNegativeZero = true;\n                    }\n                    ast = tempExpr;\n                }\n                else {\n                    ast = new UnaryExpression(tokenInfo.unopNodeType, tempExpr);\n                    ast.limChar = tempExpr.limChar;\n                }\n                ast.minChar = minChar;\n            }\n            else {\n                ast = this.parseTerm(ErrorRecoverySet.BinOp | ErrorRecoverySet.AddOp |\n                              errorRecoverySet, true, typeContext, false);\n                var id: Identifier;\n                var temp: AST;\n                if (ast.nodeType == NodeType.Name) {\n                    id = <Identifier>ast;\n                    idHint = id.actualText;\n                }\n                else if (ast.nodeType == NodeType.Dot) {\n\n                    // If this is within a class declaration, and the circumstances are right, we need to\n                    // transform the dotted expression into a member declaration\n                    var subsumedExpr = false;\n\n                    if (this.inferPropertiesFromThisAssignment && \n                        (this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.Equals) &&\n                         this.parsingClassConstructorDefinition &&\n                         this.nestingLevel == this.currentClassDefinition.constructorNestingLevel && // this nesting level means we\'re at the top-level in the constructor\n                         (<BinaryExpression>ast).operand1.nodeType == NodeType.This) {\n\n                        if ((<BinaryExpression>ast).operand2.nodeType == NodeType.Name) {\n                            var op2ID: Identifier = (<Identifier>(<BinaryExpression>ast).operand2);\n\n                            if (!this.currentClassDefinition.knownMemberNames[op2ID.actualText]) {\n                                ast = this.parseClassMemberVariableDeclaration(op2ID, ast.minChar, true, errorRecoverySet, Modifiers.Public);\n                                subsumedExpr = true;\n                            }\n                        }\n                    }\n\n                    if (!subsumedExpr) {\n                        temp = ast;\n                        while (temp.nodeType == NodeType.Dot) {\n                            var binExpr = <BinaryExpression>temp;\n                            temp = binExpr.operand2;\n                        }\n                        if (temp.nodeType == NodeType.Name) {\n                             id = <Identifier>temp;\n                            idHint = id.actualText;\n                        }\n                    }\n                }\n                if ((!this.scanner.lastTokenHadNewline()) &&\n                    ((this.currentToken.tokenId == TokenID.PlusPlus) || (this.currentToken.tokenId == TokenID.MinusMinus))) {\n                    canAssign = false;\n                    var operand = ast;\n                    ast = new UnaryExpression((this.currentToken.tokenId == TokenID.PlusPlus) ? NodeType.IncPost : NodeType.DecPost, operand);\n                    ast.limChar = this.scanner.pos;\n                    ast.minChar = operand.minChar;\n                    this.currentToken = this.scanner.scan();\n                }\n            }\n            for (; ;) {\n                tokenInfo = lookupToken(this.currentToken.tokenId);\n                if ((tokenInfo == undefined) || (tokenInfo.binopNodeType == NodeType.None)) {\n                    break;\n                }\n                if ((!allowIn) && (tokenInfo.binopNodeType == NodeType.In)) {\n                    break;\n                }\n                if (tokenInfo.binopPrecedence == OperatorPrecedence.Assignment) {\n                    if (tokenInfo.binopPrecedence < minPrecedence) {\n                        break;\n                    }\n                    if (!canAssign) {\n                        this.reportParseError("illegal assignment");\n                    }\n                }\n                else if (tokenInfo.binopPrecedence <= minPrecedence) {\n                    break;\n                }\n\n                if (possiblyInLambda && this.currentToken.tokenId == TokenID.Comma && this.scanner.getLookAheadToken().tokenId == TokenID.DotDotDot) {\n                    // The ellipsis can only exist in the formal list of a lambda expression, so do not attempt to parse the comma token as the comma binary operator\n                    // instead parse it as a lambda\n               ';
var v27741 = v27742 + '     exprIsAnonLambda = true;\n                    canAssign = false;\n                    ast = this.parseLambdaExpr(errorRecoverySet, ast, false, true);\n                    break;\n                }\n\n                // Precedence is high enough. Consume the operator token.\n                this.currentToken = this.scanner.scan();\n                canAssign = false;\n                if (tokenInfo.binopNodeType == NodeType.ConditionalExpression) {\n                    if (possiblyInLambda && \n                        ( this.currentToken.tokenId == TokenID.Equals || this.currentToken.tokenId == TokenID.Colon || this.currentToken.tokenId == TokenID.CloseParen || this.currentToken.tokenId == TokenID.Comma)) {\n                        // The QMark is not a ternary expression, it is a marker for optional parameter in a lambda expression.\n                        exprIsAnonLambda = true;\n                        canAssign = true;\n                    }\n                    else {\n                        this.prevExpr = ast;\n                        var whenTrue = this.parseExpr(\n                            errorRecoverySet | ErrorRecoverySet.Colon, OperatorPrecedence.Assignment, allowIn, TypeContext.NoTypes);\n\n                        // Do not hold onto the prevExpr handle\n                        this.prevExpr = null;\n                        this.checkCurrentToken(TokenID.Colon, errorRecoverySet | ErrorRecoverySet.ExprStart);\n\n                        var whenFalse = this.parseExpr(\n                            errorRecoverySet | ErrorRecoverySet.BinOp, OperatorPrecedence.Assignment, allowIn, TypeContext.NoTypes)\n                        ast = new ConditionalExpression(ast, whenTrue, whenFalse);\n                    }\n                }\n                else {\n                    var tc = TypeContext.NoTypes;\n                    var binExpr2: BinaryExpression;\n\n                    binExpr2 = new BinaryExpression(tokenInfo.binopNodeType, ast,\n                                                    this.parseExpr(errorRecoverySet |\n                                                            ErrorRecoverySet.BinOp,\n                                                            tokenInfo.binopPrecedence,\n                                                            allowIn, TypeContext.NoTypes, possiblyInLambda));\n                    if (binExpr2.operand2.nodeType == NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>binExpr2.operand2;\n                        funcDecl.hint = idHint;\n                    }\n\n                    binExpr2.minChar = ast.minChar;\n                    binExpr2.limChar = this.scanner.lastTokenLimChar();\n                    idHint = null;\n                    ast = binExpr2;\n                }\n            }\n            if (canAssign) {\n                ast.flags |= ASTFlags.Writeable;\n            }\n            if (!exprIsAnonLambda) {\n                ///////////////////////////////////////////////////////////\n                //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n                //      as they are sometimes not specific enough for each statement kind.\n                ast.minChar = minChar;\n                // Only update "limChar" if it is not better than "lastTokenLimChar()"\n                ast.limChar = max(ast.limChar, this.scanner.lastTokenLimChar());\n                //\n                ///////////////////////////////////////////////////////////\n                ast.preComments = preComments;\n                ast.postComments = this.parseCommentsForLine(this.scanner.line);\n            }\n            return ast;\n        }\n\n        private parsePostfixOperators(errorRecoverySet: ErrorRecoverySet, ast: AST, allowCall: bool, inNew: bool,\n            typeContext: TypeContext, lhsMinChar: number, lhsLimChar: number): AST {\n            var count = 0;\n\n            if (!ast) {\n                ast = new AST(NodeType.EmptyExpr);\n                ast.isParenthesized = true;\n            }\n\n            ast.minChar = lhsMinChar;\n            ast.limChar = lhsLimChar;\n\n            for (; ;) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.OpenParen:\n                        if (inNew) {\n                            var callExpr = <CallExpression>ast;\n                            callExpr.arguments = this.parseArgList(errorRecoverySet);\n                            inNew = false;\n                        }\n                        else {\n                            if (!allowCall) {\n                                return ast;\n                            }\n                            ast = new CallExpression(NodeType.Call, ast,\n                                                   this.parseArgList(errorRecoverySet));\n                            ast.minChar = lhsMinChar;\n                        }\n                        ast.limChar = this.scanner.pos; // \')\'\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n              ';
var v27740 = v27741 + "          break;\n                    case TokenID.OpenBracket:\n                        this.currentToken = this.scanner.scan();\n                        if (this.currentToken.tokenId == TokenID.CloseBracket) {\n                            if (hasFlag(typeContext, TypeContext.ArraySuffix)) {\n                                this.currentToken = this.scanner.scan();\n                                if (ast.nodeType == NodeType.TypeRef) {\n                                    var typeRef = <TypeReference>ast;\n                                    typeRef.arrayCount++;\n                                }\n                                else {\n                                    ast = new BinaryExpression(NodeType.Index, ast, null);\n                                }\n                                ast.limChar = this.scanner.pos;\n                                break; // note early exit from case\n                            }\n                        }\n\n                        ast = new BinaryExpression(NodeType.Index, ast,\n                                                 this.parseExpr(errorRecoverySet | ErrorRecoverySet.RBrack,\n                                                           OperatorPrecedence.None, true,\n                                                           TypeContext.NoTypes));\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.pos; // ']'\n                        this.checkCurrentToken(TokenID.CloseBracket, errorRecoverySet);\n                        break;\n                    case TokenID.Dot: {\n                        var name: Identifier = null;\n                        var curpos = this.scanner.pos;\n                        this.currentToken = this.scanner.scan();\n                        // Don't allow reserved words if immediately after a new line and error recovery is enabled\n                        if ((this.currentToken.tokenId == TokenID.Identifier) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && convertTokToIDName(this.currentToken))) {\n                            ast.flags |= ASTFlags.DotLHS;\n                            name = this.createRef(this.currentToken.getText(), (<IdentifierToken>this.currentToken).hasEscapeSequence, this.scanner.startPos);\n                            name.limChar = this.scanner.pos;\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else {\n                            this.reportParseError(\"Expected identifier following dot\");\n                            if (this.errorRecovery) {\n                                this.skip(errorRecoverySet);\n                                ast.flags |= (ASTFlags.Error | ASTFlags.DotLHS);\n                                return ast;\n                            }\n                            else {\n                                name = new MissingIdentifier();\n                            }\n                        }\n                        ast = new BinaryExpression(NodeType.Dot, ast, name);\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    }\n                    case TokenID.EqualsGreaterThan:\n                        ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, Modifiers.None, { preProcessedLambdaArgs: ast }, false);\n                        (<FuncDecl>ast).fncFlags |= FncFlags.IsFunctionExpression;\n                        ast.minChar = lhsMinChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        break;\n                    default:\n                        return ast;\n\n                }\n            }\n        }\n\n        private parseTry(tryNode: Try, errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Try {\n            var minChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError(\"Expected '{'\");\n                if (this.errorRecovery) {\n                    var etryNode = tryNode;\n                    etryNode.minChar = minChar;\n                    etryNode.limChar = this.scanner.lastTokenLimChar();\n                    etryNode.flags |= ASTFlags.Error;\n                    return etryNode;\n                }\n            }\n            tryNode.body = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers);\n            tryNode.minChar = minChar;\n            tryNode.limChar = tryNode.body.limChar;\n            tryNode.preComments = preComments;\n            tryNode.postComments = this.parseComments();\n            return tryNode;\n        }\n\n        private parseCatch(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Catch {\n            var catchMinChar = this.scanner.startPos;\n       ";
var v27739 = v27740 + '     var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            this.checkCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n            if ((this.currentToken.tokenId != TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                this.reportParseError("Expected identifier in catch header");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n\n                    var ecatch = new Catch(new VarDecl(new MissingIdentifier(), this.nestingLevel),\n                                            new Statement(NodeType.Empty));\n                    ecatch.statement.minChar = catchMinChar;\n                    ecatch.statement.limChar = this.scanner.pos;\n                    ecatch.minChar = this.scanner.startPos;\n                    ecatch.limChar = this.scanner.pos;\n                    ecatch.flags |= ASTFlags.Error;\n                    return ecatch;\n                }\n            }\n            var param = new VarDecl(Identifier.fromToken(this.currentToken), this.nestingLevel);\n            param.id.minChar = this.scanner.startPos;\n            param.id.limChar = this.scanner.pos;\n            param.minChar = param.id.minChar;\n            param.limChar = param.id.limChar;\n            this.currentToken = this.scanner.scan();\n            var statementPos = this.scanner.pos;\n            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.StmtStart);\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError("Expected \'{\' to start catch body");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n\n                    var ecatch = new Catch(new VarDecl(new MissingIdentifier(), this.nestingLevel),\n                                            new Statement(NodeType.Empty));\n                    ecatch.statement.minChar = catchMinChar;\n                    ecatch.statement.limChar = statementPos;\n                    ecatch.minChar = this.scanner.startPos;\n                    ecatch.limChar = this.scanner.pos;\n                    ecatch.flags |= ASTFlags.Error;\n                    return ecatch;\n                }\n            }\n\n            var catchStmt = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers);\n            var catchNode = new Catch(param, catchStmt);\n            catchNode.statement.minChar = catchMinChar;\n            catchNode.statement.limChar = statementPos;\n            catchNode.minChar = catchMinChar;\n            catchNode.limChar = catchStmt.limChar;\n            catchNode.preComments = preComments;\n            catchNode.postComments = this.parseComments();\n            return catchNode;\n        }\n\n        private parseFinally(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers): Finally {\n            var finMinChar = this.scanner.startPos;\n            var preComments = this.parseComments();\n            this.currentToken = this.scanner.scan();\n            if (this.currentToken.tokenId != TokenID.OpenBrace) {\n                this.reportParseError("Expected \'{\' to start body of finally statement");\n                if (this.errorRecovery) {\n                    this.skip(errorRecoverySet);\n                    var efin = new Finally(new Statement(NodeType.Empty));\n                    efin.flags |= ASTFlags.Error;\n                    efin.minChar = this.scanner.startPos;\n                    efin.limChar = this.scanner.pos;\n                    return efin;\n                }\n            }\n\n            var finBody = this.parseStatement(errorRecoverySet, AllowedElements.None, parentModifiers)\n            var fin = new Finally(finBody);\n            fin.minChar = finMinChar;\n            fin.limChar = fin.body.limChar;\n            fin.preComments = preComments;\n            fin.postComments = this.parseComments();\n            return fin;\n        }\n\n        private parseTryCatchFinally(errorRecoverySet: ErrorRecoverySet, parentModifiers: Modifiers, labelList: ASTList): AST {\n            var tryPart: AST = new Try(null);\n            var tryMinChar = this.scanner.startPos;\n            this.pushStmt(<Statement>tryPart, labelList);\n            this.parseTry(<Try>tryPart, errorRecoverySet | ErrorRecoverySet.Catch, parentModifiers);\n            this.popStmt();\n            var tc: TryCatch = null;\n            var tf: TryFinally = null;\n\n            if (this.currentToken.tokenId == TokenID.Catch) {\n                var catchPart = this.parseCatch(errorRecoverySet | ErrorRecoverySet.Catch, parentModifiers);\n                tc = new TryCatch(<Try>tryPart, catchPart);\n                tc.minChar = tryPart.minChar;\n                tc.limChar = catchPart.limChar;\n            }\n\n            if (this.currentToken.tokenId != TokenID.Finally) {\n                if (tc == null) {\n                    this.reportParseError("try with neither catch nor finally");\n        ';
var v27738 = v27739 + '            if (this.errorRecovery) {\n                        var etf = new TryFinally(tryPart, new Finally(new AST(NodeType.Empty)));\n                        etf.flags |= ASTFlags.Error;\n                        etf.minChar = this.scanner.startPos;\n                        etf.limChar = this.scanner.pos;\n                        return etf;\n                    }\n                    return new TryFinally(tryPart, new Finally(new AST(NodeType.Empty)));\n                }\n                else {\n                    return tc;\n                }\n            }\n            else {\n                if (tc) {\n                    tryPart = tc;\n                }\n                var finallyPart = this.parseFinally(errorRecoverySet, parentModifiers)\n                tf = new TryFinally(tryPart, finallyPart);\n                tf.minChar = tryMinChar;\n                tf.limChar = finallyPart.limChar;\n                return tf;\n            }\n        }\n\n        private parseStatement(errorRecoverySet: ErrorRecoverySet, allowedElements: AllowedElements, parentModifiers: Modifiers): AST {\n            var ast: AST = null;\n            var labelList: ASTList = null;\n            var astList: ASTList = null;\n            var temp: AST;\n            var modifiers = Modifiers.None;\n            var minChar = this.scanner.startPos;\n            var forInOk = false;\n            var needTerminator = false;\n            var fnOrVar: AST = null;\n            var preComments = this.parseComments();\n            this.state = ParseState.StartStatement;\n\n            function isAmbient() {\n                return hasFlag(modifiers, Modifiers.Ambient) || hasFlag(parentModifiers, Modifiers.Ambient);\n            }\n\n            function mayNotBeExported() {\n                if (hasFlag(modifiers, Modifiers.Exported)) {\n                    this.reportError("Statement may not be exported");\n                }\n            }\n\n            for (; ;) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.EndOfFile:\n                        ast = new AST(NodeType.Error);\n                        ast.minChar = minChar;\n                        ast.limChar = this.scanner.pos;\n                        break;\n                    case TokenID.Function:\n                        if (this.parsingDeclareFile || isAmbient() || this.ambientModule) {\n                            this.currentToken = this.scanner.scan();\n                            fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                      modifiers, true, false);\n                            if (fnOrVar.nodeType == NodeType.VarDecl) {\n                                this.reportParseError("function keyword can only introduce function declaration");\n                            }\n                            else if ((fnOrVar.nodeType == NodeType.FuncDecl) && ((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                needTerminator = true;\n                            }\n                            ast = fnOrVar;\n                            if (this.parsingDeclareFile || this.ambientModule && ast.nodeType == NodeType.FuncDecl) {\n                                (<FuncDecl>ast).fncFlags |= FncFlags.Exported;\n                            }\n                        }\n                        else {\n                            ast = this.parseFncDecl(errorRecoverySet, true, false, false, null, false, false, isAmbient(), modifiers, null, true);\n                            if (hasFlag((<FuncDecl>ast).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                needTerminator = true;\n                            }\n                            if (this.ambientModule) {\n                                this.reportParseError("function declaration not permitted within ambient module");\n                            }\n                            if (hasFlag(modifiers, Modifiers.Exported)) {\n                                (<FuncDecl>ast).fncFlags |= FncFlags.Exported;\n                            }\n                        }\n                        break;\n                    case TokenID.Module:\n                        if ((allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("module not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseModuleDecl(errorRecoverySet, modifiers, preComments);\n                            preComments = null;\n                        }\n                        break;\n                    case TokenID.Import:\n                        if ((allowedElements & AllowedElement';
var v27737 = v27738 + 's.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("module not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            if (hasFlag(modifiers, Modifiers.Exported)) {\n                                this.reportParseError("export keyword not permitted on import declaration");\n                            }\n                            ast = this.parseImportDeclaration(errorRecoverySet, modifiers);\n                            needTerminator = true;\n                        }\n                        break;\n                    case TokenID.Export:\n                        if ((allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None) {\n                            this.reportParseError("\'export\' statements are only allowed at the global and module levels");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        if (this.topLevel) {\n                            this.hasTopLevelImportOrExport = true;\n                        }\n                        modifiers |= Modifiers.Exported;\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Private:\n                        modifiers |= Modifiers.Private;\n\n                        this.currentToken = this.scanner.scan();\n\n                        if (this.parsingClassConstructorDefinition) {\n\n                            if (!this.inferPropertiesFromThisAssignment) {\n                                this.reportParseError("Property declarations are not permitted within constructor bodies");\n                            }\n\n                            minChar = this.scanner.pos;\n                            if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TokenID.Dot)) {\n                                this.reportParseError("Expected \'this.\' for property declaration");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n\n                                var id = Identifier.fromToken(this.currentToken);\n                                id.minChar = this.scanner.startPos;\n                                id.limChar = this.scanner.pos;\n\n                                this.currentToken = this.scanner.scan();\n                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);\n                            }\n                        }\n                        else {\n                            if (this.currentToken.tokenId != TokenID.Interface) {\n                                if (this.currentToken.tokenId == TokenID.Get) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Getter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                else if (this.currentToken.tokenId == TokenID.Set) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMod';
var v27736 = v27737 + 'e)) {\n                                        modifiers |= Modifiers.Setter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                          modifiers, isAmbient(), false);\n                                if ((fnOrVar.nodeType == NodeType.VarDecl) ||\n                                    ((fnOrVar.nodeType == NodeType.FuncDecl) && (hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction)))) {\n                                    needTerminator = true;\n                                }\n                                ast = fnOrVar;\n                            }\n                        }\n                        break;\n                    case TokenID.Public:\n                        if (this.parsingClassConstructorDefinition) {\n\n                            if (!this.inferPropertiesFromThisAssignment) {\n                                this.reportParseError("Property declarations are not permitted within constructor bodies");\n                            }\n\n                            this.currentToken = this.scanner.scan(); \n                            minChar = this.scanner.pos;\n                            modifiers |= Modifiers.Public;\n                            if (this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != TokenID.This || (this.currentToken = this.scanner.scan()).tokenId != TokenID.Dot)) {\n                                this.reportParseError("Expected \'this.\' for property declaration");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n\n                                var id = Identifier.fromToken(this.currentToken);\n                                id.minChar = this.scanner.startPos;\n                                id.limChar = this.scanner.pos;\n\n                                this.currentToken = this.scanner.scan();\n                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);\n                            }\n                        }\n                        else {\n                            if ((allowedElements & AllowedElements.Properties) == AllowedElements.None) {\n                                this.reportParseError("\'property\' statements are only allowed within classes");\n                                this.currentToken = this.scanner.scan();\n                                ast = new AST(NodeType.Error);\n                                ast.minChar = minChar;\n                                ast.limChar = this.scanner.lastTokenLimChar();\n                            }\n                            else {\n                                modifiers |= Modifiers.Public;\n                                this.currentToken = this.scanner.scan();\n                                if (this.currentToken.tokenId == TokenID.Get) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Getter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n                                else if (this.currentToken.tokenId == TokenID.Set) {\n                                    this.prevIDTok = this.currentToken;\n                                    this.currentToken = this.scanner.scan();\n                                    if (codeGenTarget < CodeGenTarget.ES5) {\n                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                                    }\n                                    if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                        modifiers |= Modifiers.Setter;\n                                        this.prevIDTok = null;\n                                    }\n                                }\n       ';
var v27735 = v27736 + '                         fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                            modifiers, isAmbient(), false);\n                                if ((fnOrVar.nodeType == NodeType.VarDecl) ||\n                                    ((fnOrVar.nodeType == NodeType.FuncDecl) && hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction))) {\n                                    needTerminator = true;\n                                }\n                                ast = fnOrVar;\n                            }\n                        }\n                        break;\n                    case TokenID.Declare:\n                        if (!(allowedElements & AllowedElements.AmbientDeclarations)) {\n                            this.reportParseError("Ambient declarations are only allowed at the top-level or module scopes")\n                        }\n                        if (!this.parsingDeclareFile && hasFlag(parentModifiers, Modifiers.Ambient)) {\n                            this.reportParseError("Duplicate ambient declaration in this context. (Is the enclosing module or class already ambient?)")\n                        }\n                        modifiers |= Modifiers.Ambient;\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Class:\n                        if ((allowedElements & AllowedElements.ClassDeclarations) == AllowedElements.None) {\n                            this.reportParseError("class not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseClassDecl(errorRecoverySet, minChar, modifiers);\n                        }\n                        break;\n                    case TokenID.Interface:\n                        if ((allowedElements & AllowedElements.InterfaceDeclarations) == AllowedElements.None) {\n                            this.reportParseError("interface not allowed in this context");\n                            this.currentToken = this.scanner.scan();\n                            ast = new AST(NodeType.Error);\n                            ast.minChar = minChar;\n                            ast.limChar = this.scanner.lastTokenLimChar();\n                        }\n                        else {\n                            ast = this.parseInterfaceDecl(errorRecoverySet, modifiers);\n                        }\n                        break;\n                    case TokenID.Var:\n                        var declAst: AST = this.parseVariableDeclaration(errorRecoverySet | ErrorRecoverySet.StmtStart, modifiers,\n                                                     true, false);\n                        if (declAst.nodeType == NodeType.VarDecl) {\n                            ast = declAst;\n                        }\n                        else {\n                            ast = new Block(<ASTList>declAst, false);\n                        }\n                        needTerminator = true;\n                        break;\n                    case TokenID.Static:\n\n                        if (this.currentClassDecl == null) {\n                            this.reportParseError("Statics may only be class members");\n                        }\n\n                        mayNotBeExported();\n                        modifiers |= Modifiers.Public;\n                        this.currentToken = this.scanner.scan();\n                        if (this.currentToken.tokenId == TokenID.Get) {\n                            this.prevIDTok = this.currentToken;\n                            this.currentToken = this.scanner.scan();\n                            if (codeGenTarget < CodeGenTarget.ES5) {\n                                this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                            }\n                            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n                                modifiers |= Modifiers.Getter;\n                                this.prevIDTok = null;\n                            }\n                        }\n                        else if (this.currentToken.tokenId == TokenID.Set) {\n                            this.currentToken = this.scanner.scan();\n                            if (codeGenTarget < CodeGenTarget.ES5) {\n                                this.reportParseError("Property accessors are only available when targeting ES5 or greater");\n                            }\n                            if ((this.currentToken.tokenId == TokenID.Identifier) || convertTokToID(this.currentToken, this.strictMode)) {\n             ';
var v27734 = v27735 + '                   modifiers |= Modifiers.Setter;\n                            }\n                        }\n                        if (isAmbient()) {\n                            modifiers |= Modifiers.Ambient;\n                        }\n                        fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | ErrorRecoverySet.SColon,\n                                                  modifiers, this.parsingDeclareFile || (modifiers & Modifiers.Ambient) != Modifiers.None, true);\n\n                        var staticsList = this.topStaticsList();\n                        if (staticsList && fnOrVar.nodeType == NodeType.VarDecl) {\n                            staticsList.append(fnOrVar);\n                        }\n\n                        if (fnOrVar.nodeType == NodeType.VarDecl || ((fnOrVar.nodeType == NodeType.FuncDecl) && hasFlag((<FuncDecl>fnOrVar).fncFlags, FncFlags.IsFatArrowFunction))) {\n                            needTerminator = true;\n                        }\n\n                        ast = fnOrVar;\n                        break;\n                    case TokenID.For:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("syntax error: for statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart | ErrorRecoverySet.Var);\n                        this.state = ParseState.ForInit;\n                        forInOk = true;\n                        switch (this.currentToken.tokenId) {\n                            case TokenID.Var:\n                                temp = this.parseVariableDeclaration(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                  ErrorRecoverySet.In, Modifiers.None, false, false);\n                                break;\n                            case TokenID.Semicolon:\n                                temp = null;\n                                this.state = ParseState.ForCondStart;\n                                break;\n                            default:\n                                temp = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                               ErrorRecoverySet.In, OperatorPrecedence.None, false,\n                                               TypeContext.NoTypes);\n                                break;\n                        }\n                        this.state = ParseState.ForInitAfterVar;\n                        if (this.currentToken.tokenId == TokenID.In) {\n                            if ((temp == null) || (!forInOk)) {\n                                this.reportParseError("malformed for statement");\n                                if (this.errorRecovery) {\n                                    this.skip(errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                    ast = new AST(NodeType.Empty);\n                                    ast.flags |= ASTFlags.Error;\n                                }\n                            }\n                            else {\n                                this.currentToken = this.scanner.scan();\n                                var forInStmt = new ForInStatement(temp,\n                                                                 this.parseExpr(ErrorRecoverySet.RParen |\n                                                                           errorRecoverySet,\n                                                                           OperatorPrecedence.Comma,\n                                                                           false,\n                                                                           TypeContext.NoTypes));\n\n                                forInStmt.limChar = this.scanner.pos;\n                                forInStmt.statement.minChar = minChar;\n                                forInStmt.statement.limChar = this.scanner.pos;\n                                this.checkCurrentToken(TokenID.CloseParen, ErrorRecoverySet.StmtStart | errorRecoverySet);\n                                this.pushStmt(forInStmt, labelList);\n                                forInStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                                this.popStmt();\n                                forInStmt.minChar = minChar;\n                                ast = forInStmt;\n                            }\n                        }\n                        else {\n                            var forStmt: ForStatement = new ForStatement(temp);\n                            forStmt.minChar = minChar;\n                            this.checkCurrentToken(TokenID.Semicolon, errorRecoverySet);\n                            if (this.currentToken.tokenId == TokenID.Semicolon) {\n                                forStmt.cond = null;\n                 ';
var v27733 = v27734 + "           }\n                            else {\n                                forStmt.cond = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                       ErrorRecoverySet.RParen,\n                                                       OperatorPrecedence.None, true,\n                                                       TypeContext.NoTypes);\n                                if (this.currentToken.tokenId != TokenID.Semicolon) {\n                                    this.skip(errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                    ast = forStmt;\n                                    ast.flags |= ASTFlags.Error;\n                                }\n                            }\n                            this.currentToken = this.scanner.scan();\n                            if (this.currentToken.tokenId == TokenID.CloseParen) {\n                                forStmt.incr = null;\n                            }\n                            else {\n                                forStmt.incr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon |\n                                                       ErrorRecoverySet.RParen,\n                                                       OperatorPrecedence.None, true,\n                                                       TypeContext.NoTypes);\n                            }\n                            this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n                            this.pushStmt(forStmt, labelList);\n                            forStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                            this.popStmt();\n                            forStmt.limChar = forStmt.body.limChar;\n                            ast = forStmt;\n                        }\n                        break;\n                    case TokenID.With: {\n                        if (codeGenTarget < CodeGenTarget.ES5) {\n                            this.reportParseError(\"'with' statements are only available in ES5 codegen mode or better\");\n                        }\n\n                        if (this.strictMode) {\n                            this.reportParseError(\"'with' statements are not available in strict mode\");\n                        }\n\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError(\"'with' statement does not take modifiers\");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart | ErrorRecoverySet.Var);\n\n                        var expr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.Colon,\n                                                            OperatorPrecedence.None, true,\n                                                            TypeContext.NoTypes);\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n\n                        var withStmt = new WithStatement(expr);\n                        withStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                        withStmt.minChar = minChar;\n                        withStmt.limChar = withStmt.body.limChar;\n                        ast = withStmt;\n                    }\n                        break;\n                    case TokenID.Switch: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError(\"'switch' statement does not take modifiers\");\n                        }\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n\n                        var switchStmt = new SwitchStatement(this.parseExpr(errorRecoverySet |\n                                                                     ErrorRecoverySet.RParen,\n                                                                     OperatorPrecedence.None,\n                                                                     true,\n                                                                     TypeContext.NoTypes));\n                        switchStmt.statement.minChar = minChar;\n                        switchStmt.statement.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.LCurly);\n                        var caseListMinChar = this.scanner.startPos;\n                         this.checkCurrentToken(TokenID.OpenBrace, errorRecoverySet | ErrorRecoverySet.SCase);\n                        switchStmt.defaultCase = null;\n                        switchStmt.caseList = new ASTList();\n                        var caseStmt: CaseStatement = null;\n                        this.push";
var v27732 = v27733 + 'Stmt(switchStmt, labelList);\n                        for (; ;) {\n                            if ((this.currentToken.tokenId == TokenID.Case) ||\n                                (this.currentToken.tokenId == TokenID.Default)) {\n                                var isDefault = (this.currentToken.tokenId == TokenID.Default);\n                                caseStmt = new CaseStatement();\n                                caseStmt.minChar = this.scanner.startPos;\n                                this.currentToken = this.scanner.scan();\n                                if (isDefault) {\n                                    switchStmt.defaultCase = caseStmt;\n                                }\n                                else {\n                                    caseStmt.expr = this.parseExpr(errorRecoverySet | ErrorRecoverySet.Colon,\n                                                            OperatorPrecedence.None, true,\n                                                            TypeContext.NoTypes);\n                                }\n                                this.checkCurrentToken(TokenID.Colon, errorRecoverySet | ErrorRecoverySet.StmtStart);\n                                caseStmt.body = new ASTList();\n                                this.parseStatementList(errorRecoverySet | ErrorRecoverySet.RCurly,\n                                              caseStmt.body, false, true, allowedElements, modifiers);\n                                caseStmt.limChar = caseStmt.body.limChar;\n                                switchStmt.caseList.append(caseStmt);\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        // end of switch statement\n                        switchStmt.caseList.minChar = caseListMinChar;\n                        switchStmt.caseList.limChar = this.scanner.pos;\n                        switchStmt.limChar = switchStmt.caseList.limChar;\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        this.popStmt();\n                        ast = switchStmt;\n                        break;\n                    }\n                    case TokenID.While: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'while\' statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, ErrorRecoverySet.ExprStart |\n                                  errorRecoverySet);\n                        var whileStmt = new WhileStatement(this.parseExpr(errorRecoverySet |\n                                                                   ErrorRecoverySet.RParen,\n                                                                   OperatorPrecedence.None,\n                                                                   true, TypeContext.NoTypes));\n                        whileStmt.minChar = minChar;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet |\n                                  ErrorRecoverySet.StmtStart);\n                        this.pushStmt(whileStmt, labelList);\n                        whileStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                        whileStmt.limChar = whileStmt.body.limChar;\n                        this.popStmt();\n                        ast = whileStmt;\n                        break;\n                    }\n                    case TokenID.Do: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("\'do\' statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var doStmt = new DoWhileStatement();\n                        doStmt.minChar = minChar;\n                        this.pushStmt(doStmt, labelList);\n                        doStmt.body = this.parseStatement(errorRecoverySet | ErrorRecoverySet.While,\n                                                   allowedElements, parentModifiers);\n                        this.popStmt();\n                        doStmt.whileAST = new Identifier("while");\n                        doStmt.whileAST.minChar = this.scanner.startPos;\n                        this.checkCurrentToken(TokenID.While, errorRecoverySet | ErrorRecoverySet.LParen);\n                        doStmt.whileAST.limChar = doStmt.whileAST.minChar + 5;\n                        this.checkCurrentToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n                        doStmt.cond = this.parseExpr(errorRecoverySet | ErrorRecoverySet.RParen,\n                                           ';
var v27731 = v27732 + '   OperatorPrecedence.None, true, TypeContext.NoTypes);\n                        doStmt.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet);\n                        ast = doStmt;\n                        // compatibility; more strict would be to require the \';\'\n                        if (this.currentToken.tokenId == TokenID.Semicolon) {\n                            this.currentToken = this.scanner.scan();\n                        }\n                        break;\n                    }\n                    case TokenID.If: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("if statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.checkNextToken(TokenID.OpenParen, errorRecoverySet | ErrorRecoverySet.ExprStart);\n                        var ifStmt = new IfStatement(this.parseExpr(errorRecoverySet |\n                                                             ErrorRecoverySet.LParen,\n                                                             OperatorPrecedence.None, true,\n                                                             TypeContext.NoTypes));\n                        ifStmt.minChar = minChar;\n                        ifStmt.statement.minChar = minChar;\n                        ifStmt.statement.limChar = this.scanner.pos;\n                        this.checkCurrentToken(TokenID.CloseParen, errorRecoverySet | ErrorRecoverySet.StmtStart);\n                        this.pushStmt(ifStmt, labelList);\n                        ifStmt.thenBod = this.parseStatement(ErrorRecoverySet.Else | errorRecoverySet,\n                                                      allowedElements, parentModifiers);\n                        ifStmt.limChar = ifStmt.thenBod.limChar;\n                        if (this.currentToken.tokenId == TokenID.Else) {\n                            this.currentToken = this.scanner.scan();\n                            ifStmt.elseBod = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);\n                            ifStmt.limChar = ifStmt.elseBod.limChar;\n                        }\n                        this.popStmt();\n                        ast = ifStmt;\n                        break;\n                    }\n                    case TokenID.Try: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("try statement does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        ast = this.parseTryCatchFinally(errorRecoverySet, parentModifiers, labelList);\n                        break;\n                    }\n                    case TokenID.OpenBrace: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("block does not take modifiers");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var block = new Block(new ASTList(), true);\n                        this.pushStmt(block, labelList);\n                        this.parseStatementList(\n                            errorRecoverySet | ErrorRecoverySet.RCurly, block.statements,\n                            /*sourceElements:*/ false, /*noLeadingCase:*/ false, AllowedElements.None, modifiers);\n                        this.popStmt();\n                        block.statements.minChar = minChar;\n                        block.statements.limChar = this.scanner.pos;\n                        block.minChar = block.statements.minChar;\n                        block.limChar = block.statements.limChar;\n                        this.checkCurrentToken(TokenID.CloseBrace, errorRecoverySet);\n                        ast = block;\n                        break;\n                    }\n                    case TokenID.Semicolon:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifier can not appear here");\n                        }\n                        ast = new AST(NodeType.Empty);\n                        this.currentToken = this.scanner.scan();\n                        break;\n                    case TokenID.Break:\n                    case TokenID.Continue: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before jump statement");\n                        }\n                        var jump =\n                            new Jump((this.currentToken.tokenId == TokenID.Break) ? NodeType.Break : NodeType.Cont';
var v27730 = v27731 + 'inue);\n                        this.currentToken = this.scanner.scan();\n                        if ((this.currentToken.tokenId == TokenID.Identifier) && (!this.scanner.lastTokenHadNewline())) {\n                            // Labeled break or continue.\n                            jump.target = this.currentToken.getText();\n                            this.currentToken = this.scanner.scan();\n                        }\n                        this.resolveJumpTarget(jump);\n                        ast = jump;\n                        needTerminator = true;\n                        break;\n                    }\n                    case TokenID.Return: {\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before return statement");\n                        }\n                        if (!this.inFunction) {\n                            this.reportParseError("return statement outside of function body");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var retStmt = new ReturnStatement();\n                        retStmt.minChar = minChar;\n                        if ((this.currentToken.tokenId != TokenID.Semicolon) &&\n                            (this.currentToken.tokenId != TokenID.CloseBrace) &&\n                            (!(this.scanner.lastTokenHadNewline()))) {\n                            retStmt.returnExpression = this.parseExpr(errorRecoverySet |\n                                                               ErrorRecoverySet.SColon,\n                                                               OperatorPrecedence.None,\n                                                               true, TypeContext.NoTypes);\n                        }\n                        needTerminator = true;\n                        retStmt.limChar = this.scanner.lastTokenLimChar();\n                        ast = retStmt;\n                        break;\n                    }\n                    case TokenID.Throw:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before a throw statement");\n                        }\n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        if ((this.currentToken.tokenId != TokenID.Semicolon) &&\n                            (this.currentToken.tokenId != TokenID.CloseBrace) &&\n                            (!(this.scanner.lastTokenHadNewline()))) {\n                            temp = this.parseExpr(errorRecoverySet | ErrorRecoverySet.SColon,\n                                           OperatorPrecedence.None, true, TypeContext.NoTypes);\n                        }\n                        else {\n                            this.reportParseError("throw with no target");\n                            temp = null;\n                        }\n                        ast = new UnaryExpression(NodeType.Throw, temp);\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        needTerminator = true;\n                        break;\n                    case TokenID.Enum:\n                        // TODO: check module allowed here\n                        //minChar=scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        ast = this.parseEnumDecl(errorRecoverySet, modifiers);\n                        ast.minChar = minChar;\n                        ast.limChar = this.scanner.lastTokenLimChar();\n                        if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Ambient)) {\n                            (<ModuleDeclaration>ast).modFlags |= ModuleFlags.Ambient;\n                        }\n                        if (this.parsingDeclareFile || this.ambientModule || hasFlag(modifiers, Modifiers.Exported)) {\n                            (<ModuleDeclaration>ast).modFlags |= ModuleFlags.Exported;\n                        }\n                        break;\n                    case TokenID.Debugger:\n                        mayNotBeExported();\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before debugger statement");\n                        }\n                        \n                        minChar = this.scanner.startPos;\n                        this.currentToken = this.scanner.scan();\n                        var debuggerStmt = new DebuggerStatement();\n                        debuggerStmt.minChar = minChar;\n                        needTerminator = true;\n                        debuggerStmt.limChar = this.scanner.lastTokenLimChar();\n                        ast = debuggerStmt;\n                       ';
var v27729 = v27730 + ' break;\n                    default:\n                        if (modifiers != Modifiers.None) {\n                            this.reportParseError("modifiers can not appear before an expression statement or label");\n                        }\n                        minChar = this.scanner.startPos;\n                        var svPos = this.scanner.pos;\n                        temp = this.parseExpr(ErrorRecoverySet.Colon | ErrorRecoverySet.StmtStart |\n                                       errorRecoverySet, OperatorPrecedence.None, true,\n                                       TypeContext.NoTypes);\n                        if (this.scanner.pos == svPos) {\n                            // no progress\n                            this.currentToken = this.scanner.scan();\n                            ast = temp;\n                        }\n                        else if ((this.currentToken.tokenId == TokenID.Colon) && (!this.scanner.lastTokenHadNewline()) &&\n                                        temp && (temp.nodeType == NodeType.Name)) {\n                                            // It\'s a label\n                            if (labelList == null) {\n                                labelList = new ASTList();\n                            }\n                            labelList.append(new Label(<Identifier>temp));\n                            this.currentToken = this.scanner.scan();\n                        }\n                        else {\n                            // expression statement\n                            ast = temp;\n                            needTerminator = true;\n                        }\n                }\n                if (ast) {\n                    break;\n                }\n            }\n            if (needTerminator) {\n                switch (this.currentToken.tokenId) {\n                    case TokenID.Semicolon:\n                        this.currentToken = this.scanner.scan();\n                        ast.flags |= ASTFlags.ExplicitSemicolon;\n                        break;\n                    case TokenID.EndOfFile:\n                        // Extend any incomplete statements to include EOF token. This makes sure that this node is in the path \n                        // when completion or parameter help is requested.\n                        ast.limChar = this.scanner.pos;\n                        // IntentionaCloseBracethrough\n                    case TokenID.CloseBrace:\n                        ast.flags |= ASTFlags.AutomaticSemicolon;\n                        if (this.style_requireSemi) {\n                            this.reportParseStyleError("no automatic semicolon");\n                        }\n                        break;\n                    default:\n                        if (!this.scanner.lastTokenHadNewline()) {\n                            this.reportParseError("Expected \';\'");\n                        }\n                        else {\n                            ast.flags |= ASTFlags.AutomaticSemicolon;\n                            if (this.style_requireSemi) {\n                                this.reportParseStyleError("no automatic semicolon");\n                            }\n                        }\n                        break;\n                }\n            }\n            if (labelList) {\n                ast = new LabeledStatement(labelList, ast);\n            }\n\n            ///////////////////////////////////////////////////////////\n            //TODO: Eventually, we want to remove "minChar" and "limChar" assignments here,\n            //      as they are sometimes not specific enough for each statement kind.\n            ast.minChar = minChar;\n            // Only update "limChar" if it is not better than "lastTokenLimChar()"\n            ast.limChar = max(ast.limChar, this.scanner.lastTokenLimChar());\n            //\n            ///////////////////////////////////////////////////////////\n\n            if (preComments) {\n                ast.preComments = preComments;\n            }\n            if (this.ambientModule && (!this.okAmbientModuleMember(ast))) {\n                this.reportParseError("statement not permitted within ambient module");\n            }\n            ast.flags |= ASTFlags.IsStatement;\n            return ast;\n        }\n\n        private okAmbientModuleMember(ast: AST) {\n            var nt = ast.nodeType;\n            return (nt == NodeType.ClassDeclaration) || (nt == NodeType.ImportDeclaration) || (nt == NodeType.InterfaceDeclaration) || (nt == NodeType.ModuleDeclaration) ||\n                (nt == NodeType.Empty) || (nt == NodeType.VarDecl) || \n                ((nt == NodeType.Block) && !(<Block>ast).isStatementBlock) ||\n                ((nt == NodeType.FuncDecl) && ((<FuncDecl>ast).isMethod()));\n        }\n\n        private parseStatementList(errorRecoverySet: ErrorRecoverySet,\n                                   statements: ASTList,\n                                   sourceElms: bool,\n                                   noLeadingCase: bool,\n                                   allowedElements: A';
var v27728 = v27729 + 'llowedElements,\n                                   parentModifiers: Modifiers): void {\n            var directivePrologue = sourceElms;\n            statements.minChar = this.scanner.startPos;\n            var limChar = this.scanner.pos;\n            var innerStmts = (allowedElements & AllowedElements.ModuleDeclarations) == AllowedElements.None;\n            var classNope = (allowedElements & AllowedElements.ClassDeclarations) == AllowedElements.None;\n\n            errorRecoverySet |= ErrorRecoverySet.TypeScriptS | ErrorRecoverySet.RCurly;\n\n            this.state = ParseState.StartStatementList;\n            var oldStrictMode = this.strictMode;\n            this.nestingLevel++;\n            for (; ;) {\n                if ((this.currentToken.tokenId == TokenID.CloseBrace) ||\n                    (noLeadingCase && ((this.currentToken.tokenId == TokenID.Case) || (this.currentToken.tokenId == TokenID.Default))) ||\n                    (innerStmts && (this.currentToken.tokenId == TokenID.Export)) ||\n                    (classNope && (this.currentToken.tokenId == TokenID.Class)) ||\n                    (this.currentToken.tokenId == TokenID.EndOfFile)) {\n                    this.state = ParseState.EndStmtList;\n                    statements.limChar = limChar;\n                    if (statements.members.length == 0) {\n                        statements.preComments = this.parseComments();\n                    }\n                    else {\n                        statements.postComments = this.parseComments();\n                    }\n                    this.strictMode = oldStrictMode;\n                    this.nestingLevel--;\n                    return;\n                }\n\n                var stmt = this.parseStatement(errorRecoverySet &\n                                        (~(ErrorRecoverySet.Else | ErrorRecoverySet.RParen |\n                                           ErrorRecoverySet.Catch | ErrorRecoverySet.Colon)),\n                                        allowedElements, parentModifiers);\n\n\n                if (stmt) {\n                    stmt.postComments = this.combineComments(stmt.postComments, this.parseCommentsForLine(this.scanner.prevLine));\n                    statements.append(stmt);\n                    limChar = stmt.limChar;\n                    if (directivePrologue) {\n                        if (stmt.nodeType == NodeType.QString) {\n                            var qstring = <StringLiteral>stmt;\n                            if (qstring.text == "\\"use strict\\"") {\n                                statements.flags |= ASTFlags.StrictMode;\n                                this.strictMode = true;\n                            }\n                            else {\n                                directivePrologue = false;\n                            }\n                        }\n                        else {\n                            directivePrologue = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        private fname = "";\n\n        public quickParse(sourceText: ISourceText, filename: string, unitIndex: number): QuickParseResult {\n            //TODO: REVIEW: We set this to avoid adding a "module" decl in the resulting script (see parse() method)\n            var svGenTarget = TypeScript.moduleGenTarget;\n            try {\n                TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Local;\n                var script = this.parse(sourceText, filename, unitIndex, AllowedElements.QuickParse);\n                return new QuickParseResult(script, this.scanner.lexState);\n            }\n            finally {\n                TypeScript.moduleGenTarget = svGenTarget;\n            }\n        }\n\n        public parse(sourceText: ISourceText, filename: string, unitIndex: number, allowedElements = AllowedElements.Global): Script {\n            // Reset all parser state here.  This allows us to be resilient to reentrancy if an \n            // exception is thrown.\n            this.fname = filename;\n            this.currentUnitIndex = unitIndex;\n\n            this.currentToken = null;\n            this.needTerminator = false;\n            this.inFunction = false;\n            this.inInterfaceDecl = false;\n            this.inFncDecl = false;\n            this.state = ParseState.StartStatementList;\n            this.ambientModule = false;\n            this.ambientClass = false;\n            this.topLevel = true;\n            this.allowImportDeclaration = true;\n            this.prevIDTok = null;\n            this.statementInfoStack = new IStatementInfo[];\n            this.hasTopLevelImportOrExport = false;\n            this.strictMode = false;\n            this.nestingLevel = 0;\n            this.prevExpr = null;\n            this.currentClassDefinition = null;\n            this.parsingClassConstructorDefinition = false;\n            this.parsingDeclareFile = false;\n            this.amdDependencies = [];\n            this.inferPropertiesFromThisAssignment = false;\n            this.requiresExtendsBlock = false;\n\n';
var v27727 = v27728 + '            this.scanner.resetComments();\n            this.scanner.setErrorHandler((message) =>this.reportParseError(message));\n            this.scanner.setSourceText(sourceText, LexMode.File);\n\n            var leftCurlyCount = this.scanner.leftCurlyCount;\n            var rightCurlyCount = this.scanner.rightCurlyCount;\n\n            var minChar = this.scanner.pos;\n            this.currentToken = this.scanner.scan();\n            this.pushDeclLists();\n            var bod = new ASTList();\n            bod.minChar = minChar;\n\n            this.state = ParseState.StartScript;\n            this.parsingDeclareFile = isDSTRFile(filename) || isDTSFile(filename);\n\n            while (true) {\n                this.parseStatementList(\n                    ErrorRecoverySet.EOF | ErrorRecoverySet.Func,\n                    bod, /*sourceElements:*/ true, /*noLeadingCase:*/ false,\n                    allowedElements, Modifiers.None);\n\n                if (this.currentToken.tokenId === TokenID.EndOfFile) {\n                    break;\n                }\n\n                // Still have remaining tokens in the file.  Report error for this unexpected token,\n                // skip it, and continue trying to parse statements until we\'re done. \n                var badToken = tokenTable[this.currentToken.tokenId];\n                this.reportParseError("Unexpected statement block terminator \'" + badToken.text + "\'");\n\n                this.currentToken = this.scanner.scan();\n            }\n\n            this.state = ParseState.EndScript;\n\n            bod.limChar = this.scanner.pos;\n\n            var topLevelMod: ModuleDeclaration = null;\n            if (moduleGenTarget != ModuleGenTarget.Local && this.hasTopLevelImportOrExport) {\n                var correctedFileName = switchToForwardSlashes(filename);\n                var id: Identifier = new Identifier(correctedFileName);\n                topLevelMod = new ModuleDeclaration(id, bod, this.topVarList(), this.topScopeList(), null);\n\n                topLevelMod.modFlags |= ModuleFlags.IsDynamic;\n                topLevelMod.modFlags |= ModuleFlags.IsWholeFile;\n                topLevelMod.modFlags |= ModuleFlags.Exported;\n\n                if (this.parsingDeclareFile) {\n                    topLevelMod.modFlags |= ModuleFlags.Ambient;\n                }\n\n                topLevelMod.minChar = minChar;\n                topLevelMod.limChar = this.scanner.pos;\n                topLevelMod.prettyName = getPrettyName(correctedFileName);\n                topLevelMod.containsUnicodeChar = this.scanner.seenUnicodeChar;\n                topLevelMod.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n\n                topLevelMod.amdDependencies = this.amdDependencies;\n\n                bod = new ASTList();\n                bod.minChar = topLevelMod.minChar;\n                bod.limChar = topLevelMod.limChar;\n                bod.append(topLevelMod);\n            }\n\n            var script = new Script(this.topVarList(), this.topScopeList());\n            script.bod = bod;\n            this.popDeclLists();\n            script.minChar = minChar;\n            script.limChar = this.scanner.pos;\n            script.locationInfo = new LocationInfo(filename, this.scanner.lineMap, unitIndex);\n            script.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;\n            script.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;\n            script.isDeclareFile = this.parsingDeclareFile;\n            script.topLevelMod = topLevelMod;\n            script.containsUnicodeChar = this.scanner.seenUnicodeChar;\n            script.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n            script.requiresExtendsBlock = this.requiresExtendsBlock;\n            return script;\n        }\n    }\n\n    export function quickParse(logger: TypeScript.ILogger, scopeStartAST: AST, sourceText: ISourceText, minChar: number, limChar: number,\n        errorCapture: (minChar: number, charLen: number, message: string, unitIndex: number) => void ): QuickParseResult {\n\n        var fragment = sourceText.getText(minChar, limChar);\n        logger.log("Quick parse range (" + minChar + "," + limChar + "): \\"" + TypeScript.stringToLiteral(fragment, 100) + "\\"");\n\n        var quickParser = new Parser();\n        quickParser.setErrorRecovery(null);\n        quickParser.errorCallback = errorCapture;\n\n        // REVIEW: use enclosing scope to determine this\n        // REVIEW: Why even use class here?\n        var quickClassDecl = new ClassDeclaration(null, null, null, null);\n        quickParser.currentClassDecl = quickClassDecl;\n\n        var result = quickParser.quickParse(new StringSourceText(fragment), "", 0);\n        return result;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/license';
var v27726 = v27727 + 's/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // We need to catch both left and right quotes\n    // (depending on your editor\'s font, this may not be clear...)    \n    export function stripQuotes(str: string) {\n        return str.replace("\\"", "").replace("\'", "").replace("\'", "").replace("\\"", "")\n    }\n\n    export function isQuoted(str: string) {\n        return str.indexOf("\\"") != -1 || str.indexOf("\'") != -1 || str.indexOf("\'") != -1 || str.indexOf("\\"") != -1;\n    }\n\n    export function quoteStr(str: string) {\n        return "\\"" + str + "\\"";\n    }\n\n    export function swapQuotes(str: string) {\n\n        if (str.indexOf("\\"") != -1) {\n            str = str.replace("\\"", "\'");\n            str = str.replace("\\"", "\'");\n        }\n        else {\n            str = str.replace("\'", "\\"");\n            str = str.replace("\'", "\\"");\n        }\n\n        return str;\n    }\n\n    export function switchToForwardSlashes(path: string) {\n        return path.replace(/\\\\/g, "/");\n    }\n\n    export function trimModName(modName: string) {\n        // in case\'s it\'s a declare file...\n        if (modName.length > 6 && modName.substring(modName.length - 6, modName.length) == ".d.str") {\n            return modName.substring(0, modName.length - 6);\n        }\n        if (modName.length > 4 && modName.substring(modName.length - 4, modName.length) == ".str") {\n            return modName.substring(0, modName.length - 4);\n        }\n        if (modName.length > 5 && modName.substring(modName.length - 5, modName.length) == ".d.ts") {\n            return modName.substring(0, modName.length - 5);\n        }\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".ts") {\n            return modName.substring(0, modName.length - 3);\n        }\n        // in case\'s it\'s a .js file\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".js") {\n            return modName.substring(0, modName.length - 3);\n        }\n\n        return modName;\n    }\n\n    export function getDeclareFilePath(fname: string) {\n        return isSTRFile(fname) ? changePathToDSTR(fname) : isTSFile(fname) ? changePathToDTS(fname) : changePathToDTS(fname);\n    }\n\n    function isFileOfExtension(fname: string, ext: string) {\n        var invariantFname = fname.toLocaleUpperCase();\n        var invariantExt = ext.toLocaleUpperCase();\n        var extLength = invariantExt.length;\n        return invariantFname.length > extLength && invariantFname.substring(invariantFname.length - extLength, invariantFname.length) == invariantExt;\n    }\n\n    export function isJSFile(fname: string) {\n        return isFileOfExtension(fname, ".js");\n    }\n\n    export function isSTRFile(fname: string) {\n        return isFileOfExtension(fname, ".str");\n    }\n\n    export function isTSFile(fname: string) {\n        return isFileOfExtension(fname, ".ts");\n    }\n\n    export function isDSTRFile(fname: string) {\n        return isFileOfExtension(fname, ".d.str");\n    }\n\n    export function isDTSFile(fname: string) {\n        return isFileOfExtension(fname, ".d.ts");\n    }\n\n    export function getPrettyName(modPath: string, quote?=true, treatAsFileName?=false) { \n        var modName = treatAsFileName ? switchToForwardSlashes(modPath) : trimModName(stripQuotes(modPath));\n        var components = this.getPathComponents(modName);\n        return components.length ? (quote ? quoteStr(components[components.length - 1]) : components[components.length - 1]) : modPath;\n    }\n\n    export function getPathComponents(path: string) {\n        return path.split("/");\n    }\n\n    export function getRelativePathToFixedPath(fixedModFilePath: string, absoluteModPath: string) {\n        absoluteModPath = switchToForwardSlashes(absoluteModPath);\n\n        var modComponents = this.getPathComponents(absoluteModPath);\n        var fixedModComponents = this.getPathComponents(fixedModFilePath);\n\n        // Find the component that differs\n        var joinStartIndex = 0;\n        for (; joinStartIndex < modComponents.length && joinStartIndex < fixedModComponents.length ; joinStartIndex++) {\n            if (fixedModComponents[joinStartIndex] != modComponents[joinStartIndex]) {\n                break;\n            }\n        }\n\n        // Get the relative path\n        if (joinStartIndex != 0) {\n            var relativePath = "";\n            var relativePathComponents = modComponents.slice(joinStartIndex, modComponents.length);\n            for (; joinStartIndex < fixedModComponents.length; joinStartIndex++) {\n                if (fixedModComponents[joinStartIndex] != "") {\n                    relativePath = relativePath + "../";\n      ';
var v27725 = v27726 + '          }\n            }\n\n            return relativePath + relativePathComponents.join("/");\n        }\n\n        return absoluteModPath;\n    }\n\n    export function quoteBaseName(modPath: string) {\n        var modName = trimModName(stripQuotes(modPath));\n        var path = getRootFilePath(modName);\n        if (path == "") {\n            return modPath;\n        }\n        else {\n            var components = modName.split(path);\n            var fileIndex = components.length > 1 ? 1 : 0;\n            return quoteStr(components[fileIndex]);\n        }\n    }\n\n    export function changePathToSTR(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".str";\n    }\n\n    export function changePathToDSTR(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".d.str";\n    }\n\n    export function changePathToTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".ts";\n    }\n\n    export function changePathToDTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + ".d.ts";\n    }\n\n    export function isRelative(path: string) {\n        return path.charAt(0) == ".";\n    }\n    export function isRooted(path: string) {\n        return path.charAt(0) == "\\\\" || path.charAt(0) == "/" || (path.indexOf(":\\\\") != -1) || (path.indexOf(":/") != -1);\n    }\n\n    export function getRootFilePath(outFname: string) {\n        if (outFname == "") {\n            return outFname;\n        }\n        else {\n            var isPath = outFname.indexOf("/") != -1;\n            return isPath ? filePath(outFname) : "";\n        }\n    }\n\n    export function filePathComponents(fullPath: string) {\n        fullPath = switchToForwardSlashes(fullPath);\n        var components = getPathComponents(fullPath);\n        return components.slice(0, components.length - 1);\n    }\n\n    export function filePath(fullPath: string) {\n        var path = filePathComponents(fullPath);\n        return path.join("/") + "/";\n    }\n\n    export function normalizeURL(url: string): string {\n        var hostDomainAndPortRegex = /^(https?:\\/\\/[\\-\\w\\.]+(:\\d+)?\\/)(.*)$/i;\n        var matches = hostDomainAndPortRegex.exec(url);\n        if (matches) {\n            var hostDomainAndPort = matches[1];\n            var actualPath = matches[3];\n            return hostDomainAndPort + normalizePath(actualPath);\n        }\n        return normalizePath(url);\n    }\n\n    export var pathNormalizeRegExp = /\\//g;\n\n    export function normalizePath(path: string): string {\n        path = switchToForwardSlashes(path);\n        var startedWithSep = path.charAt(0) === "/";\n        var parts = this.getPathComponents(path);\n        for (var i = 0; i < parts.length; i++) {\n            if (parts[i] === "." || parts[i] === "") {\n                parts.splice(i, 1);\n                i--;\n            }\n            if (i > 0 && parts[i] === ".." && parts[i - 1] !== "..") {\n                parts.splice(i - 1, 2);\n                i -= 2;\n            }\n        }\n        return (startedWithSep ? "/" : "") + parts.join("/");\n    }\n\n    export function normalizeImportPath(path: string): string {\n        return normalizePath(path);\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    /// Compiler settings\n\n    export class StyleSettings {\n        // bitwise operations not permitted\n        public bitwise = false;  \n        // disallow non-block statements as bodies of compound statements\n        public blockInCompoundStmt = false;\n        // disallow == and !=\n        public eqeqeq = false;\n        // require body of for in loop to start with a filter\n        public forin = false;\n        // empty blocks permitted\n        public emptyBlocks = true;\n        // require result of new expression to be used (no new just for side-effects)\n        public newMustBeUsed = false;\n        // require semicolons to terminate statements\n        public requireSemi = false;\n        // no top-level assignment in conditionals if (a=b) { ...\n        public assignmentInCond = false;\n        // no == null or != null\n        public eqnull = false;\n        // permit eval\n        public evalOK = true;\n        // permit var use if decl in inner scope as in if (c) { var v=10; } v=11;\n        public innerScopeDeclEscape = true;\n        // permit functions in loops\n        public funcInLoop = true;\n        // permit re-declaration of local variable \n        public reDecl';
var v27724 = v27725 + 'areLocal = true;\n        // permit obj[\'x\'] in addition to obj.x\n        public literalSubscript = true;\n        // flag implicit \'any\'\n        public implicitAny = false;\n\n        public setOption(opt: string, val: bool): bool {\n            var optExists = this[opt];\n            if (optExists !== undefined) {\n                this[opt] = val;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        \n        public parseOptions(str: string) {\n            var opts=str.split(";");\n            for (var i = 0, len = opts.length; i < len; i++) {\n                var opt = opts[i];\n                var val = true;\n                var colonIndex=opt.lastIndexOf(":");\n                if (colonIndex >= 0) {\n                    var valStr = opt.substring(colonIndex+1);\n                    opt = opt.substring(0, colonIndex);\n                    if (valStr == "off") {\n                        val = false;\n                    }\n                }\n                if (!this.setOption(opt, val)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    \n    export class CompilationSettings {\n        public styleSettings = new StyleSettings();\n        public propagateConstants = false;\n        public minWhitespace = false;\n        public parseOnly = false;\n        public errorRecovery = false;\n        public emitComments = false;\n        public watch = false;\n        public exec = false;\n        public resolve = true;\n        public controlFlow = false;\n        public printControlFlow = false;\n        public controlFlowUseDef = false;\n        public errorOnWith = true;\n        public preprocess = true;\n        public canCallDefinitionSignature = false;\n\n        public inferPropertiesFromThisAssignment = false;\n        public useDefaultLib = true;\n\n        public codeGenTarget = CodeGenTarget.ES3;\n        public moduleGenTarget = ModuleGenTarget.Synchronous;\n        // --out option passed. \n        // Default is the "" which leads to multiple files generated next to the.ts files\n        public outputOption: string = "";\n        public mapSourceFiles = false;\n        public generateDeclarationFiles = false;\n\n        public useCaseSensitiveFileResolution = false;\n\n        public setStyleOptions(str: string) {\n            this.styleSettings.parseOptions(str);\n        }\n    }\n\n    ///\n    /// Preprocessing\n    ///\n    export interface IPreProcessedFileInfo {\n        settings: CompilationSettings;\n        referencedFiles: IFileReference[];\n        importedFiles: IFileReference[];\n        isLibFile: bool;\n    }\n\n    function getFileReferenceFromReferencePath(comment: string): IFileReference {\n        var referencesRegEx = /^(\\/\\/\\/\\s*<reference\\s+path=)(\'|")(.+?)\\2\\s*(static=(\'|")(.+?)\\2\\s*)*\\/>/gim;\n        var match = referencesRegEx.exec(comment);\n\n        if (match) {\n            var path: string = normalizePath(match[3]);\n            var adjustedPath = normalizePath(path);\n    \n            var isResident = match.length >= 7 && match[6] == "true";\n            if (isResident) {\n                CompilerDiagnostics.debugPrint(path + " is resident");\n            }\n            return { minChar: 0, limChar: 0, path: switchToForwardSlashes(adjustedPath), isResident: isResident };\n        }\n        else {\n            return null;\n        }\n    }\n\n    // used in the parser, but kept here in case we want to reintegrate it with preprocessing\n    export function getAdditionalDependencyPath(comment: string): string {\n        var amdDependencyRegEx = /^(\\/\\/\\/\\s*<amd-dependency\\s+path=)(\'|")(.+?)\\2\\s*(static=(\'|")(.+?)\\2\\s*)*\\/>/gim;\n        var match = amdDependencyRegEx.exec(comment);\n\n        if (match) {\n            var path: string = match[3];\n            return path;\n        }\n        else {\n            return null;\n        }\n    }\n\n    export function getImplicitImport(comment: string): bool {\n        var implicitImportRegEx = /^(\\/\\/\\/\\s*<implicit-import\\s*)*\\/>/gim;\n        var match = implicitImportRegEx.exec(comment);\n\n        if (match) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    export function getStyleSettings(comment: string, styleSettings: StyleSettings) {\n        var styleRegEx = /^(\\/\\/\\/\\s*<style\\s+)(([a-zA-Z])+=(\'|").+(\'|"))\\s*\\/>/gim;\n\n        var settings = styleRegEx.exec(comment);\n\n        if (settings) {\n            var settingsRegEx = /^([a-zA-Z]+=[\'"]on[\'|"])/gim;\n            settings = settingsRegEx.exec(settings[2]);\n                \n            if (settings) {\n                for (var i = 0; i < settings.length; i++) {\n                    var setting = (<string>settings[i]).split("=");\n                    var on = "\\"on\\"";\n\n                    switch (setting[0]) {\n                        case "blockInCompoundStmt": styleSettings.blockInCompoundStmt = setting[1] == on; break;\n                        case "eqeqeq": styleSettings.eqeqeq = setting[1] == on; break;';
var v27723 = v27724 + '\n                        case "forin": styleSettings.forin = setting[1] == on; break;\n                        case "emptyBlocks": styleSettings.emptyBlocks = setting[1] == on; break;\n                        case "newMustBeUsed": styleSettings.newMustBeUsed = setting[1] == on; break;\n                        case "requireSemi": styleSettings.requireSemi = setting[1] == on; break;\n                        case "assignmentInCond": styleSettings.assignmentInCond = setting[1] == on; break;\n                        case "eqnull": styleSettings.eqnull = setting[1] == on; break;\n                        case "evalOK": styleSettings.evalOK = setting[1] == on; break;\n                        case "innerScopeDeclEscape": styleSettings.innerScopeDeclEscape = setting[1] == on; break;\n                        case "funcInLoop": styleSettings.funcInLoop = setting[1] == on; break;\n                        case "reDeclareLocal": styleSettings.reDeclareLocal = setting[1] == on; break;\n                        case "literalSubscript": styleSettings.literalSubscript = setting[1] == on; break;\n                        case "implicitAny": styleSettings.implicitAny = setting[1] == on; break;                               \n                    }\n                }\n            }\n        }\n    }\n\n    export function getReferencedFiles(sourceText: ISourceText): IFileReference[] {\n        var preProcessInfo = preProcessFile(sourceText, null, false);\n        return preProcessInfo.referencedFiles;\n    }\n\n    export function preProcessFile(sourceText: ISourceText, options=new CompilationSettings(), readImportFiles? = true): IPreProcessedFileInfo {\n        var scanner = new Scanner();\n        scanner.resetComments();\n        scanner.setSourceText(sourceText, LexMode.File);\n\n        var tok: Token = scanner.scan();\n        var comments: CommentToken[] = [];\n        var comment: CommentToken = null;\n        var leftCurlies: Token[] = [];\n\n        var settings: CompilationSettings = options;\n        var referencedFiles: IFileReference[] = [];\n        var importedFiles: IFileReference[] = [];\n        var isLibFile: bool = false;\n\n        // only search out dynamic mods\n        // if you find a dynamic mod, ignore every other mod inside, until you balance rcurlies\n\n        while (tok.tokenId != TokenID.EndOfFile) {\n\n            if (readImportFiles && tok.tokenId == TokenID.Import) {\n\n                tok = scanner.scan();\n\n                if (tok.tokenId == TokenID.Identifier || convertTokToID(tok, false)) {\n                    tok = scanner.scan();\n\n                    if (tok.tokenId == TokenID.Equals) {\n                        tok = scanner.scan();\n\n                        if (tok.tokenId == TokenID.Module) {\n                            tok = scanner.scan();\n                            if (tok.tokenId == TokenID.OpenParen) {\n                                tok = scanner.scan();\n\n                                // import foo = module("foo")\n                                if (tok.tokenId == TokenID.StringLiteral) {\n                                    var ref = { minChar: scanner.startPos, limChar: scanner.pos, path: stripQuotes(switchToForwardSlashes(tok.getText())), isResident: false };\n                                    importedFiles.push(ref);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (tok.tokenId == TokenID.OpenBrace) {\n                leftCurlies.push(tok);\n            }\n\n            if (tok.tokenId == TokenID.CloseBrace) {\n                leftCurlies.pop();\n            }\n\n            tok = scanner.scan();\n        }\n\n        // deal with comment references, amd dependencies and style settings\n        // REVIEW: We could potentially do this inline with the above, if we\n        // set Scanner::scanComments to \'true\'\n        comments = scanner.getComments();\n\n        for (var iComment = 0; iComment < comments.length; iComment++) {\n            comment = comments[iComment];\n            \n            if (!comment.isBlock) {\n                var referencedCode = getFileReferenceFromReferencePath(comment.getText());\n                if (referencedCode) {\n                    referencedCode.minChar = comment.startPos;\n                    referencedCode.limChar = referencedCode.minChar + comment.value.length;\n                    referencedFiles.push(referencedCode);\n                }\n\n                if (settings) {\n                    getStyleSettings(comment.getText(), settings.styleSettings);\n\n                    // is it a lib file?\n                    var isNoLibRegex = /^(\\/\\/\\/\\s*<reference\\s+no-default-lib=)(\'|")(.+?)\\2\\s*\\/>/gim;\n                    var isNoLibMatch: any = isNoLibRegex.exec(comment.getText());\n                    if (isNoLibMatch) {\n                        isLibFile = (isNoLibMatch[3] == "true");\n                    }\n                }\n            }\n        }\n\n        return { settings: settings, referencedFiles: refere';
var v27722 = v27723 + 'ncedFiles, importedFiles: importedFiles, isLibFile: isLibFile };\n    }\n\n} // Tools//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // TODO: refactor indent logic for use in emit\n    export class PrintContext {\n        public builder = "";\n        public indent1 = "  ";\n        public indentStrings: string[] = [];\n        public indentAmt = 0;\n\n        constructor (public outfile: ITextWriter, public parser: Parser) {\n        }\n\n        public increaseIndent() {\n            this.indentAmt++;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt--;\n        }\n\n        public startLine() {\n            if (this.builder.length > 0) {\n                CompilerDiagnostics.Alert(this.builder);\n            }\n            var indentString = this.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = "";\n                for (var i = 0; i < this.indentAmt; i++) {\n                    indentString += this.indent1;\n                }\n                this.indentStrings[this.indentAmt] = indentString;\n            }\n            this.builder += indentString;\n        }\n\n        public write(s) {\n            this.builder += s;\n        }\n\n        public writeLine(s) {\n            this.builder += s;\n            this.outfile.WriteLine(this.builder);\n            this.builder = "";\n        }\n\n    }\n\n    export function prePrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n\n        ast.print(pc);\n        pc.increaseIndent();\n        return ast;\n    }\n\n\n    export function postPrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n        pc.decreaseIndent();\n        return ast;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export interface IResolvedFile {\n        content: string;\n        path: string;\n    }\n\n    /// This class acts as a convenience class to store path and content information in places\n    /// where we need an ISourceText object\n    export class SourceUnit implements ISourceText, IResolvedFile {\n        public referencedFiles: IFileReference[] = null;\n        constructor(public path: string, public content: string) {\n        }\n\n        public getText(start: number, end: number): string { return this.content.substring(start, end); }\n        public getLength(): number { return this.content.length; }\n    }\n\n    export interface IFileReference {\n        minChar: number;\n        limChar: number;\n        path: string;\n        isResident: bool;\n    }\n\n    /// Limited API for file system manipulation\n    export interface IFileSystemObject {\n        resolvePath(path: string): string;\n        readFile(path: string): string;\n        findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n        dirName(path: string): string;\n    }\n\n    export class CompilationEnvironment {\n        constructor (public compilationSettings: CompilationSettings, public ioHost: IFileSystemObject) { }\n        public residentCode: SourceUnit[] = [];\n        public code: SourceUnit[] = [];\n    }\n\n    export interface IResolutionDispatcher {\n        postResolutionError(errorFile: string, errorMessage: string, errorObject: any): void;\n        postResolution(path: string, source: ISourceText): void;\n    }\n\n    export interface ICodeResolver {\n        resolveCode(referencePath: string, rootPath: string, performSearch:bool, state: IResolutionDispatcher): void;\n    }\n\n    export interface IResolverHost {\n        resolveCompilationEnvironment(preEnvironment: CompilationEnvironment, resolver: ICodeResolver, traceDependencies: bool): CompilationEnvironment;\n    }\n\n    export class CodeResolver implements T';
var v27721 = v27722 + 'ypeScript.ICodeResolver {\n        public visited: any = { };\n\n        constructor (public environment: CompilationEnvironment) { }\n\n        public resolveCode(referencePath: string, parentPath: string, performSearch: bool, resolutionDispatcher: TypeScript.IResolutionDispatcher): void {\n            \n            var resolvedFile: IResolvedFile = { content: null, path: referencePath };\n            \n            var ioHost = this.environment.ioHost;\n            \n            // If the path is relative, normalize it, based on the root\n            var isRelativePath = TypeScript.isRelative(referencePath);\n            var isRootedPath = isRelativePath ? false : isRooted(referencePath);\n            var normalizedPath: string = \n                isRelativePath ? ioHost.resolvePath(parentPath + "/" + referencePath) : \n                // we only follow the second clause if the path is a non-rooted triple-slash reference path\n                (isRootedPath || !parentPath || performSearch ? referencePath : parentPath + "/" + referencePath);\n\n            // We use +=.ts to make sure we don\'t accidentally pick up ".js" files or the like\n            if (!isSTRFile(normalizedPath) && !isTSFile(normalizedPath)) {\n                normalizedPath += ".ts";  //changePathToSTR(normalizedPath);\n            }\n\n            normalizedPath = switchToForwardSlashes(stripQuotes(normalizedPath));\n            var absoluteModuleID = this.environment.compilationSettings.useCaseSensitiveFileResolution ? normalizedPath : normalizedPath.toLocaleUpperCase();\n            // read the file contents - if it doesn\'t exist, trigger a resolution error\n            if (!this.visited[absoluteModuleID]) {\n\n                // if the path is relative, or came from a reference tag, we don\'t perform a search\n                if (isRelativePath || isRootedPath || !performSearch) {\n                    try {\n                        CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                            \n                        // Look for the .ts file first - if not present, use the .ts, the .d.str and the .d.ts\n                        try {\n                            resolvedFile.content = ioHost.readFile(normalizedPath);\n                        }\n                        catch (err) {\n                            try {\n                                if (isSTRFile(normalizedPath)) {\n                                    normalizedPath = changePathToTS(normalizedPath);\n                                }\n                                else if (isTSFile(normalizedPath)) {\n                                    normalizedPath = changePathToSTR(normalizedPath);\n                                }\n                                CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                                resolvedFile.content = ioHost.readFile(normalizedPath);\n                            }\n                            catch (err) {\n                                normalizedPath = changePathToDSTR(normalizedPath);\n                                CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n\n                                try {\n                                    resolvedFile.content = ioHost.readFile(normalizedPath);\n                                }\n                                catch (err) {\n                                    normalizedPath = changePathToDTS(normalizedPath);\n                                    CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);\n                                    resolvedFile.content = ioHost.readFile(normalizedPath);\n                                }\n                            }\n                        }\n                        CompilerDiagnostics.debugPrint("   Found code at " + normalizedPath);\n\n                        resolvedFile.path = normalizedPath;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    catch (err) {\n                        CompilerDiagnostics.debugPrint("   Did not find code for " + referencePath);\n                    }\n                }\n                else {\n\n                    // if the path is non-relative, we should attempt to search on the relative path\n                    resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n\n                    if (!resolvedFile) {\n                        if (isSTRFile(normalizedPath)) {\n                            normalizedPath = changePathToTS(normalizedPath);\n                        }\n                        else if (isTSFile(normalizedPath)) {\n                            normalizedPath = changePathToSTR(normalizedPath);\n                        }\n                        resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                    }\n\n                    if (!resolvedFile) {\n                        normalizedPath = changePathToDTS(normalizedPath);\n                        resolvedFile = ioHo';
var v27720 = v27721 + "st.findFile(parentPath, normalizedPath);\n                        if (!resolvedFile) {\n                            normalizedPath = changePathToDSTR(normalizedPath);\n                            resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                        }\n                    }\n\n                    if (resolvedFile) {\n                        resolvedFile.path = switchToForwardSlashes(TypeScript.stripQuotes(resolvedFile.path));\n                        CompilerDiagnostics.debugPrint(referencePath + \" resolved to: \" + resolvedFile.path);\n                        resolvedFile.content = resolvedFile.content;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    else {\n                        CompilerDiagnostics.debugPrint(\"Could not find \" + referencePath);\n                    }\n                }\n\n                if (resolvedFile && resolvedFile.content != null) {\n                    // preprocess the file, to gather dependencies\n                    var rootDir = ioHost.dirName(resolvedFile.path);\n                    var sourceUnit = new SourceUnit(resolvedFile.path, resolvedFile.content);\n                    var preProcessedFileInfo = preProcessFile(sourceUnit, this.environment.compilationSettings);\n                    sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;\n\n                    // resolve explicit references\n                    for (var i = 0; i < preProcessedFileInfo.referencedFiles.length; i++) {\n                        var referencedFile = preProcessedFileInfo.referencedFiles[i];\n                        var normalizedPath = isRooted(referencedFile.path) ? referencedFile.path : rootDir + \"/\" + referencedFile.path;\n                        normalizedPath = ioHost.resolvePath(normalizedPath);\n                        if (referencePath == normalizedPath) {\n                            resolutionDispatcher.postResolutionError(normalizedPath, \"File contains reference to itself\", null);\n                            continue;\n                        }\n                        this.resolveCode(referencedFile.path, rootDir, false, resolutionDispatcher);\n                    }\n                    \n                    // resolve imports\n                    for (var i = 0; i < preProcessedFileInfo.importedFiles.length; i++) {\n                        this.resolveCode(preProcessedFileInfo.importedFiles[i].path, rootDir, true, resolutionDispatcher);\n                    }\n\n                    // add the file to the appropriate code list\n                    resolutionDispatcher.postResolution(sourceUnit.path, sourceUnit);\n                }\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path='typescript.ts' />\n\nmodule TypeScript {\n\n    export var LexEOF = (-1);\n\n    export var LexCodeNWL = 0x0A;\n    export var LexCodeRET = 0x0D;\n    export var LexCodeLS =  0x2028;\n    export var LexCodePS =  0x2029;\n    export var LexCodeTAB = 0x09;\n    export var LexCodeVTAB = 0x0B;\n    export var LexCode_e = 'e'.charCodeAt(0);\n    export var LexCode_E = 'E'.charCodeAt(0);\n    export var LexCode_x = 'x'.charCodeAt(0);\n    export var LexCode_X = 'X'.charCodeAt(0);\n    export var LexCode_a = 'a'.charCodeAt(0);\n    export var LexCode_A = 'A'.charCodeAt(0);\n    export var LexCode_f = 'f'.charCodeAt(0);\n    export var LexCode_F = 'F'.charCodeAt(0);\n\n    export var LexCode_g = 'g'.charCodeAt(0);\n    export var LexCode_m = 'm'.charCodeAt(0);\n    export var LexCode_i = 'i'.charCodeAt(0);\n\n    export var LexCode_u = 'u'.charCodeAt(0);\n\n    export var LexCode_0 = '0'.charCodeAt(0);\n    export var LexCode_9 = '9'.charCodeAt(0);\n    export var LexCode_8 = '8'.charCodeAt(0);\n    export var LexCode_7 = '7'.charCodeAt(0);\n\n    export var LexCodeBSL = '\\\\'.charCodeAt(0);\n    export var LexCodeSHP = '#'.charCodeAt(0);\n    export var LexCodeBNG = '!'.charCodeAt(0);\n    export var LexCodeQUO = '\"'.charCodeAt(0);\n    export var LexCodeAPO = '\\''.charCodeAt(0);\n    export var LexCodePCT = '%'.charCodeAt(0);\n    export var LexCodeAMP = '&'.charCodeAt(0);\n    export var LexCodeLPR = '('.charCodeAt(0);\n    export var LexCodeRPR = ')'.charCodeAt(0);\n    export var LexCodePLS = '+'.charCodeAt(0);\n    export var LexCodeMIN = '-'.charCodeAt(0);\n    export var LexCodeMUL = '*'.charCodeAt(0);\n    export var LexCodeSLH = '/'.charCodeAt(0);\n    export var LexCodeXOR = '^'.";
var v27719 = v27720 + "charCodeAt(0);\n    export var LexCodeCMA = ','.charCodeAt(0);\n    export var LexCodeDOT = '.'.charCodeAt(0);\n    export var LexCodeLT = '<'.charCodeAt(0);\n    export var LexCodeEQ = '='.charCodeAt(0);\n    export var LexCodeGT = '>'.charCodeAt(0);\n    export var LexCodeQUE = '?'.charCodeAt(0);\n    export var LexCodeLBR = '['.charCodeAt(0);\n    export var LexCodeRBR = ']'.charCodeAt(0);\n    export var LexCodeUSC = '_'.charCodeAt(0);\n    export var LexCodeLC = '{'.charCodeAt(0);\n    export var LexCodeRC = '}'.charCodeAt(0);\n    export var LexCodeBAR = '|'.charCodeAt(0);\n    export var LexCodeTIL = '~'.charCodeAt(0);\n    export var LexCodeCOL = ':'.charCodeAt(0);\n    export var LexCodeSMC = ';'.charCodeAt(0);\n    export var LexCodeUnderscore = '_'.charCodeAt(0);\n    export var LexCodeDollar = '$'.charCodeAt(0);\n    export var LexCodeSpace = 32;\n    export var LexCodeAtSign = '@'.charCodeAt(0);\n    export var LexCodeASCIIChars = 128;\n\n    export var LexKeywordTable = undefined;\n    // TODO: use new Token[128];\n    var autoToken: Token[] = new Array(LexCodeASCIIChars);\n    var lexIdStartTable: bool[] = new Array(LexCodeASCIIChars);\n\n    // Unicode range maps\n    // REVIEW: These range maps have been extracted from the Unicode specifications, they might be missing values, and/or include \n    //         incorrect ranges. but for the most they seem to be correct. A more accurate and thorough review is needed.\n\n    /*\n        As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\n        IdentifierStart :: Can contain Unicode 3.0.0  categories Uppercase letter (Lu), Lowercase letter (Ll), Titlecase letter (Lt), Modifier letter (Lm), Other letter (Lo), or Letter number (Nl).\n        IdentifierPart :: Can contain IdentifierStart + Unicode 3.0.0  categories Non-spacing mark (Mn), Combining spacing mark (Mc), Decimal number (Nd), or Connector punctuation (Pc).\n                    \n        Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\n        http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n    */\n    var unicodeES3IdStart = [\n\t\t170, 170,181, 181,186, 186,192, 214,216, 246,248, 543,546, 563,592, 685,688, 696,699, 705,720, 721,736, 740,750, 750,890, 890,902, 902,904, 906,908, 908,910, 929,931, 974,976, 983,986, 1011,1024, 1153,1164, 1220,1223, 1224,1227, 1228,1232, 1269,1272, 1273,1329, 1366,1369, 1369,1377, 1415,1488, 1514,\n\t\t1520, 1522,1569, 1594,1600, 1610,1649, 1747,1749, 1749,1765, 1766,1786, 1788,1808, 1808,1810, 1836,1920, 1957,2309, 2361,2365, 2365,2384, 2384,2392, 2401,2437, 2444,2447, 2448,2451, 2472,2474, 2480,2482, 2482,2486, 2489,2524, 2525,2527, 2529,2544, 2545,2565, 2570,2575, 2576,2579, 2600,2602, 2608,2610, 2611,\n\t\t2613, 2614,2616, 2617,2649, 2652,2654, 2654,2674, 2676,2693, 2699,2701, 2701,2703, 2705,2707, 2728,2730, 2736,2738, 2739,2741, 2745,2749, 2749,2768, 2768,2784, 2784,2821, 2828,2831, 2832,2835, 2856,2858, 2864,2866, 2867,2870, 2873,2877, 2877,2908, 2909,2911, 2913,2949, 2954,2958, 2960,2962, 2965,2969, 2970,\n\t\t2972, 2972,2974, 2975,2979, 2980,2984, 2986,2990, 2997,2999, 3001,3077, 3084,3086, 3088,3090, 3112,3114, 3123,3125, 3129,3168, 3169,3205, 3212,3214, 3216,3218, 3240,3242, 3251,3253, 3257,3294, 3294,3296, 3297,3333, 3340,3342, 3344,3346, 3368,3370, 3385,3424, 3425,3461, 3478,3482, 3505,3507, 3515,3517, 3517,\n\t\t3520, 3526,3585, 3632,3634, 3635,3648, 3654,3713, 3714,3716, 3716,3719, 3720,3722, 3722,3725, 3725,3732, 3735,3737, 3743,3745, 3747,3749, 3749,3751, 3751,3754, 3755,3757, 3760,3762, 3763,3773, 3773,3776, 3780,3782, 3782,3804, 3805,3840, 3840,3904, 3911,3913, 3946,3976, 3979,4096, 4129,4131, 4135,4137, 4138,\n\t\t4176, 4181,4256, 4293,4304, 4342,4352, 4441,4447, 4514,4520, 4601,4608, 4614,4616, 4678,4680, 4680,4682, 4685,4688, 4694,4696, 4696,4698, 4701,4704, 4742,4744, 4744,4746, 4749,4752, 4782,4784, 4784,4786, 4789,4792, 4798,4800, 4800,4802, 4805,4808, 4814,4816, 4822,4824, 4846,4848, 4878,4880, 4880,4882, 4885,\n\t\t4888, 4894,4896, 4934,4936, 4954,5024, 5108,5121, 5740,5743, 5750,5761, 5786,5792, 5866,6016, 6067,6176, 6263,6272, 6312,7680, 7835,7840, 7929,7936, 7957,7960, 7965,7968, 8005,8008, 8013,8016, 8023,8025, 8025,8027, 8027,8029, 8029,8031, 8061,8064, 8116,8118, 8124,8126, 8126,8130, 8132,8134, 8140,8144, 8147,\n\t\t8150, 8155,8160, 8172,8178, 8180,8182, 8188,8319, 8319,8450, 8450,8455, 8455,8458, 8467,8469, 8469,8473, 8477,8484, 8484,8486, 8486,8488, 8488,8490, 8493,8495, 8497,8499, 8505,8544, 8579,12293, 12295,12321, 12329,12337, 12341,12344, 12346,12353, 12436,12445, 12446,12449, 12538,12540, 12542,12549, 12588,\n\t\t12593, 12686,12704, 12727,13312, 13312,19893, 19893,19968, 19968,40869, 40869,40960, 42124,44032, 44032,55203, 55203,63744, 64045,64256, 64262,64275, 64279,64285, 64285,64287, 64296,64298, 64310,64312, 64316,64318, 64318,64320, 64321,64323, 64324,64326, 64433,64467, 64829,64848, 64911,64914, 64967,\n\t\t65008, 65019,65136, 65138,65140, 65140,65142, 65276,65313, 65338,65345, 65370,65382, 654";
var v27718 = v27719 + "70,65474, 65479,65482, 65487,65490, 65495,65498, 65500\n\t];\n\n\tvar unicodeES3IdCont = [\n\t\t768, 846,864, 866,1155, 1158,1425, 1441,1443, 1465,1467, 1469,1471, 1471,1473, 1474,1476, 1476,1611, 1621,1632, 1641,1648, 1648,1750, 1756,1759, 1764,1767, 1768,1770, 1773,1776, 1785,1809, 1809,1840, 1866,1958, 1968,2305, 2307,2364, 2364,2366, 2381,2385, 2388,2402, 2403,2406, 2415,2433, 2435,2492, 2492,\n\t\t2494, 2500,2503, 2504,2507, 2509,2519, 2519,2530, 2531,2534, 2543,2562, 2562,2620, 2620,2622, 2626,2631, 2632,2635, 2637,2662, 2673,2689, 2691,2748, 2748,2750, 2757,2759, 2761,2763, 2765,2790, 2799,2817, 2819,2876, 2876,2878, 2883,2887, 2888,2891, 2893,2902, 2903,2918, 2927,2946, 2947,3006, 3010,3014, 3016,\n\t\t3018, 3021,3031, 3031,3047, 3055,3073, 3075,3134, 3140,3142, 3144,3146, 3149,3157, 3158,3174, 3183,3202, 3203,3262, 3268,3270, 3272,3274, 3277,3285, 3286,3302, 3311,3330, 3331,3390, 3395,3398, 3400,3402, 3405,3415, 3415,3430, 3439,3458, 3459,3530, 3530,3535, 3540,3542, 3542,3544, 3551,3570, 3571,3633, 3633,\n\t\t3636, 3642,3655, 3662,3664, 3673,3761, 3761,3764, 3769,3771, 3772,3784, 3789,3792, 3801,3864, 3865,3872, 3881,3893, 3893,3895, 3895,3897, 3897,3902, 3903,3953, 3972,3974, 3975,3984, 3991,3993, 4028,4038, 4038,4140, 4146,4150, 4153,4160, 4169,4182, 4185,4969, 4977,6068, 6099,6112, 6121,6160, 6169,6313, 6313,\n\t\t8255, 8256,8400, 8412,8417, 8417,12330, 12335,12441, 12442,12539, 12539,64286, 64286,65056, 65059,65075, 65076,65101, 65103,65296, 65305,65343, 65343,65381, 65381\n\t];\n\n\n    /*\n        As per ECMAScript Language Specification 5th Edition, Section 7.6: Identifier Names and Identifiers\n        IdentifierStart :: Can contain Unicode 6.2  categories Uppercase letter (Lu), Lowercase letter (Ll), Titlecase letter (Lt), Modifier letter (Lm), Other letter (Lo), or Letter number (Nl).\n        IdentifierPart :: Can contain IdentifierStart + Unicode 6.2  categories Non-spacing mark (Mn), Combining spacing mark (Mc), Decimal number (Nd), Connector punctuation (Pc), <ZWNJ>, or <ZWJ>.\n                    \n        Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:\n        http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\n    */\n\tvar unicodeES5IdStart = [\n\t\t170, 170,181, 181,186, 186,192, 214,216, 246,248, 705,710, 721,736, 740,748, 748,750, 750,880, 884,886, 887,890, 893,902, 902,904, 906,908, 908,910, 929,931, 1013,1015, 1153,1162, 1319,1329, 1366,1369, 1369,1377, 1415,1488, 1514,1520, 1522,1568, 1610,1646, 1647,1649, 1747,1749, 1749,1765, 1766,1774, 1775,\n\t\t1786, 1788,1791, 1791,1808, 1808,1810, 1839,1869, 1957,1969, 1969,1994, 2026,2036, 2037,2042, 2042,2048, 2069,2074, 2074,2084, 2084,2088, 2088,2112, 2136,2208, 2208,2210, 2220,2308, 2361,2365, 2365,2384, 2384,2392, 2401,2417, 2423,2425, 2431,2437, 2444,2447, 2448,2451, 2472,2474, 2480,2482, 2482,2486, 2489,\n\t\t2493, 2493,2510, 2510,2524, 2525,2527, 2529,2544, 2545,2565, 2570,2575, 2576,2579, 2600,2602, 2608,2610, 2611,2613, 2614,2616, 2617,2649, 2652,2654, 2654,2674, 2676,2693, 2701,2703, 2705,2707, 2728,2730, 2736,2738, 2739,2741, 2745,2749, 2749,2768, 2768,2784, 2785,2821, 2828,2831, 2832,2835, 2856,2858, 2864,\n\t\t2866, 2867,2869, 2873,2877, 2877,2908, 2909,2911, 2913,2929, 2929,2947, 2947,2949, 2954,2958, 2960,2962, 2965,2969, 2970,2972, 2972,2974, 2975,2979, 2980,2984, 2986,2990, 3001,3024, 3024,3077, 3084,3086, 3088,3090, 3112,3114, 3123,3125, 3129,3133, 3133,3160, 3161,3168, 3169,3205, 3212,3214, 3216,3218, 3240,\n\t\t3242, 3251,3253, 3257,3261, 3261,3294, 3294,3296, 3297,3313, 3314,3333, 3340,3342, 3344,3346, 3386,3389, 3389,3406, 3406,3424, 3425,3450, 3455,3461, 3478,3482, 3505,3507, 3515,3517, 3517,3520, 3526,3585, 3632,3634, 3635,3648, 3654,3713, 3714,3716, 3716,3719, 3720,3722, 3722,3725, 3725,3732, 3735,3737, 3743,\n\t\t3745, 3747,3749, 3749,3751, 3751,3754, 3755,3757, 3760,3762, 3763,3773, 3773,3776, 3780,3782, 3782,3804, 3807,3840, 3840,3904, 3911,3913, 3948,3976, 3980,4096, 4138,4159, 4159,4176, 4181,4186, 4189,4193, 4193,4197, 4198,4206, 4208,4213, 4225,4238, 4238,4256, 4293,4295, 4295,4301, 4301,4304, 4346,4348, 4680,\n\t\t4682, 4685,4688, 4694,4696, 4696,4698, 4701,4704, 4744,4746, 4749,4752, 4784,4786, 4789,4792, 4798,4800, 4800,4802, 4805,4808, 4822,4824, 4880,4882, 4885,4888, 4954,4992, 5007,5024, 5108,5121, 5740,5743, 5759,5761, 5786,5792, 5866,5870, 5872,5888, 5900,5902, 5905,5920, 5937,5952, 5969,5984, 5996,5998, 6000,\n\t\t6016, 6067,6103, 6103,6108, 6108,6176, 6263,6272, 6312,6314, 6314,6320, 6389,6400, 6428,6480, 6509,6512, 6516,6528, 6571,6593, 6599,6656, 6678,6688, 6740,6823, 6823,6917, 6963,6981, 6987,7043, 7072,7086, 7087,7098, 7141,7168, 7203,7245, 7247,7258, 7293,7401, 7404,7406, 7409,7413, 7414,7424, 7615,7680, 7957,\n\t\t7960, 7965,7968, 8005,8008, 8013,8016, 8023,8025, 8025,8027, 8027,8029, 8029,8031, 8061,8064, 8116,8118, 8124,8126, 8126,8130, 8132,8134, 8140,8144, 8147,8150, 8155,8160, 8172,8178, 8180,8182, 8188,8305, 8305,8319, 8319,8336, 8348,8450, 8450,8455, 8455,8458, 8467,8469, 8469,8473, 8477,84";
var v27717 = v27718 + "84, 8484,8486, 8486,\n\t\t8488, 8488,8490, 8493,8495, 8505,8508, 8511,8517, 8521,8526, 8526,8544, 8584,11264, 11310,11312, 11358,11360, 11492,11499, 11502,11506, 11507,11520, 11557,11559, 11559,11565, 11565,11568, 11623,11631, 11631,11648, 11670,11680, 11686,11688, 11694,11696, 11702,11704, 11710,11712, 11718,11720, 11726,\n\t\t11728, 11734,11736, 11742,11823, 11823,12293, 12295,12321, 12329,12337, 12341,12344, 12348,12353, 12438,12445, 12447,12449, 12538,12540, 12543,12549, 12589,12593, 12686,12704, 12730,12784, 12799,13312, 13312,19893, 19893,19968, 19968,40908, 40908,40960, 42124,42192, 42237,42240, 42508,42512, 42527,\n\t\t42538, 42539,42560, 42606,42623, 42647,42656, 42735,42775, 42783,42786, 42888,42891, 42894,42896, 42899,42912, 42922,43000, 43009,43011, 43013,43015, 43018,43020, 43042,43072, 43123,43138, 43187,43250, 43255,43259, 43259,43274, 43301,43312, 43334,43360, 43388,43396, 43442,43471, 43471,43520, 43560,\n\t\t43584, 43586,43588, 43595,43616, 43638,43642, 43642,43648, 43695,43697, 43697,43701, 43702,43705, 43709,43712, 43712,43714, 43714,43739, 43741,43744, 43754,43762, 43764,43777, 43782,43785, 43790,43793, 43798,43808, 43814,43816, 43822,43968, 44002,44032, 44032,55203, 55203,55216, 55238,55243, 55291,\n\t\t63744, 64109,64112, 64217,64256, 64262,64275, 64279,64285, 64285,64287, 64296,64298, 64310,64312, 64316,64318, 64318,64320, 64321,64323, 64324,64326, 64433,64467, 64829,64848, 64911,64914, 64967,65008, 65019,65136, 65140,65142, 65276,65313, 65338,65345, 65370,65382, 65470,65474, 65479,65482, 65487,\n\t\t65490, 65495,65498, 65500\n\t];\n\n\tvar unicodeES5IdCont = [\n\t\t768, 879,1155, 1159,1425, 1469,1471, 1471,1473, 1474,1476, 1477,1479, 1479,1552, 1562,1611, 1641,1648, 1648,1750, 1756,1759, 1764,1767, 1768,1770, 1773,1776, 1785,1809, 1809,1840, 1866,1958, 1968,1984, 1993,2027, 2035,2070, 2073,2075, 2083,2085, 2087,2089, 2093,2137, 2139,2276, 2302,2304, 2307,2362, 2364,\n\t\t2366, 2383,2385, 2391,2402, 2403,2406, 2415,2433, 2435,2492, 2492,2494, 2500,2503, 2504,2507, 2509,2519, 2519,2530, 2531,2534, 2543,2561, 2563,2620, 2620,2622, 2626,2631, 2632,2635, 2637,2641, 2641,2662, 2673,2677, 2677,2689, 2691,2748, 2748,2750, 2757,2759, 2761,2763, 2765,2786, 2787,2790, 2799,2817, 2819,\n\t\t2876, 2876,2878, 2884,2887, 2888,2891, 2893,2902, 2903,2914, 2915,2918, 2927,2946, 2946,3006, 3010,3014, 3016,3018, 3021,3031, 3031,3046, 3055,3073, 3075,3134, 3140,3142, 3144,3146, 3149,3157, 3158,3170, 3171,3174, 3183,3202, 3203,3260, 3260,3262, 3268,3270, 3272,3274, 3277,3285, 3286,3298, 3299,3302, 3311,\n\t\t3330, 3331,3390, 3396,3398, 3400,3402, 3405,3415, 3415,3426, 3427,3430, 3439,3458, 3459,3530, 3530,3535, 3540,3542, 3542,3544, 3551,3570, 3571,3633, 3633,3636, 3642,3655, 3662,3664, 3673,3761, 3761,3764, 3769,3771, 3772,3784, 3789,3792, 3801,3864, 3865,3872, 3881,3893, 3893,3895, 3895,3897, 3897,3902, 3903,\n\t\t3953, 3972,3974, 3975,3981, 3991,3993, 4028,4038, 4038,4139, 4158,4160, 4169,4182, 4185,4190, 4192,4194, 4196,4199, 4205,4209, 4212,4226, 4237,4239, 4253,4957, 4959,5906, 5908,5938, 5940,5970, 5971,6002, 6003,6068, 6099,6109, 6109,6112, 6121,6155, 6157,6160, 6169,6313, 6313,6432, 6443,6448, 6459,6470, 6479,\n\t\t6576, 6592,6600, 6601,6608, 6617,6679, 6683,6741, 6750,6752, 6780,6783, 6793,6800, 6809,6912, 6916,6964, 6980,6992, 7001,7019, 7027,7040, 7042,7073, 7085,7088, 7097,7142, 7155,7204, 7223,7232, 7241,7248, 7257,7376, 7378,7380, 7400,7405, 7405,7410, 7412,7616, 7654,7676, 7679,8204, 8205,8255, 8256,8276, 8276,\n\t\t8400, 8412,8417, 8417,8421, 8432,11503, 11505,11647, 11647,11744, 11775,12330, 12335,12441, 12442,42528, 42537,42607, 42607,42612, 42621,42655, 42655,42736, 42737,43010, 43010,43014, 43014,43019, 43019,43043, 43047,43136, 43137,43188, 43204,43216, 43225,43232, 43249,43264, 43273,43302, 43309,43335, 43347,\n\t\t43392, 43395,43443, 43456,43472, 43481,43561, 43574,43587, 43587,43596, 43597,43600, 43609,43643, 43643,43696, 43696,43698, 43700,43703, 43704,43710, 43711,43713, 43713,43755, 43759,43765, 43766,44003, 44010,44012, 44013,44016, 44025,64286, 64286,65024, 65039,65056, 65062,65075, 65076,65101, 65103,\n\t\t65296, 65305,65343, 65343\n\t];\n\n    export function LexLookUpUnicodeMap(code: number, map: number[]) : bool {\n        // Perform binary search in one of the unicode range maps\n        var lo: number = 0;\n        var hi: number = map.length;\n        var mid: number;\n\n        while (lo + 1 < hi)\n        {\n            mid = lo + (hi - lo) / 2;\n            // mid has to be even to catch a range's beginning\n            mid -= mid % 2;\n            if (map[mid] <= code && code <= map[mid + 1])\n                return true;\n            if (code < map[mid])\n                hi = mid;\n            else\n                lo = mid + 2;\n        }\n        return false;\n    }\n\n    export function LexIsUnicodeDigit(code: number): bool {\n        if (codeGenTarget == CodeGenTarget.ES3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdCont);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdCont);\n        }\n    ";
var v27716 = v27717 + "}\n\n    export function LexIsUnicodeIdStart(code: number): bool {\n        if (codeGenTarget == CodeGenTarget.ES3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdStart);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdStart);\n        }\n    }\n    export function LexInitialize() {\n        initializeStaticTokens();\n        autoToken[LexCodeLPR] = staticTokens[TokenID.OpenParen];\n        autoToken[LexCodeRPR] = staticTokens[TokenID.CloseParen];\n        autoToken[LexCodeCMA] = staticTokens[TokenID.Comma];\n        autoToken[LexCodeSMC] = staticTokens[TokenID.Semicolon];\n        autoToken[LexCodeLBR] = staticTokens[TokenID.OpenBracket];\n        autoToken[LexCodeRBR] = staticTokens[TokenID.CloseBracket];\n        autoToken[LexCodeTIL] = staticTokens[TokenID.Tilde];\n        autoToken[LexCodeQUE] = staticTokens[TokenID.Question];\n        autoToken[LexCodeLC] = staticTokens[TokenID.OpenBrace];\n        autoToken[LexCodeRC] = staticTokens[TokenID.CloseBrace];\n        autoToken[LexCodeCOL] = staticTokens[TokenID.Colon];\n        LexKeywordTable = new StringHashTable();\n        for (var i in (<any>TokenID)._map) {\n            if ((<number><any>i) <= TokenID.LimKeyword) {\n                LexKeywordTable.add((<any>TokenID)._map[i].toLowerCase(), i);\n            }\n        }\n        for (var j = 0; j < LexCodeASCIIChars; j++) {\n            if (LexIsIdentifierStartChar(j)) {\n                lexIdStartTable[j] = true;\n            }\n            else {\n                lexIdStartTable[j] = false;\n            }\n        }\n    }\n\n    export function LexAdjustIndent(code, indentAmt) {\n        if ((code == LexCodeLBR) || (code == LexCodeLC) || (code == LexCodeLPR)) {\n            return indentAmt + 1;\n        }\n        else if ((code == LexCodeRBR) || (code == LexCodeRC) || (code == LexCodeRPR)) {\n            return indentAmt - 1;\n        }\n        else return indentAmt;\n    }\n\n    export function LexIsIdentifierStartChar(code): bool {\n        return (((code >= 97) && (code <= 122)) ||\n                ((code >= 65) && (code <= 90)) ||\n                (code == LexCodeDollar) ||\n                (code == LexCodeUnderscore));\n    }\n\n    export function LexIsDigit(code): bool {\n        return ((code >= 48) && (code <= 57));\n    }\n\n    export function LexIsIdentifierChar(code:number) {\n        return lexIdStartTable[code] || LexIsDigit(code);\n    }\n\n    export function LexMatchingOpen(code) {\n        if (code == LexCodeRBR)\n            return LexCodeLBR;\n        else if (code == LexCodeRC)\n            return LexCodeLC;\n        else if (code == LexCodeRPR)\n            return LexCodeLPR;\n        else return 0;\n    }\n\n    export enum NumberScanState {\n        Start,\n        InFraction,\n        InEmptyFraction,\n        InExponent\n    }\n\n    export enum LexState {\n        Start,\n        InMultilineComment,\n        InMultilineSingleQuoteString,\n        InMultilineDoubleQuoteString,\n    }\n\n    export enum LexMode {\n        Line,\n        File,\n    }\n\n    export enum CommentStyle {\n        Line,\n        Block\n    }\n\n    // Represent a piece of source code which can be read in multiple segments\n    export interface ISourceText {\n        getText(start: number, end: number): string;\n        getLength(): number;\n    }\n\n    // Implementation on top of a contiguous string\n    export class StringSourceText implements ISourceText {\n        constructor (public text: string) {\n        }\n\n        public getText(start: number, end: number): string {\n            return this.text.substring(start, end);\n        }\n\n        public getLength(): number {\n            return this.text.length;\n        }\n    }\n\n    export class SourceTextSegment implements ISourceTextSegment {\n        constructor (public segmentStart: number,\n                    public segmentEnd: number,\n                    public segment: string) {\n        }\n\n        charCodeAt(index: number): number {\n            return this.segment.charCodeAt(index - this.segmentStart);\n        }\n\n        substring(start: number, end: number): string {\n            return this.segment.substring(start - this.segmentStart, end - this.segmentStart);\n        }\n    }\n\n    export class AggerateSourceTextSegment implements ISourceTextSegment {\n\n        constructor (public seg1: SourceTextSegment, public seg2: SourceTextSegment) { }\n\n        public charCodeAt(index: number): number {\n            if (this.seg1.segmentStart <= index && index < this.seg1.segmentEnd)\n                return this.seg1.segment.charCodeAt(index - this.seg1.segmentStart);\n\n            return this.seg2.segment.charCodeAt(index - this.seg2.segmentStart);\n        }\n\n        public substring(start: number, end: number): string {\n            if (this.seg1.segmentStart <= start && end <= this.seg1.segmentEnd)\n                return this.seg1.segment.substring(start - this.seg1.segmentStart, end - this.seg1.segmentStart);\n\n            return this.seg2.segment.substring(start - this.seg2.segmentStart) + this.seg1.segment.substri";
var v27715 = v27716 + 'ng(0, end - this.seg1.segmentStart);\n        }\n    }\n\n    export interface ISourceTextSegment {\n        charCodeAt(index: number): number;\n        substring(start: number, end: number): string;\n    }\n\n    export class ScannerTextStream {\n        static emptySegment = new SourceTextSegment(0, 0, "");\n        public agg: AggerateSourceTextSegment;\n        public len: number;\n\n        constructor (public sourceText: ISourceText) {\n            this.agg = new AggerateSourceTextSegment(ScannerTextStream.emptySegment, ScannerTextStream.emptySegment);\n            this.len = this.sourceText.getLength();\n        }\n\n        public max(a: number, b: number): number {\n            return a >= b ? a : b;\n        }\n\n        public min(a: number, b: number): number {\n            return a <= b ? a : b;\n        }\n\n        public fetchSegment(start: number, end: number): ISourceTextSegment {\n            // Common case\n            if (this.agg.seg1.segmentStart <= start && end <= this.agg.seg1.segmentEnd)\n                return this.agg.seg1;\n\n            // Common overlap case\n            if (this.agg.seg2.segmentStart <= start && end <= this.agg.seg1.segmentEnd)\n                return this.agg;\n\n            // if overlapping outside of fetched segment(s), fetch a new segment\n            var prev = this.agg.seg1;\n\n            var s = prev.segmentEnd;\n            var e = max(s + 512, end); // ensure we move forward at least 512 characters or "end"\n            e = min(e, this.len);    // but don\'t go past the end of the source text\n\n            var src = this.sourceText.getText(s, e);\n            var newSeg = new SourceTextSegment(s, e, src);\n            this.agg.seg2 = prev;\n            this.agg.seg1 = newSeg;\n            return this.agg;\n        }\n\n        public charCodeAt(index: number): number {\n            return this.fetchSegment(index, index + 1).charCodeAt(index);\n        }\n\n        public substring(start: number, end: number) {\n            return this.fetchSegment(start, end).substring(start, end);\n        }\n    }\n\n    export interface IScanner {\n        startPos: number;\n        pos: number;\n        scan(): Token;\n        previousToken(): Token;\n        prevLine: number;\n        line: number;\n        col: number;\n        leftCurlyCount: number;\n        rightCurlyCount: number;\n        lastTokenLimChar(): number;\n        lastTokenHadNewline(): bool;\n        lexState: number;\n        getComments(): CommentToken[];\n        getCommentsForLine(line: number): CommentToken[];\n        resetComments(): void;\n        lineMap: number[];\n        setSourceText(newSrc: ISourceText, textMode: number): void;\n        setErrorHandler(reportError: (message: string) => void): void;\n        seenUnicodeChar: bool;\n        seenUnicodeCharInComment: bool;\n        getLookAheadToken(): Token;\n    }\n\n    export class SavedTokens implements IScanner {\n        public prevToken: Token = null;\n        public curSavedToken: SavedToken = null;\n        public prevSavedToken: SavedToken = null;\n        public currentTokenIndex: number;\n        public currentTokens: SavedToken[];\n        public tokensByLine: SavedToken[][];\n        public lexStateByLine: LexState[];\n        private prevToken: SavedToken = null;\n        public previousToken(): Token { return this.prevToken; }\n        public currentToken = 0;\n        public tokens = new SavedToken[];\n        public startPos: number;\n        public pos: number;\n        public seenUnicodeChar: bool = false;\n        seenUnicodeCharInComment: bool = false;\n\n        public close() {\n            this.currentToken = 0;\n        }\n\n        public addToken(tok: Token, scanner: IScanner) {\n            this.tokens[this.currentToken++] = new SavedToken(tok, scanner.startPos, scanner.pos);\n        }\n\n        public scan(): Token {\n            // TODO: curly count\n            this.startLine = this.line;\n            this.startPos = this.col;\n            if (this.currentTokenIndex == this.currentTokens.length) {\n                if (this.line < this.lineMap.length) {\n                    this.line++;\n                    this.col = 0;\n                    this.currentTokenIndex = 0;\n                    this.currentTokens = this.tokensByLine[this.line];\n                }\n                else {\n                    return staticTokens[TokenID.EndOfFile];\n                }\n            }\n            if (this.currentTokenIndex < this.currentTokens.length) {\n                this.prevToken = this.curSavedToken.tok;\n                this.prevSavedToken = this.curSavedToken;\n                this.curSavedToken = this.currentTokens[this.currentTokenIndex++];\n                var curToken = this.curSavedToken.tok;\n                this.pos = this.curSavedToken.limChar;\n                this.col += (this.curSavedToken.limChar - this.curSavedToken.minChar);\n                this.startPos = this.curSavedToken.minChar;\n                this.prevLine = this.line;\n                return curToken;\n            }\n            else {\n                retur';
var v27714 = v27715 + 'n staticTokens[TokenID.EndOfFile];\n            }\n        }\n        public startLine: number;\n        public prevLine = 1;\n        public line = 1;\n        public col = 0;\n        public leftCurlyCount: number;\n        public rightCurlyCount: number;\n\n        public syncToTok(offset: number): number {\n            this.line = getLineNumberFromPosition(this.lineMap, offset);\n            this.currentTokenIndex = 0;\n            var tmpCol = offset - this.lineMap[this.line];\n            while ((this.lexStateByLine[this.line] == LexState.InMultilineComment) && (this.line > 0)) {\n                this.line--;\n                tmpCol = 0;\n            }\n            var lenMin1 = this.lineMap.length - 1;\n            this.currentTokens = this.tokensByLine[this.line];\n            while ((this.currentTokens.length == 0) && (this.line < lenMin1)) {\n                this.line++;\n                this.currentTokens = this.tokensByLine[this.line];\n                tmpCol = 0;\n            }\n            if (this.line <= lenMin1) {\n                while ((this.currentTokenIndex < this.currentTokens.length) &&\n                       (tmpCol > this.currentTokens[this.currentTokenIndex].limChar)) {\n                    this.currentTokenIndex++;\n                }\n                if (this.currentTokenIndex < this.currentTokens.length) {\n                    this.col = this.currentTokens[this.currentTokenIndex].minChar;\n                    return this.col + this.lineMap[this.line];\n                }\n            }\n            return -1;\n        }\n\n        public lastTokenLimChar(): number {\n            if (this.prevSavedToken !== null) {\n                return this.prevSavedToken.limChar;\n            }\n            else {\n                return 0;\n            }\n        }\n\n        public lastTokenHadNewline(): bool {\n            return this.prevLine != this.startLine;\n        }\n\n        public lexState = LexState.Start;\n\n        public commentStack: CommentToken[] = new CommentToken[];\n\n        public pushComment(comment: CommentToken) {\n            this.commentStack.push(comment);\n        }\n\n        public getComments() {\n            var stack = this.commentStack;\n            this.commentStack = [];\n            return stack;\n        }\n\n        public getCommentsForLine(line: number) {\n            var comments: CommentToken[] = null;\n            while ((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {\n                if (comments == null) {\n                    comments = [this.commentStack.shift()];\n                }\n                else {\n                    comments = comments.concat([this.commentStack.shift()]);\n                }\n\n            }\n            return comments;\n        }\n\n        public resetComments() {\n            this.commentStack = [];\n        }\n\n        public lineMap: number[] = [];\n        public setSourceText(newSrc: ISourceText, textMode: number) {\n        }\n        public setErrorHandler(reportError: (message: string) => void ) { \n        }\n        public getLookAheadToken(): Token {\n            throw new Error("Invalid operation.");\n        }\n    }\n\n    export class Scanner implements IScanner {\n        // REVIEW: When adding new variables make sure to handle storing them in getLookAheadToken. \n        //         The method works by storing the state before scanning and restoring it later on, missing a member variable \n        //         could result in an inconsistent state.\n        public prevLine = 1;\n        public line = 1;\n        public col = 0;\n        public pos = 0;\n        public startPos = 0;\n        public startCol: number;\n        public startLine: number;\n        public src: string;\n        public len = 0;\n        public lineMap: number[] = [];\n        \n        public ch = LexEOF;\n        public lexState = LexState.Start;\n        public mode = LexMode.File;\n        public scanComments: bool = true;\n        public interveningWhitespace = false; // Was there a whitespace token between the last token and the current one?\n        private interveningWhitespacePos = 0; //  If yes, this contains the start position of the whitespace\n        public leftCurlyCount = 0;\n        public rightCurlyCount = 0;\n        public commentStack: CommentToken[] = new CommentToken[];\n        public saveScan: SavedTokens = null;\n        public seenUnicodeChar: bool = false;\n        seenUnicodeCharInComment: bool = false;\n\n        private reportError: (message: string) =>void;\n\n        constructor () {\n            this.startCol = this.col;\n            this.startLine = this.line;            \n            this.lineMap[1] = 0;\n            \n            if (!LexKeywordTable) {\n                LexInitialize();\n            }            \n        }\n\n        private prevTok = staticTokens[TokenID.EndOfFile];\n        public previousToken() { return this.prevTok; }\n\n        public setSourceText(newSrc: ISourceText, textMode: number) {\n            this.mode = textMode;\n            this.scanComments = (this.mode === LexMo';
var v27713 = v27714 + "de.Line);\n            this.pos = 0;\n            this.interveningWhitespacePos = 0;\n            this.startPos = 0;\n            this.line = 1;\n            this.col = 0;\n            this.startCol = this.col;\n            this.startLine = this.line;\n            this.len = 0;\n            this.src = newSrc.getText(0, newSrc.getLength());\n            this.len = this.src.length;\n            this.lineMap = [];\n            this.lineMap[1] = 0;\n            this.commentStack = [];\n            this.leftCurlyCount = 0;\n            this.rightCurlyCount = 0;\n            this.seenUnicodeChar = false;\n            this.seenUnicodeCharInComment = false;\n        }\n\n        public setErrorHandler(reportError: (message: string) => void ) { \n            this.reportError = reportError;\n        }\n\n        public setSaveScan(savedTokens: SavedTokens) {\n            this.saveScan = savedTokens;\n        }\n\n        public setText(newSrc: string, textMode: number) {\n            this.setSourceText(new StringSourceText(newSrc), textMode);\n        }\n\n        public setScanComments(value: bool) {\n            this.scanComments = value;\n        }\n\n        public getLexState(): number {\n            return this.lexState;\n        }\n\n        public tokenStart() {\n            this.startPos = this.pos;\n            this.startLine = this.line;\n            this.startCol = this.col;\n            this.interveningWhitespace = false;\n        }\n\n        public peekChar(): number {\n            if (this.pos < this.len) {\n                return this.src.charCodeAt(this.pos);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public peekCharAt(index: number): number {\n            if (index < this.len) {\n                return this.src.charCodeAt(index);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public IsHexDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_9)) || ((c >= LexCode_A) && (c <= LexCode_F)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public IsOctalDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_7)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public scanHexDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsHexDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        return new NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanOctalDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsOctalDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        return new NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanDecimalNumber(state: number): Token {\n            var atLeastOneDigit = false;\n            var svPos = this.pos;\n            var svCol = this.col;\n            for (; ;) {\n                if (LexIsDigit(this.ch)) {\n                    atLeastOneDigit = true;\n                    if (this.ch != LexCode_0 && state == NumberScanState.InEmptyFraction) {\n                        state = NumberScanState.InFraction;\n                    }\n                    this.nextChar();\n                }\n                else if (this.ch == LexCodeDOT) {\n                    if (state == NumberScanState.Start) {\n                        // DecimalDigit* .\n                        this.nextChar();\n                        state = NumberScanState.InEmptyFraction;\n                    }\n                    else {\n                        // dot not part of number\n                        if (atLeastOneDigit) {\n                            // DecimalDigit* . DecimalDigit+\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                } else if ((this.ch == LexCode_e) || (this.ch == LexCode_E)) {\n                    if (state == NumberScanState.Start) {\n                        if (atLeastOneDigit) {\n                            // DecimalDigit+ (.";
var v27712 = v27713 + " DecimalDigit*) [eE] [+-]DecimalDigit+\n                            atLeastOneDigit = false;\n                            this.nextChar();\n                            state = NumberScanState.InExponent;\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state == NumberScanState.InFraction || state == NumberScanState.InEmptyFraction) {\n                        // DecimalDigit+ . DecimalDigit* [eE]\n                        this.nextChar();\n                        state = NumberScanState.InExponent;\n                        atLeastOneDigit = false;\n                    }\n                    else {\n                        // DecimalDigit+ . DecimalDigit* [eE] DecimalDigit+\n                        if (atLeastOneDigit) {\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                }\n                else if ((this.ch == LexCodePLS) || (this.ch == LexCodeMIN)) {\n                    if (state == NumberScanState.InExponent) {\n                        if (!atLeastOneDigit) {\n                            this.nextChar();\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state == NumberScanState.InEmptyFraction || state == NumberScanState.InFraction) {\n                        // This case will not generate bad javascript if we miss the fractional part, but we just want to be consistent with the dot case\n                        return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                    }\n                    else {\n                        if (!atLeastOneDigit) {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                        else {\n                            return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));\n                        }\n                    }\n                }\n                else {\n                    if (!atLeastOneDigit) {\n                        this.pos = svPos;\n                        this.col = svCol;\n                        return null;\n                    }\n                    else {\n                        return new NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == NumberScanState.InEmptyFraction);\n                    }\n                }\n            }\n        }\n\n        // 0 [xX] hexDigits\n        // 0 octalDigits\n        // 0 [89] decimalDigits\n        // decimalDigits? fraction? exponent?\n\n        public scanNumber(): Token {\n            if (this.peekChar() == LexCode_0) {\n                switch (this.peekCharAt(this.pos + 1)) {\n                    case LexCode_x:\n                    case LexCode_X:\n                        // Hex\n                        this.advanceChar(2);\n                        return this.scanHexDigits();\n                    case LexCode_8:\n                    case LexCode_9:\n                    case LexCodeDOT:\n                        return this.scanDecimalNumber(NumberScanState.Start);\n                    default:\n                        // Octal\n                        return this.scanOctalDigits();\n                }\n            }\n            else {\n                return this.scanDecimalNumber(NumberScanState.Start);\n            }\n        }\n\n        public scanFraction(): Token {\n            return this.scanDecimalNumber(NumberScanState.InFraction);\n        }\n\n        public newLine() {\n            this.col = 0;\n            if (this.mode == LexMode.File) {\n                this.line++;\n                this.lineMap[this.line] = this.pos + 1;\n            }\n        }\n\n        public finishMultilineComment(): bool {\n            var ch2: number;\n            this.lexState = LexState.InMultilineComment;\n            while (this.pos < this.len) {\n                if (this.ch == LexCodeMUL) {\n                    ch2 = this.peekCharAt(this.pos + 1);\n                    if (ch2 == LexCodeSLH) {\n                        this.advanceChar(2);\n                        if (this.mode == LexMode.File) {\n                            this.tokenStart();\n                        }\n                        this.lexState = LexState.Start;\n                        return true;\n                    }\n        ";
var v27711 = v27712 + "        }\n                else if (this.ch == LexCodeNWL) {\n                    this.newLine();\n                    if (this.mode == LexMode.Line) {\n                        this.nextChar();\n                        return false;\n                    }\n                } \n                else if (this.ch >= LexCodeASCIIChars) { \n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n            return false;\n        }\n\n        public pushComment(comment: CommentToken) {\n            this.commentStack.push(comment);\n        }\n\n        public getComments() {\n            var stack = this.commentStack;\n            this.commentStack = [];\n            return stack;\n        }\n\n        public getCommentsForLine(line: number) {\n            var comments: CommentToken[] = null;\n            while ((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {\n                if (comments == null) {\n                    comments = [this.commentStack.shift()];\n                }\n                else {\n                    comments = comments.concat([this.commentStack.shift()]);\n                }\n\n            }\n            return comments;\n        }\n\n        public resetComments() {\n            this.commentStack = [];\n        }\n\n        public endsLine(c: number) {\n            return (c == LexCodeNWL) || (c == LexCodeRET) || (c == LexCodeLS) || (c == LexCodePS);\n        }\n\n        public finishSinglelineComment() {\n            while (this.pos < this.len) {\n                if (this.endsLine(this.ch))\n                    break;\n                if (this.ch >= LexCodeASCIIChars) { \n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n\n            if (this.mode == LexMode.File) {\n                this.tokenStart();\n            }\n        }\n\n        public tokenText(): string {\n            return this.src.substring(this.startPos, this.pos);\n        }\n\n        public findClosingSLH() {\n            var index = this.pos;\n            var ch2 = this.src.charCodeAt(index);\n            var prevCh = 0;\n            var liveEsc = false;\n            while (!this.endsLine(ch2) && (index < this.len)) {\n                if ((ch2 == LexCodeSLH) && (!liveEsc)) {\n                    return index;\n                }\n                prevCh = ch2;\n                index++;\n                if (liveEsc) {\n                    liveEsc = false;\n                }\n                else {\n                    liveEsc = (prevCh == LexCodeBSL);\n                }\n\n                ch2 = this.src.charCodeAt(index);\n            }\n            return -1;\n        }\n\n        public speculateRegex(): Token {\n            if (noRegexTable[this.prevTok.tokenId] != undefined) {\n                return null;\n            }\n            var svPos = this.pos;\n            var svCol = this.col;\n            // first char is '/' and has been skipped\n            var index = this.findClosingSLH();\n            if (index > 0) {\n                // found closing /\n                var pattern = this.src.substring(svPos, index);\n                var flags = \"\";\n                this.pos = index + 1;\n                this.ch = this.peekChar();\n                var flagsStart = this.pos;\n                // TODO: check for duplicate flags\n                while ((this.ch == LexCode_i) || (this.ch == LexCode_g) || (this.ch == LexCode_m)) {\n                    this.nextChar();\n                }\n                if ((this.pos - flagsStart) > 3) {\n                    return null;\n                }\n                else {\n                    flags = this.src.substring(flagsStart, this.pos);\n                }\n                var regex = undefined;\n                try {\n                    regex = new RegExp(pattern, flags);\n                }\n                catch (regexException) {\n                }\n                if (regex) {\n                    // no line boundary in regex string\n                    this.col = svCol + (this.pos - this.startPos);\n                    return new RegularExpressionLiteralToken(regex);\n                }\n            }\n            this.pos = svPos;\n            this.col = svCol;\n            return null;\n        }\n\n        public lastTokenHadNewline() {\n            return this.prevLine != this.startLine;\n        }\n\n        public lastTokenLimChar() {\n            return this.interveningWhitespace ? this.interveningWhitespacePos : this.startPos;\n        }\n\n        // use only when known not to skip line terminators\n        public advanceChar(amt: number) {\n            this.pos += amt;\n            this.col += amt;\n            this.ch = this.peekChar();\n        }\n\n        public nextChar() {\n            this.pos++;\n            this.col++;\n            this.ch = this.peekChar();\n        }\n\n        public getLookAheadToken(): Token {\n            // REVIEW: This method is only used for parsing varargs in lambda expressions. If this functionality is neede";
var v27710 = v27711 + 'd for more common cases, \n            //         it needs to be designed. \n            //         Look-ahead token needs to be integrated in the scanner design to allow for an efficient lookup.\n\n            // Store the scanner state\n            var prevLine = this.prevLine;\n            var line = this.line;\n            var col = this.col;\n            var pos = this.pos;\n            var startPos = this.startPos;\n            var startCol = this.startCol;\n            var startLine = this.startLine;\n            var ch = this.ch;\n            var prevTok = this.prevTok;\n            var lexState = this.lexState;\n            var interveningWhitespace = this.interveningWhitespace;\n            var interveningWhitespacePos = this.interveningWhitespacePos;\n            var leftCurlyCount = this.leftCurlyCount;\n            var rightCurlyCount = this.rightCurlyCount;\n            var seenUnicodeChar = this.seenUnicodeChar;\n            var seenUnicodeCharInComment = this.seenUnicodeCharInComment;\n            var commentStackLength = this.commentStack.length;\n\n            var lookAheadToken = this.scan();\n\n            // Restore state\n            this.prevLine = prevLine;\n            this.line = line;\n            this.col = col;\n            this.pos = pos;\n            this.startPos = startPos;\n            this.startCol = startCol;\n            this.startLine = startLine;\n            this.ch = ch;\n            this.prevTok = prevTok;\n            this.lexState = lexState;\n            this.interveningWhitespace = interveningWhitespace;\n            this.interveningWhitespacePos = interveningWhitespacePos;\n            this.leftCurlyCount = leftCurlyCount;\n            this.rightCurlyCount = rightCurlyCount;\n            this.seenUnicodeChar = seenUnicodeChar;\n            this.seenUnicodeCharInComment = seenUnicodeCharInComment;\n            this.commentStack.length = commentStackLength;\n\n            return lookAheadToken;\n        }\n\n        public scanInLine(): Token {\n            if ((this.lexState == LexState.InMultilineComment) && (this.scanComments)) {\n                this.ch = this.peekChar();\n                var commentLine = this.line;\n                this.finishMultilineComment();\n                if (this.startPos < this.pos) {\n                    var commentText = this.src.substring(this.startPos, this.pos);\n                    this.tokenStart();\n                    return new CommentToken(TokenID.Comment, commentText,/*isBlock*/true, this.startPos, commentLine,/*endsLine*/true);\n                }\n                else {\n                    return staticTokens[TokenID.EndOfFile];\n                }\n            } \n            else if (this.lexState == LexState.InMultilineSingleQuoteString && this.pos < this.len) { \n                this.ch = LexCodeAPO;\n                this.lexState = LexState.Start;\n                return this.scanStringConstant();\n            }\n            else if (this.lexState == LexState.InMultilineDoubleQuoteString && this.pos < this.len) { \n                this.ch = LexCodeQUO;\n                this.lexState = LexState.Start;\n                return this.scanStringConstant();\n            }\n            this.prevLine = this.line;\n            var prevTok = this.innerScan();\n\n            // Ingore white spaces\n            if (prevTok.tokenId != TokenID.Whitespace) {\n                this.prevTok = prevTok;\n            }\n            return prevTok;\n        }\n\n        public scan(): Token {\n            this.prevLine = this.line;\n            this.prevTok = this.innerScan();\n            if (this.saveScan) {\n                this.saveScan.addToken(this.prevTok, this);\n            }\n            return this.prevTok;\n        }\n\n        private isValidUnicodeIdentifierChar(): bool {\n            var valid = LexIsUnicodeIdStart(this.ch) || LexIsUnicodeDigit(this.ch);\n            this.seenUnicodeChar = this.seenUnicodeChar || valid;\n            return valid;\n        }\n\n        private scanStringConstant(): Token {\n            var endCode = this.ch;\n            \n            // Skip the first quote\n            this.nextChar();\n            \n            // Accumulate with escape characters\n            scanStringConstantLoop:\n            for (;;) {\n                switch (this.ch) {\n                    case LexEOF:\n                        // Unexpected end of file\n                        this.reportScannerError("Unterminated string constant");\n                        break scanStringConstantLoop;\n\n                    case LexCodeLS:\n                    case LexCodePS:\n                        this.seenUnicodeChar = true;\n                    // Intentional fall through\n                    case LexCodeRET:\n                    case LexCodeNWL:\n                        this.reportScannerError("Unterminated string constant");\n                        break scanStringConstantLoop;\n\n                    case LexCodeAPO:\n                    case LexCodeQUO:\n                        if (this.ch == endCode) {\n                            // Foun';
var v27709 = v27710 + 'd string terminator. Skip past end code.\n                            this.nextChar();\n                            break scanStringConstantLoop;\n                        }\n                        break;\n\n                    case LexCodeBSL:\n                        // Consume the current slash\n                        this.nextChar();\n\n                        switch (this.ch) {\n                            case LexCodeAPO:\n                            case LexCodeQUO:\n                            case LexCodeBSL:\n                                // Valid escape sequences\n                                this.nextChar();\n                                continue scanStringConstantLoop;\n\n                            case LexCodeLS:\n                            case LexCodePS:\n                                this.seenUnicodeChar = true;\n                            // Intentional fall through\n                            case LexCodeRET:\n                            case LexCodeNWL:\n                                // Skip /r in a /r/n sequence\n                                if (this.ch == LexCodeRET && this.peekCharAt(this.pos + 1) == LexCodeNWL) {\n                                    this.nextChar();\n                                }\n\n                                // Consume the new line char\n                                this.nextChar();\n\n                                // Record new line\n                                this.newLine();\n\n                                if (this.mode == LexMode.Line) {\n                                    this.lexState = endCode == LexCodeAPO ? LexState.InMultilineSingleQuoteString : LexState.InMultilineDoubleQuoteString;\n                                    break scanStringConstantLoop;\n                                }\n                                break;\n\n                            case LexCode_x:\n                            case LexCode_u:\n                                var expectedHexDigits = this.ch == LexCode_x ? 2 : 4;\n                                this.nextChar();\n                                for (var i = 0; i < expectedHexDigits; i++) {\n                                    if (this.IsHexDigit(this.ch)) {\n                                        this.nextChar();\n                                    }\n                                    else {\n                                        this.reportScannerError("Invalid Unicode escape sequence");\n                                        break;\n                                    }\n                                }\n                                continue scanStringConstantLoop;\n                        }\n                        break;\n                }\n\n                // Record seeing a Unicode char\n                if (this.ch >= LexCodeASCIIChars) {\n                    this.seenUnicodeChar = true;\n                }\n\n                this.nextChar();\n            }\n\n            return new StringLiteralToken(this.src.substring(this.startPos, this.pos));\n        }\n\n        private scanIdentifier(): Token {\n            var hasEscape = false;\n            var isFirstChar = (this.ch == LexCodeBSL);\n            var hasUnicode: any = false;\n\n            for (; ;) {\n                while (lexIdStartTable[this.ch] || LexIsDigit(this.ch) || \n                      (this.ch >= LexCodeASCIIChars && this.isValidUnicodeIdentifierChar())) {\n                    this.nextChar();\n                }\n                if (this.ch == LexCodeBSL) {\n                    this.nextChar();\n                    if (this.ch == LexCode_u) {\n                        // 4 hex digits\n                        this.nextChar();\n                        for (var h = 0; h < 4 ; h++) {\n                            if (this.IsHexDigit(this.ch)) {\n                                this.nextChar();\n                            }\n                            else {\n                                this.reportScannerError("Invalid Unicode escape sequence");\n                                return staticTokens[TokenID.Error];\n                            }\n                        }\n                        var hexChar = parseInt(this.src.substring(this.pos - 4, this.pos), 16);\n\n                        // Verify is valid ID char \n                        if (lexIdStartTable[hexChar] || (!isFirstChar && LexIsDigit(hexChar)) ||\n                            (hexChar >= LexCodeASCIIChars && (LexIsUnicodeIdStart(hexChar) || (!isFirstChar && LexIsUnicodeDigit(hexChar))))) {\n                        }\n                        else { \n                            this.reportScannerError("Invalid identifier character");\n                            return staticTokens[TokenID.Error];\n                        }\n\n                        hasEscape = true;\n                        isFirstChar = false;\n                        continue;\n                    }\n\n                    this.reportScannerError("Invalid Unicode escape sequence");\n                    return staticTokens[TokenID.Error];\n                }\n        ';
var v27708 = v27709 + '        break;\n            }\n\n            var id: number;\n            var text = this.src.substring(this.startPos, this.pos);\n            if (!hasEscape && (id = LexKeywordTable.lookup(text)) != null) {\n                return staticTokens[id];\n            }\n            else {\n                return new IdentifierToken(text, hasEscape);\n            }\n        }\n\n        public innerScan(): Token {\n            var rtok;\n            this.tokenStart();\n            this.ch = this.peekChar();\n\n            start: while (this.pos < this.len) {\n                 if (lexIdStartTable[this.ch] || this.ch == LexCodeBSL || (this.ch >= LexCodeASCIIChars && LexIsUnicodeIdStart(this.ch))) {\n                    // identifier or keyword\n                    return this.scanIdentifier();\n                }\n                else if (this.ch == LexCodeSpace) {\n                    if (!this.interveningWhitespace) {\n                        this.interveningWhitespacePos = this.pos;\n                    }\n                    do {\n                        this.nextChar();\n                    } while (this.ch == LexCodeSpace);\n                    if (this.mode == LexMode.Line) {\n                        var whitespaceText = this.src.substring(this.startPos, this.pos);\n                        return new WhitespaceToken(TokenID.Whitespace, whitespaceText);\n                    }\n                    else {\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                    }\n                }\n                else if (this.ch == LexCodeSLH) {\n                    this.nextChar();\n                    var commentText;\n                    if (this.ch == LexCodeSLH) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.finishSinglelineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var commentToken = new CommentToken(TokenID.Comment, commentText,/*isBlock*/false, commentStartPos, commentStartLine,/*endsLine*/false);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n\n                        this.interveningWhitespace = true;\n                    }\n                    else if (this.ch == LexCodeMUL) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.nextChar();  // Skip the "*"\n                        this.finishMultilineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var endsLine = this.endsLine(this.peekChar());\n                        var commentToken = new CommentToken(TokenID.Comment, commentText,/*isBlock*/true, commentStartPos, commentStartLine, endsLine);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n                        this.interveningWhitespace = true;\n                    }\n                    else {\n                        var regexTok = this.speculateRegex();\n                        if (regexTok) {\n                            return regexTok;\n                        }\n                        else {\n                            if (this.peekCharAt(this.pos) == LexCodeEQ) {\n                                this.nextChar();\n                                return staticTokens[TokenID.SlashEquals];\n                            }\n                            else {\n                                return staticTokens[TokenID.Slash];\n                            }\n                        }\n                    }\n                }\n                else if (this.ch == LexCodeSMC) {\n                    this.nextChar();\n                    return staticTokens[TokenID.Semicolon];\n                }\n                else if ((this.ch == LexCodeAPO) || (this.ch == LexCodeQUO)) {\n                    return this.scanSt';
var v27707 = v27708 + "ringConstant();\n                }\n                else if (autoToken[this.ch]) {\n                    var atok = autoToken[this.ch];\n                    if (atok.tokenId == TokenID.OpenBrace) {\n                        this.leftCurlyCount++;\n                    }\n                    else if (atok.tokenId == TokenID.CloseBrace) {\n                        this.rightCurlyCount++;\n                    }\n                    this.nextChar();\n                    return atok;\n                }\n                else if ((this.ch >= LexCode_0) && (this.ch <= LexCode_9)) {\n                    rtok = this.scanNumber();\n                    if (rtok) {\n                        return rtok;\n                    }\n                    else {\n                        this.nextChar();\n                        return staticTokens[TokenID.Error];\n                    }\n                }\n                else switch (this.ch) {\n                    // TAB\n                    case LexCodeTAB:\n                    case LexCodeVTAB:\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        if (this.mode == LexMode.Line) {\n                            do {\n                                this.nextChar();\n                            } while ((this.ch == LexCodeSpace) || (this.ch == 9));\n                            var wsText = this.src.substring(this.startPos, this.pos);\n                            return new WhitespaceToken(TokenID.Whitespace, wsText);\n                        }\n                        else {\n                            this.interveningWhitespace = true;\n                        }\n                     // Newlines and BOM\n                    case 0xFF: // UTF16 SEQUENCE\n                    case 0xFE:\n                    case 0xEF:    // UTF8 SEQUENCE\n                    case 0xBB:\n                    case 0xBF:\n                    case LexCodeLS:\n                    case LexCodePS:\n                    case LexCodeNWL:\n                    case LexCodeRET:\n                        if (this.ch == LexCodeNWL) {\n                            this.newLine();\n                            if (this.mode == LexMode.Line) {\n                                return staticTokens[TokenID.EndOfFile];\n                            }\n                        }\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        this.nextChar();\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                        break;\n                    case LexCodeDOT: {\n                        if (this.peekCharAt(this.pos + 1) == LexCodeDOT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeDOT) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.DotDotDot];\n                            }\n                            else {\n                                this.nextChar();\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            rtok = this.scanFraction();\n                            if (rtok) {\n                                return rtok;\n                            }\n                            else {\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        // break;\n                    }\n                    case LexCodeEQ:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.EqualsEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.EqualsEquals];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeGT) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.EqualsGreaterThan];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Equals];\n                        }\n                    // break;\n                    case LexCodeBNG:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTo";
var v27706 = v27707 + "kens[TokenID.ExclamationEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.ExclamationEquals];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Exclamation];\n                        }\n                    // break;\n                    case LexCodePLS:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodePLS) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusPlus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Plus];\n                        }\n                    // break;\n                    case LexCodeMIN:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeMIN) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusMinus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Minus];\n                        }\n                    // break;\n                    case LexCodeMUL:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AsteriskEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Asterisk];\n                        }\n                    // break;\n                    case LexCodePCT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PercentEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Percent];\n                        }\n                    // break;\n                    case LexCodeLT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeLT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.LessThanLessThanEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.LessThanLessThan];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.LessThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.LessThan];\n                        }\n                    //  break;\n                    case LexCodeGT:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeGT) {\n                            if (this.peekCharAt(this.pos + 2) == LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.GreaterThanGreaterThanEquals];\n                            }\n                            else if (this.peekCharAt(this.pos + 2) == LexCodeGT) {\n                                if (this.peekCharAt(this.pos + 3) == LexCodeEQ) {\n                                    this.advanceChar(4);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThanEquals];\n                                }\n                                else {\n                                    this.advanceChar(3);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThan];\n                                }\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.GreaterThanGreaterThan];\n                            }\n                        }\n                        ";
var v27705 = v27706 + 'else if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.GreaterThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.GreaterThan];\n                        }\n                    // break;\n                    case LexCodeXOR:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.CaretEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Caret];\n                        }\n                    //  break;\n                    case LexCodeBAR:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeBAR) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarBar];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Bar];\n                        }\n                    //  break;\n                    case LexCodeAMP:\n                        if (this.peekCharAt(this.pos + 1) == LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) == LexCodeAMP) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandAmpersand];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.And];\n                        }\n                    //  break;\n                    default:\n                        // Report error\n                        this.reportScannerError("Invalid character");\n                        this.nextChar();\n\n                        continue start;\n                }\n            }\n            return staticTokens[TokenID.EndOfFile];\n        }\n\n        private reportScannerError(message: string) { \n            if (this.reportError) { \n                this.reportError(message);\n            }\n        }\n    }\n\n    // Reseverved words only apply to Identifiers, not IdentifierNames\n    export function convertTokToIDName(tok: Token): bool {\n        return convertTokToIDBase(tok, true, false);\n    }\n\n    export function convertTokToID(tok: Token, strictMode: bool): bool {\n        return convertTokToIDBase(tok, false, strictMode);\n    }\n\n    function convertTokToIDBase(tok: Token, identifierName: bool, strictMode: bool): bool {\n        if (tok.tokenId <= TokenID.LimKeyword) {\n            var tokInfo = lookupToken(tok.tokenId);\n            if (tokInfo != undefined) {\n                var resFlags = Reservation.Javascript | Reservation.JavascriptFuture;\n                if (strictMode) {\n                    resFlags |= Reservation.JavascriptFutureStrict;\n                }\n                if (identifierName || !hasFlag(tokInfo.reservation, resFlags)) {\n                    return true;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n\n    // Return the (1-based) line number from a character offset using the provided linemap.\n    export function getLineNumberFromPosition(lineMap: number[], position: number): number {\n        if (position === -1)\n            return 0;\n\n        // Binary search\n        var min = 0;\n        var max = lineMap.length - 1;\n        while (min < max) {\n            var med = (min + max) >> 1;\n            if (position < lineMap[med]) {\n                max = med - 1;\n            }\n            else if (position < lineMap[med + 1]) {\n                min = max = med; // found it\n            }\n            else {\n                min = med + 1;\n            }\n        }\n\n        return min;\n    }\n\n    /// Return the [line, column] data for a given offset and a lineMap.\n    /// Note that the returned line is 1-based, while the column is 0-based.\n    export function getSourceLineColFromMap(lineCol: ILineCol, minChar: number, lineMap: number[]): void {\n        var line = getLineNumberFromPosition(lineMap, minChar);\n\n        if (line > 0) {\n            lineCol.line = line;\n            lineCol.col = (minChar - lineMap[line]);\n        }\n    }\n\n    // Return the [line, column] (both 1 based) corresponding to a given position in a given script.\n    export funct';
var v27704 = v27705 + 'ion getLineColumnFromPosition(script: TypeScript.Script, position: number): ILineCol {\n        var result = { line: -1, col: -1 };\n        getSourceLineColFromMap(result, position, script.locationInfo.lineMap);\n        if (result.col >= 0) {\n            result.col++;   // Make it 1-based\n        }\n        return result;\n    }\n\n    //\n    // Return the position (offset) corresponding to a given [line, column] (both 1-based) in a given script.\n    //\n    export function getPositionFromLineColumn(script: TypeScript.Script, line: number, column: number): number {\n        return script.locationInfo.lineMap[line] + (column - 1);\n    }\n    \n    // Return true if the token is a primitive type\n    export function isPrimitiveTypeToken(token: Token) {\n        switch (token.tokenId) {\n            case TokenID.Any:\n            case TokenID.Bool:\n            case TokenID.Number:\n            case TokenID.String:\n                return true;\n        }\n        return false;\n    }\n\n    // Return true if the token is a primitive type\n    export function isModifier(token: Token) {\n        switch (token.tokenId) {\n            case TokenID.Public:\n            case TokenID.Private:\n            case TokenID.Static:\n                return true;\n        }\n        return false;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class AssignScopeContext {\n        constructor (public scopeChain: ScopeChain,\n                     public typeFlow: TypeFlow,\n                     public modDeclChain: ModuleDeclaration[]) {\n        }\n    }\n\n    export function pushAssignScope(scope: SymbolScope,\n        context: AssignScopeContext,\n        type: Type,\n        classType: Type,\n        fnc: FuncDecl) {\n\n        var chain = new ScopeChain(null, context.scopeChain, scope);\n        chain.thisType = type;\n        chain.classType = classType;\n        chain.fnc = fnc;\n        context.scopeChain = chain;\n    }\n\n    export function popAssignScope(context: AssignScopeContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n\n    export function instanceCompare(a: Symbol, b: Symbol) {\n        if (((a == null) || (!a.isInstanceProperty()))) {\n            return b;\n        }\n        else {\n            return a;\n        }\n    }\n\n    export function instanceFilterStop(s: Symbol) {\n        return s.isInstanceProperty();\n    }\n\n    export class ScopeSearchFilter {\n\n        constructor (public select: (a: Symbol, b: Symbol) =>Symbol,\n                            public stop: (s: Symbol) =>bool) { }\n\n        public result: Symbol = null;\n\n        public reset() {\n            this.result = null;\n        }\n\n        public update(b: Symbol): bool {\n            this.result = this.select(this.result, b);\n            if (this.result) {\n                return this.stop(this.result);\n            }\n            else {\n                return false;\n            }\n        }\n    }\n\n    export var instanceFilter = new ScopeSearchFilter(instanceCompare, instanceFilterStop);\n\n    export function preAssignModuleScopes(ast: AST, context: AssignScopeContext) {\n        var moduleDecl = <ModuleDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (moduleDecl.name && moduleDecl.mod) {\n            moduleDecl.name.sym = moduleDecl.mod.symbol;\n        }\n\n        var mod = moduleDecl.mod;\n\n        // We\'re likely here because of error recovery\n        if (!mod) {\n            return;\n        }\n\n        memberScope = new SymbolTableScope(mod.members, mod.ambientMembers, mod.enclosedTypes, mod.ambientEnclosedTypes, mod.symbol);\n        mod.memberScope = memberScope;\n        context.modDeclChain.push(moduleDecl);\n        context.typeFlow.checker.currentModDecl = moduleDecl;\n        aggScope = new SymbolAggregateScope(mod.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        mod.containedScope = aggScope;\n        if (mod.symbol) {\n            context.typeFlow.addLocalsFromScope(mod.containedScope, mod.symbol, moduleDecl.vars, mod.members.privateMembers, true);\n        }\n    }\n\n    export function preAssignClassScopes(ast: AST, context: AssignScopeContext) {\n        var classDecl = <InterfaceDeclaration>ast;\n        var memberScope: Symb';
var v27703 = v27704 + "olTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (classDecl.name && classDecl.type) {\n            classDecl.name.sym = classDecl.type.symbol;\n        }\n\n        var classType = ast.type;\n\n        if (classType) {\n            var classSym = classType.symbol;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(classType);\n\n            aggScope = new SymbolAggregateScope(classType.symbol);\n            aggScope.addParentScope(memberScope);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            classType.containedScope = aggScope;\n            classType.memberScope = memberScope;\n\n            var instanceType = classType.instanceType;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(instanceType);\n            instanceType.memberScope = memberScope;\n\n            aggScope = new SymbolAggregateScope(instanceType.symbol);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            pushAssignScope(aggScope, context, instanceType, classType, null);\n            instanceType.containedScope = aggScope;\n        }\n        else {\n            ast.type = context.typeFlow.anyType;\n        }\n    }\n\n    export function preAssignInterfaceScopes(ast: AST, context: AssignScopeContext) {\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (interfaceDecl.name && interfaceDecl.type) {\n            interfaceDecl.name.sym = interfaceDecl.type.symbol;\n        }\n\n        var interfaceType = ast.type;\n        memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(interfaceType);\n        interfaceType.memberScope = memberScope;\n        aggScope = new SymbolAggregateScope(interfaceType.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        interfaceType.containedScope = aggScope;\n    }\n\n    export function preAssignWithScopes(ast: AST, context: AssignScopeContext) {\n        var withStmt = <WithStatement>ast;\n        var withType = withStmt.type;\n\n        var members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        var ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        var withType = new Type();\n        var withSymbol = new WithSymbol(withStmt.minChar, context.typeFlow.checker.locationInfo.unitIndex, withType);\n        withType.members = members;\n        withType.ambientMembers = ambientMembers;\n        withType.symbol = withSymbol;\n        withType.setHasImplementation();\n        withStmt.type = withType;\n\n        var withScope = new TypeScript.SymbolScopeBuilder(withType.members, withType.ambientMembers, null, null, context.scopeChain.scope, withType.symbol);\n\n        pushAssignScope(withScope, context, null, null, null);\n        withType.containedScope = withScope;\n    }\n\n    export function preAssignFuncDeclScopes(ast: AST, context: AssignScopeContext) {\n        var funcDecl = <FuncDecl>ast;\n\n        var container: Symbol = null;\n        var localContainer: Symbol = null;\n        if (funcDecl.type) {\n            localContainer = ast.type.symbol;\n        }\n\n        var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n        var isInnerStatic = isStatic && context.scopeChain.fnc != null;\n        // for inner static functions, use the parent's member scope, so local vars cannot be captured\n        var parentScope = isInnerStatic ? context.scopeChain.fnc.type.memberScope : context.scopeChain.scope;\n\n        // if this is not a method, but enclosed by class, use constructor as\n        // the enclosing scope\n        // REVIEW: Some twisted logic here - this needs to be cleaned up once old classes are removed\n        //  - if it's a new class, always use the contained scope, since we initialize the constructor scope below\n        if (context.scopeChain.thisType &&\n            (!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod))) {\n            var instType = context.scopeChain.thisType;\n\n            if (!(instType.typeFlags & TypeFlags.IsClass) && !hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                if (!funcDecl.isMethod() || isStatic) {\n                    parentScope = instType.constructorScope;\n                }\n                else {\n                    // use constructor scope if a method as well\n                    parentScope = instType.containedScope;\n                }\n            }\n            else {\n                if (context.scopeChain.previous.scope.container &&\n                    context.scopeChain.previous.scope.container.declAST &&\n                    context.scopeChain.previous.scope.container.declAST.nodeType == NodeType.FuncDecl &&\n                    (<FuncDecl>context.scopeChain.previous.sco";
var v27702 = v27703 + "pe.container.declAST).isConstructor) {\n\n                        // if the parent is the class constructor, use the constructor scope\n                    parentScope = instType.constructorScope;\n                }\n                else if (isStatic && context.scopeChain.classType) {\n                    parentScope = context.scopeChain.classType.containedScope;\n                }\n                else {\n                    // else, use the contained scope\n                    parentScope = instType.containedScope;\n                }\n            }\n            container = instType.symbol;\n        }\n        else if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            // sets the container to the class type's symbol (which is shared by the instance type)\n            container = context.scopeChain.thisType.symbol;\n        }\n\n        if (funcDecl.type == null || hasFlag(funcDecl.type.symbol.flags, SymbolFlags.TypeSetDuringScopeAssignment)) {\n            if (context.scopeChain.fnc && context.scopeChain.fnc.type) {\n                container = context.scopeChain.fnc.type.symbol;\n            }\n\n            var funcScope = null;\n            var outerFnc: FuncDecl = context.scopeChain.fnc;\n            var nameText = funcDecl.name ? funcDecl.name.actualText : null;\n            var fgSym: TypeSymbol = null;\n\n            if (isStatic) {\n                // In the case of function-nested statics, no member list will have bee initialized for the function, so we need\n                // to copy it over.  We don't set this by default because having a non-null member list will throw off assignment\n                // compatibility tests\n                if (outerFnc.type.members == null && container.getType().memberScope) {\n                    outerFnc.type.members = (<SymbolScopeBuilder>(<TypeSymbol>container).type.memberScope).valueMembers;\n                }\n                funcScope = context.scopeChain.fnc.type.memberScope;\n                outerFnc.innerStaticFuncs[outerFnc.innerStaticFuncs.length] = funcDecl;\n            }\n            else {\n                funcScope = context.scopeChain.scope;\n            }\n\n            // REVIEW: We don't search for another sym for accessors to prevent us from\n            // accidentally coalescing function signatures with the same name (E.g., a function\n            // 'f' the outer scope and a setter 'f' in an object literal within that scope)\n            if (nameText && nameText != \"__missing\" && !funcDecl.isAccessor()) {\n                if (isStatic) {\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n            }\n\n            context.typeFlow.checker.createFunctionSignature(funcDecl, container,\n                                                            funcScope, fgSym, fgSym == null);\n\n            // it's a getter or setter for a class property                     \n            if (!funcDecl.accessorSymbol && \n                (funcDecl.fncFlags & FncFlags.ClassMethod) &&\n                container && \n                ((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || \n                    (fgSym && fgSym.isAccessor())) \n            {\n                funcDecl.accessorSymbol = context.typeFlow.checker.createAccessorSymbol(funcDecl, fgSym, container.getType(), (funcDecl.isMethod() && isStatic), true, funcScope, container);\n            }\n\n            funcDecl.type.symbol.flags |= SymbolFlags.TypeSetDuringScopeAssignment;\n        }\n\n        // Set the symbol for functions and their overloads\n        if (funcDecl.name && funcDecl.type) {\n            funcDecl.name.sym = funcDecl.type.symbol;\n        }\n\n        // Keep track of the original scope type, because target typing might override\n        // the \"type\" member. We need the original \"Scope type\" for completion list, etc.\n        funcDecl.scopeType = funcDecl.type;\n\n        // Overloads have no scope, so bail here\n        if (funcDecl.isOverload) {\n            return;\n        }\n\n        var funcTable = new StringHashTable();\n        var funcMembers = new ScopedMembers(new DualStringHashTable(funcTable, new StringHashTable()));\n        var ambientFuncTable = new StringHashTable();\n        var ambientFuncMembers = new ScopedMembers(new DualStringHashTable(ambientFuncTable, new StringHashTable()));\n        var funcStaticTable = new StringHashTable();\n        var funcStaticMembers = new ScopedMembers(new DualStringHashTable(funcStaticTable, new StringHashTable()));\n        var ambientFuncStaticTable = new StringHashTable();\n        var ambientFuncStaticMembers = new ScopedMembers(new DualStringHashTable(ambientFuncStaticTable, new StringHashTable()));\n\n        // REVIEW: Is it a problem that this is being set twice for properties and constructors?\n        funcDe";
var v27701 = v27702 + "cl.unitIndex = context.typeFlow.checker.locationInfo.unitIndex;\n\n        var locals = new SymbolScopeBuilder(funcMembers, ambientFuncMembers, null, null, parentScope, localContainer);\n        var statics = new SymbolScopeBuilder(funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null);\n\n        if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            context.scopeChain.thisType.constructorScope = locals;\n        }\n\n        // basically, there are two problems\n        // - Above, for new classes, we were overwriting the constructor scope with the containing scope.  This caused constructor params to be\n        // in scope everywhere\n        // - Below, we're setting the contained scope table to the same table we were overwriting the constructor scope with, which we need to\n        // fish lambda params, etc, out (see funcTable below)\n        //\n        // A good first approach to solving this would be to change addLocalsFromScope to take a scope instead of a table, and add to the\n        // constructor scope as appropriate\n\n        funcDecl.symbols = funcTable;\n\n        if (!funcDecl.isSpecialFn()) {\n            var group = funcDecl.type;\n            var signature = funcDecl.signature;\n\n            if (!funcDecl.isConstructor) {\n                group.containedScope = locals;\n                locals.container = group.symbol;\n\n                group.memberScope = statics;\n                statics.container = group.symbol;\n            }\n            funcDecl.enclosingFnc = context.scopeChain.fnc;\n            group.enclosingType = isStatic ? context.scopeChain.classType : context.scopeChain.thisType;\n            // for mapping when type checking\n            var fgSym = <TypeSymbol>ast.type.symbol;\n            if (((funcDecl.fncFlags & FncFlags.Signature) == FncFlags.None) && funcDecl.vars) {\n                context.typeFlow.addLocalsFromScope(locals, fgSym, funcDecl.vars,\n                                                    funcTable, false);\n                context.typeFlow.addLocalsFromScope(statics, fgSym, funcDecl.statics,\n                                                    funcStaticTable, false);\n            }\n            if (signature.parameters) {\n                var len = signature.parameters.length;\n                for (var i = 0; i < len; i++) {\n                    var paramSym: ParameterSymbol = signature.parameters[i];\n                    context.typeFlow.checker.resolveTypeLink(locals,\n                                                                paramSym.parameter.typeLink, true);\n                }\n            }\n            context.typeFlow.checker.resolveTypeLink(locals, signature.returnType,\n                                                        funcDecl.isSignature());\n        }\n\n        if (!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n            var thisType = (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) ? context.scopeChain.thisType : null;\n            pushAssignScope(locals, context, thisType, null, funcDecl);\n        }\n\n        if (funcDecl.name && hasFlag(funcDecl.fncFlags, FncFlags.IsFunctionExpression)) {\n            // If the function is an expression, the name will not be visible in the enclosing scope.\n            // Add the function symbol under its name to the local scope to allow for recursive calls.\n            if (funcDecl.name.sym) {\n                funcTable.add(funcDecl.name.actualText, funcDecl.name.sym);\n            }\n        }\n    }\n\n    export function preAssignCatchScopes(ast: AST, context: AssignScopeContext) {\n        var catchBlock = <Catch>ast;\n        if (catchBlock.param) {\n            var catchTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable())); // REVIEW: Should we be allocating a public table instead of a private one?\n            var catchLocals = new SymbolScopeBuilder(catchTable, null, null, null, context.scopeChain.scope,\n                                                   context.scopeChain.scope.container);\n            catchBlock.containedScope = catchLocals;\n            pushAssignScope(catchLocals, context, context.scopeChain.thisType, context.scopeChain.classType, context.scopeChain.fnc);\n        }\n    }\n\n    export function preAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n\n        if (ast) {\n            if (ast.nodeType == NodeType.List) {\n                var list = <ASTList>ast;\n                list.enclosingScope = context.scopeChain.scope;\n            }\n            else if (ast.nodeType == NodeType.ModuleDeclaration) {\n                preAssignModuleScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.ClassDeclaration) {\n                preAssignClassScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n                preAssignInterfaceScopes(";
var v27700 = v27701 + 'ast, context);\n            }\n            else if (ast.nodeType == NodeType.With) {\n                preAssignWithScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n                preAssignFuncDeclScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.Catch) {\n                preAssignCatchScopes(ast, context);\n            }\n            else if (ast.nodeType == NodeType.TypeRef) {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n        if (ast) {\n            if (ast.nodeType == NodeType.ModuleDeclaration) {\n                var prevModDecl = <ModuleDeclaration>ast;\n\n                popAssignScope(context);\n\n                context.modDeclChain.pop();\n                if (context.modDeclChain.length >= 1) {\n                    context.typeFlow.checker.currentModDecl = context.modDeclChain[context.modDeclChain.length - 1];\n                }\n            }\n            else if (ast.nodeType == NodeType.ClassDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.With) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>ast;\n                if ((!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) && !funcDecl.isOverload) {\n                    popAssignScope(context);\n                }\n            }\n            else if (ast.nodeType == NodeType.Catch) {\n                var catchBlock = <Catch>ast;\n                if (catchBlock.param) {\n                    popAssignScope(context);\n                }\n            }\n            else {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class TypeCollectionContext {\n        public script: Script = null;\n\n        constructor (public scopeChain: ScopeChain, public checker: TypeChecker) {\n        }\n    }\n\n    export class MemberScopeContext {\n        public type: Type = null;\n        public ast: AST = null;\n        public scope: SymbolScope;\n        public options = new AstWalkOptions();\n\n        constructor (public flow: TypeFlow, public pos: number, public matchFlag: ASTFlags) {\n        }\n    }\n\n    export class EnclosingScopeContext {\n\n        public scopeGetter: () => SymbolScope = null;\n        public objectLiteralScopeGetter: () => SymbolScope = null;\n        public scopeStartAST: AST = null;\n        public skipNextFuncDeclForClass = false;\n        public deepestModuleDecl: ModuleDeclaration = null;\n        public enclosingClassDecl: TypeDeclaration = null;\n        public enclosingObjectLit: UnaryExpression = null;\n        public publicsOnly = true;\n        public useFullAst = false;\n        private scriptFragment: Script;\n\n        constructor (public logger: ILogger,\n                    public script: Script,\n                    public text: ISourceText,\n                    public pos: number,\n                    public isMemberCompletion: bool) {\n        }\n\n        public getScope(): SymbolScope {\n            return this.scopeGetter();\n        }\n\n        public getObjectLiteralScope(): SymbolScope {\n            return this.objectLiteralScopeGetter();\n        }\n\n        public getScopeAST() {\n            return this.scopeStartAST;\n        }\n\n        public getScopePosition() {\n            return this.scopeStartAST.minChar;\n        }\n\n        public getScriptFragmentStartAST(): AST {\n            return this.scopeStartAST;\n        }\n\n        public getScriptFragmentPosition(): number {\n            return this.getScriptFragmentStartAST().minChar;\n        }\n\n        public getScriptFragment(): Script {\n            if (this.scriptFragment == null) {\n                var ast = this.getScriptFragmentStartAST();\n                var minChar = ast.minChar;\n                var limChar = (this.isMemberCompletion ? this.pos : this.po';
var v27699 = v27700 + "s + 1);\n                this.scriptFragment = TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null/*errorCapture*/).Script;\n            }\n            return this.scriptFragment;\n        }\n    }\n\n    export function preFindMemberScope(ast: AST, parent: AST, walker: IAstWalker) {\n        var memScope: MemberScopeContext = walker.state;\n        if (hasFlag(ast.flags, memScope.matchFlag) && ((memScope.pos < 0) || (memScope.pos == ast.limChar))) {\n            memScope.ast = ast;\n            if ((ast.type == null) && (memScope.pos >= 0)) {\n                memScope.flow.inScopeTypeCheck(ast, memScope.scope);\n            }\n            memScope.type = ast.type;\n            memScope.options.stopWalk();\n        }\n        return ast;\n    }\n\n    export function pushTypeCollectionScope(container: Symbol,\n        valueMembers: ScopedMembers,\n        ambientValueMembers: ScopedMembers,\n        enclosedTypes: ScopedMembers,\n        ambientEnclosedTypes: ScopedMembers,\n        context: TypeCollectionContext,\n        thisType: Type,\n        classType: Type,\n        moduleDecl: ModuleDeclaration) {\n        var builder = new SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container);\n        var chain: ScopeChain = new ScopeChain(container, context.scopeChain, builder);\n        chain.thisType = thisType;\n        chain.classType = classType;\n        chain.moduleDecl = moduleDecl;\n        context.scopeChain = chain;\n    }\n\n    export function popTypeCollectionScope(context: TypeCollectionContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n\n    export function preFindEnclosingScope(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: EnclosingScopeContext = walker.state;\n        var minChar = ast.minChar;\n        var limChar = ast.limChar;\n\n        // Account for the fact completion list may be called at the end of a file which\n        // is has not been fully re-parsed yet.\n        if (ast.nodeType == NodeType.Script && context.pos > limChar)\n            limChar = context.pos;\n\n        if ((minChar <= context.pos) &&\n            (limChar >= context.pos)) {\n            switch (ast.nodeType) {\n                case NodeType.Script:\n                    var script = <Script>ast;\n                    context.scopeGetter = function () {\n                        return script.bod === null ? null : script.bod.enclosingScope;\n                    };\n                    context.scopeStartAST = script;\n                    break;\n\n                case NodeType.ClassDeclaration:\n                    context.scopeGetter = function () {\n                        return (ast.type === null || ast.type.instanceType.containedScope === null) ? null : ast.type.instanceType.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    context.enclosingClassDecl = <TypeDeclaration>ast;\n                    break;\n\n                case NodeType.ObjectLit:\n                    var objectLit = <UnaryExpression>ast;\n                    // Only consider target-typed object literals\n                    if (objectLit.targetType) {\n                        context.scopeGetter = function () {\n                            return objectLit.targetType.containedScope;\n                        };\n                        context.objectLiteralScopeGetter = function () {\n                            return objectLit.targetType.memberScope;\n                        }\n                        context.enclosingObjectLit = objectLit;\n                    }\n                    break;\n\n                case NodeType.ModuleDeclaration:\n                    context.deepestModuleDecl = <ModuleDeclaration>ast;\n                    context.scopeGetter = function () {\n                        return ast.type === null ? null : ast.type.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    break;\n\n                case NodeType.InterfaceDeclaration:\n                    context.scopeGetter = function () {\n                        return (ast.type === null) ? null : ast.type.containedScope;\n                    };\n                    context.scopeStartAST = ast;\n                    break;\n\n                case NodeType.FuncDecl: {\n                    var funcDecl = <FuncDecl>ast;\n                    if (context.skipNextFuncDeclForClass) {\n                        context.skipNextFuncDeclForClass = false;\n                    }\n                    else {\n                        context.scopeGetter = function () {\n                            // The scope of a class constructor is hidden somewhere we don't expect :-S\n                            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n                                if (ast.type && ast.type.enclosingType) {\n                                    return ast.type.enclosingType.constructorScope;\n                              ";
var v27698 = v27699 + '  }\n                            }\n\n                            if (funcDecl.scopeType) {\n                                return funcDecl.scopeType.containedScope;\n                            }\n\n                            if (funcDecl.type) {\n                                return funcDecl.type.containedScope;\n                            }\n                            return null;\n                        };\n                        context.scopeStartAST = ast;\n                    }\n                }\n                    break;\n            }\n            walker.options.goChildren = true;\n        }\n        else {\n            walker.options.goChildren = false;\n        }\n        return ast;\n    }\n\n    //\n    // Find the enclosing scope context from a position inside a script AST.\n    // The "scopeStartAST" of the returned scope is always valid.\n    // Return "null" if the enclosing scope can\'t be found.\n    //\n    export function findEnclosingScopeAt(logger: ILogger, script: Script, text: ISourceText, pos: number, isMemberCompletion: bool): EnclosingScopeContext {\n        var context = new EnclosingScopeContext(logger, script, text, pos, isMemberCompletion);\n\n        TypeScript.getAstWalkerFactory().walk(script, preFindEnclosingScope, null, null, context);\n\n        if (context.scopeStartAST === null)\n            return null;\n        return context;\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Signature {\n        public hasVariableArgList = false;\n        public returnType: TypeLink;\n        public parameters: ParameterSymbol[] = null;\n        public declAST: FuncDecl = null;\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public nonOptionalParameterCount = 0;\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Signature {\n            var result = new Signature();\n            if (this.hasVariableArgList) {\n                result.hasVariableArgList = true;\n            }\n            result.returnType = new TypeLink();\n            if (this.returnType.type) {\n                result.returnType.type =\n                    this.returnType.type.specializeType(pattern, replacement, checker, false);\n            }\n            else {\n                result.returnType.type = checker.anyType;\n            }\n\n            if (this.parameters) {\n                result.parameters = [];\n                for (var i = 0, len = this.parameters.length; i < len; i++) {\n                    var oldSym:ParameterSymbol = this.parameters[i];\n                    var paramDef = new ValueLocation();\n                    var paramSym = new ParameterSymbol(oldSym.name, oldSym.location,\n                                                     checker.locationInfo.unitIndex,\n                                                     paramDef);\n\n                    paramSym.declAST = this.declAST;\n                    paramDef.symbol = paramSym;\n                    paramDef.typeLink = new TypeLink();\n                    result.parameters[i] = paramSym;\n                    var oldType = oldSym.getType();\n                    if (oldType) {\n                        paramDef.typeLink.type = oldType.specializeType(pattern, replacement, checker, false);\n                        paramSym.declAST.type = paramDef.typeLink.type;\n                    }\n                    else {\n                        paramDef.typeLink.type = checker.anyType;\n                    }\n                }\n            }\n            result.nonOptionalParameterCount = this.nonOptionalParameterCount;\n            result.declAST = this.declAST;\n\n            return result;\n        }\n\n        public toString() {\n            return this.toStringHelper(false, false, null);\n        }\n\n        public toStringHelper(shortform: bool, brackets: bool, scope: SymbolScope) {\n            return this.toStringHelperEx(shortform, brackets, scope).toString();\n        }\n\n        public toStringHelperEx(shortform: bool, brackets: bool, scope: SymbolScope, prefix? : string = "") : MemberName {\n            var builder = new MemberNameArray();\n            if (brackets) {\n                builder.prefix =  prefix + "[";\n            }\n            else {\n                builder.prefix = prefix + "(";\n            }\n\n            var paramLen = this.parameters.length;\n            var len = this.hasVariableArgList ? paramLen - 1 : par';
var v27697 = v27698 + 'amLen;\n            for (var i = 0; i < len; i++) {\n                builder.add(MemberName.create(this.parameters[i].name + (this.parameters[i].isOptional() ? "?" : "") + ": "));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n                if (i < paramLen - 1) {\n                    builder.add(MemberName.create(", "));\n                }\n            }\n\n            if (this.hasVariableArgList) {\n                builder.add(MemberName.create("..." + this.parameters[i].name + ": "));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n            }\n\n            if (shortform) {\n                if (brackets) {\n                    builder.add(MemberName.create("] => "));\n                }\n                else {\n                    builder.add(MemberName.create(") => "));\n                }\n            }\n            else {\n                if (brackets) {\n                    builder.add(MemberName.create("]: "));\n                }\n                else {\n                    builder.add(MemberName.create("): "));\n                }\n            }\n\n            if (this.returnType.type) {\n                 builder.add(this.returnType.type.getScopedTypeNameEx(scope));\n            }\n            else {\n                builder.add(MemberName.create("any"));\n            }\n            return builder;\n        }\n    }\n\n    export class SignatureGroup {\n        public signatures: Signature[] = [];\n        public hasImplementation = true;\n        public definitionSignature: Signature = null;\n        public hasBeenTypechecked = false;\n        public flags: SignatureFlags = SignatureFlags.None;\n        public addSignature(signature: Signature) {\n            if (this.signatures == null) {\n                this.signatures = new Signature[];\n            }\n            this.signatures[this.signatures.length] = signature;\n            \n            // REVIEW: duplicates should be found within createFunctionSignature,\n            // so we won\'t check for them here\n            if (signature.declAST &&\n                !signature.declAST.isOverload &&\n                !signature.declAST.isSignature() && \n                !hasFlag(signature.declAST.fncFlags, FncFlags.Ambient) &&\n                hasFlag(signature.declAST.fncFlags, FncFlags.Definition)) {\n                this.definitionSignature = signature;\n            }\n        }\n\n        public toString() { return this.signatures.toString(); }\n        public toStrings(prefix: string, shortform: bool, scope: SymbolScope) {\n            var result : MemberName[] = [];  \n            var len = this.signatures.length;\n            if (len > 1) {\n                shortform = false;\n            }\n            for (var i = 0; i < len; i++) {\n                // the definition signature shouldn\'t be printed if there are overloads\n                if (len > 1 && this.signatures[i] == this.definitionSignature) {\n                    continue;\n                }\n                if (this.flags & SignatureFlags.IsIndexer) {\n                    result.push(this.signatures[i].toStringHelperEx(shortform, true, scope));\n                }\n                else {\n                    result.push(this.signatures[i].toStringHelperEx(shortform, false, scope, prefix));\n                }\n            }\n            \n            return result;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): SignatureGroup {\n            var result = new SignatureGroup();\n            if (this.signatures) {\n                for (var i = 0, len = this.signatures.length; i < len; i++) {\n                    result.addSignature(this.signatures[i].specializeType(pattern, replacement, checker));\n                }\n            }\n            return result;\n        }\n\n        // verifies that signatures are\n        //  - unique within a given group\n        //  - compatible with the declaration signature\n        public verifySignatures(checker: TypeChecker) {\n\n            var len = 0;\n            \n            // TODO: verify no signature pair with identical parameters\n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                for (var i = 0; i < len; i++) {\n                    \n                    for (var j = i + 1; j < len; j++) {\n                        // next check for equivalence between overloads - no two can be exactly the same                     \n                        if (this.signatures[i].declAST && this.signatures[j].declAST &&\n                            (!hasFlag(this.signatures[i].declAST.fncFlags, FncFlags.Definition) && !hasFlag(this.signatures[j].declAST.fncFlags, FncFlags.Definition)) &&\n                            checker.signaturesAreIdentical(this.signatures[i], this.signatures[j])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, (this.signatures[i].declAST && this.signatures[i].declAST.name) ? "Signature for \'" + this.signatures';
var v27696 = v27697 + '[i].declAST.name.actualText + "\' is duplicated" :"Signature is duplicated");\n                        }\n                    }\n                    \n                    // finally, ensure that the definition is assignable to each signature\n                    if (this.definitionSignature) {\n                        if (!checker.signatureIsAssignableToTarget(this.definitionSignature, this.signatures[i])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload signature is not compatible with function definition");\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheck(checker: TypeChecker, ast: AST, hasConstruct:bool) {\n            \n            if (this.hasBeenTypechecked) {\n                return;\n            }\n            \n            // set here to prevent us from recursively invoking typeCheck again\n            this.hasBeenTypechecked = true;\n            \n            var len = 0;\n            \n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                // first, typecheck each signature\n                for (var i = 0; i < len; i++) {\n\n                    if (!hasConstruct && !this.definitionSignature && this.signatures[i].declAST && this.signatures[i].declAST.isOverload && !hasFlag(this.signatures[i].declAST.fncFlags, FncFlags.Ambient)) {\n                        checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload declaration lacks definition");\n                    }\n\n                    // If we\'re typechecking a constructor via one of its overloads, ensure that the outer class is typechecked, since we need to validate its inheritance properties\n                    // to properly check that \'super\' is being used correctly\n                    if (this.signatures[i].declAST && this.signatures[i].declAST.isConstructor && this.signatures[i].declAST.classDecl && this.signatures[i].declAST.classDecl.type.symbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                        checker.typeFlow.typeCheck(this.signatures[i].declAST.classDecl);\n                    }\n\n                    checker.typeFlow.typeCheck(this.signatures[i].declAST);\n                }\n\n                this.verifySignatures(checker);\n            }\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n///<reference path=\'..\\harness\\external\\json2.ts\' />\n\nmodule TypeScript {\n    export class SourceMapPosition {\n        public sourceLine: number;\n        public sourceColumn: number;\n        public emittedLine: number;\n        public emittedColumn: number;\n    }\n\n    export class SourceMapping {\n        public start = new SourceMapPosition();\n        public end = new SourceMapPosition();\n        public nameIndex: number = -1;\n        public childMappings: SourceMapping[] = [];\n    }\n\n    export class SourceMapper {\n        static MapFileExtension = ".map";\n        \n        public sourceMappings: SourceMapping[] = [];\n        public currentMappings: SourceMapping[][] = [];\n\n        public names: string[] = [];\n        public currentNameIndex: number[] = [];\n\n        public jsFileName: string;\n        public tsFileName: string;\n\n        constructor(tsFileName: string, jsFileName: string, public jsFile: ITextWriter, public sourceMapOut: ITextWriter, public errorReporter: ErrorReporter) {\n            this.currentMappings.push(this.sourceMappings);\n\n            jsFileName = switchToForwardSlashes(jsFileName);\n            this.jsFileName = TypeScript.getPrettyName(jsFileName, false, true);\n\n            var removalIndex = jsFileName.lastIndexOf(this.jsFileName);\n            var fixedPath = jsFileName.substring(0, removalIndex);\n\n            this.tsFileName = TypeScript.getRelativePathToFixedPath(fixedPath, tsFileName);\n        }\n        \n        // Generate source mapping\n        static EmitSourceMapping(allSourceMappers: SourceMapper[]) {\n            // At this point we know that there is at least one source mapper present.\n            // If there are multiple source mappers, all will correspond to same map file but different sources\n\n            // Output map file name into the js file\n            var sourceMapper = allSourceMappers[0];\n            sourceMapper.jsFile.WriteLine("//@ sourceMappingURL=" + sourceMapper.jsFileName + SourceMapper.MapFileExtension);\n\n  ';
var v27695 = v27696 + '          // Now output map file\n            var sourceMapOut = sourceMapper.sourceMapOut;\n            var mappingsString = "";\n            var tsFiles: string[] = [];\n\n            var prevEmittedColumn = 0;\n            var prevEmittedLine = 0;\n            var prevSourceColumn = 0;\n            var prevSourceLine = 0;\n            var prevSourceIndex = 0;\n            var prevNameIndex = 0;\n            var namesList: string[] = [];\n            var namesCount = 0;\n            var emitComma = false;\n\n            var recordedPosition: SourceMapPosition = null;\n            for (var sourceMapperIndex = 0; sourceMapperIndex < allSourceMappers.length; sourceMapperIndex++) {\n                sourceMapper = allSourceMappers[sourceMapperIndex];\n\n                // If there are any mappings generated\n                var currentSourceIndex = tsFiles.length;\n                tsFiles.push(sourceMapper.tsFileName);\n\n                // Join namelist\n                if (sourceMapper.names.length > 0) {\n                    namesList.push.apply(namesList, sourceMapper.names);\n                }\n\n                var recordSourceMapping = (mappedPosition: SourceMapPosition, nameIndex: number) => {\n                    if (recordedPosition != null &&\n                        recordedPosition.emittedColumn == mappedPosition.emittedColumn &&\n                        recordedPosition.emittedLine == mappedPosition.emittedLine) {\n                        // This position is already recorded\n                        return;\n                    }\n\n                    // Record this position\n                    if (prevEmittedLine !== mappedPosition.emittedLine) {\n                        while (prevEmittedLine < mappedPosition.emittedLine) {\n                            prevEmittedColumn = 0;\n                            mappingsString = mappingsString + ";";\n                            prevEmittedLine++;\n                        }\n                        emitComma = false;\n                    }\n                    else if (emitComma) {\n                        mappingsString = mappingsString + ",";\n                    }\n\n                    // 1. Relative Column\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.emittedColumn - prevEmittedColumn);\n                    prevEmittedColumn = mappedPosition.emittedColumn;\n\n                    // 2. Relative sourceIndex \n                    mappingsString = mappingsString + Base64VLQFormat.encode(currentSourceIndex - prevSourceIndex);\n                    prevSourceIndex = currentSourceIndex;\n\n                    // 3. Relative sourceLine 0 based\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceLine - 1 - prevSourceLine);\n                    prevSourceLine = mappedPosition.sourceLine - 1;\n\n                    // 4. Relative sourceColumn 0 based \n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceColumn - prevSourceColumn);\n                    prevSourceColumn = mappedPosition.sourceColumn;\n\n                    // 5. Relative namePosition 0 based\n                    if (nameIndex >= 0) {\n                        mappingsString = mappingsString + Base64VLQFormat.encode(namesCount + nameIndex - prevNameIndex);\n                        prevNameIndex = namesCount + nameIndex;\n                    }\n\n                    emitComma = true;\n                    recordedPosition = mappedPosition;\n                }\n\n                // Record starting spans\n                var recordSourceMappingSiblings = (sourceMappings: SourceMapping[]) => {\n                    for (var i = 0; i < sourceMappings.length; i++) {\n                        var sourceMapping = sourceMappings[i];\n                        recordSourceMapping(sourceMapping.start, sourceMapping.nameIndex);\n                        recordSourceMappingSiblings(sourceMapping.childMappings);\n                        recordSourceMapping(sourceMapping.end, sourceMapping.nameIndex);\n                    }\n                }\n\n                recordSourceMappingSiblings(sourceMapper.sourceMappings, -1);\n                namesCount = namesCount + sourceMapper.names.length;\n            }\n\n            // Write the actual map file\n            if (mappingsString != "") {\n                sourceMapOut.Write(JSON2.stringify({\n                    version: 3,\n                    file: sourceMapper.jsFileName,\n                    sources: tsFiles,\n                    names: namesList,\n                    mappings: mappingsString\n                }));\n            }\n\n            // Done, close the file\n            try {\n                // Closing files could result in exceptions, report them if they occur\n                sourceMapOut.Close();\n            } catch (ex) {\n                sourceMapper.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under';
var v27694 = v27695 + ' the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // private members are private to the scope\n    // public members are public to the scope\n    export class ScopedMembers {\n\n        public allMembers: IHashTable;\n        public publicMembers: IHashTable;\n        public privateMembers: IHashTable;\n\n        constructor (public dualMembers: DualStringHashTable) { \n            this.allMembers = this.dualMembers;\n            this.publicMembers = this.dualMembers.primaryTable;\n            this.privateMembers = this.dualMembers.secondaryTable;\n        }\n\n        // add a public member\n        public addPublicMember(key: string, data) { return this.dualMembers.primaryTable.add(key, data); }\n\n        // add a private member \n        public addPrivateMember(key: string, data) { return this.dualMembers.secondaryTable.add(key, data); }\n    }\n\n    export enum SymbolKind {\n        None,\n        Type,\n        Field,\n        Parameter,\n        Variable,\n    }\n\n    export class SymbolScope {\n        constructor (public container: Symbol) { }\n        public printLabel() { return "base"; }\n        public getAllSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        public getAllTypeSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        public getAllValueSymbolNames(members: bool): string[]{\n            return ["please", "implement", "in", "derived", "classes"];\n        }\n        // advanced search using a filter\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in this immediate scope\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in value namespace \n        public find(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find symbol that supplies an implementation\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // restrict the search to ambient values\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        public print(outfile: ITextWriter) {\n            if (this.container) {\n                outfile.WriteLine(this.printLabel() + " scope with container: " + this.container.name + "...");\n            }\n            else {\n                outfile.WriteLine(this.printLabel() + " scope...");\n            }\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, errorReporter: ErrorReporter, publicOnly: bool,\n            typespace: bool, ambient: bool): void {\n            throw new Error("please implement in derived class");\n        }\n\n        public getTable(): IHashTable {\n            throw new Error("please implement in derived class");\n        }\n    }\n\n    function symbolCanBeUsed(sym: Symbol, publicOnly) {\n        return publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                            (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                          : true;\n    }\n\n    export class SymbolAggregateScope extends SymbolScope {\n        public printLabel() { return "agg"; }\n        public valueCache: IHashTable = null;\n        public valueImplCache: IHashTable = null;\n        public valueAmbientCache: IHashTable = null;\n        public typeCache: IHashTable = null;\n        public typeImplCache: IHashTable = null;\n        public typeAmbientCache: IHashTable = null;\n        public parents: SymbolScope[] = null;\n        public container: Symbol;\n\n        constructor (container: Symbol) {\n            super(container);\n            this.container = container;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var sym = this.parents[i].search(filter, name, publicOnly, typespace);\n                    if (sym) {\n                        if (filter.update(sym)) {\n                            return sym;\n                        }\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public getAllSymbolNames(members';
var v27693 = v27694 + ": bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllTypeSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllValueSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    this.parents[i].print(outfile);\n                }\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var implCache = this.valueImplCache;\n\n            if (typespace) {\n                implCache = this.typeImplCache;\n            }\n            if (implCache &&\n                ((sym = implCache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].findImplementation(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (implCache) {\n                if (typespace) {\n                    this.typeImplCache = new StringHashTable();\n                    implCache = this.typeImplCache;\n                }\n                else {\n                    this.valueImplCache = new StringHashTable();\n                    implCache = this.valueImplCache;\n                }\n            }\n            implCache.add(name, sym);\n            return sym;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueCache;\n\n            if (typespace) {\n                cache = this.typeCache;\n            }\n            if (cache &&\n                ((sym = cache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType == NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).fncFlags, FncFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].find(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache == null) {\n                if (typespace) {\n                    this.typeCache = new StringHashTable();\n                    cache = this.typeCache;\n                }\n                else {\n                    this.valueCache = new StringHashTable();\n                    cache = this.valueCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueAmbientCache;\n            if (typespace) {\n                cache = this.typeAmbientCache;\n            }\n            if (cache && ((sym = cache.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym =";
var v27692 = v27693 + ' this.parents[i].findAmbient(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache == null) {\n                if (typespace) {\n                    this.typeAmbientCache = new StringHashTable();\n                    cache = this.typeAmbientCache;\n                }\n                else {\n                    this.valueAmbientCache = new StringHashTable();\n                    cache = this.valueAmbientCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public addParentScope(parent: SymbolScope): void {\n            if (this.parents == null) {\n                this.parents = new SymbolScope[];\n            }\n            this.parents[this.parents.length] = parent;\n        }\n    }\n\n    export class SymbolTableScope extends SymbolScope {\n        public container: Symbol;\n\n        constructor(public valueMembers: ScopedMembers,\n                            public ambientValueMembers: ScopedMembers,\n                            public enclosedTypes: ScopedMembers,\n                            public ambientEnclosedTypes: ScopedMembers,\n                            container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return "table"; }\n\n        public getAllSymbolNames(members: bool): string[]{\n            var result = this.getAllTypeSymbolNames(members);\n\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym = this.find(name, publicOnly, typespace);\n            filter.update(sym);\n            return filter.result;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var table: IHashTable = null;\n            var ambientTable: IHashTable = null;\n\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            else {\n                table = (this.valueMembers == null) ? null :\n                                publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n                ambientTable = (this.ambientValueMembers == null) ? null :\n                                    publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            }\n            if (ambientTable) {\n                var s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n            if (table) {\n                var s = table.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                var s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.valueMembers) {\n   ';
var v27691 = v27692 + '             this.valueMembers.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map(function (key, sym, context) {\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = this.find(name, publicOnly, typespace);\n            if (sym) {\n                if (sym.kind() == SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>sym;\n                    if (!typeSym.type.hasImplementation()) {\n                        sym = null;\n                    }\n                }\n                else if (sym.container) {\n                    if (sym.container.kind() == SymbolKind.Type) {\n                        var ctypeSym = <TypeSymbol>sym.container;\n                        if (!ctypeSym.type.hasImplementation()) {\n                            sym = null;\n                        }\n                    }\n                }\n            }\n            return sym;\n        }\n\n        public getTable() {\n            return this.valueMembers.publicMembers;\n        }\n    }\n\n    export class SymbolScopeBuilder extends SymbolScope {\n        public container: Symbol;\n        \n        constructor (public valueMembers: ScopedMembers,\n                    public ambientValueMembers: ScopedMembers,\n                    public enclosedTypes: ScopedMembers,\n                    public ambientEnclosedTypes: ScopedMembers,\n                    public parent: SymbolScope,\n                    container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return "builder"; }\n        public getAllSymbolNames(members: bool): string[]{\n            var result: string[] = this.getAllTypeSymbolNames(members);\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllTypeSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllValueSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n        ';
var v27690 = v27691 + '        }\n            }\n            if (this.parent) {\n                sym = this.parent.search(filter, name, publicOnly, typespace);\n                if (sym) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.valueMembers) {\n                this.valueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine("  " + key);\n                }, null);\n            }\n            if (this.parent) {\n                this.parent.print(outfile);\n            }\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (table && ((sym = table.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.find(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.findAmbient(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers == null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers == null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes == null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes == null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            return null;\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, ';
var v27689 = v27690 + 'errorReporter: ErrorReporter, insertAsPublic: bool, typespace: bool, ambient: bool): void {\n            var table = null;\n\n            if (ambient) {\n                if (typespace) {\n                    table = (this.ambientEnclosedTypes == null) ? null :\n                                    insertAsPublic ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.ambientValueMembers == null) ? null :\n                                insertAsPublic ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.privateMembers;\n                }\n            }\n            else {\n                if (typespace) {\n                    table = (this.enclosedTypes == null) ? null :\n                                insertAsPublic ? this.enclosedTypes.publicMembers : this.enclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.valueMembers == null) ? null :\n                                insertAsPublic ? this.valueMembers.publicMembers : this.valueMembers.privateMembers;\n                }\n            }\n\n            if (table) {\n                if (!table.add(symbol.name, symbol)) {\n                    errorReporter.duplicateIdentifier(ast, symbol.name);\n                }\n            }\n            else {\n                CompilerDiagnostics.Alert("YYYYY");  // REVIEW: Surely we can do better than this...\n            }\n            symbol.container = container;\n        }\n\n        public getTable() { return this.valueMembers.allMembers; }\n    }\n\n    export class FilteredSymbolScope extends SymbolScope {\n        constructor (public scope: SymbolScope, container: Symbol, public filter: ScopeSearchFilter) {\n            super(container);\n        }\n        public print(outfile: ITextWriter) {\n            this.scope.print(outfile);\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool) {\n            this.filter.reset();\n            return this.scope.search(this.filter, name, publicOnly, typespace);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool) { return this.scope.findLocal(name, publicOnly, typespace); }\n    }\n\n    export class FilteredSymbolScopeBuilder extends SymbolScopeBuilder {\n        constructor (valueMembers: ScopedMembers, parent: SymbolScope, container: Symbol, public filter: (sym: Symbol) =>bool) {\n            super(valueMembers, null, null, null, parent, container);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return sym;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool):Symbol {\n            throw new Error("please implement");\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return super.find(name, publicOnly, typespace);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum TypeCheckStatus {\n        NotStarted,\n        Started,\n        Finished,\n    }\n\n    // For lexically-scoped constructs\n    export function aLexicallyEnclosesB(a: Symbol, b: Symbol) {\n        if (a.declAST && b && b.declAST && a.declAST.nodeType == NodeType.FuncDecl) {\n            return a.declAST.minChar <= b.declAST.minChar && a.declAST.limChar >= b.declAST.limChar;\n        }\n        else {\n            return false;\n        }\n    }\n\n    export function aEnclosesB(a: Symbol, b: Symbol) {\n        while (a.container) {\n            if (a == b || aLexicallyEnclosesB(a.container, b)) {\n                return true;\n            }\n            a = a.container;\n        }\n        return false;\n    }\n\n    export interface PhasedTypecheckObject {\n        typeCheckStatus: TypeCheckStatus;\n    }\n\n    export class Symbol {\n        public bound = false;\n        public container: Symbol;\n        public instanceScope(): SymbolScope { return null;';
var v27688 = v27689 + ' }\n        public isVariable() { return false; }\n        public isMember() { return false; }\n        public isInferenceSymbol() { return false; }\n        public isWith() { return false; }\n        public writeable() { return false; }\n        public isType(): bool { return false; }\n        public getType(): Type { return null; }\n        public flags: SymbolFlags = SymbolFlags.None;\n        public refs: Identifier[];\n        public isAccessor() { return false; }\n        public isObjectLitField = false;\n\n        public declAST: AST = null;\n        public declModule: ModuleDeclaration = null;  // if child of module, this is the module that declared it\n\n        public passSymbolCreated: number = CompilerDiagnostics.analysisPass;\n\n        constructor(public name: string, public location: number, public length: number,\n                 public unitIndex: number) { }\n\n        public isInstanceProperty() {\n            return hasFlag(this.flags, SymbolFlags.Property) && (!hasFlag(this.flags, SymbolFlags.ModuleMember));\n        }\n\n        public getTypeName(scope: SymbolScope): string {\n            return this.getTypeNameEx(scope).toString();\n        }\n        \n        public getTypeNameEx(scope: SymbolScope): MemberName {\n            return MemberName.create(this.toString());\n        }\n\n        public getOptionalNameString() {\n            return hasFlag(this.flags, SymbolFlags.Optional) ? "?" : "";\n        }\n\n        public pathToRoot() {\n            var path = new Symbol[];\n            var node = this;\n            while (node && (node.name != globalId)) {\n                path[path.length] = node;\n                node = node.container;\n            }\n            return path;\n        }\n\n        public findCommonAncestorPath(b: Symbol) {\n            if (this.container == null) {\n                return new Symbol[];\n            }\n            var aPath = this.container.pathToRoot();\n            var bPath: Symbol[];\n            if (b) {\n                bPath = b.pathToRoot();\n            }\n            else {\n                bPath = new Symbol[];\n            }\n            var commonNodeIndex = -1;\n            for (var i = 0, aLen = aPath.length; i < aLen; i++) {\n                var aNode = aPath[i];\n                for (var j = 0, bLen = bPath.length; j < bLen; j++) {\n                    var bNode = bPath[j];\n                    if (aNode == bNode) {\n                        commonNodeIndex = i;\n                        break;\n                    }\n                }\n                if (commonNodeIndex >= 0) {\n                    break;\n                }\n            }\n            if (commonNodeIndex >= 0) {\n                return aPath.slice(0, commonNodeIndex);\n            }\n            else {\n                return aPath;\n            }\n        }\n\n        // Gets the pretty Name for the symbol withing the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            return this.name;\n        }\n\n        public scopeRelativeName(scope: SymbolScope): string {\n            if (scope == null) {\n                return this.getPrettyName(null) + this.getOptionalNameString();\n            }\n            var lca = this.findCommonAncestorPath(scope.container);\n            var builder = "";\n            for (var i = 0, len = lca.length; i < len; i++) {\n                var prettyName = lca[i].getPrettyName(i == len - 1 ? scope.container : lca[i + 1]);\n                builder = prettyName + "." + builder;\n            }\n            builder += this.getPrettyName(len == 0 ? scope.container : lca[0]) + this.getOptionalNameString();\n            return builder;\n        }\n\n        public fullName(): string {\n            var builder = this.name;\n            var ancestor = this.container;\n            while (ancestor && (ancestor.name != globalId)) {\n                builder = ancestor.name + "." + builder;\n                ancestor = ancestor.container;\n            }\n            return builder;\n        }\n\n        public isExternallyVisible(checker: TypeChecker) {\n            // Global module is not hidden\n            if (this == checker.gloMod) {\n                return true;\n            }\n\n            // private symbol\n            if (hasFlag(this.flags, SymbolFlags.Private)) {\n                return false;\n            }\n\n            // If the current container is not exported\n            // If its in global - it is visible, otherwise it isn\'t\n            if (!hasFlag(this.flags, SymbolFlags.Exported)) {\n                return this.container == checker.gloMod;\n            }\n\n            // It is visible if its container is visible too\n            return this.container.isExternallyVisible(checker);\n        }\n\n        public visible(scope: SymbolScope, checker: TypeChecker) {\n            if (checker == null || this.container == checker.gloMod) {\n                return true;\n            }\n\n            if (hasFlag(this.flags, SymbolFlags.ModuleMember)) {\n\n                if (hasFlag(this.flags, SymbolFlags.Exported)) {\n                    if (!hasFlag';
var v27687 = v27688 + '(this.flags, SymbolFlags.Private)) {\n                        return true;\n                    }\n                    else {\n                        return aEnclosesB(this, scope.container);\n                    }\n                }\n                else {\n                    // REVIEW:\n                    // Note that in the scope-assignment and binding phases,\n                    // currentModDecl will point to the "master" module decl,\n                    // and not necessarily the one that the symbol in question\n                    // was declared in.\n                    // That\'s ok - there\'s no harm done in attributing the symbol\n                    // to the master mod decl in either of those phases, so long\n                    // as we reference the actual module fragment of declaration\n                    // during typecheck.  Doing this also prevents us from printing\n                    // multiple error messages if the symbol is not visible.\n                    return checker && (checker.currentModDecl == this.declModule) ||\n                                                (checker.currentModDecl &&\n                                                    checker.currentModDecl.mod &&\n                                                    checker.currentModDecl.mod.symbol &&\n                                                    this.declModule &&\n                                                    this.declModule.mod &&\n                                                    this.declModule.mod.symbol &&\n                                                    aEnclosesB(checker.currentModDecl.mod.symbol, this.declModule.mod.symbol));\n                }\n            }\n            else {\n                // field or method\n                var isFunction = this.declAST && this.declAST.nodeType == NodeType.FuncDecl;\n                var isMethod = isFunction && (<FuncDecl>this.declAST).isMethod();\n                var isStaticFunction = isFunction && hasFlag((<FuncDecl>this.declAST).fncFlags, FncFlags.Static)\n                var isPrivateMethod = isMethod && hasFlag((<FuncDecl>this.declAST).fncFlags, FncFlags.Private);\n                var isAlias = this.isType() && (<TypeSymbol>this).aliasLink;\n\n                if (this.isMember() || isMethod || isStaticFunction || isAlias) {\n                    if (hasFlag(this.flags, SymbolFlags.Private) || isPrivateMethod) {\n                        if (scope.container == null && this.container != scope.container) {\n                            return false; // it\'s an inner member being accessed by the global scope\n                        }\n                        else {\n                            return this.container == null ? true : aEnclosesB(scope.container, this.container);\n                        }\n                    }\n                    else {\n                        return true;\n                    }\n                }\n                else if (this.container) {\n                    return aEnclosesB(this, scope.container);\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n\n        public addRef(identifier: Identifier) {\n            if (!this.refs) {\n                this.refs = [];\n            }\n            this.refs[this.refs.length] = identifier;\n        }\n\n        public toString() {\n            if (this.name) {\n                return this.name;\n            }\n            else {\n                return "_anonymous";\n            }\n        }\n\n        public print(outfile) {\n            outfile.Write(this.toString());\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            throw new Error("please implement in derived class");\n        }\n\n        public setType(type: Type) {\n            throw new Error("please implement in derived class");\n        }\n\n        public kind(): SymbolKind {\n            throw new Error("please implement in derived class");\n        }\n\n        public getInterfaceDeclFromSymbol(checker: TypeChecker) {\n            if (this.declAST != null) {\n                if (this.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.declAST;\n                } else if (this.container != null && this.container != checker.gloMod && this.container.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.container.declAST;\n                }\n            }\n\n            return null;\n        }\n\n        public getVarDeclFromSymbol() {\n            if (this.declAST != null && this.declAST.nodeType == NodeType.VarDecl) {\n                return <VarDecl>this.declAST;\n            }\n\n            return null;\n        }\n\n        public getDocComments() : Comment[] {\n            if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n        public isStatic() {\n            return hasFlag(this.fla';
var v27686 = v27687 + 'gs, SymbolFlags.Static);\n        }\n    }\n\n    export class ValueLocation {\n        public symbol: Symbol;\n        public typeLink: TypeLink;\n    }\n\n    export class InferenceSymbol extends Symbol {\n        constructor (name: string, location: number, length: number, unitIndex: number) {\n            super(name, location, length, unitIndex);\n        }\n\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public isInferenceSymbol() { return true; }\n        public transferVarFlags(varFlags: VarFlags) {\n            if (hasFlag(varFlags, VarFlags.Ambient)) {\n                this.flags |= SymbolFlags.Ambient;\n            }\n            if (hasFlag(varFlags, VarFlags.Constant)) {\n                this.flags |= SymbolFlags.Constant;\n            }\n            if (hasFlag(varFlags, VarFlags.Static)) {\n                this.flags |= SymbolFlags.Static;\n            }\n            if (hasFlag(varFlags, VarFlags.Property)) {\n                this.flags |= SymbolFlags.Property;\n            }\n            if (hasFlag(varFlags, VarFlags.Private)) {\n                this.flags |= SymbolFlags.Private;\n            }\n            if (hasFlag(varFlags, VarFlags.Public)) {\n                this.flags |= SymbolFlags.Public;\n            }\n            if (hasFlag(varFlags, VarFlags.Readonly)) {\n                this.flags |= SymbolFlags.Readonly;\n            }\n            if (hasFlag(varFlags, VarFlags.Exported)) {\n                this.flags |= SymbolFlags.Exported;\n            }\n        }\n    }\n\n    export class TypeSymbol extends InferenceSymbol {\n        public additionalLocations: number[];\n        public expansions: Type[] = []; // For types that may be "split", keep track of the subsequent definitions\n        public expansionsDeclAST: AST[] = [];\n        public isDynamic = false;\n\n        constructor (locName: string, location: number, length: number, unitIndex: number, public type: Type) {\n            super(locName, location, length, unitIndex);\n            this.prettyName = this.name;\n        }\n\n        public addLocation(loc: number) {\n            if (this.additionalLocations == null) {\n                this.additionalLocations = [];\n            }\n            this.additionalLocations[this.additionalLocations.length] = loc;\n        }\n        public isMethod = false;\n        public aliasLink:ImportDeclaration = null;\n        public kind() { return SymbolKind.Type; }\n        public isType(): bool { return true; }\n        public getType() { return this.type; }\n        public prettyName: string;\n        public onlyReferencedAsTypeRef = optimizeModuleCodeGen;\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return this.type.getMemberTypeNameEx(this.name ? this.name + this.getOptionalNameString() : "", false, false, scope);\n        }\n\n        public instanceScope(): SymbolScope {\n            // Don\'t use the constructor scope for a class body or methods - use the contained scope\n            if (!(this.type.typeFlags & TypeFlags.IsClass) && this.type.isClass()) {\n                return this.type.instanceType.constructorScope;\n            }\n            else {\n                return this.type.containedScope;\n            }\n        }\n        // corresponding instance type if this is a class\n        public instanceType: Type;\n\n        public toString() {\n            var result = this.type.getTypeName();\n            if (this.name) {\n                result = this.name + ":" + result;\n            }\n            return result;\n        }\n\n        public isClass() { return this.instanceType != null; }\n        public isFunction() { return this.declAST != null && this.declAST.nodeType == NodeType.FuncDecl; }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            if (this.type == pattern) {\n                return replacement.symbol;\n            }\n            else {\n                var replType = this.type.specializeType(pattern, replacement, checker, false);\n                if (replType != this.type) {\n                    var result = new TypeSymbol(this.name, -1, 0, -1, replType);\n                    return result;\n                }\n                else {\n                    return this;\n                }\n            }\n        }\n\n        // Gets the pretty name of the symbol with respect to symbol of the scope (scopeSymbol)\n        // searchTillRoot specifies if the name need to searched in the root path of the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            if (!!scopeSymbol && isQuoted(this.prettyName) && this.type.isModuleType()) {\n                // Its a dynamic module - and need to be specialized with the scope\n                // Check in exported module members in each scope\n                var symbolPath = scopeSymbol.pathToRoot();\n                var prettyName = this.getPrettyNameOfDynamicModule(symbolPath);\n                if (prettyName != null) {\n                    return prettyName.name;\n                }\n            }\n\n            retur';
var v27685 = v27686 + 'n this.prettyName;\n        }\n\n        public getPrettyNameOfDynamicModule(scopeSymbolPath: Symbol[]) {\n            var scopeSymbolPathLength = scopeSymbolPath.length;\n            var externalSymbol: { name: string; symbol: Symbol; } = null;\n            if (scopeSymbolPath.length > 0 &&\n                scopeSymbolPath[scopeSymbolPathLength - 1].getType().isModuleType() &&\n                (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 1]).isDynamic) {\n\n                // Check if submodule is dynamic\n                if (scopeSymbolPathLength > 1 &&\n                    scopeSymbolPath[scopeSymbolPathLength - 2].getType().isModuleType() &&\n                    (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 2]).isDynamic) {\n                    var moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 2].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n\n                }\n\n                if (externalSymbol == null) {\n                    // Check in this module\n                    var moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 1].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n                }\n            }\n\n            return externalSymbol;\n        }\n\n        public getDocComments(): Comment[]{\n            var comments : Comment[] = [];\n            if (this.declAST != null) {\n                comments = comments.concat(this.declAST.getDocComments());\n            }\n\n            for (var i = 0; i < this.expansionsDeclAST.length; i++) {\n                comments = comments.concat(this.expansionsDeclAST[i].getDocComments());\n            }\n\n            return comments;\n        }\n    }\n\n    export class WithSymbol extends TypeSymbol {\n        constructor (location: number, unitIndex: number, withType: Type) {\n            super("with", location, 4, unitIndex, withType);\n        }\n        public isWith() { return true; }\n    }\n\n    export class FieldSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n\n        constructor (name: string, location: number, unitIndex: number, public canWrite: bool,\n                      public field: ValueLocation) {\n\n            super(name, location, name.length, unitIndex);\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Field; }\n        public writeable() { return this.isAccessor() ? this.setter != null : this.canWrite; }\n        public getType() { return this.field.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.field.typeLink.type.getScopedTypeNameEx(scope), this.name + this.getOptionalNameString() + ": ", "");\n        }\n\n        public isMember() { return true; }\n        public setType(type: Type) {\n            this.field.typeLink.type = type;\n        }\n\n        public getter: TypeSymbol = null;\n        public setter: TypeSymbol = null;\n        public hasBeenEmitted = false; // since getters and setters are emitted together, need to track if one has been emitted\n\n        public isAccessor() { return this.getter != null || this.setter != null; }\n\n        public isVariable() { return true; }\n        public toString() { return this.getTypeNameEx(null).toString(); }\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.field.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (rType != this.field.typeLink.type) {\n                var fieldDef = new ValueLocation();\n                var result = new FieldSymbol(this.name, 0, checker.locationInfo.unitIndex,\n                                           this.canWrite, fieldDef);\n                result.flags = this.flags;\n                fieldDef.symbol = result;\n                fieldDef.typeLink = new TypeLink();\n                result.setType(rType);\n                result.typeCheckStatus = TypeCheckStatus.Finished;\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getDocComments(): Comment[] {\n            if (this.getter != null || this.setter != null) {\n                var comments : Comment[] = [];\n                if (this.getter != null) {\n                    comments = comments.concat(this.getter.getDocComments());\n                }\n                if (this.setter != null) {\n                    comments = comments.concat(this.setter.getDocComments());\n                }\n                return comments;\n            }\n            else if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n    }\n\n    export class ParameterSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n        private paramDocComment: string = null;\n        public funcDecl';
var v27684 = v27685 + ': AST = null;\n        \n        constructor (name: string, location: number, unitIndex: number,\n                          public parameter: ValueLocation) {\n            super(name, location, name.length, unitIndex);\n\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Parameter; }\n        public writeable() { return true; }\n        public getType() { return this.parameter.typeLink.type; }\n        public setType(type: Type) {\n            this.parameter.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n        public argsOffset = (-1);\n        public isOptional() {\n            if (this.parameter && this.parameter.symbol && this.parameter.symbol.declAST) {\n                return (<ArgDecl>this.parameter.symbol.declAST).isOptional;\n            }\n            else {\n                return false;\n            }\n        }\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + (this.isOptional() ? "?" : "") + ": ", "");\n        }\n\n        public toString() { return this.getTypeNameEx(null).toString(); }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.parameter.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (this.parameter.typeLink.type != rType) {\n                var paramDef = new ValueLocation();\n                var result = new ParameterSymbol(this.name, 0, checker.locationInfo.unitIndex,\n                                               paramDef);\n                paramDef.symbol = result;\n                result.setType(rType);\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getParameterDocComments() {\n            if (!this.paramDocComment) {\n                var parameterComments: string[] = [];\n                if (this.funcDecl) {\n                    var fncDocComments = this.funcDecl.getDocComments();\n                    var paramComment = Comment.getParameterDocCommentText(this.name, fncDocComments);\n                    if (paramComment != "") {\n                        parameterComments.push(paramComment);\n                    }\n                }\n                var docComments = TypeScript.Comment.getDocCommentText(this.getDocComments());\n                if (docComments != "") {\n                    parameterComments.push(docComments);\n                }\n                \n                this.paramDocComment = parameterComments.join("\\n");\n            }\n\n            return this.paramDocComment;\n        }\n    }\n\n    export class VariableSymbol extends InferenceSymbol {\n\n        constructor (name: string, location: number, unitIndex: number, public variable: ValueLocation) {\n            super(name, location, name.length, unitIndex);\n        }\n        public kind() { return SymbolKind.Variable; }\n        public writeable() { return true; }\n        public getType() { return this.variable.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + ": ", "");\n        }\n\n        public setType(type: Type) {\n            this.variable.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export enum TokenID {\n        // Keywords\n        Any,\n        Bool,\n        Break,\n        Case,\n        Catch,\n        Class,\n        Const,\n        Continue,\n        Debugger,\n        Default,\n        Delete,\n        Do,\n        Else,\n        Enum,\n        Export,\n        Extends,\n        Declare,\n        False,\n        Finally,\n        For,\n        Function,\n        Constructor,\n        Get,\n        If,\n        Implements,\n        Import,\n        In,\n        InstanceOf,\n        Interface,\n        Let,\n        Module,\n        New,\n        Number,\n        Null,\n        Package,\n        Private,\n        Protected,\n        Public,\n        Return,\n        Set,\n        Static,\n        String,\n        Super,\n        Switch,\n        This,\n        Throw,\n        True,\n        Try,\n        TypeOf,\n        Var,\n        Void,\n        With,\n        While,\n        Yield,\n      ';
var v27683 = v27684 + '  // Punctuation\n        Semicolon,\n        OpenParen,\n        CloseParen,\n        OpenBracket,\n        CloseBracket,\n        OpenBrace,\n        CloseBrace,\n        Comma,\n        Equals,\n        PlusEquals,\n        MinusEquals,\n        AsteriskEquals,\n        SlashEquals,\n        PercentEquals,\n        AmpersandEquals,\n        CaretEquals,\n        BarEquals,\n        LessThanLessThanEquals,\n        GreaterThanGreaterThanEquals,\n        GreaterThanGreaterThanGreaterThanEquals,\n        Question,\n        Colon,\n        BarBar,\n        AmpersandAmpersand,\n        Bar,\n        Caret,\n        And,\n        EqualsEquals,\n        ExclamationEquals,\n        EqualsEqualsEquals,\n        ExclamationEqualsEquals,\n        LessThan,\n        LessThanEquals,\n        GreaterThan,\n        GreaterThanEquals,\n        LessThanLessThan,\n        GreaterThanGreaterThan,\n        GreaterThanGreaterThanGreaterThan,\n        Plus,\n        Minus,\n        Asterisk,\n        Slash,\n        Percent,\n        Tilde,\n        Exclamation,\n        PlusPlus,\n        MinusMinus,\n        Dot,\n        DotDotDot,\n        Error,\n        EndOfFile,\n        EqualsGreaterThan,\n        Identifier,\n        StringLiteral,\n        RegularExpressionLiteral,\n        NumberLiteral,\n        Whitespace,\n        Comment,\n        Lim,\n        LimFixed = EqualsGreaterThan,\n        LimKeyword = Yield,\n    }\n\n    export var tokenTable = new TokenInfo[];\n    export var nodeTypeTable = new string[];\n    export var nodeTypeToTokTable = new number[];\n    export var noRegexTable = new bool[];\n\n    noRegexTable[TokenID.Identifier] = true;\n    noRegexTable[TokenID.StringLiteral] = true;\n    noRegexTable[TokenID.NumberLiteral] = true;\n    noRegexTable[TokenID.RegularExpressionLiteral] = true;\n    noRegexTable[TokenID.This] = true;\n    noRegexTable[TokenID.PlusPlus] = true;\n    noRegexTable[TokenID.MinusMinus] = true;\n    noRegexTable[TokenID.CloseParen] = true;\n    noRegexTable[TokenID.CloseBracket] = true;\n    noRegexTable[TokenID.CloseBrace] = true;\n    noRegexTable[TokenID.True] = true;\n    noRegexTable[TokenID.False] = true;\n\n    export enum OperatorPrecedence {\n        None,\n        Comma,\n        Assignment,\n        Conditional,\n        LogicalOr,\n        LogicalAnd,\n        BitwiseOr,\n        BitwiseExclusiveOr,\n        BitwiseAnd,\n        Equality,\n        Relational,\n        Shift,\n        Additive,\n        Multiplicative,\n        Unary,\n        Lim\n    }\n\n    export enum Reservation {\n        None = 0,\n        Javascript = 1,\n        JavascriptFuture = 2,\n        TypeScript = 4,\n        JavascriptFutureStrict = 8,\n        TypeScriptAndJS = Javascript | TypeScript,\n        TypeScriptAndJSFuture = JavascriptFuture | TypeScript,\n        TypeScriptAndJSFutureStrict = JavascriptFutureStrict | TypeScript,\n    }\n\n    export class TokenInfo {\n        constructor (public tokenId: TokenID, public reservation: Reservation,\n                    public binopPrecedence: number, public binopNodeType: number,\n                    public unopPrecedence: number, public unopNodeType: number,\n                    public text: string, public ers: ErrorRecoverySet) { }\n    }\n\n    function setTokenInfo(tokenId: TokenID, reservation: number, binopPrecedence: number,\n        binopNodeType: number, unopPrecedence: number, unopNodeType: number,\n        text: string, ers: ErrorRecoverySet) {\n        if (tokenId !== undefined) {\n            tokenTable[tokenId] = new TokenInfo(tokenId, reservation, binopPrecedence,\n                                              binopNodeType, unopPrecedence, unopNodeType, text, ers);\n            if (binopNodeType != NodeType.None) {\n                nodeTypeTable[binopNodeType] = text;\n                nodeTypeToTokTable[binopNodeType] = tokenId;\n            }\n            if (unopNodeType != NodeType.None) {\n                nodeTypeTable[unopNodeType] = text;\n            }\n        }\n    }\n\n    setTokenInfo(TokenID.Any, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "any", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Bool, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "bool", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Break, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "break", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Case, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "case", ErrorRecoverySet.SCase);\n    setTokenInfo(TokenID.Catch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "catch", ErrorRecoverySet.Catch);\n    setTokenInfo(TokenID.Class, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "class", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Const, Reservation.TypeScri';
var v27682 = v27683 + 'ptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "const", ErrorRecoverySet.Var);\n    setTokenInfo(TokenID.Continue, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "continue", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Debugger, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.Debugger, "debugger", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Default, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "default", ErrorRecoverySet.SCase);\n    setTokenInfo(TokenID.Delete, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Delete, "delete", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.Do, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "do", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Else, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "else", ErrorRecoverySet.Else);\n    setTokenInfo(TokenID.Enum, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "enum", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Export, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "export", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Extends, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "extends", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Declare, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "declare", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.False, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "false", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Finally, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "finally", ErrorRecoverySet.Catch);\n    setTokenInfo(TokenID.For, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "for", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Function, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "function", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Constructor, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "constructor", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Get, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "get", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.Set, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "set", ErrorRecoverySet.Func);\n    setTokenInfo(TokenID.If, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "if", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Implements, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "implements", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Import, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "import", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.In, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.In, OperatorPrecedence.None, NodeType.None, "in", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.InstanceOf, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.InstOf, OperatorPrecedence.None, NodeType.None, "instanceof", ErrorRecoverySet.BinOp);\n    setTokenInfo(TokenID.Interface, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "interface", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Let, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "let", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Module, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "module", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.New, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "new", ErrorRecoverySet.PreOp);\n    setTokenInfo(TokenID.Number, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "number", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Nu';
var v27681 = v27682 + 'll, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "null", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Package, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "package", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Private, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "private", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Protected, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "protected", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.Public, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "public", ErrorRecoverySet.TypeScriptS);\n    setTokenInfo(TokenID.Return, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "return", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.Static, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "static", ErrorRecoverySet.None);\n    setTokenInfo(TokenID.String, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "string", ErrorRecoverySet.PrimType);\n    setTokenInfo(TokenID.Super, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "super", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Switch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "switch", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.This, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "this", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Throw, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "throw", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.True, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "true", ErrorRecoverySet.RLit);\n    setTokenInfo(TokenID.Try, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "try", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.TypeOf, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Typeof, "typeof", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.Var, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "var", ErrorRecoverySet.Var);\n    setTokenInfo(TokenID.Void, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Void, "void", ErrorRecoverySet.Prefix);\n    setTokenInfo(TokenID.With, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.With, "with", ErrorRecoverySet.Stmt);\n    setTokenInfo(TokenID.While, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "while", ErrorRecoverySet.While);\n    setTokenInfo(TokenID.Yield, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "yield", ErrorRecoverySet.None);\n\n    setTokenInfo(TokenID.Identifier, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "identifier", ErrorRecoverySet.ID);\n    setTokenInfo(TokenID.NumberLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "numberLiteral", ErrorRecoverySet.Literal);\n    setTokenInfo(TokenID.RegularExpressionLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "regex", ErrorRecoverySet.RegExp);\n    setTokenInfo(TokenID.StringLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "qstring", ErrorRecoverySet.Literal);\n\n    // Non-operator non-identifier tokens\n    setTokenInfo(TokenID.Semicolon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ";", ErrorRecoverySet.SColon); // ;\n    setTokenInfo(TokenID.CloseParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ")", ErrorRecoverySet.RParen); // )\n    setTokenInfo(TokenID.CloseBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "]", ErrorRecoverySet.RBrack); // ]\n    setTokenInfo(TokenID.OpenBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "{", ErrorRecoverySet.LCurly); // {\n    setToken';
var v27680 = v27681 + 'Info(TokenID.CloseBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "}", ErrorRecoverySet.RCurly); // }\n    setTokenInfo(TokenID.DotDotDot, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "...", ErrorRecoverySet.None); // ...\n\n    // Operator non-identifier tokens\n    setTokenInfo(TokenID.Comma, Reservation.None, OperatorPrecedence.Comma, NodeType.Comma, OperatorPrecedence.None, NodeType.None, ",", ErrorRecoverySet.Comma); // ,\n    setTokenInfo(TokenID.Equals, Reservation.None, OperatorPrecedence.Assignment, NodeType.Asg, OperatorPrecedence.None, NodeType.None, "=", ErrorRecoverySet.Asg); // =\n    setTokenInfo(TokenID.PlusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAdd, OperatorPrecedence.None, NodeType.None, "+=", ErrorRecoverySet.BinOp); // +=\n    setTokenInfo(TokenID.MinusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgSub, OperatorPrecedence.None, NodeType.None, "-=", ErrorRecoverySet.BinOp); // -=\n    setTokenInfo(TokenID.AsteriskEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMul, OperatorPrecedence.None, NodeType.None, "*=", ErrorRecoverySet.BinOp); // *=\n\n    setTokenInfo(TokenID.SlashEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgDiv, OperatorPrecedence.None, NodeType.None, "/=", ErrorRecoverySet.BinOp); // /=\n    setTokenInfo(TokenID.PercentEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMod, OperatorPrecedence.None, NodeType.None, "%=", ErrorRecoverySet.BinOp); // %=\n    setTokenInfo(TokenID.AmpersandEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAnd, OperatorPrecedence.None, NodeType.None, "&=", ErrorRecoverySet.BinOp); // &=\n    setTokenInfo(TokenID.CaretEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgXor, OperatorPrecedence.None, NodeType.None, "^=", ErrorRecoverySet.BinOp); // ^=\n    setTokenInfo(TokenID.BarEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgOr, OperatorPrecedence.None, NodeType.None, "|=", ErrorRecoverySet.BinOp); // |=\n    setTokenInfo(TokenID.LessThanLessThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgLsh, OperatorPrecedence.None, NodeType.None, "<<=", ErrorRecoverySet.BinOp); // <<=\n    setTokenInfo(TokenID.GreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRsh, OperatorPrecedence.None, NodeType.None, ">>=", ErrorRecoverySet.BinOp); // >>=\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRs2, OperatorPrecedence.None, NodeType.None, ">>>=", ErrorRecoverySet.BinOp); // >>>=\n    setTokenInfo(TokenID.Question, Reservation.None, OperatorPrecedence.Conditional, NodeType.ConditionalExpression, OperatorPrecedence.None, NodeType.None, "?", ErrorRecoverySet.BinOp); // ?\n    setTokenInfo(TokenID.Colon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ":", ErrorRecoverySet.Colon); // :\n    setTokenInfo(TokenID.BarBar, Reservation.None, OperatorPrecedence.LogicalOr, NodeType.LogOr, OperatorPrecedence.None, NodeType.None, "||", ErrorRecoverySet.BinOp); // ||\n    setTokenInfo(TokenID.AmpersandAmpersand, Reservation.None, OperatorPrecedence.LogicalAnd, NodeType.LogAnd, OperatorPrecedence.None, NodeType.None, "&&", ErrorRecoverySet.BinOp); // &&\n    setTokenInfo(TokenID.Bar, Reservation.None, OperatorPrecedence.BitwiseOr, NodeType.Or, OperatorPrecedence.None, NodeType.None, "|", ErrorRecoverySet.BinOp); // |\n    setTokenInfo(TokenID.Caret, Reservation.None, OperatorPrecedence.BitwiseExclusiveOr, NodeType.Xor, OperatorPrecedence.None, NodeType.None, "^", ErrorRecoverySet.BinOp); // ^\n    setTokenInfo(TokenID.And, Reservation.None, OperatorPrecedence.BitwiseAnd, NodeType.And, OperatorPrecedence.None, NodeType.None, "&", ErrorRecoverySet.BinOp); // &\n    setTokenInfo(TokenID.EqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eq, OperatorPrecedence.None, NodeType.None, "==", ErrorRecoverySet.BinOp); // ==\n    setTokenInfo(TokenID.ExclamationEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Ne, OperatorPrecedence.None, NodeType.None, "!=", ErrorRecoverySet.BinOp); // !=\n    setTokenInfo(TokenID.EqualsEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eqv, OperatorPrecedence.None, NodeType.None, "===", ErrorRecoverySet.BinOp); // ===\n    setTokenInfo(TokenID.ExclamationEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.NEqv, OperatorPrecedence.None, NodeType.None, "!==", ErrorRecoverySet.BinOp); // !==\n    setTokenInfo(TokenID.LessThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Lt, OperatorPrecedence.None, NodeType.None, "<", ErrorRecoverySet.BinOp); // <\n    setTokenInfo(TokenID.LessThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeTyp';
var v27679 = v27680 + 'e.Le, OperatorPrecedence.None, NodeType.None, "<=", ErrorRecoverySet.BinOp); // <=\n    setTokenInfo(TokenID.GreaterThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Gt, OperatorPrecedence.None, NodeType.None, ">", ErrorRecoverySet.BinOp); // >\n    setTokenInfo(TokenID.GreaterThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeType.Ge, OperatorPrecedence.None, NodeType.None, ">=", ErrorRecoverySet.BinOp); // >=\n    setTokenInfo(TokenID.LessThanLessThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Lsh, OperatorPrecedence.None, NodeType.None, "<<", ErrorRecoverySet.BinOp); // <<\n    setTokenInfo(TokenID.GreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rsh, OperatorPrecedence.None, NodeType.None, ">>", ErrorRecoverySet.BinOp); // >>\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rs2, OperatorPrecedence.None, NodeType.None, ">>>", ErrorRecoverySet.BinOp); // >>>\n    setTokenInfo(TokenID.Plus, Reservation.None, OperatorPrecedence.Additive, NodeType.Add, OperatorPrecedence.Unary, NodeType.Pos, "+", ErrorRecoverySet.AddOp); // +\n    setTokenInfo(TokenID.Minus, Reservation.None, OperatorPrecedence.Additive, NodeType.Sub, OperatorPrecedence.Unary, NodeType.Neg, "-", ErrorRecoverySet.AddOp); // -\n    setTokenInfo(TokenID.Asterisk, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mul, OperatorPrecedence.None, NodeType.None, "*", ErrorRecoverySet.BinOp); // *\n    setTokenInfo(TokenID.Slash, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Div, OperatorPrecedence.None, NodeType.None, "/", ErrorRecoverySet.BinOp); // /\n    setTokenInfo(TokenID.Percent, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mod, OperatorPrecedence.None, NodeType.None, "%", ErrorRecoverySet.BinOp); // %\n    setTokenInfo(TokenID.Tilde, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Not, "~", ErrorRecoverySet.PreOp); // ~\n    setTokenInfo(TokenID.Exclamation, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.LogNot, "!", ErrorRecoverySet.PreOp); // !\n    setTokenInfo(TokenID.PlusPlus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.IncPre, "++", ErrorRecoverySet.PreOp); // ++\n    setTokenInfo(TokenID.MinusMinus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.DecPre, "--", ErrorRecoverySet.PreOp); // --\n    setTokenInfo(TokenID.OpenParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "(", ErrorRecoverySet.LParen); // (\n    setTokenInfo(TokenID.OpenBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "[", ErrorRecoverySet.LBrack); // [\n    setTokenInfo(TokenID.Dot, Reservation.None, OperatorPrecedence.Unary, NodeType.None, OperatorPrecedence.None, NodeType.None, ".", ErrorRecoverySet.Dot); // .\n    setTokenInfo(TokenID.EndOfFile, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "<EOF>", ErrorRecoverySet.EOF); // EOF\n    setTokenInfo(TokenID.EqualsGreaterThan, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "=>", ErrorRecoverySet.None); // =>\n\n    export function lookupToken(tokenId: TokenID): TokenInfo {\n        return tokenTable[tokenId];\n    }\n\n    export enum TokenClass {\n        Punctuation,\n        Keyword,\n        Operator,\n        Comment,\n        Whitespace,\n        Identifier,\n        NumberLiteral,\n        StringLiteral,\n        RegExpLiteral,\n    }\n\n    export class SavedToken {\n        constructor (public tok: Token, public minChar: number, public limChar: number) { }\n    }\n\n    export class Token {\n        constructor (public tokenId: TokenID) {\n        }\n\n        public toString() {\n            return "token: " + this.tokenId + " " + this.getText() + " (" + (<any>TokenID)._map[this.tokenId] + ")";\n        }\n\n        public print(line: number, outfile) {\n            outfile.WriteLine(this.toString() + ",on line" + line);\n        }\n\n        public getText(): string {\n            return tokenTable[this.tokenId].text;\n        }\n\n        public classification(): TokenClass {\n            if (this.tokenId <= TokenID.LimKeyword) {\n                return TokenClass.Keyword;\n            }\n            else {\n                var tokenInfo = lookupToken(this.tokenId);\n                if (tokenInfo != undefined) {\n                    if ((tokenInfo.unopNodeType != NodeType.None) ||\n                        (tokenInfo.binopNodeType != NodeType.None)) {\n                        return TokenClass.Operator;\n                    }\n                }\n            }\n\n            return TokenClass.Punctuation;\n        }\n    }\n\n    export class NumberLiteralToken extends Token {\n        constructor (public value: number,';
var v27678 = v27679 + ' public hasEmptyFraction?: bool) {\n            super(TokenID.NumberLiteral);\n        }\n\n        public getText(): string {\n            return this.hasEmptyFraction ? this.value.toString() + ".0" : this.value.toString();\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.NumberLiteral;\n        }\n    }\n\n    export class StringLiteralToken extends Token {\n        constructor (public value: string) {\n            super(TokenID.StringLiteral);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.StringLiteral;\n        }\n    }\n\n    export class IdentifierToken extends Token {\n        constructor (public value: string, public hasEscapeSequence : bool) {\n            super(TokenID.Identifier);\n        }\n        public getText(): string {\n            return this.value;\n        }\n        public classification(): TokenClass {\n            return TokenClass.Identifier;\n        }\n    }\n\n    export class WhitespaceToken extends Token {\n        constructor (tokenId: TokenID, public value: string) {\n            super(tokenId);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Whitespace;\n        }\n    }\n\n    export class CommentToken extends Token {\n        constructor (tokenID: TokenID, public value: string, public isBlock: bool, public startPos: number, public line: number, public endsLine: bool) {\n            super(tokenID);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Comment;\n        }\n    }\n\n    export class RegularExpressionLiteralToken extends Token {\n        constructor(public regex) {\n            super(TokenID.RegularExpressionLiteral);\n        }\n\n        public getText(): string {\n            return this.regex.toString();\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.RegExpLiteral;\n        }\n    }\n\n    // TODO: new with length TokenID.LimFixed\n    export var staticTokens = new Token[];\n    export function initializeStaticTokens() {\n        for (var i = 0; i <= TokenID.LimFixed; i++) {\n            staticTokens[i] = new Token(i);\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\'/>\n///<reference path=\'io.ts\'/>\n///<reference path=\'optionsParser.ts\'/>\n\nclass CommandLineHost implements TypeScript.IResolverHost {\n\n    public pathMap: any = {};\n    public resolvedPaths: any = {};\n\n    constructor(public compilationSettings: TypeScript.CompilationSettings) { \n    }\n\n    public getPathIdentifier(path: string) { \n        return this.compilationSettings.useCaseSensitiveFileResolution ? path : path.toLocaleUpperCase();\n    }\n\n    public isResolved(path: string) {\n        return this.resolvedPaths[this.getPathIdentifier(this.pathMap[path])] != undefined;\n    }\n\n    public resolveCompilationEnvironment(preEnv: TypeScript.CompilationEnvironment,\n        resolver: TypeScript.ICodeResolver,\n        traceDependencies: bool): TypeScript.CompilationEnvironment {\n        var resolvedEnv = new TypeScript.CompilationEnvironment(preEnv.compilationSettings, preEnv.ioHost);\n\n        var nCode = preEnv.code.length;\n        var path = "";\n\n        var postResolutionError = \n            (errorFile: string, errorMessage: string) => {\n                TypeScript.CompilerDiagnostics.debugPrint("Could not resolve file \'" + errorFile + "\'" + (errorMessage == "" ? "" : ": " + errorMessage));\n            }\n\n        var resolutionDispatcher: TypeScript.IResolutionDispatcher = {\n            postResolutionError: postResolutionError,\n            postResolution: (path: string, code: TypeScript.ISourceText) => {\n                var pathId = this.getPathIdentifier(path);\n                if (!this.resolvedPaths[pathId]) {\n                    resolvedEnv.code.push(<TypeScript.SourceUnit>code);\n                    this.resolvedPaths[pathId] = true;\n                }\n            }\n        };\n\n        for (var i = 0; i < nCode; i++) {\n            path = TypeScript.switchToForwardSlashes(preEnv.ioHost.resolvePath(preEnv.code[i].path));\n            this.pathMap[preEnv.code[i].path] = path;\n            resolver.resolveCode(path, "", false, r';
var v27677 = v27678 + 'esolutionDispatcher);\n        }\n\n        return resolvedEnv;\n    }\n}\nclass BatchCompiler {\n    public compilationSettings: TypeScript.CompilationSettings;\n    public compilationEnvironment: TypeScript.CompilationEnvironment;\n    public resolvedEnvironment: TypeScript.CompilationEnvironment = null;\n    public hasResolveErrors: bool = false;\n    public compilerVersion = "0.8.2.0";\n    public printedVersion = false;\n\n    constructor (public ioHost: IIO) { \n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n    }\n\n    public resolve() {\n        var resolver = new TypeScript.CodeResolver(this.compilationEnvironment);\n        var commandLineHost = new CommandLineHost(this.compilationSettings);\n        var ret = commandLineHost.resolveCompilationEnvironment(this.compilationEnvironment, resolver, true);\n\n        // Reset resolve error status\n        this.hasResolveErrors = false;\n\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            if (!commandLineHost.isResolved(this.compilationEnvironment.code[i].path)) {\n                this.hasResolveErrors = true;\n                var path = this.compilationEnvironment.code[i].path;\n                if (!TypeScript.isSTRFile(path) && !TypeScript.isDSTRFile(path) && !TypeScript.isTSFile(path) && !TypeScript.isDTSFile(path)) {\n                    this.ioHost.stderr.WriteLine("Unknown extension for file: \\""+path+"\\". Only .ts and .d.ts extensions are allowed.");\n                }\n                else {\n                    this.ioHost.stderr.WriteLine("Error reading file \\"" + path + "\\": File not found");\n                }\n            }\n        }\n\n        return ret;\n    }\n    \n    /// Do the actual compilation reading from input files and\n    /// writing to output file(s).\n    public compile(): bool {\n        var compiler: TypeScript.TypeScriptCompiler;\n\n        compiler = new TypeScript.TypeScriptCompiler(this.ioHost.stderr, new TypeScript.NullLogger(), this.compilationSettings);\n        compiler.setErrorOutput(this.ioHost.stderr);\n        compiler.setErrorCallback(\n            (minChar, charLen, message, unitIndex) => {\n                compiler.errorReporter.hasErrors = true;\n                var fname = this.resolvedEnvironment.code[unitIndex].path;\n                var lineCol = { line: -1, col: -1 };\n                compiler.parser.getSourceLineCol(lineCol, minChar);\n                // line is 1-base, col, however, is 0-base. add 1 to the col before printing the message\n                var msg = fname + " (" + lineCol.line + "," + (lineCol.col + 1) + "): " + message;\n                if (this.compilationSettings.errorRecovery) {\n                    this.ioHost.stderr.WriteLine(msg);\n                } else {\n                    throw new SyntaxError(msg);\n                }\n            });\n\n        if (this.compilationSettings.emitComments) {\n            compiler.emitCommentsToOutput();\n        }\n\n        var consumeUnit = (code: TypeScript.SourceUnit, addAsResident: bool) => {\n            try {\n                // if file resolving is disabled, the file\'s content will not yet be loaded\n\n                if (!this.compilationSettings.resolve) {\n                    code.content = this.ioHost.readFile(code.path);\n                    // If declaration files are going to be emitted, \n                    // preprocess the file contents and add in referenced files as well\n                    if (this.compilationSettings.generateDeclarationFiles) {\n                        TypeScript.CompilerDiagnostics.assert(code.referencedFiles == null, "With no resolve option, referenced files need to null");\n                        code.referencedFiles = TypeScript.getReferencedFiles(code);\n                    }\n                }\n\n                if (code.content != null) {\n                    if (this.compilationSettings.parseOnly) {\n                        compiler.parseUnit(code.content, code.path);\n                    }\n                    else {\n                        if (this.compilationSettings.errorRecovery) {\n                            compiler.parser.setErrorRecovery(this.ioHost.stderr);\n                        }\n                        compiler.addUnit(code.content, code.path, addAsResident, code.referencedFiles);\n                    }\n                }\n            }\n            catch (err) {\n                compiler.errorReporter.hasErrors = true;\n                // This includes syntax errors thrown from error callback if not in recovery mode\n                this.ioHost.stderr.WriteLine(err.message);\n            }\n\n        }\n\n        for (var iCode = 0 ; iCode < this.resolvedEnvironment.code.length; iCode++) {\n            if (!this.compilationSettings.parseOnly || (iCode > 0)) {\n                consumeUnit(this.resolvedEnvironment.code[iCode], false);\n            }\n        }\n\n        var emitterIOHost = {\n          ';
var v27676 = v27677 + "  createFile: (fileName: string, useUTF8?: bool) => IOUtils.createFileAndFolderStructure(this.ioHost, fileName, useUTF8),\n            directoryExists: this.ioHost.directoryExists,\n            fileExists: this.ioHost.fileExists,\n            resolvePath: this.ioHost.resolvePath\n        };\n\n        try {\n            if (!this.compilationSettings.parseOnly) {\n                compiler.typeCheck();\n                compiler.emit(emitterIOHost);\n                compiler.emitDeclarations();\n            }\n            else {\n                compiler.emitAST(emitterIOHost);\n            }\n        } catch (err) {\n            compiler.errorReporter.hasErrors = true;\n            // Catch emitter exceptions\n            if (err.message != \"EmitError\") {\n                throw err;\n            }\n        }\n\n        return compiler.errorReporter.hasErrors;\n    }\n\n    // Execute the provided inputs\n    public run() {\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            var unit = this.compilationEnvironment.code[i];\n            \n            var outputFileName: string = unit.path;\n            if (TypeScript.isTSFile(outputFileName)) {\n                outputFileName = outputFileName.replace(/\\.ts$/, \".js\");\n            } else if (TypeScript.isSTRFile(outputFileName)) {\n                outputFileName = outputFileName.replace(/\\.str$/, \".js\");\n            }\n            if (this.ioHost.fileExists(outputFileName)) {\n                var unitRes = this.ioHost.readFile(outputFileName)\n                this.ioHost.run(unitRes, outputFileName);\n            }\n        }\n    }\n\n    /// Begin batch compilation\n    public batchCompile() {\n        TypeScript.CompilerDiagnostics.diagnosticWriter = { Alert: (s: string) => { this.ioHost.printLine(s); } }\n\n        var code: TypeScript.SourceUnit;\n\n        var opts = new OptionsParser(this.ioHost);\n\n        opts.option('out', {\n            usage: 'Concatenate and emit output to single file | Redirect output structure to the directory',\n            type: 'file|directory',\n            set: (str) => {\n                this.compilationSettings.outputOption = str;\n            }\n        });\n\n        opts.option('style', {\n            usage: 'Select style checking options (examples --style requireSemi:off or --style \"eqeqeq;bitwise:off\")',\n            experimental: true,\n            set: (str) => {\n                this.compilationSettings.setStyleOptions(str);\n            }\n        });\n\n        opts.flag('sourcemap', {\n            usage: 'Generates corresponding .map file',\n            set: () => {\n                this.compilationSettings.mapSourceFiles = true;\n            }\n        });\n\n        opts.flag('declaration', {\n            usage: 'Generates corresponding .d.ts file',\n            set: () => {\n                this.compilationSettings.generateDeclarationFiles = true;\n            }\n        });\n\n        if (this.ioHost.watchFile) {\n            opts.flag('watch', {\n                usage: 'Watch output files',\n                set: () => {\n                    this.compilationSettings.watch = true;\n                }\n            }, 'w');\n        }\n\n        opts.flag('exec', {\n            usage: 'Execute the script after compilation',\n            set: () => {\n                this.compilationSettings.exec = true;\n            }\n        }, 'e');\n\n        opts.flag('parse', {\n            usage: 'Parse only',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.parseOnly = true;\n            }\n        });\n\n        opts.flag('minw', {\n            usage: 'Minimize whitespace',\n            experimental: true,\n            set: () => { this.compilationSettings.minWhitespace = true; }\n        }, 'mw');\n\n        opts.flag('const', {\n            usage: 'Propagate constants to emitted code',\n            experimental: true,\n            set: () => { this.compilationSettings.propagateConstants = true; }\n        });\n\n        opts.flag('errorrecovery', {\n            usage: 'Enable error recovery',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.errorRecovery = true;\n            }\n        }, 'er');\n\n        opts.flag('comments', {\n            usage: 'Emit comments to output',\n            set: () => {\n                this.compilationSettings.emitComments = true;\n            }\n        }, 'c');\n\n        opts.flag('cflow', {\n            usage: 'Control flow',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n            }\n        });\n\n        opts.flag('cflowp', {\n            usage: 'Print control flow',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.printControlFlow = true;\n            }\n        });\n\n        opts.flag('cflowu', {\n            usage: 'Print Use Def control flow',\n            experimental: true,\n            set: () ";
var v27675 = v27676 + "=> {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.controlFlowUseDef = true;\n            }\n        });\n\n        opts.flag('noerroronwith', {\n            usage: 'Allow with statements',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.errorOnWith = false;\n            }\n        });\n\n        opts.flag('noresolve', {\n            usage: 'Skip resolution and preprocessing',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.resolve = false;\n                this.compilationSettings.preprocess = false;\n            }\n        });\n\n        opts.flag('debug', {\n            usage: 'Print debug output',\n            experimental: true,\n            set: () => {\n                TypeScript.CompilerDiagnostics.debug = true;\n            }\n        });\n\n        opts.flag('canCallDefinitionSignature', {\n            usage: 'Allows you to call the definition signature of an overload group',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.canCallDefinitionSignature = true;\n            }\n        });\n\n        opts.flag('nooptimizemodules', {\n            usage: 'Do not optimize module codegen',\n            experimental: true,\n            set: () => {\n                TypeScript.optimizeModuleCodeGen = false;\n            }\n        });\n\n        opts.flag('nolib', {\n            usage: 'Do not include a default lib.d.ts with global declarations',\n            set: () => {\n                this.compilationSettings.useDefaultLib = false;\n            }\n        });\n\n\n        opts.flag('inferProperties', {\n            usage: 'Infer class properties from top-level assignments to \\'this\\'',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.inferPropertiesFromThisAssignment = true;\n            }\n        });\n\n        opts.option('target', {\n            usage: 'Specify ECMAScript target version: \"ES3\" (default), or \"ES5\"',\n            type: 'VER',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === 'es3') {\n                    this.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES3;\n                } else if (type === 'es5') {\n                    this.compilationSettings.codeGenTarget = TypeScript.CodeGenTarget.ES5;\n                }\n                else {\n                    this.ioHost.printLine(\"ECMAScript target version '\" + type + \"' not supported.  Using default 'ES3' code generation\");\n                }\n            }\n        });\n\n        opts.option('module', {\n            usage: 'Specify module code generation: \"commonjs\" (default) or \"amd\"',\n            type: 'kind',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === 'commonjs' || type === 'node') {\n                    TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;\n                } else if (type === 'amd') {\n                    TypeScript.moduleGenTarget = TypeScript.ModuleGenTarget.Asynchronous;\n                } else {\n                    this.ioHost.printLine(\"Module code generation '\" + type + \"' not supported.  Using default 'commonjs' code generation\");\n                }\n            }\n        });\n\n        var printedUsage = false;\n\n        opts.flag('help', {\n            usage: 'Print this message',\n            set: () => {\n                this.printVersion();\n                opts.printUsage();\n                printedUsage = true;\n            }\n        }, 'h');\n\n        opts.flag('useCaseSensitiveFileResolution', {\n            usage: 'Force file resolution to be case sensitive',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.useCaseSensitiveFileResolution = true;\n            }\n        });\n\n        opts.flag('version', {\n            usage: 'Print the compiler\\'s version: ' + this.compilerVersion,\n            set: () => {\n                this.printVersion();\n            }\n        }, 'v');\n\n        opts.parse(this.ioHost.arguments);\n        \n        if (this.compilationSettings.useDefaultLib) {\n            var compilerFilePath = this.ioHost.getExecutingFilePath()\n            var binDirPath = this.ioHost.dirName(compilerFilePath);\n            var libStrPath = this.ioHost.resolvePath(binDirPath + \"/lib.d.ts\");\n            code = new TypeScript.SourceUnit(libStrPath, null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        for (var i = 0; i < opts.unnamed.length; i++) {\n            code = new TypeScript.SourceUnit(opts.unnamed[i], null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        // If no source files provided to compiler - print usage information\n        if (this.compilationEnvironment.code.length == (this.compilationSettings.useDefaultLib ? 1 : 0)) {\n            if (!printedUsage && !this.printedVersion";
var v27674 = v27675 + ') {\n                this.printVersion();\n                opts.printUsage();\n                this.ioHost.quit(1);\n            }\n            return;\n        }\n\n        var sourceFiles: TypeScript.SourceUnit[] = [];\n        if (this.compilationSettings.watch) {\n            // Capture the state before calling resolve\n            sourceFiles = this.compilationEnvironment.code.slice(0);\n        }\n\n        // Resolve file dependencies, if requested\n        this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n        var hasCompileErrors = this.compile();\n\n        var hasErrors = hasCompileErrors || this.hasResolveErrors;\n        if (!hasErrors) {\n            if (this.compilationSettings.exec) {\n                this.run();\n            }\n        }\n\n        if (this.compilationSettings.watch) {\n            // Watch will cause the program to stick around as long as the files exist\n            this.watchFiles(sourceFiles);\n        }\n        else {  \n            // Exit with the appropriate error code\n            this.ioHost.quit(hasErrors ? 1 : 0);\n        }\n    }\n\n    public printVersion() {\n        if (!this.printedVersion) {\n            this.ioHost.printLine("Version " + this.compilerVersion);\n            this.printedVersion = true;\n        }\n    }\n\n    public watchFiles(soruceFiles: TypeScript.SourceUnit[]) {\n        if (!this.ioHost.watchFile) {\n            this.ioHost.printLine("Error: Current host does not support -w[atch] option");\n            return;\n        }\n\n        var resolvedFiles: string[] = []\n        var watchers: { [x: string]: IFileWatcher; } = {};\n\n        var addWatcher = (filename: string) => {\n            if (!watchers[filename]) {\n                var watcher = this.ioHost.watchFile(filename, onWatchedFileChange);\n                watchers[filename] = watcher;\n            }\n            else {\n                throw new Error("Cannot watch file, it is already watched.");\n            }\n        };\n\n        var removeWatcher = (filename: string) => {\n            if (watchers[filename]) {\n                watchers[filename].close();\n                delete watchers[filename];\n            }\n            else {\n                throw new Error("Cannot stop watching file, it is not being watched.");\n            }\n        };\n\n        var onWatchedFileChange = () => {\n            // Reset the state\n            this.compilationEnvironment.code = soruceFiles;\n\n            // Resolve file dependencies, if requested\n            this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n            // Check if any new files were added to the environment as a result of the file change\n            var oldFiles = resolvedFiles;\n            var newFiles: string[] = [];\n            this.resolvedEnvironment.code.forEach((sf) => newFiles.push(sf.path));\n            newFiles = newFiles.sort();\n\n            var i = 0, j = 0;\n            while (i < oldFiles.length && j < newFiles.length) {\n\n                var compareResult = oldFiles[i].localeCompare(newFiles[j]);\n                if (compareResult == 0) {\n                    // No change here\n                    i++;\n                    j++;\n                }\n                else if (compareResult < 0) {\n                    // Entry in old list does not exist in the new one, it was removed\n                    removeWatcher(oldFiles[i]);\n                    i++;\n                }\n                else {\n                    // Entry in new list does exist in the new one, it was added\n                    addWatcher(newFiles[j]);\n                    j++;\n                }\n            }\n\n            // All remaining unmatched items in the old list have been removed\n            for (var k = i; k < oldFiles.length; k++) {\n                removeWatcher(oldFiles[k]);\n            }\n\n            // All remaing unmatched items in the new list have been added\n            for (var k = j; k < newFiles.length; k++) {\n                addWatcher(newFiles[k]);\n            }\n\n            // Update the state\n            resolvedFiles = newFiles;;\n\n            // Print header\n            this.ioHost.printLine("");\n            this.ioHost.printLine("Recompiling (" + new Date() + "): ");\n            resolvedFiles.forEach((f) => this.ioHost.printLine("    " + f));\n\n            // Trigger a new compilation\n            var hasCompileErrors = this.compile();\n\n            var hasErrors = hasCompileErrors || this.hasResolveErrors;\n            if (!hasErrors) {\n                if (this.compilationSettings.exec) {\n                    this.run();\n                }\n            }\n        };\n\n        // Switch to using stdout for all error messages\n        this.ioHost.stderr = this.ioHost.stdout;\n\n        // Initialize the initial list of resolved files, and add watches to them\n        this.resolvedEnvironment.code.forEach((sf) => {\n            resolvedFiles.push(sf.path);\n            addWatcher(sf.path);\n ';
var v27673 = v27674 + '       });\n        resolvedFiles.sort();\n    }\n}\n\n// Start the batch compilation using the current hosts IO\nvar batch = new BatchCompiler(IO);\nbatch.batchCompile();\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ArrayCache {\n        public arrayType: Type;\n        public arrayBase: Type = null;\n\n        public specialize(arrInstType: Type, checker: TypeChecker): Type {\n            if (this.arrayBase == null) {\n                this.arrayBase = arrInstType.specializeType(checker.wildElm.type, this.arrayType.elementType,\n                                                   checker, true);\n            }\n            return this.arrayBase;\n        }\n    }\n\n    export class TypeComparisonInfo {\n        public onlyCaptureFirstError = false;\n        public flags: TypeRelationshipFlags = TypeRelationshipFlags.SuccessfulComparison;\n        public message = "";\n\n        public addMessageToFront(message) {\n            if (!this.onlyCaptureFirstError) {\n                this.message = this.message ? message + ":\\n\\t" + this.message : message;\n            }\n            else {\n                this.setMessage(message);\n            }\n        }\n\n        public setMessage(message) {\n            this.message = message;\n        }\n    }\n\n    export interface SignatureData {\n        parameters: ParameterSymbol[];\n        nonOptionalParameterCount: number;\n    }\n\n    export interface ApplicableSignature {\n        signature: Signature;\n        hadProvisionalErrors: bool;\n    }\n\n    export enum TypeCheckCollectionMode {\n        Resident,\n        Transient\n    }\n\n    export class PersistentGlobalTypeState {\n        public importedGlobalsTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        public importedGlobalsTypeTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        public importedGlobals: SymbolScopeBuilder;\n\n        // transient state\n        public globals: IHashTable = null;\n        public globalTypes: IHashTable = null;\n        public ambientGlobals: IHashTable = null;\n        public ambientGlobalTypes: IHashTable = null;\n\n        // resident state\n        public residentGlobalValues = new StringHashTable();\n        public residentGlobalTypes = new StringHashTable();\n        public residentGlobalAmbientValues = new StringHashTable();\n        public residentGlobalAmbientTypes = new StringHashTable();\n\n        // dual resident/transient state\n\n        // REVIEW: We shouldn\'t need to allocate private hash tables for these, since there\'s no private global scope\n        // REVIEW: In general, we should audit each instance of DualStringHashTable to ensure that both the primary\n        // and secondary tables are necessary.  If it\'s not necessary, we should sub in a constant sentinel value.\n        public dualGlobalValues: DualStringHashTable;\n        public dualGlobalTypes: DualStringHashTable;\n        public dualAmbientGlobalValues: DualStringHashTable;\n        public dualAmbientGlobalTypes: DualStringHashTable;\n\n        public globalScope: SymbolScope;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public doubleType: Type;\n\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        // Use this flag to turn resident checking on and off\n        public residentTypeCheck: bool = true;\n\n        public mod: ModuleType = null;\n        public gloMod: TypeSymbol = null;\n\n        public wildElm: TypeSymbol = null;\n\n        constructor (public errorReporter: ErrorReporter) {\n            this.importedGlobals = new SymbolScopeBuilder(null, this.importedGlobalsTable, null, this.importedGlobalsTypeTable, null, null);\n\n            this.dualGlobalValues = new DualStringHashTable(this.residentGlobalValues, new StringHashTable());\n            this.dualGlobalTypes = new DualStringHashTable(this.residentGlobalTypes, new StringHashTable());\n            this.dualAmbientGlobalValues = new DualStringHashTable(this.residentGlobalAmbientValues, new StringHashTable());\n            this.dualAmbientGlobalTypes = new DualStringHashTable(this.residentGlobalAmbientTypes, new StringHashTable());\n\n            var dualGlobalScopedMembers = new ScopedMembers(new DualStringHashTable(this.dualGlobalValues, new StringHashTable';
var v27672 = v27673 + '()));\n            var dualGlobalScopedAmbientMembers = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalValues, new StringHashTable()));\n            var dualGlobalScopedEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualGlobalTypes, new StringHashTable()));\n            var dualGlobalScopedAmbientEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalTypes, new StringHashTable()));\n\n            this.globalScope = new SymbolScopeBuilder(dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, this.importedGlobals, null);\n\n            this.voidType = this.enterPrimitive(Primitive.Void, "void");\n            this.booleanType = this.enterPrimitive(Primitive.Boolean, "bool");\n            this.doubleType = this.enterPrimitive(Primitive.Double, "number");\n            this.importedGlobals.ambientEnclosedTypes.addPublicMember("number", this.doubleType.symbol);\n\n            this.stringType = this.enterPrimitive(Primitive.String, "string");\n            this.anyType = this.enterPrimitive(Primitive.Any, "any");\n            this.nullType = this.enterPrimitive(Primitive.Null, "null");\n            this.undefinedType = this.enterPrimitive(Primitive.Undefined, "undefined");\n\n            // shared global state is resident\n            this.setCollectionMode(TypeCheckCollectionMode.Resident);\n\n            this.wildElm = new TypeSymbol("_element", -1, 0, -1, new Type());\n            this.importedGlobalsTypeTable.addPublicMember(this.wildElm.name, this.wildElm);\n\n            this.mod = new ModuleType(dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes);\n            this.mod.members = dualGlobalScopedMembers;\n            this.mod.ambientMembers = dualGlobalScopedAmbientMembers;\n            this.mod.containedScope = this.globalScope;\n\n            this.gloMod = new TypeSymbol(globalId, -1, 0, -1, this.mod);\n            this.mod.members.addPublicMember(this.gloMod.name, this.gloMod);\n\n            this.defineGlobalValue("undefined", this.undefinedType);\n        }\n\n\n        public enterPrimitive(flags: number, name: string) {\n            var primitive = new Type();\n            primitive.primitiveTypeClass = flags;\n            var symbol = new TypeSymbol(name, -1, name.length, -1, primitive);\n            symbol.typeCheckStatus = TypeCheckStatus.Finished;\n            primitive.symbol = symbol;\n            this.importedGlobals.enter(null, null, symbol, this.errorReporter, true, true, true);\n            return primitive;\n        }\n\n        public setCollectionMode(mode: TypeCheckCollectionMode) {\n            this.residentTypeCheck =\n                this.dualGlobalValues.insertPrimary =\n                    this.dualGlobalTypes.insertPrimary =\n                        this.dualAmbientGlobalValues.insertPrimary =\n                            this.dualAmbientGlobalTypes.insertPrimary = mode == TypeCheckCollectionMode.Resident;\n        }\n\n        public refreshPersistentState() {\n            this.globals = new StringHashTable();\n            this.globalTypes = new StringHashTable();\n            this.ambientGlobals = new StringHashTable();\n            this.ambientGlobalTypes = new StringHashTable();\n\n            // add global types to the global scope\n            this.globalTypes.add(this.voidType.symbol.name, this.voidType.symbol);\n            this.globalTypes.add(this.booleanType.symbol.name, this.booleanType.symbol);\n            this.globalTypes.add(this.doubleType.symbol.name, this.doubleType.symbol);\n            this.globalTypes.add("number", this.doubleType.symbol);\n            this.globalTypes.add(this.stringType.symbol.name, this.stringType.symbol);\n            this.globalTypes.add(this.anyType.symbol.name, this.anyType.symbol);\n            this.globalTypes.add(this.nullType.symbol.name, this.nullType.symbol);\n            this.globalTypes.add(this.undefinedType.symbol.name, this.undefinedType.symbol);\n\n            this.dualGlobalValues.secondaryTable = this.globals;\n            this.dualGlobalTypes.secondaryTable = this.globalTypes;\n            this.dualAmbientGlobalValues.secondaryTable = this.ambientGlobals;\n            this.dualAmbientGlobalTypes.secondaryTable = this.ambientGlobalTypes;\n        }\n\n        public defineGlobalValue(name: string, type: Type) {\n            var valueLocation = new ValueLocation();\n            valueLocation.typeLink = new TypeLink();\n            var sym = new VariableSymbol(name, 0, -1, valueLocation);\n            sym.setType(type);\n            sym.typeCheckStatus = TypeCheckStatus.Finished;\n            sym.container = this.gloMod;\n            this.importedGlobalsTable.addPublicMember(name, sym);\n        }\n    }\n\n    export class ContextualTypeContext {\n        public targetSig: Signature = null;\n        public targetThis: Type = null;\n        public targetAccessorType: Type = null;\n\n        constructor (public contextualType: Type,\n            public provisional: bool, pu';
var v27671 = v27672 + 'blic contextID: number) { }\n    }\n\n    export class ContextualTypingContextStack {\n        private contextStack: ContextualTypeContext[] = [];\n        static contextID = TypeCheckStatus.Finished + 1;\n        public pushContextualType(type: Type, provisional: bool) { this.contextStack.push(new ContextualTypeContext(type, provisional, ContextualTypingContextStack.contextID++)); this.checker.errorReporter.pushToErrorSink = provisional; }\n        public hadProvisionalErrors = false; // somewhere in the chain a provisional typecheck error was thrown\n        public popContextualType() {\n            var tc = this.contextStack.pop();\n            this.checker.errorReporter.pushToErrorSink = this.isProvisional();\n            this.hadProvisionalErrors = this.hadProvisionalErrors || (tc.provisional && (this.checker.errorReporter.getCapturedErrors().length));\n            this.checker.errorReporter.freeCapturedErrors();\n            return tc;\n        }\n        public getContextualType(): ContextualTypeContext { return (!this.contextStack.length ? null : this.contextStack[this.contextStack.length - 1]); }\n        public getContextID() { return (!this.contextStack.length ? TypeCheckStatus.Finished : this.contextStack[this.contextStack.length - 1].contextID); }\n        public isProvisional() { return (!this.contextStack.length ? false : this.contextStack[this.contextStack.length - 1].provisional); }\n\n        constructor (public checker: TypeChecker) { }\n    }\n\n    export class TypeChecker {\n        public errorReporter: ErrorReporter = null;\n        public globalScope: SymbolScope;\n\n        public checkControlFlow = false;\n        public printControlFlowGraph = false;\n        public checkControlFlowUseDef = false;\n        public styleSettings: StyleSettings = null;\n\n        public units: LocationInfo[] = null;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public numberType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        public anon = "_anonymous";\n\n        public globals: DualStringHashTable;\n        public globalTypes: DualStringHashTable;\n        public ambientGlobals: DualStringHashTable;\n        public ambientGlobalTypes: DualStringHashTable;\n        public gloModType: ModuleType;\n        public gloMod: TypeSymbol;\n        public wildElm: TypeSymbol;\n\n        public locationInfo: LocationInfo = null;\n        public typeFlow: TypeFlow = null;\n\n        public currentCompareA: Symbol = null;\n        public currentCompareB: Symbol = null;\n\n        public currentModDecl: ModuleDeclaration = null;\n\n        public inBind = false;\n        public inWith = false;\n        public errorsOnWith = true;\n\n        public typingContextStack: ContextualTypingContextStack;\n        public currentContextualTypeContext: ContextualTypeContext = null;\n\n        public resolvingBases = false;\n\n        public canCallDefinitionSignature = false;\n\n        public assignableCache: any[] = <any>{};\n        public subtypeCache: any[] = <any>{};\n        public identicalCache: any[] = <any>{};\n\n        public provisionalStartedTypecheckObjects: PhasedTypecheckObject[] = [];\n\n        public mustCaptureGlobalThis = false;\n\n        constructor (public persistentState: PersistentGlobalTypeState) {\n            this.voidType = this.persistentState.voidType;\n            this.booleanType = this.persistentState.booleanType;\n            this.numberType = this.persistentState.doubleType;\n            this.stringType = this.persistentState.stringType;\n            this.anyType = this.persistentState.anyType;\n            this.nullType = this.persistentState.nullType;\n            this.undefinedType = this.persistentState.undefinedType;\n\n            this.globals = this.persistentState.dualGlobalValues;\n            this.globalTypes = this.persistentState.dualGlobalTypes;\n            this.ambientGlobals = this.persistentState.dualAmbientGlobalValues;\n            this.ambientGlobalTypes = this.persistentState.dualAmbientGlobalTypes;\n            this.gloModType = this.persistentState.mod;\n            this.gloMod = this.persistentState.gloMod;\n            this.wildElm = this.persistentState.wildElm;\n\n            this.globalScope = this.persistentState.globalScope;\n\n            this.typingContextStack = new ContextualTypingContextStack(this);\n        }\n\n        public setStyleOptions(style: StyleSettings) {\n            this.styleSettings = style;\n        }\n\n        // Contextual typing\n        public setContextualType(type: Type, provisional: bool) {\n            this.typingContextStack.pushContextualType(type, provisional);\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        public unsetContextualType() {\n            var lastTC = this.typingContextStack.popContextualType();\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n            return lastTC;\n   ';
var v27670 = v27671 + '     }\n\n        public hadProvisionalErrors() {\n            return this.typingContextStack.hadProvisionalErrors;\n        }\n        public resetProvisionalErrors() {\n            if (!this.typingContextStack.getContextualType()) {\n                this.typingContextStack.hadProvisionalErrors = false;\n            }\n        }\n\n        public typeCheckWithContextualType(contextType: Type, provisional: bool, condition: bool, ast: AST) {\n            if (condition) {\n                this.setContextualType(contextType, this.typingContextStack.isProvisional() || provisional);\n            }\n            this.typeFlow.typeCheck(ast);\n            if (condition) {\n                this.unsetContextualType();\n            }\n        }\n\n        public resetTargetType() {\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        // Unset the current contextual type without disturbing the stack, effectively "killing" the contextual typing process\n        public killCurrentContextualType() { this.currentContextualTypeContext = null; this.errorReporter.pushToErrorSink = false; }\n        public hasTargetType() { return this.currentContextualTypeContext && this.currentContextualTypeContext.contextualType; }\n        public getTargetTypeContext() { return this.currentContextualTypeContext; }\n\n        public inProvisionalTypecheckMode() {\n            return this.typingContextStack.isProvisional();\n        }\n\n        public getTypeCheckFinishedStatus() {\n            if (this.inProvisionalTypecheckMode()) {\n                return this.typingContextStack.getContextID();\n            }\n            return TypeCheckStatus.Finished;\n        }\n\n        public typeStatusIsFinished(status: TypeCheckStatus) {\n\n            return status == TypeCheckStatus.Finished ||\n                   (this.inProvisionalTypecheckMode() && status == this.typingContextStack.getContextID());\n        }\n\n        public addStartedPTO(pto: PhasedTypecheckObject) {\n            if (this.inProvisionalTypecheckMode()) {\n                this.provisionalStartedTypecheckObjects[this.provisionalStartedTypecheckObjects.length] = pto;\n            }\n        }\n\n        public cleanStartedPTO() {\n            for (var i = 0; i < this.provisionalStartedTypecheckObjects.length; i++) {\n                if (this.provisionalStartedTypecheckObjects[i].typeCheckStatus >= this.typingContextStack.getContextID()) {\n                    this.provisionalStartedTypecheckObjects[i].typeCheckStatus = TypeCheckStatus.NotStarted;\n                }\n            }\n            this.provisionalStartedTypecheckObjects = [];\n        }\n\n        // type collection      \n        public collectTypes(ast: AST): void {\n            if (ast.nodeType == NodeType.Script) {\n                var script = <Script>ast;\n                this.locationInfo = script.locationInfo;\n            }\n            var globalChain = new ScopeChain(this.gloMod, null, this.globalScope);\n            var context = new TypeCollectionContext(globalChain, this);\n            getAstWalkerFactory().walk(ast, preCollectTypes, postCollectTypes, null, context);\n        }\n\n        public makeArrayType(type: Type): Type {\n            if (type.arrayCache == null) {\n                type.arrayCache = new ArrayCache();\n                type.arrayCache.arrayType = new Type();\n                type.arrayCache.arrayType.elementType = type;\n                type.arrayCache.arrayType.symbol = type.symbol;\n            }\n            return type.arrayCache.arrayType;\n        }\n\n        public getParameterList(funcDecl: FuncDecl, container: Symbol): SignatureData {\n            var args = funcDecl.arguments;\n            var parameterTable = null;\n            var parameterBuilder = null;\n            var len = args.members.length;\n            var nonOptionalParams = 0;\n            var result: ParameterSymbol[] = [];\n\n            if (len > 0) {\n                parameterTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                parameterBuilder = new SymbolScopeBuilder(parameterTable, null, null, null, null, container);\n\n                for (var i = 0; i < len; i++) {\n                    var parameter = <ArgDecl>args.members[i];\n                    var paramDef = new ValueLocation();\n                    var parameterSymbol = new ParameterSymbol(parameter.id.text, parameter.minChar,\n                                                            this.locationInfo.unitIndex, paramDef);\n                    parameterSymbol.declAST = parameter;\n                    parameterSymbol.funcDecl = funcDecl;\n                    parameter.id.sym = parameterSymbol;\n                    parameter.sym = parameterSymbol;\n                    paramDef.symbol = parameterSymbol;\n                    paramDef.typeLink = getTypeLink(parameter.typeExpr, this, false);\n                    parameterBuilder.enter(null, parameter, parameterSymbol, this.errorReporter, true, false, false); // REVIEW: Shoul';
var v27669 = v27670 + "d this be entered into the private scope?\n                    result[result.length] = parameterSymbol;\n                    if (!parameter.isOptionalArg()) {\n                        nonOptionalParams++;\n                    }\n                }\n            }\n            return { parameters: result, nonOptionalParameterCount: nonOptionalParams };\n        }\n\n        // Create a signature for a function definition\n        //  (E.g., has a function body - function declarations, property declarations, lambdas)\n        public createFunctionSignature(funcDecl: FuncDecl, container: Symbol, scope: SymbolScope, overloadGroupSym: Symbol, addToScope: bool): Signature {\n\n            var isExported = hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported) || container == this.gloMod;\n            var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n            var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n            var isDefinition = hasFlag(funcDecl.fncFlags, FncFlags.Definition);\n            var isAmbient = hasFlag(funcDecl.fncFlags, FncFlags.Ambient);\n            var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n            var isGlobal = container == this.gloMod;\n\n            var signature: Signature = new Signature();\n            var isLambda = funcDecl.fncFlags & FncFlags.IsFunctionExpression;\n\n            // If a return type has been declared for the signature, set the type link.\n            // Otherwise:\n            //  if it's a signature, its type will be 'any'\n            //  if it's a definition, the return type will be inferred  \n            if (funcDecl.returnTypeAnnotation || isDefinition) {\n                signature.returnType = getTypeLink(funcDecl.returnTypeAnnotation, this, false);\n            }\n            else {\n                signature.returnType = new TypeLink();\n                signature.returnType.type = this.anyType;\n            }\n\n            signature.hasVariableArgList = funcDecl.variableArgList;\n\n            var sigData = this.getParameterList(funcDecl, container);\n\n            signature.parameters = sigData.parameters;\n            signature.nonOptionalParameterCount = sigData.nonOptionalParameterCount;\n\n            funcDecl.signature = signature;\n            signature.declAST = funcDecl;\n\n            var useOverloadGroupSym =\n                overloadGroupSym &&\n                overloadGroupSym.getType() &&\n                !overloadGroupSym.isAccessor() &&\n                (funcDecl.isSignature() || (isAmbient == hasFlag(overloadGroupSym.flags, SymbolFlags.Ambient)));\n\n            if (useOverloadGroupSym && isPrivate != hasFlag(overloadGroupSym.flags, SymbolFlags.Private)) {\n                this.errorReporter.simpleError(funcDecl, \"Public/Private visibility of overloads does not agree\");\n            }\n\n            var groupType = useOverloadGroupSym ? overloadGroupSym.getType() : new Type();\n\n            if (isConstructor) {\n                if (groupType.construct == null) {\n                    groupType.construct = new SignatureGroup();\n                }\n                groupType.construct.addSignature(signature);\n                groupType.construct.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.construct.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else if (funcDecl.isIndexerMember()) {\n                if (groupType.index == null) {\n                    groupType.index = new SignatureGroup();\n                    groupType.index.flags |= SignatureFlags.IsIndexer;\n                }\n\n                groupType.index.addSignature(signature);\n                groupType.index.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.index.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else {\n                if (groupType.call == null) {\n                    groupType.call = new SignatureGroup();\n                }\n                groupType.call.addSignature(signature);\n\n                groupType.call.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.call.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n\n            var instanceType = groupType.instanceType;\n\n            // Ensure that the function's symbol is properly configured\n            // (If there were overloads, we'll already have a symbol, otherwise we need to create one)\n            var funcName: string = null;\n\n            // Set the function's name:\n            //  In the case of anonymous or functions resulting from error\n            //  correction in the parser (isMissing() == true), we do not\n            //  want to set a function name, since they shouldn't be inserted\n            //  into the enclosing scope\n\n            // usedHint prevents functions bound to object literal fields from";
var v27668 = v27669 + " being added to the\n            // enclosing scope\n            var usedHint = false;\n            if (funcDecl.name && !funcDecl.name.isMissing()) {\n                funcName = funcDecl.name.text;\n            }\n            else if (funcDecl.hint) {\n                funcName = funcDecl.hint;\n                usedHint = true;\n            }\n\n            if (groupType.symbol == null) {\n                groupType.symbol =\n                    new TypeSymbol(funcName ? funcName : this.anon,\n                                    funcDecl.minChar, funcDecl.limChar - funcDecl.minChar,\n                                    this.locationInfo.unitIndex,\n                                    groupType);\n                if (!useOverloadGroupSym) {\n                    groupType.symbol.declAST = funcDecl;\n                }\n            }\n\n            // REVIEW: Are we missing any other flags?\n            if (isStatic) {\n                groupType.symbol.flags |= SymbolFlags.Static;\n            }\n\n            if (isAmbient) {\n                groupType.symbol.flags |= SymbolFlags.Ambient;\n            }\n\n            if (isPrivate) {\n                groupType.symbol.flags |= SymbolFlags.Private;\n            }\n\n            groupType.symbol.isMethod = funcDecl.isMethod();\n            if (groupType.symbol.isMethod) {\n                groupType.symbol.flags |= SymbolFlags.Property;\n            }\n\n            funcDecl.type = groupType;\n\n            // Add the function symbol to the appropriate scope\n            // if the funcDecl is a constructor, it will be added to the enclosing scope as a class\n            if (!isConstructor) {\n                // Add the function's symbol to its enclosing scope\n                if (funcName && !isLambda && !funcDecl.isAccessor() && !usedHint) {\n\n                    // REVIEW: We're not setting the isDecl flags for fuctions bound to object literal properties\n                    // so removing the isDefiniton clause would break object literals\n                    if (addToScope) {  // REVIEW: If we combine this with createFunctionDeclarationSignature, we'll need to broaden this for both decls and defs                      \n                        // if it's a static method, enter directly into the container's scope\n                        if (funcDecl.isMethod() && isStatic) {\n\n                            // REVIEW: What about private statics?\n                            if (!(<TypeSymbol>container).type.members.publicMembers.add(funcName, groupType.symbol)) {\n                                this.errorReporter.duplicateIdentifier(funcDecl, funcName);\n                            }\n\n                            groupType.symbol.container = container;\n                        } // REVIEW: Another check for overloads...\n                        else if (overloadGroupSym == null || (overloadGroupSym.declAST && !(<FuncDecl>overloadGroupSym.declAST).isOverload && (container.isType()))) {\n                            scope.enter(container, funcDecl, groupType.symbol, this.errorReporter, !isPrivate && (isExported || isStatic || isGlobal), false, isAmbient);\n                        }\n                    }\n                    else if (!funcDecl.isSpecialFn()) {\n                        groupType.symbol.container = container; // REVIEW: Set container for overloads or anonymous?\n                    }\n                }\n                else if (!funcDecl.isSpecialFn()) {\n                    groupType.symbol.container = container; // REVIEW: Set container for lambdas and accessors?\n                }\n            }\n\n            // If, say, a call signature overload was declared before the class type was, we want to reuse\n            // the type that's already been instantiated for the class type, rather than allocate a new one\n            if (useOverloadGroupSym) {\n                var overloadGroupType = overloadGroupSym ? overloadGroupSym.getType() : null;\n                var classType = groupType;\n\n                if (classType != overloadGroupType) {\n                    if (classType.construct == null) {\n                        if (overloadGroupType && overloadGroupType.construct) {\n                            classType.construct = overloadGroupType.construct;\n                        }\n                        else {\n                            classType.construct = new SignatureGroup();\n                        }\n                    }\n                    else if (overloadGroupType) {\n                        if (overloadGroupType.construct) {\n                            classType.construct.signatures.concat(overloadGroupType.construct.signatures);\n                        }\n                    }\n\n                    // sync call and index signatures as well, but don't allocate should they not\n                    // already exist\n                    if (overloadGroupType) {\n                        if (classType.call == null) {\n                            classType.call = overloadGroupType.call;\n                        }\n                ";
var v27667 = v27668 + '        else if (overloadGroupType.call) {\n                            classType.call.signatures.concat(overloadGroupType.call.signatures);\n                        }\n\n                        // if the function is not static, we need to add any call overloads onto the\n                        // instance type\'s call signature list\n                        if (!isStatic) {\n\n                            if (classType.instanceType == null) {\n                                classType.instanceType = overloadGroupType.instanceType;\n                            }\n\n                            var instanceType = classType.instanceType;\n\n                            if (instanceType) {\n                                if (instanceType.call == null) {\n                                    instanceType.call = overloadGroupType.call;\n                                }\n                                else if (overloadGroupType.call) {\n                                    instanceType.call.signatures.concat(overloadGroupType.call.signatures);\n                                }\n                            }\n                        }\n\n                        if (classType.index == null) {\n                            classType.index = overloadGroupType.index;\n                        }\n                        else if (overloadGroupType.index) {\n                            classType.index.signatures.concat(overloadGroupType.index.signatures);\n                        }\n                    }\n                }\n            }\n\n            return signature;\n        }\n\n        // Creates a new symbol for an accessor property\n        // Note that funcDecl.type.symbol and fgSym may not be the same (E.g., in the case of type collection)\n        public createAccessorSymbol(funcDecl: FuncDecl, fgSym: Symbol, enclosingClass: Type, addToMembers: bool, isClassProperty: bool, scope: SymbolScope, container: Symbol) {\n            var accessorSym: FieldSymbol = null\n            var sig = funcDecl.signature;\n            var nameText = funcDecl.name.text;\n            var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n            var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n\n            if (fgSym == null) {\n                var field = new ValueLocation();\n                accessorSym = new FieldSymbol(nameText, funcDecl.minChar, this.locationInfo.unitIndex, false, field);\n                field.symbol = accessorSym;\n                accessorSym.declAST = funcDecl; // REVIEW: need to reset for getters and setters\n\n                if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                    if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");\n                    }\n                    accessorSym.getter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");\n                    }\n                    accessorSym.setter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n\n                field.typeLink = getTypeLink(null, this, false);\n\n                // if it\'s static, enter it into the class\'s member list directly\n                if (addToMembers) {\n                    if (enclosingClass) {\n                        if (!enclosingClass.members.publicMembers.add(nameText, accessorSym)) {\n                            this.errorReporter.duplicateIdentifier(funcDecl, accessorSym.name);\n                        }\n                        accessorSym.container = enclosingClass.symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(funcDecl, "Accessor property may not be added in this context");\n                    }\n                }\n                else {\n                    scope.enter(container, funcDecl, accessorSym, this.errorReporter, !isPrivate || isStatic, false, false);\n                }\n\n                // We set the flags here, instead of below, because the accessor symbol does not yet have a type\n                if (isClassProperty) {\n                    accessorSym.flags |= SymbolFlags.Property;\n                }\n                if (isStatic) {\n                    accessorSym.flags |= SymbolFlags.Static;\n                }\n\n                if (isPrivate) {\n                    accessorSym.flags |= SymbolFlags.Private;\n                }\n                else {\n                    accessorSym.flags |= SymbolFlags.Public;\n                }\n            }\n            else {\n                accessorSym = <FieldSymbol>(<any>fgSym);\n\n                if (isPrivate != hasFlag(accessorSym.flags, SymbolFlags.Private)) {\n                    this.errorReporter.simpleError(funcDecl, "Getter and setter accessors do not agree in visibility");\n                }\n\n                if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n       ';
var v27666 = v27667 + '             if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");\n                    }\n                    accessorSym.getter = <TypeSymbol>funcDecl.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");\n                    }\n                    accessorSym.setter = <TypeSymbol>funcDecl.type.symbol;\n                }\n            }\n\n            return accessorSym;\n        }\n\n        public addBases(resultScope: SymbolAggregateScope, type: Type, baseContext: { base: string; baseId: number; }): void {\n            resultScope.addParentScope(new SymbolTableScope(type.members, type.ambientMembers, type.getAllEnclosedTypes(), type.getAllAmbientEnclosedTypes(), type.symbol));\n            var i = 0;\n            var parent: Type;\n            if (type.extendsList) {\n                for (var len = type.extendsList.length; i < len; i++) {\n                    parent = type.extendsList[i];\n                    if (baseContext.baseId == parent.typeID) {\n                        this.errorReporter.reportErrorFromSym(parent.symbol, "Type \'" + baseContext.base + "\' is recursively referenced as a base class of itself");\n                        parent.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        break;\n                    }\n                    this.addBases(resultScope, parent, baseContext);\n                }\n            }\n        }\n\n        public scopeOf(type: Type): SymbolScope {\n            var resultScope = new SymbolAggregateScope(type.symbol);\n            var baseContext = { base: type.symbol && type.symbol.name ? type.symbol.name : "{}", baseId: type.typeID };\n            this.addBases(resultScope, type, baseContext);\n            return resultScope;\n        }\n\n        public lookupMemberTypeSymbol(containingType: Type, name: string): Symbol {\n            var symbol: Symbol = null;\n            if (containingType.containedScope) {\n                symbol = containingType.containedScope.find(name, false, true);\n            }\n            else if (containingType.members) {\n                symbol = containingType.members.allMembers.lookup(name);\n\n                if (symbol == null && containingType.ambientMembers) {\n                    symbol = containingType.ambientMembers.allMembers.lookup(name);\n                }\n            }\n            if (symbol == null) {\n                var typeMembers = containingType.getAllEnclosedTypes();\n                var ambientTypeMembers = containingType.getAllAmbientEnclosedTypes();\n                if (typeMembers) {\n                    symbol = typeMembers.allMembers.lookup(name);\n\n                    if (symbol == null && ambientTypeMembers) {\n                        symbol = ambientTypeMembers.allMembers.lookup(name);\n                    }\n\n                }\n            }\n            if (symbol && symbol.isType()) {\n                return symbol;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public findSymbolForDynamicModule(idText: string, currentFileName: string, search: (id: string) =>Symbol): Symbol {\n            var originalIdText = idText;\n            var symbol = search(idText);\n           \n            if (symbol == null) {\n                // perhaps it\'s a dynamic module?\n                if (!symbol) {\n                    idText = swapQuotes(originalIdText);\n                    symbol = search(idText);\n                }\n\n                // Check the literal path first\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".ts";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".str";\n                    symbol = search(idText);\n                }\n\n                // Check check for .d.str\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".d.ts";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + ".d.str";\n                    symbol = search(idText);\n                }\n\n                // If the literal path doesn\'t work, begin the search\n                if (!symbol && !isRelative(originalIdText)) {\n                    // check the full path first, as this is the most likely scenario\n                    idText = originalIdText;\n\n                    var strippedIdText = stripQuotes(idText);\n\n                    // REVIEW: Technically, we shouldn\'t have to normalize here - we should normalize in addUnit.\n                    // Still, normalizing here alows any language services to be free of assumptions\n                    var path = getRootFilePath(switchToForwardSlashes(currentFileName));\n\n                    ';
var v27665 = v27666 + 'while (symbol == null && path != "") {\n                        idText = normalizePath(path + strippedIdText + ".ts");\n                        symbol = search(idText);\n\n                        // check for .str\n                        if (symbol == null) {\n                            idText = changePathToSTR(idText);\n                            symbol = search(idText);\n                        }\n\n                        // check for .d.ts\n                        if (symbol == null) {\n                            idText = changePathToDTS(idText);\n                            symbol = search(idText);\n                        }\n\n                        // check for .d.str\n                        if (symbol == null) {\n                            idText = changePathToDSTR(idText);\n                            symbol = search(idText);\n                        }\n\n                        if (symbol == null) {\n\t\t\t\t\t\t\tif(path === \'/\') {\n\t\t\t\t\t\t\t\tpath = \'\';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpath = normalizePath(path + "..");\n\t\t\t\t\t\t\t\tpath = path && path != \'/\' ? path + \'/\' : path;\n\t\t\t\t\t\t\t}\n                        }\n                    }\n                }\n            }\n\n            return symbol;\n        }\n\n        public resolveTypeMember(scope: SymbolScope, dotNode: BinaryExpression): Type {\n            var lhs = dotNode.operand1;\n            var rhs = dotNode.operand2;\n            var resultType = this.anyType;\n            var lhsType = this.anyType;\n\n            if (lhs && rhs && (rhs.nodeType == NodeType.Name)) {\n                if (lhs.nodeType == NodeType.Dot) {\n                    lhsType = this.resolveTypeMember(scope, <BinaryExpression>lhs);\n                }\n                else if (lhs.nodeType == NodeType.Name) {\n                    var identifier = <Identifier>lhs;\n                    var symbol = scope.find(identifier.text, false, true);\n                    if (symbol == null) {\n                        this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                    }\n                    else if (symbol.isType()) {\n\n                        var typeSymbol = <TypeSymbol> symbol;\n\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.findSymbolForDynamicModule(modPath, this.locationInfo.filename, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymbol.type = modSym.getType();\n                            }\n                        }\n\n                        if (optimizeModuleCodeGen && symbol) {\n                            var symType = symbol.getType();\n                            // Once the type has been referenced outside of a type ref position, there\'s\n                            // no going back                        \n                            if (symType && typeSymbol.aliasLink && typeSymbol.onlyReferencedAsTypeRef) {\n\n                                var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                                if (modDecl && hasFlag(modDecl.modFlags, ModuleFlags.IsDynamic)) {\n                                    typeSymbol.onlyReferencedAsTypeRef = !this.resolvingBases;\n                                }\n                            }\n                        }\n                        if (!symbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, "The symbol \'" + identifier.actualText + "\' is not visible at this point");\n                        }\n                        lhsType = symbol.getType();\n\n                        identifier.sym = symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(lhs, "Expected type");\n                    }\n\n                }\n\n                // if the LHS type is a module alias, we won\'t be able to resolve it until\n                // typecheck type.  If this is called during binding, lhsType will be null\n                if (!lhsType) {\n                    lhsType = this.anyType;\n                }\n\n                if (lhsType != this.anyType) {\n                    var rhsIdentifier = <Identifier>rhs;\n                    var resultSymbol = this.lookupMemberTypeSymbol(lhsType, rhsIdentifier.text);\n                    if (resultSymbol == null) {\n                        resultType = this.anyType;\n                        this.errorReporter.simpleError(dotNode, "Expected type");\n                    }\n                    else {\n                        resultType = resultSymbol.getType();\n                        if (!resultSymbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, "The symbol \'" + (<Identifier>rhs).actualText + "\' is not visible at this point");\n                        }\n                    }\n                    rhsIdentifier.sym =';
var v27664 = v27665 + ' resultType.symbol;\n                }\n            }\n            if (resultType.isClass()) {\n                resultType = resultType.instanceType;\n            }\n            return resultType;\n        }\n\n        public resolveFuncDecl(funcDecl: FuncDecl, scope: SymbolScope,\n            fgSym: TypeSymbol): Symbol {\n            var functionGroupSymbol = this.createFunctionSignature(funcDecl, scope.container, scope, fgSym, false).declAST.type.symbol;\n            var signatures: Signature[];\n            if (funcDecl.isConstructMember()) {\n                signatures = functionGroupSymbol.type.construct.signatures;\n            }\n            else if (funcDecl.isIndexerMember()) {\n                signatures = functionGroupSymbol.type.getInstanceType().index.signatures;\n            }\n            else {\n                signatures = functionGroupSymbol.type.call.signatures;\n            }\n\n            var signature = signatures[signatures.length - 1];\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var paramSym: ParameterSymbol = signature.parameters[i];\n                this.resolveTypeLink(scope, paramSym.parameter.typeLink, true);\n            }\n\n            // If a vararg list is present, check that the type is an array type\n            if (len && funcDecl.variableArgList) {\n                if (!signature.parameters[len - 1].parameter.typeLink.type.elementType) {\n                    this.errorReporter.simpleErrorFromSym(signature.parameters[len - 1].parameter.symbol, "... parameter must have array type");\n                    signature.parameters[len - 1].parameter.typeLink.type = this.makeArrayType(signature.parameters[len - 1].parameter.typeLink.type);\n                }\n            }\n            this.resolveTypeLink(scope, signature.returnType,\n                            funcDecl.isSignature());\n            return functionGroupSymbol;\n        }\n\n        public resolveVarDecl(varDecl: VarDecl, scope: SymbolScope): Symbol {\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.minChar, this.locationInfo.unitIndex,\n                                (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,\n                                field);\n            fieldSymbol.transferVarFlags(varDecl.varFlags);\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = varDecl;\n            field.typeLink = getTypeLink(varDecl.typeExpr, this, varDecl.init == null);\n            this.resolveTypeLink(scope, field.typeLink, true);\n            varDecl.sym = fieldSymbol;\n            varDecl.type = field.typeLink.type;\n            return fieldSymbol;\n        }\n\n        public resolveTypeLink(scope: SymbolScope, typeLink: TypeLink, supplyVar: bool): void {\n            var arrayCount = 0;\n            if (typeLink.type == null) {\n                var ast: AST = typeLink.ast;\n                if (ast) {\n                    while (typeLink.type == null) {\n                        switch (ast.nodeType) {\n                            case NodeType.Name:\n                                var identifier = <Identifier>ast;\n                                var symbol = scope.find(identifier.text, false, true);\n                                if (symbol == null) {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                                }\n                                else if (symbol.isType()) {\n                                    if (!symbol.visible(scope, this)) {\n                                        this.errorReporter.simpleError(ast, "The symbol \'" + identifier.actualText + "\' is not visible at this point");\n                                    }\n                                    identifier.sym = symbol;\n                                    typeLink.type = symbol.getType();\n                                    if (typeLink.type) {\n                                        if (typeLink.type.isClass()) {\n                                            typeLink.type = typeLink.type.instanceType;\n                                        }\n                                    }\n                                    else {\n                                        typeLink.type = this.anyType;\n                                    }\n                                }\n                                else {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.simpleError(ast, "Expected type");\n                                }\n                                break;\n                            case NodeType.Dot:\n                                typeLink.type = this.resolveTypeMember(scope, <BinaryExpression>ast);\n                                break;\n                            case NodeType.TypeRef:\n                       ';
var v27663 = v27664 + '         var typeRef = <TypeReference>ast;\n                                arrayCount = typeRef.arrayCount;\n                                ast = typeRef.term;\n                                if (ast == null) {\n                                    typeLink.type = this.anyType;\n                                }\n                                break;\n                            case NodeType.InterfaceDeclaration:\n                                var interfaceDecl = <InterfaceDeclaration>ast;\n                                var interfaceType = new Type();\n                                var interfaceSymbol = new TypeSymbol((<Identifier>interfaceDecl.name).text,\n                                                                   ast.minChar,\n                                                                   ast.limChar - ast.minChar,\n                                                                   this.locationInfo.unitIndex,\n                                                                   interfaceType);\n                                interfaceType.symbol = interfaceSymbol;\n                                interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                                interfaceType.containedScope =\n                                    new SymbolTableScope(interfaceType.members, null, null, null,\n                                                         interfaceSymbol);\n\n                                interfaceType.containedScope.container = interfaceSymbol;\n                                interfaceType.memberScope = interfaceType.containedScope;\n\n                                var memberList = <ASTList>interfaceDecl.members;\n                                var props: AST[] = memberList.members;\n                                var propsLen = props.length;\n\n                                for (var j = 0; j < propsLen; j++) {\n                                    var propDecl = props[j];\n                                    var propSym: Symbol = null;\n                                    var addMember = true;\n                                    var id: Identifier = null;\n                                    if (propDecl.nodeType == NodeType.FuncDecl) {\n                                        var funcDecl = <FuncDecl>propDecl;\n                                        id = funcDecl.name;\n                                        propSym = interfaceType.members.allMembers.lookup(funcDecl.getNameText());\n                                        addMember = (propSym == null);\n                                        if (funcDecl.isSpecialFn()) {\n                                            addMember = false;\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, interfaceSymbol);\n                                        }\n                                        else {\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, <TypeSymbol>propSym);\n                                        }\n                                        funcDecl.type = (<TypeSymbol>propSym).type;\n                                    }\n                                    else {\n                                        id = (<VarDecl>propDecl).id;\n                                        propSym = this.resolveVarDecl(<VarDecl>propDecl, scope);\n\n                                        // Don\'t add the member if it was missing a name.  This \n                                        // generally just leads to cascading errors that make things\n                                        // more confusing for the user.\n                                        addMember = !id.isMissing();\n                                    }\n\n                                    if (addMember) {\n                                        if (id && hasFlag(id.flags, ASTFlags.OptionalName)) {\n                                            propSym.flags |= SymbolFlags.Optional;\n                                        }\n                                        if (!interfaceType.members.allMembers.add(propSym.name, propSym)) {\n                                            this.errorReporter.duplicateIdentifier(ast, propSym.name);\n                                        }\n                                    }\n                                }\n\n                                ast.type = interfaceType;\n                                typeLink.type = interfaceType;\n\n                                break;\n                            case NodeType.FuncDecl:\n                                var tsym = <TypeSymbol>this.resolveFuncDecl(<FuncDecl>ast, scope, null);\n                                typeLink.type = tsym.type;\n                                break;\n                            default:\n                                typeLink.type = this.anyType;\n                                this.errorReporter.simpleError(ast, "Expected type");\n                ';
var v27662 = v27663 + '                break;\n                        }\n                    }\n                }\n                for (var count = arrayCount; count > 0; count--) {\n                    typeLink.type = this.makeArrayType(typeLink.type);\n                }\n                if (supplyVar && (typeLink.type == null)) {\n                    typeLink.type = this.anyType;\n                }\n                if (typeLink.ast) {\n                    typeLink.ast.type = typeLink.type;\n                }\n            }\n            // else wait for type inference\n        }\n\n        public resolveBaseTypeLink(typeLink: TypeLink, scope: SymbolScope) {\n            this.resolvingBases = true;\n            this.resolveTypeLink(scope, typeLink, true);\n            this.resolvingBases = false;\n            var extendsType: Type = null;\n            if (typeLink.type.isClass()) {\n                extendsType = typeLink.type.instanceType;\n            }\n            else {\n                extendsType = typeLink.type;\n            }\n\n            return extendsType;\n        }\n\n        public findMostApplicableSignature(signatures: ApplicableSignature[], args: ASTList): { sig: Signature; ambiguous: bool; } {\n\n            if (signatures.length == 1) {\n                return { sig: signatures[0].signature, ambiguous: false };\n            }\n\n            var best: ApplicableSignature = signatures[0];\n            var Q: ApplicableSignature = null;\n            var AType: Type = null;\n            var PType: Type = null;\n            var QType: Type = null;\n            var ambiguous = false;\n\n            for (var qSig = 1; qSig < signatures.length; qSig++) {\n                Q = signatures[qSig];\n                var i = 0;\n                // find the better conversion\n                for (i = 0; args && i < args.members.length; i++) {\n                    AType = args.members[i].type;\n                    PType = i < best.signature.parameters.length ? best.signature.parameters[i].getType() : best.signature.parameters[best.signature.parameters.length - 1].getType().elementType;\n                    QType = i < Q.signature.parameters.length ? Q.signature.parameters[i].getType() : Q.signature.parameters[Q.signature.parameters.length - 1].getType().elementType;\n\n                    if (this.typesAreIdentical(PType, QType)) {\n                        continue;\n                    }\n                    else if (this.typesAreIdentical(AType, PType)) {\n                        break;\n                    }\n                    else if (this.typesAreIdentical(AType, QType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(PType, QType)) {\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(QType, PType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (Q.hadProvisionalErrors) {\n                        break;\n                    }\n                    else if (best.hadProvisionalErrors) {\n                        best = Q;\n                        break;\n                    }\n                }\n\n                if (!args || i == args.members.length) {\n                    var collection: ITypeCollection = {\n                        getLength: () => { return 2; },\n                        setTypeAtIndex: (index: number, type: Type) => { }, // no contextual typing here, so no need to do anything\n                        getTypeAtIndex: (index: number) => { return index ? Q.signature.returnType.type : best.signature.returnType.type; } // we only want the "second" type - the "first" is skipped\n                    }\n                    var bct = this.findBestCommonType(best.signature.returnType.type, null, collection, true);\n                    ambiguous = !bct;\n                }\n                else {\n                    ambiguous = false;\n                }\n            }\n\n            return { sig: best.signature, ambiguous: ambiguous };\n        }\n\n        public getApplicableSignatures(signatures: Signature[], args: ASTList, comparisonInfo: TypeComparisonInfo): ApplicableSignature[] {\n\n            var applicableSigs: ApplicableSignature[] = [];\n            var memberType: Type = null;\n            var miss = false;\n            var cxt: ContextualTypeContext = null;\n            var hadProvisionalErrors = false;\n\n            for (var i = 0; i < signatures.length; i++) {\n                miss = false;\n\n                for (var j = 0; j < args.members.length; j++) {\n\n                    if (j >= signatures[i].parameters.length) {\n                        continue;\n                    }\n                    memberType = signatures[i].parameters[j].getType();\n\n                    // account for varargs\n                    if (signatures[i].declAST.variableArgList && (j >= signatures[i].nonOptionalParameterCount - 1) && memberType.isArray()) {\n                        memberType = mem';
var v27661 = v27662 + 'berType.elementType;\n                    }\n\n                    if (memberType == this.anyType) {\n                        continue;\n                    }\n                    else if (args.members[j].nodeType == NodeType.FuncDecl) {\n                        if (this.typeFlow.functionInterfaceType && memberType == this.typeFlow.functionInterfaceType) {\n                            continue;\n                        }\n                        if (!this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], true)) {\n                            // if it\'s just annotations that are blocking us, typecheck the function and add it to the list\n                            if (this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], false)) {\n                                this.typeFlow.typeCheck(args.members[j]);\n                                if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                    break;\n                                }\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        else { // if it can be contextually typed, try it out...\n\n                            this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                            this.cleanStartedPTO();\n                            hadProvisionalErrors = this.hadProvisionalErrors();\n\n                            if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                if (comparisonInfo) {\n                                    comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                                }\n                                miss = true;\n                            }\n\n                            // clean the type\n                            //if (hadProvisionalErrors) {\n                            //    cxt = this.currentContextualTypeContext;\n                            //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                            //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                            //        miss = true;\n                            //    }\n                            //    this.cleanStartedPTO();\n                            //}\n\n                            this.resetProvisionalErrors();\n                            if (miss) {\n                                break;\n                            }\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ObjectLit) {\n                        // now actually attempt to typecheck as the contextual type\n                        if (this.typeFlow.objectInterfaceType && memberType == this.typeFlow.objectInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        this.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                            }\n                            miss = true;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n\n                        //    // is the "cleaned" type even assignable?\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ArrayLit) {\n                        // attempt to contextually type the array literal\n                        if (this.typeFlow.arrayInterfaceType && memberType == this.typeFlow.arrayInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        thi';
var v27660 = v27661 + 's.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage("Could not apply type \'" + memberType.getTypeName() + "\' to argument " + (j + 1) + ", which is of type \'" + args.members[j].type.getTypeName() + "\'");\n                            }\n                            break;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                }\n\n                if (j == args.members.length) {\n                    applicableSigs[applicableSigs.length] = { signature: signatures[i], hadProvisionalErrors: hadProvisionalErrors };\n                }\n                hadProvisionalErrors = false;\n            }\n\n            return applicableSigs;\n        }\n\n        public canContextuallyTypeFunction(candidateType: Type, funcDecl: FuncDecl, beStringent: bool): bool {\n\n            // in these cases, we do not attempt to apply a contextual type\n            //  RE: isInlineCallLiteral - if the call target is a function literal, we don\'t want to apply the target type\n            //  to its body - instead, it should be applied to its return type\n            if (funcDecl.isParenthesized ||\n                funcDecl.isMethod() ||\n                beStringent && funcDecl.returnTypeAnnotation ||\n                funcDecl.isInlineCallLiteral) {\n                return false;\n            }\n\n            beStringent = beStringent || (this.typeFlow.functionInterfaceType == candidateType);\n\n            // At this point, if we\'re not being stringent, there\'s no need to check for multiple call sigs\n            // or count parameters - we just want to unblock typecheck\n            if (!beStringent) {\n                return true;\n            }\n\n            // If we\'re coming from an in-scope typecheck, lambdas may not have had function signatures created for them\n            // REVIEW: Should we search out the overload group here?\n            if (!funcDecl.signature) {\n                this.createFunctionSignature(funcDecl, this.typeFlow.scope.container, this.typeFlow.scope, null, null);\n                this.typeFlow.typeCheck(funcDecl);\n            }\n\n            var signature = funcDecl.signature;\n            var paramLen = signature.parameters.length;\n\n            // Check that the argument declarations have no type annotations\n            for (var i = 0; i < paramLen; i++) {\n                var param = signature.parameters[i];\n                var symbol = <ParameterSymbol>param;\n                var argDecl = <ArgDecl>symbol.declAST;\n\n                // REVIEW: a valid typeExpr is a requirement for varargs,\n                // so we may want to revise our invariant\n                if (beStringent && argDecl.typeExpr) {\n                    return false;\n                }\n            }\n\n            if (candidateType.construct && candidateType.call) {\n                return false;\n            }\n\n            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n\n            if (!candidateSigs || candidateSigs.signatures.length > 1) {\n                return false;\n            }\n\n            // if we\'re here, the contextual type can be applied to the function\n            return true;\n        }\n\n        public canContextuallyTypeObjectLiteral(targetType: Type, objectLit: UnaryExpression): bool {\n\n            if (targetType == this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            var memberDecls = <ASTList>objectLit.operand;\n\n            if (!(memberDecls && targetType.memberScope)) {\n                return false;\n            }\n\n            var id: AST = null;\n            var targetMember: Symbol = null;\n            var text = "";\n            var foundSyms = {};\n\n            // Check that each property in the object literal is present in the target\n            // type\n            for (var i = 0; i < memberDecls.members.length; i++) {\n                id = (<BinaryExpression>memberDecls.members[i]).operand1;\n\n                if (id.nodeType == NodeType.Name) {\n                    text = (<Identifier>id).text;\n                }\n                else if (id.nodeType == NodeType.QString) {\n                    // TODO: set te';
var v27659 = v27660 + "xt to unescaped string\n                    var idText = (<StringLiteral>id).text;\n                    text = idText.substring(1, idText.length - 1);\n                }\n                else {\n                    return false;\n                }\n\n                targetMember = targetType.memberScope.find(text, true, false);\n\n                if (!targetMember) {\n                    return false;\n                }\n\n                foundSyms[text] = true;\n            }\n\n            // Check that all members in the target type are present in the object literal\n            var targetMembers = targetType.memberScope.getAllValueSymbolNames(true);\n\n            for (var i = 0; i < targetMembers.length; i++) {\n                var memberName = targetMembers[i];\n                var memberSym = targetType.memberScope.find(memberName, true, false);\n\n                if (!foundSyms[targetMembers[i]] &&\n                    !hasFlag(memberSym.flags, SymbolFlags.Optional)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public widenType(t: Type) {\n            if (t == this.undefinedType || t == this.nullType) { // REVIEW: not isNullOrUndefinedType for perf reasons\n                return this.anyType;\n            }\n\n            return t;\n        }\n\n        public isNullOrUndefinedType(t: Type) {\n            return t == this.undefinedType || t == this.nullType;\n        }\n\n        public findBestCommonType(initialType: Type, targetType: Type, collection: ITypeCollection, acceptVoid:bool, comparisonInfo?: TypeComparisonInfo) {\n            var i = 0;\n            var len = collection.getLength();\n            var nlastChecked = 0;\n            var bestCommonType = initialType;\n\n            if (targetType) {\n                bestCommonType = bestCommonType ? bestCommonType.mergeOrdered(targetType, this, acceptVoid) : targetType;\n            }\n\n            // it's important that we set the convergence type here, and not in the loop,\n            // since the first element considered may be the contextual type\n            var convergenceType: Type = bestCommonType;\n\n            while (nlastChecked < len) {\n\n                for (i = 0; i < len; i++) {\n\n                    // no use in comparing a type against itself\n                    if (i == nlastChecked) {\n                        continue;\n                    }\n\n                    if (convergenceType && (bestCommonType = convergenceType.mergeOrdered(collection.getTypeAtIndex(i), this, acceptVoid, comparisonInfo))) {\n                        convergenceType = bestCommonType;\n                    }\n\n                    if (bestCommonType == this.anyType || bestCommonType == null) {\n                        break;\n                    }\n                    else if (targetType) { // set the element type to the target type\n                        collection.setTypeAtIndex(i, targetType);\n                    }\n                }\n\n                // use the type if we've agreed upon it\n                if (convergenceType && bestCommonType) {\n                    break;\n                }\n\n                nlastChecked++;\n                if (nlastChecked < len) {\n                    convergenceType = collection.getTypeAtIndex(nlastChecked);\n                }\n            }\n\n            return acceptVoid ? bestCommonType : (bestCommonType == this.voidType ? null : bestCommonType);\n        }\n\n        // Type Identity\n\n        public typesAreIdentical(t1: Type, t2: Type) {\n\n            // This clause will cover both primitive types (since the type objects are shared),\n            // as well as shared brands\n            if (t1 == t2) {\n                return true;\n            }\n\n            if (!t1 || !t2) {\n                return false;\n            }\n\n            if (t1.isClass() || t1.isClassInstance()) {\n                return false;\n            }\n\n            var comboId = (t2.typeID << 16) | t1.typeID;\n\n            if (this.identicalCache[comboId]) {\n                return true;\n            }\n\n            // If one is an enum, and they're not the same type, they're not identical\n            if ((t1.typeFlags & TypeFlags.IsEnum) || (t2.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (t1.isArray() || t2.isArray()) {\n                if (!(t1.isArray() && t2.isArray())) {\n                    return false;\n                }\n                this.identicalCache[comboId] = false;\n                var ret = this.typesAreIdentical(t1.elementType, t2.elementType);\n                if (ret) {\n                    this.subtypeCache[comboId] = true;\n                }\n                else {\n                    this.subtypeCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            if (t1.primitiveTypeClass != t2.primitiveTypeClass) {\n                return false;\n            }\n\n            this.identicalCache[comboId] = false;\n\n            // properties are identical in na";
var v27658 = v27659 + "me, optionality, and type\n            // REVIEW: TypeChanges - The compiler does not currently check against the members of parent types!\n            // REVIEW: TypeChanges - What about ambientMembers?\n            if (t1.memberScope && t2.memberScope) {\n                var t1MemberKeys = t1.memberScope.getAllValueSymbolNames(true).sort();\n                var t2MemberKeys = t2.memberScope.getAllValueSymbolNames(true).sort();\n\n                if (t1MemberKeys.length != t2MemberKeys.length) {\n                    this.identicalCache[comboId] = undefined;\n                    return false;\n                }\n\n                var t1MemberSymbol: Symbol = null;\n                var t2MemberSymbol: Symbol = null;\n\n                var t1MemberType: Type = null;\n                var t2MemberType: Type = null;\n\n                for (var iMember = 0; iMember < t1MemberKeys.length; iMember++) {\n                    if (t1MemberKeys[iMember] != t2MemberKeys[iMember]) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberSymbol = <Symbol>t1.memberScope.find(t1MemberKeys[iMember], false, false);\n                    t2MemberSymbol = <Symbol>t2.memberScope.find(t2MemberKeys[iMember], false, false);\n\n                    if ((t1MemberSymbol.flags & SymbolFlags.Optional) != (t2MemberSymbol.flags & SymbolFlags.Optional)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberType = t1MemberSymbol.getType();\n                    t2MemberType = t2MemberSymbol.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (t1MemberType && t2MemberType && (this.identicalCache[(t2MemberType.typeID << 16) | t1MemberType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.typesAreIdentical(t1MemberType, t2MemberType)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n                }\n            }\n            else if (t1.memberScope || t2.memberScope) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.call, t2.call)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.construct, t2.construct)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.index, t2.index)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            this.identicalCache[comboId] = true;\n            return true;\n        }\n\n        public signatureGroupsAreIdentical(sg1: SignatureGroup, sg2: SignatureGroup) {\n\n            // covers the null case\n            if (sg1 == sg2) {\n                return true;\n            }\n\n            // covers the mixed-null case\n            if (!sg1 || !sg2) {\n                return false;\n            }\n\n            if (sg1.signatures.length != sg2.signatures.length) {\n                return false;\n            }\n\n            var sig1: Signature = null;\n            var sig2: Signature = null;\n            var sigsMatch = false;\n\n            // The signatures in the signature group may not be ordered...\n            // REVIEW: Should definition signatures be required to be identical as well?\n            for (var iSig1 = 0; iSig1 < sg1.signatures.length; iSig1++) {\n                sig1 = sg1.signatures[iSig1];\n\n                for (var iSig2 = 0; iSig2 < sg2.signatures.length; iSig2++) {\n                    sig2 = sg2.signatures[iSig2];\n\n                    if (this.signaturesAreIdentical(sig1, sig2)) {\n                        sigsMatch = true;\n                        break;\n                    }\n                }\n\n                if (sigsMatch) {\n                    sigsMatch = false;\n                    continue;\n                }\n\n                // no match found for a specific signature\n                return false;\n            }\n\n            return true;\n        }\n\n        public signaturesAreIdentical(s1: Signature, s2: Signature) {\n\n            if (s1.hasVariableArgList != s2.hasVariableArgList) {\n                return false;\n            }\n\n            if (s1.nonOptionalParameterCount != s2.nonOptionalParameterCount) {\n                return false;\n            }\n\n            if (s1.parameters.length != s2.parameters.length) {\n                return false;\n            }\n\n            if (!this.typesAreIdentical(s1.returnType.type, s2.returnType.type)) {\n                return false;\n            }\n\n            for (var iParam = 0; iParam < s1.parameters.length; iParam++) {\n                if (!thi";
var v27657 = v27658 + "s.typesAreIdentical(s1.parameters[iParam].parameter.typeLink.type, s2.parameters[iParam].parameter.typeLink.type)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        // Subtyping and Assignment compatibility\n\n        public sourceIsSubtypeOfTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, false, this.subtypeCache, comparisonInfo); }\n        public signatureGroupIsSubtypeOfTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, false, this.subtypeCache, comparisonInfo); }\n        public signatureIsSubtypeOfTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, false, this.subtypeCache, comparisonInfo); }\n\n        public sourceIsAssignableToTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, true, this.assignableCache, comparisonInfo); }\n        public signatureGroupIsAssignableToTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, true, this.assignableCache, comparisonInfo); }\n        public signatureIsAssignableToTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, true, this.assignableCache, comparisonInfo); }\n\n        public sourceIsRelatableToTarget(source: Type, target: Type, assignableTo: bool, comparisonCache: any, comparisonInfo: TypeComparisonInfo) {\n\n            // REVIEW: Does this check even matter?\n            //if (this.typesAreIdentical(source, target)) {\n            //    return true;\n            //}\n            if (source == target) {\n                return true;\n            }\n\n            // An error has already been reported in this case\n            if (!(source && target)) {\n                return true;\n            }\n\n            var comboId = (source.typeID << 16) | target.typeID;\n\n            // In the case of a 'false', we want to short-circuit a recursive typecheck\n            if (comparisonCache[comboId] != undefined) {\n                return true;\n            }\n\n            // this is one difference between subtyping and assignment compatibility\n            if (assignableTo) {\n                if (source == this.anyType || target == this.anyType) {\n                    return true;\n                }\n            }\n            else {\n                // This is one difference between assignment compatibility and subtyping\n                if (target == this.anyType) {\n                    return true;\n                }\n            }\n\n            if (source == this.undefinedType) {\n                return true;\n            }\n\n            if ((source == this.nullType) && (target != this.undefinedType && target != this.voidType)) {\n                return true;\n            }\n\n            // REVIEW: enum types aren't explicitly covered in the spec\n            if (target == this.numberType && (source.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if (source == this.numberType && (target.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if ((source.typeFlags & TypeFlags.IsEnum) || (target.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (source.isArray() || target.isArray()) {\n                if (!(source.isArray() && target.isArray())) {\n                    return false;\n                }\n                comparisonCache[comboId] = false;\n                var ret = this.sourceIsRelatableToTarget(source.elementType, target.elementType, assignableTo, comparisonCache, comparisonInfo);\n                if (ret) {\n                    comparisonCache[comboId] = true;\n                }\n                else {\n                    comparisonCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            // this check ensures that we only operate on object types from this point forward,\n            // since the checks involving primitives occurred above\n            if (source.primitiveTypeClass != target.primitiveTypeClass) {\n\n                if (target.primitiveTypeClass == Primitive.None) {\n                    if (source == this.numberType && this.typeFlow.numberInterfaceType) {\n                        source = this.typeFlow.numberInterfaceType;\n                    }\n                    else if (source == this.stringType && this.typeFlow.stringInterfaceType) {\n                        source = this.typeFlow.stringInterfaceType;\n                    }\n                    else if (source == this.booleanType && this.typeFlow.booleanInterfaceType) {\n                        source = this.typeFlow.booleanInterfaceType;\n           ";
var v27656 = v27657 + '         }\n                    else {\n                        return false;\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = false;\n\n            if (source.hasBase(target)) {\n                comparisonCache[comboId] = true;\n                return true;\n            }\n\n            if (this.typeFlow.objectInterfaceType && target == this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            if (this.typeFlow.functionInterfaceType && (source.call || source.construct) && target == this.typeFlow.functionInterfaceType) {\n                return true;\n            }\n\n            // REVIEW: We should perhaps do this, though it wouldn\'t be quite right without generics support\n            //if (this.typeFlow.arrayInterfaceType && (source.index) && target == this.typeFlow.arrayInterfaceType) {\n            //    return true;\n            //}\n\n            // At this point, if the target is a class, but not the source or a parent of the source, bail\n            if (target.isClass() || target.isClassInstance()) {\n                comparisonCache[comboId] = undefined;\n                return false;\n            }\n\n            if (target.memberScope && source.memberScope) {\n                var mPropKeys = target.memberScope.getAllValueSymbolNames(true);\n                var mProp: Symbol = null;\n                var nProp: Symbol = null;\n                var mPropType: Type = null;\n                var nPropType: Type = null;\n                var inferenceSymbol: InferenceSymbol = null;\n\n                for (var iMProp = 0; iMProp < mPropKeys.length; iMProp++) {\n                    mProp = target.memberScope.find(mPropKeys[iMProp], false, false);\n                    nProp = source.memberScope.find(mPropKeys[iMProp], false, false);\n\n                    // methods do not have the "arguments" field\n                    if (mProp.name == "arguments" &&\n                        this.typeFlow.iargumentsInterfaceType &&\n                        (this.typeFlow.iargumentsInterfaceType.symbol.flags & SymbolFlags.CompilerGenerated) &&\n                        mProp.kind() == SymbolKind.Variable &&\n                        (<VariableSymbol>mProp).variable.typeLink.type == this.typeFlow.iargumentsInterfaceType) {\n                        continue;\n                    }\n\n                    if (mProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>mProp;\n                        if (inferenceSymbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                            // REVIEW: TypeChanges: Does this ever really happen?  Maybe for out-of-order typecheck?\n                            this.typeFlow.typeCheck(mProp.declAST);\n                        }\n                    }\n                    mPropType = mProp.getType();\n\n                    if (!nProp) {\n                        // If it\'s not present on the type in question, look for the property on \'Object\'\n                        if (this.typeFlow.objectInterfaceType) {\n                            nProp = this.typeFlow.objectInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                        }\n\n                        if (!nProp) {\n                            // Now, the property was not found on Object, but the type in question is a function, look\n                            // for it on function\n                            if (this.typeFlow.functionInterfaceType && (mPropType.call || mPropType.construct)) {\n                                nProp = this.typeFlow.functionInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                            }\n\n                            // finally, check to see if the property is optional\n                            if (!nProp) {\n                                if (!(mProp.flags & SymbolFlags.Optional)) {\n                                    comparisonCache[comboId] = undefined;\n                                    if (comparisonInfo) { // only surface the first error\n                                        comparisonInfo.flags |= TypeRelationshipFlags.RequiredPropertyIsMissing;\n                                        comparisonInfo.addMessageToFront("Type \'" + source.getTypeName() + "\' is missing property \'" + mPropKeys[iMProp] + "\' from type \'" + target.getTypeName() + "\'");\n                                    }\n                                    return false;\n                                }\n                                else {\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    if (nProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>nProp;\n                        if (inferenceSymbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                            this.typeFlow.type';
var v27655 = v27656 + 'Check(nProp.declAST);\n                        }\n                    }\n\n\n                    nPropType = nProp.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (mPropType && nPropType && (comparisonCache[(nPropType.typeID << 16) | mPropType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.sourceIsRelatableToTarget(nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo)) {\n                        comparisonCache[comboId] = undefined;\n                        if (comparisonInfo) { // only surface the first error\n                            comparisonInfo.flags |= TypeRelationshipFlags.IncompatiblePropertyTypes;\n                            comparisonInfo.addMessageToFront("Types of property \'" + mProp.name + "\' of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        return false;\n                    }\n                }\n            }\n\n            // check signature groups\n            if (source.call || target.call) {\n                if (!this.signatureGroupIsRelatableToTarget(source.call, target.call, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.call && target.call) {\n                            comparisonInfo.addMessageToFront("Call signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        else {\n                            var hasSig = target.call ? target.getTypeName() : source.getTypeName();\n                            var lacksSig = !target.call ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage("Type \'" + hasSig + "\' requires a call signature, but Type \'" + lacksSig + "\' lacks one");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (source.construct || target.construct) {\n                if (!this.signatureGroupIsRelatableToTarget(source.construct, target.construct, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.construct && target.construct) {\n                            comparisonInfo.addMessageToFront("Construct signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        }\n                        else {\n                            var hasSig = target.construct ? target.getTypeName() : source.getTypeName();\n                            var lacksSig = !target.construct ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage("Type \'" + hasSig + "\' requires a construct signature, but Type \'" + lacksSig + "\' lacks one");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (target.index) {\n                var targetIndex = !target.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : target.index;\n                var sourceIndex = !source.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : source.index;\n\n                if (!this.signatureGroupIsRelatableToTarget(sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.addMessageToFront("Index signatures of types \'" + source.getTypeName() + "\' and \'" + target.getTypeName() + "\' are incompatible");\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = true;\n            return true;\n        }\n\n        // REVIEW: TypeChanges: Return an error context object so the user can get better diagnostic info\n        public signatureGroupIsRelatableToTarget(sourceSG: SignatureGroup, targetSG: SignatureGroup, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n            if (sourceSG == targetSG) {\n                return true;\n            }\n\n            if (!(sourceSG && targetSG)) {\n                return false;\n            }\n\n            var mSig: Signature = null;\n            var nSig: Signature = null;\n            var foundMatch = false;\n\n            for (var iMSig = 0; ';
var v27654 = v27655 + 'iMSig < targetSG.signatures.length; iMSig++) {\n                mSig = targetSG.signatures[iMSig];\n\n                for (var iNSig = 0; iNSig < sourceSG.signatures.length; iNSig++) {\n                    nSig = sourceSG.signatures[iNSig];\n                    if (this.signatureIsRelatableToTarget(nSig, mSig, assignableTo, comparisonCache, comparisonInfo)) {\n                        foundMatch = true;\n                        break;\n                    }\n                }\n\n                if (foundMatch) {\n                    foundMatch = false;\n                    continue;\n                }\n                return false;\n            }\n\n            return true;\n        }\n\n        public signatureIsRelatableToTarget(sourceSig: Signature, targetSig: Signature, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n\n            if (!sourceSig.parameters || !targetSig.parameters) {\n                return false;\n            }\n\n            var targetVarArgCount = targetSig.hasVariableArgList ? targetSig.nonOptionalParameterCount - 1 : targetSig.nonOptionalParameterCount;\n            var sourceVarArgCount = sourceSig.hasVariableArgList ? sourceSig.nonOptionalParameterCount - 1 : sourceSig.nonOptionalParameterCount;\n\n            if (sourceVarArgCount > targetVarArgCount && !targetSig.hasVariableArgList) {\n                if (comparisonInfo) {\n                    comparisonInfo.flags |= TypeRelationshipFlags.SourceSignatureHasTooManyParameters;\n                    comparisonInfo.addMessageToFront("Call signature expects " + targetVarArgCount + " or fewer parameters");\n                }\n                return false;\n            }\n\n            var sourceReturnType = sourceSig.returnType.type;\n            var targetReturnType = targetSig.returnType.type;\n\n            if (targetReturnType != this.voidType) {\n                if (!this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleReturnTypes;\n                        // No need to print this one here - it\'s printed as part of the signature error in sourceIsRelatableToTarget\n                        //comparisonInfo.addMessageToFront("Incompatible return types: \'" + sourceReturnType.getTypeName() + "\' and \'" + targetReturnType.getTypeName() + "\'");\n                    }\n                    return false;\n                }\n            }\n\n            var len = (sourceVarArgCount < targetVarArgCount && sourceSig.hasVariableArgList) ? targetVarArgCount : sourceVarArgCount;\n            var sourceParamType: Type = null;\n            var targetParamType: Type = null;\n            var sourceParamName = "";\n            var targetParamName = "";\n\n            for (var iSource = 0, iTarget = 0; iSource < len; iSource++, iTarget++) {\n\n                if (!sourceSig.hasVariableArgList || iSource < sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n                else if (iSource == sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    if (sourceParamType.elementType) {\n                        sourceParamType = sourceParamType.elementType;\n                    }\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n\n                if (iTarget < targetSig.parameters.length && iTarget < targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n                else if (targetSig.hasVariableArgList && iTarget == targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    if (targetParamType.elementType) {\n                        targetParamType = targetParamType.elementType;\n                    }\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n\n                if (!(this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo, comparisonCache, comparisonInfo) ||\n                        this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo, comparisonCache, comparisonInfo))) {\n\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleParameterTypes;\n                    }\n                    return false;\n                }\n            }\n   ';
var v27653 = v27654 + '         return true;\n        }\n    }\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Continuation {\n        public exceptionBlock = -1;\n        constructor (public normalBlock: number) { }\n    }\n\n    function getBaseTypeLinks(bases: ASTList, baseTypeLinks: TypeLink[]) {\n        if (bases) {\n            var len = bases.members.length;\n            if (baseTypeLinks == null) {\n                baseTypeLinks = new TypeLink[];\n            }\n            for (var i = 0; i < len; i++) {\n                var baseExpr = bases.members[i];\n                var name = baseExpr;\n                var typeLink = new TypeLink();\n                typeLink.ast = name;\n                baseTypeLinks[baseTypeLinks.length] = typeLink;\n            }\n        }\n        return baseTypeLinks;\n    }\n\n    function getBases(type: Type, typeDecl: TypeDeclaration) {\n        type.extendsTypeLinks = getBaseTypeLinks(typeDecl.extendsList, type.extendsTypeLinks);\n        type.implementsTypeLinks = getBaseTypeLinks(typeDecl.implementsList, type.implementsTypeLinks);\n    }\n\n    function addPrototypeField(classType: Type, ast: AST, context: TypeCollectionContext) {\n        var field = new ValueLocation();\n        field.typeLink = new TypeLink();\n        field.typeLink.ast = ast;\n        field.typeLink.type = classType.instanceType;\n\n        var fieldSymbol =\n            new FieldSymbol("prototype", ast.minChar,\n                            context.checker.locationInfo.unitIndex, true, field);\n        fieldSymbol.flags |= (SymbolFlags.Property | SymbolFlags.BuiltIn);\n        field.symbol = fieldSymbol;\n        fieldSymbol.declAST = ast;\n        classType.members.addPublicMember("prototype", fieldSymbol);\n    }\n\n    export function createNewConstructGroupForType(type: Type) {\n        var signature = new Signature();\n        signature.returnType = new TypeLink();\n        signature.returnType.type = type.instanceType;\n        signature.parameters = [];\n\n        type.construct = new SignatureGroup();\n        type.construct.addSignature(signature);     \n    }\n\n    export function cloneParentConstructGroupForChildType(child: Type, parent: Type) {\n        child.construct = new SignatureGroup();\n        var sig: Signature = null;\n\n        if (!parent.construct) {\n            createNewConstructGroupForType(parent);\n        }\n\n        for (var i = 0; i < parent.construct.signatures.length; i++) { \n            sig = new Signature();\n            sig.parameters = parent.construct.signatures[i].parameters;\n            sig.nonOptionalParameterCount = parent.construct.signatures[i].nonOptionalParameterCount;\n            sig.typeCheckStatus = parent.construct.signatures[i].typeCheckStatus;\n            sig.declAST = parent.construct.signatures[i].declAST;\n            sig.returnType = new TypeLink();\n            sig.returnType.type = child.instanceType;\n            child.construct.addSignature(sig);\n        }\n\n    }\n\n    export var globalId = "__GLO";\n\n    export interface IAliasScopeContext {\n        topLevelScope: ScopeChain;\n        members: IHashTable;\n        tcContext: TypeCollectionContext;\n    }\n\n    function findTypeSymbolInScopeChain(name: string, scopeChain: ScopeChain): Symbol {\n        var symbol = scopeChain.scope.find(name, false, true);\n\n        if (symbol == null && scopeChain.previous) {\n            symbol = findTypeSymbolInScopeChain(name, scopeChain.previous);\n        }\n\n        return symbol;\n    }\n\n    function findSymbolFromAlias(alias: AST, context: IAliasScopeContext): Symbol {\n        var symbol: Symbol = null;\n        switch (alias.nodeType) {\n            case NodeType.Name:\n                var name = (<Identifier>alias).text;\n                var isDynamic = isQuoted(name);\n\n                var findSym = (id: string) => {\n                    if (context.members) {\n                        return context.members.lookup(name);\n                    }\n                    else {\n                        return findTypeSymbolInScopeChain(name, context.topLevelScope);\n                    }\n                }\n\n                if (isDynamic) {\n                    symbol = context.tcContext.checker.findSymbolForDynamicModule(name, context.tcContext.script.locationInfo.filename, findSym);\n                }\n                else {\n                    symbol = findSym(name);\n                }\n\n                break;\n\n     ';
var v27652 = v27653 + "       case NodeType.Dot:\n                var dottedExpr = <BinaryExpression>alias;\n                var op1Sym = findSymbolFromAlias(dottedExpr.operand1, context);\n\n                if (op1Sym && op1Sym.getType()) {\n                    symbol = findSymbolFromAlias(dottedExpr.operand2, context);\n                }\n\n                break;\n\n            default:\n                break;\n        }\n\n        if (symbol) {\n            var symType = symbol.getType();\n            if (symType) {\n                var members = symType.members;\n                if (members) {\n                    context.members = members.publicMembers;\n                }\n            }\n        }\n\n        return symbol;\n    }\n\n    export function preCollectImportTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n        var importDecl = <ImportDeclaration>ast;\n\n        // REVIEW: technically, this call isn't strictly necessary, since we'll find the type during the call to resolveTypeMembers\n        var aliasedModSymbol = findSymbolFromAlias(importDecl.alias, { topLevelScope: scopeChain, members: null, tcContext: context });\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n\n        if (aliasedModSymbol) {\n            var aliasedModType = aliasedModSymbol.getType();\n\n            if (aliasedModType) {\n                modType = <ModuleType>aliasedModType;\n            }\n        }\n\n        typeSymbol = new TypeSymbol(importDecl.id.text, importDecl.id.minChar, importDecl.limChar - importDecl.minChar,\n                                    context.checker.locationInfo.unitIndex, modType);\n\n        typeSymbol.aliasLink = importDecl;\n\n        if (context.scopeChain.moduleDecl) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n            typeSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        typeSymbol.declAST = importDecl;\n        importDecl.id.sym = typeSymbol;\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, true, false);\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, false, false);\n        return true;\n    }\n\n    export function preCollectModuleTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        var moduleDecl: ModuleDeclaration = <ModuleDeclaration>ast;\n\n        var isAmbient = hasFlag(moduleDecl.modFlags, ModuleFlags.Ambient);\n        var isEnum = hasFlag(moduleDecl.modFlags, ModuleFlags.IsEnum);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var isExported = hasFlag(moduleDecl.modFlags, ModuleFlags.Exported);\n        var modName = (<Identifier>moduleDecl.name).text;\n\n        var isDynamic = isQuoted(modName);\n\n        var symbol = scopeChain.scope.findLocal(modName, false, false);\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n        if ((symbol == null) || (symbol.kind() != SymbolKind.Type)) {\n\n            if (modType == null) {\n                var enclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n                if (isEnum) {\n                    modType.typeFlags |= TypeFlags.IsEnum;\n                }\n                modType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.setHasImplementation();\n            }\n\n            typeSymbol = new TypeSymbol(modName, moduleDecl.name.minChar, modName.length,\n                                        context.checker.locationInfo.unitIndex, modType);\n            typeSymbol.isDynamic = isQuoted(moduleDecl.prettyName);\n\n            if (context.scopeChain.moduleDecl) {\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n            typeSymbol.declAST = moduleDecl;\n            typeSymbol.prettyName = moduleDecl.prettyName;\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            modType.symbol = typeSymbol;\n        }\n        else {\n            if (symbol && symbol.declAST && symbol.";
var v27651 = v27652 + "declAST.nodeType != NodeType.ModuleDeclaration) {\n                context.checker.errorReporter.simpleError(moduleDecl, \"Conflicting symbol name for module '\" + modName + \"'\");\n            }\n            typeSymbol = <TypeSymbol>symbol;\n\n            // initialize new private scope for the type\n            var publicEnclosedTypes = typeSymbol.type.getAllEnclosedTypes().publicMembers;\n            var publicEnclosedTypesTable = (publicEnclosedTypes == null) ? new StringHashTable() : publicEnclosedTypes;\n            var enclosedTypes = new ScopedMembers(new DualStringHashTable(publicEnclosedTypesTable, new StringHashTable()));\n\n            var publicEnclosedAmbientTypes = typeSymbol.type.getAllAmbientEnclosedTypes().publicMembers;\n            var publicAmbientEnclosedTypesTable = (publicEnclosedAmbientTypes == null) ? new StringHashTable() : publicEnclosedAmbientTypes;\n            var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(publicAmbientEnclosedTypesTable, new StringHashTable()));\n\n            var publicMembers = typeSymbol.type.members.publicMembers;\n            var publicMembersTable = (publicMembers == null) ? new StringHashTable() : publicMembers;\n            var members = new ScopedMembers(new DualStringHashTable(publicMembersTable, new StringHashTable()));\n\n            var publicAmbientMembers = typeSymbol.type.ambientMembers.publicMembers;\n            var publicAmbientMembersTable = (publicAmbientMembers == null) ? new StringHashTable() : publicAmbientMembers;\n            var ambientMembers = new ScopedMembers(new DualStringHashTable(publicAmbientMembersTable, new StringHashTable()));\n\n            modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n            if (isEnum) {\n                modType.typeFlags |= TypeFlags.IsEnum;\n            }\n            modType.members = members;\n            modType.ambientMembers = ambientMembers;\n            modType.setHasImplementation();\n            modType.symbol = typeSymbol;\n\n            typeSymbol.addLocation(moduleDecl.minChar);\n            typeSymbol.expansions.push(modType);\n            typeSymbol.expansionsDeclAST.push(moduleDecl);\n\n        }\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        // REVIEW: If multiple disparate module decls for the same module don't agree\n        // in export privileges, how should we handle it?\n        if (isExported) {\n            typeSymbol.flags |= SymbolFlags.Exported;\n        }\n        if ((context.scopeChain.moduleDecl) ||\n            (context.scopeChain.container == context.checker.gloMod)) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        moduleDecl.mod = modType;\n        pushTypeCollectionScope(typeSymbol, modType.members,\n                                modType.ambientMembers,\n                                modType.enclosedTypes,\n                                modType.ambientEnclosedTypes,\n                                context, null, null, moduleDecl);\n\n        return true;\n    }\n\n    export function preCollectClassTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var classDecl = <ClassDeclaration>ast;\n\n        var classType: Type;\n        var instanceType: Type;\n        var typeSymbol: TypeSymbol = null;\n        var className = (<Identifier>classDecl.name).text;\n        var alreadyInScope = false;\n        var isAmbient = hasFlag(classDecl.varFlags, VarFlags.Ambient);\n        var isExported = hasFlag(classDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var containerMod = <TypeSymbol>scopeChain.container;\n        var foundValSymbol = false;\n\n        typeSymbol = <TypeSymbol>scopeChain.scope.findLocal(className, false, true);\n        \n        // check the value space, since an override may have been declared with the type's name\n        // REVIEW-CLASSES\n        if (!typeSymbol) {\n            var valTypeSymbol = scopeChain.scope.findLocal(className, false, false);\n            \n            if (valTypeSymbol &&\n                valTypeSymbol.isType() &&\n                valTypeSymbol.declAST &&\n                valTypeSymbol.declAST.nodeType == NodeType.FuncDecl &&\n                (<FuncDecl>valTypeSymbol.declAST).isSignature()) {\n                \n                typeSymbol = <TypeSymbol>valTypeSymbol;\n                foundValSymbol = true;\n                \n                if (isExported) {\n                    typeSymbol.flags |= SymbolFlags.Exported;\n                }\n            \n                if (isAmbient) {\n                    typeSymbol.flags |= SymbolFlags.Ambient;\n                }                \n                \n                // the class was never entered into type space, so add it\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checke";
var v27650 = v27651 + "r.errorReporter, isExported || isGlobal, true, isAmbient);                \n            }\n        }\n        \n        if (typeSymbol && !foundValSymbol && (typeSymbol.declAST != classDecl)) {\n            typeSymbol = null;\n        }\n\n        if (typeSymbol == null) {\n            var valueSymbol = scopeChain.scope.findLocal(className, false, false);\n            classType = new Type();\n            classType.setHasImplementation();\n            instanceType = new Type();\n            instanceType.setHasImplementation();\n            classType.instanceType = instanceType;\n            classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            addPrototypeField(classType, classDecl, context);\n            instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            instanceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            typeSymbol = new TypeSymbol(className, classDecl.name.minChar, className.length,\n                                        context.checker.locationInfo.unitIndex, classType);\n            typeSymbol.declAST = classDecl;\n            typeSymbol.instanceType = instanceType;\n            classType.symbol = typeSymbol;\n            instanceType.symbol = typeSymbol;\n\n            if (context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n                typeSymbol.flags |= SymbolFlags.ModuleMember;\n            }\n\n            if (isExported) {\n                typeSymbol.flags |= SymbolFlags.Exported;\n            }\n            \n            if (isAmbient) {\n                typeSymbol.flags |= SymbolFlags.Ambient;\n            }\n\n            ast.type = classType;\n\n            // class in both name spaces (type for instance type; constructor representative in value space)\n            context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n\n            if (valueSymbol == null) {\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            }\n        }\n        else {                            \n            classType = typeSymbol.type;\n            \n            // If the instance type is null, a call overload was likely declared before the class constructor\n            if (classType.instanceType == null) {\n                classType.instanceType = new Type();\n                classType.instanceType.setHasImplementation();\n                classType.instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.instanceType.symbol = classType.symbol;\n                classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            }\n            \n            instanceType = classType.instanceType;\n            ast.type = classType;\n        }\n        \n        // if the class has no declared constructor, either create a default signature or adapt \n        // it's base class's signature group\n        if (!classDecl.constructorDecl) {\n\n            if (typeSymbol && typeSymbol.declAST && typeSymbol.declAST.type && typeSymbol.declAST.type.call && !(<FuncDecl>typeSymbol.declAST).isOverload) {\n                context.checker.errorReporter.duplicateIdentifier(typeSymbol.declAST, typeSymbol.name);\n            }\n\n            createNewConstructGroupForType(classDecl.type);\n        }\n\n        classType.typeFlags |= TypeFlags.IsClass;\n        instanceType.typeFlags |= TypeFlags.IsClass;\n\n        getBases(instanceType, classDecl);\n        pushTypeCollectionScope(typeSymbol, instanceType.members, instanceType.ambientMembers, null, null,\n                                context, instanceType, classType, null);\n        return true;\n    }\n\n    export function preCollectInterfaceTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var interfaceSymbol: TypeSymbol = null;\n        var interfaceType: Type = null;\n        var isExported = hasFlag(interfaceDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var alreadyInScope = true;\n\n        alreadyInScope = false;\n        var ";
var v27649 = v27650 + 'interfaceName = (<Identifier>interfaceDecl.name).text;\n        interfaceSymbol = <TypeSymbol>scopeChain.scope.findLocal(interfaceName, false, true);\n        if (interfaceSymbol == null) {\n            interfaceType = new Type();\n            interfaceSymbol = new TypeSymbol(interfaceName,\n                                        interfaceDecl.name.minChar,\n                                        interfaceName.length,\n                                        context.checker.locationInfo.unitIndex,\n                                        interfaceType);\n            interfaceType.symbol = interfaceSymbol;\n            // REVIEW: Shouldn\'t allocate another table for interface privates\n            interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceSymbol.declAST = interfaceDecl;\n            interfaceSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n        else {\n            alreadyInScope = true;\n            interfaceType = interfaceSymbol.type;\n        }\n\n        if (!interfaceType) {\n            interfaceType = context.checker.anyType;\n        }\n\n        ast.type = interfaceType;\n        getBases(interfaceType, interfaceDecl);\n\n        if (isExported) {\n            interfaceSymbol.flags |= SymbolFlags.Exported;\n        }\n\n        if (context.scopeChain.moduleDecl) {\n            interfaceSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        if (!alreadyInScope) {\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            interfaceSymbol, context.checker.errorReporter, isGlobal || isExported, true, false); // REVIEW: Technically, interfaces should be ambient\n        }\n        pushTypeCollectionScope(interfaceSymbol, interfaceType.members, interfaceType.ambientMembers, null, null,\n                                context, interfaceType, null, null);\n        return true;\n    }\n\n    export function preCollectArgDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var argDecl = <ArgDecl>ast;\n        if (hasFlag(argDecl.varFlags, VarFlags.Public | VarFlags.Private)) {\n            var field = new ValueLocation();\n            var isPrivate = hasFlag(argDecl.varFlags, VarFlags.Private);\n            var fieldSymbol =\n                new FieldSymbol(argDecl.id.text, argDecl.id.minChar,\n                                context.checker.locationInfo.unitIndex,\n                                !hasFlag(argDecl.varFlags, VarFlags.Readonly),\n                                field);\n            fieldSymbol.transferVarFlags(argDecl.varFlags);\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            argDecl.parameterPropertySym = fieldSymbol;\n\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            fieldSymbol, context.checker.errorReporter, !isPrivate, false, false);\n\n            field.typeLink = getTypeLink(argDecl.typeExpr, context.checker, argDecl.init == null);\n            argDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectVarDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var varDecl = <VarDecl>ast;\n        var isAmbient = hasFlag(varDecl.varFlags, VarFlags.Ambient);\n        var isExported = hasFlag(varDecl.varFlags, VarFlags.Exported);\n        var isGlobal = context.scopeChain.container == context.checker.gloMod;\n        var isProperty = hasFlag(varDecl.varFlags, VarFlags.Property);\n        var isStatic = hasFlag(varDecl.varFlags, VarFlags.Static);\n        var isPrivate = hasFlag(varDecl.varFlags, VarFlags.Private);\n        var isOptional = hasFlag(varDecl.id.flags, ASTFlags.OptionalName);\n\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        if (isProperty ||\n            isExported ||\n            (context.scopeChain.container == context.checker.gloMod) ||\n            context.scopeChain.moduleDecl) {\n            if (isAmbient) {\n                var existingSym =\n                    <FieldSymbol>scopeChain.scope.findLocal(varDecl.id.text, false, false);\n                if (existingSym) {\n                    varDecl.sym = existingSym;\n                    return false;\n                }\n            }\n\n            // Defensive error detection...\n            if (varDecl.id == null) {\n                context.checker.errorReporter.simpleError(varDecl, "Expected variable identifier at this location");\n                return false;\n            }\n\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.id.minChar,\n         ';
var v27648 = v27649 + '                       context.checker.locationInfo.unitIndex,\n                                (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,\n                                field);\n            fieldSymbol.transferVarFlags(varDecl.varFlags);\n            if (isOptional) {\n                fieldSymbol.flags |= SymbolFlags.Optional;\n            }\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            if ((context.scopeChain.moduleDecl) ||\n                (context.scopeChain.container == context.checker.gloMod)) {\n                fieldSymbol.flags |= SymbolFlags.ModuleMember;\n                fieldSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n\n            // if it\'s static, enter it into the class\'s member list directly\n            if (hasFlag(varDecl.varFlags, VarFlags.Property) && isStatic && context.scopeChain.classType) {\n                if (!context.scopeChain.classType.members.publicMembers.add(varDecl.id.text, fieldSymbol)) {\n                    context.checker.errorReporter.duplicateIdentifier(ast, fieldSymbol.name);\n                }\n                fieldSymbol.container = context.scopeChain.classType.symbol;\n            }\n            else {\n                context.scopeChain.scope.enter(context.scopeChain.container,\n                                                ast,\n                                                fieldSymbol,\n                                                context.checker.errorReporter,\n                                                !isPrivate && (isProperty || isExported || isGlobal || isStatic),\n                                                false,\n                                                isAmbient);\n            }\n\n            if (hasFlag(varDecl.varFlags, VarFlags.Exported)) {\n                fieldSymbol.flags |= SymbolFlags.Exported;\n            }\n\n            field.typeLink = getTypeLink(varDecl.typeExpr, context.checker,\n                                        varDecl.init == null);\n            varDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectFuncDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        // REVIEW: This will have to change when we move to "export"\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n\n        var funcDecl = <FuncDecl>ast;\n        var fgSym: TypeSymbol = null;\n        var nameText = funcDecl.getNameText();\n        var isExported = hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported);\n        var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);\n        var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);\n        var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n        var containerSym:TypeSymbol = <TypeSymbol> (((funcDecl.isMethod() && isStatic) || funcDecl.isAccessor()) && context.scopeChain.classType ? context.scopeChain.classType.symbol : context.scopeChain.container);\n        var containerScope: SymbolScope = context.scopeChain.scope;\n        var isGlobal = containerSym == context.checker.gloMod;\n        var isOptional = funcDecl.name && hasFlag(funcDecl.name.flags, ASTFlags.OptionalName);\n        var go = false;\n        var foundSymbol = false; \n\n        // If this is a class constructor, the "container" is actually the class declaration\n        if (isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n            containerSym = <TypeSymbol>containerSym.container;\n            containerScope = scopeChain.previous.scope;\n        }\n\n        funcDecl.unitIndex = context.checker.locationInfo.unitIndex;\n        \n        // If the parent is the constructor, and this isn\'t an instance method, skip it.\n        // That way, we\'ll set the type during scope assignment, and can be sure that the\n        // function will be placed in the constructor-local scope\n        if (!funcDecl.isConstructor &&\n            containerSym &&\n            containerSym.declAST &&\n            containerSym.declAST.nodeType == NodeType.FuncDecl &&\n            (<FuncDecl>containerSym.declAST).isConstructor &&\n            !funcDecl.isMethod()) {\n            return go;\n        }        \n\n        // Interfaces and overloads\n        if (hasFlag(funcDecl.fncFlags, FncFlags.Signature)) {\n            var instType = context.scopeChain.thisType;                       \n\n            // If the function is static, search in the class type\'s\n            if (nameText && nameText != "__missing") {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    \n                 ';
var v27647 = v27648 + "   // If we could not find the function symbol in the value context, look\n                    // in the type context.\n                    // This would be the case, for example, if a class constructor override\n                    // were declared before a call override for a given class\n                    if (fgSym == null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, true);\n                    }\n                }\n                \n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    // We'll combine ambient and non-ambient funcdecls during typecheck (for contextual typing).,\n                    // So, if they don't agree, don't use the symbol we've found                    \n                    if (!funcDecl.isSignature() && (hasFlag(funcDecl.fncFlags, FncFlags.Ambient) != hasFlag(fgSym.flags, SymbolFlags.Ambient))) {\n                       fgSym = null;\n                    }\n                }                \n            }\n            \n            // a function with this symbol has not yet been declared in this scope\n            // REVIEW: In the code below, we need to ensure that only function overloads are considered\n            //  (E.g., if a vardecl has the same id as a function or class, we may use the vardecl symbol\n            //  as the overload.)  Defensively, however, the vardecl won't have a type yet, so it should\n            //  suffice to just check for a null type when considering the overload symbol in\n            //  createFunctionSignature\n            if (fgSym == null) {\n                if (!(funcDecl.isSpecialFn())) {                    \n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, null, !foundSymbol).declAST.type.symbol;\n                }\n                else {\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, containerSym, false).declAST.type.symbol;                                                                         \n                }\n                \n                // set the symbol's declAST, which will point back to the first declaration (symbol or otherwise)\n                // related to this symbol\n                if (fgSym.declAST == null || !funcDecl.isSpecialFn()) {\n                    fgSym.declAST = ast;\n                }\n            }\n            else { // there exists a symbol with this name\n                \n                if ((fgSym.kind() == SymbolKind.Type)) {\n\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, false).declAST.type.symbol;\n                }\n                else {\n                    context.checker.errorReporter.simpleError(funcDecl, \"Function or method '\" + funcDecl.name.actualText + \"' already declared as a property\");\n                }\n            }\n         \n            if (funcDecl.isSpecialFn() && !isStatic) {\n                funcDecl.type = instType ? instType : fgSym.type; \n            }\n            else {\n                funcDecl.type = fgSym.type;\n            }            \n        }\n        else {\n            // declarations\n            \n            if (nameText) {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // in the constructor case, we want to check the parent scope for overloads\n                    if (funcDecl.isConstructor && context.scopeChain.previous) {\n                        fgSym = <TypeSymbol>context.scopeChain.previous.scope.findLocal(nameText, false, false);\n                    }\n                    \n                    if (fgSym == null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    }\n                }\n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    if (!isConstructor && fgSym.declAST.nodeType == NodeType.FuncDecl && !(<FuncDecl>fgSym.declAST).isAccessor() && !(<FuncDecl>fgSym.declAST).isSignature()) {\n                        fgSym = null;\n                        foundSymbol = false;\n                    }\n                }                \n            }\n\n            // REVIEW: Move this check into the typecheck phase?  It's only being run over properties...\n            if (fgSym &&\n                !fgSym.isAccessor() &&\n                fgSym.type &&\n                fgSym.type.construct &&\n                fgSym.type.construct.signatures != [] &&\n                (fgSym.type.construct.signatures[0].declAST == null ||\n                    !hasFlag(fgSym.type.construct.signatures[0].declAST.fncFlags, FncFlags.Ambient)) &&\n                !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, \"Functions may not have class overloads\");\n            }\n\n   ";
var v27646 = v27647 + '         if (fgSym && !(fgSym.kind() == SymbolKind.Type) && funcDecl.isMethod() && !funcDecl.isAccessor() && !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, "Function or method \'" + funcDecl.name.actualText + "\' already declared as a property");\n                fgSym.type = context.checker.anyType;\n            }\n            var sig = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, !foundSymbol);\n\n            // it\'s a getter or setter function                                   \n            if (((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || (fgSym && fgSym.isAccessor())) {\n                funcDecl.accessorSymbol = context.checker.createAccessorSymbol(funcDecl, fgSym, containerSym.type, (funcDecl.isMethod() && isStatic), true, containerScope, containerSym);\n            }\n\n            funcDecl.type.symbol.declAST = ast;\n            if (funcDecl.isConstructor) { // REVIEW: Remove when classes completely replace oldclass\n                go = true;\n            };\n        }\n        if (isExported) {\n            if (funcDecl.type.call) {\n                funcDecl.type.symbol.flags |= SymbolFlags.Exported;\n            }\n            \n            // Accessors are set to \'exported\' above\n            if (fgSym && !fgSym.isAccessor() && fgSym.kind() == SymbolKind.Type && fgSym.type.call) {\n                fgSym.flags |= SymbolFlags.Exported;\n            }\n        }\n        if (context.scopeChain.moduleDecl && !funcDecl.isSpecialFn()) {\n            funcDecl.type.symbol.flags |= SymbolFlags.ModuleMember;\n            funcDecl.type.symbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        if (fgSym && isOptional) {\n            fgSym.flags |= SymbolFlags.Optional;\n        }\n\n        return go;\n    }\n\n    export function preCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n        var go = false;\n        var scopeChain = context.scopeChain;\n\n        if (ast.nodeType == NodeType.Script) {\n            var script: Script = <Script>ast;\n            context.script = script;\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.List) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.ImportDeclaration) {\n            go = preCollectImportTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.With) {\n            go = false;\n        }\n        else if (ast.nodeType == NodeType.ModuleDeclaration) {\n            go = preCollectModuleTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            go = preCollectClassTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.Block) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            go = preCollectInterfaceTypes(ast, parent, context);\n        }\n        // This will be a constructor arg because this pass only traverses\n        // constructor arg lists\n        else if (ast.nodeType == NodeType.ArgDecl) {\n            go = preCollectArgDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.VarDecl) {\n            go = preCollectVarDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType == NodeType.FuncDecl) {\n            go = preCollectFuncDeclTypes(ast, parent, context);\n        }\n        else {\n            if (ast.isStatementOrExpression() && context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n\n        if (ast.nodeType == NodeType.ModuleDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        return ast;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ScopeChain {\n        ';
var v27645 = v27646 + "public thisType: Type;\n        public classType: Type;\n        public fnc: FuncDecl;\n        public moduleDecl: ModuleDeclaration;\n\n        constructor (public container: Symbol, public previous: ScopeChain,\n                     public scope: SymbolScope) { }\n    }\n\n    export class BBUseDefInfo {\n        public defsBySymbol = new bool[];\n        public gen: BitVector;\n        public kill: BitVector;\n        public top: BitVector;\n        // use lists by symbol \n        public useIndexBySymbol = new number[][];\n\n        constructor (public bb: BasicBlock) { }\n\n        public updateTop() {\n            var temp = new BitVector(this.top.bitCount);\n            for (var i = 0, succLen = this.bb.successors.length; i < succLen; i++) {\n                var succ = this.bb.successors[i];\n                if (succ.useDef) {\n                    temp.union(succ.useDef.top);\n                }\n            }\n            temp.difference(this.kill);\n            temp.union(this.gen);\n            var changed = temp.notEq(this.top);\n            this.top = temp;\n            return changed;\n        }\n\n\n        public initialize(useDefContext: UseDefContext) {\n            var defSym = (sym: Symbol, context: UseDefContext) => {\n                if (context.isLocalSym(sym)) {\n                    var index = context.getSymbolIndex(sym);\n                    // clear pending uses\n                    this.useIndexBySymbol[index] = new number[];\n                    this.defsBySymbol[index] = true;\n                }\n            }\n\n            var useSym = (sym: Symbol, context: UseDefContext, ast: AST) => {\n                if (context.isLocalSym(sym)) {\n                    var symIndex = context.getSymbolIndex(sym);\n                    if (this.useIndexBySymbol[symIndex] == undefined) {\n                        this.useIndexBySymbol[symIndex] = new number[];\n                    }\n                    var symUses = this.useIndexBySymbol[symIndex];\n                    var astIndex = context.getUseIndex(ast);\n                    context.addUse(symIndex, astIndex);\n                    symUses.push(astIndex);\n                }\n            }\n\n            function initUseDefPre(cur: AST, parent: AST, walker: IAstWalker) {\n                var context: UseDefContext = walker.state;\n                if (cur == null) {\n                    cur = null;\n                }\n                if (cur.nodeType == NodeType.VarDecl) {\n                    var varDecl = <BoundDecl>cur;\n                    if (varDecl.init || hasFlag(varDecl.varFlags, VarFlags.AutoInit)) {\n                        defSym(varDecl.sym, context);\n                    }\n                }\n                else if (cur.nodeType == NodeType.Name) {\n                    // use\n                    if (parent) {\n                        if (parent.nodeType == NodeType.Asg) {\n                            var asg = <BinaryExpression>parent;\n                            if (asg.operand1 == cur) {\n                                return cur;\n                            }\n                        }\n                        else if (parent.nodeType == NodeType.VarDecl) {\n                            var parentDecl = <BoundDecl>parent;\n                            if (parentDecl.id == cur) {\n                                return cur;\n                            }\n                        }\n                    }\n                    var id = <Identifier>cur;\n                    useSym(id.sym, context, cur);\n                }\n                else if ((cur.nodeType >= NodeType.Asg) && (cur.nodeType <= NodeType.LastAsg)) {\n                    // def\n                    var asg = <BinaryExpression>cur;\n                    if (asg.operand1 && (asg.operand1.nodeType == NodeType.Name)) {\n                        var id = <Identifier>asg.operand1;\n                        defSym(id.sym, context);\n                    }\n                }\n                else if (cur.nodeType == NodeType.FuncDecl) {\n                    walker.options.goChildren = false;\n                }\n\n                return cur;\n            }\n\n            var options = new AstWalkOptions();\n            // traverse ASTs in reverse order of execution (to match uses with preceding defs)\n            options.reverseSiblings = true;\n\n            getAstWalkerFactory().walk(this.bb.content, initUseDefPre, null, options, useDefContext);\n        }\n\n        public initializeGen(useDefContext: UseDefContext) {\n            var symbolLen = this.useIndexBySymbol.length;\n            var bitCount = useDefContext.uses.length;\n            this.gen = new BitVector(bitCount);\n            for (var s = 0; s < symbolLen; s++) {\n                var symUses = this.useIndexBySymbol[s];\n                if ((symUses != undefined) && (symUses.length > 0)) {\n                    for (var u = 0, uLen = symUses.length; u < uLen; u++) {\n                        this.gen.set(symUses[u], true);\n                    }\n                }\n            }\n            this.top = this.gen;\n        }\n\n     ";
var v27644 = v27645 + "   public initializeKill(useDefContext: UseDefContext) {\n            this.kill = new BitVector(this.gen.bitCount);\n            for (var s = 0, symbolLen = this.defsBySymbol.length; s < symbolLen; s++) {\n                if (this.defsBySymbol[s]) {\n                    var globalSymUses = useDefContext.useIndexBySymbol[s];\n                    if (globalSymUses) {\n                        for (var u = 0, useLen = globalSymUses.length; u < useLen; u++) {\n                            this.kill.set(globalSymUses[u], true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    export class UseDefContext {\n        // global use lists by symbol\n        public useIndexBySymbol = new number[][];\n        // global list of uses (flat)\n        public uses = new AST[];\n        public symbols = new VariableSymbol[];\n        public symbolMap = new StringHashTable();\n        public symbolCount = 0;\n        public func: Symbol;\n\n        constructor () {\n        }\n\n        public getSymbolIndex(sym: Symbol) {\n            var name = sym.name;\n            var index = <number>(this.symbolMap.lookup(name));\n            if (index == null) {\n                index = this.symbolCount++;\n                this.symbols[index] = <VariableSymbol>sym;\n                this.symbolMap.add(name, index);\n            }\n            return index;\n        }\n\n        public addUse(symIndex: number, astIndex: number) {\n            var useBySym = this.useIndexBySymbol[symIndex];\n            if (useBySym == undefined) {\n                useBySym = new number[];\n                this.useIndexBySymbol[symIndex] = useBySym;\n            }\n            useBySym[useBySym.length] = astIndex;\n        }\n\n        public getUseIndex(ast: AST) {\n            this.uses[this.uses.length] = ast;\n            return this.uses.length - 1;\n        }\n\n        public isLocalSym(sym: Symbol) { return (sym && (sym.container == this.func) && (sym.kind() == SymbolKind.Variable)); }\n\n        public killSymbol(sym: VariableSymbol, bbUses: BitVector) {\n            var index: number = this.symbolMap.lookup(sym.name);\n            var usesOfSym = this.useIndexBySymbol[index];\n            for (var k = 0, len = usesOfSym.length; k < len; k++) {\n                bbUses.set(usesOfSym[k], true);\n            }\n        }\n    }\n\n    export class BitVector {\n        static packBits = 30;\n        public firstBits = 0;\n        public restOfBits: number[] = null;\n\n        constructor (public bitCount: number) {\n            if (this.bitCount > BitVector.packBits) {\n                this.restOfBits = new number[];\n                var len = Math.floor(this.bitCount / BitVector.packBits);\n                for (var i = 0; i < len; i++) {\n                    this.restOfBits[i] = 0;\n                }\n            }\n        }\n\n        public set(bitIndex: number, value: bool) {\n            if (bitIndex < BitVector.packBits) {\n                if (value) {\n                    this.firstBits |= (1 << bitIndex);\n                }\n                else {\n                    this.firstBits &= (~(1 << bitIndex));\n                }\n            }\n            else {\n                var offset = Math.floor(bitIndex / BitVector.packBits) - 1;\n                var localIndex = bitIndex % BitVector.packBits;\n                if (value) {\n                    this.restOfBits[offset] |= (1 << localIndex);\n                }\n                else {\n                    this.restOfBits[offset] &= (~(1 << localIndex));\n                }\n            }\n        }\n\n        public map(fn: (index: number) =>any) {\n            var k: number;\n            for (k = 0; k < BitVector.packBits; k++) {\n                if (k == this.bitCount) {\n                    return;\n                }\n                if (((1 << k) & this.firstBits) != 0) {\n                    fn(k);\n                }\n            }\n            if (this.restOfBits) {\n                var len: number;\n                var cumu = BitVector.packBits;\n                for (k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    for (var j = 0; j < BitVector.packBits; j++) {\n                        if (((1 << j) & myBits) != 0) {\n                            fn(cumu);\n                        }\n                        cumu++;\n                        if (cumu == this.bitCount) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public union(b: BitVector) {\n            this.firstBits |= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits | bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public interse";
var v27643 = v27644 + 'ction(b: BitVector) {\n            this.firstBits &= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits & bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public notEq(b: BitVector) {\n            if (this.firstBits != b.firstBits) {\n                return true;\n            }\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    if (myBits != bBits) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public difference(b: BitVector) {\n            var oldFirstBits = this.firstBits;\n            this.firstBits &= (~b.firstBits);\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] &= (~bBits);\n                }\n            }\n        }\n    }\n\n    export class BasicBlock {\n        // blocks that branch to the block after this one\n        public predecessors = new BasicBlock[];\n        public index = -1;\n        public markValue = 0;\n        public marked(markBase: number) { return this.markValue > markBase; }\n        public mark() {\n            this.markValue++;\n        }\n        public successors = new BasicBlock[];\n        public useDef: BBUseDefInfo = null;\n        public content = new ASTList();\n        public addSuccessor(successor: BasicBlock): void {\n            this.successors[this.successors.length] = successor;\n            successor.predecessors[successor.predecessors.length] = this;\n        }\n    }\n\n    export interface ITargetInfo {\n        stmt: AST;\n        continueBB: BasicBlock;\n        breakBB: BasicBlock;\n    }\n\n    export class ControlFlowContext {\n        public entry = null;\n        // first unreachable ast for each unreachable code segment\n        public unreachable: AST[] = null;\n        public noContinuation = false;\n        // statements enclosing the current statement\n        public statementStack = new ITargetInfo[];\n        public currentSwitch = new BasicBlock[];\n        public walker: IAstWalker;\n\n        constructor (public current: BasicBlock,\n                     public exit: BasicBlock) {\n            this.entry = this.current;\n        }\n\n        public walk(ast: AST, parent: AST) {\n            return this.walker.walk(ast, parent);\n        }\n\n        public pushSwitch(bb: BasicBlock) {\n            this.currentSwitch.push(bb);\n        }\n\n        public popSwitch() {\n            return this.currentSwitch.pop();\n        }\n\n        public reportUnreachable(er: ErrorReporter) {\n            if (this.unreachable && (this.unreachable.length > 0)) {\n                var len = this.unreachable.length;\n                for (var i = 0; i < len; i++) {\n                    var unreachableAST = this.unreachable[i];\n                    if (unreachableAST.nodeType != NodeType.EndCode) {\n                        er.simpleError(unreachableAST, "unreachable code");\n                    }\n                }\n            }\n        }\n\n        private printAST(ast: AST, outfile: ITextWriter) {\n            var printContext = new PrintContext(outfile, null);\n\n            printContext.increaseIndent();\n            //ast.walk(prePrintAST, postPrintAST, null, printContext);\n            getAstWalkerFactory().walk(ast, prePrintAST, postPrintAST, null, printContext);\n\n            printContext.decreaseIndent();\n        }\n\n        private printBlockContent(bb: BasicBlock, outfile: ITextWriter) {\n            var content = bb.content;\n            for (var i = 0, len = content.members.length; i < len; i++) {\n                var ast = content.members[i];\n                this.printAST(ast, outfile);\n            }\n        }\n\n        public markBase = 0;\n\n        public bfs(nodeFunc: (bb: BasicBlock) =>void , edgeFunc: (node1: BasicBlock, node2: BasicBlock) =>void ,\n            preEdges: () =>void , postEdges: () =>void ) {\n            var markValue = this.markBase++;\n            var q = new BasicBlock[];\n            q[q.length] = this.entry;\n\n            while (q.length > 0) {\n                var bb = q.pop();\n                if (!(bb.marked(markValue))) {\n                    bb.mark();\n                    if (nodeFunc) {\n                        nodeFunc(bb);\n                    }\n                    var succLen = bb.successors.length;\n                    if (succLen > 0) {\n                        if (preEdges) {\n                            preEdges();\n                        }\n                        for';
var v27642 = v27643 + ' (var j = succLen - 1; j >= 0; j--) {\n                            var successor = bb.successors[j];\n                            if (!(successor.marked(this.markBase))) {\n                                if (edgeFunc) {\n                                    edgeFunc(bb, successor);\n                                }\n                                q[q.length] = successor;\n                            }\n                        }\n                        if (postEdges) {\n                            postEdges();\n                        }\n                    }\n                }\n            }\n        }\n\n        public linearBBs = new BasicBlock[];\n\n        public useDef(er: ErrorReporter, funcSym: Symbol) {\n            var useDefContext = new UseDefContext();\n            useDefContext.func = funcSym;\n            var useDefInit = (bb: BasicBlock) => {\n                bb.useDef = new BBUseDefInfo(bb);\n                bb.useDef.initialize(useDefContext);\n                this.linearBBs[this.linearBBs.length] = bb;\n            }\n            this.bfs(useDefInit, null, null, null);\n            var i: number, bbLen: number;\n            for (i = 0, bbLen = this.linearBBs.length; i < bbLen; i++) {\n                this.linearBBs[i].useDef.initializeGen(useDefContext);\n                this.linearBBs[i].useDef.initializeKill(useDefContext);\n            }\n            var changed = true;\n\n            while (changed) {\n                changed = false;\n                for (i = 0; i < bbLen; i++) {\n                    changed = this.linearBBs[i].useDef.updateTop() || changed;\n                }\n            }\n\n            var top = this.entry.useDef.top;\n            top.map((index) => {\n                var ast = <Identifier>useDefContext.uses[<number>index];\n                er.simpleError(ast, "use of variable \'" + ast.actualText + "\' that is not definitely assigned");\n            });\n        }\n\n        public print(outfile: ITextWriter) {\n            var index = 0;\n            var node = (bb: BasicBlock) => {\n                if (bb.index < 0) {\n                    bb.index = index++;\n                }\n                if (bb == this.exit) {\n                    outfile.WriteLine("Exit block with index " + bb.index);\n                }\n                else {\n                    outfile.WriteLine("Basic block with index " + bb.index);\n                    this.printBlockContent(bb, outfile);\n                }\n            }\n\n            function preEdges() {\n                outfile.Write("  Branches to ");\n            }\n\n            function postEdges() {\n                outfile.WriteLine("");\n            }\n\n            function edge(node1: BasicBlock, node2: BasicBlock) {\n                if (node2.index < 0) {\n                    node2.index = index++;\n                }\n                outfile.Write(node2.index + " ");\n            }\n\n            this.bfs(node, edge, preEdges, postEdges);\n            if (this.unreachable != null) {\n                for (var i = 0, len = this.unreachable.length; i < len; i++) {\n                    outfile.WriteLine("Unreachable basic block ...");\n                    this.printAST(this.unreachable[i], outfile);\n                }\n            }\n        }\n\n        public pushStatement(stmt: Statement, continueBB: BasicBlock, breakBB: BasicBlock) {\n            this.statementStack.push({ stmt: stmt, continueBB: continueBB, breakBB: breakBB });\n        }\n\n        public popStatement() { return this.statementStack.pop(); }\n\n        public returnStmt() {\n            // TODO: make successor finally block if return stmt inside of try/finally \n            this.current.addSuccessor(this.exit);\n            this.setUnreachable();\n        }\n\n        public setUnreachable() {\n            this.current = null;\n            this.noContinuation = true;\n        }\n\n        public addUnreachable(ast: AST) {\n            if (this.unreachable === null) {\n                this.unreachable = new AST[];\n            }\n            this.unreachable[this.unreachable.length] = ast;\n        }\n\n        public unconditionalBranch(target: AST, isContinue: bool) {\n            var targetBB = null;\n            for (var i = 0, len = this.statementStack.length; i < len; i++) {\n                var targetInfo = this.statementStack[i];\n                if (targetInfo.stmt == target) {\n                    if (isContinue) {\n                        targetBB = targetInfo.continueBB;\n                    }\n                    else {\n                        targetBB = targetInfo.breakBB;\n                    }\n                    break;\n                }\n            }\n            if (targetBB) {\n                this.current.addSuccessor(targetBB);\n            }\n            this.setUnreachable();\n        }\n\n        public addContent(ast: AST): void {\n            if (this.current) {\n                this.current.content.append(ast);\n            }\n        }\n    }\n\n    export interface IResolutionData {\n        actuals: Type[];\n        exactCandidates: Signature[];\n        c';
var v27641 = v27642 + 'onversionCandidates: Signature[];\n        id: number;\n    }\n\n    export class ResolutionDataCache {\n        public cacheSize = 16;\n        public rdCache: IResolutionData[] = [];\n        public nextUp: number = 0;\n\n        constructor () {\n            for (var i = 0; i < this.cacheSize; i++) {\n                this.rdCache[i] = {\n                    actuals: new Type[],\n                    exactCandidates: new Signature[],\n                    conversionCandidates: new Signature[],\n                    id: i\n                };\n            }\n        }\n\n        public getResolutionData(): IResolutionData {\n            var rd: IResolutionData = null;\n\n            if (this.nextUp < this.cacheSize) {\n                rd = this.rdCache[this.nextUp];\n            }\n\n            if (rd == null) {\n                this.cacheSize++;\n                rd = {\n                    actuals: new Type[],\n                    exactCandidates: new Signature[],\n                    conversionCandidates: new Signature[],\n                    id: this.cacheSize\n                };\n                this.rdCache[this.cacheSize] = rd;\n            }\n\n            // cache operates as a stack - RD is always served up in-order\n            this.nextUp++;\n\n            return rd;\n        }\n\n        public returnResolutionData(rd: IResolutionData) {\n            // Pop to save on array allocations, which are a bottleneck\n            // REVIEW: On some VMs, Array.pop doesn\'t always pop the last value in the array\n            rd.actuals.length = 0;\n            rd.exactCandidates.length = 0;\n            rd.conversionCandidates.length = 0;\n\n            this.nextUp = rd.id;\n        }\n    }\n\n    export class TypeFlow {\n        public scope: SymbolScope;\n        public globalScope: SymbolScope;\n\n        public thisType: Type;\n        public thisFnc: FuncDecl = null;\n        public thisClassNode: TypeDeclaration = null;\n        public enclosingFncIsMethod = false;\n\n        // REVIEW: Prune in favor of typechecker fields\n        public doubleType: Type;\n        public booleanType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public regexType: Type;\n        public nullType: Type;\n        public voidType: Type;\n        public arrayAnyType: Type;\n\n        public arrayInterfaceType: Type = null;\n        public stringInterfaceType: Type = null;\n        public objectInterfaceType: Type = null;\n        public functionInterfaceType: Type = null;\n        public numberInterfaceType: Type = null;\n        public booleanInterfaceType: Type = null;\n        public iargumentsInterfaceType: Type = null;\n\n        public currentScript: Script = null;\n\n        public inImportTypeCheck = false;\n        public inTypeRefTypeCheck = false;\n        public inArrayElementTypeCheck = false;\n        public resolutionDataCache = new ResolutionDataCache();\n        public nestingLevel = 0;\n        public inSuperCall = false;\n\n        constructor (public logger: ILogger, public initScope: SymbolScope, public parser: Parser,\n                   public checker: TypeChecker) {\n            this.checker.typeFlow = this;\n            this.scope = this.initScope;\n            this.globalScope = this.initScope;\n            this.doubleType = this.checker.numberType;\n            this.booleanType = this.checker.booleanType;\n            this.stringType = this.checker.stringType;\n            this.anyType = this.checker.anyType;\n            this.regexType = this.anyType;\n            this.nullType = this.checker.nullType;\n            this.voidType = this.checker.voidType;\n            this.arrayAnyType = this.checker.makeArrayType(this.anyType);\n        }\n\n        public initLibs() {\n            var arraySym = this.globalScope.find("Array", false, true);\n            if (arraySym && (arraySym.kind() == SymbolKind.Type)) {\n                this.arrayInterfaceType = (<TypeSymbol>arraySym).type;\n            }\n            var stringSym = this.globalScope.find("String", false, true);\n            if (stringSym && (stringSym.kind() == SymbolKind.Type)) {\n                this.stringInterfaceType = (<TypeSymbol>stringSym).type;\n            }\n            var objectSym = this.globalScope.find("Object", false, true);\n            if (objectSym && (objectSym.kind() == SymbolKind.Type)) {\n                this.objectInterfaceType = (<TypeSymbol>objectSym).type;\n            }\n            var fnSym = this.globalScope.find("Function", false, true);\n            if (fnSym && (fnSym.kind() == SymbolKind.Type)) {\n                this.functionInterfaceType = (<TypeSymbol>fnSym).type;\n            }\n            var numberSym = this.globalScope.find("Number", false, true);\n            if (numberSym && (numberSym.kind() == SymbolKind.Type)) {\n                this.numberInterfaceType = (<TypeSymbol>numberSym).type;\n            }\n            var booleanSym = this.globalScope.find("Boolean", false, true);\n            if (booleanSym && (booleanSym.kind() == SymbolKind.Type)) {\n                this.booleanInterfaceT';
var v27640 = v27641 + 'ype = (<TypeSymbol>booleanSym).type;\n            }\n            var regexSym = this.globalScope.find("RegExp", false, true);\n            if (regexSym && (regexSym.kind() == SymbolKind.Type)) {\n                this.regexType = (<TypeSymbol>regexSym).type;\n            }\n        }\n\n        public cast(ast: AST, type: Type): AST {\n            return this.castWithCoercion(ast, type, true, false);\n        }\n\n        public castWithCoercion(ast: AST, type: Type, applyCoercion: bool, typeAssertion: bool): AST {\n            var comparisonInfo = new TypeComparisonInfo();\n            if (this.checker.sourceIsAssignableToTarget(ast.type, type, comparisonInfo) || (typeAssertion && this.checker.sourceIsAssignableToTarget(type, ast.type, comparisonInfo))) {\n                if (applyCoercion) {\n                    if (type == null) {\n                        ast.type = this.anyType;\n                    }\n                    else if (type.isClass()) {\n                        ast.type = type.instanceType;\n                    }\n                    else {\n                        ast.type = type;\n                    }\n                }\n                return ast;\n            }\n            else {\n                this.checker.errorReporter.incompatibleTypes(ast, ast.type, type, null, this.scope, comparisonInfo);\n                return ast;\n            }\n        }\n\n        public inScopeTypeCheck(ast: AST, enclosingScope: SymbolScope): AST {\n            var prevScope = this.scope;\n            this.scope = enclosingScope;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var svThisClassNode = this.thisClassNode;\n            var svCurrentModDecl = this.checker.currentModDecl;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var container = this.scope.container;\n            var fnc: FuncDecl = null;\n            while (container) {\n                if (container.kind() == SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>container;\n                    var type = typeSym.type;\n                    if (type.call) {\n                        if (fnc == null) {\n                            // use innermost function\n                            this.enclosingFncIsMethod = typeSym.isMethod;\n                            fnc = <FuncDecl>container.declAST;\n                        }\n                    }\n                    if (type.isClass()) {\n                        this.thisType = type.instanceType;\n                        if (typeSym.declAST &&\n                            (typeSym.declAST.nodeType == NodeType.ClassDeclaration)) {\n                            this.thisClassNode = <TypeDeclaration>typeSym.declAST;\n                        }\n                        // use innermost class\n                        break;\n                    }\n                    if (type.isModuleType()) {\n                        this.checker.currentModDecl = <ModuleDeclaration>typeSym.declAST;\n                        // use innermost module\n                        break;\n                    }\n                }\n                container = container.container;\n            }\n            this.thisFnc = fnc;\n\n            var updated = this.typeCheck(ast);\n\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.thisClassNode = svThisClassNode;\n            this.checker.currentModDecl = svCurrentModDecl;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.scope = prevScope;\n            return updated;\n        }\n\n        public typeCheck(ast: AST): AST {\n            if (ast) {\n                return ast.typeCheck(this);\n            }\n            else {\n                return null;\n            }\n        }\n\n        public inScopeTypeCheckDecl(ast: AST) {\n            if (ast.nodeType == NodeType.VarDecl || ast.nodeType == NodeType.ArgDecl) {\n                this.inScopeTypeCheckBoundDecl(<BoundDecl>ast);\n            }\n            else if (ast.nodeType == NodeType.FuncDecl) {\n\n                var funcDecl = <FuncDecl>ast;\n\n                if (funcDecl.isAccessor()) {\n                    this.typeCheckFunction(funcDecl);\n                }\n            }\n        }\n\n        public inScopeTypeCheckBoundDecl(varDecl: BoundDecl) {\n            var sym = varDecl.sym;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevLocationInfo = this.checker.locationInfo;\n            if (sym && sym.container) {\n                var instanceScope = hasFlag(varDecl.varFlags, VarFlags.ClassConstructorProperty) ? sym.container.getType().constructorScope : sym.container.instanceScope();\n                if (hasFlag(varDecl.varFlags, VarFlags.Property) && sym.container.declAST.nodeType == NodeType.FuncDecl) {\n                    this.thisFnc = <FuncDecl>sym.container.declAST;\n                }\n                if (instanceScope) {\n                    var';
var v27639 = v27640 + " prevScope = this.scope;\n                    this.scope = instanceScope;\n                    var container = sym.container;\n                    var svCurrentModDecl = this.checker.currentModDecl;\n                    if (this.checker.units &&\n                        (sym.unitIndex >= 0) &&\n                        (sym.unitIndex < this.checker.units.length)) {\n                        this.checker.locationInfo = this.checker.units[sym.unitIndex];\n                    }\n                    else {\n                        this.checker.locationInfo = unknownLocationInfo;\n                    }\n                    // REVIEW: container linkage for function expressions\n                    while (container) {\n                        if (container.kind() == SymbolKind.Type) {\n                            var typeSym = <TypeSymbol>container;\n                            var type = typeSym.type;\n                            if (type.call) {\n                                this.enclosingFncIsMethod = typeSym.isMethod;\n                            }\n                            if (type.isClass()) {\n                                this.thisType = type.instanceType;\n                            }\n                            if (type.isModuleType()) {\n                                this.checker.currentModDecl = <ModuleDeclaration>container.declAST;\n                                break;\n                            }\n                        }\n                        container = container.container;\n                    }\n\n                    this.typeCheckBoundDecl(varDecl);\n                    this.checker.currentModDecl = svCurrentModDecl;\n                    this.scope = prevScope;\n                }\n            }\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.enclosingFncIsMethod = prevMethodStatus;\n        }\n\n        public resolveBoundDecl(varDecl: BoundDecl) {\n            if (varDecl.typeExpr) {\n                if (varDecl.typeExpr.type == null ||\n                    (varDecl.typeExpr.type && varDecl.typeExpr.type == this.anyType && this.scope) ||\n                    varDecl.typeExpr.type.symbol == null ||\n                    !this.checker.typeStatusIsFinished(varDecl.typeExpr.type.symbol.typeCheckStatus)) {\n                    this.typeCheck(varDecl.typeExpr);\n                }\n                varDecl.type = varDecl.typeExpr.type;\n                if (varDecl.sym) {\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n            else if (varDecl.init == null) {\n                if (this.checker.styleSettings.implicitAny) {\n                    this.checker.errorReporter.styleError(varDecl, \"type implicitly set to 'any'\");\n                }\n                varDecl.type = this.anyType;\n                if (varDecl.sym) {\n                    if (varDecl.sym.isType()) {\n                        var tsym = <TypeSymbol>varDecl.sym;\n                        if (tsym.isMethod) {\n                            this.checker.errorReporter.simpleError(varDecl, \"Cannot bind method group to variable.  (Did you mean to use 'declare function' instead of 'declare var'?)\");\n                            return;\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(varDecl, \"Cannot bind type to variable\");\n                            return;\n                        }\n                    }\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n        }\n\n        public typeCheckBoundDecl(varDecl: BoundDecl): VarDecl {\n            // symbol has already been added to the scope\n            var infSym = <InferenceSymbol>varDecl.sym;\n            if (infSym == null) {\n                if (varDecl.init) {\n                    varDecl.init = this.typeCheck(varDecl.init);\n                    varDecl.type = this.checker.widenType(varDecl.init.type);\n                }\n                else {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, \"type implicitly set to 'any'\");\n                    }\n                    varDecl.type = this.anyType;\n                }\n            }\n            else {\n                if (infSym.typeCheckStatus == TypeCheckStatus.Started) {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, \"type implicitly set to 'any'\");\n                    }\n                    varDecl.type = this.anyType;\n                    infSym.setType(this.anyType);\n                }\n                else if (infSym.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                    infSym.typeCheckStatus = TypeCheckStatus.Started;\n                    this.checker.addStartedPTO(infSym);\n                    var resolved = false;\n                    if (varDecl.type";
var v27638 = v27639 + " == null) {\n                        // propagate declared type\n                        if (varDecl.typeExpr) {\n                            this.resolveBoundDecl(varDecl);\n                            resolved = true;\n                            varDecl.type = varDecl.typeExpr.type;\n                            infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        }\n                    }\n\n                    if (varDecl.init) {\n                        // if the bound decl is a function-local static, we need to set the\n                        // encapsulating scope to the function's member scope\n                        var isLocalStatic = hasFlag(varDecl.varFlags, VarFlags.LocalStatic);\n                        var prevScope = this.scope;\n                        var applyTargetType = !varDecl.init.isParenthesized;\n                        if (isLocalStatic) {\n                            this.scope = varDecl.sym.container.getType().memberScope;\n                        }\n\n                        // Mark Lambda expressions with IsPropertyBound flag\n                        if (hasFlag(varDecl.varFlags, VarFlags.Property) && this.thisClassNode) {\n                            getAstWalkerFactory().walk(varDecl.init, (ast: AST, parent: AST, walker: IAstWalker) => {\n                                if (ast && ast.nodeType == NodeType.FuncDecl) {\n                                    if (hasFlag((<FuncDecl>ast).fncFlags, FncFlags.IsFatArrowFunction)) {\n                                        // Found a Lambda, mark it\n                                        (<FuncDecl>ast).fncFlags |= FncFlags.IsPropertyBound;\n                                    }\n                                    // Only mark the top level functions\n                                    walker.options.goChildren = false;\n                                }\n                                return ast;\n                            });\n                        }\n\n                        this.checker.typeCheckWithContextualType(varDecl.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, varDecl.init);\n\n                        this.scope = prevScope;\n                        if (varDecl.type) {\n                            // If the cast is to a target type, in the case of a funcdecl,\n                            // we may overwrite the init's type with one generated from a signature.\n                            // In that case, we need to preserve the contained scope of the actual decl\n                            var preserveScope = false;\n                            var preservedContainedScope = null;\n\n                            if (varDecl.init.type) {\n                                preservedContainedScope = varDecl.init.type.containedScope;\n                                preserveScope = true;\n                                if (varDecl.init.type == this.voidType) {\n                                    this.checker.errorReporter.simpleError(varDecl, \"Cannot assign type 'void' to variable '\" + varDecl.id.actualText + \"'\");\n                                }\n                            }\n\n                            varDecl.init = this.castWithCoercion(varDecl.init, varDecl.type, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n\n                            if (preserveScope && varDecl.init.type.containedScope == null) {\n                                varDecl.init.type.containedScope = preservedContainedScope;\n                            }\n                        }\n                        else {\n                            varDecl.type = this.checker.widenType(varDecl.init.type);\n                            if (varDecl.type == this.voidType) {\n                                this.checker.errorReporter.simpleError(varDecl, \"Cannot assign type 'void' to variable '\" + varDecl.id.actualText + \"'\");\n                                varDecl.type = this.anyType;\n                            }\n                        }\n                        infSym.setType(varDecl.type);\n                    }\n                    else {\n                        if (!resolved) {\n                            this.resolveBoundDecl(varDecl);\n                        }\n                    }\n                    infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                }\n                else if (this.checker.typeStatusIsFinished(infSym.typeCheckStatus) &&\n                         (infSym.declAST != varDecl)) {\n                    if (varDecl.init) {\n                        varDecl.init = this.typeCheck(varDecl.init);\n                        varDecl.type = infSym.getType();\n                        varDecl.init = this.cast(varDecl.init, varDecl.type);\n                    }\n                }\n            }\n            if (varDecl.id && varDecl.sym) {\n                varDecl.id.sym = varDecl.sym;\n            }\n\n            // Check if variable satisfies type privacy\n            if (varDecl.sym && varDecl.sym.con";
var v27637 = v27638 + 'tainer) {\n                this.checkTypePrivacy(varDecl.sym.getType(), varDecl.sym, (typeName: string, isModuleName: bool) => this.varPrivacyErrorReporter(varDecl, typeName, isModuleName));\n            }\n            return <VarDecl>varDecl;\n        }\n\n        private varPrivacyErrorReporter(varDecl: BoundDecl, typeName: string, isModuleName: bool) {\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n\n            if (hasFlag(varDecl.varFlags, VarFlags.Public)) {\n                if (varDecl.sym.container.declAST.nodeType == NodeType.InterfaceDeclaration) {\n                    this.checker.errorReporter.simpleError(varDecl, "property \'" + varDecl.sym.name + "\' of exported interface" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(varDecl, "public member \'" + varDecl.sym.name + "\' of exported class" + typestring);\n                }\n            } else {\n                this.checker.errorReporter.simpleError(varDecl, "exported variable \'" + varDecl.sym.name + "\'" + typestring);\n            }\n        }\n\n        public typeCheckSuper(ast: AST): AST {\n            if (this.thisType && (this.enclosingFncIsMethod && !this.thisFnc.isStatic()) && this.thisType.baseClass()) {\n                ast.type = this.thisType.baseClass();\n            }\n            else {\n                // redirect \'super\' used within lambdas\n                if (!this.enclosingFncIsMethod &&\n                    this.thisType && this.thisType.baseClass() &&\n                    this.thisFnc && hasFlag(this.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n                    // Find the closest non lambda function\n                    var enclosingFnc = this.thisFnc.enclosingFnc;\n                    while (hasFlag(enclosingFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n                        enclosingFnc = enclosingFnc.enclosingFnc;\n                    }\n\n                    // If the lambda is enclosed is a valid member, use the base type\n                    if (enclosingFnc && (enclosingFnc.isMethod() || enclosingFnc.isConstructor) && !enclosingFnc.isStatic()) {\n                        ast.type = this.thisType.baseClass();\n                        enclosingFnc.setHasSuperReferenceInFatArrowFunction();\n                        return ast;\n                    }\n                }\n\n                ast.type = this.anyType;\n                this.checker.errorReporter.invalidSuperReference(ast);\n            }\n            return ast;\n        }\n\n        public typeCheckThis(ast: AST): AST {\n           ast.type = this.anyType;\n            var illegalThisRef = false;\n            if (this.thisFnc == null) {\n                // \'this\' in class bodies should bind to \'any\'\n                if (this.thisType) {\n                    if (this.thisClassNode && this.thisClassNode.nodeType == NodeType.ClassDeclaration) {\n                        illegalThisRef = true;\n                    }\n                    else {\n                        ast.type = this.thisType;\n                    }\n                }\n                else if (this.checker.currentModDecl) {\n                    this.checker.errorReporter.simpleError(ast, "\'this\' may not be referenced within module bodies");\n                }\n            }\n            else {\n                if (this.thisClassNode && (hasFlag(this.thisFnc.fncFlags, FncFlags.IsPropertyBound) || (this.inSuperCall && hasFlag((<ClassDeclaration>this.thisClassNode).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor)))) {\n                    illegalThisRef = true;\n                }\n                if (this.thisFnc.isMethod() || this.thisFnc.isConstructor || this.thisFnc.isTargetTypedAsMethod) {\n                    if (this.thisType && !(this.thisFnc.fncFlags & FncFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            // redirect \'this\' used within lambdas\n            if (!this.enclosingFncIsMethod &&\n                this.thisFnc &&\n                hasFlag(this.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) {\n\n                    // if the enclosing function was bound to a property,\n                    // checkInitSelf would not have been able to mark the \n                    // function for a self init\n                if (this.thisFnc.boundToProperty) {\n                    var container = this.thisFnc.boundToProperty.sym.container;\n                    if (container.declAST.nodeType == NodeType.FuncDecl) {\n                        (<FuncDecl>container.declAST).setHasSelfReference();\n                    }\n                }\n                else {\n         ';
var v27636 = v27637 + '           var encFnc = this.thisFnc.enclosingFnc;\n                    var firstEncFnc = encFnc;\n\n                    while (encFnc) {\n                        if (this.thisClassNode && hasFlag(encFnc.fncFlags, FncFlags.IsPropertyBound)) {\n                            illegalThisRef = true;\n                        }\n\n                        if (!hasFlag(encFnc.fncFlags, FncFlags.IsFatArrowFunction) || encFnc.hasSelfReference()) {\n                            encFnc.setHasSelfReference();\n                            break;\n                        }\n\n                        encFnc = encFnc.enclosingFnc;\n                    }\n\n                    if (!encFnc && firstEncFnc) {\n                        encFnc = firstEncFnc;\n                        encFnc.setHasSelfReference();\n                    }\n                    else if (!encFnc) { // the lambda is bound at the top-level...\n                        if (this.thisClassNode) {\n                            (<ClassDeclaration>this.thisClassNode).varFlags |= VarFlags.MustCaptureThis;\n                        }\n                        else if (this.checker.currentModDecl) {\n                            this.checker.currentModDecl.modFlags |= ModuleFlags.MustCaptureThis;\n                        }\n                        else {\n                            this.checker.mustCaptureGlobalThis = true;\n                        }\n                    }\n\n                    if (encFnc && (encFnc.isMethod() || encFnc.isConstructor) && this.thisType && !hasFlag(encFnc.fncFlags, FncFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            if (illegalThisRef) {\n                this.checker.errorReporter.simpleError(ast, "Keyword \'this\' cannot be referenced in initializers in a class body, or in super constructor calls");\n            }\n            return ast;\n        }\n\n        public setTypeFromSymbol(ast: AST, symbol: Symbol): void {\n            if (symbol.isVariable()) {\n                if (symbol.isInferenceSymbol()) {\n                    var infSym = <InferenceSymbol>symbol;\n                    if (infSym.declAST &&\n                        !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                        this.inScopeTypeCheckDecl(infSym.declAST);\n                    }\n                    if (!this.checker.styleSettings.innerScopeDeclEscape) {\n                        if (infSym.declAST && (infSym.declAST.nodeType == NodeType.VarDecl)) {\n                            if (this.nestingLevel < (<VarDecl>infSym.declAST).nestingLevel) {\n                                this.checker.errorReporter.styleError(ast, "Illegal reference to a variable defined in more nested scope");\n                            }\n                        }\n                    }\n                }\n                ast.type = symbol.getType();\n                if (!symbol.writeable()) {\n                    ast.flags = ast.flags & (~(ASTFlags.Writeable));\n                }\n            }\n            else if (symbol.isType()) {\n                ast.type = symbol.getType();\n                ast.flags = ast.flags & (~(ASTFlags.Writeable));\n            }\n            else {\n                ast.type = this.anyType;\n                this.checker.errorReporter.symbolDoesNotReferToAValue(ast, symbol.name);\n            }\n        }\n\n        public typeCheckName(ast: AST): AST {\n            var identifier = <Identifier>ast;\n\n            if (this.checker.inWith) {\n                identifier.type = this.anyType;\n            }\n            else {\n                var typespace = this.inTypeRefTypeCheck;\n                var idText = identifier.text;\n                var originalIdText = idText;\n                var isDynamicModuleName = isQuoted(identifier.text);\n\n                var symbol = this.scope.find(idText, false, typespace);\n\n                if (symbol == null && isDynamicModuleName) {\n                    symbol = this.checker.findSymbolForDynamicModule(idText, this.currentScript.locationInfo.filename, (id) => this.scope.find(id, false, typespace));\n                }\n\n                if (!symbol) {\n                    if (!identifier.isMissing()) {\n                        this.checker.errorReporter.unresolvedSymbol(identifier, identifier.text);\n                    }\n                    identifier.type = this.anyType;\n                }\n                else {\n                    if (optimizeModuleCodeGen && symbol && symbol.isType()) {\n                        var symType = symbol.getType();\n                        // Once the type has been referenced outside of a type ref position, there\'s\n                        // no going back                        \n                        if (symType && (<TypeSymbol>symbol).aliasLink && (<TypeSymbol>symbol).onlyReferencedAsTypeRef) {\n\n                            var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                            if (modDecl && hasFlag(modDecl.modFlags, ModuleFlags.IsDynamic';
var v27635 = v27636 + ")) {\n                                (<TypeSymbol>symbol).onlyReferencedAsTypeRef = this.inTypeRefTypeCheck;\n                            }\n                        }\n                    }\n\n                    if (symbol.declAST &&\n                        symbol.declAST.nodeType == NodeType.FuncDecl &&\n                        !(<FuncDecl>symbol.declAST).returnTypeAnnotation &&\n                        (<FuncDecl>symbol.declAST).signature.typeCheckStatus == TypeCheckStatus.Started) {\n                        (<FuncDecl>symbol.declAST).type.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        (<FuncDecl>symbol.declAST).signature.returnType.type = this.anyType;\n                    }\n\n                    this.setTypeFromSymbol(ast, symbol);\n                    identifier.sym = symbol;\n                    if (this.thisFnc) {\n                        if (this.thisFnc.type && symbol.container != this.thisFnc.type.symbol) {\n                            this.thisFnc.freeVariables[this.thisFnc.freeVariables.length] = symbol;\n                        }\n                    }\n                }\n            }\n            return ast;\n        }\n\n        public typeCheckScript(script: Script): Script {\n            this.checker.locationInfo = script.locationInfo;\n            this.scope = this.checker.globalScope;\n\n            // if it's a top-level module, the globals have already been added to the implicit\n            // module decl\n            if (!script.topLevelMod) {\n                this.addLocalsFromScope(this.scope, this.checker.gloMod,\n                                   script.vars, this.checker.globals, true);\n            }\n\n            this.currentScript = script;\n            script.bod = <ASTList>this.typeCheck(script.bod);\n            this.currentScript = null;\n            return script;\n        }\n\n        public typeCheckBitNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return unex;\n        }\n\n        public typeCheckUnaryNumberOperator(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return ast;\n        }\n\n        public typeCheckLogNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.booleanType;\n            return unex;\n        }\n\n        public astIsWriteable(ast: AST): bool {\n            return hasFlag(ast.flags, ASTFlags.Writeable);\n        }\n\n        public typeCheckIncOrDec(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            var lval = unex.operand;\n            if (!this.astIsWriteable(unex)) {\n                this.checker.errorReporter.valueCannotBeModified(unex);\n                unex.type = this.doubleType;\n            }\n            else {\n                unex = <UnaryExpression> this.typeCheckUnaryNumberOperator(ast);\n                if (unex.operand.type != this.checker.numberType && unex.operand.type != this.checker.anyType && !(unex.operand.type.typeFlags & TypeFlags.IsEnum)) {\n                    this.checker.errorReporter.simpleError(ast, \"'++' and '--' may only be applied to operands of type 'number' or 'any'\");\n                }\n            }\n            return unex;\n        }\n\n        public typeCheckBitwiseOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            var resultType: Type = null;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (assignment && (!this.astIsWriteable(binex))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n\n            if (this.checker.styleSettings.bitwise) {\n                this.checker.errorReporter.styleError(ast, \"use of \" + nodeTypeTable[binex.nodeType]);\n            }\n\n            if (this.checker.sourceIsSubtypeOfTarget(leftType, this.doubleType) && (this.checker.sourceIsSubtypeOfTarget(rightType, this.doubleType))) {\n                resultType = this.doubleType;\n            }\n            else if ((leftType == this.booleanType) &&\n                     (rightType == this.booleanType)) {\n                resultType = this.booleanType;\n            }\n            else if (leftType == this.anyType) {\n                if ((rightType == this.anyType) ||\n                    (rightType == this.doubleType) ||\n                    (rightType == this.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            else if (rightType == this.anyType) {\n                if ((leftType == this.anyType) ||\n                    (leftType == this.doubleType) ||\n                    (leftType == th";
var v27634 = v27635 + 'is.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            if (resultType == null) {\n                resultType = this.anyType;\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                        binex.printLabel(), this.scope);\n            }\n            binex.type = resultType;\n            return binex;\n        }\n\n        public typeCheckArithmeticOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (assignment && (!this.astIsWriteable(binex.operand1))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n\n            if (this.checker.styleSettings.bitwise &&\n                ((binex.nodeType == NodeType.And) ||\n                (binex.nodeType == NodeType.Or) ||\n                (binex.nodeType == NodeType.AsgAnd) ||\n                (binex.nodeType == NodeType.AsgOr))) {\n                this.checker.errorReporter.styleError(ast, "use of " + nodeTypeTable[binex.nodeType]);\n            }\n\n            if (leftType == null || rightType == null) {\n                this.checker.errorReporter.simpleError(binex, "Could not typecheck arithmetic operation.  Possible recursive typecheck error?");\n                binex.type = this.anyType;\n                return binex;\n            }\n            var nodeType = binex.nodeType;\n\n            if (this.checker.isNullOrUndefinedType(leftType)) {\n                leftType = rightType;\n            }\n            if (this.checker.isNullOrUndefinedType(rightType)) {\n                rightType = leftType;\n            }\n            leftType = this.checker.widenType(leftType);\n            rightType = this.checker.widenType(rightType);\n\n            if (nodeType == NodeType.Add || nodeType == NodeType.AsgAdd) {\n\n                if (leftType == this.checker.stringType || rightType == this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else if (leftType == this.checker.numberType && rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n            else {\n                if (leftType == this.checker.numberType && rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n\n            return binex;\n        }\n\n        public typeCheckDotOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var leftIsFnc = false;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            var leftType = binex.operand1.type;\n            var leftScope: SymbolScope = null;\n            // REVIEW: replace with get member scope\n            if (leftType) {\n                if (leftType == this.anyType) {\n                    binex.type = this.anyType;\n                    return binex;\n                }\n                else if (leftType == this.stringType) {\n                    if (this.stringInterfaceType) {\n                        leftScope = this.stringInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n              ';
var v27633 = v27634 + "  else if (leftType == this.doubleType) {\n                    if (this.numberInterfaceType) {\n                        leftScope = this.numberInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType == this.booleanType) {\n                    if (this.booleanInterfaceType) {\n                        leftScope = this.booleanInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if ((leftType.call || leftType.construct) && leftType.members == null) {\n                    if (this.functionInterfaceType) {\n                        leftScope = this.functionInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType.elementType) {\n                    if (this.arrayInterfaceType) {\n                        var arrInstType = leftType.elementType.getArrayBase(this.arrayInterfaceType, this.checker);\n                        leftScope = arrInstType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else {\n                    leftScope = leftType.memberScope;\n                }\n            }\n            if (leftScope == null) {\n                this.checker.errorReporter.expectedClassOrInterface(binex);\n                binex.type = this.anyType;\n            }\n            else {\n                var propertyName = <Identifier>binex.operand2;\n                var lhsIsEnclosingType = (this.thisClassNode && binex.operand1.type == this.thisClassNode.type.instanceType) || this.inTypeRefTypeCheck;\n                var symbol = leftScope.find(propertyName.text, !lhsIsEnclosingType, this.inTypeRefTypeCheck); // only search the public members, unless the rhs is a 'this' pointer\n\n                // If the symbol wasn't found, delegate to the appropriate 'virtual' parent type\n                if (!symbol) {\n                    if (this.objectInterfaceType && leftType) {\n                        // check 'Object' for the symbol\n                        if (leftType.isReferenceType()) {\n                            symbol = this.objectInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                        }\n                        if (!symbol) {\n                            // check 'Function', if appropriate\n                            if (this.functionInterfaceType && (leftType.call || leftType.construct)) {\n                                symbol = this.functionInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                            }\n                        }\n                    }\n                }\n\n                if (!symbol || (!symbol.visible(leftScope, this.checker))) {\n                    binex.type = this.anyType;\n\n                    if (symbol == null) {\n                        this.checker.errorReporter.simpleError(propertyName, \"The property '\" + propertyName.actualText + \"' does not exist on value of type '\" + leftType.getScopedTypeName(this.scope) + \"'\");\n                    }\n                    else if (!this.inTypeRefTypeCheck) {  // if it's a dotted type reference, we'll catch the visibility error during binding\n                        this.checker.errorReporter.simpleError(binex, \"The property '\" + propertyName.actualText + \" on type '\" + leftType.getScopedTypeName(this.scope) + \"' is not visible\");\n                    }\n                }\n                else {\n                    if (symbol.isVariable()) {\n                        if (symbol.isInferenceSymbol()) {\n                            var infSym = <InferenceSymbol>symbol;\n                            if (infSym.declAST && !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                                this.inScopeTypeCheckDecl(infSym.declAST);\n                            }\n                        }\n                    }\n                    propertyName.sym = symbol;\n                    binex.type = symbol.getType();\n                }\n            }\n            if (binex.type == null) {\n                binex.type = this.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckBooleanOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n            if ((!";
var v27632 = v27633 + '(this.checker.sourceIsAssignableToTarget(leftType, rightType))) &&\n                (!(this.checker.sourceIsAssignableToTarget(rightType, leftType)))) {\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType, binex.printLabel(), this.scope);\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckAsgOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var applyTargetType = !binex.operand2.isParenthesized;\n            binex.operand1 = this.typeCheck(binex.operand1);\n\n            this.checker.typeCheckWithContextualType(binex.operand1.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, binex.operand2);\n\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (!(this.astIsWriteable(binex.operand1))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n            if (binex.operand1.nodeType == NodeType.Call) {\n                var callEx = <CallExpression>binex.operand1;\n            }\n            var preserveScope = false;\n            var preservedContainedScope = null;\n            if (binex.operand2.type) {\n                preservedContainedScope = binex.operand2.type.containedScope;\n                preserveScope = true;\n            }\n            // Do not re-write the AST in provisional typecheck mode\n            binex.operand2 = this.castWithCoercion(binex.operand2, leftType, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n            if (preserveScope && binex.operand2.type.containedScope == null) {\n                binex.operand2.type.containedScope = preservedContainedScope;\n            }\n            binex.type = rightType;\n            return binex;\n        }\n\n        public typeCheckIndex(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1); // ObjExpr\n            binex.operand2 = this.typeCheck(binex.operand2); // IndexExpr\n\n            if (!this.checker.styleSettings.literalSubscript) {\n                if (binex.operand2.nodeType == NodeType.QString) {\n                    this.checker.errorReporter.styleError(ast, "use literal subscript (\'.\') notation instead)");\n                }\n            }\n\n            var objExprType = binex.operand1.type;\n            var indexExprType = binex.operand2.type;\n\n            if (objExprType.elementType) { // arrays\n                if (indexExprType == this.checker.anyType || indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)) {\n                    binex.type = objExprType.elementType;\n                }\n                else if (indexExprType == this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (objExprType.index) { // types with index sigs\n\n                if (indexExprType == this.checker.anyType ||\n                    !((objExprType.index.flags & SignatureFlags.IsStringIndexer) || (objExprType.index.flags & SignatureFlags.IsNumberIndexer)) || // REVIEW: unvalidated type expression\n                    ((objExprType.index.flags & SignatureFlags.IsStringIndexer) && indexExprType == this.checker.stringType) ||\n                    ((objExprType.index.flags & SignatureFlags.IsNumberIndexer) && (indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) {\n                    var sig = this.resolveOverload(ast, objExprType.index);\n                    if (sig) {\n                        binex.type = sig.returnType.type;//objExprType.index.signatures[0].returnType.type;\n                    }\n                    else {\n                        binex.type = this.checker.anyType;\n                    }\n                }\n                else if (indexExprType == this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if ((objExprType == this.checker.anyType ||\n                     objExprType == this.checker.stringType ||\n                     objExprType == this.checker.numberType ||\n                     objExprType == this.checker.booleanType ||\n                     objExprType.isReferenceType()) &&\n                     (indexExprType == this.checker.anyType ||\n                      indexExprType == this.checker.stringType ||\n                      (indexExprType == this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) { // RE';
var v27631 = v27632 + 'VIEW: Do we want to allow indexes of type \'number\'?\n                binex.type = this.checker.anyType;\n            }\n            else {\n                this.checker.errorReporter.simpleError(binex, "Illegal property access");\n                binex.type = this.checker.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckInOperator(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.stringType);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type == this.checker.anyType || binex.operand1.type == this.checker.stringType) &&\n                    (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.objectInterfaceType)))) {\n                this.checker.errorReporter.simpleError(binex, "The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type");\n            }\n\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckShift(binex: BinaryExpression, assignment: bool): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.doubleType);\n            binex.operand2 = this.cast(this.typeCheck(binex.operand2), this.doubleType);\n            if (assignment && (!(this.astIsWriteable(binex.operand1)))) {\n                this.checker.errorReporter.valueCannotBeModified(binex);\n            }\n            binex.type = this.doubleType;\n            return binex;\n        }\n\n        public typeCheckQMark(trinex: ConditionalExpression): ConditionalExpression {\n            trinex.operand1 = this.typeCheck(trinex.operand1);\n            trinex.operand2 = this.typeCheck(trinex.operand2);\n            trinex.operand3 = this.typeCheck(trinex.operand3);\n            var leftType = trinex.operand2.type;\n            var rightType = trinex.operand3.type;\n\n            if (leftType == rightType) {\n                trinex.type = leftType;\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    trinex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    trinex.type = leftType;\n                }\n                else {\n                    trinex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(trinex, leftType, rightType, trinex.printLabel(), this.scope);\n                }\n            }\n\n            return trinex;\n        }\n\n        public addFormals(container: Symbol, signature: Signature,\n            table: IHashTable) {\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var symbol = <ParameterSymbol>signature.parameters[i];\n                symbol.container = container;\n                table.add(symbol.name, symbol);\n            }\n        }\n\n        // REVIEW: We use isModContainer instead of container.getType().isModuleType because container.type may be null at this\n        // juncture\n        public addLocalsFromScope(scope: SymbolScope, container: Symbol, vars: ASTList, table: IHashTable, isModContainer: bool) {\n            var len = vars.members.length;\n            var hasArgsDef = false;\n            for (var i = 0; i < len; i++) {\n                var local = <VarDecl>vars.members[i];\n                if (((local.sym == null) || (local.sym.kind() != SymbolKind.Field))) {\n                    var result: Symbol = null;\n                    if ((result = table.lookup(local.id.text)) == null) {\n                        var localVar: ValueLocation = new ValueLocation();\n                        localVar.typeLink = new TypeLink();\n                        var varSym = null;\n\n                        if (hasFlag(local.varFlags, VarFlags.Static)) {\n                            local.varFlags |= VarFlags.LocalStatic;\n                            varSym = new FieldSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.unitIndex,\n                                                      true, localVar);\n                        }\n                        else {\n                            varSym = new VariableSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.unitIndex,\n                                                      localVar);\n                        }\n                        varSym.transferVarFlags(local.varFlags);\n                        localVar.symbol = varSym;\n                        varSym.declAST = local;\n                        localVar.typeLink.ast = local.typeExpr;\n                        this.checker.resolveTypeLink(scope, localVar.typeLink, false);\n                        if ((local.type == null) &&';
var v27630 = v27631 + ' (local.init == null)) {\n                            local.type = this.anyType;\n                        }\n                        localVar.typeLink.type = local.type;\n                        localVar.symbol.container = container;\n                        local.sym = localVar.symbol;\n                        table.add(local.id.text, varSym);\n                        if (local.id.text == "arguments") {\n                            hasArgsDef = true;\n                        }\n                    }\n                    else {\n                        local.type = result.getType();\n                        local.sym = result;\n                    }\n                }\n            }\n            if (!isModContainer) {\n                if (!hasArgsDef) {\n                    var argLoc = new ValueLocation();\n                    argLoc.typeLink = new TypeLink();\n                    var theArgSym = new VariableSymbol("arguments", vars.minChar,\n                                                     this.checker.locationInfo.unitIndex,\n                                                     argLoc);\n\n                    // if the user is using a custom lib.d.ts where IArguments has not been defined\n                    // (or they\'re compiling with the --nolib option), use \'any\' as the argument type\n                    if (!this.iargumentsInterfaceType) {\n                        var argumentsSym = scope.find("IArguments", false, true);\n\n                        if (argumentsSym) {\n                            argumentsSym.flags |= SymbolFlags.CompilerGenerated;\n                            this.iargumentsInterfaceType = argumentsSym.getType();\n                        }\n                        else {\n                            this.iargumentsInterfaceType = this.anyType;\n                        }\n                    }\n                    argLoc.typeLink.type = this.iargumentsInterfaceType;\n                    table.add("arguments", theArgSym);\n                }\n            }\n        }\n\n        // REVIEW: isClass param may now be redundant\n        public addConstructorLocalArgs(container: Symbol, args: ASTList, table: IHashTable, isClass: bool): void {\n            if (args) {\n                var len = args.members.length;\n                for (var i = 0; i < len; i++) {\n                    var local = <ArgDecl>args.members[i];\n                    if ((local.sym == null) ||\n                        (isClass || (local.sym.kind() != SymbolKind.Field))) {\n                        var result: Symbol = null;\n                        if ((result = table.lookup(local.id.text)) == null) {\n                            this.resolveBoundDecl(local);\n                            var localVar: ValueLocation = new ValueLocation();\n                            localVar.typeLink = new TypeLink();\n                            var varSym = new ParameterSymbol(local.id.text, local.minChar,\n                                                                   this.checker.locationInfo.unitIndex,\n                                                                   localVar);\n                            varSym.declAST = local;\n                            localVar.symbol = varSym;\n                            localVar.typeLink.type = local.type;\n                            localVar.symbol.container = container;\n                            local.sym = localVar.symbol;\n                            table.add(local.id.text, varSym);\n                        }\n                        else {\n                            local.type = result.getType();\n                            local.sym = result;\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkInitSelf(funcDecl: FuncDecl): bool {\n            if (!funcDecl.isMethod()) {\n                var freeVars = funcDecl.freeVariables;\n                for (var k = 0, len = freeVars.length; k < len; k++) {\n                    var sym = freeVars[k];\n                    if (sym.isInstanceProperty()) {\n                        return true;\n                    }\n                }\n            }\n            var fns = funcDecl.scopes;\n            var fnsLen = fns.members.length;\n\n            for (var j = 0; j < fnsLen; j++) {\n                var fn = <FuncDecl>fns.members[j];\n                if (this.checkInitSelf(fn)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public checkPromoteFreeVars(funcDecl: FuncDecl, constructorSym: Symbol): void {\n            var freeVars = funcDecl.freeVariables;\n            for (var k = 0, len = freeVars.length; k < len; k++) {\n                var sym = freeVars[k];\n                if ((!sym.isInstanceProperty()) && (sym.container == constructorSym)) {\n                    instanceFilter.reset();\n                    if (this.scope.search(instanceFilter, sym.name, false, false)) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variable shadows class property';
var v27629 = v27630 + ' \'" + sym.name + "\'. To access the class property, use \'self." + sym.name + "\'");\n                    }\n\n                    this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable \'" + sym.name + "\' to a class property")\n                }\n            }\n        }\n\n        public allReturnsAreVoid(funcDecl: FuncDecl) {\n            // in the case of a function or method with no declared return type, walk the body to \n            // pre-emptively determine if the function has a return type of void\n            //\n            // REVIEW: Eventually, we\'ll want to perform exit graph analysis to determine\n            // if the function ever "escapes" without a return expression\n            // This would require moving some of this logic into the function\'s typecheck-proper,\n            // which would slow things down a fair bit, but would open up more analysis opportunities\n            var allReturnsAreVoid = true;\n\n            if (funcDecl.signature.returnType.type == null) {\n                var preFindReturnExpressionTypes = function (ast: AST, parent: AST, walker: IAstWalker) {\n                    var go = true;\n                    switch (ast.nodeType) {\n                        case NodeType.FuncDecl:\n                            // don\'t recurse into a function decl - we don\'t want to confuse a nested\n                            // return type with the top-level function\'s return type\n                            go = false;\n                            break;\n                        case NodeType.Return:\n                            var returnStmt: ReturnStatement = <ReturnStatement>ast;\n\n                            if (returnStmt.returnExpression) {\n                                allReturnsAreVoid = false;\n                                go = false;\n                            }\n\n                        default:\n                            break;\n                    }\n                    walker.options.goChildren = go;\n                    walker.options.goNextSibling = go;\n                    return ast;\n                }\n\n                getAstWalkerFactory().walk(funcDecl.bod, preFindReturnExpressionTypes);\n            }\n\n            return allReturnsAreVoid;\n        }\n\n        public classConstructorHasSuperCall(funcDecl: FuncDecl) {\n            var foundSuper = false;\n\n            var preFindSuperCall = function (ast: AST, parent: AST, walker: IAstWalker) {\n\n                var go = true;\n\n                switch (ast.nodeType) {\n                    case NodeType.FuncDecl:\n                        go = false;\n                        break;\n                    case NodeType.Call:\n                        var call = <CallExpression>ast;\n\n                        if (call.target.nodeType == NodeType.Super) {\n                            go = false;\n                            foundSuper = true;\n                            break;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                walker.options.goChildren = go;\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(funcDecl.bod, preFindSuperCall);\n\n            return foundSuper;\n        }\n\n        private baseListPrivacyErrorReporter(bases: ASTList, i: number, declSymbol: Symbol, extendsList: bool, typeName: string, isModuleName: bool) {\n            var baseSymbol = bases.members[i].type.symbol;\n            var declTypeString = (declSymbol.declAST.nodeType == NodeType.InterfaceDeclaration) ? "interface" : "class";\n            var baseListTypeString = extendsList ? "extends" : "implements";\n            var baseTypeString = (baseSymbol.declAST.nodeType == NodeType.InterfaceDeclaration) ? "interface" : "class";\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module ";\n                baseTypeString = " " + baseTypeString + " from private module " + quotestring + typeName + quotestring;\n            } else {\n                baseTypeString = " private " + baseTypeString + " \'" + typeName + "\'";\n            }\n            this.checker.errorReporter.simpleError(bases.members[i], "exported " + declTypeString + " \'" + declSymbol.name + "\' " + baseListTypeString + baseTypeString);\n        }\n\n        // Check if declSymbol can satisfy baselist privacy\n        private typeCheckBaseListPrivacy(bases: ASTList, declSymbol: Symbol, extendsList: bool) {\n            if (bases) {\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    if (!bases.members[i].type || bases.members[i].type == this.checker.anyType) {\n                        // This type is coming from external module so it ha';
var v27628 = v27629 + "s to be exported, or we're recovering from an\n                        // error condition\n                        continue;\n                    }\n\n                    this.checkSymbolPrivacy(bases.members[i].type.symbol, declSymbol, (typeName: string, isModuleName: bool) => this.baseListPrivacyErrorReporter(bases, i, declSymbol, extendsList, typeName, isModuleName));\n                }\n            }\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSymbolPrivacy(typeSymbol: TypeSymbol, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName: bool) => void ) {\n            var externalModuleSymbol: TypeSymbol = null;\n            var declSymbolPath: Symbol[] = null;\n\n            // Type is visible type, so this can be used by anyone.\n            if (typeSymbol.isExternallyVisible(this.checker)) {\n                // Symbol could be from external module, go ahead and find the external module\n                var typeSymbolPath = typeSymbol.pathToRoot();\n                declSymbolPath = declSymbol.pathToRoot();\n                var typeSymbolLength = typeSymbolPath.length;\n                var declSymbolPathLength = declSymbolPath.length;\n\n                if (typeSymbolLength > 0) {\n                    if (typeSymbolPath[typeSymbolLength - 1].getType().isModuleType() &&\n                        (<TypeSymbol>typeSymbolPath[typeSymbolLength - 1]).isDynamic &&\n                        typeSymbolPath[typeSymbolLength - 1] != declSymbolPath[declSymbolPathLength - 1]) {\n                        // Symbol from external module that was imported using one of the import statement\n                        externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 1];\n                    } else if (typeSymbolLength > 1) {\n                        // Is symbol from declared quoted module\n                        if (typeSymbolPath[typeSymbolLength - 2].getType().isModuleType() &&\n                            (<TypeSymbol>typeSymbolPath[typeSymbolLength - 2]).isDynamic &&\n                            (declSymbolPathLength == 1 || typeSymbolPath[typeSymbolLength - 2] != declSymbolPath[declSymbolPathLength - 2])) {\n                            // From quoted module name\n                            externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 2];\n                        }\n                    }\n                }\n\n                if (externalModuleSymbol == null) {\n                    return;\n                }\n            }\n\n            // Interface symbol doesn't reflect correct Exported state so use AST instead\n            var interfaceDecl: InterfaceDeclaration = declSymbol.getInterfaceDeclFromSymbol(this.checker);\n            if (interfaceDecl && !hasFlag(interfaceDecl.varFlags, VarFlags.Exported)) {\n                return;\n            }\n\n            var checkVisibilitySymbol = declSymbol;\n            // Var decl symbol doesnt reflect correct exported state so use AST instead\n            var varDecl = declSymbol.getVarDeclFromSymbol();\n            if (varDecl) {\n                if (hasFlag(varDecl.varFlags, VarFlags.Private)) {\n                    return;\n                } else if (hasFlag(varDecl.varFlags, VarFlags.Public)) {\n                    // Its a member from class so check visibility of its container\n                    checkVisibilitySymbol = declSymbol.container;\n                }\n            }\n\n            // If the container is visible from global scrope it is error\n            if (checkVisibilitySymbol.isExternallyVisible(this.checker)) {\n                var privateSymbolName = typeSymbol.name;\n\n                // If imported typeSymbol mark it as visible externally and verify that the symbol it imports is visible externally\n                if (externalModuleSymbol != null) {\n                    var prettyName = externalModuleSymbol.getPrettyNameOfDynamicModule(declSymbolPath);\n                    if (prettyName != null) {\n                        this.currentScript.AddExternallyVisibleImportedSymbol(prettyName.symbol, this.checker);\n                        return;\n                    } else {\n                        privateSymbolName = externalModuleSymbol.prettyName;\n                    }\n                }\n\n                // Visible declaration using non visible type.\n                errorCallback(privateSymbolName, typeSymbol.name != privateSymbolName);\n            }\n        }\n\n        // Checks if the privacy is satisfied by type that is used in the declaration inside container\n        private checkTypePrivacy(type: Type, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName : bool) =>void ) {\n            // Primitive types\n            if (!(type && type.primitiveTypeClass == Primitive.None)) {\n                return;\n            }\n\n\n            // If type is array, check element type\n            if (type.isArray()) {\n                return this.checkTypePrivacy(type.elementTyp";
var v27627 = v27628 + 'e, declSymbol, errorCallback);\n            }\n\n            // Going to be printing symbol name, verify if symbol can be emitted\n            if (type.symbol && type.symbol.name && type.symbol.name != "_anonymous" &&\n                        (((type.call == null) && (type.construct == null) && (type.index == null)) ||\n                        (type.members && (!type.isClass())))) {\n                return this.checkSymbolPrivacy(<TypeSymbol>type.symbol, declSymbol, errorCallback);\n            }\n\n            if (type.members) {\n                // Verify symbols for members\n                type.members.allMembers.map((key, s, unused) => {\n                    var sym = <Symbol>s;\n                    if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                        this.checkTypePrivacy(sym.getType(), declSymbol, errorCallback);\n                    }\n                }, null);\n            }\n\n            this.checkSignatureGroupPrivacy(type.call, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.construct, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.index, declSymbol, errorCallback);\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSignatureGroupPrivacy(sgroup: SignatureGroup, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName : bool) =>void ) {\n            if (sgroup) {\n                var len = sgroup.signatures.length;\n                for (var i = 0; i < sgroup.signatures.length; i++) {\n                    var signature = sgroup.signatures[i];\n                    if (len > 1 && signature == sgroup.definitionSignature) {\n                        // In case of overloads don\'t look up for overload defintion types.\n                        continue;\n                    }\n\n                    if (signature.returnType) {\n                        this.checkTypePrivacy(signature.returnType.type, declSymbol, errorCallback);\n                    }\n\n                    var paramLen = signature.parameters.length;\n                    for (var j = 0; j < paramLen; j++) {\n                        var param = signature.parameters[j];\n                        this.checkTypePrivacy(param.getType(), declSymbol, errorCallback);\n                    }\n                }\n            }\n        }\n\n        private functionArgumentPrivacyErrorReporter(funcDecl: FuncDecl, p: number, paramSymbol: Symbol, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.fncFlags, FncFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n\n            if (!isContainerInterface) {\n                if (funcDecl.isConstructor) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported class\'s constructor parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (isSetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " setter parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (!isGetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " function parameter \'" + paramSymbol.name + "\'" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s constructor parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s call parameter \'" + paramSymbol.name + "\'" + typestring);\n                } else if (!funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface\'s function parameter \'" + paramSymbol.name + "\'" + typestring);\n                }\n            }\n        }\n\n        private returnTypePrivacyError(astError: AST, funcDecl: FuncDecl, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcD';
var v27626 = v27627 + 'ecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.fncFlags, FncFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;\n            var typestring = "";\n            if (isModuleName) {\n                var quotestring = "";\n                if (!isQuoted(typeName)) {\n                    quotestring = "\'";\n                }\n                typestring = " is using inaccessible module " + quotestring + typeName + quotestring;\n            } else {\n                typestring = " has or is using private type \'" + typeName + "\'";\n            }\n            if (!isContainerInterface) {\n                if (isGetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " getter return type" + typestring);\n                } else if (!isSetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " function return type" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s constructor return type" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s call return type" + typestring);\n                } else if (funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s indexer return type" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(astError, "exported interface\'s function return type" + typestring);\n                }\n            }\n        }\n\n        private functionReturnTypePrivacyErrorReporter(funcDecl: FuncDecl, signature: Signature, typeName: string, isModuleName: bool) {\n            var reportOnFuncDecl = false;\n\n            // Error coming from return annotation\n            if (funcDecl.returnTypeAnnotation != null &&\n                funcDecl.returnTypeAnnotation.type == signature.returnType.type) {\n                this.returnTypePrivacyError(funcDecl.returnTypeAnnotation, funcDecl, typeName, isModuleName);\n            }\n\n            // Check if return statement\'s type matches the one that we concluded\n            for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                if (funcDecl.returnStatementsWithExpressions[i].type == signature.returnType.type) {\n                    this.returnTypePrivacyError(funcDecl.returnStatementsWithExpressions[i], funcDecl, typeName, isModuleName);\n                } else {\n                    reportOnFuncDecl = true;\n                }\n            }\n\n            if (reportOnFuncDecl) {\n                // Show on function decl\n                this.returnTypePrivacyError(funcDecl, funcDecl, typeName, isModuleName);\n            }\n        }\n\n        public typeCheckFunction(funcDecl: FuncDecl): FuncDecl {\n            this.nestingLevel = 0;\n            var fnType = funcDecl.type;\n\n            var fgSym = fnType.symbol;\n            var signature = funcDecl.signature;\n\n            if (this.checker.typeStatusIsFinished(signature.typeCheckStatus)) {\n                return funcDecl;\n            }\n            else if (signature.typeCheckStatus == TypeCheckStatus.Started) {\n                if (!funcDecl.returnTypeAnnotation &&\n                    funcDecl.bod &&\n                       !funcDecl.isSignature() &&\n                       !(funcDecl.isConstructor) &&\n                       this.allReturnsAreVoid(funcDecl)) {\n\n                    signature.returnType.type = this.voidType;\n                    return funcDecl;\n                }\n                else {\n                    if (funcDecl.returnTypeAnnotation == null) {\n                        if (this.checker.styleSettings.implicitAny) {\n                            this.checker.errorReporter.styleError(funcDecl, "type implicitly set to \'any\'");\n                        }\n                        signature.returnType.type = this.anyType;\n                        fgSym.flags |= SymbolFlags.RecursivelyReferenced;\n                    }\n                    return funcDecl;\n                }\n            }\n\n            signature.typeCheckStatus = TypeCheckStatus.Started;\n            this.checker.addStartedPTO(signature);\n            var prevScope = this.scope;\n            var prevFnc = this.thisFnc;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevClassNode = this.thisClassNode;\n            this.enclosingFncIsMethod = funcDecl.isMethod() || funcDecl.isConstructor;\n            this.thisFnc = funcDecl;\n            var container = funcDecl.type.symbol;\n            var prevThisType = this.thisType;\n            var pr';
var v27625 = v27626 + "evLocationInfo = this.checker.locationInfo;\n            var funcTable: IHashTable = null;\n            var acceptedContextualType = false;\n            var targetParams: ParameterSymbol[] = null;\n            var targetReturnType: Type = null;\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.fncFlags, FncFlags.SetAccessor);\n            var accessorType: Type = (isGetter || isSetter) && funcDecl.accessorSymbol ? funcDecl.accessorSymbol.getType() : null;\n            var prevModDecl = this.checker.currentModDecl;\n\n            if (funcDecl.isConstructor && !funcDecl.isOverload) {\n                if (fnType.instanceType == null) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Malformed function body (is this a class named the same as an existing interface?)\");\n                    return funcDecl;\n                }\n\n                this.scope = fnType.instanceType.constructorScope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n                funcTable = ssb.valueMembers.allMembers;\n            }\n            else if ((funcDecl.isSpecialFn() && !(funcDecl.fncFlags & FncFlags.Signature)) || funcDecl.isOverload) {\n                funcTable = funcDecl.symbols;\n                // if the function is static, we just want to use the \n                // current scope\n                if (!hasFlag(funcDecl.fncFlags, FncFlags.Static) && fnType.containedScope) {\n                    this.scope = fnType.containedScope;\n                }\n            }\n            else {\n                if (funcDecl.bod) {\n                    this.scope = fnType.containedScope;\n                }\n                var ssb = <SymbolScopeBuilder>this.scope;\n\n                // If it is null, it's an ambient declaration with no body, so it doesn't strictly matter\n                // if funcTable is not set\n                if (ssb && ssb.valueMembers) {\n                    funcTable = ssb.valueMembers.allMembers;\n                }\n            }\n\n            // If it's a class constructor, we need to check for the presence (or absense) of calls\n            // to the 'super' constructor\n            //\n            // A super constructor call must exist if:\n            //  - the class has a base class\n            //\n            // A super constructor call must be the first statement in the function body if:\n            //  - the constructor has parameter properties or\n            //  - the class body has initialized property decls\n            //\n            // A super constructor call may not exist if:\n            //  - The class has no base type, or inherits directly from 'Object'\n            if (funcDecl.isConstructor && funcDecl.bod && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {\n\n                var hasBaseType = hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseType);\n                var noSuperCallAllowed = !hasBaseType || hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseTypeOfObject);\n                var superCallMustBeFirst = hasFlag((<ClassDeclaration>funcDecl.classDecl).varFlags, VarFlags.ClassSuperMustBeFirstCallInConstructor);\n\n                if (noSuperCallAllowed && this.classConstructorHasSuperCall(funcDecl)) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Calls to 'super' constructor are not allowed in classes that either inherit directly from 'Object' or have no base class\");\n                }\n                else if (hasBaseType) {\n                    if (superCallMustBeFirst) {\n                        if (!funcDecl.bod ||\n                            !funcDecl.bod.members.length ||\n                            !((funcDecl.bod.members[0].nodeType == NodeType.Call && (<CallExpression>funcDecl.bod.members[0]).target.nodeType == NodeType.Super) ||\n                            (hasFlag(funcDecl.bod.flags, ASTFlags.StrictMode) && funcDecl.bod.members.length > 1 &&\n                             funcDecl.bod.members[1].nodeType == NodeType.Call && (<CallExpression>funcDecl.bod.members[1]).target.nodeType == NodeType.Super))) {\n                            this.checker.errorReporter.simpleError(funcDecl, \"If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor\");\n                        }\n                    }\n                    else if (!this.classConstructorHasSuperCall(funcDecl)) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Constructors for derived classes must contain a call to the class's 'super' constructor\");\n                    }\n                }\n            }\n\n            // If we've typechecked this method \"out of order\" (not by walking the class, but through a method call somewhere else),\n            // we need to reset the current class node in question, so that vis";
var v27624 = v27625 + "ibility checks on class members don't fail\n            if (funcDecl.isMethod() && funcDecl.type.enclosingType) {\n\n                var enclosingClassNode: TypeDeclaration = null;\n\n                if (funcDecl.type.enclosingType.symbol.declAST.nodeType == NodeType.FuncDecl) {\n                    enclosingClassNode = <TypeDeclaration>(<FuncDecl>funcDecl.type.enclosingType.symbol.declAST).classDecl;\n                }\n                else if (funcDecl.type.enclosingType.symbol.declAST.nodeType == NodeType.ClassDeclaration) {\n                    enclosingClassNode = <TypeDeclaration>funcDecl.type.enclosingType.symbol.declAST;\n                }\n\n                if (enclosingClassNode) {\n                    this.thisClassNode = enclosingClassNode;\n                }\n            }\n\n            // if this function is contained in a module, we may be in the midst of a recursive typecheck operation\n            // should that be the case, we need to properly set the current module (for visibility tests)\n            if (fnType.enclosingType) {;\n                var enclosingSym = fnType.symbol.container;\n\n                // if the enclosing type is a class, grab the parent module\n                if (enclosingSym && enclosingSym.isType() && enclosingSym.getType().isClass()) {\n                    enclosingSym = enclosingSym.container;\n                }\n\n                if (enclosingSym && enclosingSym.declAST && enclosingSym.declAST.nodeType == NodeType.ModuleDeclaration) {\n                    this.checker.currentModDecl = <ModuleDeclaration>enclosingSym.declAST;\n                }\n            }\n\n            if (funcDecl.unitIndex > 0) {\n                if (this.checker.units &&\n                    (funcDecl.unitIndex < this.checker.units.length)) {\n                    this.checker.locationInfo = this.checker.units[funcDecl.unitIndex];\n                }\n                else {\n                    this.checker.locationInfo = unknownLocationInfo;\n                }\n            }\n\n            if (fnType.enclosingType) {\n                this.thisType = fnType.enclosingType;\n            }\n            else {\n                this.thisType = prevThisType;\n            }\n\n            var paramLen = signature.parameters.length;\n\n            if (!funcDecl.isConstructor && funcDecl.bod && !funcDecl.isSignature()) {\n                var tmpParamScope = this.scope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n\n                // Attempt to contextually type the function declaration             \n                if (!funcDecl.isMethod() && funcDecl.returnTypeAnnotation == null) {\n\n                    // the funcDecl may be a candidate for contextual typing                 \n                    // REVIEW: prevScope will only be null in the case of an upstream error\n                    if (prevScope && funcDecl.name && !funcDecl.name.isMissing()) {\n                        // Go ahead and check for an ambient symbol\n                        var considerSym: Symbol = prevScope.findAmbient(funcDecl.name.text, false, false);\n\n                        if (considerSym && considerSym.declAST && considerSym.declAST.type) {\n                            // REVIEW: Ambients beget signatures, and signatures don't need to be typechecked\n                            //typeCheck(considerSym.declAST);\n                            this.checker.setContextualType(considerSym.declAST.type, false);\n                        }\n                    }\n\n                    if (this.checker.hasTargetType()) {\n                        var candidateTypeContext = this.checker.getTargetTypeContext();\n                        var candidateType = candidateTypeContext.contextualType;\n\n                        if (this.checker.canContextuallyTypeFunction(candidateType, funcDecl, true)) {\n\n                            // Safe to do this, since the indices and fields are guaranteed to be\n                            // non-null and valid by the above call to canContextuallyTypeFunction\n                            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n                            candidateTypeContext.targetSig = candidateSigs.signatures[0];\n                            var candidateParams = candidateTypeContext.targetSig.parameters;\n\n                            // the target type has been accepted\n                            targetParams = candidateParams;\n                            targetReturnType = candidateTypeContext.targetSig.returnType.type;\n\n                            // Set \"this\" if applicable\n                            if (candidateTypeContext.targetSig.declAST) {\n                                if (candidateTypeContext.targetSig.declAST.isConstructor) {\n                                    //candidateTypeContext.targetThis=candidateType.instanceType;\n                                    //this.thisType = candidateType.instanceType;\n                                    funcDecl.isTargetTypedAsMethod = true;\n               ";
var v27623 = v27624 + "                 }\n                                else if (candidateTypeContext.targetSig.declAST.isMethod()) {\n                                    //candidateTypeContext.targetThis=candidateTypeContext.targetSig.declAST.type.enclosingType;\n                                    //this.thisType = candidateTypeContext.targetSig.declAST.type.enclosingType;\n                                    funcDecl.isTargetTypedAsMethod = true;\n                                }\n                            }\n                            fgSym.type = candidateTypeContext.contextualType;\n                            acceptedContextualType = true;\n                        }\n                        else if (candidateType && funcDecl.isAccessor()) {\n                            accessorType = candidateType;\n                            candidateTypeContext.targetAccessorType = accessorType;\n                        }\n                        else {\n                            this.checker.killCurrentContextualType();\n                        }\n                    }\n                }\n\n                // typecheck parameters\n                // Add parameter symbols to current scope for typechecking (in case default params reference each other)\n                // Order matters here - default parameters can reference previously defined parameters\n                var paramTable = ssb.valueMembers;\n                this.scope = new SymbolScopeBuilder(paramTable, null, null, null, prevScope, container);\n\n                for (var p = 0; p < paramLen; p++) {\n                    var symbol = signature.parameters[p];\n                    var ast = <ArgDecl>symbol.declAST\n\n                    if (this.checker.hasTargetType() && (targetParams && (this.checker.getTargetTypeContext().targetSig.hasVariableArgList || p < targetParams.length))) {\n                        var candidateTypeContext = this.checker.getTargetTypeContext();\n                        var hasVarArgList = candidateTypeContext.targetSig.hasVariableArgList;\n                        ast.type = hasVarArgList && p >= targetParams.length - 1 ? targetParams[targetParams.length - 1].getType().elementType : targetParams[p].getType();\n                        ast.sym.setType(ast.type);\n                        (<InferenceSymbol>ast.sym).typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                    }\n                    else {\n                        this.typeCheck(ast);\n                    }\n\n                    // infer the setter type, if necessary\n                    if (isSetter && accessorType) {\n                        ast = <ArgDecl>this.cast(ast, accessorType);\n                    }\n\n                    symbol.container = container;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(symbol.getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, symbol, typeName, isModuleName));\n                    paramTable.publicMembers.add(symbol.name, symbol);\n                }\n                this.scope = tmpParamScope;\n            }\n            else {\n                this.typeCheck(funcDecl.arguments)\n\n                // Because some terms were not yet type-checkable during binding, ensure that\n                // param symbols are updated with the proper argument types\n                for (var p = 0; p < paramLen; p++) {\n                    signature.parameters[p].parameter.typeLink.type = funcDecl.arguments.members[p].type;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(signature.parameters[p].getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, signature.parameters[p], typeName, isModuleName));\n                    if ((<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym) {\n                        (<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym.setType(funcDecl.arguments.members[p].type);\n                    }\n                }\n\n                if ((funcDecl.fncFlags & FncFlags.IndexerMember)) {\n                    if (!paramLen || paramLen > 1) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Index signatures may take one and only one parameter\");\n                    }\n                    else if (funcDecl.arguments.members[0].type == this.checker.numberType) {\n                        fnType.index.flags |= SignatureFlags.IsNumberIndexer;\n                    }\n                    else if (funcDecl.arguments.members[0].type == this.checker.stringType) {\n                        fnType.index.flags |= SignatureFlags.IsStringIndexer;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(funcDecl.arguments.members[0], \"Index signatures may only take 'string' or 'number' as their parameter\");\n                    }\n\n                }\n            }\n\n       ";
var v27622 = v27623 + "     // typecheck body\n            if (funcDecl.bod && (!funcDecl.isSignature())) {\n                if (!(funcDecl.isConstructor)) {\n                    this.addFormals(container, signature, funcTable);\n                }\n                else {\n                    this.addConstructorLocalArgs(funcDecl.type.symbol, funcDecl.arguments, funcTable, hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod));\n\n                    if (this.thisClassNode && this.thisClassNode.extendsList) {\n                        var tmpScope = this.scope;\n                        var funcMembers = new ScopedMembers(<DualStringHashTable>funcTable);\n                        this.scope = new FilteredSymbolScopeBuilder(funcMembers, prevScope, funcDecl.type.symbol,\n                                                             function (sym) {\n                                                                 return sym.kind() == SymbolKind.Parameter;\n                                                             });\n                        this.typeCheckBaseCalls(this.thisClassNode.extendsList);\n                        this.scope = tmpScope;\n                    }\n                }\n\n                // Because this function may have been typechecked in a different visiblity context as its caller (e.g., this\n                // function is being typechecked as a result of a call, before the declaration could be typechecked), we need\n                // to set the enclosing module\n                var prevMod = this.checker.currentModDecl;\n                if (funcDecl.type &&\n                    funcDecl.type.symbol &&\n                    !funcDecl.isMethod() &&\n                    funcDecl.type.symbol.declModule) {\n                    this.checker.currentModDecl = funcDecl.type.symbol.declModule;\n                }\n\n\n                // unset the contextual type before typechecking the function body\n                if (acceptedContextualType) {\n                    this.checker.setContextualType(null, this.checker.inProvisionalTypecheckMode());\n                }\n\n                this.typeCheck(funcDecl.bod);\n\n                if (acceptedContextualType) {\n                    this.checker.unsetContextualType();\n                }\n\n                this.checker.currentModDecl = prevMod;\n\n                if (this.checker.checkControlFlow) {\n                    var cfg = funcDecl.buildControlFlow();\n                    if (this.checker.printControlFlowGraph) {\n                        cfg.print(this.checker.errorReporter.outfile);\n                    }\n                    cfg.reportUnreachable(this.checker.errorReporter);\n                    if (this.checker.checkControlFlowUseDef) {\n                        cfg.useDef(this.checker.errorReporter, funcDecl.type.symbol);\n                    }\n                }\n\n                if (funcDecl.isConstructor) {\n                    var fns: ASTList = funcDecl.scopes;\n                    var fnsLen = fns.members.length;\n                    var freeVars: Symbol[];\n                    var sym: Symbol;\n                    var j = 0;\n                    for (; j < fnsLen; j++) {\n                        var fn = <FuncDecl>fns.members[j];\n                        if (!fn.isSignature()) {\n                            if (hasFlag(fn.fncFlags, FncFlags.Method) && (!hasFlag(fn.fncFlags, FncFlags.Static))) {\n                                this.checkPromoteFreeVars(fn, funcDecl.type.symbol);\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.scope = prevScope;\n            this.thisFnc = prevFnc;\n            this.thisClassNode = prevClassNode;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.thisType = prevThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.checker.currentModDecl = prevModDecl;\n\n            signature.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n\n            // set the return type\n            if (funcDecl.returnTypeAnnotation) {\n                this.checkForVoidConstructor(funcDecl.returnTypeAnnotation.type, funcDecl.returnTypeAnnotation);\n\n                if (signature.returnType.type == null) {\n                    this.checker.resolveTypeLink(this.scope, signature.returnType, false);\n                }\n            }\n            else if (targetReturnType) {\n                signature.returnType.type = targetReturnType;\n            }\n\n            // If no return type annotation has been applied to the function declaration\n            // unify the return types from the given return statements\n\n            if (!(fgSym.flags & SymbolFlags.RecursivelyReferenced) && funcDecl.returnStatementsWithExpressions.length > 0) {\n                var collection: ITypeCollection = {\n                    getLength: () => { return funcDecl.returnStatementsWithExpressions.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { funcDecl.returnStatementsWithExpressions[index].t";
var v27621 = v27622 + 'ype = type; },\n                    getTypeAtIndex: (index: number) => { return funcDecl.returnStatementsWithExpressions[index].type; }\n                }\n\n                var bestCommonReturnType = funcDecl.returnStatementsWithExpressions[0].type;\n                bestCommonReturnType = this.checker.findBestCommonType(bestCommonReturnType, null, collection, true);\n\n                if (bestCommonReturnType) {\n                    signature.returnType.type = this.checker.widenType(bestCommonReturnType);\n                }\n                else {\n                    for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnStatementsWithExpressions[i], "Incompatible return type");\n                    }\n                    signature.returnType.type = this.anyType;\n                }\n            }\n\n            var onlyHasThrow = false;\n\n            if (signature.returnType.type == null) {\n                if (hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression)) {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(funcDecl, "type implicitly set to \'any\'");\n                    }\n                    signature.returnType.type = this.anyType;\n                }\n                else {\n                    signature.returnType.type = this.voidType;\n                }\n            }\n            else if (signature.returnType.type == this.nullType || signature.returnType.type == this.checker.undefinedType) {\n                signature.returnType.type = this.anyType;\n            }\n            else if ((signature.returnType.type != this.voidType && signature.returnType.type != this.checker.undefinedType && signature.returnType.type != this.anyType)) {\n                // the signature declared a non-void type, but there\'s no return statement\n                if (!funcDecl.isSignature() &&\n                    !funcDecl.isConstructor &&\n                    !hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression) &&\n                    !hasFlag(funcDecl.fncFlags, FncFlags.IsFatArrowFunction)) {\n                        // relax the restriction if the method only contains a single "throw" statement\n                    onlyHasThrow = (funcDecl.bod.members.length > 0) && (funcDecl.bod.members[0].nodeType == NodeType.Throw)\n\n                    if (!onlyHasThrow) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnTypeAnnotation || funcDecl,\n                             "Function declared a non-void return type, but has no return expression");\n                    }\n                }\n\n                // Type check for return type Privacy\n                this.checkTypePrivacy(signature.returnType.type, container, (typeName: string, isModuleName: bool) => this.functionReturnTypePrivacyErrorReporter(funcDecl, signature, typeName, isModuleName));\n            }\n\n            // if the function declaration is a getter or a setter, set the type of the associated getter/setter symbol\n            if (funcDecl.accessorSymbol) {\n                var accessorType = funcDecl.accessorSymbol.getType();\n                if (!onlyHasThrow && hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor) && !hasFlag(funcDecl.fncFlags, FncFlags.HasReturnExpression)) {\n                    this.checker.errorReporter.simpleError(funcDecl, "Getters must return a value");\n                }\n                if (accessorType) {\n                    if ((hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor) && accessorType != signature.returnType.type) ||\n                        (funcDecl.arguments.members.length > 0 && accessorType != funcDecl.arguments.members[0].type)) {\n                        this.checker.errorReporter.simpleError(funcDecl, "Getter and setter types do not agree");\n                    }\n                }\n                else {\n                    if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                        funcDecl.accessorSymbol.setType(signature.returnType.type);\n                    }\n                    else {\n                        if (funcDecl.arguments.members.length != 1) {\n                            this.checker.errorReporter.simpleError(funcDecl, "Setters may have one and only one argument");\n                        }\n                        else {\n                            funcDecl.accessorSymbol.setType(funcDecl.arguments.members[0].type);\n                        }\n                    }\n                }\n            }\n\n            this.typeCheckOverloadSignatures(fnType, funcDecl);\n            return funcDecl;\n        }\n\n        public typeCheckBases(type: Type) {\n            var seenInterface = false;\n            var bases = type.extendsList;\n            var baseLinks = type.extendsTypeLinks;\n            if (bases) {\n                var len = bases.length;\n\n                if (len > 0) {\n                    type.typeFlags |= TypeFlags.Has';
var v27620 = v27621 + 'BaseType;\n                }\n\n                for (var i = 0; i < len; i++) {\n                    if (bases[i] == this.checker.anyType) {\n                        // This may be the type from imported module and hence the type was not really resolved to the correct one.\n                        // Try resolving it again\n                        baseLinks[i].type = null;\n                        // There are no contextual errors when trying to verify the base class\n                        var oldErrors = this.checker.errorReporter.getCapturedErrors();\n                        CompilerDiagnostics.assert(oldErrors.length == 0, "There shouldnt be any contextual errors when typechecking base type names");\n                        this.checker.errorReporter.pushToErrorSink = true;\n                        bases[i] = this.checker.resolveBaseTypeLink(baseLinks[i], type.containedScope);\n                        this.checker.errorReporter.pushToErrorSink = false;\n                        this.checker.errorReporter.freeCapturedErrors();\n                    }\n\n                    var base = bases[i];\n                    var baseRef = baseLinks[i].ast;\n\n                    // make sure it\'s the global \'Object\' and not some alias\n                    var baseTypeOfObject = base.symbol && base.symbol.name == "Object" && base.symbol.container == this.checker.gloMod;\n\n                    if (baseTypeOfObject) {\n                        type.typeFlags |= TypeFlags.HasBaseTypeOfObject;\n                    }\n\n                    if (base.isClassInstance()) {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef, "Interface base type must be interface");\n                        }\n                        else {\n                            if (seenInterface) {\n                                this.checker.errorReporter.simpleError(baseRef, "Class may not follow interface as base type");\n                            }\n                        }\n                    }\n                    else if (base.isModuleType()) {\n                        this.checker.errorReporter.simpleError(baseRef, "Types may not be derived from module types");\n                    }\n                    else if (base.members) {\n                        if (!seenInterface) {\n                            seenInterface = true;\n                        }\n                    }\n                    else {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "Interface base type must be interface");\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     "Base type must be interface or class");\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        public checkMembersImplementInterfaces(implementingType: Type) {\n            var instanceType = implementingType.getInstanceType();\n            if (instanceType.implementsList) {\n                var len = instanceType.implementsList.length;\n\n                for (var i = 0; i < len; i++) {\n                    var interfaceType = instanceType.implementsList[i];\n                    var comparisonInfo = new TypeComparisonInfo();\n                    if (!this.checker.sourceIsSubtypeOfTarget(instanceType, interfaceType, comparisonInfo)) {\n                        var emsg = "Class \'" + instanceType.getTypeName() +\n                              "\' declares interface \'" + interfaceType.getTypeName() +\n                              "\' but does not implement it";\n                        if (!comparisonInfo.message) {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg);\n                        }\n                        else {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg + ": " + comparisonInfo.message);\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheckBaseCalls(bases: ASTList) {\n            if (bases == null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType == NodeType.Call) {\n                    this.typeCheckNew(baseExpr);\n                }\n            }\n        }\n\n        public assertUniqueNamesInBaseTypes(names: IHashTable, type: Type, classDecl: InterfaceDeclaration, checkUnique: bool): void {\n            if (type) {\n                if (type.members) {\n                    type.members.publicMembers.map((key, s, c) => {\n  ';
var v27619 = v27620 + '                      var sym = <Symbol>s;\n                        var dup = names.lookup(sym.name);\n                        if (dup) {\n                            if (checkUnique) {\n                                this.checker.errorReporter.simpleError(classDecl,\n                                                                  "duplicate member name in bases for " + classDecl.name.actualText + ": " + type.symbol.name + " and " + dup.container.name + " both contain member with name " + sym.name);\n                            }\n                        }\n                        else {\n                            names.add(sym.name, sym);\n                        }\n                    }, null);\n                }\n                if (type.extendsList) {\n                    var len = type.extendsList.length;\n                    for (var i = 0; i < len; i++) {\n                        if (!(type.extendsList[i].symbol.flags & SymbolFlags.RecursivelyReferenced)) {\n                            this.assertUniqueNamesInBaseTypes(names, type.extendsList[i], classDecl, checkUnique);\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkBaseTypeMemberInheritance(derivedType: Type, derivedTypeDecl: AST): void {\n            var instanceType = derivedType.getInstanceType();\n            if (instanceType.extendsList == null) {\n                return;\n            }\n\n            var len = instanceType.extendsList.length;\n            if (len > 0) {\n                var names = new StringHashTable();\n                if (instanceType.isClassInstance()) {\n                    for (var i = 0; i < len; i++) {\n                        this.assertUniqueNamesInBaseTypes(names, instanceType.extendsList[i], <InterfaceDeclaration>derivedTypeDecl, i > 0);\n                    }\n                }\n\n                if (instanceType.members) {\n                    instanceType.members.publicMembers.map((key, s, c) => {\n                        var sym = <Symbol>s;\n                        for (var j = 0; j < len; j++) {\n                            var base = instanceType.extendsList[j];\n                            if (base.memberScope == null) {\n                                this.checker.errorReporter.simpleError(derivedTypeDecl, "Base type \'" + base.symbol.name + "\' lacks an implementation.")\n                            }\n                            else {\n                                var bSym = base.memberScope.find(sym.name, false, false);\n                                if (bSym) {\n                                    var aType = sym.getType();\n                                    var bType = bSym.getType();\n                                    if (!(this.checker.sourceIsSubtypeOfTarget(aType, bType))) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          "Type of overridden member \'" + sym.name + "\' is not subtype of original member defined by type \'" + bSym.container.name + "\'");\n                                    }\n                                    else if ((sym.kind() == SymbolKind.Type) &&\n                                             (bSym.kind() == SymbolKind.Field)) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          "Cannot override field \'" + sym.name + "\' with method");\n                                    }\n                                }\n                            }\n                        }\n                    }, null);\n                }\n            }\n        }\n\n        public typeCheckClass(classDecl: ClassDeclaration): ClassDeclaration {\n            var typeSymbol = <TypeSymbol>classDecl.type.symbol;\n\n            if (typeSymbol.typeCheckStatus == TypeCheckStatus.Finished) {\n                return classDecl;\n            }\n            else if (typeSymbol.typeCheckStatus == TypeCheckStatus.Started) {\n                // REVIEW: report this recursion\n                //checker.errorReporter.recursionRequiresTypeAnnotation(classDecl);\n                return classDecl;\n            }\n            else {\n                typeSymbol.typeCheckStatus = TypeCheckStatus.Started;\n                this.checker.addStartedPTO(typeSymbol);\n            }\n\n            var prevScope = this.scope;\n            var svClassNode = this.thisClassNode;\n            this.thisClassNode = classDecl;\n            var classType = classDecl.type;\n            this.typeCheckBases(classType.instanceType);\n\n            this.typeCheckBaseListPrivacy(classDecl.extendsList, typeSymbol, true);\n            this.typeCheckBaseListPrivacy(classDecl.implementsList, typeSymbol, false);\n\n            var prevThisType = this.thisType;\n            this.thisType = classType.instanceType;\n            this.scope = classType.instanceType.containedScope;\n\n            // Add the constructor locals, if necessary\n  ';
var v27618 = v27619 + '          if (classDecl.constructorDecl) {\n                this.scope = classType.instanceType.constructorScope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n                var funcTable = ssb.valueMembers.allMembers;\n\n                this.addConstructorLocalArgs(classDecl.constructorDecl.type.symbol, classDecl.constructorDecl.arguments, funcTable, true);\n            }\n\n            this.typeCheck(classDecl.members);\n            typeSymbol.typeCheckStatus = TypeCheckStatus.Finished;\n            this.checkBaseTypeMemberInheritance(classType, classDecl);\n            this.checkMembersImplementInterfaces(classType);\n\n            this.typeCheckOverloadSignatures(classType, classDecl);\n            this.typeCheckOverloadSignatures(classType.instanceType, classDecl);\n\n            // if the class has no declared constructor, adapt its base class\'s signature group, if necessary\n            if (!classDecl.constructorDecl) {\n                if (classDecl.extendsList &&\n                    classDecl.extendsList.members.length &&\n                    classDecl.extendsList.members[0].type &&\n                    classDecl.extendsList.members[0].type.symbol.type.isClass()) {\n                    cloneParentConstructGroupForChildType(classDecl.type, classDecl.extendsList.members[0].type.symbol.type);\n                }\n            }\n\n            this.thisType = prevThisType;\n            this.thisClassNode = svClassNode;\n            this.scope = prevScope;\n            return classDecl;\n        }\n\n        public typeCheckOverloadSignatures(type: Type, ast: AST) {\n            if (type.call) {\n                type.call.typeCheck(this.checker, ast, type.construct != null);\n            }\n            if (type.construct) {\n                type.construct.typeCheck(this.checker, ast, false);\n            }\n            if (type.index) {\n                type.index.typeCheck(this.checker, ast, false);\n            }\n        }\n\n        public typeCheckInterface(interfaceDecl: InterfaceDeclaration): InterfaceDeclaration {\n            // overloads will be typechecked inline by the members\n            //this.typeCheckOverloadSignatures(interfaceDecl.type, interfaceDecl);\n            this.typeCheckBases(interfaceDecl.type);\n            this.typeCheckBaseListPrivacy(interfaceDecl.extendsList, interfaceDecl.type.symbol, true);\n            this.typeCheck(interfaceDecl.members);\n            this.checkBaseTypeMemberInheritance(interfaceDecl.type, interfaceDecl);\n\n            // propagate base type signatures\n            if (interfaceDecl.extendsList) {\n                for (var i = 0; i < interfaceDecl.extendsList.members.length; i++) {\n                    if (interfaceDecl.extendsList.members[i].type.call) {\n                        if (interfaceDecl.type.call) {\n                            interfaceDecl.type.call.signatures = interfaceDecl.type.call.signatures.concat(interfaceDecl.extendsList.members[i].type.call.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.call = interfaceDecl.extendsList.members[i].type.call;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.construct) {\n                        if (interfaceDecl.type.construct) {\n                            interfaceDecl.type.construct.signatures = interfaceDecl.type.construct.signatures.concat(interfaceDecl.extendsList.members[i].type.construct.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.construct = interfaceDecl.extendsList.members[i].type.construct;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.index) {\n                        if (interfaceDecl.type.index) {\n                            interfaceDecl.type.index.signatures = interfaceDecl.type.index.signatures.concat(interfaceDecl.extendsList.members[i].type.index.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.index = interfaceDecl.extendsList.members[i].type.index;\n                        }\n                    }\n                }\n            }\n\n            return interfaceDecl;\n        }\n\n        public typeCheckImportDecl(importDecl: ImportDeclaration) {\n            var mod: ModuleType = <ModuleType>importDecl.alias.type;\n            var sym: TypeSymbol = null;\n            var prevInImportTC = this.inImportTypeCheck;\n            this.inImportTypeCheck = true;\n\n            this.typeCheck(importDecl.alias);\n            mod = <ModuleType>importDecl.alias.type;\n\n            if (mod == null) {\n                this.checker.errorReporter.simpleError(importDecl.alias, "Could not resolve module alias \'" + importDecl.id.actualText + "\'");\n                mod = <ModuleType>this.checker.anyType;\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n            }\n\n            importDecl.id.type = mod;';
var v27617 = v27618 + '\n            sym = mod.symbol;\n\n            if (!mod.isModuleType()) {\n                this.checker.errorReporter.simpleError(importDecl.alias, "A module cannot be aliased to a non-module type");\n            }\n            else {\n                sym.type = mod;\n                \n                // Add the imported module to the AMD dependency list\n                if (this.checker.typeFlow.currentScript && \n                    this.checker.typeFlow.currentScript.topLevelMod && \n                    this.checker.typeFlow.currentScript.topLevelMod.mod) \n                {\n                    this.checker.typeFlow.currentScript.topLevelMod.mod.importedModules.push(importDecl);\n                }\n\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n\n                if (mod.symbol && mod.symbol.declAST) {\n                    (<ModuleDeclaration>mod.symbol.declAST).modFlags &= ~ModuleFlags.ShouldEmitModuleDecl;\n                }\n\n                //importDecl.id.sym = sym;\n                // REVIEW: Uncomment when you can toggle module codegen targets from the language service\n                //else if (typeFlow.checker.currentModDecl == null && \n                //            hasFlag((<ModuleDecl>sym.declAST).modFlags,ModuleFlags.IsDynamic) &&\n                //            moduleGenTarget == ModuleGenTarget.Asynchronous) \n                //{\n                //    typeFlow.checker.errorReporter.simpleError(alias, "In AMD codegen mode, dynamic modules may not be referenced from global scope.  (Wrap the file in a module declaration.)");\n                //}\n            }\n            this.inImportTypeCheck = prevInImportTC;\n            return importDecl;\n        }\n\n        public typeCheckModule(moduleDecl: ModuleDeclaration): ModuleDeclaration {\n\n            // In some really nasty cases of error recovery, we may not have a type\n            if (!moduleDecl.mod) {\n                return moduleDecl;\n            }\n\n            if (this.currentScript) {\n                this.currentScript.requiresGlobal = true;\n            }\n            var mod = moduleDecl.mod;\n            var sym: TypeSymbol = null;\n\n            var prevScope = this.scope;\n            var prevThisType = this.thisType;\n            var prevCurrentModDecl = this.checker.currentModDecl;\n            this.checker.currentModDecl = moduleDecl;\n\n            this.thisType = null;\n            this.scope = mod.containedScope;\n            this.typeCheck(moduleDecl.members);\n            sym = mod.symbol;\n\n            this.checker.currentModDecl = prevCurrentModDecl;\n            this.thisType = prevThisType;\n            this.scope = prevScope;\n\n            moduleDecl.type = mod;\n\n            if (sym) {\n                sym.typeCheckStatus = TypeCheckStatus.Finished;\n            }\n            return moduleDecl;\n        }\n\n        public typeCheckFor(forStmt: ForStatement): ForStatement {\n            forStmt.init = this.typeCheck(forStmt.init);\n            this.nestingLevel++;\n            forStmt.cond = this.typeCheck(forStmt.cond);\n            this.typeCheckCondExpr(forStmt.cond);\n            forStmt.incr = this.typeCheck(forStmt.incr);\n            this.nestingLevel--;\n            forStmt.body = this.typeCheck(forStmt.body);\n            this.typeCheckCompoundStmtBlock(forStmt.body, "for statement");\n            forStmt.type = this.voidType;\n            return forStmt;\n        }\n\n        public typeCheckWith(withStmt: WithStatement): WithStatement {\n            if (this.checker.errorsOnWith) {\n                this.checker.errorReporter.simpleError(withStmt.expr, "All symbols within a \'with\' block will be typed as \'any\'");\n            }\n            withStmt.expr = this.typeCheck(withStmt.expr);\n            this.checker.inWith = true;\n            withStmt.body = this.typeCheck(withStmt.body);\n            this.typeCheckCompoundStmtBlock(withStmt.body, "with statement");\n            this.checker.inWith = false;\n            return withStmt;\n        }\n\n        public typeCheckForIn(forInStmt: ForInStatement): ForInStatement {\n            forInStmt.obj = this.typeCheck(forInStmt.obj);\n            forInStmt.lval = this.cast(this.typeCheck(forInStmt.lval), this.checker.stringType);\n            if (forInStmt.lval.nodeType == NodeType.VarDecl) {\n\n                var varDecl = <VarDecl>forInStmt.lval;\n                if (varDecl.typeExpr) {\n                    this.checker.errorReporter.simpleError(varDecl, "Variable declarations for for/in expressions may not contain a type annotation");\n                }\n\n                if (varDecl.sym) {\n                    varDecl.sym.setType(this.checker.stringType);\n                }\n            }\n            forInStmt.body = this.typeCheck(forInStmt.body);\n            this.typeCheckCompoundStmtBlock(forInStmt.body, "for in statement");\n            return forInStmt;\n        }\n\n        public typeCheckWhile(whileStmt: WhileStatement): WhileStatement {\n            whileStmt.cond = this.typeCheck(whileStmt.cond);\n            this.typeCheckCondE';
var v27616 = v27617 + 'xpr(whileStmt.cond);\n            whileStmt.body = this.typeCheck(whileStmt.body);\n            this.typeCheckCompoundStmtBlock(whileStmt.body, "while statement");\n            whileStmt.type = this.voidType;\n            return whileStmt;\n        }\n\n        public typeCheckDoWhile(doWhileStmt: DoWhileStatement): DoWhileStatement {\n            doWhileStmt.cond = this.typeCheck(doWhileStmt.cond);\n            this.typeCheckCondExpr(doWhileStmt.cond);\n            doWhileStmt.body = this.typeCheck(doWhileStmt.body);\n            this.typeCheckCompoundStmtBlock(doWhileStmt.body, "do while statement");\n            doWhileStmt.type = this.voidType;\n            return doWhileStmt;\n        }\n\n        public typeCheckCondExpr(cond: AST) {\n            if (this.checker.styleSettings.assignmentInCond) {\n                if ((cond !== null) &&\n                    (cond.nodeType >= NodeType.Asg) &&\n                    (cond.nodeType <= NodeType.LastAsg)) {\n                    this.checker.errorReporter.simpleError(cond, "top-level assignment statement in conditional expression");\n                }\n            }\n        }\n\n        public typeCheckCompoundStmtBlock(stmts: AST, stmtType: string) {\n            if (this.checker.styleSettings.blockInCompoundStmt && stmts) {\n                if (stmts.nodeType != NodeType.Block) {\n                    this.checker.errorReporter.styleError(stmts, stmtType + " requires a block");\n                }\n            }\n        }\n        public typeCheckIf(ifStmt: IfStatement): IfStatement {\n            ifStmt.cond = this.typeCheck(ifStmt.cond);\n            this.typeCheckCondExpr(ifStmt.cond);\n            ifStmt.thenBod = this.typeCheck(ifStmt.thenBod);\n            ifStmt.elseBod = this.typeCheck(ifStmt.elseBod);\n            this.typeCheckCompoundStmtBlock(ifStmt.thenBod, "if statement");\n            this.typeCheckCompoundStmtBlock(ifStmt.elseBod, "if statement");\n            ifStmt.type = this.voidType;\n            return ifStmt;\n        }\n\n        public typeFromAccessorFuncDecl(funcDecl: FuncDecl) {\n            if (!funcDecl.isAccessor()) {\n                return null;\n            }\n\n            if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {\n                return funcDecl.type.call.signatures[0].returnType.type;\n            }\n            else {\n                return funcDecl.type.call.signatures[0].parameters[0].getType();\n            }\n        }\n\n        public typeCheckObjectLit(objectLit: UnaryExpression): void {\n\n            var resultType = new Type();\n            resultType.symbol = new TypeSymbol(this.checker.anon, objectLit.minChar,\n                                             objectLit.limChar - objectLit.minChar,\n                                             this.checker.locationInfo.unitIndex,\n                                             resultType);\n\n            resultType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            resultType.memberScope = new SymbolTableScope(resultType.members, null, null, null, null);\n\n            var aggScope = new SymbolAggregateScope(resultType.symbol);\n            aggScope.addParentScope(resultType.memberScope);\n            aggScope.addParentScope(this.scope);\n            resultType.containedScope = aggScope;\n            var memberDecls = <ASTList>objectLit.operand;\n            var prevThisType = this.thisType;\n            var acceptTargetType = false;\n            var targetType: Type = null;\n\n            if (this.checker.hasTargetType()) {\n                targetType = this.checker.getTargetTypeContext().contextualType;\n\n                if (targetType && targetType.symbol && !this.checker.typeStatusIsFinished(targetType.symbol.typeCheckStatus)) {\n                    if (targetType.symbol.declAST) {\n                        this.typeCheck(targetType.symbol.declAST);\n                    }\n                }\n                acceptTargetType = true;\n            }\n\n            if (memberDecls) {\n                for (var i = 0, len = memberDecls.members.length; i < len; i++) {\n\n                    var binex = <BinaryExpression>memberDecls.members[i];\n\n                    var id = binex.operand1;\n                    var text: string;\n                    var targetMember: Symbol = null;\n                    var fieldSymbol: FieldSymbol = null;\n\n                    if (id.nodeType == NodeType.Name) {\n                        text = (<Identifier>id).text;\n                    }\n                    else if (id.nodeType == NodeType.QString) {\n                        // TODO: set text to unescaped string\n                        var idText = (<StringLiteral>id).text;\n                        text = idText.substring(1, idText.length - 1);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(objectLit,\n                                                          "malformed object literal");\n                        resultType = this.anyType;\n       ';
var v27615 = v27616 + "                 break;\n                    }\n\n                    if (acceptTargetType && targetType.memberScope) {\n                        targetMember = targetType.memberScope.find(text, false, false);\n                    }\n\n                    // before typechecking an accessor function member, we need to initialize its accessor symbol\n                    if (binex.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>binex.operand2).isAccessor()) {\n\n                        var funcDecl = <FuncDecl>binex.operand2;\n                        var accessorSym: FieldSymbol = resultType.members.publicMembers.lookup(text);\n\n                        accessorSym = this.checker.createAccessorSymbol(funcDecl, accessorSym, resultType, true, false, resultType.memberScope, null);\n                        funcDecl.accessorSymbol = accessorSym;\n                        fieldSymbol = accessorSym;\n                        if (id.nodeType == NodeType.Name) {\n                            (<Identifier>id).sym = accessorSym;\n                        }\n                    }\n\n                    this.checker.typeCheckWithContextualType(acceptTargetType && targetMember ? targetMember.getType() : null, false, acceptTargetType, binex.operand2);\n\n                    if (acceptTargetType && targetMember) {\n                        // Note that we accept 'any' in place of a valid subtype                     \n                        if ((binex.operand2.type == this.anyType || this.checker.sourceIsAssignableToTarget(binex.operand2.type, targetMember.getType())) ||\n                            (binex.operand2.nodeType == NodeType.FuncDecl &&\n                            (<FuncDecl>binex.operand2).isAccessor() &&\n                                this.typeFromAccessorFuncDecl(<FuncDecl>binex.operand2) == targetMember.getType())) {\n                                    // set the field type to the proper contextual type\n                                    // this is especially important in the 'any' case, so that\n                                    // fields typed to 'any' aren't accepted for contextual typing,\n                                    // but never properly set to the target type\n                            binex.operand1.type = targetMember.getType();\n                        }\n                    }\n                    else {\n                        // here we sub in 'any' for 'undefined' to account for field initialization to\n                        // 'undefined'  \n                        binex.operand2.type = binex.operand2.type == this.checker.undefinedType ? this.anyType : binex.operand2.type;\n                    }\n\n                    // the field symbol hasn't been set by a getter or setter\n                    if (fieldSymbol == null) {\n                        var memberType = binex.operand2.type;\n                        var field = new ValueLocation();\n                        fieldSymbol =\n                            new FieldSymbol(text, id.minChar,\n                                            this.checker.locationInfo.unitIndex,\n                                            true, field);\n                        fieldSymbol.flags |= SymbolFlags.Property;\n                        field.symbol = fieldSymbol;\n                        fieldSymbol.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        field.typeLink = new TypeLink();\n                        field.typeLink.type = memberType;\n                        resultType.members.publicMembers.add(text, fieldSymbol);\n                    }\n                    fieldSymbol.isObjectLitField = true;\n                }\n            }\n\n            this.thisType = prevThisType;\n            objectLit.type = resultType;\n            if (targetType) {\n                objectLit.targetType = targetType;\n            }\n        }\n\n        public typeCheckArrayLit(arrayLit: UnaryExpression): void {\n            var elements = <ASTList>arrayLit.operand;\n            var elementType = this.anyType;\n            var targetElementType: Type = null;\n            var comparisonInfo = new TypeComparisonInfo();\n            comparisonInfo.onlyCaptureFirstError = true;\n\n            // if the target type is an array type, extract the element type\n            if (this.checker.hasTargetType()) {\n                var targetType = this.checker.getTargetTypeContext().contextualType;\n                if (targetType.elementType) {\n                    targetElementType = targetType.elementType;\n                }\n            }\n\n            if (elements) {\n\n                var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;\n\n                this.inArrayElementTypeCheck = true;\n                this.checker.typeCheckWithContextualType(targetElementType, this.checker.inProvisionalTypecheckMode(), targetElementType != null, elements);\n                this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;\n\n                elementType = elements.members[0].type;\n\n                var collection: ITypeCo";
var v27614 = v27615 + 'llection = {\n                    getLength: () => { return elements.members.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { elements.members[index].type = type; },\n                    getTypeAtIndex: (index: number) => { return elements.members[index].type; }\n                }\n\n                elementType = this.checker.findBestCommonType(elementType, targetElementType, collection, false, comparisonInfo);\n\n                // if the array type is the undefined type, we should widen it to any\n                // if it\'s of the null type, only widen it if it\'s not in a nested array element, so as not to \n                // short-circuit any checks for the best common type\n                if (elementType == this.checker.undefinedType || (!prevInArrayElemTypeCheck && elementType == this.nullType)) {\n                    elementType = this.anyType;\n                }\n            }\n            if (!elementType) {\n                var emsg = "Incompatible types in array literal expression";\n                if (!comparisonInfo.message) {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg);\n                }\n                else {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg + ": " + comparisonInfo.message);\n                }\n                elementType = this.anyType;\n            }\n            else if (targetElementType) {\n                // for the case of zero-length \'any\' arrays, we still want to set the contextual type, if\n                // need be\n                if (this.checker.sourceIsAssignableToTarget(elementType, targetElementType)) {\n                    elementType = targetElementType;\n                }\n            }\n\n            arrayLit.type = this.checker.makeArrayType(elementType);\n\n        }\n\n        public checkForVoidConstructor(type: Type, ast: AST) {\n            if (type &&\n                type.construct &&\n                type.construct.signatures.length > 0) {\n\n                for (var i = 0; i < type.construct.signatures.length; i++) {\n                    if (type.construct.signatures[i].returnType.type == this.checker.voidType) {\n                        this.checker.errorReporter.simpleError(ast, "Constructors may not have a return type of \'void\'");\n                        break;\n                    }\n                }\n            }\n        }\n\n        // REVIEW: the code below could set the signature type of the function to the current return\n        // type, which would have a benefit of reducing the risk of a recursive typecheck scenario, but is\n        // is technically wrong - mergeOrdered will only work properly if the best common supertype\n        // comes before any sibling types.  This would mean that if a function, "color()", returned\n        // three types (in order) - "Red", "Blue", and "IColor", an "Incompatible return type" error \n        // would be triggered.  However, if "color()" returned (in order) "Red", "IColor" and "Blue"\n        // no error would be triggered, and the return type of the function would be "IColor"\n        public typeCheckReturn(returnStmt: ReturnStatement): ReturnStatement {\n\n            if (this.thisFnc) {\n                var targetType: Type = null;\n\n                // determine the target type\n                if (this.checker.hasTargetType()) {\n                    var tcContext = this.checker.getTargetTypeContext();\n                    var accessorType = tcContext.targetAccessorType;\n\n                    if (accessorType) {\n                        targetType = accessorType;\n                    }\n                    else {\n                        var targetSig = this.checker.getTargetTypeContext().targetSig;\n                        if (targetSig && targetSig.returnType.type != this.voidType) {\n                            targetType = targetSig.returnType.type;\n                        }\n                    }\n                }\n\n                if (returnStmt.returnExpression) {\n                    this.thisFnc.fncFlags |= FncFlags.HasReturnExpression;\n\n                    if (targetType == null && this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type && this.thisFnc.returnTypeAnnotation.type != this.voidType) {\n                        targetType = this.thisFnc.returnTypeAnnotation.type;\n                    }\n\n                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), targetType != null, returnStmt.returnExpression);\n\n                    var expectedReturnType: Type =\n                        (this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ?\n                            this.thisFnc.returnTypeAnnotation.type :\n                            targetType;\n                    if (expectedReturnType) {\n                        if (expectedReturnType == this.voidType && returnStmt.returnExpression.type != this.voidType) {\n                            this.checker.errorReporter.simp';
var v27613 = v27614 + 'leError(returnStmt,\n                                                              "Return with value expression in void function");\n\n                            // even though we\'ve raised an error, use the more specific type\n                            returnStmt.type = returnStmt.returnExpression.type;\n                        }\n                        else {\n                            returnStmt.returnExpression = this.cast(returnStmt.returnExpression, expectedReturnType);\n                            returnStmt.type = expectedReturnType;\n                        }\n                    }\n                    else {\n                        if (targetType) {\n                            if (returnStmt.returnExpression.type != this.voidType) {\n                                returnStmt.returnExpression = this.cast(returnStmt.returnExpression, targetType);\n                            }\n                            else {\n                                returnStmt.returnExpression.type = targetType;\n                            }\n                        }\n                        returnStmt.type = returnStmt.returnExpression.type;\n                    }\n                    this.thisFnc.returnStatementsWithExpressions[this.thisFnc.returnStatementsWithExpressions.length] = returnStmt;\n                }\n                else {\n                    returnStmt.type = targetType == null ? this.checker.voidType : targetType; //((this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ? this.thisFnc.returnTypeAnnotation.type : this.checker.voidType) : targetType;\n                }\n            }\n\n            return returnStmt;\n        }\n\n        public typeCheckInstOf(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type == this.checker.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand1.type, this.objectInterfaceType)) &&\n                    (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.functionInterfaceType)))) {\n                this.checker.errorReporter.simpleError(ast, "The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type");\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckCommaOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public typeCheckLogOr(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (leftType == this.checker.anyType || rightType == this.checker.anyType) {\n                binex.type = this.checker.anyType;\n            }\n            else if (leftType == this.checker.booleanType) {\n                if (rightType == this.checker.booleanType) {\n                    binex.type = this.checker.booleanType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType == this.checker.numberType) {\n                if (rightType == this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType == this.checker.stringType) {\n                if (rightType == this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    binex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    binex.type = leftType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            return binex;\n        }\n\n        public typeCheckLogAnd(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public tryAddCandidates(signature: Signature, actuals: Type[]';
var v27612 = v27613 + ", exactCandidates: Signature[], conversionCandidates: Signature[], comparisonInfo: TypeComparisonInfo): void {\n            var lowerBound = signature.nonOptionalParameterCount; // required parameters\n            var upperBound = signature.parameters.length; // required and optional parameters\n            var formalLen = lowerBound;\n            var acceptable = false;\n\n            if ((actuals.length >= lowerBound) && (signature.hasVariableArgList || actuals.length <= upperBound)) {\n                formalLen = (signature.hasVariableArgList ? signature.parameters.length : actuals.length);\n                acceptable = true;\n            }\n\n            var repeatType: Type = null;\n\n            if (acceptable || signature.hasVariableArgList) {\n                // assumed structure here is checked when signature is formed\n                if (signature.hasVariableArgList) {\n                    formalLen -= 1;\n                    repeatType = (<ParameterSymbol>signature.parameters[formalLen]).parameter.typeLink.type;\n                    repeatType = repeatType.elementType;\n                    acceptable = actuals.length >= formalLen;\n                }\n                var len = actuals.length;\n\n                var exact = acceptable;\n                var convert = acceptable;\n                for (var i = 0; i < len; i++) {\n                    var typeA: Type;\n                    if (i < formalLen) {\n                        typeA =\n                            (<ParameterSymbol>signature.parameters[i]).parameter.typeLink.type;\n                    }\n                    else {\n                        typeA = repeatType;\n                    }\n\n                    var typeB = actuals[i];\n                    if (!typeA || !typeB || !(this.checker.typesAreIdentical(typeA, typeB))) {\n                        exact = false;\n                    }\n                    // is the argument assignable to the parameter?\n                    if (!this.checker.sourceIsAssignableToTarget(typeB, typeA, comparisonInfo)) {\n                        convert = false;\n                    }\n                    if (!(exact || convert)) {\n                        break;\n                    }\n                }\n                if (exact) {\n                    exactCandidates[exactCandidates.length] = signature;\n                }\n                else if (convert && (exactCandidates.length == 0)) {\n                    conversionCandidates[conversionCandidates.length] = signature;\n                }\n\n            }\n        }\n\n        public resolveOverload(application: AST, group: SignatureGroup): Signature {\n            var rd = this.resolutionDataCache.getResolutionData();\n            var actuals = rd.actuals;\n            var exactCandidates = rd.exactCandidates;\n            var conversionCandidates = rd.conversionCandidates;\n            var candidate: Signature = null;\n            var hasOverloads = group.signatures.length > 1;\n            var comparisonInfo = new TypeComparisonInfo();\n            var args: ASTList = null;\n            var target: AST = null;\n\n            if (application.nodeType == NodeType.Call || application.nodeType == NodeType.New) {\n                var callEx = <CallExpression>application;\n                args = callEx.arguments;\n                target = callEx.target;\n                if (callEx.arguments) {\n                    var len = callEx.arguments.members.length;\n                    for (var i = 0; i < len; i++) {\n                        actuals[i] = callEx.arguments.members[i].type;\n                    }\n                }\n            }\n            else if (application.nodeType == NodeType.Index) {\n                var binExp = <BinaryExpression>application;\n                target = binExp.operand1;\n                args = new ASTList();\n                args.members[0] = binExp.operand2;\n                actuals[0] = binExp.operand2.type;\n            }\n\n            for (var j = 0, groupLen = group.signatures.length; j < groupLen; j++) {\n                var signature = group.signatures[j];\n                if (hasOverloads && signature == group.definitionSignature && !this.checker.canCallDefinitionSignature) {\n                    continue;\n                }\n                if (!signature.returnType.type && signature.declAST &&\n                    (signature.typeCheckStatus != TypeCheckStatus.Finished)) {\n                    this.typeCheckFunction(signature.declAST);\n                }\n                this.tryAddCandidates(signature, actuals, exactCandidates, conversionCandidates, comparisonInfo);\n            }\n            if (exactCandidates.length == 0) {\n\n                var applicableCandidates = this.checker.getApplicableSignatures(conversionCandidates, args, comparisonInfo);\n                if (applicableCandidates.length > 0) {\n                    var candidateInfo = this.checker.findMostApplicableSignature(applicableCandidates, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorR";
var v27611 = v27612 + 'eporter.simpleError(target, "Ambiguous call expression - could not choose overload");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    var emsg = "Supplied parameters do not match any signature of call target";\n                    if (comparisonInfo.message) {\n                        this.checker.errorReporter.simpleError(target, emsg + ":\\n\\t" + comparisonInfo.message);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(target, emsg);\n                    }\n                }\n            }\n            else {\n                if (exactCandidates.length > 1) {\n                    var applicableSigs: ApplicableSignature[] = [];\n                    for (var i = 0; i < exactCandidates.length; i++) {\n                        applicableSigs[i] = { signature: exactCandidates[i], hadProvisionalErrors: false };\n                    }\n                    var candidateInfo = this.checker.findMostApplicableSignature(applicableSigs, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorReporter.simpleError(target, "Ambiguous call expression - could not choose overload");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    candidate = exactCandidates[0];\n                }\n            }\n\n            this.resolutionDataCache.returnResolutionData(rd);\n            return candidate;\n        }\n\n        public typeCheckNew(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n\n            callEx.target = this.typeCheck(callEx.target);\n            var target = callEx.target;\n            if (target.type.construct || target.type.call) {\n                this.preTypeCheckCallArgs(callEx.arguments);\n            }\n            else {\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n\n            if (target.type == this.anyType) {\n                callEx.type = this.anyType;\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n            else {\n                if (target.type.construct) {\n                    var signature = this.resolveOverload(callEx, target.type.construct);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if (signature.returnType.type == this.voidType) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else if (target.type.call) {\n                    var signature = this.resolveOverload(callEx, target.type.call);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if ((signature.returnType.type == this.voidType) || (signature.returnType.type == this.anyType)) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(callEx.target,\n                           "new expression only valid on constructors");\n                    }\n                }\n                else if (target.type.elementType) {\n                    callEx.type = target.type;\n                }\n                else {\n                    this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    callEx.type = this.anyType;\n                }\n            }\n\n            this.postTypeCheckCallArgs(callEx);\n\n            return callEx;\n        }\n\n        // Typecheck all args that cannot be affected by contextual typing of overloads\n        public preTypeCheckCallArgs(args: ASTList) {\n\n            if (!args) {\n                return;\n            }\n\n            for (var i = 0; i < args.members.length; i++) {\n                switch (args.members[i].nodeType) {\n                    case NodeType.FuncDecl:\n                    case NodeType.ObjectLit:\n                    case NodeType.ArrayLit:\n                        continue;\n                    default:\n                        this.typeCheck(args.members[i]);\n                        break;\n                }\n            }\n        }\n\n        public postTypeCheckCallArgs(callEx: CallExpression) {\n\n            var acceptedTargetType = false;\n            var i = 0;\n\n            if (callEx.target &&\n                callEx.target.type &&\n                callEx.signature &&\n                callEx.arguments) {\n                var sig = callEx.signature;\n\n                if (sig && callEx.arguments.members.length >= si';
var v27610 = v27611 + 'g.nonOptionalParameterCount) {\n                    acceptedTargetType = true;\n                    var targetType: Type = null;\n                    var nonVarArgFormalParamLength = sig.hasVariableArgList ? sig.parameters.length - 1 : sig.parameters.length;\n                    var nonVarArgActualParamLength = callEx.arguments.members.length < nonVarArgFormalParamLength ? callEx.arguments.members.length : nonVarArgFormalParamLength\n\n                    for (i = 0; i < nonVarArgActualParamLength; i++) {\n                        targetType = sig.parameters[i].getType();\n                        switch (callEx.arguments.members[i].nodeType) {\n                            case NodeType.FuncDecl:\n                            case NodeType.ObjectLit:\n                            case NodeType.ArrayLit:\n                                this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), !sig.parameters[i].declAST.isParenthesized, callEx.arguments.members[i]);\n                                break;\n                        }\n                    }\n\n                    if (sig.hasVariableArgList) {\n                        var varArgParamIndex = sig.nonOptionalParameterCount - 1;\n                        targetType = sig.parameters[varArgParamIndex].getType();\n                        if (targetType) {\n                            targetType = targetType.elementType;\n                        }\n                        var isParenthesized = !sig.parameters[varArgParamIndex].declAST.isParenthesized;\n                        for (i = nonVarArgActualParamLength; i < callEx.arguments.members.length; i++) {\n                            switch (callEx.arguments.members[i].nodeType) {\n                                case NodeType.FuncDecl:\n                                case NodeType.ObjectLit:\n                                case NodeType.ArrayLit:\n                                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), isParenthesized, callEx.arguments.members[i]);\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!acceptedTargetType && callEx.arguments) {\n                this.checker.killCurrentContextualType();\n\n                for (i = 0; i < callEx.arguments.members.length; i++) {\n                    switch (callEx.arguments.members[i].nodeType) {\n                        case NodeType.FuncDecl:\n                        case NodeType.ObjectLit:\n                        case NodeType.ArrayLit:\n                            this.typeCheck(callEx.arguments.members[i]);\n                            break;\n                        default:\n                            continue;\n                    }\n                }\n            }\n        }\n\n        public typeCheckCall(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n            if (this.checker.styleSettings.newMustBeUsed && (ast.nodeType == NodeType.New)) {\n                if (hasFlag(ast.flags, ASTFlags.IsStatement)) {\n                    this.checker.errorReporter.styleError(ast, "use of new expression as a statement");\n                }\n            }\n            else if ((!this.checker.styleSettings.evalOK) && (ast.nodeType == NodeType.Call)) {\n                if ((callEx.target.nodeType == NodeType.Name) && ((<Identifier>callEx.target).text == "eval")) {\n                    this.checker.errorReporter.styleError(callEx, "eval not permitted");\n                }\n            }\n\n            if (callEx.target.nodeType == NodeType.FuncDecl) {\n                (<FuncDecl>callEx.target).isInlineCallLiteral = true;\n            }\n\n            var prevInSuperCall = this.inSuperCall;\n\n            if (callEx.target.nodeType == NodeType.Super) {\n                this.inSuperCall = true;\n            }\n\n            callEx.target = this.typeCheck(callEx.target);\n            this.preTypeCheckCallArgs(callEx.arguments);\n\n            var target = callEx.target;\n\n            if ((target.type == null) || (target.type == this.anyType) || (this.functionInterfaceType && target.type == this.functionInterfaceType)) {\n                callEx.type = this.anyType;\n            }\n            else {\n                var fnType = target.type;\n                if (fnType.call) {\n                    var signature = this.resolveOverload(callEx, fnType.call);\n                    if (signature == null) {\n                        callEx.type = this.anyType;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else {\n                    // track calls to class base class\n                    if (callEx.target.nodeType == NodeType.Super &&\n                        this.thisFnc &&\n                        this.thisFnc.isConstructor &&\n        ';
var v27609 = v27610 + '                hasFlag(this.thisFnc.fncFlags, FncFlags.ClassMethod)) {\n\n                            // Need to use the class type for the construct signature, not the instance type\n                        var signature = fnType.symbol.type.construct ? this.resolveOverload(callEx, fnType.symbol.type.construct) : null;\n\n                        if (signature == null) {\n                            callEx.type = this.anyType;\n                        }\n                        else {\n                            callEx.flags |= ASTFlags.ClassBaseConstructorCall;\n                            callEx.type = signature.returnType.type;\n                            callEx.signature = signature;\n                        }\n                    }\n                    else {\n                        callEx.type = this.anyType;\n                        this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    }\n                }\n            }\n            this.postTypeCheckCallArgs(callEx);\n\n            this.inSuperCall = prevInSuperCall;\n\n            return callEx;\n        }\n\n        public assignScopes(ast: AST) {\n            var script = <Script>ast;\n            this.checker.locationInfo = script.locationInfo;\n            var globalChain = new ScopeChain(this.checker.gloMod, null, this.globalScope);\n            var context = new AssignScopeContext(globalChain, this, [this.checker.currentModDecl]);\n            getAstWalkerFactory().walk(ast, preAssignScopes, postAssignScopes, null, context);\n        }\n\n        public findMemberScope(enclosingScopeContext: EnclosingScopeContext, matchFlag: ASTFlags) {\n            var enclosingScope = enclosingScopeContext.getScope();\n            var pos = enclosingScopeContext.pos - enclosingScopeContext.getScriptFragmentPosition();\n            var scriptFragment = enclosingScopeContext.getScriptFragment();\n\n            var memContext = new MemberScopeContext(this, pos, matchFlag);\n            memContext.scope = enclosingScope;\n            if (scriptFragment.nodeType == NodeType.Name) {\n                return scriptFragment.type.getMemberScope(this);\n            }\n            else {\n                getAstWalkerFactory().walk(scriptFragment, preFindMemberScope, null, null, memContext);\n                if (memContext.ast && enclosingScopeContext.enclosingClassDecl && memContext.ast.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {\n                    enclosingScopeContext.publicsOnly = false;\n                }\n                if (memContext.type) {\n                    return memContext.type.getMemberScope(this);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n\n        public findMemberScopeAt(enclosingScopeContext: EnclosingScopeContext) {\n            return this.findMemberScope(enclosingScopeContext, ASTFlags.DotLHS);\n        }\n\n        public findMemberScopeAtFullAst(enclosingScopeContext: EnclosingScopeContext) {\n            var matchFlag = ASTFlags.DotLHS;\n            var pos = enclosingScopeContext.pos;\n            var astResult: AST = null;\n\n            var preFindMemberScopeFullAst = function (ast: AST, parent: AST, walker: IAstWalker) {\n                if (isValidAstNode(ast)) {\n                    // Note: pos == ast.limChar       in case of incomplete code (e.g. "foo.")\n                    // Note: (pos - 1) == ast.limChar in case of complete code (e.g. "foo.bar")\n                    if (hasFlag(ast.flags, matchFlag) && (pos == ast.limChar || (pos - 1) == ast.limChar)) {\n                        astResult = ast;\n                        walker.options.stopWalk();\n                    }\n\n                    // Stop traversal if range does not contain position\n                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);\n                }\n                return ast;\n            }\n\n            var preFindMemberScopeFullAstFuzy = function (ast: AST, parent: AST, walker: IAstWalker) {\n                if (isValidAstNode(ast)) {\n                    if (hasFlag(ast.flags, matchFlag) && ((ast.minChar < pos) && (pos <= ast.limChar))) {\n                        astResult = ast;\n                    }\n\n                    // Stop traversal if range does not contain position\n                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);\n                }\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAst);\n\n            if (astResult == null) {\n                // Perform a more "fusy" match. This is because the limChar of AST nodes is sometimes\n                // not what we expect, for example:\n                //   foo./*comment*/;\n                // In this case, limChar points to ";" instead of "." (because of the trailing comment).\n                getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAstFuzy)';
var v27608 = v27609 + ";\n            }\n\n            if (astResult &&\n                enclosingScopeContext.enclosingClassDecl &&\n                astResult.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {\n                enclosingScopeContext.publicsOnly = false;\n            }\n\n            if (astResult && astResult.type) {\n                return astResult.type.getMemberScope(this);\n            }\n            else {\n                return null;\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path='diagnostics.ts' />\n///<reference path='flags.ts' />\n///<reference path='nodeTypes.ts' />\n///<reference path='hashTable.ts' />\n///<reference path='ast.ts' />\n///<reference path='astWalker.ts' />\n///<reference path='astWalkerCallback.ts' />\n///<reference path='astPath.ts' />\n///<reference path='astLogger.ts' />\n///<reference path='binder.ts' />\n///<reference path='base64.ts' />\n///<reference path='sourceMapping.ts' />\n///<reference path='emitter.ts' />\n///<reference path='errorReporter.ts' />\n///<reference path='parser.ts' />\n///<reference path='printContext.ts' />\n///<reference path='scanner.ts' />\n///<reference path='scopeAssignment.ts' />\n///<reference path='scopeWalk.ts' />\n///<reference path='signatures.ts' />\n///<reference path='symbols.ts' />\n///<reference path='symbolScope.ts' />\n///<reference path='tokens.ts' />\n///<reference path='typeChecker.ts' />\n///<reference path='typeCollection.ts' />\n///<reference path='typeFlow.ts' />\n///<reference path='types.ts' />\n///<reference path='pathUtils.ts' />\n///<reference path='referenceResolution.ts' />\n///<reference path='precompile.ts' />\n///<reference path='incrementalParser.ts' />\n///<reference path='declarationEmitter.ts' />\n\nmodule TypeScript {\n\n    export enum UpdateUnitKind {\n        Unknown,\n        NoEdits,\n        EditsInsideSingleScope,\n    }\n\n    export class ScriptEditRange {\n        constructor (public minChar: number,\n                     public limChar: number,\n                     public delta: number) { }\n\n        static unknown(): ScriptEditRange {\n            return new ScriptEditRange(-1, -1, -1);\n        }\n\n        public isUnknown() {\n            return this.minChar === -1 && this.limChar === -1 && this.delta === -1;\n        }\n\n        public containsPosition(pos: number) {\n            return (this.minChar <= pos && pos < this.limChar)\n                || (this.minChar <= pos && pos < this.limChar + this.delta);\n        }\n\n        public toString(): string {\n            return \"editRange(minChar=\" + this.minChar + \", limChar=\" + this.limChar + \", delta=\" + this.delta + \")\";\n        }\n    }\n\n    export class UpdateUnitResult {\n\n        constructor (public kind: UpdateUnitKind, public unitIndex: number, public script1: Script, public script2: Script) { }\n\n        public scope1: AST = null;\n        public scope2: AST = null;\n        public editRange: ScriptEditRange = null;\n        public parseErrors: ErrorEntry[] = [];\n\n        static noEdits(unitIndex: number) {\n            return new UpdateUnitResult(UpdateUnitKind.NoEdits, unitIndex, null, null);\n        }\n\n        static unknownEdits(script1: Script, script2: Script, parseErrors: ErrorEntry[]) {\n            var result = new UpdateUnitResult(UpdateUnitKind.Unknown, script1.locationInfo.unitIndex, script1, script2);\n            result.parseErrors = parseErrors;\n            return result;\n        }\n\n        static singleScopeEdits(script1: Script, script2: Script, scope1: AST, scope2: AST, editRange: ScriptEditRange, parseErrors: ErrorEntry[]) {\n            var result = new UpdateUnitResult(UpdateUnitKind.EditsInsideSingleScope, script1.locationInfo.unitIndex, script1, script2);\n            result.scope1 = scope1;\n            result.scope2 = scope2;\n            result.editRange = editRange;\n            result.parseErrors = parseErrors;\n            return result;\n        }\n    }\n\n    export class ErrorEntry {\n        constructor (public unitIndex: number,\n                    public minChar: number,\n                    public limChar: number,\n                    public message: string) { }\n    }\n\n    export var defaultSettings = new CompilationSettings();\n\n    export interface EmitterIOHost {\n        // function that can even create a folder structure if needed\n        createFile(path: string, useUTF8?: bool): ITextWriter;\n\n        // function to check if file exists on the disk\n        fileExi";
var v27607 = v27608 + 'sts(path: string): bool;\n\n        // Function to check if the directory exists on the disk\n        directoryExists(path: string): bool;\n\n        // Resolves the path\n        resolvePath(path: string): string;\n    }\n\n    export class TypeScriptCompiler {\n        public parser = new Parser();\n        public typeChecker: TypeChecker;\n        public typeFlow: TypeFlow = null;\n        public scripts = new ASTList();\n        public units: LocationInfo[] = new LocationInfo[];\n        public errorReporter: ErrorReporter;\n\n        public persistentTypeState: PersistentGlobalTypeState;\n\n\n        public emitSettings: EmitOptions;\n\n        constructor (public errorOutput: ITextWriter, public logger: ILogger = new NullLogger(), public settings: CompilationSettings = defaultSettings) {\n            this.errorReporter = new ErrorReporter(this.errorOutput);\n            this.persistentTypeState = new PersistentGlobalTypeState(this.errorReporter);\n            this.errorReporter.parser = this.parser;\n            this.initTypeChecker(this.errorOutput);\n\n            this.parser.style_requireSemi = this.settings.styleSettings.requireSemi;\n            this.parser.style_funcInLoop = this.settings.styleSettings.funcInLoop;\n            this.parser.inferPropertiesFromThisAssignment = this.settings.inferPropertiesFromThisAssignment;\n            this.emitSettings = new EmitOptions(this.settings);\n            codeGenTarget = settings.codeGenTarget;\n        }\n\n        public timeFunction(funcDescription: string, func: () => any): any {\n            return TypeScript.timeFunction(this.logger, funcDescription, func);\n        }\n\n        public initTypeChecker(errorOutput: ITextWriter) {\n            // The initial "refresh" initializes the persistent type state\n            this.persistentTypeState.refreshPersistentState();\n            this.typeChecker = new TypeChecker(this.persistentTypeState);\n            this.typeChecker.errorReporter = this.errorReporter;\n\n            // REVIEW: These properties should be moved out of the typeCheck object\n            // ideally, CF should be a separate pass, independent of control flow\n            this.typeChecker.checkControlFlow = this.settings.controlFlow;\n            this.typeChecker.checkControlFlowUseDef = this.settings.controlFlowUseDef;\n            this.typeChecker.printControlFlowGraph = this.settings.printControlFlow;\n\n            this.typeChecker.errorsOnWith = this.settings.errorOnWith;\n            this.typeChecker.styleSettings = this.settings.styleSettings;\n            this.typeChecker.canCallDefinitionSignature = this.settings.canCallDefinitionSignature;\n\n            this.errorReporter.checker = this.typeChecker;\n            this.setErrorOutput(this.errorOutput);\n        }\n\n        public setErrorOutput(outerr) {\n            this.errorOutput = outerr;\n            this.errorReporter.setErrOut(outerr);\n            this.parser.outfile = outerr;\n        }\n\n        public emitCommentsToOutput() {\n            this.emitSettings = new EmitOptions(this.settings);\n        }\n\n        public setErrorCallback(fn: (minChar: number, charLen: number, message: string,\n            unitIndex: number) =>void ) {\n            this.parser.errorCallback = fn;\n        }\n\n        public updateUnit(prog: string, filename: string, setRecovery: bool) {\n            return this.updateSourceUnit(new StringSourceText(prog), filename, setRecovery);\n        }\n\n        public updateSourceUnit(sourceText: ISourceText, filename: string, setRecovery: bool): bool {\n            return this.timeFunction("updateSourceUnit(" + filename + ")", () => {\n                var updateResult = this.partialUpdateUnit(sourceText, filename, setRecovery);\n                return this.applyUpdateResult(updateResult);\n            });\n        }\n\n        // Apply changes to compiler state.\n        // Return "false" if the change is empty and nothing was updated.\n        public applyUpdateResult(updateResult: UpdateUnitResult): bool {\n            switch (updateResult.kind) {\n                case UpdateUnitKind.NoEdits:\n                    return false;\n\n                case UpdateUnitKind.Unknown:\n                    this.scripts.members[updateResult.unitIndex] = updateResult.script2;\n                    this.units[updateResult.unitIndex] = updateResult.script2.locationInfo;\n                    for (var i = 0, len = updateResult.parseErrors.length; i < len; i++) {\n                        var e = updateResult.parseErrors[i];\n                        if (this.parser.errorCallback) {\n                            this.parser.errorCallback(e.minChar, e.limChar - e.minChar, e.message, e.unitIndex);\n                        }\n                    }\n                    return true;\n\n                case UpdateUnitKind.EditsInsideSingleScope:\n                    new IncrementalParser(this.logger).mergeTrees(updateResult);\n                    return true;\n            }\n        }\n\n        public partialUpdateUnit(sourceText: ISourceText, filename: string, setRecovery:';
var v27606 = v27607 + ' bool): UpdateUnitResult {\n            return this.timeFunction("partialUpdateUnit(" + filename + ")", () => {\n                for (var i = 0, len = this.units.length; i < len; i++) {\n                    if (this.units[i].filename == filename) {\n                        if ((<Script>this.scripts.members[i]).isResident) {\n                            return UpdateUnitResult.noEdits(i);\n                        }\n\n                        if (setRecovery) {\n                            this.parser.setErrorRecovery(null);\n                        }\n\n                        var updateResult: UpdateUnitResult;\n\n                        // Capture parsing errors so that they are part of "updateResult"\n                        var parseErrors: ErrorEntry[] = [];\n                        var errorCapture = (minChar: number, charLen: number, message: string, unitIndex: number): void => {\n                            parseErrors.push(new ErrorEntry(unitIndex, minChar, minChar + charLen, message));\n                        };\n                        var svErrorCallback = this.parser.errorCallback;\n                        if (svErrorCallback)\n                            this.parser.errorCallback = errorCapture;\n\n                        var oldScript = <Script>this.scripts.members[i];\n                        var newScript = this.parser.parse(sourceText, filename, i);\n\n                        if (svErrorCallback)\n                            this.parser.errorCallback = svErrorCallback;\n\n                        updateResult = UpdateUnitResult.unknownEdits(oldScript, newScript, parseErrors);\n\n                        return updateResult;\n                    }\n                }\n                throw new Error("Unknown file \\"" + filename + "\\"");\n            });\n        }\n\n        public addUnit(prog: string, filename: string, keepResident? = false, referencedFiles?: IFileReference[] = []): Script {\n            return this.addSourceUnit(new StringSourceText(prog), filename, keepResident, referencedFiles);\n        }\n\n        public addSourceUnit(sourceText: ISourceText, filename: string, keepResident:bool, referencedFiles?: IFileReference[] = []): Script {\n            return this.timeFunction("addSourceUnit(" + filename + ", " + keepResident + ")", () => {\n                var script: Script = this.parser.parse(sourceText, filename, this.units.length, AllowedElements.Global);\n                script.referencedFiles = referencedFiles;\n                script.isResident = keepResident;\n                this.persistentTypeState.setCollectionMode(keepResident ? TypeCheckCollectionMode.Resident : TypeCheckCollectionMode.Transient);\n                var index = this.units.length;\n                this.units[index] = script.locationInfo;\n                this.typeChecker.collectTypes(script);\n                this.scripts.append(script);\n                return script\n            });\n        }\n\n        public parseUnit(prog: string, filename: string) {\n            return this.parseSourceUnit(new StringSourceText(prog), filename);\n        }\n\n        public parseSourceUnit(sourceText: ISourceText, filename: string) {\n            this.parser.setErrorRecovery(this.errorOutput);\n            var script: Script = this.parser.parse(sourceText, filename, 0);\n\n            var index = this.units.length;\n            this.units[index] = script.locationInfo;\n            this.typeChecker.collectTypes(script);\n            this.scripts.append(script);\n        }\n\n        public typeCheck() {\n            return this.timeFunction("typeCheck()", () => {\n                var binder = new Binder(this.typeChecker);\n                this.typeChecker.units = this.units;\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.globals);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.ambientGlobals);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.globalTypes);\n                binder.bind(this.typeChecker.globalScope, this.typeChecker.ambientGlobalTypes);\n                this.typeFlow = new TypeFlow(this.logger, this.typeChecker.globalScope, this.parser, this.typeChecker);\n                var i = 0;\n                var script: Script = null;\n                var len = this.scripts.members.length;\n\n\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Resident);\n                // first, typecheck resident "lib" scripts, if necessary\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (!script.isResident || script.hasBeenTypeChecked) { continue; }\n\n                    this.typeFlow.assignScopes(script);\n                    this.typeFlow.initLibs();\n                }\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (!script.isResident || script.hasBeenTypeChecked) { continue; }\n\n                    this.typeFlow.typeCheck(script);';
var v27605 = v27606 + '\n                    script.hasBeenTypeChecked = true;\n                }\n\n                // next typecheck scripts that may change\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\n                len = this.scripts.members.length;\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (script.isResident) { continue; }\n                    this.typeFlow.assignScopes(script);\n                    this.typeFlow.initLibs();\n                }\n                for (i = 0; i < len; i++) {\n                    script = <Script>this.scripts.members[i];\n                    if (script.isResident) { continue; }\n                    this.typeFlow.typeCheck(script);\n                }\n\n                return null;\n            });\n        }\n\n        public cleanASTTypesForReTypeCheck(ast: AST) {\n            function cleanASTType(ast: AST, parent: AST): AST {\n                ast.type = null;\n                if (ast.nodeType == NodeType.VarDecl) {\n                    var vardecl = <VarDecl>ast;\n                    vardecl.sym = null;\n                }\n                else if (ast.nodeType == NodeType.ArgDecl) {\n                    var argdecl = <ArgDecl>ast;\n                    argdecl.sym = null;\n                }\n                else if (ast.nodeType == NodeType.Name) {\n                    var name = <Identifier>ast;\n                    name.sym = null;\n                }\n                else if (ast.nodeType == NodeType.FuncDecl) {\n                    var funcdecl = <FuncDecl>ast;\n                    funcdecl.signature = null;\n                    funcdecl.freeVariables = new Symbol[]\n                    funcdecl.symbols = null;\n                    funcdecl.accessorSymbol = null;\n                    funcdecl.scopeType = null;\n                }\n                else if (ast.nodeType == NodeType.ModuleDeclaration) {\n                    var modDecl = <ModuleDeclaration>ast;\n                    modDecl.mod = null;\n                }\n                else if (ast.nodeType == NodeType.With) {\n                    (<WithStatement>ast).withSym = null;\n                }\n                else if (ast.nodeType == NodeType.Catch) {\n                    (<Catch>ast).containedScope = null;\n                }\n                return ast;\n            }\n            TypeScript.getAstWalkerFactory().walk(ast, cleanASTType);\n        }\n\n        public cleanTypesForReTypeCheck() {\n            return this.timeFunction("cleanTypesForReTypeCheck()", () => {\n                for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                    var script = this.scripts.members[i];\n                    if ((<Script>script).isResident) {\n                        continue;\n                    }\n                    this.cleanASTTypesForReTypeCheck(script);\n                    this.typeChecker.collectTypes(script);\n                }\n\n                return null;\n            });\n        }\n\n        // Return "true" if the incremental typecheck was successful\n        // Return "false" if incremental typecheck failed, requiring a full typecheck\n        public attemptIncrementalTypeCheck(updateResult: TypeScript.UpdateUnitResult): bool {\n            return this.timeFunction("attemptIncrementalTypeCheck()", () => {\n                // updateResult.kind == editsInsideFunction\n                // updateResult.scope1 == old function\n                // updateResult.scope2 == new function\n                //REVIEW: What about typecheck errors? How do we replace the old ones with the new ones?\n                return false;\n            });\n        }\n\n        public reTypeCheck() {\n            return this.timeFunction("reTypeCheck()", () => {\n                CompilerDiagnostics.analysisPass++;\n                this.initTypeChecker(this.errorOutput);\n                this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\n                this.cleanTypesForReTypeCheck();\n                return this.typeCheck();\n            });\n        }\n\n        private isDynamicModuleCompilation() {\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (!script.isDeclareFile && script.topLevelMod != null) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private updateCommonDirectoryPath() {\n            var commonComponents: string[] = [];\n            var commonComponentsLength = -1;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (script.emitRequired(this.emitSettings)) {\n                    var fileName = script.locationInfo.filename;\n                    var fileComponents = filePathComponents(fileName);\n                    if (commonComponentsLength == -1) {\n            ';
var v27604 = v27605 + '            // First time at finding common path\n                        // So common path = directory of file\n                        commonComponents = fileComponents;\n                        commonComponentsLength = commonComponents.length;\n                    } else {\n                        var updatedPath = false;\n                        for (var j = 0; j < commonComponentsLength && j < fileComponents.length; j++) {\n                            if (commonComponents[j] != fileComponents[j]) {\n                                // The new components = 0 ... j -1\n                                commonComponentsLength = j;\n                                updatedPath = true;\n\n                                if (j == 0) {\n                                    // Its error to not have common path\n                                    this.errorReporter.emitterError(null, "Cannot find the common subdirectory path for the input files");\n                                    return;\n                                }\n\n                                break;\n                            }\n                        }\n\n                        // If the fileComponent path completely matched and less than already found update the length\n                        if (!updatedPath && fileComponents.length < commonComponentsLength) {\n                            commonComponentsLength = fileComponents.length;\n                        }\n                    }\n                }\n            }\n\n            this.emitSettings.commonDirectoryPath = commonComponents.slice(0, commonComponentsLength).join("/") + "/";\n            if (this.emitSettings.outputOption.charAt(this.emitSettings.outputOption.length - 1) != "/") {\n                this.emitSettings.outputOption += "/";\n            }\n        }\n\n        public parseEmitOption(ioHost: EmitterIOHost) {\n            this.emitSettings.ioHost = ioHost;\n            if (this.emitSettings.outputOption == "") {\n                this.emitSettings.outputMany = true;\n                this.emitSettings.commonDirectoryPath = "";\n                return;\n            }\n\n            this.emitSettings.outputOption = switchToForwardSlashes(this.emitSettings.ioHost.resolvePath(this.emitSettings.outputOption));\n\n            // Determine if output options is directory or file\n            if (this.emitSettings.ioHost.directoryExists(this.emitSettings.outputOption)) {\n                // Existing directory\n                this.emitSettings.outputMany = true;\n            } else if (this.emitSettings.ioHost.fileExists(this.emitSettings.outputOption)) {\n                // Existing file\n                this.emitSettings.outputMany = false;\n            }\n            else {\n                // New File/directory\n                this.emitSettings.outputMany = !isJSFile(this.emitSettings.outputOption);\n            }\n\n            // Verify if options are correct\n            if (this.isDynamicModuleCompilation() && !this.emitSettings.outputMany) {\n                this.errorReporter.emitterError(null, "Cannot compile dynamic modules when emitting into single file");\n            }\n\n            // Parse the directory structure\n            if (this.emitSettings.outputMany) {\n                this.updateCommonDirectoryPath();\n            }\n        }\n\n        public useUTF8ForFile(script: Script) {\n            if (this.emitSettings.outputMany) {\n                return this.outputScriptToUTF8(script);\n            } else {\n                return this.outputScriptsToUTF8(<Script[]>(this.scripts.members));\n            }\n        }\n\n        static mapToDTSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return getDeclareFilePath(fileName);\n        }\n\n        private canEmitDeclarations(script?: Script) {\n            if (!this.settings.generateDeclarationFiles) {\n                return false;\n            }\n\n            // If its already a declare file or is resident or does not contain body \n            if (!!script && (script.isDeclareFile || script.isResident || script.bod == null)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        public emitDeclarationsUnit(script: Script, reuseEmitter?: bool, declarationEmitter?: DeclarationEmitter) {\n            if (!this.canEmitDeclarations(script)) {\n                return null;\n            }\n\n            if (!declarationEmitter) {\n                var declareFileName = this.emitSettings.mapOutputFileName(script.locationInfo.filename, TypeScriptCompiler.mapToDTSFileName);\n                var declareFile = this.createFile(declareFileName, this.useUTF8ForFile(script));\n                declarationEmitter = new DeclarationEmitter(this.typeChecker, this.emitSettings, this.errorReporter);\n                declarationEmitter.setDeclarationFile(declareFile);\n            }\n\n            declarationEmitter.emitDeclarations(script);\n\n            if (!reuseEmitter) {\n                declarationEmitter.Close();\n                return null;\n            } else {';
var v27603 = v27604 + '\n                return declarationEmitter;\n            }\n        }\n\n        public emitDeclarations() {\n            if (!this.canEmitDeclarations()) {\n                return;\n            }\n\n            if (this.errorReporter.hasErrors) {\n                // There were errors reported, do not generate declaration file\n                return;\n            }\n\n            if (this.scripts.members.length == 0) {\n                return;\n            }\n\n            var declarationEmitter: DeclarationEmitter = null;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || declarationEmitter == null) {\n                    // Create or reuse file\n                    declarationEmitter = this.emitDeclarationsUnit(script, !this.emitSettings.outputMany);\n                } else {\n                    // Emit in existing emitter\n                    this.emitDeclarationsUnit(script, true, declarationEmitter);\n                }\n            }\n\n            if (declarationEmitter) {\n                declarationEmitter.Close();\n            }\n        }\n\n        static mapToFileNameExtension(extension: string, fileName: string, wholeFileNameReplaced: bool) {\n            if (wholeFileNameReplaced) {\n                // The complete output is redirected in this file so do not change extension\n                return fileName;\n            } else {\n                // Change the extension of the file\n                var splitFname = fileName.split(".");\n                splitFname.pop();\n                return splitFname.join(".") + extension;\n            }\n        }\n\n        static mapToJSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return TypeScriptCompiler.mapToFileNameExtension(".js", fileName, wholeFileNameReplaced);\n        }\n\n        public emitUnit(script: Script, reuseEmitter?: bool, emitter?: Emitter) {\n            if (!script.emitRequired(this.emitSettings)) {\n                return null;\n            }\n\n            var fname = script.locationInfo.filename;\n            if (!emitter) {\n                var outFname = this.emitSettings.mapOutputFileName(fname, TypeScriptCompiler.mapToJSFileName);\n                var outFile = this.createFile(outFname, this.useUTF8ForFile(script));\n                emitter = new Emitter(this.typeChecker, outFname, outFile, this.emitSettings, this.errorReporter);\n                if (this.settings.mapSourceFiles) {\n                    emitter.setSourceMappings(new TypeScript.SourceMapper(fname, outFname, outFile, this.createFile(outFname + SourceMapper.MapFileExtension, false), this.errorReporter));\n                }\n            } else if (this.settings.mapSourceFiles) {\n                emitter.setSourceMappings(new TypeScript.SourceMapper(fname, emitter.emittingFileName, emitter.outfile, emitter.sourceMapper.sourceMapOut, this.errorReporter));\n            }\n\n            this.typeChecker.locationInfo = script.locationInfo;\n            emitter.emitJavascript(script, TokenID.Comma, false);\n            if (!reuseEmitter) {\n                emitter.Close();\n                return null;\n            } else {\n                return emitter;\n            }\n        }\n\n        public emit(ioHost: EmitterIOHost) {\n            this.parseEmitOption(ioHost);\n\n            var emitter: Emitter = null;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || emitter == null) {\n                    emitter = this.emitUnit(script, !this.emitSettings.outputMany);\n                } else {\n                    this.emitUnit(script, true, emitter);\n                }\n            }\n\n            if (emitter) {\n                emitter.Close();\n            }\n        }\n\n        public emitToOutfile(outputFile: ITextWriter) {\n            if (this.settings.mapSourceFiles) {\n                throw Error("Cannot generate source map");\n            }\n\n            if (this.settings.generateDeclarationFiles) {\n                throw Error("Cannot generate declaration files");\n            }\n\n            if (this.settings.outputOption != "") {\n                throw Error("Cannot parse output option");\n            }\n\n            var emitter: Emitter = emitter = new Emitter(this.typeChecker, "stdout", outputFile, this.emitSettings, this.errorReporter);;\n            for (var i = 0, len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                this.typeChecker.locationInfo = script.locationInfo;\n                emitter.emitJavascript(script, TokenID.Comma, false);\n            }\n        }\n\n        public emitAST(ioHost: EmitterIOHost) {\n            this.parseEmitOption(ioHost);\n\n            var outFile: ITextWriter = null;\n            var context: PrintContext = null;\n\n            for (var i = 0, ';
var v27602 = v27603 + 'len = this.scripts.members.length; i < len; i++) {\n                var script = <Script>this.scripts.members[i];\n                if (this.emitSettings.outputMany || context == null) {\n                    var fname = this.units[i].filename;\n                    var mapToTxtFileName = (fileName: string, wholeFileNameReplaced: bool) => {\n                        return TypeScriptCompiler.mapToFileNameExtension(".txt", fileName, wholeFileNameReplaced);\n                    };\n                    var outFname = this.emitSettings.mapOutputFileName(fname, mapToTxtFileName);\n                    outFile = this.createFile(outFname, this.useUTF8ForFile(script));\n                    context = new PrintContext(outFile, this.parser);\n                }\n                getAstWalkerFactory().walk(script, prePrintAST, postPrintAST, null, context);\n                if (this.emitSettings.outputMany) {\n                    try {\n                        outFile.Close();\n                    } catch (e) {\n                        this.errorReporter.emitterError(null, e.message);\n                    }\n                }\n            }\n\n            if (!this.emitSettings.outputMany) {\n                try {\n                    outFile.Close();\n                } catch (e) {\n                    this.errorReporter.emitterError(null, e.message);\n                }\n            }\n        }\n\n        private outputScriptToUTF8(script: Script): bool {\n            return script.containsUnicodeChar || (this.emitSettings.emitComments && script.containsUnicodeCharInComment);\n        }\n\n        private outputScriptsToUTF8(scripts: Script[]): bool {\n            for (var i = 0, len = scripts.length; i < len; i++) {\n                var script = scripts[i];\n                if (this.outputScriptToUTF8(script)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                // Creating files can cause exceptions, report them.   \n                return this.emitSettings.ioHost.createFile(fileName, useUTF8);\n            } catch (ex) {\n                this.errorReporter.emitterError(null, ex.message);\n            }\n        }\n    }\n\n    export class ScopeEntry {\n        constructor (\n            public name: string,\n            public type: string,\n            public sym: Symbol) {\n        }\n    }\n\n    export class ScopeTraversal {\n        constructor (private compiler: TypeScriptCompiler) {\n        }\n\n        public getScope(enclosingScopeContext: EnclosingScopeContext): SymbolScope {\n            if (enclosingScopeContext.enclosingObjectLit && enclosingScopeContext.isMemberCompletion) {\n                return enclosingScopeContext.getObjectLiteralScope();\n            }\n            else if (enclosingScopeContext.isMemberCompletion) {\n                if (enclosingScopeContext.useFullAst) {\n                    return this.compiler.typeFlow.findMemberScopeAtFullAst(enclosingScopeContext)\n                }\n                else {\n                    return this.compiler.typeFlow.findMemberScopeAt(enclosingScopeContext)\n                }\n            }\n            else {\n                return enclosingScopeContext.getScope();\n            }\n        }\n\n        public getScopeEntries(enclosingScopeContext: EnclosingScopeContext): ScopeEntry[] {\n            var scope = this.getScope(enclosingScopeContext);\n            if (scope == null) {\n                return [];\n            }\n\n            var inScopeNames: IHashTable = new StringHashTable();\n            var allSymbolNames: string[] = scope.getAllSymbolNames(enclosingScopeContext.isMemberCompletion);\n\n            // there may be duplicates between the type and value tables, so batch the symbols\n            // getTypeNamesForNames will prefer the entry in the value table\n            for (var i = 0; i < allSymbolNames.length; i++) {\n                var name = allSymbolNames[i];\n\n                // Skip global/internal symbols that won\'t compile in user code\n                if (name == globalId || name == "_Core" || name == "_element") {\n                    continue;\n                }\n\n                inScopeNames.add(name, "");\n            }\n\n            var svModuleDecl = this.compiler.typeChecker.currentModDecl;\n            this.compiler.typeChecker.currentModDecl = enclosingScopeContext.deepestModuleDecl;\n\n            var result = this.getTypeNamesForNames(enclosingScopeContext, inScopeNames.getAllKeys(), scope);\n\n            this.compiler.typeChecker.currentModDecl = svModuleDecl;\n            return result;\n        }\n\n        private getTypeNamesForNames(enclosingScopeContext: EnclosingScopeContext, allNames: string[], scope: SymbolScope): ScopeEntry[] {\n            var result: ScopeEntry[] = [];\n\n            var enclosingScope = enclosingScopeContext.getScope();\n            for (var i = 0; i < allNames.length; i++) {\n                var name = allNames[i];\n                //';
var v27601 = v27602 + ' Search for the id in the value space first\n                // if we don\'t find it, search in the type space.\n                // We don\'t want to search twice, because the first\n                // search may insert the name in the symbol value table\n                // if the scope is aggregate\n                var publicsOnly = enclosingScopeContext.publicsOnly && enclosingScopeContext.isMemberCompletion;\n                var symbol = scope.find(name, publicsOnly, false/*typespace*/);  // REVIEW: Should search public members only?\n                if (symbol == null) {\n                    symbol = scope.find(name, publicsOnly, true/*typespace*/);\n                }\n\n                var displayThisMember = symbol && symbol.flags & SymbolFlags.Private ? symbol.container == scope.container : true;\n\n                if (symbol) {\n                    // Do not add dynamic module names to the list, since they\'re not legal as identifiers\n                    if (displayThisMember && !isQuoted(symbol.name) && !isRelative(symbol.name)) {\n                        var typeName = symbol.getType().getScopedTypeName(enclosingScope);\n                        result.push(new ScopeEntry(name, typeName, symbol));\n                    }\n                }\n                else {\n                    // Special case for "true" and "false"\n                    // REVIEW: This may no longer be necessary?\n                    if (name == "true" || name == "false") {\n                        result.push(new ScopeEntry(name, "bool", this.compiler.typeChecker.booleanType.symbol));\n                    }\n                }\n            }\n\n            return result;\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum Primitive {\n        None = 0,\n        Void = 1,\n        Double = 2,\n        String = 4,\n        Boolean = 8,\n        Any = 16,\n        Null = 32,\n        Undefined = 64,\n    }\n\n    export class MemberName {\n        public prefix: string = "";\n        public suffix: string = "";\n\n        public isString() { return false; }\n        public isArray() { return false; }\n\n        public toString(): string {\n            return MemberName.memberNameToString(this);\n        }\n\n        static memberNameToString(memberName: MemberName): string {\n            var result = memberName.prefix;\n\n            if (memberName.isString()) {\n                result += (<MemberNameString>memberName).text;\n            }\n            else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    result += memberNameToString(ar.entries[index]);\n                    result += ar.delim;\n                }\n            }\n\n            result += memberName.suffix;\n            return result;\n        }\n\n        static create(text: string): MemberName;\n        static create(entry: MemberName, prefix: string, suffix: string): MemberName;\n        static create(arg1: any, arg2?: any, arg3?: any): MemberName {\n            if (typeof arg1 == "string") {\n                return new MemberNameString(arg1);\n            }\n            else {\n                var result = new MemberNameArray();\n                if (arg2)\n                    result.prefix = arg2;\n                if (arg3)\n                    result.suffix = arg3;\n                result.entries.push(arg1);\n                return result;\n            }\n        }\n    }\n\n    export class MemberNameString extends MemberName {\n        constructor (public text: string) {\n            super()\n        }\n\n        public isString() { return true; }\n    }\n\n    export class MemberNameArray extends MemberName {\n        public delim: string = "";\n        public entries: MemberName[] = [];\n\n        public isArray() { return true; }\n\n        public add(entry: MemberName) {\n            this.entries.push(entry);\n        }\n\n        public addAll(entries: MemberName[]) {\n            for (var i = 0 ; i < entries.length; i++) {\n                this.entries.push(entries[i]);\n            }\n        }\n    }\n\n    var currentTypeID = -1;\n\n    export class Type {\n        public typeID = currentTypeID++;\n\n        public members: ScopedMembers;\n        public ambientMembers: ScopedMembers;\n\n        public construct: SignatureGroup = null;\n        public call: SignatureGroup = null;\n        public index: SignatureGroup =';
var v27600 = v27601 + ' null;\n\n        // REVIEW: for either of the below, why do we have lists of types and lists of type links?\n        // interface can only extend\n        public extendsList: Type[];\n        public extendsTypeLinks: TypeLink[];\n\n        // class can also implement\n        public implementsList: Type[];\n        public implementsTypeLinks: TypeLink[];\n\n        public passTypeCreated: number = CompilerDiagnostics.analysisPass;\n\n        public baseClass(): Type {\n            if (this.extendsList && (this.extendsList.length > 0)) {\n                return this.extendsList[0];\n            }\n            else {\n                return null;\n            }\n        }\n\n        public elementType: Type;\n\n        public getArrayBase(arrInstType: Type, checker: TypeChecker): Type {\n            return this.arrayCache.specialize(arrInstType, checker);\n        }\n\n        public primitiveTypeClass: number = Primitive.None;\n\n        // REVIEW: Prune constructorScope\n        public constructorScope: SymbolScope;\n        public containedScope: SymbolScope;\n        public memberScope: SymbolScope;\n\n        public arrayCache: ArrayCache;\n\n        public typeFlags = TypeFlags.None;\n\n        public symbol: TypeSymbol;\n\n        public enclosingType: Type;\n        public instanceType: Type;\n\n        // REVIEW: Prune\n        public isClass() { return this.instanceType != null; }\n        public isArray() { return this.elementType != null; }\n        public isClassInstance() {\n            return this.symbol && !this.elementType && (<TypeSymbol>this.symbol).type.isClass();\n        }\n\n        public getInstanceType() {\n            if (this.isClass()) {\n                return this.instanceType;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public hasImplementation() { return hasFlag(this.typeFlags, TypeFlags.HasImplementation); }\n        public setHasImplementation() { this.typeFlags |= TypeFlags.HasImplementation; }\n\n        public isDouble() { return hasFlag(this.primitiveTypeClass, Primitive.Double); }\n        public isString() { return hasFlag(this.primitiveTypeClass, Primitive.String); }\n        public isBoolean() { return hasFlag(this.primitiveTypeClass, Primitive.Boolean); }\n        public isNull() { return hasFlag(this.primitiveTypeClass, Primitive.Null); }\n\n        // REVIEW: No need for this to be a method\n        public getTypeName(): string {\n            return this.getMemberTypeName("", true, false, null);\n        }\n\n        public getScopedTypeName(scope: SymbolScope) {\n            return this.getMemberTypeName("", true, false, scope);\n        }\n\n        public getScopedTypeNameEx(scope: SymbolScope) {\n            return this.getMemberTypeNameEx("", true, false, scope);\n        }\n\n        // REVIEW: No need for this to be a method\n        public callCount() {\n            var total = 0;\n            if (this.call) {\n                total += this.call.signatures.length;\n            }\n            if (this.construct) {\n                total += this.construct.signatures.length;\n            }\n            if (this.index) {\n                total += this.index.signatures.length;\n            }\n            return total;\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeName(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope): string {\n            var memberName = this.getMemberTypeNameEx(prefix, topLevel, isElementType, scope);\n            return memberName.toString();\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeNameEx(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope): MemberName {\n            if (this.elementType) {\n                return MemberName.create(this.elementType.getMemberTypeNameEx(prefix, false, true, scope), "", "[]");\n            }\n            else if (this.symbol && this.symbol.name && this.symbol.name != "_anonymous" &&\n                     (((this.call == null) && (this.construct == null) && (this.index == null)) ||\n                      (hasFlag(this.typeFlags, TypeFlags.BuildingName)) ||\n                      (this.members && (!this.isClass())))) {\n                var tn = this.symbol.scopeRelativeName(scope);\n                return MemberName.create(tn == "null" ? "any" : tn); // REVIEW: GROSS!!!\n            }\n            else {\n                if (this.members || this.call || this.construct) {\n                    if (hasFlag(this.typeFlags, TypeFlags.BuildingName)) {\n                        return MemberName.create("this");\n                    }\n                    this.typeFlags |= TypeFlags.BuildingName;\n                    var builder = "";\n                    var allMemberNames = new MemberNameArray();\n                    var curlies = isElementType || this.index != null;\n                    var memCount = 0;\n                    var delim = "; ";\n                    if (this.members) {\n                        this.members.allMembers.map((key, ';
var v27599 = v27600 + 's, unused) => {\n                            var sym = <Symbol>s;\n                            if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                                // Remove the delimiter character from the generated type name, since\n                                // our "allMemberNames" array takes care of storing delimiters\n                                var typeNameMember = sym.getTypeNameEx(scope);\n                                if (typeNameMember.isArray() && (<MemberNameArray>typeNameMember).delim == delim) {\n                                    allMemberNames.addAll((<MemberNameArray>typeNameMember).entries);\n                                } else {\n                                    allMemberNames.add(typeNameMember);\n                                }\n                                memCount++;\n                                curlies = true;\n                            }\n                        }, null);\n                    }\n\n                    var signatureCount = this.callCount();\n                    var j: number;\n                    var len = 0;\n                    var shortform = !curlies && signatureCount == 1 && topLevel;\n                    if (this.call) {\n                        allMemberNames.addAll(this.call.toStrings(prefix, shortform, scope));\n                    }\n\n                    if (this.construct) {\n                        allMemberNames.addAll(this.construct.toStrings("new", shortform, scope));\n                    }\n\n                    if (this.index) {\n                        allMemberNames.addAll(this.index.toStrings("", shortform, scope));\n                    }\n\n                    if ((curlies) || ((signatureCount > 1) && topLevel)) {\n                        allMemberNames.prefix = "{ ";\n                        allMemberNames.suffix = "}";\n                        allMemberNames.delim = delim;\n                    } else if (allMemberNames.entries.length > 1) {\n                        allMemberNames.delim = delim;\n                    }\n\n                    this.typeFlags &= (~TypeFlags.BuildingName);\n                    if ((signatureCount == 0) && (memCount == 0)) {\n                        return MemberName.create("{}");\n                    }\n                    else {\n                        return allMemberNames;\n                    }\n                }\n                else {\n                    return MemberName.create("{}");\n                }\n            }\n        }\n\n        public checkDecl(checker: TypeChecker) {\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST) {\n                    checker.typeFlow.inScopeTypeCheckDecl(this.symbol.declAST);\n                }\n            }\n        }\n\n        public getMemberScope(flow: TypeFlow) {\n            if (this == flow.anyType) {\n                return null;\n            }\n            else if (this.isDouble()) {\n                if (flow.numberInterfaceType) {\n                    return flow.numberInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.isBoolean()) {\n                if (flow.booleanInterfaceType) {\n                    return flow.booleanInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this == flow.stringType) {\n                if (flow.stringInterfaceType) {\n                    return flow.stringInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.elementType) {\n                if (flow.arrayInterfaceType) {\n                    var arrInstType = this.elementType.getArrayBase(flow.arrayInterfaceType, flow.checker);\n                    return arrInstType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return this.memberScope;\n            }\n        }\n\n        public isReferenceType() {\n            return this.members || this.extendsList ||\n                this.construct || this.call || this.index ||\n                this.elementType;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker, membersOnly: bool): Type {\n            if (pattern == this) {\n                return replacement;\n            }\n            var result = this;\n            if (membersOnly) {\n                // assume interface type without bases\n                if (this.isReferenceType()) {\n                    result = new Type();\n                    if (this.members) {\n                        result.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                        this.members.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n         ';
var v27598 = v27599 + "                   var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.members.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    if (this.ambientMembers) {\n                        result.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                        this.ambientMembers.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.ambientMembers.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    result.containedScope = checker.scopeOf(result);\n                    result.memberScope = result.containedScope;\n                }\n            }\n            else {\n                if (this.elementType) {\n                    if (this.elementType == pattern) {\n                        result = checker.makeArrayType(replacement);\n                    }\n                    else {\n                        if (this.elementType.elementType == pattern) {\n                            result = checker.makeArrayType(checker.makeArrayType(replacement));\n                        }\n                    }\n                }\n                else if (this.call) {\n                    result = new Type();\n                    result.call = this.call.specializeType(pattern, replacement, checker);\n                }\n            }\n            return result;\n        }\n\n        public hasBase(baseType: Type): bool {\n            if (baseType == this) {\n                return true;\n            }\n            else {\n                if (this.extendsList) {\n                    for (var i = 0, len = this.extendsList.length; i < len; i++) {\n                        if (this.extendsList[i].hasBase(baseType)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public mergeOrdered(b: Type, checker: TypeChecker, acceptVoid: bool, comparisonInfo?: TypeComparisonInfo): Type {\n            if ((this == checker.anyType) || (b == checker.anyType)) {\n                return checker.anyType;\n            }\n            else if (this == b) {\n                return this;\n            }\n            else if ((b == checker.nullType) && this != checker.nullType) {\n                return this;\n            }\n            else if ((this == checker.nullType) && (b != checker.nullType)) {\n                return b;\n            }\n            else if (acceptVoid && (b == checker.voidType) && this != checker.voidType) {\n                return this;\n            }\n            else if (acceptVoid && (this == checker.voidType) && (b != checker.voidType)) {\n                return b;\n            }\n            else if ((b == checker.undefinedType) && this != checker.undefinedType) {\n                return this;\n            }\n            else if ((this == checker.undefinedType) && (b != checker.undefinedType)) {\n                return b;\n            }\n            else if (this.elementType && b.elementType) {\n                if (this.elementType == b.elementType) {\n                    return this;\n                }\n                else {\n                    var mergedET = this.elementType.mergeOrdered(b.elementType, checker, acceptVoid, comparisonInfo);\n                    if (mergedET == null) {\n                        return checker.makeArrayType(checker.anyType);\n                    }\n                    else {\n                        return checker.makeArrayType(mergedET);\n                    }\n                }\n            }\n            else if (checker.sourceIsSubtypeOfTarget(this, b, comparisonInfo)) {\n                return b;\n            }\n            else if (checker.sourceIsSubtypeOfTarget(b, this, comparisonInfo)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public isModuleType() { return false; }\n        public hasMembers() { return this.members != null; }\n        public getAllEnclosedTypes(): ScopedMembers { return null; }\n        public getAllAmbientEnc";
var v27597 = v27598 + 'losedTypes(): ScopedMembers { return null; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n\n        public getDocComments(): Comment[]{\n            if (this.elementType || !this.symbol) {\n                return [];\n            }\n\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST.nodeType == NodeType.FuncDecl) {\n                    // Its a constructor - use the class declaration instead\n                    return (<FuncDecl>this.symbol.declAST).classDecl.getDocComments();\n                } else {\n                    // Its a class without constructor\n                    return this.symbol.getDocComments();\n                }\n            }\n\n            if (this.symbol.name && this.symbol.name != "_anonymous" &&\n                (((this.call == null) && (this.construct == null) && (this.index == null))\n                  || this.members)) {\n                return this.symbol.getDocComments();\n            }\n\n            return [];\n        }\n    }\n\n    export interface ITypeCollection {\n        // returns null when types are exhausted\n        getLength(): number;\n        setTypeAtIndex(index: number, type: Type): void;\n        getTypeAtIndex(index: number): Type;\n    }\n\n    export class ModuleType extends Type {\n\n        constructor (public enclosedTypes: ScopedMembers, public ambientEnclosedTypes: ScopedMembers) {\n            super();\n        }\n\n        public isModuleType() { return true; }\n        public hasMembers() { return this.members != null || this.enclosedTypes != null; }\n        public getAllEnclosedTypes() { return this.enclosedTypes; }\n        public getAllAmbientEnclosedTypes() { return this.ambientEnclosedTypes; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n        public importedModules: ImportDeclaration[] = [];\n\n        // Finds the dynamic module name of moduleType in the members\n        // ignoreSymbols define list of symbols already visited - to avoid recursion\n        static findDynamicModuleNameInHashTable(moduleType: Type, members: IHashTable) {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            members.map((key, s, c) => {\n                if (moduleName == null && !isQuoted(key)) {\n                    var symbol = <Symbol>s;\n                    var type = symbol.getType();\n                    if (type == moduleType) {\n                        // If this is the module type we were looking for\n                        moduleName = { name: key, symbol: symbol };\n                    }\n                }\n            }, null);\n\n            return moduleName;\n        }\n\n        // Finds the Dynamic module name of the moduleType in this moduleType\n        // onlyPublic tells if we are looking for module name in public members only\n        public findDynamicModuleName(moduleType: Type): { name: string; symbol: Symbol; } {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            // Not cached, so seach and add to the cache\n            moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.members.allMembers);\n            if (moduleName == null) {\n                moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.ambientMembers.allMembers);\n            }\n            return moduleName;\n        }\n    }\n\n    export class TypeLink {\n        public type: Type = null;\n        public ast: AST = null;\n    }\n\n    export function getTypeLink(ast: AST, checker: TypeChecker, autoVar: bool): TypeLink {\n        var result = new TypeLink();\n\n        result.ast = ast;\n\n        if ((ast == null) && (autoVar)) {\n            result.type = checker.anyType;\n        }\n        else {\n            result.type = null;\n        }\n\n        return result;\n    }\n\n}//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule Tools {\n    export interface IWalkContext {\n        goChildren: bool;\n        goNextSibling: bool;\n        // visit siblings in reverse execution order\n        reverseSiblings: bool;\n    }\n\n    export class BaseWalkContext implements IWalkContext {\n        public goChildren = true;\n        public goNextSibling = true;\n        public reverseSiblings = false;\n    }\n}';
var compiler_input = v27597;
var TypeScript;
var v18633 = TypeScript;
var v22789 = !v18633;
if(v22789) {
  v18633 = TypeScript = {}
}
var v12328 = v18633;
v48(v12328);
var v18634 = TypeScript;
var v22790 = !v18634;
if(v22790) {
  v18634 = TypeScript = {}
}
var v12329 = v18634;
v49(v12329);
var v18635 = TypeScript;
var v22791 = !v18635;
if(v22791) {
  v18635 = TypeScript = {}
}
var v12330 = v18635;
v78(v12330);
var v12331 = this.__extends;
var v18636 = !v12331;
if(v18636) {
  v12331 = v79
}
var __extends = v12331;
var v18637 = TypeScript;
var v22792 = !v18637;
if(v22792) {
  v18637 = TypeScript = {}
}
var v12332 = v18637;
v322(v12332);
var v18638 = TypeScript;
var v22793 = !v18638;
if(v22793) {
  v18638 = TypeScript = {}
}
var v12333 = v18638;
v333(v12333);
var v18639 = TypeScript;
var v22794 = !v18639;
if(v22794) {
  v18639 = TypeScript = {}
}
var v12334 = v18639;
v335(v12334);
var v18640 = TypeScript;
var v22795 = !v18640;
if(v22795) {
  v18640 = TypeScript = {}
}
var v12335 = v18640;
v399(v12335);
var v18641 = TypeScript;
var v22796 = !v18641;
if(v22796) {
  v18641 = TypeScript = {}
}
var v12336 = v18641;
v407(v12336);
var v18642 = TypeScript;
var v22797 = !v18642;
if(v22797) {
  v18642 = TypeScript = {}
}
var v12337 = v18642;
v417(v12337);
var v18643 = TypeScript;
var v22798 = !v18643;
if(v22798) {
  v18643 = TypeScript = {}
}
var v12338 = v18643;
v420(v12338);
var JSON2 = {};
v427();
var v18644 = TypeScript;
var v22799 = !v18644;
if(v22799) {
  v18644 = TypeScript = {}
}
var v12339 = v18644;
v433(v12339);
var v18645 = TypeScript;
var v22800 = !v18645;
if(v22800) {
  v18645 = TypeScript = {}
}
var v12340 = v18645;
v492(v12340);
var v18646 = TypeScript;
var v22801 = !v18646;
if(v22801) {
  v18646 = TypeScript = {}
}
var v12341 = v18646;
v519(v12341);
var v18647 = TypeScript;
var v22802 = !v18647;
if(v22802) {
  v18647 = TypeScript = {}
}
var v12342 = v18647;
v592(v12342);
var v18648 = TypeScript;
var v22803 = !v18648;
if(v22803) {
  v18648 = TypeScript = {}
}
var v12343 = v18648;
v599(v12343);
var v18649 = TypeScript;
var v22804 = !v18649;
if(v22804) {
  v18649 = TypeScript = {}
}
var v12344 = v18649;
v675(v12344);
var v18650 = TypeScript;
var v22805 = !v18650;
if(v22805) {
  v18650 = TypeScript = {}
}
var v12345 = v18650;
v680(v12345);
var v18651 = TypeScript;
var v22806 = !v18651;
if(v22806) {
  v18651 = TypeScript = {}
}
var v12346 = v18651;
v698(v12346);
var v18652 = TypeScript;
var v22807 = !v18652;
if(v22807) {
  v18652 = TypeScript = {}
}
var v12347 = v18652;
v711(v12347);
var v18653 = TypeScript;
var v22808 = !v18653;
if(v22808) {
  v18653 = TypeScript = {}
}
var v12348 = v18653;
v794(v12348);
var v18654 = TypeScript;
var v22809 = !v18654;
if(v22809) {
  v18654 = TypeScript = {}
}
var v12349 = v18654;
v862(v12349);
var v18655 = TypeScript;
var v22810 = !v18655;
if(v22810) {
  v18655 = TypeScript = {}
}
var v12350 = v18655;
v892(v12350);
var v18656 = TypeScript;
var v22811 = !v18656;
if(v22811) {
  v18656 = TypeScript = {}
}
var v12351 = v18656;
v964(v12351);
var v18657 = TypeScript;
var v22812 = !v18657;
if(v22812) {
  v18657 = TypeScript = {}
}
var v12352 = v18657;
v967(v12352);
var v18658 = TypeScript;
var v22813 = !v18658;
if(v22813) {
  v18658 = TypeScript = {}
}
var v12353 = v18658;
v1113(v12353);
var v18659 = TypeScript;
var v22814 = !v18659;
if(v22814) {
  v18659 = TypeScript = {}
}
var v12354 = v18659;
v1172(v12354);
var v18660 = TypeScript;
var v22815 = !v18660;
if(v22815) {
  v18660 = TypeScript = {}
}
var v12355 = v18660;
v1173(v12355);
var v18661 = TypeScript;
var v22816 = !v18661;
if(v22816) {
  v18661 = TypeScript = {}
}
var v12356 = v18661;
v1180(v12356);
var v18662 = TypeScript;
var v22817 = !v18662;
if(v22817) {
  v18662 = TypeScript = {}
}
var v12357 = v18662;
v1186(v12357);
var v18663 = TypeScript;
var v22818 = !v18663;
if(v22818) {
  v18663 = TypeScript = {}
}
var v12358 = v18663;
v1195(v12358);
var v18664 = TypeScript;
var v22819 = !v18664;
if(v22819) {
  v18664 = TypeScript = {}
}
var v12359 = v18664;
v1233(v12359);
var v18665 = TypeScript;
var v22820 = !v18665;
if(v22820) {
  v18665 = TypeScript = {}
}
var v12360 = v18665;
v1288(v12360);
var v18666 = TypeScript;
var v22821 = !v18666;
if(v22821) {
  v18666 = TypeScript = {}
}
var v12361 = v18666;
v1311(v12361);
var IOUtils;
var v18667 = IOUtils;
var v22822 = !v18667;
if(v22822) {
  v18667 = IOUtils = {}
}
var v12362 = v18667;
v1312(v12362);
var IO = v1357();
var OptionsParser = v1365();
var CommandLineHost = v1370();
var BatchCompiler = v1409();
var completed = 0;
var benchmarks = JAMScript.call(BenchmarkSuite.CountBenchmarks, BenchmarkSuite, []);
var success = true;
var latencyBenchmarks = ["Splay", "Mandreel"];
var v12363;
var v22823 = typeof skipBenchmarks;
var v18668 = v22823 === "undefined";
if(v18668) {
  v12363 = []
}else {
  v12363 = skipBenchmarks
}
var skipBenchmarks = v12363;

