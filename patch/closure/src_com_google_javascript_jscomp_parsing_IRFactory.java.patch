--- closure-orig/src/com/google/javascript/jscomp/parsing/IRFactory.java	2015-02-27 11:55:33.529744051 -0600
+++ closure/src/com/google/javascript/jscomp/parsing/IRFactory.java	2015-02-27 12:14:59.533730946 -0600
@@ -97,6 +97,10 @@
 import com.google.javascript.jscomp.parsing.parser.trees.TemplateSubstitutionTree;
 import com.google.javascript.jscomp.parsing.parser.trees.ThisExpressionTree;
 import com.google.javascript.jscomp.parsing.parser.trees.ThrowStatementTree;
+// JAM begin
+import com.google.javascript.jscomp.parsing.parser.trees.TransactionStatementTree;
+import com.google.javascript.jscomp.parsing.parser.trees.TransactionExpressionTree;
+// JAM end
 import com.google.javascript.jscomp.parsing.parser.trees.TryStatementTree;
 import com.google.javascript.jscomp.parsing.parser.trees.TypeNameTree;
 import com.google.javascript.jscomp.parsing.parser.trees.TypedParameterTree;
@@ -1942,6 +1946,22 @@
           transformBlock(stmt.body));
     }
 
+    // JAM begin
+    Node processTransactionStatement(TransactionStatementTree stmt) {
+      return newNode(
+        Token.TRANSACTION,
+        transform(stmt.introspector),
+        transform(stmt.body));
+    }
+    
+    Node processTransactionExpression(TransactionExpressionTree stmt) {
+      return newNode(
+        Token.TRANSACTION,
+        transform(stmt.introspector),
+        transformBlock(stmt.body));
+    }
+    // JAM end
+
     Node processMissingExpression(MissingPrimaryExpressionTree tree) {
       // This will already have been reported as an error by the parser.
       // Try to create something valid that ide mode might be able to
@@ -2329,6 +2349,14 @@
           return processSwitchStatement(node.asSwitchStatement());
         case THROW_STATEMENT:
           return processThrowStatement(node.asThrowStatement());
+        // JAM begin
+        case TRANSACTION:
+          if (node instanceof TransactionExpressionTree) {
+            return processTransactionExpression(node.asTransactionExpression());
+          } else {
+            return processTransactionStatement(node.asTransactionStatement());
+          }
+        // JAM end
         case TRY_STATEMENT:
           return processTryStatement(node.asTryStatement());
         case VARIABLE_STATEMENT: // var const let

