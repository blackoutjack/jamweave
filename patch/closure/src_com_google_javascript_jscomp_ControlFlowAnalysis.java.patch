--- closure-orig/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	2014-10-03 11:38:06.622298474 -0500
+++ closure/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	2014-10-02 21:15:28.800924881 -0500
@@ -256,6 +256,9 @@
         case Token.IF:
         case Token.WHILE:
         case Token.WITH:
+        // JAM begin
+        case Token.TRANSACTION:
+        // JAM end
           return n != parent.getFirstChild();
         case Token.DO:
           return n != parent.getFirstChild().getNext();
@@ -347,12 +350,28 @@
         return;
       case Token.LABEL:
         return;
+      // JAM begin
+      case Token.TRANSACTION:
+        handleTransaction(n);
+        return;
+      // JAM end
       default:
         handleStmt(n);
         return;
     }
   }
 
+  // JAM begin
+  private void handleTransaction(Node node) {
+    Node ispect = node.getFirstChild();
+    Node body = ispect.getNext();
+    createEdge(node, Branch.UNCOND, computeFallThrough(body));
+    connectToPossibleExceptionHandler(node, ispect);
+    // %%% Also need to model the potential calling of the handler, 
+    // %%% which is somewhat like exceptions.
+  }
+  // JAM end
+
   private void handleIf(Node node) {
     Node thenBlock = node.getFirstChild().getNext();
     Node elseBlock = thenBlock.getNext();

